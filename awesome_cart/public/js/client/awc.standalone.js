!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).awc=t()}}(function(){return function(){return function t(e,n,r){function i(a,s){if(!n[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};e[a][0].call(l.exports,function(t){return i(e[a][1][t]||t)},l,l.exports,t,e,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}}()({1:[function(t,e,n){(function(t,r,i){var o,a;o=function(){return function t(e,n,r){function i(a,s){if(!n[a]){if(!e[a]){var u="function"==typeof _dereq_&&_dereq_;if(!s&&u)return u(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};e[a][0].call(l.exports,function(t){return i(e[a][1][t]||t)},l,l.exports,t,e,n,r)}return n[a].exports}for(var o="function"==typeof _dereq_&&_dereq_,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(t,e,n){"use strict";e.exports=function(t){var e=t._SomePromiseArray;function n(t){var n=new e(t),r=n.promise();return n.setHowMany(1),n.setUnwrap(),n.init(),r}t.any=function(t){return n(t)},t.prototype.any=function(){return n(this)}}},{}],2:[function(e,n,r){"use strict";var i;try{throw new Error}catch(e){i=e}var o=e("./schedule"),a=e("./queue"),s=e("./util");function u(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new a(16),this._normalQueue=new a(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var t=this;this.drainQueues=function(){t._drainQueues()},this._schedule=o}function c(t,e,n){this._lateQueue.push(t,e,n),this._queueTick()}function l(t,e,n){this._normalQueue.push(t,e,n),this._queueTick()}function f(t){this._normalQueue._pushOne(t),this._queueTick()}function h(t){for(;t.length()>0;)p(t)}function p(t){var e=t.shift();if("function"!=typeof e)e._settlePromises();else{var n=t.shift(),r=t.shift();e.call(n,r)}}u.prototype.setScheduler=function(t){var e=this._schedule;return this._schedule=t,this._customScheduler=!0,e},u.prototype.hasCustomScheduler=function(){return this._customScheduler},u.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},u.prototype.disableTrampolineIfNecessary=function(){s.hasDevTools&&(this._trampolineEnabled=!1)},u.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},u.prototype.fatalError=function(e,n){n?(t.stderr.write("Fatal "+(e instanceof Error?e.stack:e)+"\n"),t.exit(2)):this.throwLater(e)},u.prototype.throwLater=function(t,e){if(1===arguments.length&&(e=t,t=function(){throw e}),"undefined"!=typeof setTimeout)setTimeout(function(){t(e)},0);else try{this._schedule(function(){t(e)})}catch(t){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},s.hasDevTools?(u.prototype.invokeLater=function(t,e,n){this._trampolineEnabled?c.call(this,t,e,n):this._schedule(function(){setTimeout(function(){t.call(e,n)},100)})},u.prototype.invoke=function(t,e,n){this._trampolineEnabled?l.call(this,t,e,n):this._schedule(function(){t.call(e,n)})},u.prototype.settlePromises=function(t){this._trampolineEnabled?f.call(this,t):this._schedule(function(){t._settlePromises()})}):(u.prototype.invokeLater=c,u.prototype.invoke=l,u.prototype.settlePromises=f),u.prototype._drainQueues=function(){h(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,h(this._lateQueue)},u.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},u.prototype._reset=function(){this._isTickUsed=!1},n.exports=u,n.exports.firstLineError=i},{"./queue":26,"./schedule":29,"./util":36}],3:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){var i=!1,o=function(t,e){this._reject(e)},a=function(t,e){e.promiseRejectionQueued=!0,e.bindingPromise._then(o,o,null,this,t)},s=function(t,e){0==(50397184&this._bitField)&&this._resolveCallback(e.target)},u=function(t,e){e.promiseRejectionQueued||this._reject(t)};t.prototype.bind=function(o){i||(i=!0,t.prototype._propagateFrom=r.propagateFromFunction(),t.prototype._boundValue=r.boundValueFunction());var c=n(o),l=new t(e);l._propagateFrom(this,1);var f=this._target();if(l._setBoundTo(c),c instanceof t){var h={promiseRejectionQueued:!1,promise:l,target:f,bindingPromise:c};f._then(e,a,void 0,l,h),c._then(s,u,void 0,l,h),l._setOnCancel(c)}else l._resolveCallback(f);return l},t.prototype._setBoundTo=function(t){void 0!==t?(this._bitField=2097152|this._bitField,this._boundTo=t):this._bitField=-2097153&this._bitField},t.prototype._isBound=function(){return 2097152==(2097152&this._bitField)},t.bind=function(e,n){return t.resolve(n).bind(e)}}},{}],4:[function(t,e,n){"use strict";var r;"undefined"!=typeof Promise&&(r=Promise);var i=t("./promise")();i.noConflict=function(){try{Promise===i&&(Promise=r)}catch(t){}return i},e.exports=i},{"./promise":22}],5:[function(t,e,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}e.exports=function(e){var n=t("./util"),r=n.canEvaluate;function i(t){return function(t,r){var i;if(null!=t&&(i=t[r]),"function"!=typeof i){var o="Object "+n.classString(t)+" has no method '"+n.toString(r)+"'";throw new e.TypeError(o)}return i}(t,this.pop()).apply(t,this)}function o(t){return t[this]}function a(t){var e=+this;return e<0&&(e=Math.max(0,e+t.length)),t[e]}n.isIdentifier,e.prototype.call=function(t){var e=[].slice.call(arguments,1);return e.push(t),this._then(i,void 0,void 0,e,void 0)},e.prototype.get=function(t){var e;if("number"==typeof t)e=a;else if(r){var n=(void 0)(t);e=null!==n?n:o}else e=o;return this._then(e,void 0,void 0,t,void 0)}}},{"./util":36}],6:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),a=o.tryCatch,s=o.errorObj,u=e._async;e.prototype.break=e.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var t=this,e=t;t._isCancellable();){if(!t._cancelBy(e)){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}var n=t._cancellationParent;if(null==n||!n._isCancellable()){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}t._isFollowing()&&t._followee().cancel(),t._setWillBeCancelled(),e=t,t=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(t){return t===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),u.invoke(this._cancelPromises,this,void 0))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=void 0},e.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(t,e){if(o.isArray(t))for(var n=0;n<t.length;++n)this._doInvokeOnCancel(t[n],e);else if(void 0!==t)if("function"==typeof t){if(!e){var r=a(t).call(this._boundValue());r===s&&(this._attachExtraTrace(r.e),u.throwLater(r.e))}}else t._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var t=this._onCancel();this._unsetOnCancel(),u.invoke(this._doInvokeOnCancel,this,t)},e.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(t,e,n){"use strict";e.exports=function(e){var n=t("./util"),r=t("./es5").keys,i=n.tryCatch,o=n.errorObj;return function(t,a,s){return function(u){var c=s._boundValue();t:for(var l=0;l<t.length;++l){var f=t[l];if(f===Error||null!=f&&f.prototype instanceof Error){if(u instanceof f)return i(a).call(c,u)}else if("function"==typeof f){var h=i(f).call(c,u);if(h===o)return h;if(h)return i(a).call(c,u)}else if(n.isObject(u)){for(var p=r(f),d=0;d<p.length;++d){var v=p[d];if(f[v]!=u[v])continue t}return i(a).call(c,u)}}return e}}}},{"./es5":13,"./util":36}],8:[function(t,e,n){"use strict";e.exports=function(t){var e=!1,n=[];function r(){this._trace=new r.CapturedTrace(i())}function i(){var t=n.length-1;if(t>=0)return n[t]}return t.prototype._promiseCreated=function(){},t.prototype._pushContext=function(){},t.prototype._popContext=function(){return null},t._peekContext=t.prototype._peekContext=function(){},r.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,n.push(this._trace))},r.prototype._popContext=function(){if(void 0!==this._trace){var t=n.pop(),e=t._promiseCreated;return t._promiseCreated=null,e}return null},r.CapturedTrace=null,r.create=function(){if(e)return new r},r.deactivateLongStackTraces=function(){},r.activateLongStackTraces=function(){var n=t.prototype._pushContext,o=t.prototype._popContext,a=t._peekContext,s=t.prototype._peekContext,u=t.prototype._promiseCreated;r.deactivateLongStackTraces=function(){t.prototype._pushContext=n,t.prototype._popContext=o,t._peekContext=a,t.prototype._peekContext=s,t.prototype._promiseCreated=u,e=!1},e=!0,t.prototype._pushContext=r.prototype._pushContext,t.prototype._popContext=r.prototype._popContext,t._peekContext=t.prototype._peekContext=i,t.prototype._promiseCreated=function(){var t=this._peekContext();t&&null==t._promiseCreated&&(t._promiseCreated=this)}},r}},{}],9:[function(e,n,r){"use strict";n.exports=function(n,r){var i,o,a,s=n._getDomain,u=n._async,c=e("./errors").Warning,l=e("./util"),f=e("./es5"),h=l.canAttachTrace,p=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,d=/\((?:timers\.js):\d+:\d+\)/,v=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,g=null,_=null,y=!1,m=!(0==l.env("BLUEBIRD_DEBUG")),b=!(0==l.env("BLUEBIRD_WARNINGS")||!m&&!l.env("BLUEBIRD_WARNINGS")),w=!(0==l.env("BLUEBIRD_LONG_STACK_TRACES")||!m&&!l.env("BLUEBIRD_LONG_STACK_TRACES")),S=0!=l.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(b||!!l.env("BLUEBIRD_W_FORGOTTEN_RETURN"));n.prototype.suppressUnhandledRejections=function(){var t=this._target();t._bitField=-1048577&t._bitField|524288},n.prototype._ensurePossibleRejectionHandled=function(){if(0==(524288&this._bitField)){this._setRejectionIsUnhandled();var t=this;setTimeout(function(){t._notifyUnhandledRejection()},1)}},n.prototype._notifyUnhandledRejectionIsHandled=function(){W("rejectionHandled",i,void 0,this)},n.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},n.prototype._returnedNonUndefined=function(){return 0!=(268435456&this._bitField)},n.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var t=this._settledValue();this._setUnhandledRejectionIsNotified(),W("unhandledRejection",o,t,this)}},n.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},n.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},n.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},n.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},n.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},n.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},n.prototype._warn=function(t,e,n){return H(t,e,n||this)},n.onPossiblyUnhandledRejection=function(t){var e=s();o="function"==typeof t?null===e?t:l.domainBind(e,t):void 0},n.onUnhandledRejectionHandled=function(t){var e=s();i="function"==typeof t?null===e?t:l.domainBind(e,t):void 0};var x=function(){};n.longStackTraces=function(){if(u.haveItemsQueued()&&!Z.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!Z.longStackTraces&&G()){var t=n.prototype._captureStackTrace,e=n.prototype._attachExtraTrace,i=n.prototype._dereferenceTrace;Z.longStackTraces=!0,x=function(){if(u.haveItemsQueued()&&!Z.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");n.prototype._captureStackTrace=t,n.prototype._attachExtraTrace=e,n.prototype._dereferenceTrace=i,r.deactivateLongStackTraces(),u.enableTrampoline(),Z.longStackTraces=!1},n.prototype._captureStackTrace=D,n.prototype._attachExtraTrace=B,n.prototype._dereferenceTrace=U,r.activateLongStackTraces(),u.disableTrampolineIfNecessary()}},n.hasLongStackTraces=function(){return Z.longStackTraces&&G()};var k=function(){try{if("function"==typeof CustomEvent){var t=new CustomEvent("CustomEvent");return l.global.dispatchEvent(t),function(t,e){var n={detail:e,cancelable:!0};f.defineProperty(n,"promise",{value:e.promise}),f.defineProperty(n,"reason",{value:e.reason});var r=new CustomEvent(t.toLowerCase(),n);return!l.global.dispatchEvent(r)}}return"function"==typeof Event?(t=new Event("CustomEvent"),l.global.dispatchEvent(t),function(t,e){var n=new Event(t.toLowerCase(),{cancelable:!0});return n.detail=e,f.defineProperty(n,"promise",{value:e.promise}),f.defineProperty(n,"reason",{value:e.reason}),!l.global.dispatchEvent(n)}):((t=document.createEvent("CustomEvent")).initCustomEvent("testingtheevent",!1,!0,{}),l.global.dispatchEvent(t),function(t,e){var n=document.createEvent("CustomEvent");return n.initCustomEvent(t.toLowerCase(),!1,!0,e),!l.global.dispatchEvent(n)})}catch(t){}return function(){return!1}}(),E=l.isNode?function(){return t.emit.apply(t,arguments)}:l.global?function(t){var e="on"+t.toLowerCase(),n=l.global[e];return!!n&&(n.apply(l.global,[].slice.call(arguments,1)),!0)}:function(){return!1};function C(t,e){return{promise:e}}var P={promiseCreated:C,promiseFulfilled:C,promiseRejected:C,promiseResolved:C,promiseCancelled:C,promiseChained:function(t,e,n){return{promise:e,child:n}},warning:function(t,e){return{warning:e}},unhandledRejection:function(t,e,n){return{reason:e,promise:n}},rejectionHandled:C},O=function(t){var e=!1;try{e=E.apply(null,arguments)}catch(t){u.throwLater(t),e=!0}var n=!1;try{n=k(t,P[t].apply(null,arguments))}catch(t){u.throwLater(t),n=!0}return n||e};function A(){return!1}function j(t,e,n){var r=this;try{t(e,n,function(t){if("function"!=typeof t)throw new TypeError("onCancel must be a function, got: "+l.toString(t));r._attachCancellationCallback(t)})}catch(t){return t}}function L(t){if(!this._isCancellable())return this;var e=this._onCancel();void 0!==e?l.isArray(e)?e.push(t):this._setOnCancel([e,t]):this._setOnCancel(t)}function F(){return this._onCancelField}function R(t){this._onCancelField=t}function T(){this._cancellationParent=void 0,this._onCancelField=void 0}function I(t,e){if(0!=(1&e)){this._cancellationParent=t;var n=t._branchesRemainingToCancel;void 0===n&&(n=0),t._branchesRemainingToCancel=n+1}0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}n.config=function(t){if("longStackTraces"in(t=Object(t))&&(t.longStackTraces?n.longStackTraces():!t.longStackTraces&&n.hasLongStackTraces()&&x()),"warnings"in t){var e=t.warnings;Z.warnings=!!e,S=Z.warnings,l.isObject(e)&&"wForgottenReturn"in e&&(S=!!e.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!Z.cancellation){if(u.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");n.prototype._clearCancellationData=T,n.prototype._propagateFrom=I,n.prototype._onCancel=F,n.prototype._setOnCancel=R,n.prototype._attachCancellationCallback=L,n.prototype._execute=j,M=I,Z.cancellation=!0}return"monitoring"in t&&(t.monitoring&&!Z.monitoring?(Z.monitoring=!0,n.prototype._fireEvent=O):!t.monitoring&&Z.monitoring&&(Z.monitoring=!1,n.prototype._fireEvent=A)),n},n.prototype._fireEvent=A,n.prototype._execute=function(t,e,n){try{t(e,n)}catch(t){return t}},n.prototype._onCancel=function(){},n.prototype._setOnCancel=function(t){},n.prototype._attachCancellationCallback=function(t){},n.prototype._captureStackTrace=function(){},n.prototype._attachExtraTrace=function(){},n.prototype._dereferenceTrace=function(){},n.prototype._clearCancellationData=function(){},n.prototype._propagateFrom=function(t,e){};var M=function(t,e){0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)};function N(){var t=this._boundTo;return void 0!==t&&t instanceof n?t.isFulfilled()?t.value():void 0:t}function D(){this._trace=new X(this._peekContext())}function B(t,e){if(h(t)){var n=this._trace;if(void 0!==n&&e&&(n=n._parent),void 0!==n)n.attachExtraTrace(t);else if(!t.__stackCleaned__){var r=V(t);l.notEnumerableProp(t,"stack",r.message+"\n"+r.stack.join("\n")),l.notEnumerableProp(t,"__stackCleaned__",!0)}}}function U(){this._trace=void 0}function H(t,e,r){if(Z.warnings){var i,o=new c(t);if(e)r._attachExtraTrace(o);else if(Z.longStackTraces&&(i=n._peekContext()))i.attachExtraTrace(o);else{var a=V(o);o.stack=a.message+"\n"+a.stack.join("\n")}O("warning",o)||q(o,"",!0)}}function $(t){for(var e=[],n=0;n<t.length;++n){var r=t[n],i="    (No stack trace)"===r||g.test(r),o=i&&K(r);i&&!o&&(y&&" "!==r.charAt(0)&&(r="    "+r),e.push(r))}return e}function V(t){var e=t.stack,n=t.toString();return e="string"==typeof e&&e.length>0?function(t){for(var e=t.stack.replace(/\s+$/g,"").split("\n"),n=0;n<e.length;++n){var r=e[n];if("    (No stack trace)"===r||g.test(r))break}return n>0&&"SyntaxError"!=t.name&&(e=e.slice(n)),e}(t):["    (No stack trace)"],{message:n,stack:"SyntaxError"==t.name?e:$(e)}}function q(t,e,n){if("undefined"!=typeof console){var r;if(l.isObject(t)){var i=t.stack;r=e+_(i,t)}else r=e+String(t);"function"==typeof a?a(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function W(t,e,n,r){var i=!1;try{"function"==typeof e&&(i=!0,"rejectionHandled"===t?e(r):e(n,r))}catch(t){u.throwLater(t)}"unhandledRejection"===t?O(t,n,r)||i||q(n,"Unhandled rejection "):O(t,r)}function z(t){var e;if("function"==typeof t)e="[function "+(t.name||"anonymous")+"]";else{if(e=t&&"function"==typeof t.toString?t.toString():l.toString(t),/\[object [a-zA-Z0-9$_]+\]/.test(e))try{e=JSON.stringify(t)}catch(t){}0===e.length&&(e="(empty array)")}return"(<"+function(t){return t.length<41?t:t.substr(0,38)+"..."}(e)+">, no stack trace)"}function G(){return"function"==typeof Y}var K=function(){return!1},Q=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;function J(t){var e=t.match(Q);if(e)return{fileName:e[1],line:parseInt(e[2],10)}}function X(t){this._parent=t,this._promisesCreated=0;var e=this._length=1+(void 0===t?0:t._length);Y(this,X),e>32&&this.uncycle()}l.inherits(X,Error),r.CapturedTrace=X,X.prototype.uncycle=function(){var t=this._length;if(!(t<2)){for(var e=[],n={},r=0,i=this;void 0!==i;++r)e.push(i),i=i._parent;for(r=(t=this._length=r)-1;r>=0;--r){var o=e[r].stack;void 0===n[o]&&(n[o]=r)}for(r=0;r<t;++r){var a=n[e[r].stack];if(void 0!==a&&a!==r){a>0&&(e[a-1]._parent=void 0,e[a-1]._length=1),e[r]._parent=void 0,e[r]._length=1;var s=r>0?e[r-1]:this;a<t-1?(s._parent=e[a+1],s._parent.uncycle(),s._length=s._parent._length+1):(s._parent=void 0,s._length=1);for(var u=s._length+1,c=r-2;c>=0;--c)e[c]._length=u,u++;return}}}},X.prototype.attachExtraTrace=function(t){if(!t.__stackCleaned__){this.uncycle();for(var e=V(t),n=e.message,r=[e.stack],i=this;void 0!==i;)r.push($(i.stack.split("\n"))),i=i._parent;!function(t){for(var e=t[0],n=1;n<t.length;++n){for(var r=t[n],i=e.length-1,o=e[i],a=-1,s=r.length-1;s>=0;--s)if(r[s]===o){a=s;break}for(s=a;s>=0;--s){var u=r[s];if(e[i]!==u)break;e.pop(),i--}e=r}}(r),function(t){for(var e=0;e<t.length;++e)(0===t[e].length||e+1<t.length&&t[e][0]===t[e+1][0])&&(t.splice(e,1),e--)}(r),l.notEnumerableProp(t,"stack",function(t,e){for(var n=0;n<e.length-1;++n)e[n].push("From previous event:"),e[n]=e[n].join("\n");return n<e.length&&(e[n]=e[n].join("\n")),t+"\n"+e.join("\n")}(n,r)),l.notEnumerableProp(t,"__stackCleaned__",!0)}};var Y=function(){var t=/^\s*at\s*/,e=function(t,e){return"string"==typeof t?t:void 0!==e.name&&void 0!==e.message?e.toString():z(e)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,g=t,_=e;var n=Error.captureStackTrace;return K=function(t){return p.test(t)},function(t,e){Error.stackTraceLimit+=6,n(t,e),Error.stackTraceLimit-=6}}var r,i=new Error;if("string"==typeof i.stack&&i.stack.split("\n")[0].indexOf("stackDetection@")>=0)return g=/@/,_=e,y=!0,function(t){t.stack=(new Error).stack};try{throw new Error}catch(t){r="stack"in t}return"stack"in i||!r||"number"!=typeof Error.stackTraceLimit?(_=function(t,e){return"string"==typeof t?t:"object"!=typeof e&&"function"!=typeof e||void 0===e.name||void 0===e.message?z(e):e.toString()},null):(g=t,_=e,function(t){Error.stackTraceLimit+=6;try{throw new Error}catch(e){t.stack=e.stack}Error.stackTraceLimit-=6})}();"undefined"!=typeof console&&void 0!==console.warn&&(a=function(t){console.warn(t)},l.isNode&&t.stderr.isTTY?a=function(t,e){var n=e?"\x1b[33m":"\x1b[31m";console.warn(n+t+"\x1b[0m\n")}:l.isNode||"string"!=typeof(new Error).stack||(a=function(t,e){console.warn("%c"+t,e?"color: darkorange":"color: red")}));var Z={warnings:b,longStackTraces:!1,cancellation:!1,monitoring:!1};return w&&n.longStackTraces(),{longStackTraces:function(){return Z.longStackTraces},warnings:function(){return Z.warnings},cancellation:function(){return Z.cancellation},monitoring:function(){return Z.monitoring},propagateFromFunction:function(){return M},boundValueFunction:function(){return N},checkForgottenReturns:function(t,e,n,r,i){if(void 0===t&&null!==e&&S){if(void 0!==i&&i._returnedNonUndefined())return;if(0==(65535&r._bitField))return;n&&(n+=" ");var o="",a="";if(e._trace){for(var s=e._trace.stack.split("\n"),u=$(s),c=u.length-1;c>=0;--c){var l=u[c];if(!d.test(l)){var f=l.match(v);f&&(o="at "+f[1]+":"+f[2]+":"+f[3]+" ");break}}if(u.length>0){var h=u[0];for(c=0;c<s.length;++c)if(s[c]===h){c>0&&(a="\n"+s[c-1]);break}}}var p="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+a;r._warn(p,!0,e)}},setBounds:function(t,e){if(G()){for(var n,r,i=(t.stack||"").split("\n"),o=(e.stack||"").split("\n"),a=-1,s=-1,u=0;u<i.length;++u)if(c=J(i[u])){n=c.fileName,a=c.line;break}for(u=0;u<o.length;++u){var c;if(c=J(o[u])){r=c.fileName,s=c.line;break}}a<0||s<0||!n||!r||n!==r||a>=s||(K=function(t){if(p.test(t))return!0;var e=J(t);return!!(e&&e.fileName===n&&a<=e.line&&e.line<=s)})}},warn:H,deprecated:function(t,e){var n=t+" is deprecated and will be removed in a future version.";return e&&(n+=" Use "+e+" instead."),H(n)},CapturedTrace:X,fireDomEvent:k,fireGlobalEvent:E}}},{"./errors":12,"./es5":13,"./util":36}],10:[function(t,e,n){"use strict";e.exports=function(t){function e(){return this.value}function n(){throw this.reason}t.prototype.return=t.prototype.thenReturn=function(n){return n instanceof t&&n.suppressUnhandledRejections(),this._then(e,void 0,void 0,{value:n},void 0)},t.prototype.throw=t.prototype.thenThrow=function(t){return this._then(n,void 0,void 0,{reason:t},void 0)},t.prototype.catchThrow=function(t){if(arguments.length<=1)return this._then(void 0,n,void 0,{reason:t},void 0);var e=arguments[1];return this.caught(t,function(){throw e})},t.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof t&&n.suppressUnhandledRejections(),this._then(void 0,e,void 0,{value:n},void 0);var r=arguments[1];return r instanceof t&&r.suppressUnhandledRejections(),this.caught(n,function(){return r})}}},{}],11:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.reduce,r=t.all;function i(){return r(this)}t.prototype.each=function(t){return n(this,t,e,0)._then(i,void 0,void 0,this,void 0)},t.prototype.mapSeries=function(t){return n(this,t,e,e)},t.each=function(t,r){return n(t,r,e,0)._then(i,void 0,void 0,t,void 0)},t.mapSeries=function(t,r){return n(t,r,e,e)}}},{}],12:[function(t,e,n){"use strict";var r,i,o=t("./es5"),a=o.freeze,s=t("./util"),u=s.inherits,c=s.notEnumerableProp;function l(t,e){function n(r){if(!(this instanceof n))return new n(r);c(this,"message","string"==typeof r?r:e),c(this,"name",t),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this)}return u(n,Error),n}var f=l("Warning","warning"),h=l("CancellationError","cancellation error"),p=l("TimeoutError","timeout error"),d=l("AggregateError","aggregate error");try{r=TypeError,i=RangeError}catch(t){r=l("TypeError","type error"),i=l("RangeError","range error")}for(var v="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),g=0;g<v.length;++g)"function"==typeof Array.prototype[v[g]]&&(d.prototype[v[g]]=Array.prototype[v[g]]);o.defineProperty(d.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),d.prototype.isOperational=!0;var _=0;function y(t){if(!(this instanceof y))return new y(t);c(this,"name","OperationalError"),c(this,"message",t),this.cause=t,this.isOperational=!0,t instanceof Error?(c(this,"message",t.message),c(this,"stack",t.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}d.prototype.toString=function(){var t=Array(4*_+1).join(" "),e="\n"+t+"AggregateError of:\n";_++,t=Array(4*_+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=t+i[o];e+=(r=i.join("\n"))+"\n"}return _--,e},u(y,Error);var m=Error.__BluebirdErrorTypes__;m||(m=a({CancellationError:h,TimeoutError:p,OperationalError:y,RejectionError:y,AggregateError:d}),o.defineProperty(Error,"__BluebirdErrorTypes__",{value:m,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:r,RangeError:i,CancellationError:m.CancellationError,OperationalError:m.OperationalError,TimeoutError:m.TimeoutError,AggregateError:m.AggregateError,Warning:f}},{"./es5":13,"./util":36}],13:[function(t,e,n){var r=function(){"use strict";return void 0===this}();if(r)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,a={}.constructor.prototype,s=function(t){var e=[];for(var n in t)i.call(t,n)&&e.push(n);return e};e.exports={isArray:function(t){try{return"[object Array]"===o.call(t)}catch(t){return!1}},keys:s,names:s,defineProperty:function(t,e,n){return t[e]=n.value,t},getDescriptor:function(t,e){return{value:t[e]}},freeze:function(t){return t},getPrototypeOf:function(t){try{return Object(t).constructor.prototype}catch(t){return a}},isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.map;t.prototype.filter=function(t,r){return n(this,t,r,e)},t.filter=function(t,r,i){return n(t,r,i,e)}}},{}],15:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=t("./util"),o=e.CancellationError,a=i.errorObj,s=t("./catch_filter")(r);function u(t,e,n){this.promise=t,this.type=e,this.handler=n,this.called=!1,this.cancelPromise=null}function c(t){this.finallyHandler=t}function l(t,e){return null!=t.cancelPromise&&(arguments.length>1?t.cancelPromise._reject(e):t.cancelPromise._cancel(),t.cancelPromise=null,!0)}function f(){return p.call(this,this.promise._target()._settledValue())}function h(t){if(!l(this,t))return a.e=t,a}function p(t){var i=this.promise,s=this.handler;if(!this.called){this.called=!0;var u=this.isFinallyHandler()?s.call(i._boundValue()):s.call(i._boundValue(),t);if(u===r)return u;if(void 0!==u){i._setReturnedNonUndefined();var p=n(u,i);if(p instanceof e){if(null!=this.cancelPromise){if(p._isCancelled()){var d=new o("late cancellation observer");return i._attachExtraTrace(d),a.e=d,a}p.isPending()&&p._attachCancellationCallback(new c(this))}return p._then(f,h,void 0,this,void 0)}}}return i.isRejected()?(l(this),a.e=t,a):(l(this),t)}return u.prototype.isFinallyHandler=function(){return 0===this.type},c.prototype._resultCancelled=function(){l(this.finallyHandler)},e.prototype._passThrough=function(t,e,n,r){return"function"!=typeof t?this.then():this._then(n,r,void 0,new u(this,e,t),void 0)},e.prototype.lastly=e.prototype.finally=function(t){return this._passThrough(t,0,p,p)},e.prototype.tap=function(t){return this._passThrough(t,1,p)},e.prototype.tapCatch=function(t){var n=arguments.length;if(1===n)return this._passThrough(t,1,void 0,p);var r,o=new Array(n-1),a=0;for(r=0;r<n-1;++r){var u=arguments[r];if(!i.isObject(u))return e.reject(new TypeError("tapCatch statement predicate: expecting an object but got "+i.classString(u)));o[a++]=u}o.length=a;var c=arguments[r];return this._passThrough(s(o,c,this),1,void 0,p)},u}},{"./catch_filter":7,"./util":36}],16:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,a){var s=t("./errors").TypeError,u=t("./util"),c=u.errorObj,l=u.tryCatch,f=[];function h(t,n,i,o){if(a.cancellation()){var s=new e(r),u=this._finallyPromise=new e(r);this._promise=s.lastly(function(){return u}),s._captureStackTrace(),s._setOnCancel(this)}else(this._promise=new e(r))._captureStackTrace();this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof i?[i].concat(f):f,this._yieldedPromise=null,this._cancellationPhase=!1}u.inherits(h,o),h.prototype._isResolved=function(){return null===this._promise},h.prototype._cleanup=function(){this._promise=this._generator=null,a.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},h.prototype._promiseCancelled=function(){if(!this._isResolved()){var t;if(void 0!==this._generator.return)this._promise._pushContext(),t=l(this._generator.return).call(this._generator,void 0),this._promise._popContext();else{var n=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=n,this._promise._attachExtraTrace(n),this._promise._pushContext(),t=l(this._generator.throw).call(this._generator,n),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(t)}},h.prototype._promiseFulfilled=function(t){this._yieldedPromise=null,this._promise._pushContext();var e=l(this._generator.next).call(this._generator,t);this._promise._popContext(),this._continue(e)},h.prototype._promiseRejected=function(t){this._yieldedPromise=null,this._promise._attachExtraTrace(t),this._promise._pushContext();var e=l(this._generator.throw).call(this._generator,t);this._promise._popContext(),this._continue(e)},h.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,t.cancel()}},h.prototype.promise=function(){return this._promise},h.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},h.prototype._continue=function(t){var n=this._promise;if(t===c)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(t.e,!1);var r=t.value;if(!0===t.done)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(o instanceof e||null!==(o=function(t,n,r){for(var o=0;o<n.length;++o){r._pushContext();var a=l(n[o])(t);if(r._popContext(),a===c){r._pushContext();var s=e.reject(c.e);return r._popContext(),s}var u=i(a,r);if(u instanceof e)return u}return null}(o,this._yieldHandlers,this._promise))){var a=(o=o._target())._bitField;0==(50397184&a)?(this._yieldedPromise=o,o._proxy(this,null)):0!=(33554432&a)?e._async.invoke(this._promiseFulfilled,this,o._value()):0!=(16777216&a)?e._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()}else this._promiseRejected(new s("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",String(r))+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")))},e.coroutine=function(t,e){if("function"!=typeof t)throw new s("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(e).yieldHandler,r=h,i=(new Error).stack;return function(){var e=t.apply(this,arguments),o=new r(void 0,void 0,n,i),a=o.promise();return o._generator=e,o._promiseFulfilled(void 0),a}},e.coroutine.addYieldHandler=function(t){if("function"!=typeof t)throw new s("expecting a function but got "+u.classString(t));f.push(t)},e.spawn=function(t){if(a.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof t)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new h(t,this),i=r.promise();return r._run(e.spawn),i}}},{"./errors":12,"./util":36}],17:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,a){var s=t("./util");s.canEvaluate,s.tryCatch,s.errorObj,e.join=function(){var t,e=arguments.length-1;e>0&&"function"==typeof arguments[e]&&(t=arguments[e]);var r=[].slice.call(arguments);t&&r.pop();var i=new n(r).promise();return void 0!==t?i.spread(t):i}}},{"./util":36}],18:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,a){var s=e._getDomain,u=t("./util"),c=u.tryCatch,l=u.errorObj,f=e._async;function h(t,e,n,r){this.constructor$(t),this._promise._captureStackTrace();var i=s();this._callback=null===i?e:u.domainBind(i,e),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=[],f.invoke(this._asyncInit,this,void 0)}function p(t,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+u.classString(n));var a=0;if(void 0!==i){if("object"!=typeof i||null===i)return e.reject(new TypeError("options argument must be an object but it is "+u.classString(i)));if("number"!=typeof i.concurrency)return e.reject(new TypeError("'concurrency' must be a number but it is "+u.classString(i.concurrency)));a=i.concurrency}return new h(t,n,a="number"==typeof a&&isFinite(a)&&a>=1?a:0,o).promise()}u.inherits(h,n),h.prototype._asyncInit=function(){this._init$(void 0,-2)},h.prototype._init=function(){},h.prototype._promiseFulfilled=function(t,n){var r=this._values,o=this.length(),s=this._preservedValues,u=this._limit;if(n<0){if(r[n=-1*n-1]=t,u>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(u>=1&&this._inFlight>=u)return r[n]=t,this._queue.push(n),!1;null!==s&&(s[n]=t);var f=this._promise,h=this._callback,p=f._boundValue();f._pushContext();var d=c(h).call(p,t,n,o),v=f._popContext();if(a.checkForgottenReturns(d,v,null!==s?"Promise.filter":"Promise.map",f),d===l)return this._reject(d.e),!0;var g=i(d,this._promise);if(g instanceof e){var _=(g=g._target())._bitField;if(0==(50397184&_))return u>=1&&this._inFlight++,r[n]=g,g._proxy(this,-1*(n+1)),!1;if(0==(33554432&_))return 0!=(16777216&_)?(this._reject(g._reason()),!0):(this._cancel(),!0);d=g._value()}r[n]=d}return++this._totalResolved>=o&&(null!==s?this._filter(r,s):this._resolve(r),!0)},h.prototype._drainQueue=function(){for(var t=this._queue,e=this._limit,n=this._values;t.length>0&&this._inFlight<e;){if(this._isResolved())return;var r=t.pop();this._promiseFulfilled(n[r],r)}},h.prototype._filter=function(t,e){for(var n=e.length,r=new Array(n),i=0,o=0;o<n;++o)t[o]&&(r[i++]=e[o]);r.length=i,this._resolve(r)},h.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(t,e){return p(this,t,e,null)},e.map=function(t,e,n,r){return p(t,e,n,r)}}},{"./util":36}],19:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var a=t("./util"),s=a.tryCatch;e.method=function(t){if("function"!=typeof t)throw new e.TypeError("expecting a function but got "+a.classString(t));return function(){var r=new e(n);r._captureStackTrace(),r._pushContext();var i=s(t).apply(this,arguments),a=r._popContext();return o.checkForgottenReturns(i,a,"Promise.method",r),r._resolveFromSyncValue(i),r}},e.attempt=e.try=function(t){if("function"!=typeof t)return i("expecting a function but got "+a.classString(t));var r,u=new e(n);if(u._captureStackTrace(),u._pushContext(),arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var c=arguments[1],l=arguments[2];r=a.isArray(c)?s(t).apply(l,c):s(t).call(l,c)}else r=s(t)();var f=u._popContext();return o.checkForgottenReturns(r,f,"Promise.try",u),u._resolveFromSyncValue(r),u},e.prototype._resolveFromSyncValue=function(t){t===a.errorObj?this._rejectCallback(t.e,!1):this._resolveCallback(t,!0)}}},{"./util":36}],20:[function(t,e,n){"use strict";var r=t("./util"),i=r.maybeWrapAsError,o=t("./errors").OperationalError,a=t("./es5"),s=/^(?:name|message|stack|cause)$/;e.exports=function(t,e){return function(n,u){if(null!==t){if(n){var c=function(t){var e;if(function(t){return t instanceof Error&&a.getPrototypeOf(t)===Error.prototype}(t)){(e=new o(t)).name=t.name,e.message=t.message,e.stack=t.stack;for(var n=a.keys(t),i=0;i<n.length;++i){var u=n[i];s.test(u)||(e[u]=t[u])}return e}return r.markAsOriginatingFromRejection(t),t}(i(n));t._attachExtraTrace(c),t._reject(c)}else if(e){var l=[].slice.call(arguments,1);t._fulfill(l)}else t._fulfill(u);t=null}}}},{"./errors":12,"./es5":13,"./util":36}],21:[function(t,e,n){"use strict";e.exports=function(e){var n=t("./util"),r=e._async,i=n.tryCatch,o=n.errorObj;function a(t,e){if(!n.isArray(t))return s.call(this,t,e);var a=i(e).apply(this._boundValue(),[null].concat(t));a===o&&r.throwLater(a.e)}function s(t,e){var n=this._boundValue(),a=void 0===t?i(e).call(n,null):i(e).call(n,null,t);a===o&&r.throwLater(a.e)}function u(t,e){if(!t){var n=new Error(t+"");n.cause=t,t=n}var a=i(e).call(this._boundValue(),t);a===o&&r.throwLater(a.e)}e.prototype.asCallback=e.prototype.nodeify=function(t,e){if("function"==typeof t){var n=s;void 0!==e&&Object(e).spread&&(n=a),this._then(n,u,void 0,this,t)}return this}}},{"./util":36}],22:[function(e,n,r){"use strict";n.exports=function(){var r=function(){return new d("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},i=function(){return new A.PromiseInspection(this._target())},o=function(t){return A.reject(new d(t))};function a(){}var s,u={},c=e("./util");s=c.isNode?function(){var e=t.domain;return void 0===e&&(e=null),e}:function(){return null},c.notEnumerableProp(A,"_getDomain",s);var l=e("./es5"),f=e("./async"),h=new f;l.defineProperty(A,"_async",{value:h});var p=e("./errors"),d=A.TypeError=p.TypeError;A.RangeError=p.RangeError;var v=A.CancellationError=p.CancellationError;A.TimeoutError=p.TimeoutError,A.OperationalError=p.OperationalError,A.RejectionError=p.OperationalError,A.AggregateError=p.AggregateError;var g=function(){},_={},y={},m=e("./thenables")(A,g),b=e("./promise_array")(A,g,m,o,a),w=e("./context")(A),S=w.create,x=e("./debuggability")(A,w),k=(x.CapturedTrace,e("./finally")(A,m,y)),E=e("./catch_filter")(y),C=e("./nodeback"),P=c.errorObj,O=c.tryCatch;function A(t){t!==g&&function(t,e){if(null==t||t.constructor!==A)throw new d("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");if("function"!=typeof e)throw new d("expecting a function but got "+c.classString(e))}(this,t),this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,this._resolveFromExecutor(t),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function j(t){this.promise._resolveCallback(t)}function L(t){this.promise._rejectCallback(t,!1)}function F(t){var e=new A(g);e._fulfillmentHandler0=t,e._rejectionHandler0=t,e._promise0=t,e._receiver0=t}return A.prototype.toString=function(){return"[object Promise]"},A.prototype.caught=A.prototype.catch=function(t){var e=arguments.length;if(e>1){var n,r=new Array(e-1),i=0;for(n=0;n<e-1;++n){var a=arguments[n];if(!c.isObject(a))return o("Catch statement predicate: expecting an object but got "+c.classString(a));r[i++]=a}if(r.length=i,"function"!=typeof(t=arguments[n]))throw new d("The last argument to .catch() must be a function, got "+c.toString(t));return this.then(void 0,E(r,t,this))}return this.then(void 0,t)},A.prototype.reflect=function(){return this._then(i,i,void 0,this,void 0)},A.prototype.then=function(t,e){if(x.warnings()&&arguments.length>0&&"function"!=typeof t&&"function"!=typeof e){var n=".then() only accepts functions but was passed: "+c.classString(t);arguments.length>1&&(n+=", "+c.classString(e)),this._warn(n)}return this._then(t,e,void 0,void 0,void 0)},A.prototype.done=function(t,e){this._then(t,e,void 0,void 0,void 0)._setIsFinal()},A.prototype.spread=function(t){return"function"!=typeof t?o("expecting a function but got "+c.classString(t)):this.all()._then(t,void 0,void 0,_,void 0)},A.prototype.toJSON=function(){var t={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(t.fulfillmentValue=this.value(),t.isFulfilled=!0):this.isRejected()&&(t.rejectionReason=this.reason(),t.isRejected=!0),t},A.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new b(this).promise()},A.prototype.error=function(t){return this.caught(c.originatesFromRejection,t)},A.getNewLibraryCopy=n.exports,A.is=function(t){return t instanceof A},A.fromNode=A.fromCallback=function(t){var e=new A(g);e._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,r=O(t)(C(e,n));return r===P&&e._rejectCallback(r.e,!0),e._isFateSealed()||e._setAsyncGuaranteed(),e},A.all=function(t){return new b(t).promise()},A.cast=function(t){var e=m(t);return e instanceof A||((e=new A(g))._captureStackTrace(),e._setFulfilled(),e._rejectionHandler0=t),e},A.resolve=A.fulfilled=A.cast,A.reject=A.rejected=function(t){var e=new A(g);return e._captureStackTrace(),e._rejectCallback(t,!0),e},A.setScheduler=function(t){if("function"!=typeof t)throw new d("expecting a function but got "+c.classString(t));return h.setScheduler(t)},A.prototype._then=function(t,e,n,r,i){var o=void 0!==i,a=o?i:new A(g),u=this._target(),l=u._bitField;o||(a._propagateFrom(this,3),a._captureStackTrace(),void 0===r&&0!=(2097152&this._bitField)&&(r=0!=(50397184&l)?this._boundValue():u===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,a));var f=s();if(0!=(50397184&l)){var p,d,_=u._settlePromiseCtx;0!=(33554432&l)?(d=u._rejectionHandler0,p=t):0!=(16777216&l)?(d=u._fulfillmentHandler0,p=e,u._unsetRejectionIsUnhandled()):(_=u._settlePromiseLateCancellationObserver,d=new v("late cancellation observer"),u._attachExtraTrace(d),p=e),h.invoke(_,u,{handler:null===f?p:"function"==typeof p&&c.domainBind(f,p),promise:a,receiver:r,value:d})}else u._addCallbacks(t,e,a,r,f);return a},A.prototype._length=function(){return 65535&this._bitField},A.prototype._isFateSealed=function(){return 0!=(117506048&this._bitField)},A.prototype._isFollowing=function(){return 67108864==(67108864&this._bitField)},A.prototype._setLength=function(t){this._bitField=-65536&this._bitField|65535&t},A.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},A.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},A.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},A.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},A.prototype._isFinal=function(){return(4194304&this._bitField)>0},A.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},A.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},A.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},A.prototype._setAsyncGuaranteed=function(){h.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},A.prototype._receiverAt=function(t){var e=0===t?this._receiver0:this[4*t-4+3];if(e!==u)return void 0===e&&this._isBound()?this._boundValue():e},A.prototype._promiseAt=function(t){return this[4*t-4+2]},A.prototype._fulfillmentHandlerAt=function(t){return this[4*t-4+0]},A.prototype._rejectionHandlerAt=function(t){return this[4*t-4+1]},A.prototype._boundValue=function(){},A.prototype._migrateCallback0=function(t){t._bitField;var e=t._fulfillmentHandler0,n=t._rejectionHandler0,r=t._promise0,i=t._receiverAt(0);void 0===i&&(i=u),this._addCallbacks(e,n,r,i,null)},A.prototype._migrateCallbackAt=function(t,e){var n=t._fulfillmentHandlerAt(e),r=t._rejectionHandlerAt(e),i=t._promiseAt(e),o=t._receiverAt(e);void 0===o&&(o=u),this._addCallbacks(n,r,i,o,null)},A.prototype._addCallbacks=function(t,e,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof t&&(this._fulfillmentHandler0=null===i?t:c.domainBind(i,t)),"function"==typeof e&&(this._rejectionHandler0=null===i?e:c.domainBind(i,e));else{var a=4*o-4;this[a+2]=n,this[a+3]=r,"function"==typeof t&&(this[a+0]=null===i?t:c.domainBind(i,t)),"function"==typeof e&&(this[a+1]=null===i?e:c.domainBind(i,e))}return this._setLength(o+1),o},A.prototype._proxy=function(t,e){this._addCallbacks(void 0,void 0,e,t,null)},A.prototype._resolveCallback=function(t,e){if(0==(117506048&this._bitField)){if(t===this)return this._rejectCallback(r(),!1);var n=m(t,this);if(!(n instanceof A))return this._fulfill(t);e&&this._propagateFrom(n,2);var i=n._target();if(i!==this){var o=i._bitField;if(0==(50397184&o)){var a=this._length();a>0&&i._migrateCallback0(this);for(var s=1;s<a;++s)i._migrateCallbackAt(this,s);this._setFollowing(),this._setLength(0),this._setFollowee(i)}else if(0!=(33554432&o))this._fulfill(i._value());else if(0!=(16777216&o))this._reject(i._reason());else{var u=new v("late cancellation observer");i._attachExtraTrace(u),this._reject(u)}}else this._reject(r())}},A.prototype._rejectCallback=function(t,e,n){var r=c.ensureErrorObject(t),i=r===t;if(!i&&!n&&x.warnings()){var o="a promise was rejected with a non-error: "+c.classString(t);this._warn(o,!0)}this._attachExtraTrace(r,!!e&&i),this._reject(t)},A.prototype._resolveFromExecutor=function(t){if(t!==g){var e=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(t,function(t){e._resolveCallback(t)},function(t){e._rejectCallback(t,n)});n=!1,this._popContext(),void 0!==r&&e._rejectCallback(r,!0)}},A.prototype._settlePromiseFromHandler=function(t,e,n,r){var i=r._bitField;if(0==(65536&i)){var o;r._pushContext(),e===_?n&&"number"==typeof n.length?o=O(t).apply(this._boundValue(),n):(o=P).e=new d("cannot .spread() a non-array: "+c.classString(n)):o=O(t).call(e,n);var a=r._popContext();0==(65536&(i=r._bitField))&&(o===y?r._reject(n):o===P?r._rejectCallback(o.e,!1):(x.checkForgottenReturns(o,a,"",r,this),r._resolveCallback(o)))}},A.prototype._target=function(){for(var t=this;t._isFollowing();)t=t._followee();return t},A.prototype._followee=function(){return this._rejectionHandler0},A.prototype._setFollowee=function(t){this._rejectionHandler0=t},A.prototype._settlePromise=function(t,e,n,r){var o=t instanceof A,s=this._bitField,u=0!=(134217728&s);0!=(65536&s)?(o&&t._invokeInternalOnCancel(),n instanceof k&&n.isFinallyHandler()?(n.cancelPromise=t,O(e).call(n,r)===P&&t._reject(P.e)):e===i?t._fulfill(i.call(n)):n instanceof a?n._promiseCancelled(t):o||t instanceof b?t._cancel():n.cancel()):"function"==typeof e?o?(u&&t._setAsyncGuaranteed(),this._settlePromiseFromHandler(e,n,r,t)):e.call(n,r,t):n instanceof a?n._isResolved()||(0!=(33554432&s)?n._promiseFulfilled(r,t):n._promiseRejected(r,t)):o&&(u&&t._setAsyncGuaranteed(),0!=(33554432&s)?t._fulfill(r):t._reject(r))},A.prototype._settlePromiseLateCancellationObserver=function(t){var e=t.handler,n=t.promise,r=t.receiver,i=t.value;"function"==typeof e?n instanceof A?this._settlePromiseFromHandler(e,r,i,n):e.call(r,i,n):n instanceof A&&n._reject(i)},A.prototype._settlePromiseCtx=function(t){this._settlePromise(t.promise,t.handler,t.receiver,t.value)},A.prototype._settlePromise0=function(t,e,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(r,t,i,e)},A.prototype._clearCallbackDataAtIndex=function(t){var e=4*t-4;this[e+2]=this[e+3]=this[e+0]=this[e+1]=void 0},A.prototype._fulfill=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(t===this){var n=r();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=t,(65535&e)>0&&(0!=(134217728&e)?this._settlePromises():h.settlePromises(this),this._dereferenceTrace())}},A.prototype._reject=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(this._setRejected(),this._fulfillmentHandler0=t,this._isFinal())return h.fatalError(t,c.isNode);(65535&e)>0?h.settlePromises(this):this._ensurePossibleRejectionHandled()}},A.prototype._fulfillPromises=function(t,e){for(var n=1;n<t;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},A.prototype._rejectPromises=function(t,e){for(var n=1;n<t;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},A.prototype._settlePromises=function(){var t=this._bitField,e=65535&t;if(e>0){if(0!=(16842752&t)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,t),this._rejectPromises(e,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,t),this._fulfillPromises(e,r)}this._setLength(0)}this._clearCancellationData()},A.prototype._settledValue=function(){var t=this._bitField;return 0!=(33554432&t)?this._rejectionHandler0:0!=(16777216&t)?this._fulfillmentHandler0:void 0},"undefined"!=typeof Symbol&&Symbol.toStringTag&&l.defineProperty(A.prototype,Symbol.toStringTag,{get:function(){return"Object"}}),A.defer=A.pending=function(){return x.deprecated("Promise.defer","new Promise"),{promise:new A(g),resolve:j,reject:L}},c.notEnumerableProp(A,"_makeSelfResolutionError",r),e("./method")(A,g,m,o,x),e("./bind")(A,g,m,x),e("./cancel")(A,b,o,x),e("./direct_resolve")(A),e("./synchronous_inspection")(A),e("./join")(A,b,m,g,h,s),A.Promise=A,A.version="3.5.5",e("./call_get.js")(A),e("./generators.js")(A,o,g,m,a,x),e("./map.js")(A,b,o,m,g,x),e("./nodeify.js")(A),e("./promisify.js")(A,g),e("./props.js")(A,b,m,o),e("./race.js")(A,g,m,o),e("./reduce.js")(A,b,o,m,g,x),e("./settle.js")(A,b,x),e("./some.js")(A,b,o),e("./timers.js")(A,g,x),e("./using.js")(A,o,m,S,g,x),e("./any.js")(A),e("./each.js")(A,g),e("./filter.js")(A,g),c.toFastProperties(A),c.toFastProperties(A.prototype),F({a:1}),F({b:2}),F({c:3}),F(1),F(function(){}),F(void 0),F(!1),F(new A(g)),x.setBounds(f.firstLineError,c.lastLineError),A}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var a=t("./util");function s(t){var r=this._promise=new e(n);t instanceof e&&r._propagateFrom(t,3),r._setOnCancel(this),this._values=t,this._length=0,this._totalResolved=0,this._init(void 0,-2)}return a.isArray,a.inherits(s,o),s.prototype.length=function(){return this._length},s.prototype.promise=function(){return this._promise},s.prototype._init=function t(n,o){var s=r(this._values,this._promise);if(s instanceof e){var u=(s=s._target())._bitField;if(this._values=s,0==(50397184&u))return this._promise._setAsyncGuaranteed(),s._then(t,this._reject,void 0,this,o);if(0==(33554432&u))return 0!=(16777216&u)?this._reject(s._reason()):this._cancel();s=s._value()}if(null!==(s=a.asArray(s)))0!==s.length?this._iterate(s):-5===o?this._resolveEmptyArray():this._resolve(function(t){switch(o){case-2:return[];case-3:return{};case-6:return new Map}}());else{var c=i("expecting an array or an iterable object but got "+a.classString(s)).reason();this._promise._rejectCallback(c,!1)}},s.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,a=null,s=0;s<n;++s){var u=r(t[s],i);a=u instanceof e?(u=u._target())._bitField:null,o?null!==a&&u.suppressUnhandledRejections():null!==a?0==(50397184&a)?(u._proxy(this,s),this._values[s]=u):o=0!=(33554432&a)?this._promiseFulfilled(u._value(),s):0!=(16777216&a)?this._promiseRejected(u._reason(),s):this._promiseCancelled(s):o=this._promiseFulfilled(u,s)}o||i._setAsyncGuaranteed()},s.prototype._isResolved=function(){return null===this._values},s.prototype._resolve=function(t){this._values=null,this._promise._fulfill(t)},s.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},s.prototype._reject=function(t){this._values=null,this._promise._rejectCallback(t,!1)},s.prototype._promiseFulfilled=function(t,e){return this._values[e]=t,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},s.prototype._promiseCancelled=function(){return this._cancel(),!0},s.prototype._promiseRejected=function(t){return this._totalResolved++,this._reject(t),!0},s.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},s.prototype.shouldCopyValues=function(){return!0},s.prototype.getActualLength=function(t){return t},s}},{"./util":36}],24:[function(t,e,n){"use strict";e.exports=function(e,n){var r={},i=t("./util"),o=t("./nodeback"),a=i.withAppended,s=i.maybeWrapAsError,u=i.canEvaluate,c=t("./errors").TypeError,l={__isPromisified__:!0},f=new RegExp("^(?:"+["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"].join("|")+")$"),h=function(t){return i.isIdentifier(t)&&"_"!==t.charAt(0)&&"constructor"!==t};function p(t){return!f.test(t)}function d(t){try{return!0===t.__isPromisified__}catch(t){return!1}}function v(t,e,n){var r=i.getDataPropertyOrDefault(t,e+n,l);return!!r&&d(r)}var g=function(t){return t.replace(/([$])/,"\\$")},_=u?void 0:function(t,u,c,l,f,h){var p=function(){return this}(),d=t;function v(){var i=u;u===r&&(i=this);var c=new e(n);c._captureStackTrace();var l="string"==typeof d&&this!==p?this[d]:t,f=o(c,h);try{l.apply(i,a(arguments,f))}catch(t){c._rejectCallback(s(t),!0,!0)}return c._isFateSealed()||c._setAsyncGuaranteed(),c}return"string"==typeof d&&(t=l),i.notEnumerableProp(v,"__isPromisified__",!0),v};function y(t,e,n,o,a){for(var s=new RegExp(g(e)+"$"),u=function(t,e,n,r){for(var o=i.inheritedDataKeys(t),a=[],s=0;s<o.length;++s){var u=o[s],l=t[u],f=r===h||h(u,l,t);"function"!=typeof l||d(l)||v(t,u,e)||!r(u,l,t,f)||a.push(u,l)}return function(t,e,n){for(var r=0;r<t.length;r+=2){var i=t[r];if(n.test(i))for(var o=i.replace(n,""),a=0;a<t.length;a+=2)if(t[a]===o)throw new c("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",e))}}(a,e,n),a}(t,e,s,n),l=0,f=u.length;l<f;l+=2){var p=u[l],y=u[l+1],m=p+e;if(o===_)t[m]=_(p,r,p,y,e,a);else{var b=o(y,function(){return _(p,r,p,y,e,a)});i.notEnumerableProp(b,"__isPromisified__",!0),t[m]=b}}return i.toFastProperties(t),t}e.promisify=function(t,e){if("function"!=typeof t)throw new c("expecting a function but got "+i.classString(t));if(d(t))return t;var n,o,a,s=(n=t,o=void 0===(e=Object(e)).context?r:e.context,a=!!e.multiArgs,_(n,o,void 0,n,null,a));return i.copyDescriptors(t,s,p),s},e.promisifyAll=function(t,e){if("function"!=typeof t&&"object"!=typeof t)throw new c("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");var n=!!(e=Object(e)).multiArgs,r=e.suffix;"string"!=typeof r&&(r="Async");var o=e.filter;"function"!=typeof o&&(o=h);var a=e.promisifier;if("function"!=typeof a&&(a=_),!i.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var s=i.inheritedDataKeys(t),u=0;u<s.length;++u){var l=t[s[u]];"constructor"!==s[u]&&i.isClass(l)&&(y(l.prototype,r,o,a,n),y(l,r,o,a,n))}return y(t,r,o,a,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o,a=t("./util"),s=a.isObject,u=t("./es5");"function"==typeof Map&&(o=Map);var c=function(){var t=0,e=0;function n(n,r){this[t]=n,this[t+e]=r,t++}return function(r){e=r.size,t=0;var i=new Array(2*r.size);return r.forEach(n,i),i}}();function l(t){var e,n=!1;if(void 0!==o&&t instanceof o)e=c(t),n=!0;else{var r=u.keys(t),i=r.length;e=new Array(2*i);for(var a=0;a<i;++a){var s=r[a];e[a]=t[s],e[a+i]=s}}this.constructor$(e),this._isMap=n,this._init$(void 0,n?-6:-3)}function f(t){var n,o=r(t);return s(o)?(n=o instanceof e?o._then(e.props,void 0,void 0,void 0,void 0):new l(o).promise(),o instanceof e&&n._propagateFrom(o,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}a.inherits(l,n),l.prototype._init=function(){},l.prototype._promiseFulfilled=function(t,e){if(this._values[e]=t,++this._totalResolved>=this._length){var n;if(this._isMap)n=function(t){for(var e=new o,n=t.length/2|0,r=0;r<n;++r){var i=t[n+r],a=t[r];e.set(i,a)}return e}(this._values);else{n={};for(var r=this.length(),i=0,a=this.length();i<a;++i)n[this._values[i+r]]=this._values[i]}return this._resolve(n),!0}return!1},l.prototype.shouldCopyValues=function(){return!1},l.prototype.getActualLength=function(t){return t>>1},e.prototype.props=function(){return f(this)},e.props=function(t){return f(t)}}},{"./es5":13,"./util":36}],26:[function(t,e,n){"use strict";function r(t){this._capacity=t,this._length=0,this._front=0}r.prototype._willBeOverCapacity=function(t){return this._capacity<t},r.prototype._pushOne=function(t){var e=this.length();this._checkCapacity(e+1),this[this._front+e&this._capacity-1]=t,this._length=e+1},r.prototype.push=function(t,e,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(t),this._pushOne(e),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=t,this[i+1&o]=e,this[i+2&o]=n,this._length=r},r.prototype.shift=function(){var t=this._front,e=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length--,e},r.prototype.length=function(){return this._length},r.prototype._checkCapacity=function(t){this._capacity<t&&this._resizeTo(this._capacity<<1)},r.prototype._resizeTo=function(t){var e=this._capacity;this._capacity=t,function(t,e,n,r,i){for(var o=0;o<i;++o)n[o+r]=t[o+0],t[o+0]=void 0}(this,0,this,e,this._front+this._length&e-1)},e.exports=r},{}],27:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),a=function(t){return t.then(function(e){return s(e,t)})};function s(t,s){var u=r(t);if(u instanceof e)return a(u);if(null===(t=o.asArray(t)))return i("expecting an array or an iterable object but got "+o.classString(t));var c=new e(n);void 0!==s&&c._propagateFrom(s,3);for(var l=c._fulfill,f=c._reject,h=0,p=t.length;h<p;++h){var d=t[h];(void 0!==d||h in t)&&e.cast(d)._then(l,f,void 0,c,null)}return c}e.race=function(t){return s(t,void 0)},e.prototype.race=function(){return s(this,void 0)}}},{"./util":36}],28:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,a){var s=e._getDomain,u=t("./util"),c=u.tryCatch;function l(t,n,r,i){this.constructor$(t);var a=s();this._fn=null===a?n:u.domainBind(a,n),void 0!==r&&(r=e.resolve(r))._attachCancellationCallback(this),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?Array(this._length):0===i?null:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function f(t,e){this.isFulfilled()?e._resolve(t):e._reject(t)}function h(t,e,n,i){return"function"!=typeof e?r("expecting a function but got "+u.classString(e)):new l(t,e,n,i).promise()}function p(t){this.accum=t,this.array._gotAccum(t);var n=i(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,n._then(d,void 0,void 0,this,void 0)):d.call(this,n)}function d(t){var n,r=this.array,i=r._promise,o=c(r._fn);i._pushContext(),(n=void 0!==r._eachValues?o.call(i._boundValue(),t,this.index,this.length):o.call(i._boundValue(),this.accum,t,this.index,this.length))instanceof e&&(r._currentCancellable=n);var s=i._popContext();return a.checkForgottenReturns(n,s,void 0!==r._eachValues?"Promise.each":"Promise.reduce",i),n}u.inherits(l,n),l.prototype._gotAccum=function(t){void 0!==this._eachValues&&null!==this._eachValues&&t!==o&&this._eachValues.push(t)},l.prototype._eachComplete=function(t){return null!==this._eachValues&&this._eachValues.push(t),this._eachValues},l.prototype._init=function(){},l.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},l.prototype.shouldCopyValues=function(){return!1},l.prototype._resolve=function(t){this._promise._resolveCallback(t),this._values=null},l.prototype._resultCancelled=function(t){if(t===this._initialValue)return this._cancel();this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel())},l.prototype._iterate=function(t){var n,r;this._values=t;var i=t.length;if(void 0!==this._initialValue?(n=this._initialValue,r=0):(n=e.resolve(t[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;r<i;++r){var o={accum:null,value:t[r],index:r,length:i,array:this};n=n._then(p,void 0,void 0,o,void 0)}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(f,f,void 0,n,this)},e.prototype.reduce=function(t,e){return h(this,t,e,null)},e.reduce=function(t,e,n,r){return h(t,e,n,r)}}},{"./util":36}],29:[function(e,n,o){"use strict";var a,s,u,c,l,f=e("./util"),h=f.getNativePromise();if(f.isNode&&"undefined"==typeof MutationObserver){var p=r.setImmediate,d=t.nextTick;a=f.isRecentNode?function(t){p.call(r,t)}:function(e){d.call(t,e)}}else if("function"==typeof h&&"function"==typeof h.resolve){var v=h.resolve();a=function(t){v.then(t)}}else a="undefined"!=typeof MutationObserver&&("undefined"==typeof window||!window.navigator||!window.navigator.standalone&&!window.cordova)&&"classList"in document.documentElement?(s=document.createElement("div"),u={attributes:!0},c=!1,l=document.createElement("div"),new MutationObserver(function(){s.classList.toggle("foo"),c=!1}).observe(l,u),function(t){var e=new MutationObserver(function(){e.disconnect(),t()});e.observe(s,u),c||(c=!0,l.classList.toggle("foo"))}):void 0!==i?function(t){i(t)}:"undefined"!=typeof setTimeout?function(t){setTimeout(t,0)}:function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")};n.exports=a},{"./util":36}],30:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=e.PromiseInspection;function o(t){this.constructor$(t)}t("./util").inherits(o,n),o.prototype._promiseResolved=function(t,e){return this._values[t]=e,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},o.prototype._promiseFulfilled=function(t,e){var n=new i;return n._bitField=33554432,n._settledValueField=t,this._promiseResolved(e,n)},o.prototype._promiseRejected=function(t,e){var n=new i;return n._bitField=16777216,n._settledValueField=t,this._promiseResolved(e,n)},e.settle=function(t){return r.deprecated(".settle()",".reflect()"),new o(t).promise()},e.prototype.settle=function(){return e.settle(this)}}},{"./util":36}],31:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=t("./util"),o=t("./errors").RangeError,a=t("./errors").AggregateError,s=i.isArray,u={};function c(t){this.constructor$(t),this._howMany=0,this._unwrap=!1,this._initialized=!1}function l(t,e){if((0|e)!==e||e<0)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new c(t),i=n.promise();return n.setHowMany(e),n.init(),i}i.inherits(c,n),c.prototype._init=function(){if(this._initialized)if(0!==this._howMany){this._init$(void 0,-5);var t=s(this._values);!this._isResolved()&&t&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}else this._resolve([])},c.prototype.init=function(){this._initialized=!0,this._init()},c.prototype.setUnwrap=function(){this._unwrap=!0},c.prototype.howMany=function(){return this._howMany},c.prototype.setHowMany=function(t){this._howMany=t},c.prototype._promiseFulfilled=function(t){return this._addFulfilled(t),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},c.prototype._promiseRejected=function(t){return this._addRejected(t),this._checkOutcome()},c.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(u),this._checkOutcome())},c.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var t=new a,e=this.length();e<this._values.length;++e)this._values[e]!==u&&t.push(this._values[e]);return t.length>0?this._reject(t):this._cancel(),!0}return!1},c.prototype._fulfilled=function(){return this._totalResolved},c.prototype._rejected=function(){return this._values.length-this.length()},c.prototype._addRejected=function(t){this._values.push(t)},c.prototype._addFulfilled=function(t){this._values[this._totalResolved++]=t},c.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},c.prototype._getRangeError=function(t){var e="Input array must contain at least "+this._howMany+" items but contains only "+t+" items";return new o(e)},c.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(t,e){return l(t,e)},e.prototype.some=function(t){return l(this,t)},e._SomePromiseArray=c}},{"./errors":12,"./util":36}],32:[function(t,e,n){"use strict";e.exports=function(t){function e(t){void 0!==t?(t=t._target(),this._bitField=t._bitField,this._settledValueField=t._isFateSealed()?t._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}e.prototype._settledValue=function(){return this._settledValueField};var n=e.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=e.prototype.error=e.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=e.prototype.isFulfilled=function(){return 0!=(33554432&this._bitField)},o=e.prototype.isRejected=function(){return 0!=(16777216&this._bitField)},a=e.prototype.isPending=function(){return 0==(50397184&this._bitField)},s=e.prototype.isResolved=function(){return 0!=(50331648&this._bitField)};e.prototype.isCancelled=function(){return 0!=(8454144&this._bitField)},t.prototype.__isCancelled=function(){return 65536==(65536&this._bitField)},t.prototype._isCancelled=function(){return this._target().__isCancelled()},t.prototype.isCancelled=function(){return 0!=(8454144&this._target()._bitField)},t.prototype.isPending=function(){return a.call(this._target())},t.prototype.isRejected=function(){return o.call(this._target())},t.prototype.isFulfilled=function(){return i.call(this._target())},t.prototype.isResolved=function(){return s.call(this._target())},t.prototype.value=function(){return n.call(this._target())},t.prototype.reason=function(){var t=this._target();return t._unsetRejectionIsUnhandled(),r.call(t)},t.prototype._value=function(){return this._settledValue()},t.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},t.PromiseInspection=e}},{}],33:[function(t,e,n){"use strict";e.exports=function(e,n){var r=t("./util"),i=r.errorObj,o=r.isObject,a={}.hasOwnProperty;return function(t,s){if(o(t)){if(t instanceof e)return t;var u=function(t){try{return function(t){return t.then}(t)}catch(t){return i.e=t,i}}(t);if(u===i){s&&s._pushContext();var c=e.reject(u.e);return s&&s._popContext(),c}if("function"==typeof u)return function(t){try{return a.call(t,"_promise0")}catch(t){return!1}}(t)?(c=new e(n),t._then(c._fulfill,c._reject,void 0,c,null),c):function(t,o,a){var s=new e(n),u=s;a&&a._pushContext(),s._captureStackTrace(),a&&a._popContext();var c=!0,l=r.tryCatch(o).call(t,function(t){s&&(s._resolveCallback(t),s=null)},function(t){s&&(s._rejectCallback(t,c,!0),s=null)});return c=!1,s&&l===i&&(s._rejectCallback(l.e,!0,!0),s=null),u}(t,u,s)}return t}}},{"./util":36}],34:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=t("./util"),o=e.TimeoutError;function a(t){this.handle=t}a.prototype._resultCancelled=function(){clearTimeout(this.handle)};var s=function(t){return u(+this).thenReturn(t)},u=e.delay=function(t,i){var o,u;return void 0!==i?(o=e.resolve(i)._then(s,null,null,t,void 0),r.cancellation()&&i instanceof e&&o._setOnCancel(i)):(o=new e(n),u=setTimeout(function(){o._fulfill()},+t),r.cancellation()&&o._setOnCancel(new a(u)),o._captureStackTrace()),o._setAsyncGuaranteed(),o};function c(t){return clearTimeout(this.handle),t}function l(t){throw clearTimeout(this.handle),t}e.prototype.delay=function(t){return u(t,this)},e.prototype.timeout=function(t,e){var n,s;t=+t;var u=new a(setTimeout(function(){n.isPending()&&function(t,e,n){var r;r="string"!=typeof e?e instanceof Error?e:new o("operation timed out"):new o(e),i.markAsOriginatingFromRejection(r),t._attachExtraTrace(r),t._reject(r),null!=n&&n.cancel()}(n,e,s)},t));return r.cancellation()?(s=this.then(),(n=s._then(c,l,void 0,u,void 0))._setOnCancel(u)):n=this._then(c,l,void 0,u,void 0),n}}},{"./util":36}],35:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,a){var s=t("./util"),u=t("./errors").TypeError,c=t("./util").inherits,l=s.errorObj,f=s.tryCatch,h={};function p(t){setTimeout(function(){throw t},0)}function d(t,e,n){this._data=t,this._promise=e,this._context=n}function v(t,e,n){this.constructor$(t,e,n)}function g(t){return d.isDisposer(t)?(this.resources[this.index]._setDisposable(t),t.promise()):t}function _(t){this.length=t,this.promise=null,this[t-1]=null}d.prototype.data=function(){return this._data},d.prototype.promise=function(){return this._promise},d.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():h},d.prototype.tryDispose=function(t){var e=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=e!==h?this.doDispose(e,t):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},d.isDisposer=function(t){return null!=t&&"function"==typeof t.resource&&"function"==typeof t.tryDispose},c(v,d),v.prototype.doDispose=function(t,e){return this.data().call(t,t,e)},_.prototype._resultCancelled=function(){for(var t=this.length,n=0;n<t;++n){var r=this[n];r instanceof e&&r.cancel()}},e.using=function(){var t=arguments.length;if(t<2)return n("you must pass at least 2 arguments to Promise.using");var i,u=arguments[t-1];if("function"!=typeof u)return n("expecting a function but got "+s.classString(u));var c=!0;2===t&&Array.isArray(arguments[0])?(t=(i=arguments[0]).length,c=!1):(i=arguments,t--);for(var h=new _(t),v=0;v<t;++v){var y=i[v];if(d.isDisposer(y)){var m=y;(y=y.promise())._setDisposable(m)}else{var b=r(y);b instanceof e&&(y=b._then(g,null,null,{resources:h,index:v},void 0))}h[v]=y}var w=new Array(h.length);for(v=0;v<w.length;++v)w[v]=e.resolve(h[v]).reflect();var S=e.all(w).then(function(t){for(var e=0;e<t.length;++e){var n=t[e];if(n.isRejected())return l.e=n.error(),l;if(!n.isFulfilled())return void S.cancel();t[e]=n.value()}x._pushContext(),u=f(u);var r=c?u.apply(void 0,t):u(t),i=x._popContext();return a.checkForgottenReturns(r,i,"Promise.using",x),r}),x=S.lastly(function(){var t=new e.PromiseInspection(S);return function(t,n){var i=0,a=t.length,s=new e(o);return function o(){if(i>=a)return s._fulfill();var u=function(t){var e=r(t);return e!==t&&"function"==typeof t._isDisposable&&"function"==typeof t._getDisposer&&t._isDisposable()&&e._setDisposable(t._getDisposer()),e}(t[i++]);if(u instanceof e&&u._isDisposable()){try{u=r(u._getDisposer().tryDispose(n),t.promise)}catch(t){return p(t)}if(u instanceof e)return u._then(o,p,null,null,null)}o()}(),s}(h,t)});return h.promise=x,x._setOnCancel(h),x},e.prototype._setDisposable=function(t){this._bitField=131072|this._bitField,this._disposer=t},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},e.prototype.disposer=function(t){if("function"==typeof t)return new v(t,this,i());throw new u}}},{"./errors":12,"./util":36}],36:[function(e,n,i){"use strict";var o,a=e("./es5"),s="undefined"==typeof navigator,u={e:{}},c="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r?r:void 0!==this?this:null;function l(){try{var t=o;return o=null,t.apply(this,arguments)}catch(t){return u.e=t,u}}function f(t){return null==t||!0===t||!1===t||"string"==typeof t||"number"==typeof t}function h(t,e,n){if(f(t))return t;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return a.defineProperty(t,e,r),t}var p=function(){var t=[Array.prototype,Object.prototype,Function.prototype],e=function(e){for(var n=0;n<t.length;++n)if(t[n]===e)return!0;return!1};if(a.isES5){var n=Object.getOwnPropertyNames;return function(t){for(var r=[],i=Object.create(null);null!=t&&!e(t);){var o;try{o=n(t)}catch(t){return r}for(var s=0;s<o.length;++s){var u=o[s];if(!i[u]){i[u]=!0;var c=Object.getOwnPropertyDescriptor(t,u);null!=c&&null==c.get&&null==c.set&&r.push(u)}}t=a.getPrototypeOf(t)}return r}}var r={}.hasOwnProperty;return function(n){if(e(n))return[];var i=[];t:for(var o in n)if(r.call(n,o))i.push(o);else{for(var a=0;a<t.length;++a)if(r.call(t[a],o))continue t;i.push(o)}return i}}(),d=/this\s*\.\s*\S+\s*=/,v=/^[a-z$_][a-z$_0-9]*$/i;function g(t){try{return t+""}catch(t){return"[no string representation]"}}function _(t){return t instanceof Error||null!==t&&"object"==typeof t&&"string"==typeof t.message&&"string"==typeof t.name}function y(t){return _(t)&&a.propertyIsWritable(t,"stack")}var m="stack"in new Error?function(t){return y(t)?t:new Error(g(t))}:function(t){if(y(t))return t;try{throw new Error(g(t))}catch(t){return t}};function b(t){return{}.toString.call(t)}var w=function(t){return a.isArray(t)?t:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var S="function"==typeof Array.from?function(t){return Array.from(t)}:function(t){for(var e,n=[],r=t[Symbol.iterator]();!(e=r.next()).done;)n.push(e.value);return n};w=function(t){return a.isArray(t)?t:null!=t&&"function"==typeof t[Symbol.iterator]?S(t):null}}var x,k=void 0!==t&&"[object process]"===b(t).toLowerCase(),E=void 0!==t&&void 0!==t.env,C={isClass:function(t){try{if("function"==typeof t){var e=a.names(t.prototype),n=a.isES5&&e.length>1,r=e.length>0&&!(1===e.length&&"constructor"===e[0]),i=d.test(t+"")&&a.names(t).length>0;if(n||r||i)return!0}return!1}catch(t){return!1}},isIdentifier:function(t){return v.test(t)},inheritedDataKeys:p,getDataPropertyOrDefault:function(t,e,n){if(!a.isES5)return{}.hasOwnProperty.call(t,e)?t[e]:void 0;var r=Object.getOwnPropertyDescriptor(t,e);return null!=r?null==r.get&&null==r.set?r.value:n:void 0},thrower:function(t){throw t},isArray:a.isArray,asArray:w,notEnumerableProp:h,isPrimitive:f,isObject:function(t){return"function"==typeof t||"object"==typeof t&&null!==t},isError:_,canEvaluate:s,errorObj:u,tryCatch:function(t){return o=t,l},inherits:function(t,e){var n={}.hasOwnProperty;function r(){for(var r in this.constructor=t,this.constructor$=e,e.prototype)n.call(e.prototype,r)&&"$"!==r.charAt(r.length-1)&&(this[r+"$"]=e.prototype[r])}return r.prototype=e.prototype,t.prototype=new r,t.prototype},withAppended:function(t,e){var n,r=t.length,i=new Array(r+1);for(n=0;n<r;++n)i[n]=t[n];return i[n]=e,i},maybeWrapAsError:function(t){return f(t)?new Error(g(t)):t},toFastProperties:function(t){function e(){}e.prototype=t;var n=new e;function r(){return typeof n.foo}return r(),r(),t},filledRange:function(t,e,n){for(var r=new Array(t),i=0;i<t;++i)r[i]=e+i+n;return r},toString:g,canAttachTrace:y,ensureErrorObject:m,originatesFromRejection:function(t){return null!=t&&(t instanceof Error.__BluebirdErrorTypes__.OperationalError||!0===t.isOperational)},markAsOriginatingFromRejection:function(t){try{h(t,"isOperational",!0)}catch(t){}},classString:b,copyDescriptors:function(t,e,n){for(var r=a.names(t),i=0;i<r.length;++i){var o=r[i];if(n(o))try{a.defineProperty(e,o,a.getDescriptor(t,o))}catch(t){}}},hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:k,hasEnvVariables:E,env:function(e){return E?t.env[e]:void 0},global:c,getNativePromise:function(){if("function"==typeof Promise)try{var t=new Promise(function(){});if("[object Promise]"==={}.toString.call(t))return Promise}catch(t){}},domainBind:function(t,e){return t.bind(e)}};C.isRecentNode=C.isNode&&(t.versions&&t.versions.node?x=t.versions.node.split(".").map(Number):t.version&&(x=t.version.split(".").map(Number)),0===x[0]&&x[1]>10||x[0]>0),C.isNode&&C.toFastProperties(t);try{throw new Error}catch(e){C.lastLineError=e}n.exports=C},{"./es5":13}]},{},[4])(4)},"object"==typeof n&&void 0!==e?e.exports=o():("undefined"!=typeof window?a=window:void 0!==r?a=r:"undefined"!=typeof self&&(a=self),a.Promise=o()),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise)}).call(this,t(376),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t(381).setImmediate)},{376:376,381:381}],376:[function(t,e,n){var r,i,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(t){r=a}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,l=[],f=!1,h=-1;function p(){f&&c&&(f=!1,c.length?l=c.concat(l):h=-1,l.length&&d())}function d(){if(!f){var t=u(p);f=!0;for(var e=l.length;e;){for(c=l,l=[];++h<e;)c&&c[h].run();h=-1,e=l.length}c=null,f=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function g(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new v(t,e)),1!==l.length||f||u(d)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],381:[function(t,e,n){(function(e,r){var i=t(376).nextTick,o=(Function.prototype.apply,Array.prototype.slice),a={},s=0;function u(t,e){this._id=t,this._clearFn=e}u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},n.setImmediate="function"==typeof e?e:function(t){var e=s++,r=!(arguments.length<2)&&o.call(arguments,1);return a[e]=!0,i(function(){a[e]&&(r?t.apply(null,r):t.call(null),n.clearImmediate(e))}),e},n.clearImmediate="function"==typeof r?r:function(t){delete a[t]}}).call(this,t(381).setImmediate,t(381).clearImmediate)},{376:376,381:381}],2:[function(t,e,n){(function(e){"use strict";if(t(331),t(378),t(4),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;var n="defineProperty";function r(t,e,r){t[e]||Object[n](t,e,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{331:331,378:378,4:4}],378:[function(t,e,n){(function(t){!function(t){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",c="object"==typeof e,l=t.regeneratorRuntime;if(l)c&&(e.exports=l);else{(l=t.regeneratorRuntime=c?e.exports:{}).wrap=b;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[a]=function(){return this};var _=Object.getPrototypeOf,y=_&&_(_(L([])));y&&y!==r&&i.call(y,a)&&(g=y);var m=k.prototype=S.prototype=Object.create(g);x.prototype=m.constructor=k,k.constructor=x,k[u]=x.displayName="GeneratorFunction",l.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},l.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,k):(t.__proto__=k,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(m),t},l.awrap=function(t){return{__await:t}},E(C.prototype),C.prototype[s]=function(){return this},l.AsyncIterator=C,l.async=function(t,e,n,r){var i=new C(b(t,e,n,r));return l.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},E(m),m[u]="Generator",m[a]=function(){return this},m.toString=function(){return"[object Generator]"},l.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=L,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(A),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;A(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function b(t,e,n,r){var i=e&&e.prototype instanceof S?e:S,o=Object.create(i.prototype),a=new j(r||[]);return o._invoke=function(t,e,n){var r=f;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return F()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=P(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=w(t,e,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===v)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function S(){}function x(){}function k(){}function E(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function C(e){function n(t,r,o,a){var s=w(e[t],e,r);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){n("next",t,o,a)},function(t){n("throw",t,o,a)}):Promise.resolve(c).then(function(t){u.value=t,o(u)},a)}a(s.arg)}var r;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(t,e){function i(){return new Promise(function(r,i){n(t,e,r,i)})}return r=r?r.then(i,i):i()}}function P(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,P(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=w(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function L(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:F}}function F(){return{value:n,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],4:[function(t,e,n){t(133),e.exports=t(26).RegExp.escape},{133:133,26:26}],331:[function(t,e,n){t(258),t(194),t(196),t(195),t(198),t(200),t(205),t(199),t(197),t(207),t(206),t(202),t(203),t(201),t(193),t(204),t(208),t(209),t(160),t(162),t(161),t(211),t(210),t(181),t(191),t(192),t(182),t(183),t(184),t(185),t(186),t(187),t(188),t(189),t(190),t(164),t(165),t(166),t(167),t(168),t(169),t(170),t(171),t(172),t(173),t(174),t(175),t(176),t(177),t(178),t(179),t(180),t(245),t(250),t(257),t(248),t(240),t(241),t(246),t(251),t(253),t(236),t(237),t(238),t(239),t(242),t(243),t(244),t(247),t(249),t(252),t(254),t(255),t(256),t(155),t(157),t(156),t(159),t(158),t(143),t(141),t(148),t(145),t(151),t(153),t(140),t(147),t(137),t(152),t(135),t(150),t(149),t(142),t(146),t(134),t(136),t(139),t(138),t(154),t(144),t(227),t(228),t(234),t(229),t(230),t(231),t(232),t(233),t(212),t(163),t(235),t(270),t(271),t(259),t(260),t(265),t(268),t(269),t(263),t(266),t(264),t(267),t(261),t(262),t(213),t(214),t(215),t(216),t(217),t(220),t(218),t(219),t(221),t(222),t(223),t(224),t(226),t(225),t(274),t(272),t(273),t(315),t(318),t(317),t(319),t(320),t(316),t(321),t(322),t(296),t(299),t(295),t(293),t(294),t(297),t(298),t(280),t(314),t(279),t(313),t(325),t(327),t(278),t(312),t(324),t(326),t(277),t(323),t(276),t(281),t(282),t(283),t(284),t(285),t(287),t(286),t(288),t(289),t(290),t(292),t(291),t(301),t(302),t(303),t(304),t(306),t(305),t(308),t(307),t(309),t(310),t(311),t(275),t(300),t(330),t(329),t(328),e.exports=t(26)},{134:134,135:135,136:136,137:137,138:138,139:139,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,160:160,161:161,162:162,163:163,164:164,165:165,166:166,167:167,168:168,169:169,170:170,171:171,172:172,173:173,174:174,175:175,176:176,177:177,178:178,179:179,180:180,181:181,182:182,183:183,184:184,185:185,186:186,187:187,188:188,189:189,190:190,191:191,192:192,193:193,194:194,195:195,196:196,197:197,198:198,199:199,200:200,201:201,202:202,203:203,204:204,205:205,206:206,207:207,208:208,209:209,210:210,211:211,212:212,213:213,214:214,215:215,216:216,217:217,218:218,219:219,220:220,221:221,222:222,223:223,224:224,225:225,226:226,227:227,228:228,229:229,230:230,231:231,232:232,233:233,234:234,235:235,236:236,237:237,238:238,239:239,240:240,241:241,242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,252:252,253:253,254:254,255:255,256:256,257:257,258:258,259:259,26:26,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278,279:279,280:280,281:281,282:282,283:283,284:284,285:285,286:286,287:287,288:288,289:289,290:290,291:291,292:292,293:293,294:294,295:295,296:296,297:297,298:298,299:299,300:300,301:301,302:302,303:303,304:304,305:305,306:306,307:307,308:308,309:309,310:310,311:311,312:312,313:313,314:314,315:315,316:316,317:317,318:318,319:319,320:320,321:321,322:322,323:323,324:324,325:325,326:326,327:327,328:328,329:329,330:330}],3:[function(t,e,n){},{}],26:[function(t,e,n){var r=e.exports={version:"2.6.0"};"number"==typeof __e&&(__e=r)},{}],133:[function(t,e,n){var r=t(36),i=t(97)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},{36:36,97:97}],5:[function(t,e,n){e.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},{}],6:[function(t,e,n){var r=t(21);e.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},{21:21}],21:[function(t,e,n){var r={}.toString;e.exports=function(t){return r.call(t).slice(8,-1)}},{}],7:[function(t,e,n){var r=t(131)("unscopables"),i=Array.prototype;null==i[r]&&t(45)(i,r,{}),e.exports=function(t){i[r][t]=!0}},{131:131,45:45}],131:[function(t,e,n){var r=t(105)("wks"),i=t(126),o=t(43).Symbol,a="function"==typeof o;(e.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},{105:105,126:126,43:43}],45:[function(t,e,n){var r=t(74),i=t(92);e.exports=t(32)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},{32:32,74:74,92:92}],8:[function(t,e,n){"use strict";var r=t(108)(!0);e.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},{108:108}],108:[function(t,e,n){var r=t(118),i=t(31);e.exports=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},{118:118,31:31}],9:[function(t,e,n){e.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},{}],10:[function(t,e,n){var r=t(54);e.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},{54:54}],54:[function(t,e,n){e.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],11:[function(t,e,n){"use strict";var r=t(121),i=t(116),o=t(120);e.exports=[].copyWithin||function(t,e){var n=r(this),a=o(n.length),s=i(t,a),u=i(e,a),c=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===c?a:i(c,a))-u,a-s),f=1;for(u<s&&s<u+l&&(f=-1,u+=l-1,s+=l-1);l-- >0;)u in n?n[s]=n[u]:delete n[s],s+=f,u+=f;return n}},{116:116,120:120,121:121}],121:[function(t,e,n){var r=t(31);e.exports=function(t){return Object(r(t))}},{31:31}],116:[function(t,e,n){var r=t(118),i=Math.max,o=Math.min;e.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},{118:118}],120:[function(t,e,n){var r=t(118),i=Math.min;e.exports=function(t){return t>0?i(r(t),9007199254740991):0}},{118:118}],12:[function(t,e,n){"use strict";var r=t(121),i=t(116),o=t(120);e.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)e[s++]=t;return e}},{116:116,120:120,121:121}],13:[function(t,e,n){var r=t(42);e.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},{42:42}],42:[function(t,e,n){var r=t(28),i=t(56),o=t(51),a=t(10),s=t(120),u=t(132),c={},l={};(n=e.exports=function(t,e,n,f,h){var p,d,v,g,_=h?function(){return t}:u(t),y=r(n,f,e?2:1),m=0;if("function"!=typeof _)throw TypeError(t+" is not iterable!");if(o(_)){for(p=s(t.length);p>m;m++)if((g=e?y(a(d=t[m])[0],d[1]):y(t[m]))===c||g===l)return g}else for(v=_.call(t);!(d=v.next()).done;)if((g=i(v,y,d.value,e))===c||g===l)return g}).BREAK=c,n.RETURN=l},{10:10,120:120,132:132,28:28,51:51,56:56}],14:[function(t,e,n){var r=t(119),i=t(120),o=t(116);e.exports=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),l=o(a,c);if(t&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}}},{116:116,119:119,120:120}],119:[function(t,e,n){var r=t(50),i=t(31);e.exports=function(t){return r(i(t))}},{31:31,50:50}],15:[function(t,e,n){var r=t(28),i=t(50),o=t(121),a=t(120),s=t(18);e.exports=function(t,e){var n=1==t,u=2==t,c=3==t,l=4==t,f=6==t,h=5==t||f,p=e||s;return function(e,s,d){for(var v,g,_=o(e),y=i(_),m=r(s,d,3),b=a(y.length),w=0,S=n?p(e,b):u?p(e,0):void 0;b>w;w++)if((h||w in y)&&(g=m(v=y[w],w,_),t))if(n)S[w]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:S.push(v)}else if(l)return!1;return f?-1:c||l?l:S}}},{120:120,121:121,18:18,28:28,50:50}],50:[function(t,e,n){var r=t(21);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},{21:21}],18:[function(t,e,n){var r=t(17);e.exports=function(t,e){return new(r(t))(e)}},{17:17}],28:[function(t,e,n){var r=t(5);e.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},{5:5}],16:[function(t,e,n){var r=t(5),i=t(121),o=t(50),a=t(120);e.exports=function(t,e,n,s,u){r(e);var c=i(t),l=o(c),f=a(c.length),h=u?f-1:0,p=u?-1:1;if(n<2)for(;;){if(h in l){s=l[h],h+=p;break}if(h+=p,u?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:f>h;h+=p)h in l&&(s=e(s,l[h],h,c));return s}},{120:120,121:121,5:5,50:50}],17:[function(t,e,n){var r=t(54),i=t(52),o=t(131)("species");e.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},{131:131,52:52,54:54}],52:[function(t,e,n){var r=t(21);e.exports=Array.isArray||function(t){return"Array"==r(t)}},{21:21}],19:[function(t,e,n){"use strict";var r=t(5),i=t(54),o=t(49),a=[].slice,s={};e.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?function(t,e,n){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)}(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},{49:49,5:5,54:54}],49:[function(t,e,n){e.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},{}],20:[function(t,e,n){var r=t(21),i=t(131)("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},{131:131,21:21}],22:[function(t,e,n){"use strict";var r=t(74).f,i=t(73),o=t(93),a=t(28),s=t(9),u=t(42),c=t(58),l=t(60),f=t(102),h=t(32),p=t(68).fastKey,d=t(128),v=h?"_s":"size",g=function(t,e){var n,r=p(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};e.exports={getConstructor:function(t,e,n,c){var l=t(function(t,r){s(t,l,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&u(r,n,t[c],t)});return o(l.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=d(this,e),r=g(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(d(this,e),t)}}),h&&r(l.prototype,"size",{get:function(){return d(this,e)[v]}}),l},def:function(t,e,n){var r,i,o=g(t,e);return o?o.v=n:(t._l=o={i:i=p(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,e,n){c(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?l(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,l(1))},n?"entries":"values",!n,!0),f(e)}}},{102:102,128:128,28:28,32:32,42:42,58:58,60:60,68:68,73:73,74:74,9:9,93:93}],93:[function(t,e,n){var r=t(94);e.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},{94:94}],73:[function(t,e,n){var r=t(10),i=t(75),o=t(34),a=t(104)("IE_PROTO"),s=function(){},u=function(){var e,n=t(33)("iframe"),r=o.length;for(n.style.display="none",t(46).appendChild(n),n.src="javascript:",(e=n.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[o[r]];return u()};e.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=u(),void 0===e?n:i(n,e)}},{10:10,104:104,33:33,34:34,46:46,75:75}],74:[function(t,e,n){var r=t(10),i=t(47),o=t(122),a=Object.defineProperty;n.f=t(32)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},{10:10,122:122,32:32,47:47}],58:[function(t,e,n){"use strict";var r=t(62),i=t(36),o=t(94),a=t(45),s=t(61),u=t(57),c=t(103),l=t(81),f=t(131)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(t,e,n,d,v,g,_){u(n,e,d);var y,m,b,w=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",x="values"==v,k=!1,E=t.prototype,C=E[f]||E["@@iterator"]||v&&E[v],P=C||w(v),O=v?x?w("entries"):P:void 0,A="Array"==e&&E.entries||C;if(A&&(b=l(A.call(new t)))!==Object.prototype&&b.next&&(c(b,S,!0),r||"function"==typeof b[f]||a(b,f,p)),x&&C&&"values"!==C.name&&(k=!0,P=function(){return C.call(this)}),r&&!_||!h&&!k&&E[f]||a(E,f,P),s[e]=P,s[S]=p,v)if(y={values:x?P:w("values"),keys:g?P:w("keys"),entries:O},_)for(m in y)m in E||o(E,m,y[m]);else i(i.P+i.F*(h||k),e,y);return y}},{103:103,131:131,36:36,45:45,57:57,61:61,62:62,81:81,94:94}],60:[function(t,e,n){e.exports=function(t,e){return{value:e,done:!!t}}},{}],102:[function(t,e,n){"use strict";var r=t(43),i=t(74),o=t(32),a=t(131)("species");e.exports=function(t){var e=r[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},{131:131,32:32,43:43,74:74}],32:[function(t,e,n){e.exports=!t(38)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{38:38}],128:[function(t,e,n){var r=t(54);e.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},{54:54}],68:[function(t,e,n){var r=t(126)("meta"),i=t(54),o=t(44),a=t(74).f,s=0,u=Object.isExtensible||function(){return!0},c=!t(38)(function(){return u(Object.preventExtensions({}))}),l=function(t){a(t,r,{value:{i:"O"+ ++s,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!u(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!u(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&u(t)&&!o(t,r)&&l(t),t}}},{126:126,38:38,44:44,54:54,74:74}],23:[function(t,e,n){var r=t(20),i=t(13);e.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},{13:13,20:20}],24:[function(t,e,n){"use strict";var r=t(93),i=t(68).getWeak,o=t(10),a=t(54),s=t(9),u=t(42),c=t(15),l=t(44),f=t(128),h=c(5),p=c(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},_=function(t,e){return h(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=_(this,t);if(e)return e[1]},has:function(t){return!!_(this,t)},set:function(t,e){var n=_(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},e.exports={getConstructor:function(t,e,n,o){var c=t(function(t,r){s(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=r&&u(r,n,t[o],t)});return r(c.prototype,{delete:function(t){if(!a(t))return!1;var n=i(t);return!0===n?v(f(this,e)).delete(t):n&&l(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=i(t);return!0===n?v(f(this,e)).has(t):n&&l(n,this._i)}}),c},def:function(t,e,n){var r=i(o(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},{10:10,128:128,15:15,42:42,44:44,54:54,68:68,9:9,93:93}],44:[function(t,e,n){var r={}.hasOwnProperty;e.exports=function(t,e){return r.call(t,e)}},{}],25:[function(t,e,n){"use strict";var r=t(43),i=t(36),o=t(94),a=t(93),s=t(68),u=t(42),c=t(9),l=t(54),f=t(38),h=t(59),p=t(103),d=t(48);e.exports=function(t,e,n,v,g,_){var y=r[t],m=y,b=g?"set":"add",w=m&&m.prototype,S={},x=function(t){var e=w[t];o(w,t,"delete"==t?function(t){return!(_&&!l(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(_&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return _&&!l(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof m&&(_||w.forEach&&!f(function(){(new m).entries().next()}))){var k=new m,E=k[b](_?{}:-0,1)!=k,C=f(function(){k.has(1)}),P=h(function(t){new m(t)}),O=!_&&f(function(){for(var t=new m,e=5;e--;)t[b](e,e);return!t.has(-0)});P||((m=e(function(e,n){c(e,m,t);var r=d(new y,e,m);return null!=n&&u(n,g,r[b],r),r})).prototype=w,w.constructor=m),(C||O)&&(x("delete"),x("has"),g&&x("get")),(O||E)&&x(b),_&&w.clear&&delete w.clear}else m=v.getConstructor(e,t,g,b),a(m.prototype,n),s.NEED=!0;return p(m,t),S[t]=m,i(i.G+i.W+i.F*(m!=y),S),_||v.setStrong(m,t,g),m}},{103:103,36:36,38:38,42:42,43:43,48:48,54:54,59:59,68:68,9:9,93:93,94:94}],43:[function(t,e,n){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},{}],36:[function(t,e,n){var r=t(43),i=t(26),o=t(45),a=t(94),s=t(28),u=function(t,e,n){var c,l,f,h,p=t&u.F,d=t&u.G,v=t&u.S,g=t&u.P,_=t&u.B,y=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,m=d?i:i[e]||(i[e]={}),b=m.prototype||(m.prototype={});for(c in d&&(n=e),n)f=((l=!p&&y&&void 0!==y[c])?y:n)[c],h=_&&l?s(f,r):g&&"function"==typeof f?s(Function.call,f):f,y&&a(y,c,f,t&u.U),m[c]!=f&&o(m,c,h),g&&b[c]!=f&&(b[c]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},{26:26,28:28,43:43,45:45,94:94}],94:[function(t,e,n){var r=t(43),i=t(45),o=t(44),a=t(126)("src"),s=Function.toString,u=(""+s).split("toString");t(26).inspectSource=function(t){return s.call(t)},(e.exports=function(t,e,n,s){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,a)||i(n,a,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},{126:126,26:26,43:43,44:44,45:45}],38:[function(t,e,n){e.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],59:[function(t,e,n){var r=t(131)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(a){}e.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},{131:131}],103:[function(t,e,n){var r=t(74).f,i=t(44),o=t(131)("toStringTag");e.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},{131:131,44:44,74:74}],48:[function(t,e,n){var r=t(54),i=t(101).set;e.exports=function(t,e,n){var o,a=e.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},{101:101,54:54}],27:[function(t,e,n){"use strict";var r=t(74),i=t(92);e.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},{74:74,92:92}],92:[function(t,e,n){e.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},{}],29:[function(t,e,n){"use strict";var r=t(38),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},{38:38}],30:[function(t,e,n){"use strict";var r=t(10),i=t(122);e.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},{10:10,122:122}],122:[function(t,e,n){var r=t(54);e.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},{54:54}],31:[function(t,e,n){e.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},{}],33:[function(t,e,n){var r=t(54),i=t(43).document,o=r(i)&&r(i.createElement);e.exports=function(t){return o?i.createElement(t):{}}},{43:43,54:54}],34:[function(t,e,n){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],35:[function(t,e,n){var r=t(83),i=t(80),o=t(84);e.exports=function(t){var e=r(t),n=i.f;if(n)for(var a,s=n(t),u=o.f,c=0;s.length>c;)u.call(t,a=s[c++])&&e.push(a);return e}},{80:80,83:83,84:84}],84:[function(t,e,n){n.f={}.propertyIsEnumerable},{}],83:[function(t,e,n){var r=t(82),i=t(34);e.exports=Object.keys||function(t){return r(t,i)}},{34:34,82:82}],80:[function(t,e,n){n.f=Object.getOwnPropertySymbols},{}],37:[function(t,e,n){var r=t(131)("match");e.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},{131:131}],39:[function(t,e,n){"use strict";t(228);var r=t(94),i=t(45),o=t(38),a=t(31),s=t(131),u=t(96),c=s("species"),l=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),f=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(t,e,n){var h=s(t),p=!o(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!o(function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[c]=function(){return n}),n[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!l||"split"===t&&!f){var v=/./[h],g=n(a,h,""[t],function(t,e,n,r,i){return e.exec===u?p&&!i?{done:!0,value:v.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),_=g[0],y=g[1];r(String.prototype,t,_),i(RegExp.prototype,h,2==e?function(t,e){return y.call(t,this,e)}:function(t){return y.call(t,this)})}}},{131:131,228:228,31:31,38:38,45:45,94:94,96:96}],228:[function(t,e,n){"use strict";var r=t(96);t(36)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},{36:36,96:96}],96:[function(t,e,n){"use strict";var r,i,o=t(40),a=RegExp.prototype.exec,s=String.prototype.replace,u=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(c||l)&&(u=function(t){var e,n,r,i,u=this;return l&&(n=new RegExp("^"+u.source+"$(?!\\s)",o.call(u))),c&&(e=u.lastIndex),r=a.call(u,t),c&&r&&(u.lastIndex=u.global?r.index+r[0].length:e),l&&r&&r.length>1&&s.call(r[0],n,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),e.exports=u},{40:40}],40:[function(t,e,n){"use strict";var r=t(10);e.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},{10:10}],41:[function(t,e,n){"use strict";var r=t(52),i=t(54),o=t(120),a=t(28),s=t(131)("isConcatSpreadable");e.exports=function t(e,n,u,c,l,f,h,p){for(var d,v,g=l,_=0,y=!!h&&a(h,p,3);_<c;){if(_ in u){if(d=y?y(u[_],_,n):u[_],v=!1,i(d)&&(v=void 0!==(v=d[s])?!!v:r(d)),v&&f>0)g=t(e,n,d,o(d.length),g,f-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=d}g++}_++}return g}},{120:120,131:131,28:28,52:52,54:54}],56:[function(t,e,n){var r=t(10);e.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},{10:10}],51:[function(t,e,n){var r=t(61),i=t(131)("iterator"),o=Array.prototype;e.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},{131:131,61:61}],132:[function(t,e,n){var r=t(20),i=t(131)("iterator"),o=t(61);e.exports=t(26).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},{131:131,20:20,26:26,61:61}],46:[function(t,e,n){var r=t(43).document;e.exports=r&&r.documentElement},{43:43}],47:[function(t,e,n){e.exports=!t(32)&&!t(38)(function(){return 7!=Object.defineProperty(t(33)("div"),"a",{get:function(){return 7}}).a})},{32:32,33:33,38:38}],101:[function(t,e,n){var r=t(54),i=t(10),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,n,r){try{(r=t(28)(Function.call,t(77).f(Object.prototype,"__proto__").set,2))(e,[]),n=!(e instanceof Array)}catch(e){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},{10:10,28:28,54:54,77:77}],61:[function(t,e,n){e.exports={}},{}],53:[function(t,e,n){var r=t(54),i=Math.floor;e.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},{54:54}],55:[function(t,e,n){var r=t(54),i=t(21),o=t(131)("match");e.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},{131:131,21:21,54:54}],57:[function(t,e,n){"use strict";var r=t(73),i=t(92),o=t(103),a={};t(45)(a,t(131)("iterator"),function(){return this}),e.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},{103:103,131:131,45:45,73:73,92:92}],62:[function(t,e,n){e.exports=!1},{}],81:[function(t,e,n){var r=t(44),i=t(121),o=t(104)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},{104:104,121:121,44:44}],63:[function(t,e,n){var r=Math.expm1;e.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},{}],64:[function(t,e,n){var r=t(67),i=Math.pow,o=i(2,-52),a=i(2,-23),s=i(2,127)*(2-a),u=i(2,-126);e.exports=Math.fround||function(t){var e,n,i=Math.abs(t),c=r(t);return i<u?c*(i/u/a+1/o-1/o)*u*a:(n=(e=(1+a/o)*i)-(e-i))>s||n!=n?c*(1/0):c*n}},{67:67}],67:[function(t,e,n){e.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},{}],65:[function(t,e,n){e.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},{}],66:[function(t,e,n){e.exports=Math.scale||function(t,e,n,r,i){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-r)/(n-e)+r}},{}],126:[function(t,e,n){var r=0,i=Math.random();e.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+i).toString(36))}},{}],69:[function(t,e,n){var r=t(163),i=t(36),o=t(105)("metadata"),a=o.store||(o.store=new(t(270))),s=function(t,e,n){var i=a.get(t);if(!i){if(!n)return;a.set(t,i=new r)}var o=i.get(e);if(!o){if(!n)return;i.set(e,o=new r)}return o};e.exports={store:a,map:s,has:function(t,e,n){var r=s(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=s(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){s(n,r,!0).set(t,e)},keys:function(t,e){var n=s(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},{105:105,163:163,270:270,36:36}],105:[function(t,e,n){var r=t(26),i=t(43),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:t(62)?"pure":"global",copyright:"\xa9 2018 Denis Pushkarev (zloirock.ru)"})},{26:26,43:43,62:62}],163:[function(t,e,n){"use strict";var r=t(22),i=t(128);e.exports=t(25)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(i(this,"Map"),0===t?0:t,e)}},r,!0)},{128:128,22:22,25:25}],270:[function(t,e,n){"use strict";var r,i=t(15)(0),o=t(94),a=t(68),s=t(72),u=t(24),c=t(54),l=t(38),f=t(128),h=a.getWeak,p=Object.isExtensible,d=u.ufstore,v={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},_={get:function(t){if(c(t)){var e=h(t);return!0===e?d(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(f(this,"WeakMap"),t,e)}},y=e.exports=t(25)("WeakMap",g,_,u,!0,!0);l(function(){return 7!=(new y).set((Object.freeze||Object)(v),7).get(v)})&&(s((r=u.getConstructor(g,"WeakMap")).prototype,_),a.NEED=!0,i(["delete","has","get","set"],function(t){var e=y.prototype,n=e[t];o(e,t,function(e,i){if(c(e)&&!p(e)){this._f||(this._f=new r);var o=this._f[t](e,i);return"set"==t?this:o}return n.call(this,e,i)})}))},{128:128,15:15,24:24,25:25,38:38,54:54,68:68,72:72,94:94}],70:[function(t,e,n){var r=t(43),i=t(115).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==t(21)(a);e.exports=function(){var t,e,n,c=function(){var r,i;for(u&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var l=s.resolve(void 0);n=function(){l.then(c)}}else n=function(){i.call(r,c)};else{var f=!0,h=document.createTextNode("");new o(c).observe(h,{characterData:!0}),n=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},{115:115,21:21,43:43}],115:[function(t,e,n){var r,i,o,a=t(28),s=t(49),u=t(46),c=t(33),l=t(43),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,g=0,_={},y=function(){var t=+this;if(_.hasOwnProperty(t)){var e=_[t];delete _[t],e()}},m=function(t){y.call(t.data)};h&&p||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return _[++g]=function(){s("function"==typeof t?t:Function(t),e)},r(g),g},p=function(t){delete _[t]},"process"==t(21)(f)?r=function(t){f.nextTick(a(y,t,1))}:v&&v.now?r=function(t){v.now(a(y,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=m,r=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",m,!1)):r="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),e.exports={set:h,clear:p}},{21:21,28:28,33:33,43:43,46:46,49:49}],71:[function(t,e,n){"use strict";var r=t(5);function i(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}e.exports.f=function(t){return new i(t)}},{5:5}],72:[function(t,e,n){"use strict";var r=t(83),i=t(80),o=t(84),a=t(121),s=t(50),u=Object.assign;e.exports=!u||t(38)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=u({},t)[n]||Object.keys(u({},e)).join("")!=r})?function(t,e){for(var n=a(t),u=arguments.length,c=1,l=i.f,f=o.f;u>c;)for(var h,p=s(arguments[c++]),d=l?r(p).concat(l(p)):r(p),v=d.length,g=0;v>g;)f.call(p,h=d[g++])&&(n[h]=p[h]);return n}:u},{121:121,38:38,50:50,80:80,83:83,84:84}],75:[function(t,e,n){var r=t(74),i=t(10),o=t(83);e.exports=t(32)?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),s=a.length,u=0;s>u;)r.f(t,n=a[u++],e[n]);return t}},{10:10,32:32,74:74,83:83}],104:[function(t,e,n){var r=t(105)("keys"),i=t(126);e.exports=function(t){return r[t]||(r[t]=i(t))}},{105:105,126:126}],76:[function(t,e,n){"use strict";e.exports=t(62)||!t(38)(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete t(43)[e]})},{38:38,43:43,62:62}],77:[function(t,e,n){var r=t(84),i=t(92),o=t(119),a=t(122),s=t(44),u=t(47),c=Object.getOwnPropertyDescriptor;n.f=t(32)?c:function(t,e){if(t=o(t),e=a(e,!0),u)try{return c(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},{119:119,122:122,32:32,44:44,47:47,84:84,92:92}],78:[function(t,e,n){var r=t(119),i=t(79).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},{119:119,79:79}],79:[function(t,e,n){var r=t(82),i=t(34).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},{34:34,82:82}],82:[function(t,e,n){var r=t(44),i=t(119),o=t(14)(!1),a=t(104)("IE_PROTO");e.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},{104:104,119:119,14:14,44:44}],85:[function(t,e,n){var r=t(36),i=t(26),o=t(38);e.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",a)}},{26:26,36:36,38:38}],86:[function(t,e,n){var r=t(83),i=t(119),o=t(84).f;e.exports=function(t){return function(e){for(var n,a=i(e),s=r(a),u=s.length,c=0,l=[];u>c;)o.call(a,n=s[c++])&&l.push(t?[n,a[n]]:a[n]);return l}}},{119:119,83:83,84:84}],87:[function(t,e,n){var r=t(79),i=t(80),o=t(10),a=t(43).Reflect;e.exports=a&&a.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},{10:10,43:43,79:79,80:80}],88:[function(t,e,n){var r=t(43).parseFloat,i=t(113).trim;e.exports=1/r(t(114)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},{113:113,114:114,43:43}],114:[function(t,e,n){e.exports="\t\n\v\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff"},{}],113:[function(t,e,n){var r=t(36),i=t(31),o=t(38),a=t(114),s="["+a+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),l=function(t,e,n){var i={},s=o(function(){return!!a[t]()||"\u200b\x85"!="\u200b\x85"[t]()}),u=i[t]=s?e(f):a[t];n&&(i[n]=u),r(r.P+r.F*s,"String",i)},f=l.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};e.exports=l},{114:114,31:31,36:36,38:38}],89:[function(t,e,n){var r=t(43).parseInt,i=t(113).trim,o=t(114),a=/^[-+]?0[xX]/;e.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},{113:113,114:114,43:43}],90:[function(t,e,n){e.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},{}],91:[function(t,e,n){var r=t(10),i=t(54),o=t(71);e.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},{10:10,54:54,71:71}],95:[function(t,e,n){"use strict";var r=t(20),i=RegExp.prototype.exec;e.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},{20:20}],97:[function(t,e,n){e.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},{}],98:[function(t,e,n){e.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},{}],99:[function(t,e,n){"use strict";var r=t(36),i=t(5),o=t(28),a=t(42);e.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,s,u=arguments[1];return i(this),(e=void 0!==u)&&i(u),null==t?new this:(n=[],e?(r=0,s=o(u,arguments[2],2),a(t,!1,function(t){n.push(s(t,r++))})):a(t,!1,n.push,n),new this(n))}})}},{28:28,36:36,42:42,5:5}],100:[function(t,e,n){"use strict";var r=t(36);e.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},{36:36}],106:[function(t,e,n){var r=t(10),i=t(5),o=t(131)("species");e.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},{10:10,131:131,5:5}],107:[function(t,e,n){"use strict";var r=t(38);e.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},{38:38}],118:[function(t,e,n){var r=Math.ceil,i=Math.floor;e.exports=function(t){return isNaN(t=+t)?0:(t>0?i:r)(t)}},{}],109:[function(t,e,n){var r=t(55),i=t(31);e.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},{31:31,55:55}],110:[function(t,e,n){var r=t(36),i=t(38),o=t(31),a=/"/g,s=function(t,e,n,r){var i=String(o(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+i+"</"+e+">"};e.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},{31:31,36:36,38:38}],111:[function(t,e,n){var r=t(120),i=t(112),o=t(31);e.exports=function(t,e,n,a){var s=String(o(t)),u=s.length,c=void 0===n?" ":String(n),l=r(e);if(l<=u||""==c)return s;var f=l-u,h=i.call(c,Math.ceil(f/c.length));return h.length>f&&(h=h.slice(0,f)),a?h+s:s+h}},{112:112,120:120,31:31}],112:[function(t,e,n){"use strict";var r=t(118),i=t(31);e.exports=function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},{118:118,31:31}],117:[function(t,e,n){var r=t(118),i=t(120);e.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},{118:118,120:120}],123:[function(t,e,n){"use strict";if(t(32)){var r=t(62),i=t(43),o=t(38),a=t(36),s=t(125),u=t(124),c=t(28),l=t(9),f=t(92),h=t(45),p=t(93),d=t(118),v=t(120),g=t(117),_=t(116),y=t(122),m=t(44),b=t(20),w=t(54),S=t(121),x=t(51),k=t(73),E=t(81),C=t(79).f,P=t(132),O=t(126),A=t(131),j=t(15),L=t(14),F=t(106),R=t(144),T=t(61),I=t(59),M=t(102),N=t(12),D=t(11),B=t(74),U=t(77),H=B.f,$=U.f,V=i.RangeError,q=i.TypeError,W=i.Uint8Array,z=Array.prototype,G=u.ArrayBuffer,K=u.DataView,Q=j(0),J=j(2),X=j(3),Y=j(4),Z=j(5),tt=j(6),et=L(!0),nt=L(!1),rt=R.values,it=R.keys,ot=R.entries,at=z.lastIndexOf,st=z.reduce,ut=z.reduceRight,ct=z.join,lt=z.sort,ft=z.slice,ht=z.toString,pt=z.toLocaleString,dt=A("iterator"),vt=A("toStringTag"),gt=O("typed_constructor"),_t=O("def_constructor"),yt=s.CONSTR,mt=s.TYPED,bt=s.VIEW,wt=j(1,function(t,e){return Ct(F(t,t[_t]),e)}),St=o(function(){return 1===new W(new Uint16Array([1]).buffer)[0]}),xt=!!W&&!!W.prototype.set&&o(function(){new W(1).set({})}),kt=function(t,e){var n=d(t);if(n<0||n%e)throw V("Wrong offset!");return n},Et=function(t){if(w(t)&&mt in t)return t;throw q(t+" is not a typed array!")},Ct=function(t,e){if(!(w(t)&&gt in t))throw q("It is not a typed array constructor!");return new t(e)},Pt=function(t,e){return Ot(F(t,t[_t]),e)},Ot=function(t,e){for(var n=0,r=e.length,i=Ct(t,r);r>n;)i[n]=e[n++];return i},At=function(t,e,n){H(t,e,{get:function(){return this._d[n]}})},jt=function(t){var e,n,r,i,o,a,s=S(t),u=arguments.length,l=u>1?arguments[1]:void 0,f=void 0!==l,h=P(s);if(null!=h&&!x(h)){for(a=h.call(s),r=[],e=0;!(o=a.next()).done;e++)r.push(o.value);s=r}for(f&&u>2&&(l=c(l,arguments[2],2)),e=0,n=v(s.length),i=Ct(this,n);n>e;e++)i[e]=f?l(s[e],e):s[e];return i},Lt=function(){for(var t=0,e=arguments.length,n=Ct(this,e);e>t;)n[t]=arguments[t++];return n},Ft=!!W&&o(function(){pt.call(new W(1))}),Rt=function(){return pt.apply(Ft?ft.call(Et(this)):Et(this),arguments)},Tt={copyWithin:function(t,e){return D.call(Et(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return Y(Et(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return N.apply(Et(this),arguments)},filter:function(t){return Pt(this,J(Et(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Z(Et(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Et(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Q(Et(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Et(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Et(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Et(this),arguments)},lastIndexOf:function(t){return at.apply(Et(this),arguments)},map:function(t){return wt(Et(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Et(this),arguments)},reduceRight:function(t){return ut.apply(Et(this),arguments)},reverse:function(){for(var t,e=Et(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(Et(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return lt.call(Et(this),t)},subarray:function(t,e){var n=Et(this),r=n.length,i=_(t,r);return new(F(n,n[_t]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,v((void 0===e?r:_(e,r))-i))}},It=function(t,e){return Pt(this,ft.call(Et(this),t,e))},Mt=function(t){Et(this);var e=kt(arguments[1],1),n=this.length,r=S(t),i=v(r.length),o=0;if(i+e>n)throw V("Wrong length!");for(;o<i;)this[e+o]=r[o++]},Nt={entries:function(){return ot.call(Et(this))},keys:function(){return it.call(Et(this))},values:function(){return rt.call(Et(this))}},Dt=function(t,e){return w(t)&&t[mt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Bt=function(t,e){return Dt(t,e=y(e,!0))?f(2,t[e]):$(t,e)},Ut=function(t,e,n){return!(Dt(t,e=y(e,!0))&&w(n)&&m(n,"value"))||m(n,"get")||m(n,"set")||n.configurable||m(n,"writable")&&!n.writable||m(n,"enumerable")&&!n.enumerable?H(t,e,n):(t[e]=n.value,t)};yt||(U.f=Bt,B.f=Ut),a(a.S+a.F*!yt,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:Ut}),o(function(){ht.call({})})&&(ht=pt=function(){return ct.call(this)});var Ht=p({},Tt);p(Ht,Nt),h(Ht,dt,Nt.values),p(Ht,{slice:It,set:Mt,constructor:function(){},toString:ht,toLocaleString:Rt}),At(Ht,"buffer","b"),At(Ht,"byteOffset","o"),At(Ht,"byteLength","l"),At(Ht,"length","e"),H(Ht,vt,{get:function(){return this[mt]}}),e.exports=function(t,e,n,u){var c=t+((u=!!u)?"Clamped":"")+"Array",f="get"+t,p="set"+t,d=i[c],_=d||{},y=d&&E(d),m=!d||!s.ABV,S={},x=d&&d.prototype,P=function(t,n){H(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,St)}(this,n)},set:function(t){return function(t,n,r){var i=t._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](n*e+i.o,r,St)}(this,n,t)},enumerable:!0})};m?(d=n(function(t,n,r,i){l(t,d,c,"_d");var o,a,s,u,f=0,p=0;if(w(n)){if(!(n instanceof G||"ArrayBuffer"==(u=b(n))||"SharedArrayBuffer"==u))return mt in n?Ot(d,n):jt.call(d,n);o=n,p=kt(r,e);var _=n.byteLength;if(void 0===i){if(_%e)throw V("Wrong length!");if((a=_-p)<0)throw V("Wrong length!")}else if((a=v(i)*e)+p>_)throw V("Wrong length!");s=a/e}else s=g(n),o=new G(a=s*e);for(h(t,"_d",{b:o,o:p,l:a,e:s,v:new K(o)});f<s;)P(t,f++)}),x=d.prototype=k(Ht),h(x,"constructor",d)):o(function(){d(1)})&&o(function(){new d(-1)})&&I(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,i){var o;return l(t,d,c),w(n)?n instanceof G||"ArrayBuffer"==(o=b(n))||"SharedArrayBuffer"==o?void 0!==i?new _(n,kt(r,e),i):void 0!==r?new _(n,kt(r,e)):new _(n):mt in n?Ot(d,n):jt.call(d,n):new _(g(n))}),Q(y!==Function.prototype?C(_).concat(C(y)):C(_),function(t){t in d||h(d,t,_[t])}),d.prototype=x,r||(x.constructor=d));var O=x[dt],A=!!O&&("values"==O.name||null==O.name),j=Nt.values;h(d,gt,!0),h(x,mt,c),h(x,bt,!0),h(x,_t,d),(u?new d(1)[vt]==c:vt in x)||H(x,vt,{get:function(){return c}}),S[c]=d,a(a.G+a.W+a.F*(d!=_),S),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*o(function(){_.of.call(d,1)}),c,{from:jt,of:Lt}),"BYTES_PER_ELEMENT"in x||h(x,"BYTES_PER_ELEMENT",e),a(a.P,c,Tt),M(c),a(a.P+a.F*xt,c,{set:Mt}),a(a.P+a.F*!A,c,Nt),r||x.toString==ht||(x.toString=ht),a(a.P+a.F*o(function(){new d(1).slice()}),c,{slice:It}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){x.toLocaleString.call([1,2])})),c,{toLocaleString:Rt}),T[c]=A?O:j,r||A||h(x,dt,j)}}else e.exports=function(){}},{102:102,106:106,11:11,116:116,117:117,118:118,12:12,120:120,121:121,122:122,124:124,125:125,126:126,131:131,132:132,14:14,144:144,15:15,20:20,28:28,32:32,36:36,38:38,43:43,44:44,45:45,51:51,54:54,59:59,61:61,62:62,73:73,74:74,77:77,79:79,81:81,9:9,92:92,93:93}],125:[function(t,e,n){for(var r,i=t(43),o=t(45),a=t(126),s=a("typed_array"),u=a("view"),c=!(!i.ArrayBuffer||!i.DataView),l=c,f=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=i[h[f++]])?(o(r.prototype,s,!0),o(r.prototype,u,!0)):l=!1;e.exports={ABV:c,CONSTR:l,TYPED:s,VIEW:u}},{126:126,43:43,45:45}],124:[function(t,e,n){"use strict";var r=t(43),i=t(32),o=t(62),a=t(125),s=t(45),u=t(93),c=t(38),l=t(9),f=t(118),h=t(120),p=t(117),d=t(79).f,v=t(74).f,g=t(12),_=t(103),y="prototype",m="Wrong index!",b=r.ArrayBuffer,w=r.DataView,S=r.Math,x=r.RangeError,k=r.Infinity,E=b,C=S.abs,P=S.pow,O=S.floor,A=S.log,j=S.LN2,L=i?"_b":"buffer",F=i?"_l":"byteLength",R=i?"_o":"byteOffset";function T(t,e,n){var r,i,o,a=new Array(n),s=8*n-e-1,u=(1<<s)-1,c=u>>1,l=23===e?P(2,-24)-P(2,-77):0,f=0,h=t<0||0===t&&1/t<0?1:0;for((t=C(t))!=t||t===k?(i=t!=t?1:0,r=u):(r=O(A(t)/j),t*(o=P(2,-r))<1&&(r--,o*=2),(t+=r+c>=1?l/o:l*P(2,1-c))*o>=2&&(r++,o/=2),r+c>=u?(i=0,r=u):r+c>=1?(i=(t*o-1)*P(2,e),r+=c):(i=t*P(2,c-1)*P(2,e),r=0));e>=8;a[f++]=255&i,i/=256,e-=8);for(r=r<<e|i,s+=e;s>0;a[f++]=255&r,r/=256,s-=8);return a[--f]|=128*h,a}function I(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,a=o>>1,s=i-7,u=n-1,c=t[u--],l=127&c;for(c>>=7;s>0;l=256*l+t[u],u--,s-=8);for(r=l&(1<<-s)-1,l>>=-s,s+=e;s>0;r=256*r+t[u],u--,s-=8);if(0===l)l=1-a;else{if(l===o)return r?NaN:c?-k:k;r+=P(2,e),l-=a}return(c?-1:1)*r*P(2,l-e)}function M(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function B(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function U(t){return T(t,52,8)}function H(t){return T(t,23,4)}function $(t,e,n){v(t[y],e,{get:function(){return this[n]}})}function V(t,e,n,r){var i=p(+n);if(i+e>t[F])throw x(m);var o=t[L]._b,a=i+t[R],s=o.slice(a,a+e);return r?s:s.reverse()}function q(t,e,n,r,i,o){var a=p(+n);if(a+e>t[F])throw x(m);for(var s=t[L]._b,u=a+t[R],c=r(+i),l=0;l<e;l++)s[u+l]=c[o?l:e-l-1]}if(a.ABV){if(!c(function(){b(1)})||!c(function(){new b(-1)})||c(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var W,z=(b=function(t){return l(this,b),new E(p(t))})[y]=E[y],G=d(E),K=0;G.length>K;)(W=G[K++])in b||s(b,W,E[W]);o||(z.constructor=b)}var Q=new w(new b(2)),J=w[y].setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||u(w[y],{setInt8:function(t,e){J.call(this,t,e<<24>>24)},setUint8:function(t,e){J.call(this,t,e<<24>>24)}},!0)}else b=function(t){l(this,b,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[F]=e},w=function(t,e,n){l(this,w,"DataView"),l(t,b,"DataView");var r=t[F],i=f(e);if(i<0||i>r)throw x("Wrong offset!");if(i+(n=void 0===n?r-i:h(n))>r)throw x("Wrong length!");this[L]=t,this[R]=i,this[F]=n},i&&($(b,"byteLength","_l"),$(w,"buffer","_b"),$(w,"byteLength","_l"),$(w,"byteOffset","_o")),u(w[y],{getInt8:function(t){return V(this,1,t)[0]<<24>>24},getUint8:function(t){return V(this,1,t)[0]},getInt16:function(t){var e=V(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=V(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return M(V(this,4,t,arguments[1]))},getUint32:function(t){return M(V(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return I(V(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return I(V(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){q(this,1,t,N,e)},setUint8:function(t,e){q(this,1,t,N,e)},setInt16:function(t,e){q(this,2,t,D,e,arguments[2])},setUint16:function(t,e){q(this,2,t,D,e,arguments[2])},setInt32:function(t,e){q(this,4,t,B,e,arguments[2])},setUint32:function(t,e){q(this,4,t,B,e,arguments[2])},setFloat32:function(t,e){q(this,4,t,H,e,arguments[2])},setFloat64:function(t,e){q(this,8,t,U,e,arguments[2])}});_(b,"ArrayBuffer"),_(w,"DataView"),s(w[y],a.VIEW,!0),n.ArrayBuffer=b,n.DataView=w},{103:103,117:117,118:118,12:12,120:120,125:125,32:32,38:38,43:43,45:45,62:62,74:74,79:79,9:9,93:93}],144:[function(t,e,n){"use strict";var r=t(7),i=t(60),o=t(61),a=t(119);e.exports=t(58)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},{119:119,58:58,60:60,61:61,7:7}],127:[function(t,e,n){var r=t(43).navigator;e.exports=r&&r.userAgent||""},{43:43}],129:[function(t,e,n){var r=t(43),i=t(26),o=t(62),a=t(130),s=t(74).f;e.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},{130:130,26:26,43:43,62:62,74:74}],130:[function(t,e,n){n.f=t(131)},{131:131}],134:[function(t,e,n){var r=t(36);r(r.P,"Array",{copyWithin:t(11)}),t(7)("copyWithin")},{11:11,36:36,7:7}],135:[function(t,e,n){"use strict";var r=t(36),i=t(15)(4);r(r.P+r.F*!t(107)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},{107:107,15:15,36:36}],136:[function(t,e,n){var r=t(36);r(r.P,"Array",{fill:t(12)}),t(7)("fill")},{12:12,36:36,7:7}],137:[function(t,e,n){"use strict";var r=t(36),i=t(15)(2);r(r.P+r.F*!t(107)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},{107:107,15:15,36:36}],138:[function(t,e,n){"use strict";var r=t(36),i=t(15)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(7)(o)},{15:15,36:36,7:7}],139:[function(t,e,n){"use strict";var r=t(36),i=t(15)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(7)("find")},{15:15,36:36,7:7}],140:[function(t,e,n){"use strict";var r=t(36),i=t(15)(0),o=t(107)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},{107:107,15:15,36:36}],141:[function(t,e,n){"use strict";var r=t(28),i=t(36),o=t(121),a=t(56),s=t(51),u=t(120),c=t(27),l=t(132);i(i.S+i.F*!t(59)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,f,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,_=0,y=l(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==y||p==Array&&s(y))for(n=new p(e=u(h.length));e>_;_++)c(n,_,g?v(h[_],_):h[_]);else for(f=y.call(h),n=new p;!(i=f.next()).done;_++)c(n,_,g?a(f,v,[i.value,_],!0):i.value);return n.length=_,n}})},{120:120,121:121,132:132,27:27,28:28,36:36,51:51,56:56,59:59}],142:[function(t,e,n){"use strict";var r=t(36),i=t(14)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!t(107)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},{107:107,14:14,36:36}],143:[function(t,e,n){var r=t(36);r(r.S,"Array",{isArray:t(52)})},{36:36,52:52}],145:[function(t,e,n){"use strict";var r=t(36),i=t(119),o=[].join;r(r.P+r.F*(t(50)!=Object||!t(107)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},{107:107,119:119,36:36,50:50}],146:[function(t,e,n){"use strict";var r=t(36),i=t(119),o=t(118),a=t(120),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!t(107)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=i(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},{107:107,118:118,119:119,120:120,36:36}],147:[function(t,e,n){"use strict";var r=t(36),i=t(15)(1);r(r.P+r.F*!t(107)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},{107:107,15:15,36:36}],148:[function(t,e,n){"use strict";var r=t(36),i=t(27);r(r.S+r.F*t(38)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},{27:27,36:36,38:38}],149:[function(t,e,n){"use strict";var r=t(36),i=t(16);r(r.P+r.F*!t(107)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},{107:107,16:16,36:36}],150:[function(t,e,n){"use strict";var r=t(36),i=t(16);r(r.P+r.F*!t(107)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},{107:107,16:16,36:36}],151:[function(t,e,n){"use strict";var r=t(36),i=t(46),o=t(21),a=t(116),s=t(120),u=[].slice;r(r.P+r.F*t(38)(function(){i&&u.call(i)}),"Array",{slice:function(t,e){var n=s(this.length),r=o(this);if(e=void 0===e?n:e,"Array"==r)return u.call(this,t,e);for(var i=a(t,n),c=a(e,n),l=s(c-i),f=new Array(l),h=0;h<l;h++)f[h]="String"==r?this.charAt(i+h):this[i+h];return f}})},{116:116,120:120,21:21,36:36,38:38,46:46}],152:[function(t,e,n){"use strict";var r=t(36),i=t(15)(3);r(r.P+r.F*!t(107)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},{107:107,15:15,36:36}],153:[function(t,e,n){"use strict";var r=t(36),i=t(5),o=t(121),a=t(38),s=[].sort,u=[1,2,3];r(r.P+r.F*(a(function(){u.sort(void 0)})||!a(function(){u.sort(null)})||!t(107)(s)),"Array",{sort:function(t){return void 0===t?s.call(o(this)):s.call(o(this),i(t))}})},{107:107,121:121,36:36,38:38,5:5}],154:[function(t,e,n){t(102)("Array")},{102:102}],155:[function(t,e,n){var r=t(36);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},{36:36}],156:[function(t,e,n){var r=t(36),i=t(29);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},{29:29,36:36}],157:[function(t,e,n){"use strict";var r=t(36),i=t(121),o=t(122);r(r.P+r.F*t(38)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},{121:121,122:122,36:36,38:38}],158:[function(t,e,n){var r=t(131)("toPrimitive"),i=Date.prototype;r in i||t(45)(i,r,t(30))},{131:131,30:30,45:45}],159:[function(t,e,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&t(94)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},{94:94}],160:[function(t,e,n){var r=t(36);r(r.P,"Function",{bind:t(19)})},{19:19,36:36}],161:[function(t,e,n){"use strict";var r=t(54),i=t(81),o=t(131)("hasInstance"),a=Function.prototype;o in a||t(74).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},{131:131,54:54,74:74,81:81}],162:[function(t,e,n){var r=t(74).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||t(32)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},{32:32,74:74}],164:[function(t,e,n){var r=t(36),i=t(65),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},{36:36,65:65}],165:[function(t,e,n){var r=t(36),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},{36:36}],166:[function(t,e,n){var r=t(36),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},{36:36}],167:[function(t,e,n){var r=t(36),i=t(67);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},{36:36,67:67}],168:[function(t,e,n){var r=t(36);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},{36:36}],169:[function(t,e,n){var r=t(36),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},{36:36}],170:[function(t,e,n){var r=t(36),i=t(63);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},{36:36,63:63}],171:[function(t,e,n){var r=t(36);r(r.S,"Math",{fround:t(64)})},{36:36,64:64}],172:[function(t,e,n){var r=t(36),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,o=0,a=0,s=arguments.length,u=0;a<s;)u<(n=i(arguments[a++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(o)}})},{36:36}],173:[function(t,e,n){var r=t(36),i=Math.imul;r(r.S+r.F*t(38)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},{36:36,38:38}],174:[function(t,e,n){var r=t(36);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},{36:36}],175:[function(t,e,n){var r=t(36);r(r.S,"Math",{log1p:t(65)})},{36:36,65:65}],176:[function(t,e,n){var r=t(36);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},{36:36}],177:[function(t,e,n){var r=t(36);r(r.S,"Math",{sign:t(67)})},{36:36,67:67}],178:[function(t,e,n){var r=t(36),i=t(63),o=Math.exp;r(r.S+r.F*t(38)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},{36:36,38:38,63:63}],179:[function(t,e,n){var r=t(36),i=t(63),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},{36:36,63:63}],180:[function(t,e,n){var r=t(36);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},{36:36}],181:[function(t,e,n){"use strict";var r=t(43),i=t(44),o=t(21),a=t(48),s=t(122),u=t(38),c=t(79).f,l=t(77).f,f=t(74).f,h=t(113).trim,p=r.Number,d=p,v=p.prototype,g="Number"==o(t(73)(v)),_="trim"in String.prototype,y=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var n,r,i,o=(e=_?e.trim():h(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var a,u=e.slice(2),c=0,l=u.length;c<l;c++)if((a=u.charCodeAt(c))<48||a>i)return NaN;return parseInt(u,r)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof p&&(g?u(function(){v.valueOf.call(n)}):"Number"!=o(n))?a(new d(y(e)),n,p):y(e)};for(var m,b=t(32)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;b.length>w;w++)i(d,m=b[w])&&!i(p,m)&&f(p,m,l(d,m));p.prototype=v,v.constructor=p,t(94)(r,"Number",p)}},{113:113,122:122,21:21,32:32,38:38,43:43,44:44,48:48,73:73,74:74,77:77,79:79,94:94}],182:[function(t,e,n){var r=t(36);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},{36:36}],183:[function(t,e,n){var r=t(36),i=t(43).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},{36:36,43:43}],184:[function(t,e,n){var r=t(36);r(r.S,"Number",{isInteger:t(53)})},{36:36,53:53}],185:[function(t,e,n){var r=t(36);r(r.S,"Number",{isNaN:function(t){return t!=t}})},{36:36}],186:[function(t,e,n){var r=t(36),i=t(53),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},{36:36,53:53}],187:[function(t,e,n){var r=t(36);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},{36:36}],188:[function(t,e,n){var r=t(36);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},{36:36}],189:[function(t,e,n){var r=t(36),i=t(88);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},{36:36,88:88}],190:[function(t,e,n){var r=t(36),i=t(89);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},{36:36,89:89}],191:[function(t,e,n){"use strict";var r=t(36),i=t(118),o=t(6),a=t(112),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=u(r/1e7)},h=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=u(n/t),n=n%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!t(38)(function(){s.call({})})),"Number",{toFixed:function(t){var e,n,r,s,u=o(this,l),c=i(t),v="",g="0";if(c<0||c>20)throw RangeError(l);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=u*d(2,69,1);n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}()-69)<0?u*d(2,-e,1):u/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=e-1;r>=23;)h(1<<23),r-=23;h(1<<r),f(1,1),h(2),g=p()}else f(0,n),f(1<<-e,0),g=p()+a.call("0",c);return c>0?v+((s=g.length)<=c?"0."+a.call("0",c-s)+g:g.slice(0,s-c)+"."+g.slice(s-c)):v+g}})},{112:112,118:118,36:36,38:38,6:6}],192:[function(t,e,n){"use strict";var r=t(36),i=t(38),o=t(6),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},{36:36,38:38,6:6}],193:[function(t,e,n){var r=t(36);r(r.S+r.F,"Object",{assign:t(72)})},{36:36,72:72}],194:[function(t,e,n){var r=t(36);r(r.S,"Object",{create:t(73)})},{36:36,73:73}],195:[function(t,e,n){var r=t(36);r(r.S+r.F*!t(32),"Object",{defineProperties:t(75)})},{32:32,36:36,75:75}],196:[function(t,e,n){var r=t(36);r(r.S+r.F*!t(32),"Object",{defineProperty:t(74).f})},{32:32,36:36,74:74}],197:[function(t,e,n){var r=t(54),i=t(68).onFreeze;t(85)("freeze",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},{54:54,68:68,85:85}],198:[function(t,e,n){var r=t(119),i=t(77).f;t(85)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},{119:119,77:77,85:85}],199:[function(t,e,n){t(85)("getOwnPropertyNames",function(){return t(78).f})},{78:78,85:85}],200:[function(t,e,n){var r=t(121),i=t(81);t(85)("getPrototypeOf",function(){return function(t){return i(r(t))}})},{121:121,81:81,85:85}],201:[function(t,e,n){var r=t(54);t(85)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},{54:54,85:85}],202:[function(t,e,n){var r=t(54);t(85)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},{54:54,85:85}],203:[function(t,e,n){var r=t(54);t(85)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},{54:54,85:85}],204:[function(t,e,n){var r=t(36);r(r.S,"Object",{is:t(98)})},{36:36,98:98}],205:[function(t,e,n){var r=t(121),i=t(83);t(85)("keys",function(){return function(t){return i(r(t))}})},{121:121,83:83,85:85}],206:[function(t,e,n){var r=t(54),i=t(68).onFreeze;t(85)("preventExtensions",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},{54:54,68:68,85:85}],207:[function(t,e,n){var r=t(54),i=t(68).onFreeze;t(85)("seal",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},{54:54,68:68,85:85}],208:[function(t,e,n){var r=t(36);r(r.S,"Object",{setPrototypeOf:t(101).set})},{101:101,36:36}],209:[function(t,e,n){"use strict";var r=t(20),i={};i[t(131)("toStringTag")]="z",i+""!="[object z]"&&t(94)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},{131:131,20:20,94:94}],210:[function(t,e,n){var r=t(36),i=t(88);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},{36:36,88:88}],211:[function(t,e,n){var r=t(36),i=t(89);r(r.G+r.F*(parseInt!=i),{parseInt:i})},{36:36,89:89}],212:[function(t,e,n){"use strict";var r,i,o,a,s=t(62),u=t(43),c=t(28),l=t(20),f=t(36),h=t(54),p=t(5),d=t(9),v=t(42),g=t(106),_=t(115).set,y=t(70)(),m=t(71),b=t(90),w=t(127),S=t(91),x=u.TypeError,k=u.process,E=k&&k.versions,C=E&&E.v8||"",P=u.Promise,O="process"==l(k),A=function(){},j=i=m.f,L=!!function(){try{var e=P.resolve(1),n=(e.constructor={})[t(131)("species")]=function(t){t(A,A)};return(O||"function"==typeof PromiseRejectionEvent)&&e.then(A)instanceof n&&0!==C.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),F=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},R=function(t,e){if(!t._n){t._n=!0;var n=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,a=function(e){var n,o,a,s=i?e.ok:e.fail,u=e.resolve,c=e.reject,l=e.domain;try{s?(i||(2==t._h&&M(t),t._h=1),!0===s?n=r:(l&&l.enter(),n=s(r),l&&(l.exit(),a=!0)),n===e.promise?c(x("Promise-chain cycle")):(o=F(n))?o.call(n,u,c):u(n)):c(r)}catch(t){l&&!a&&l.exit(),c(t)}};n.length>o;)a(n[o++]);t._c=[],t._n=!1,e&&!t._h&&T(t)})}},T=function(t){_.call(u,function(){var e,n,r,i=t._v,o=I(t);if(o&&(e=b(function(){O?k.emit("unhandledRejection",i,t):(n=u.onunhandledrejection)?n({promise:t,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=O||I(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},I=function(t){return 1!==t._h&&0===(t._a||t._c).length},M=function(t){_.call(u,function(){var e;O?k.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},N=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),R(e,!0))},D=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw x("Promise can't be resolved itself");(e=F(t))?y(function(){var r={_w:n,_d:!1};try{e.call(t,c(D,r,1),c(N,r,1))}catch(t){N.call(r,t)}}):(n._v=t,n._s=1,R(n,!1))}catch(t){N.call({_w:n,_d:!1},t)}}};L||(P=function(t){d(this,P,"Promise","_h"),p(t),r.call(this);try{t(c(D,this,1),c(N,this,1))}catch(t){N.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=t(93)(P.prototype,{then:function(t,e){var n=j(g(this,P));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=O?k.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&R(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(D,t,1),this.reject=c(N,t,1)},m.f=j=function(t){return t===P||t===a?new o(t):i(t)}),f(f.G+f.W+f.F*!L,{Promise:P}),t(103)(P,"Promise"),t(102)("Promise"),a=t(26).Promise,f(f.S+f.F*!L,"Promise",{reject:function(t){var e=j(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(s||!L),"Promise",{resolve:function(t){return S(s&&this===a?P:this,t)}}),f(f.S+f.F*!(L&&t(59)(function(t){P.all(t).catch(A)})),"Promise",{all:function(t){var e=this,n=j(e),r=n.resolve,i=n.reject,o=b(function(){var n=[],o=0,a=1;v(t,!1,function(t){var s=o++,u=!1;n.push(void 0),a++,e.resolve(t).then(function(t){u||(u=!0,n[s]=t,--a||r(n))},i)}),--a||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=j(e),r=n.reject,i=b(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},{102:102,103:103,106:106,115:115,127:127,131:131,20:20,26:26,28:28,36:36,42:42,43:43,5:5,54:54,59:59,62:62,70:70,71:71,9:9,90:90,91:91,93:93}],213:[function(t,e,n){var r=t(36),i=t(5),o=t(10),a=(t(43).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!t(38)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=i(t),u=o(n);return a?a(r,e,u):s.call(r,e,u)}})},{10:10,36:36,38:38,43:43,5:5}],214:[function(t,e,n){var r=t(36),i=t(73),o=t(5),a=t(10),s=t(54),u=t(38),c=t(19),l=(t(43).Reflect||{}).construct,f=u(function(){function t(){}return!(l(function(){},[],t)instanceof t)}),h=!u(function(){l(function(){})});r(r.S+r.F*(f||h),"Reflect",{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(h&&!f)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var u=n.prototype,p=i(s(u)?u:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},{10:10,19:19,36:36,38:38,43:43,5:5,54:54,73:73}],215:[function(t,e,n){var r=t(74),i=t(36),o=t(10),a=t(122);i(i.S+i.F*t(38)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=a(e,!0),o(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},{10:10,122:122,36:36,38:38,74:74}],216:[function(t,e,n){var r=t(36),i=t(77).f,o=t(10);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},{10:10,36:36,77:77}],217:[function(t,e,n){"use strict";var r=t(36),i=t(10),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};t(57)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},{10:10,36:36,57:57}],218:[function(t,e,n){var r=t(77),i=t(36),o=t(10);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},{10:10,36:36,77:77}],219:[function(t,e,n){var r=t(36),i=t(81),o=t(10);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},{10:10,36:36,81:81}],220:[function(t,e,n){var r=t(77),i=t(81),o=t(44),a=t(36),s=t(54),u=t(10);a(a.S,"Reflect",{get:function t(e,n){var a,c,l=arguments.length<3?e:arguments[2];return u(e)===l?e[n]:(a=r.f(e,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(l):void 0:s(c=i(e))?t(c,n,l):void 0}})},{10:10,36:36,44:44,54:54,77:77,81:81}],221:[function(t,e,n){var r=t(36);r(r.S,"Reflect",{has:function(t,e){return e in t}})},{36:36}],222:[function(t,e,n){var r=t(36),i=t(10),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},{10:10,36:36}],223:[function(t,e,n){var r=t(36);r(r.S,"Reflect",{ownKeys:t(87)})},{36:36,87:87}],224:[function(t,e,n){var r=t(36),i=t(10),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},{10:10,36:36}],225:[function(t,e,n){var r=t(36),i=t(101);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},{101:101,36:36}],226:[function(t,e,n){var r=t(74),i=t(77),o=t(81),a=t(44),s=t(36),u=t(92),c=t(10),l=t(54);s(s.S,"Reflect",{set:function t(e,n,s){var f,h,p=arguments.length<4?e:arguments[3],d=i.f(c(e),n);if(!d){if(l(h=o(e)))return t(h,n,s,p);d=u(0)}if(a(d,"value")){if(!1===d.writable||!l(p))return!1;if(f=i.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=s,r.f(p,n,f)}else r.f(p,n,u(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},{10:10,36:36,44:44,54:54,74:74,77:77,81:81,92:92}],227:[function(t,e,n){var r=t(43),i=t(48),o=t(74).f,a=t(79).f,s=t(55),u=t(40),c=r.RegExp,l=c,f=c.prototype,h=/a/g,p=/a/g,d=new c(h)!==h;if(t(32)&&(!d||t(38)(function(){return p[t(131)("match")]=!1,c(h)!=h||c(p)==p||"/a/i"!=c(h,"i")}))){c=function(t,e){var n=this instanceof c,r=s(t),o=void 0===e;return!n&&r&&t.constructor===c&&o?t:i(d?new l(r&&!o?t.source:t,e):l((r=t instanceof c)?t.source:t,r&&o?u.call(t):e),n?this:f,c)};for(var v=function(t){t in c||o(c,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})},g=a(l),_=0;g.length>_;)v(g[_++]);f.constructor=c,c.prototype=f,t(94)(r,"RegExp",c)}t(102)("RegExp")},{102:102,131:131,32:32,38:38,40:40,43:43,48:48,55:55,74:74,79:79,94:94}],229:[function(t,e,n){t(32)&&"g"!=/./g.flags&&t(74).f(RegExp.prototype,"flags",{configurable:!0,get:t(40)})},{32:32,40:40,74:74}],230:[function(t,e,n){"use strict";var r=t(10),i=t(120),o=t(8),a=t(95);t(39)("match",1,function(t,e,n,s){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=s(n,t,this);if(e.done)return e.value;var u=r(t),c=String(this);if(!u.global)return a(u,c);var l=u.unicode;u.lastIndex=0;for(var f,h=[],p=0;null!==(f=a(u,c));){var d=String(f[0]);h[p]=d,""===d&&(u.lastIndex=o(c,i(u.lastIndex),l)),p++}return 0===p?null:h}]})},{10:10,120:120,39:39,8:8,95:95}],231:[function(t,e,n){"use strict";var r=t(10),i=t(121),o=t(120),a=t(118),s=t(8),u=t(95),c=Math.max,l=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;t(39)("replace",2,function(t,e,n,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(t,e){var i=d(n,t,this,e);if(i.done)return i.value;var f=r(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=f.global;if(g){var _=f.unicode;f.lastIndex=0}for(var y=[];;){var m=u(f,h);if(null===m)break;if(y.push(m),!g)break;""===String(m[0])&&(f.lastIndex=s(h,o(f.lastIndex),_))}for(var b,w="",S=0,x=0;x<y.length;x++){m=y[x];for(var k=String(m[0]),E=c(l(a(m.index),h.length),0),C=[],P=1;P<m.length;P++)C.push(void 0===(b=m[P])?b:String(b));var O=m.groups;if(p){var A=[k].concat(C,E,h);void 0!==O&&A.push(O);var j=String(e.apply(void 0,A))}else j=v(k,h,E,C,O,e);E>=S&&(w+=h.slice(S,E)+j,S=E+k.length)}return w+h.slice(S)}];function v(t,e,r,o,a,s){var u=r+t.length,c=o.length,l=p;return void 0!==a&&(a=i(a),l=h),n.call(s,l,function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(u);case"<":s=a[i.slice(1,-1)];break;default:var l=+i;if(0===l)return i;if(l>c){var h=f(l/10);return 0===h?i:h<=c?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):i}s=o[l-1]}return void 0===s?"":s})}})},{10:10,118:118,120:120,121:121,39:39,8:8,95:95}],232:[function(t,e,n){"use strict";var r=t(10),i=t(98),o=t(95);t(39)("search",1,function(t,e,n,a){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=a(n,t,this);if(e.done)return e.value;var s=r(t),u=String(this),c=s.lastIndex;i(c,0)||(s.lastIndex=0);var l=o(s,u);return i(s.lastIndex,c)||(s.lastIndex=c),null===l?-1:l.index}]})},{10:10,39:39,95:95,98:98}],233:[function(t,e,n){"use strict";var r=t(55),i=t(10),o=t(106),a=t(8),s=t(120),u=t(95),c=t(96),l=Math.min,f=[].push,h=!!function(){try{return new RegExp("x","y")}catch(t){}}();t(39)("split",2,function(t,e,n,p){var d=n;return"c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?d=function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var o,a,s,u=[],l=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,l+"g");(o=c.call(d,i))&&!((a=d.lastIndex)>h&&(u.push(i.slice(h,o.index)),o.length>1&&o.index<i.length&&f.apply(u,o.slice(1)),s=o[0].length,h=a,u.length>=p));)d.lastIndex===o.index&&d.lastIndex++;return h===i.length?!s&&d.test("")||u.push(""):u.push(i.slice(h)),u.length>p?u.slice(0,p):u}:"0".split(void 0,0).length&&(d=function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}),[function(n,r){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):d.call(String(i),n,r)},function(t,e){var r=p(d,t,this,e,d!==n);if(r.done)return r.value;var c=i(t),f=String(this),v=o(c,RegExp),g=c.unicode,_=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(h?"y":"g"),y=new v(h?c:"^(?:"+c.source+")",_),m=void 0===e?4294967295:e>>>0;if(0===m)return[];if(0===f.length)return null===u(y,f)?[f]:[];for(var b=0,w=0,S=[];w<f.length;){y.lastIndex=h?w:0;var x,k=u(y,h?f:f.slice(w));if(null===k||(x=l(s(y.lastIndex+(h?0:w)),f.length))===b)w=a(f,w,g);else{if(S.push(f.slice(b,w)),S.length===m)return S;for(var E=1;E<=k.length-1;E++)if(S.push(k[E]),S.length===m)return S;w=b=x}}return S.push(f.slice(b)),S}]})},{10:10,106:106,120:120,39:39,55:55,8:8,95:95,96:96}],234:[function(t,e,n){"use strict";t(229);var r=t(10),i=t(40),o=t(32),a=/./.toString,s=function(e){t(94)(RegExp.prototype,"toString",e,!0)};t(38)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?s(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&s(function(){return a.call(this)})},{10:10,229:229,32:32,38:38,40:40,94:94}],235:[function(t,e,n){"use strict";var r=t(22),i=t(128);e.exports=t(25)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},{128:128,22:22,25:25}],236:[function(t,e,n){"use strict";t(110)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},{110:110}],237:[function(t,e,n){"use strict";t(110)("big",function(t){return function(){return t(this,"big","","")}})},{110:110}],238:[function(t,e,n){"use strict";t(110)("blink",function(t){return function(){return t(this,"blink","","")}})},{110:110}],239:[function(t,e,n){"use strict";t(110)("bold",function(t){return function(){return t(this,"b","","")}})},{110:110}],240:[function(t,e,n){"use strict";var r=t(36),i=t(108)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},{108:108,36:36}],241:[function(t,e,n){"use strict";var r=t(36),i=t(120),o=t(109),a="".endsWith;r(r.P+r.F*t(37)("endsWith"),"String",{endsWith:function(t){var e=o(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),s=void 0===n?r:Math.min(i(n),r),u=String(t);return a?a.call(e,u,s):e.slice(s-u.length,s)===u}})},{109:109,120:120,36:36,37:37}],242:[function(t,e,n){"use strict";t(110)("fixed",function(t){return function(){return t(this,"tt","","")}})},{110:110}],243:[function(t,e,n){"use strict";t(110)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},{110:110}],244:[function(t,e,n){"use strict";t(110)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},{110:110}],245:[function(t,e,n){var r=t(36),i=t(116),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},{116:116,36:36}],246:[function(t,e,n){"use strict";var r=t(36),i=t(109);r(r.P+r.F*t(37)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},{109:109,36:36,37:37}],247:[function(t,e,n){"use strict";t(110)("italics",function(t){return function(){return t(this,"i","","")}})},{110:110}],248:[function(t,e,n){"use strict";var r=t(108)(!0);t(58)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},{108:108,58:58}],249:[function(t,e,n){"use strict";t(110)("link",function(t){return function(e){return t(this,"a","href",e)}})},{110:110}],250:[function(t,e,n){var r=t(36),i=t(119),o=t(120);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},{119:119,120:120,36:36}],251:[function(t,e,n){var r=t(36);r(r.P,"String",{repeat:t(112)})},{112:112,36:36}],252:[function(t,e,n){"use strict";t(110)("small",function(t){return function(){return t(this,"small","","")}})},{110:110}],253:[function(t,e,n){"use strict";var r=t(36),i=t(120),o=t(109),a="".startsWith;r(r.P+r.F*t(37)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},{109:109,120:120,36:36,37:37}],254:[function(t,e,n){"use strict";t(110)("strike",function(t){return function(){return t(this,"strike","","")}})},{110:110}],255:[function(t,e,n){"use strict";t(110)("sub",function(t){return function(){return t(this,"sub","","")}})},{110:110}],256:[function(t,e,n){"use strict";t(110)("sup",function(t){return function(){return t(this,"sup","","")}})},{110:110}],257:[function(t,e,n){"use strict";t(113)("trim",function(t){return function(){return t(this,3)}})},{113:113}],258:[function(t,e,n){"use strict";var r=t(43),i=t(44),o=t(32),a=t(36),s=t(94),u=t(68).KEY,c=t(38),l=t(105),f=t(103),h=t(126),p=t(131),d=t(130),v=t(129),g=t(35),_=t(52),y=t(10),m=t(54),b=t(119),w=t(122),S=t(92),x=t(73),k=t(78),E=t(77),C=t(74),P=t(83),O=E.f,A=C.f,j=k.f,L=r.Symbol,F=r.JSON,R=F&&F.stringify,T=p("_hidden"),I=p("toPrimitive"),M={}.propertyIsEnumerable,N=l("symbol-registry"),D=l("symbols"),B=l("op-symbols"),U=Object.prototype,H="function"==typeof L,$=r.QObject,V=!$||!$.prototype||!$.prototype.findChild,q=o&&c(function(){return 7!=x(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=O(U,e);r&&delete U[e],A(t,e,n),r&&t!==U&&A(U,e,r)}:A,W=function(t){var e=D[t]=x(L.prototype);return e._k=t,e},z=H&&"symbol"==typeof L.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof L},G=function(t,e,n){return t===U&&G(B,e,n),y(t),e=w(e,!0),y(n),i(D,e)?(n.enumerable?(i(t,T)&&t[T][e]&&(t[T][e]=!1),n=x(n,{enumerable:S(0,!1)})):(i(t,T)||A(t,T,S(1,{})),t[T][e]=!0),q(t,e,n)):A(t,e,n)},K=function(t,e){y(t);for(var n,r=g(e=b(e)),i=0,o=r.length;o>i;)G(t,n=r[i++],e[n]);return t},Q=function(t){var e=M.call(this,t=w(t,!0));return!(this===U&&i(D,t)&&!i(B,t))&&(!(e||!i(this,t)||!i(D,t)||i(this,T)&&this[T][t])||e)},J=function(t,e){if(t=b(t),e=w(e,!0),t!==U||!i(D,e)||i(B,e)){var n=O(t,e);return!n||!i(D,e)||i(t,T)&&t[T][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=j(b(t)),r=[],o=0;n.length>o;)i(D,e=n[o++])||e==T||e==u||r.push(e);return r},Y=function(t){for(var e,n=t===U,r=j(n?B:b(t)),o=[],a=0;r.length>a;)!i(D,e=r[a++])||n&&!i(U,e)||o.push(D[e]);return o};H||(s((L=function(){if(this instanceof L)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(B,n),i(this,T)&&i(this[T],t)&&(this[T][t]=!1),q(this,t,S(1,n))};return o&&V&&q(U,t,{configurable:!0,set:e}),W(t)}).prototype,"toString",function(){return this._k}),E.f=J,C.f=G,t(79).f=k.f=X,t(84).f=Q,t(80).f=Y,o&&!t(62)&&s(U,"propertyIsEnumerable",Q,!0),d.f=function(t){return W(p(t))}),a(a.G+a.W+a.F*!H,{Symbol:L});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)p(Z[tt++]);for(var et=P(p.store),nt=0;et.length>nt;)v(et[nt++]);a(a.S+a.F*!H,"Symbol",{for:function(t){return i(N,t+="")?N[t]:N[t]=L(t)},keyFor:function(t){if(!z(t))throw TypeError(t+" is not a symbol!");for(var e in N)if(N[e]===t)return e},useSetter:function(){V=!0},useSimple:function(){V=!1}}),a(a.S+a.F*!H,"Object",{create:function(t,e){return void 0===e?x(t):K(x(t),e)},defineProperty:G,defineProperties:K,getOwnPropertyDescriptor:J,getOwnPropertyNames:X,getOwnPropertySymbols:Y}),F&&a(a.S+a.F*(!H||c(function(){var t=L();return"[null]"!=R([t])||"{}"!=R({a:t})||"{}"!=R(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(m(e)||void 0!==t)&&!z(t))return _(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!z(e))return e}),r[1]=e,R.apply(F,r)}}),L.prototype[I]||t(45)(L.prototype,I,L.prototype.valueOf),f(L,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},{10:10,103:103,105:105,119:119,122:122,126:126,129:129,130:130,131:131,32:32,35:35,36:36,38:38,43:43,44:44,45:45,52:52,54:54,62:62,68:68,73:73,74:74,77:77,78:78,79:79,80:80,83:83,84:84,92:92,94:94}],259:[function(t,e,n){"use strict";var r=t(36),i=t(125),o=t(124),a=t(10),s=t(116),u=t(120),c=t(54),l=t(43).ArrayBuffer,f=t(106),h=o.ArrayBuffer,p=o.DataView,d=i.ABV&&l.isView,v=h.prototype.slice,g=i.VIEW;r(r.G+r.W+r.F*(l!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&g in t}}),r(r.P+r.U+r.F*t(38)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(f(this,h))(u(i-r)),c=new p(this),l=new p(o),d=0;r<i;)l.setUint8(d++,c.getUint8(r++));return o}}),t(102)("ArrayBuffer")},{10:10,102:102,106:106,116:116,120:120,124:124,125:125,36:36,38:38,43:43,54:54}],260:[function(t,e,n){var r=t(36);r(r.G+r.W+r.F*!t(125).ABV,{DataView:t(124).DataView})},{124:124,125:125,36:36}],261:[function(t,e,n){t(123)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],262:[function(t,e,n){t(123)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],263:[function(t,e,n){t(123)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],264:[function(t,e,n){t(123)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],265:[function(t,e,n){t(123)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],266:[function(t,e,n){t(123)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],267:[function(t,e,n){t(123)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],268:[function(t,e,n){t(123)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},{123:123}],269:[function(t,e,n){t(123)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},{123:123}],271:[function(t,e,n){"use strict";var r=t(24),i=t(128);t(25)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},{128:128,24:24,25:25}],272:[function(t,e,n){"use strict";var r=t(36),i=t(41),o=t(121),a=t(120),s=t(5),u=t(18);r(r.P,"Array",{flatMap:function(t){var e,n,r=o(this);return s(t),e=a(r.length),n=u(r,0),i(n,r,r,e,0,1,t,arguments[1]),n}}),t(7)("flatMap")},{120:120,121:121,18:18,36:36,41:41,5:5,7:7}],273:[function(t,e,n){"use strict";var r=t(36),i=t(41),o=t(121),a=t(120),s=t(118),u=t(18);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=o(this),n=a(e.length),r=u(e,0);return i(r,e,e,n,0,void 0===t?1:s(t)),r}}),t(7)("flatten")},{118:118,120:120,121:121,18:18,36:36,41:41,7:7}],274:[function(t,e,n){"use strict";var r=t(36),i=t(14)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(7)("includes")},{14:14,36:36,7:7}],275:[function(t,e,n){var r=t(36),i=t(70)(),o=t(43).process,a="process"==t(21)(o);r(r.G,{asap:function(t){var e=a&&o.domain;i(e?e.bind(t):t)}})},{21:21,36:36,43:43,70:70}],276:[function(t,e,n){var r=t(36),i=t(21);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},{21:21,36:36}],277:[function(t,e,n){var r=t(36);r(r.G,{global:t(43)})},{36:36,43:43}],278:[function(t,e,n){t(99)("Map")},{99:99}],279:[function(t,e,n){t(100)("Map")},{100:100}],280:[function(t,e,n){var r=t(36);r(r.P+r.R,"Map",{toJSON:t(23)("Map")})},{23:23,36:36}],281:[function(t,e,n){var r=t(36);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},{36:36}],282:[function(t,e,n){var r=t(36);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},{36:36}],283:[function(t,e,n){var r=t(36),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},{36:36}],284:[function(t,e,n){var r=t(36),i=t(66),o=t(64);r(r.S,"Math",{fscale:function(t,e,n,r,a){return o(i(t,e,n,r,a))}})},{36:36,64:64,66:66}],285:[function(t,e,n){var r=t(36);r(r.S,"Math",{iaddh:function(t,e,n,r){var i=t>>>0,o=n>>>0;return(e>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},{36:36}],286:[function(t,e,n){var r=t(36);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r,a=n>>16,s=r>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>16)+((i*s>>>0)+(65535&u)>>16)}})},{36:36}],287:[function(t,e,n){var r=t(36);r(r.S,"Math",{isubh:function(t,e,n,r){var i=t>>>0,o=n>>>0;return(e>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},{36:36}],288:[function(t,e,n){var r=t(36);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},{36:36}],289:[function(t,e,n){var r=t(36),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},{36:36}],290:[function(t,e,n){var r=t(36);r(r.S,"Math",{scale:t(66)})},{36:36,66:66}],291:[function(t,e,n){var r=t(36);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},{36:36}],292:[function(t,e,n){var r=t(36);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r,a=n>>>16,s=r>>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>>16)+((i*s>>>0)+(65535&u)>>>16)}})},{36:36}],293:[function(t,e,n){"use strict";var r=t(36),i=t(121),o=t(5),a=t(74);t(32)&&r(r.P+t(76),"Object",{__defineGetter__:function(t,e){a.f(i(this),t,{get:o(e),enumerable:!0,configurable:!0})}})},{121:121,32:32,36:36,5:5,74:74,76:76}],294:[function(t,e,n){"use strict";var r=t(36),i=t(121),o=t(5),a=t(74);t(32)&&r(r.P+t(76),"Object",{__defineSetter__:function(t,e){a.f(i(this),t,{set:o(e),enumerable:!0,configurable:!0})}})},{121:121,32:32,36:36,5:5,74:74,76:76}],295:[function(t,e,n){var r=t(36),i=t(86)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},{36:36,86:86}],296:[function(t,e,n){var r=t(36),i=t(87),o=t(119),a=t(77),s=t(27);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=o(t),u=a.f,c=i(r),l={},f=0;c.length>f;)void 0!==(n=u(r,e=c[f++]))&&s(l,e,n);return l}})},{119:119,27:27,36:36,77:77,87:87}],297:[function(t,e,n){"use strict";var r=t(36),i=t(121),o=t(122),a=t(81),s=t(77).f;t(32)&&r(r.P+t(76),"Object",{__lookupGetter__:function(t){var e,n=i(this),r=o(t,!0);do{if(e=s(n,r))return e.get}while(n=a(n))}})},{121:121,122:122,32:32,36:36,76:76,77:77,81:81}],298:[function(t,e,n){"use strict";var r=t(36),i=t(121),o=t(122),a=t(81),s=t(77).f;t(32)&&r(r.P+t(76),"Object",{__lookupSetter__:function(t){var e,n=i(this),r=o(t,!0);do{if(e=s(n,r))return e.set}while(n=a(n))}})},{121:121,122:122,32:32,36:36,76:76,77:77,81:81}],299:[function(t,e,n){var r=t(36),i=t(86)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},{36:36,86:86}],300:[function(t,e,n){"use strict";var r=t(36),i=t(43),o=t(26),a=t(70)(),s=t(131)("observable"),u=t(5),c=t(10),l=t(9),f=t(93),h=t(45),p=t(42),d=p.RETURN,v=function(t){return null==t?void 0:u(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},_=function(t){return void 0===t._o},y=function(t){_(t)||(t._o=void 0,g(t))},m=function(t,e){c(t),this._c=void 0,this._o=t,t=new b(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:u(n),this._c=n)}catch(e){return void t.error(e)}_(this)&&g(this)};m.prototype=f({},{unsubscribe:function(){y(this)}});var b=function(t){this._s=t};b.prototype=f({},{next:function(t){var e=this._s;if(!_(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{y(e)}finally{throw t}}}},error:function(t){var e=this._s;if(_(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!_(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var w=function(t){l(this,w,"Observable","_f")._f=u(t)};f(w.prototype,{subscribe:function(t){return new m(t,this._f)},forEach:function(t){var e=this;return new(o.Promise||i.Promise)(function(n,r){u(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:n})})}}),f(w,{from:function(t){var e="function"==typeof this?this:w,n=v(c(t)[s]);if(n){var r=c(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return a(function(){if(!n){try{if(p(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return a(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),h(w.prototype,s,function(){return this}),r(r.G,{Observable:w}),t(102)("Observable")},{10:10,102:102,131:131,26:26,36:36,42:42,43:43,45:45,5:5,70:70,9:9,93:93}],301:[function(t,e,n){"use strict";var r=t(36),i=t(26),o=t(43),a=t(106),s=t(91);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},{106:106,26:26,36:36,43:43,91:91}],302:[function(t,e,n){"use strict";var r=t(36),i=t(71),o=t(90);r(r.S,"Promise",{try:function(t){var e=i.f(this),n=o(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},{36:36,71:71,90:90}],303:[function(t,e,n){var r=t(69),i=t(10),o=r.key,a=r.set;r.exp({defineMetadata:function(t,e,n,r){a(t,e,i(n),o(r))}})},{10:10,69:69}],304:[function(t,e,n){var r=t(69),i=t(10),o=r.key,a=r.map,s=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:o(arguments[2]),r=a(i(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var u=s.get(e);return u.delete(n),!!u.size||s.delete(e)}})},{10:10,69:69}],305:[function(t,e,n){var r=t(235),i=t(13),o=t(69),a=t(10),s=t(81),u=o.keys,c=o.key,l=function(t,e){var n=u(t,e),o=s(t);if(null===o)return n;var a=l(o,e);return a.length?n.length?i(new r(n.concat(a))):a:n};o.exp({getMetadataKeys:function(t){return l(a(t),arguments.length<2?void 0:c(arguments[1]))}})},{10:10,13:13,235:235,69:69,81:81}],306:[function(t,e,n){var r=t(69),i=t(10),o=t(81),a=r.has,s=r.get,u=r.key,c=function(t,e,n){if(a(t,e,n))return s(t,e,n);var r=o(e);return null!==r?c(t,r,n):void 0};r.exp({getMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},{10:10,69:69,81:81}],307:[function(t,e,n){var r=t(69),i=t(10),o=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:a(arguments[1]))}})},{10:10,69:69}],308:[function(t,e,n){var r=t(69),i=t(10),o=r.get,a=r.key;r.exp({getOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:a(arguments[2]))}})},{10:10,69:69}],309:[function(t,e,n){var r=t(69),i=t(10),o=t(81),a=r.has,s=r.key,u=function(t,e,n){if(a(t,e,n))return!0;var r=o(e);return null!==r&&u(t,r,n)};r.exp({hasMetadata:function(t,e){return u(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},{10:10,69:69,81:81}],310:[function(t,e,n){var r=t(69),i=t(10),o=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:a(arguments[2]))}})},{10:10,69:69}],311:[function(t,e,n){var r=t(69),i=t(10),o=t(5),a=r.key,s=r.set;r.exp({metadata:function(t,e){return function(n,r){s(t,e,(void 0!==r?i:o)(n),a(r))}}})},{10:10,5:5,69:69}],312:[function(t,e,n){t(99)("Set")},{99:99}],313:[function(t,e,n){t(100)("Set")},{100:100}],314:[function(t,e,n){var r=t(36);r(r.P+r.R,"Set",{toJSON:t(23)("Set")})},{23:23,36:36}],315:[function(t,e,n){"use strict";var r=t(36),i=t(108)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},{108:108,36:36}],316:[function(t,e,n){"use strict";var r=t(36),i=t(31),o=t(120),a=t(55),s=t(40),u=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};t(57)(c,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!a(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in u?String(t.flags):s.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=o(t.lastIndex),new c(r,e)}})},{120:120,31:31,36:36,40:40,55:55,57:57}],317:[function(t,e,n){"use strict";var r=t(36),i=t(111),o=t(127);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},{111:111,127:127,36:36}],318:[function(t,e,n){"use strict";var r=t(36),i=t(111),o=t(127);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},{111:111,127:127,36:36}],319:[function(t,e,n){"use strict";t(113)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},{113:113}],320:[function(t,e,n){"use strict";t(113)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},{113:113}],321:[function(t,e,n){t(129)("asyncIterator")},{129:129}],322:[function(t,e,n){t(129)("observable")},{129:129}],323:[function(t,e,n){var r=t(36);r(r.S,"System",{global:t(43)})},{36:36,43:43}],324:[function(t,e,n){t(99)("WeakMap")},{99:99}],325:[function(t,e,n){t(100)("WeakMap")},{100:100}],326:[function(t,e,n){t(99)("WeakSet")},{99:99}],327:[function(t,e,n){t(100)("WeakSet")},{100:100}],328:[function(t,e,n){for(var r=t(144),i=t(83),o=t(94),a=t(43),s=t(45),u=t(61),c=t(131),l=c("iterator"),f=c("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,_=d[v],y=p[_],m=a[_],b=m&&m.prototype;if(b&&(b[l]||s(b,l,h),b[f]||s(b,f,_),u[_]=h,y))for(g in r)b[g]||o(b,g,r[g],!0)}},{131:131,144:144,43:43,45:45,61:61,83:83,94:94}],329:[function(t,e,n){var r=t(36),i=t(115);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},{115:115,36:36}],330:[function(t,e,n){var r=t(43),i=t(36),o=t(127),a=[].slice,s=/MSIE .\./.test(o),u=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},{127:127,36:36,43:43}],332:[function(t,e,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),i=new RegExp("(%[a-f0-9]{2})+","gi");function o(t,e){try{return decodeURIComponent(t.join(""))}catch(t){}if(1===t.length)return t;e=e||1;var n=t.slice(0,e),r=t.slice(e);return Array.prototype.concat.call([],o(n),o(r))}function a(t){try{return decodeURIComponent(t)}catch(i){for(var e=t.match(r),n=1;n<e.length;n++)e=(t=o(e,n).join("")).match(r);return t}}e.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(t){for(var e={"%FE%FF":"\ufffd\ufffd","%FF%FE":"\ufffd\ufffd"},n=i.exec(t);n;){try{e[n[0]]=decodeURIComponent(n[0])}catch(t){var r=a(n[0]);r!==n[0]&&(e[n[0]]=r)}n=i.exec(t)}e["%C2"]="\ufffd";for(var o=Object.keys(e),s=0;s<o.length;s++){var u=o[s];t=t.replace(new RegExp(u,"g"),e[u])}return t}(t)}}},{}],333:[function(t,e,n){(function(t){!function(r){var i=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},o=10;function a(){this._events={},this._conf&&s.call(this,this._conf)}function s(t){t?(this._conf=t,t.delimiter&&(this.delimiter=t.delimiter),this._maxListeners=t.maxListeners!==r?t.maxListeners:o,t.wildcard&&(this.wildcard=t.wildcard),t.newListener&&(this._newListener=t.newListener),t.removeListener&&(this._removeListener=t.removeListener),t.verboseMemoryLeak&&(this.verboseMemoryLeak=t.verboseMemoryLeak),this.wildcard&&(this.listenerTree={})):this._maxListeners=o}function u(e,n){var r="(node) warning: possible EventEmitter memory leak detected. "+e+" listeners added. Use emitter.setMaxListeners() to increase limit.";if(this.verboseMemoryLeak&&(r+=" Event name: "+n+"."),void 0!==t&&t.emitWarning){var i=new Error(r);i.name="MaxListenersExceededWarning",i.emitter=this,i.count=e,t.emitWarning(i)}else console.error(r),console.trace&&console.trace()}function c(t){this._events={},this._newListener=!1,this._removeListener=!1,this.verboseMemoryLeak=!1,s.call(this,t)}function l(t,e,n,r){if(!n)return[];var i,o,a,s,u,c,f,h=[],p=e.length,d=e[r],v=e[r+1];if(r===p&&n._listeners){if("function"==typeof n._listeners)return t&&t.push(n._listeners),[n];for(i=0,o=n._listeners.length;i<o;i++)t&&t.push(n._listeners[i]);return[n]}if("*"===d||"**"===d||n[d]){if("*"===d){for(a in n)"_listeners"!==a&&n.hasOwnProperty(a)&&(h=h.concat(l(t,e,n[a],r+1)));return h}if("**"===d){for(a in(f=r+1===p||r+2===p&&"*"===v)&&n._listeners&&(h=h.concat(l(t,e,n,p))),n)"_listeners"!==a&&n.hasOwnProperty(a)&&("*"===a||"**"===a?(n[a]._listeners&&!f&&(h=h.concat(l(t,e,n[a],p))),h=h.concat(l(t,e,n[a],r))):h=a===v?h.concat(l(t,e,n[a],r+2)):h.concat(l(t,e,n[a],r)));return h}h=h.concat(l(t,e,n[d],r+1))}if((s=n["*"])&&l(t,e,s,r+1),u=n["**"])if(r<p)for(a in u._listeners&&l(t,e,u,p),u)"_listeners"!==a&&u.hasOwnProperty(a)&&(a===v?l(t,e,u[a],r+2):a===d?l(t,e,u[a],r+1):((c={})[a]=u[a],l(t,e,{"**":c},r+1)));else u._listeners?l(t,e,u,p):u["*"]&&u["*"]._listeners&&l(t,e,u["*"],p);return h}c.EventEmitter2=c,c.prototype.delimiter=".",c.prototype.setMaxListeners=function(t){t!==r&&(this._maxListeners=t,this._conf||(this._conf={}),this._conf.maxListeners=t)},c.prototype.event="",c.prototype.once=function(t,e){return this._once(t,e,!1)},c.prototype.prependOnceListener=function(t,e){return this._once(t,e,!0)},c.prototype._once=function(t,e,n){return this._many(t,1,e,n),this},c.prototype.many=function(t,e,n){return this._many(t,e,n,!1)},c.prototype.prependMany=function(t,e,n){return this._many(t,e,n,!0)},c.prototype._many=function(t,e,n,r){var i=this;if("function"!=typeof n)throw new Error("many only accepts instances of Function");function o(){return 0==--e&&i.off(t,o),n.apply(this,arguments)}return o._origin=n,this._on(t,o,r),i},c.prototype.emit=function(){this._events||a.call(this);var t=arguments[0];if("newListener"===t&&!this._newListener&&!this._events.newListener)return!1;var e,n,r,i,o,s=arguments.length;if(this._all&&this._all.length){if(o=this._all.slice(),s>3)for(e=new Array(s),i=0;i<s;i++)e[i]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=t,s){case 1:o[r].call(this,t);break;case 2:o[r].call(this,t,arguments[1]);break;case 3:o[r].call(this,t,arguments[1],arguments[2]);break;default:o[r].apply(this,e)}}if(this.wildcard){o=[];var u="string"==typeof t?t.split(this.delimiter):t.slice();l.call(this,o,u,this.listenerTree,0)}else{if("function"==typeof(o=this._events[t])){switch(this.event=t,s){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:for(e=new Array(s-1),i=1;i<s;i++)e[i-1]=arguments[i];o.apply(this,e)}return!0}o&&(o=o.slice())}if(o&&o.length){if(s>3)for(e=new Array(s-1),i=1;i<s;i++)e[i-1]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=t,s){case 1:o[r].call(this);break;case 2:o[r].call(this,arguments[1]);break;case 3:o[r].call(this,arguments[1],arguments[2]);break;default:o[r].apply(this,e)}return!0}if(!this._all&&"error"===t)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");return!!this._all},c.prototype.emitAsync=function(){this._events||a.call(this);var t=arguments[0];if("newListener"===t&&!this._newListener&&!this._events.newListener)return Promise.resolve([!1]);var e,n,r,i,o,s=[],u=arguments.length;if(this._all){if(u>3)for(e=new Array(u),i=1;i<u;i++)e[i]=arguments[i];for(r=0,n=this._all.length;r<n;r++)switch(this.event=t,u){case 1:s.push(this._all[r].call(this,t));break;case 2:s.push(this._all[r].call(this,t,arguments[1]));break;case 3:s.push(this._all[r].call(this,t,arguments[1],arguments[2]));break;default:s.push(this._all[r].apply(this,e))}}if(this.wildcard){o=[];var c="string"==typeof t?t.split(this.delimiter):t.slice();l.call(this,o,c,this.listenerTree,0)}else o=this._events[t];if("function"==typeof o)switch(this.event=t,u){case 1:s.push(o.call(this));break;case 2:s.push(o.call(this,arguments[1]));break;case 3:s.push(o.call(this,arguments[1],arguments[2]));break;default:for(e=new Array(u-1),i=1;i<u;i++)e[i-1]=arguments[i];s.push(o.apply(this,e))}else if(o&&o.length){if(o=o.slice(),u>3)for(e=new Array(u-1),i=1;i<u;i++)e[i-1]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=t,u){case 1:s.push(o[r].call(this));break;case 2:s.push(o[r].call(this,arguments[1]));break;case 3:s.push(o[r].call(this,arguments[1],arguments[2]));break;default:s.push(o[r].apply(this,e))}}else if(!this._all&&"error"===t)return arguments[1]instanceof Error?Promise.reject(arguments[1]):Promise.reject("Uncaught, unspecified 'error' event.");return Promise.all(s)},c.prototype.on=function(t,e){return this._on(t,e,!1)},c.prototype.prependListener=function(t,e){return this._on(t,e,!0)},c.prototype.onAny=function(t){return this._onAny(t,!1)},c.prototype.prependAny=function(t){return this._onAny(t,!0)},c.prototype.addListener=c.prototype.on,c.prototype._onAny=function(t,e){if("function"!=typeof t)throw new Error("onAny only accepts instances of Function");return this._all||(this._all=[]),e?this._all.unshift(t):this._all.push(t),this},c.prototype._on=function(t,e,n){if("function"==typeof t)return this._onAny(t,e),this;if("function"!=typeof e)throw new Error("on only accepts instances of Function");return this._events||a.call(this),this._newListener&&this.emit("newListener",t,e),this.wildcard?(function(t,e){for(var n=0,i=(t="string"==typeof t?t.split(this.delimiter):t.slice()).length;n+1<i;n++)if("**"===t[n]&&"**"===t[n+1])return;for(var o=this.listenerTree,a=t.shift();a!==r;){if(o[a]||(o[a]={}),o=o[a],0===t.length)return o._listeners?("function"==typeof o._listeners&&(o._listeners=[o._listeners]),o._listeners.push(e),!o._listeners.warned&&this._maxListeners>0&&o._listeners.length>this._maxListeners&&(o._listeners.warned=!0,u.call(this,o._listeners.length,a))):o._listeners=e,!0;a=t.shift()}return!0}.call(this,t,e),this):(this._events[t]?("function"==typeof this._events[t]&&(this._events[t]=[this._events[t]]),n?this._events[t].unshift(e):this._events[t].push(e),!this._events[t].warned&&this._maxListeners>0&&this._events[t].length>this._maxListeners&&(this._events[t].warned=!0,u.call(this,this._events[t].length,t))):this._events[t]=e,this)},c.prototype.off=function(t,e){if("function"!=typeof e)throw new Error("removeListener only takes instances of Function");var n,o=[];if(this.wildcard){var a="string"==typeof t?t.split(this.delimiter):t.slice();o=l.call(this,null,a,this.listenerTree,0)}else{if(!this._events[t])return this;n=this._events[t],o.push({_listeners:n})}for(var s=0;s<o.length;s++){var u=o[s];if(n=u._listeners,i(n)){for(var c=-1,f=0,h=n.length;f<h;f++)if(n[f]===e||n[f].listener&&n[f].listener===e||n[f]._origin&&n[f]._origin===e){c=f;break}if(c<0)continue;return this.wildcard?u._listeners.splice(c,1):this._events[t].splice(c,1),0===n.length&&(this.wildcard?delete u._listeners:delete this._events[t]),this._removeListener&&this.emit("removeListener",t,e),this}(n===e||n.listener&&n.listener===e||n._origin&&n._origin===e)&&(this.wildcard?delete u._listeners:delete this._events[t],this._removeListener&&this.emit("removeListener",t,e))}return function t(e){if(e!==r){var n=Object.keys(e);for(var i in n){var o=n[i],a=e[o];a instanceof Function||"object"!=typeof a||null===a||(Object.keys(a).length>0&&t(e[o]),0===Object.keys(a).length&&delete e[o])}}}(this.listenerTree),this},c.prototype.offAny=function(t){var e,n=0,r=0;if(t&&this._all&&this._all.length>0){for(n=0,r=(e=this._all).length;n<r;n++)if(t===e[n])return e.splice(n,1),this._removeListener&&this.emit("removeListenerAny",t),this}else{if(e=this._all,this._removeListener)for(n=0,r=e.length;n<r;n++)this.emit("removeListenerAny",e[n]);this._all=[]}return this},c.prototype.removeListener=c.prototype.off,c.prototype.removeAllListeners=function(t){if(t===r)return!this._events||a.call(this),this;if(this.wildcard)for(var e="string"==typeof t?t.split(this.delimiter):t.slice(),n=l.call(this,null,e,this.listenerTree,0),i=0;i<n.length;i++)n[i]._listeners=null;else this._events&&(this._events[t]=null);return this},c.prototype.listeners=function(t){if(this.wildcard){var e=[],n="string"==typeof t?t.split(this.delimiter):t.slice();return l.call(this,e,n,this.listenerTree,0),e}return this._events||a.call(this),this._events[t]||(this._events[t]=[]),i(this._events[t])||(this._events[t]=[this._events[t]]),this._events[t]},c.prototype.eventNames=function(){return Object.keys(this._events)},c.prototype.listenerCount=function(t){return this.listeners(t).length},c.prototype.listenersAny=function(){return this._all?this._all:[]},"object"==typeof n?e.exports=c:window.EventEmitter2=c}()}).call(this,t(376))},{376:376}],334:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.__esModule=!0;var i=r(t(335)),o=r(t(337)),a=t(338),s=t(340),u=r(t(342)),c=r(t(345)),l=r(t(359)),f=i.default.create;function h(){var t=f();return t.compile=function(e,n){return s.compile(e,n,t)},t.precompile=function(e,n){return s.precompile(e,n,t)},t.AST=o.default,t.Compiler=s.Compiler,t.JavaScriptCompiler=u.default,t.Parser=a.parser,t.parse=a.parse,t}var p=h();p.create=h,l.default(p),p.Visitor=c.default,p.default=p,n.default=p,e.exports=n.default},{335:335,337:337,338:338,340:340,342:342,345:345,359:359}],359:[function(t,e,n){(function(t){"use strict";n.__esModule=!0,n.default=function(e){var n=void 0!==t?t:window,r=n.Handlebars;e.noConflict=function(){return n.Handlebars===e&&(n.Handlebars=r),e}},e.exports=n.default}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],337:[function(t,e,n){"use strict";n.__esModule=!0;var r={helpers:{helperExpression:function(t){return"SubExpression"===t.type||("MustacheStatement"===t.type||"BlockStatement"===t.type)&&!!(t.params&&t.params.length||t.hash)},scopedId:function(t){return/^\.|this\b/.test(t.original)},simpleId:function(t){return 1===t.parts.length&&!r.helpers.scopedId(t)&&!t.depth}}};n.default=r,e.exports=n.default},{}],345:[function(t,e,n){"use strict";n.__esModule=!0;var r,i=(r=t(349))&&r.__esModule?r:{default:r};function o(){this.parents=[]}function a(t){this.acceptRequired(t,"path"),this.acceptArray(t.params),this.acceptKey(t,"hash")}function s(t){a.call(this,t),this.acceptKey(t,"program"),this.acceptKey(t,"inverse")}function u(t){this.acceptRequired(t,"name"),this.acceptArray(t.params),this.acceptKey(t,"hash")}o.prototype={constructor:o,mutating:!1,acceptKey:function(t,e){var n=this.accept(t[e]);if(this.mutating){if(n&&!o.prototype[n.type])throw new i.default('Unexpected node type "'+n.type+'" found when accepting '+e+" on "+t.type);t[e]=n}},acceptRequired:function(t,e){if(this.acceptKey(t,e),!t[e])throw new i.default(t.type+" requires "+e)},acceptArray:function(t){for(var e=0,n=t.length;e<n;e++)this.acceptKey(t,e),t[e]||(t.splice(e,1),e--,n--)},accept:function(t){if(t){if(!this[t.type])throw new i.default("Unknown type: "+t.type,t);this.current&&this.parents.unshift(this.current),this.current=t;var e=this[t.type](t);return this.current=this.parents.shift(),!this.mutating||e?e:!1!==e?t:void 0}},Program:function(t){this.acceptArray(t.body)},MustacheStatement:a,Decorator:a,BlockStatement:s,DecoratorBlock:s,PartialStatement:u,PartialBlockStatement:function(t){u.call(this,t),this.acceptKey(t,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:a,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(t){this.acceptArray(t.pairs)},HashPair:function(t){this.acceptRequired(t,"value")}},n.default=o,e.exports=n.default},{349:349}],340:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.Compiler=u,n.precompile=function(t,e,n){if(null==t||"string"!=typeof t&&"Program"!==t.type)throw new i.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+t);"data"in(e=e||{})||(e.data=!0),e.compat&&(e.useDepths=!0);var r=n.parse(t,e),o=(new n.Compiler).compile(r,e);return(new n.JavaScriptCompiler).compile(o,e)},n.compile=function(t,e,n){if(void 0===e&&(e={}),null==t||"string"!=typeof t&&"Program"!==t.type)throw new i.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+t);"data"in(e=o.extend({},e))||(e.data=!0),e.compat&&(e.useDepths=!0);var r=void 0;function a(){var r=n.parse(t,e),i=(new n.Compiler).compile(r,e),o=(new n.JavaScriptCompiler).compile(i,e,void 0,!0);return n.template(o)}function s(t,e){return r||(r=a()),r.call(this,t,e)}return s._setup=function(t){return r||(r=a()),r._setup(t)},s._child=function(t,e,n,i){return r||(r=a()),r._child(t,e,n,i)},s};var i=r(t(349)),o=t(362),a=r(t(337)),s=[].slice;function u(){}function c(t,e){if(t===e)return!0;if(o.isArray(t)&&o.isArray(e)&&t.length===e.length){for(var n=0;n<t.length;n++)if(!c(t[n],e[n]))return!1;return!0}}function l(t){if(!t.path.parts){var e=t.path;t.path={type:"PathExpression",data:!1,depth:0,parts:[e.original+""],original:e.original+"",loc:e.loc}}}u.prototype={compiler:u,equals:function(t){var e=this.opcodes.length;if(t.opcodes.length!==e)return!1;for(var n=0;n<e;n++){var r=this.opcodes[n],i=t.opcodes[n];if(r.opcode!==i.opcode||!c(r.args,i.args))return!1}for(e=this.children.length,n=0;n<e;n++)if(!this.children[n].equals(t.children[n]))return!1;return!0},guid:0,compile:function(t,e){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=e,this.stringParams=e.stringParams,this.trackIds=e.trackIds,e.blockParams=e.blockParams||[];var n=e.knownHelpers;if(e.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},n)for(var r in n)this.options.knownHelpers[r]=n[r];return this.accept(t)},compileProgram:function(t){var e=(new this.compiler).compile(t,this.options),n=this.guid++;return this.usePartial=this.usePartial||e.usePartial,this.children[n]=e,this.useDepths=this.useDepths||e.useDepths,n},accept:function(t){if(!this[t.type])throw new i.default("Unknown type: "+t.type,t);this.sourceNode.unshift(t);var e=this[t.type](t);return this.sourceNode.shift(),e},Program:function(t){this.options.blockParams.unshift(t.blockParams);for(var e=t.body,n=e.length,r=0;r<n;r++)this.accept(e[r]);return this.options.blockParams.shift(),this.isSimple=1===n,this.blockParams=t.blockParams?t.blockParams.length:0,this},BlockStatement:function(t){l(t);var e=t.program,n=t.inverse;e=e&&this.compileProgram(e),n=n&&this.compileProgram(n);var r=this.classifySexpr(t);"helper"===r?this.helperSexpr(t,e,n):"simple"===r?(this.simpleSexpr(t),this.opcode("pushProgram",e),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",t.path.original)):(this.ambiguousSexpr(t,e,n),this.opcode("pushProgram",e),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(t){var e=t.program&&this.compileProgram(t.program),n=this.setupFullMustacheParams(t,e,void 0),r=t.path;this.useDecorators=!0,this.opcode("registerDecorator",n.length,r.original)},PartialStatement:function(t){this.usePartial=!0;var e=t.program;e&&(e=this.compileProgram(t.program));var n=t.params;if(n.length>1)throw new i.default("Unsupported number of partial arguments: "+n.length,t);n.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):n.push({type:"PathExpression",parts:[],depth:0}));var r=t.name.original,o="SubExpression"===t.name.type;o&&this.accept(t.name),this.setupFullMustacheParams(t,e,void 0,!0);var a=t.indent||"";this.options.preventIndent&&a&&(this.opcode("appendContent",a),a=""),this.opcode("invokePartial",o,r,a),this.opcode("append")},PartialBlockStatement:function(t){this.PartialStatement(t)},MustacheStatement:function(t){this.SubExpression(t),t.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(t){this.DecoratorBlock(t)},ContentStatement:function(t){t.value&&this.opcode("appendContent",t.value)},CommentStatement:function(){},SubExpression:function(t){l(t);var e=this.classifySexpr(t);"simple"===e?this.simpleSexpr(t):"helper"===e?this.helperSexpr(t):this.ambiguousSexpr(t)},ambiguousSexpr:function(t,e,n){var r=t.path,i=r.parts[0],o=null!=e||null!=n;this.opcode("getContext",r.depth),this.opcode("pushProgram",e),this.opcode("pushProgram",n),r.strict=!0,this.accept(r),this.opcode("invokeAmbiguous",i,o)},simpleSexpr:function(t){var e=t.path;e.strict=!0,this.accept(e),this.opcode("resolvePossibleLambda")},helperSexpr:function(t,e,n){var r=this.setupFullMustacheParams(t,e,n),o=t.path,s=o.parts[0];if(this.options.knownHelpers[s])this.opcode("invokeKnownHelper",r.length,s);else{if(this.options.knownHelpersOnly)throw new i.default("You specified knownHelpersOnly, but used the unknown helper "+s,t);o.strict=!0,o.falsy=!0,this.accept(o),this.opcode("invokeHelper",r.length,o.original,a.default.helpers.simpleId(o))}},PathExpression:function(t){this.addDepth(t.depth),this.opcode("getContext",t.depth);var e=t.parts[0],n=a.default.helpers.scopedId(t),r=!t.depth&&!n&&this.blockParamIndex(e);r?this.opcode("lookupBlockParam",r,t.parts):e?t.data?(this.options.data=!0,this.opcode("lookupData",t.depth,t.parts,t.strict)):this.opcode("lookupOnContext",t.parts,t.falsy,t.strict,n):this.opcode("pushContext")},StringLiteral:function(t){this.opcode("pushString",t.value)},NumberLiteral:function(t){this.opcode("pushLiteral",t.value)},BooleanLiteral:function(t){this.opcode("pushLiteral",t.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(t){var e=t.pairs,n=0,r=e.length;for(this.opcode("pushHash");n<r;n++)this.pushParam(e[n].value);for(;n--;)this.opcode("assignToHash",e[n].key);this.opcode("popHash")},opcode:function(t){this.opcodes.push({opcode:t,args:s.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(t){t&&(this.useDepths=!0)},classifySexpr:function(t){var e=a.default.helpers.simpleId(t.path),n=e&&!!this.blockParamIndex(t.path.parts[0]),r=!n&&a.default.helpers.helperExpression(t),i=!n&&(r||e);if(i&&!r){var o=t.path.parts[0],s=this.options;s.knownHelpers[o]?r=!0:s.knownHelpersOnly&&(i=!1)}return r?"helper":i?"ambiguous":"simple"},pushParams:function(t){for(var e=0,n=t.length;e<n;e++)this.pushParam(t[e])},pushParam:function(t){var e=null!=t.value?t.value:t.original||"";if(this.stringParams)e.replace&&(e=e.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),t.depth&&this.addDepth(t.depth),this.opcode("getContext",t.depth||0),this.opcode("pushStringParam",e,t.type),"SubExpression"===t.type&&this.accept(t);else{if(this.trackIds){var n=void 0;if(!t.parts||a.default.helpers.scopedId(t)||t.depth||(n=this.blockParamIndex(t.parts[0])),n){var r=t.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,r)}else(e=t.original||e).replace&&(e=e.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",t.type,e)}this.accept(t)}},setupFullMustacheParams:function(t,e,n,r){var i=t.params;return this.pushParams(i),this.opcode("pushProgram",e),this.opcode("pushProgram",n),t.hash?this.accept(t.hash):this.opcode("emptyHash",r),i},blockParamIndex:function(t){for(var e=0,n=this.options.blockParams.length;e<n;e++){var r=this.options.blockParams[e],i=r&&o.indexOf(r,t);if(r&&i>=0)return[e,i]}}}},{337:337,349:349,362:362}],338:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.parse=function(t,e){return"Program"===t.type?t:(i.default.yy=u,u.locInfo=function(t){return new u.SourceLocation(e&&e.srcName,t)},new o.default(e).accept(i.default.parse(t)))};var i=r(t(343)),o=r(t(346)),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(t(341)),s=t(362);n.parser=i.default;var u={};s.extend(u,a)},{341:341,343:343,346:346,362:362}],335:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}n.__esModule=!0;var o=i(t(336)),a=r(t(361)),s=r(t(349)),u=i(t(362)),c=i(t(360)),l=r(t(359));function f(){var t=new o.HandlebarsEnvironment;return u.extend(t,o),t.SafeString=a.default,t.Exception=s.default,t.Utils=u,t.escapeExpression=u.escapeExpression,t.VM=c,t.template=function(e){return c.template(e,t)},t}var h=f();h.create=f,l.default(h),h.default=h,n.default=h,e.exports=n.default},{336:336,349:349,359:359,360:360,361:361,362:362}],342:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.__esModule=!0;var i=t(336),o=r(t(349)),a=t(362),s=r(t(339));function u(t){this.value=t}function c(){}c.prototype={nameLookup:function(t,e){return"constructor"===e?["(",t,".propertyIsEnumerable('constructor') ? ",t,".constructor : undefined",")"]:c.isValidJavaScriptVariableName(e)?[t,".",e]:[t,"[",JSON.stringify(e),"]"]},depthedLookup:function(t){return[this.aliasable("container.lookup"),'(depths, "',t,'")']},compilerInfo:function(){var t=i.COMPILER_REVISION;return[t,i.REVISION_CHANGES[t]]},appendToBuffer:function(t,e,n){return a.isArray(t)||(t=[t]),t=this.source.wrap(t,e),this.environment.isSimple?["return ",t,";"]:n?["buffer += ",t,";"]:(t.appendToBuffer=!0,t)},initializeBuffer:function(){return this.quotedString("")},compile:function(t,e,n,r){this.environment=t,this.options=e,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(t,e),this.useDepths=this.useDepths||t.useDepths||t.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||t.useBlockParams;var i=t.opcodes,a=void 0,s=void 0,u=void 0,c=void 0;for(u=0,c=i.length;u<c;u++)a=i[u],this.source.currentLocation=a.loc,s=s||a.loc,this[a.opcode].apply(this,a.args);if(this.source.currentLocation=s,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new o.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),r?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var l=this.createFunctionContext(r);if(this.isChild)return l;var f={compiler:this.compilerInfo(),main:l};this.decorators&&(f.main_d=this.decorators,f.useDecorators=!0);var h=this.context,p=h.programs,d=h.decorators;for(u=0,c=p.length;u<c;u++)p[u]&&(f[u]=p[u],d[u]&&(f[u+"_d"]=d[u],f.useDecorators=!0));return this.environment.usePartial&&(f.usePartial=!0),this.options.data&&(f.useData=!0),this.useDepths&&(f.useDepths=!0),this.useBlockParams&&(f.useBlockParams=!0),this.options.compat&&(f.compat=!0),r?f.compilerOptions=this.options:(f.compiler=JSON.stringify(f.compiler),this.source.currentLocation={start:{line:1,column:0}},f=this.objectLiteral(f),e.srcName?(f=f.toStringWithSourceMap({file:e.destName})).map=f.map&&f.map.toString():f=f.toString()),f},preamble:function(){this.lastContext=0,this.source=new s.default(this.options.srcName),this.decorators=new s.default(this.options.srcName)},createFunctionContext:function(t){var e="",n=this.stackVars.concat(this.registers.list);n.length>0&&(e+=", "+n.join(", "));var r=0;for(var i in this.aliases){var o=this.aliases[i];this.aliases.hasOwnProperty(i)&&o.children&&o.referenceCount>1&&(e+=", alias"+ ++r+"="+i,o.children[0]="alias"+r)}var a=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&a.push("blockParams"),this.useDepths&&a.push("depths");var s=this.mergeSource(e);return t?(a.push(s),Function.apply(this,a)):this.source.wrap(["function(",a.join(","),") {\n  ",s,"}"])},mergeSource:function(t){var e=this.environment.isSimple,n=!this.forceBuffer,r=void 0,i=void 0,o=void 0,a=void 0;return this.source.each(function(t){t.appendToBuffer?(o?t.prepend("  + "):o=t,a=t):(o&&(i?o.prepend("buffer += "):r=!0,a.add(";"),o=a=void 0),i=!0,e||(n=!1))}),n?o?(o.prepend("return "),a.add(";")):i||this.source.push('return "";'):(t+=", buffer = "+(r?"":this.initializeBuffer()),o?(o.prepend("return buffer + "),a.add(";")):this.source.push("return buffer;")),t&&this.source.prepend("var "+t.substring(2)+(r?"":";\n")),this.source.merge()},blockValue:function(t){var e=this.aliasable("helpers.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(t,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(e,"call",n))},ambiguousBlockValue:function(){var t=this.aliasable("helpers.blockHelperMissing"),e=[this.contextName(0)];this.setupHelperArgs("",0,e,!0),this.flushInline();var n=this.topStack();e.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(t,"call",e),"}"])},appendContent:function(t){this.pendingContent?t=this.pendingContent+t:this.pendingLocation=this.source.currentLocation,this.pendingContent=t},append:function(){if(this.isInline())this.replaceStack(function(t){return[" != null ? ",t,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var t=this.popStack();this.pushSource(["if (",t," != null) { ",this.appendToBuffer(t,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(t){this.lastContext=t},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(t,e,n,r){var i=0;r||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(t[i++])),this.resolvePath("context",t,i,e,n)},lookupBlockParam:function(t,e){this.useBlockParams=!0,this.push(["blockParams[",t[0],"][",t[1],"]"]),this.resolvePath("context",e,1)},lookupData:function(t,e,n){t?this.pushStackLiteral("container.data(data, "+t+")"):this.pushStackLiteral("data"),this.resolvePath("data",e,0,!0,n)},resolvePath:function(t,e,n,r,i){var o=this;if(this.options.strict||this.options.assumeObjects)this.push(function(t,e,n,r){var i=e.popStack(),o=0,a=n.length;for(t&&a--;o<a;o++)i=e.nameLookup(i,n[o],r);return t?[e.aliasable("container.strict"),"(",i,", ",e.quotedString(n[o]),")"]:i}(this.options.strict&&i,this,e,t));else for(var a=e.length;n<a;n++)this.replaceStack(function(i){var a=o.nameLookup(i,e[n],t);return r?[" && ",a]:[" != null ? ",a," : ",i]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(t,e){this.pushContext(),this.pushString(e),"SubExpression"!==e&&("string"==typeof t?this.pushString(t):this.pushStackLiteral(t))},emptyHash:function(t){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(t?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var t=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(t.ids)),this.stringParams&&(this.push(this.objectLiteral(t.contexts)),this.push(this.objectLiteral(t.types))),this.push(this.objectLiteral(t.values))},pushString:function(t){this.pushStackLiteral(this.quotedString(t))},pushLiteral:function(t){this.pushStackLiteral(t)},pushProgram:function(t){null!=t?this.pushStackLiteral(this.programExpression(t)):this.pushStackLiteral(null)},registerDecorator:function(t,e){var n=this.nameLookup("decorators",e,"decorator"),r=this.setupHelperArgs(e,t);this.decorators.push(["fn = ",this.decorators.functionCall(n,"",["fn","props","container",r])," || fn;"])},invokeHelper:function(t,e,n){var r=this.popStack(),i=this.setupHelper(t,e),o=n?[i.name," || "]:"",a=["("].concat(o,r);this.options.strict||a.push(" || ",this.aliasable("helpers.helperMissing")),a.push(")"),this.push(this.source.functionCall(a,"call",i.callParams))},invokeKnownHelper:function(t,e){var n=this.setupHelper(t,e);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(t,e){this.useRegister("helper");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,t,e),i=["(","(helper = ",this.lastHelper=this.nameLookup("helpers",t,"helper")," || ",n,")"];this.options.strict||(i[0]="(helper = ",i.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",i,r.paramsInit?["),(",r.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",r.callParams)," : helper))"])},invokePartial:function(t,e,n){var r=[],i=this.setupParams(e,1,r);t&&(e=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers="helpers",i.partials="partials",i.decorators="container.decorators",t?r.unshift(e):r.unshift(this.nameLookup("partials",e,"partial")),this.options.compat&&(i.depths="depths"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall("container.invokePartial","",r))},assignToHash:function(t){var e=this.popStack(),n=void 0,r=void 0,i=void 0;this.trackIds&&(i=this.popStack()),this.stringParams&&(r=this.popStack(),n=this.popStack());var o=this.hash;n&&(o.contexts[t]=n),r&&(o.types[t]=r),i&&(o.ids[t]=i),o.values[t]=e},pushId:function(t,e,n){"BlockParam"===t?this.pushStackLiteral("blockParams["+e[0]+"].path["+e[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===t?this.pushString(e):"SubExpression"===t?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:c,compileChildren:function(t,e){for(var n=t.children,r=void 0,i=void 0,o=0,a=n.length;o<a;o++){r=n[o],i=new this.compiler;var s=this.matchExistingProgram(r);if(null==s){this.context.programs.push("");var u=this.context.programs.length;r.index=u,r.name="program"+u,this.context.programs[u]=i.compile(r,e,this.context,!this.precompile),this.context.decorators[u]=i.decorators,this.context.environments[u]=r,this.useDepths=this.useDepths||i.useDepths,this.useBlockParams=this.useBlockParams||i.useBlockParams,r.useDepths=this.useDepths,r.useBlockParams=this.useBlockParams}else r.index=s.index,r.name="program"+s.index,this.useDepths=this.useDepths||s.useDepths,this.useBlockParams=this.useBlockParams||s.useBlockParams}},matchExistingProgram:function(t){for(var e=0,n=this.context.environments.length;e<n;e++){var r=this.context.environments[e];if(r&&r.equals(t))return r}},programExpression:function(t){var e=this.environment.children[t],n=[e.index,"data",e.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"container.program("+n.join(", ")+")"},useRegister:function(t){this.registers[t]||(this.registers[t]=!0,this.registers.list.push(t))},push:function(t){return t instanceof u||(t=this.source.wrap(t)),this.inlineStack.push(t),t},pushStackLiteral:function(t){this.push(new u(t))},pushSource:function(t){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),t&&this.source.push(t)},replaceStack:function(t){var e=["("],n=void 0,r=void 0,i=void 0;if(!this.isInline())throw new o.default("replaceStack on non-inline");var a=this.popStack(!0);if(a instanceof u)e=["(",n=[a.value]],i=!0;else{r=!0;var s=this.incrStack();e=["((",this.push(s)," = ",a,")"],n=this.topStack()}var c=t.call(this,n);i||this.popStack(),r&&this.stackSlot--,this.push(e.concat(c,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var t=this.inlineStack;this.inlineStack=[];for(var e=0,n=t.length;e<n;e++){var r=t[e];if(r instanceof u)this.compileStack.push(r);else{var i=this.incrStack();this.pushSource([i," = ",r,";"]),this.compileStack.push(i)}}},isInline:function(){return this.inlineStack.length},popStack:function(t){var e=this.isInline(),n=(e?this.inlineStack:this.compileStack).pop();if(!t&&n instanceof u)return n.value;if(!e){if(!this.stackSlot)throw new o.default("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var t=this.isInline()?this.inlineStack:this.compileStack,e=t[t.length-1];return e instanceof u?e.value:e},contextName:function(t){return this.useDepths&&t?"depths["+t+"]":"depth"+t},quotedString:function(t){return this.source.quotedString(t)},objectLiteral:function(t){return this.source.objectLiteral(t)},aliasable:function(t){var e=this.aliases[t];return e?(e.referenceCount++,e):((e=this.aliases[t]=this.source.wrap(t)).aliasable=!0,e.referenceCount=1,e)},setupHelper:function(t,e,n){var r=[];return{params:r,paramsInit:this.setupHelperArgs(e,t,r,n),name:this.nameLookup("helpers",e,"helper"),callParams:[this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : (container.nullContext || {})")].concat(r)}},setupParams:function(t,e,n){var r={},i=[],o=[],a=[],s=!n,u=void 0;s&&(n=[]),r.name=this.quotedString(t),r.hash=this.popStack(),this.trackIds&&(r.hashIds=this.popStack()),this.stringParams&&(r.hashTypes=this.popStack(),r.hashContexts=this.popStack());var c=this.popStack(),l=this.popStack();(l||c)&&(r.fn=l||"container.noop",r.inverse=c||"container.noop");for(var f=e;f--;)u=this.popStack(),n[f]=u,this.trackIds&&(a[f]=this.popStack()),this.stringParams&&(o[f]=this.popStack(),i[f]=this.popStack());return s&&(r.args=this.source.generateArray(n)),this.trackIds&&(r.ids=this.source.generateArray(a)),this.stringParams&&(r.types=this.source.generateArray(o),r.contexts=this.source.generateArray(i)),this.options.data&&(r.data="data"),this.useBlockParams&&(r.blockParams="blockParams"),r},setupHelperArgs:function(t,e,n,r){var i=this.setupParams(t,e,n);return i=this.objectLiteral(i),r?(this.useRegister("options"),n.push("options"),["options=",i]):n?(n.push(i),""):i}},function(){for(var t="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),e=c.RESERVED_WORDS={},n=0,r=t.length;n<r;n++)e[t[n]]=!0}(),c.isValidJavaScriptVariableName=function(t){return!c.RESERVED_WORDS[t]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t)},n.default=c,e.exports=n.default},{336:336,339:339,349:349,362:362}],362:[function(t,e,n){"use strict";n.__esModule=!0,n.extend=s,n.indexOf=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},n.escapeExpression=function(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return o.test(t)?t.replace(i,a):t},n.isEmpty=function(t){return!t&&0!==t||!(!l(t)||0!==t.length)},n.createFrame=function(t){var e=s({},t);return e._parent=t,e},n.blockParams=function(t,e){return t.path=e,t},n.appendContextPath=function(t,e){return(t?t+".":"")+e};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},i=/[&<>"'`=]/g,o=/[&<>"'`=]/;function a(t){return r[t]}function s(t){for(var e=1;e<arguments.length;e++)for(var n in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],n)&&(t[n]=arguments[e][n]);return t}var u=Object.prototype.toString;n.toString=u;var c=function(t){return"function"==typeof t};c(/x/)&&(n.isFunction=c=function(t){return"function"==typeof t&&"[object Function]"===u.call(t)}),n.isFunction=c;var l=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===u.call(t)};n.isArray=l},{}],361:[function(t,e,n){"use strict";function r(t){this.string=t}n.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},n.default=r,e.exports=n.default},{}],349:[function(t,e,n){"use strict";n.__esModule=!0;var r=["description","fileName","lineNumber","message","name","number","stack"];function i(t,e){var n=e&&e.loc,o=void 0,a=void 0;n&&(t+=" - "+(o=n.start.line)+":"+(a=n.start.column));for(var s=Error.prototype.constructor.call(this,t),u=0;u<r.length;u++)this[r[u]]=s[r[u]];Error.captureStackTrace&&Error.captureStackTrace(this,i);try{n&&(this.lineNumber=o,Object.defineProperty?Object.defineProperty(this,"column",{value:a,enumerable:!0}):this.column=a)}catch(t){}}i.prototype=new Error,n.default=i,e.exports=n.default},{}],360:[function(t,e,n){"use strict";n.__esModule=!0,n.checkRevision=function(t){var e=t&&t[0]||1,n=a.COMPILER_REVISION;if(e!==n){if(e<n){var r=a.REVISION_CHANGES[n],i=a.REVISION_CHANGES[e];throw new o.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new o.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}},n.template=function(t,e){if(!e)throw new o.default("No environment passed to template");if(!t||!t.main)throw new o.default("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var n={strict:function(t,e){if(!(e in t))throw new o.default('"'+e+'" not defined in '+t);return t[e]},lookup:function(t,e){for(var n=t.length,r=0;r<n;r++)if(t[r]&&null!=t[r][e])return t[r][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:i.escapeExpression,invokePartial:function(n,r,a){a.hash&&(r=i.extend({},r,a.hash),a.ids&&(a.ids[0]=!0)),n=e.VM.resolvePartial.call(this,n,r,a);var s=e.VM.invokePartial.call(this,n,r,a);if(null==s&&e.compile&&(a.partials[a.name]=e.compile(n,t.compilerOptions,e),s=a.partials[a.name](r,a)),null!=s){if(a.indent){for(var u=s.split("\n"),c=0,l=u.length;c<l&&(u[c]||c+1!==l);c++)u[c]=a.indent+u[c];s=u.join("\n")}return s}throw new o.default("The partial "+a.name+" could not be compiled when running in runtime-only mode")},fn:function(e){var n=t[e];return n.decorator=t[e+"_d"],n},programs:[],program:function(t,e,n,r,i){var o=this.programs[t],a=this.fn(t);return e||i||r||n?o=s(this,t,a,e,n,r,i):o||(o=this.programs[t]=s(this,t,a)),o},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var n=t||e;return t&&e&&t!==e&&(n=i.extend({},e,t)),n},nullContext:Object.seal({}),noop:e.VM.noop,compilerInfo:t.compiler};function r(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=i.data;r._setup(i),!i.partial&&t.useData&&(o=function(t,e){return e&&"root"in e||((e=e?a.createFrame(e):{}).root=t),e}(e,o));var s=void 0,u=t.useBlockParams?[]:void 0;function l(e){return""+t.main(n,e,n.helpers,n.partials,o,u,s)}return t.useDepths&&(s=i.depths?e!=i.depths[0]?[e].concat(i.depths):i.depths:[e]),(l=c(t.main,l,n,i.depths||[],o,u))(e,i)}return r.isTop=!0,r._setup=function(r){r.partial?(n.helpers=r.helpers,n.partials=r.partials,n.decorators=r.decorators):(n.helpers=n.merge(r.helpers,e.helpers),t.usePartial&&(n.partials=n.merge(r.partials,e.partials)),(t.usePartial||t.useDecorators)&&(n.decorators=n.merge(r.decorators,e.decorators)))},r._child=function(e,r,i,a){if(t.useBlockParams&&!i)throw new o.default("must pass block params");if(t.useDepths&&!a)throw new o.default("must pass parent depths");return s(n,e,t[e],r,0,i,a)},r},n.wrapProgram=s,n.resolvePartial=function(t,e,n){return t?t.call||n.name||(n.name=t,t=n.partials[t]):t="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],t},n.invokePartial=function(t,e,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var s=void 0;if(n.fn&&n.fn!==u&&function(){n.data=a.createFrame(n.data);var t=n.fn;s=n.data["partial-block"]=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=a.createFrame(n.data),n.data["partial-block"]=r,t(e,n)},t.partials&&(n.partials=i.extend({},n.partials,t.partials))}(),void 0===t&&s&&(t=s),void 0===t)throw new o.default("The partial "+n.name+" could not be found");if(t instanceof Function)return t(e,n)},n.noop=u;var r,i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(t(362)),o=(r=t(349))&&r.__esModule?r:{default:r},a=t(336);function s(t,e,n,r,i,o,a){function s(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=a;return!a||e==a[0]||e===t.nullContext&&null===a[0]||(s=[e].concat(a)),n(t,e,t.helpers,t.partials,i.data||r,o&&[i.blockParams].concat(o),s)}return(s=c(n,s,t,a,r,o)).program=e,s.depth=a?a.length:0,s.blockParams=i||0,s}function u(){return""}function c(t,e,n,r,o,a){if(t.decorator){var s={};e=t.decorator(e,s,n,r&&r[0],o,a,r),i.extend(e,s)}return e}},{336:336,349:349,362:362}],336:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.__esModule=!0,n.HandlebarsEnvironment=c;var i=t(362),o=r(t(349)),a=t(350),s=t(347),u=r(t(358));function c(t,e,n){this.helpers=t||{},this.partials=e||{},this.decorators=n||{},a.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}n.VERSION="4.1.2",n.COMPILER_REVISION=7,n.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"},c.prototype={constructor:c,logger:u.default,log:u.default.log,registerHelper:function(t,e){if("[object Object]"===i.toString.call(t)){if(e)throw new o.default("Arg not supported with multiple helpers");i.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if("[object Object]"===i.toString.call(t))i.extend(this.partials,t);else{if(void 0===e)throw new o.default('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if("[object Object]"===i.toString.call(t)){if(e)throw new o.default("Arg not supported with multiple decorators");i.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]}};var l=u.default.log;n.log=l,n.createFrame=i.createFrame,n.logger=u.default},{347:347,349:349,350:350,358:358,362:362}],358:[function(t,e,n){"use strict";n.__esModule=!0;var r=t(362),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=r.indexOf(i.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=i.lookupLevel(t),"undefined"!=typeof console&&i.lookupLevel(i.level)<=t){var e=i.methodMap[t];console[e]||(e="log");for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];console[e].apply(console,r)}}};n.default=i,e.exports=n.default},{362:362}],347:[function(t,e,n){"use strict";n.registerDefaultDecorators=function(t){i.default(t)};var r,i=(r=t(348))&&r.__esModule?r:{default:r}},{348:348}],350:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.registerDefaultHelpers=function(t){i.default(t),o.default(t),a.default(t),s.default(t),u.default(t),c.default(t),l.default(t)};var i=r(t(351)),o=r(t(352)),a=r(t(353)),s=r(t(354)),u=r(t(355)),c=r(t(356)),l=r(t(357))},{351:351,352:352,353:353,354:354,355:355,356:356,357:357}],343:[function(t,e,n){"use strict";n.__esModule=!0;var r=function(){var t={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(t,e,n,r,i,o,a){var s=o.length-1;switch(i){case 1:return o[s-1];case 2:this.$=r.prepareProgram(o[s]);break;case 3:case 4:case 5:case 6:case 7:case 8:this.$=o[s];break;case 9:this.$={type:"CommentStatement",value:r.stripComment(o[s]),strip:r.stripFlags(o[s],o[s]),loc:r.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:o[s],value:o[s],loc:r.locInfo(this._$)};break;case 11:this.$=r.prepareRawBlock(o[s-2],o[s-1],o[s],this._$);break;case 12:this.$={path:o[s-3],params:o[s-2],hash:o[s-1]};break;case 13:this.$=r.prepareBlock(o[s-3],o[s-2],o[s-1],o[s],!1,this._$);break;case 14:this.$=r.prepareBlock(o[s-3],o[s-2],o[s-1],o[s],!0,this._$);break;case 15:this.$={open:o[s-5],path:o[s-4],params:o[s-3],hash:o[s-2],blockParams:o[s-1],strip:r.stripFlags(o[s-5],o[s])};break;case 16:case 17:this.$={path:o[s-4],params:o[s-3],hash:o[s-2],blockParams:o[s-1],strip:r.stripFlags(o[s-5],o[s])};break;case 18:this.$={strip:r.stripFlags(o[s-1],o[s-1]),program:o[s]};break;case 19:var u=r.prepareBlock(o[s-2],o[s-1],o[s],o[s],!1,this._$),c=r.prepareProgram([u],o[s-1].loc);c.chained=!0,this.$={strip:o[s-2].strip,program:c,chain:!0};break;case 20:this.$=o[s];break;case 21:this.$={path:o[s-1],strip:r.stripFlags(o[s-2],o[s])};break;case 22:case 23:this.$=r.prepareMustache(o[s-3],o[s-2],o[s-1],o[s-4],r.stripFlags(o[s-4],o[s]),this._$);break;case 24:this.$={type:"PartialStatement",name:o[s-3],params:o[s-2],hash:o[s-1],indent:"",strip:r.stripFlags(o[s-4],o[s]),loc:r.locInfo(this._$)};break;case 25:this.$=r.preparePartialBlock(o[s-2],o[s-1],o[s],this._$);break;case 26:this.$={path:o[s-3],params:o[s-2],hash:o[s-1],strip:r.stripFlags(o[s-4],o[s])};break;case 27:case 28:this.$=o[s];break;case 29:this.$={type:"SubExpression",path:o[s-3],params:o[s-2],hash:o[s-1],loc:r.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:o[s],loc:r.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:r.id(o[s-2]),value:o[s],loc:r.locInfo(this._$)};break;case 32:this.$=r.id(o[s-1]);break;case 33:case 34:this.$=o[s];break;case 35:this.$={type:"StringLiteral",value:o[s],original:o[s],loc:r.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(o[s]),original:Number(o[s]),loc:r.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===o[s],original:"true"===o[s],loc:r.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:r.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:r.locInfo(this._$)};break;case 40:case 41:this.$=o[s];break;case 42:this.$=r.preparePath(!0,o[s],this._$);break;case 43:this.$=r.preparePath(!1,o[s],this._$);break;case 44:o[s-2].push({part:r.id(o[s]),original:o[s],separator:o[s-1]}),this.$=o[s-2];break;case 45:this.$=[{part:r.id(o[s]),original:o[s]}];break;case 46:this.$=[];break;case 47:o[s-1].push(o[s]);break;case 48:this.$=[o[s]];break;case 49:o[s-1].push(o[s]);break;case 50:this.$=[];break;case 51:o[s-1].push(o[s]);break;case 58:this.$=[];break;case 59:o[s-1].push(o[s]);break;case 64:this.$=[];break;case 65:o[s-1].push(o[s]);break;case 70:this.$=[];break;case 71:o[s-1].push(o[s]);break;case 78:this.$=[];break;case 79:o[s-1].push(o[s]);break;case 82:this.$=[];break;case 83:o[s-1].push(o[s]);break;case 86:this.$=[];break;case 87:o[s-1].push(o[s]);break;case 90:this.$=[];break;case 91:o[s-1].push(o[s]);break;case 94:this.$=[];break;case 95:o[s-1].push(o[s]);break;case 98:this.$=[o[s]];break;case 99:o[s-1].push(o[s]);break;case 100:this.$=[o[s]];break;case 101:o[s-1].push(o[s])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(t,e){throw new Error(t)},parse:function(t){var e=[0],n=[null],r=[],i=this.table,o="",a=0,s=0,u=0;this.lexer.setInput(t),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var c=this.lexer.yylloc;r.push(c);var l=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var f,h,p,d,v,g,_,y,m,b,w={};;){if(p=e[e.length-1],this.defaultActions[p]?d=this.defaultActions[p]:(null==f&&(b=void 0,"number"!=typeof(b=this.lexer.lex()||1)&&(b=this.symbols_[b]||b),f=b),d=i[p]&&i[p][f]),void 0===d||!d.length||!d[0]){var S="";if(!u){for(g in m=[],i[p])this.terminals_[g]&&g>2&&m.push("'"+this.terminals_[g]+"'");S=this.lexer.showPosition?"Parse error on line "+(a+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+m.join(", ")+", got '"+(this.terminals_[f]||f)+"'":"Parse error on line "+(a+1)+": Unexpected "+(1==f?"end of input":"'"+(this.terminals_[f]||f)+"'"),this.parseError(S,{text:this.lexer.match,token:this.terminals_[f]||f,line:this.lexer.yylineno,loc:c,expected:m})}}if(d[0]instanceof Array&&d.length>1)throw new Error("Parse Error: multiple actions possible at state: "+p+", token: "+f);switch(d[0]){case 1:e.push(f),n.push(this.lexer.yytext),r.push(this.lexer.yylloc),e.push(d[1]),f=null,h?(f=h,h=null):(s=this.lexer.yyleng,o=this.lexer.yytext,a=this.lexer.yylineno,c=this.lexer.yylloc,u>0&&u--);break;case 2:if(_=this.productions_[d[1]][1],w.$=n[n.length-_],w._$={first_line:r[r.length-(_||1)].first_line,last_line:r[r.length-1].last_line,first_column:r[r.length-(_||1)].first_column,last_column:r[r.length-1].last_column},l&&(w._$.range=[r[r.length-(_||1)].range[0],r[r.length-1].range[1]]),void 0!==(v=this.performAction.call(w,o,s,a,this.yy,d[1],n,r)))return v;_&&(e=e.slice(0,-1*_*2),n=n.slice(0,-1*_),r=r.slice(0,-1*_)),e.push(this.productions_[d[1]][0]),n.push(w.$),r.push(w._$),y=i[e[e.length-2]][e[e.length-1]],e.push(y);break;case 3:return!0}}return!0}},e={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t){return this._input=t,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];return this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t,t.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var e=t.length,n=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e-1),this.offset-=e;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-e]),this},more:function(){return this._more=!0,this},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+e+"^"},next:function(){if(this.done)return this.EOF;var t,e,n,r,i;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var o=this._currentRules(),a=0;a<o.length&&(!(n=this._input.match(this.rules[o[a]]))||e&&!(n[0].length>e[0].length)||(e=n,r=a,this.options.flex));a++);return e?((i=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],t=this.performAction.call(this,this.yy,this,o[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),t||void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var t=this.next();return void 0!==t?t:this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(t){this.begin(t)},options:{},performAction:function(t,e,n,r){function i(t,n){return e.yytext=e.yytext.substring(t,e.yyleng-n+t)}switch(n){case 0:if("\\\\"===e.yytext.slice(-2)?(i(0,1),this.begin("mu")):"\\"===e.yytext.slice(-1)?(i(0,1),this.begin("emu")):this.begin("mu"),e.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(i(5,9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(e.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return e.yytext=i(1,2).replace(/\\"/g,'"'),80;case 32:return e.yytext=i(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return e.yytext=e.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},rules:[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};function n(){this.yy={}}return t.lexer=e,n.prototype=t,t.Parser=n,new n}();n.default=r,e.exports=n.default},{}],341:[function(t,e,n){"use strict";n.__esModule=!0,n.SourceLocation=function(t,e){this.source=t,this.start={line:e.first_line,column:e.first_column},this.end={line:e.last_line,column:e.last_column}},n.id=function(t){return/^\[.*\]$/.test(t)?t.substring(1,t.length-1):t},n.stripFlags=function(t,e){return{open:"~"===t.charAt(2),close:"~"===e.charAt(e.length-3)}},n.stripComment=function(t){return t.replace(/^\{\{~?!-?-?/,"").replace(/-?-?~?\}\}$/,"")},n.preparePath=function(t,e,n){n=this.locInfo(n);for(var r=t?"@":"",o=[],a=0,s=0,u=e.length;s<u;s++){var c=e[s].part,l=e[s].original!==c;if(r+=(e[s].separator||"")+c,l||".."!==c&&"."!==c&&"this"!==c)o.push(c);else{if(o.length>0)throw new i.default("Invalid path: "+r,{loc:n});".."===c&&a++}}return{type:"PathExpression",data:t,depth:a,parts:o,original:r,loc:n}},n.prepareMustache=function(t,e,n,r,i,o){var a=r.charAt(3)||r.charAt(2),s="{"!==a&&"&"!==a;return{type:/\*/.test(r)?"Decorator":"MustacheStatement",path:t,params:e,hash:n,escaped:s,strip:i,loc:this.locInfo(o)}},n.prepareRawBlock=function(t,e,n,r){o(t,n);var i={type:"Program",body:e,strip:{},loc:r=this.locInfo(r)};return{type:"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:i,openStrip:{},inverseStrip:{},closeStrip:{},loc:r}},n.prepareBlock=function(t,e,n,r,a,s){r&&r.path&&o(t,r);var u=/\*/.test(t.open);e.blockParams=t.blockParams;var c=void 0,l=void 0;if(n){if(u)throw new i.default("Unexpected inverse block on decorator",n);n.chain&&(n.program.body[0].closeStrip=r.strip),l=n.strip,c=n.program}return a&&(a=c,c=e,e=a),{type:u?"DecoratorBlock":"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:e,inverse:c,openStrip:t.strip,inverseStrip:l,closeStrip:r&&r.strip,loc:this.locInfo(s)}},n.prepareProgram=function(t,e){if(!e&&t.length){var n=t[0].loc,r=t[t.length-1].loc;n&&r&&(e={source:n.source,start:{line:n.start.line,column:n.start.column},end:{line:r.end.line,column:r.end.column}})}return{type:"Program",body:t,strip:{},loc:e}},n.preparePartialBlock=function(t,e,n,r){return o(t,n),{type:"PartialBlockStatement",name:t.path,params:t.params,hash:t.hash,program:e,openStrip:t.strip,closeStrip:n&&n.strip,loc:this.locInfo(r)}};var r,i=(r=t(349))&&r.__esModule?r:{default:r};function o(t,e){if(e=e.path?e.path.original:e,t.path.original!==e){var n={loc:t.path.loc};throw new i.default(t.path.original+" doesn't match "+e,n)}}},{349:349}],346:[function(t,e,n){"use strict";n.__esModule=!0;var r,i=(r=t(345))&&r.__esModule?r:{default:r};function o(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t}function a(t,e,n){void 0===e&&(e=t.length);var r=t[e-1],i=t[e-2];return r?"ContentStatement"===r.type?(i||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(r.original):void 0:n}function s(t,e,n){void 0===e&&(e=-1);var r=t[e+1],i=t[e+2];return r?"ContentStatement"===r.type?(i||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(r.original):void 0:n}function u(t,e,n){var r=t[null==e?0:e+1];if(r&&"ContentStatement"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),r.rightStripped=r.value!==i}}function c(t,e,n){var r=t[null==e?t.length-1:e-1];if(r&&"ContentStatement"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\s+$/:/[ \t]+$/,""),r.leftStripped=r.value!==i,r.leftStripped}}o.prototype=new i.default,o.prototype.Program=function(t){var e=!this.options.ignoreStandalone,n=!this.isRootSeen;this.isRootSeen=!0;for(var r=t.body,i=0,o=r.length;i<o;i++){var l=r[i],f=this.accept(l);if(f){var h=a(r,i,n),p=s(r,i,n),d=f.openStandalone&&h,v=f.closeStandalone&&p,g=f.inlineStandalone&&h&&p;f.close&&u(r,i,!0),f.open&&c(r,i,!0),e&&g&&(u(r,i),c(r,i)&&"PartialStatement"===l.type&&(l.indent=/([ \t]+$)/.exec(r[i-1].original)[1])),e&&d&&(u((l.program||l.inverse).body),c(r,i)),e&&v&&(u(r,i),c((l.inverse||l.program).body))}}return t},o.prototype.BlockStatement=o.prototype.DecoratorBlock=o.prototype.PartialBlockStatement=function(t){this.accept(t.program),this.accept(t.inverse);var e=t.program||t.inverse,n=t.program&&t.inverse,r=n,i=n;if(n&&n.chained)for(r=n.body[0].program;i.chained;)i=i.body[i.body.length-1].program;var o={open:t.openStrip.open,close:t.closeStrip.close,openStandalone:s(e.body),closeStandalone:a((r||e).body)};if(t.openStrip.close&&u(e.body,null,!0),n){var l=t.inverseStrip;l.open&&c(e.body,null,!0),l.close&&u(r.body,null,!0),t.closeStrip.open&&c(i.body,null,!0),!this.options.ignoreStandalone&&a(e.body)&&s(r.body)&&(c(e.body),u(r.body))}else t.closeStrip.open&&c(e.body,null,!0);return o},o.prototype.Decorator=o.prototype.MustacheStatement=function(t){return t.strip},o.prototype.PartialStatement=o.prototype.CommentStatement=function(t){var e=t.strip||{};return{inlineStandalone:!0,open:e.open,close:e.close}},n.default=o,e.exports=n.default},{345:345}],339:[function(t,e,n){"use strict";n.__esModule=!0;var r=t(362),i=void 0;try{var o=t(374);i=o.SourceNode}catch(u){}function a(t,e,n){if(r.isArray(t)){for(var i=[],o=0,a=t.length;o<a;o++)i.push(e.wrap(t[o],n));return i}return"boolean"==typeof t||"number"==typeof t?t+"":t}function s(t){this.srcFile=t,this.source=[]}i||((i=function(t,e,n,r){this.src="",r&&this.add(r)}).prototype={add:function(t){r.isArray(t)&&(t=t.join("")),this.src+=t},prepend:function(t){r.isArray(t)&&(t=t.join("")),this.src=t+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),s.prototype={isEmpty:function(){return!this.source.length},prepend:function(t,e){this.source.unshift(this.wrap(t,e))},push:function(t,e){this.source.push(this.wrap(t,e))},merge:function(){var t=this.empty();return this.each(function(e){t.add(["  ",e,"\n"])}),t},each:function(t){for(var e=0,n=this.source.length;e<n;e++)t(this.source[e])},empty:function(){var t=this.currentLocation||{start:{}};return new i(t.start.line,t.start.column,this.srcFile)},wrap:function(t){var e=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return t instanceof i?t:(t=a(t,this,e),new i(e.start.line,e.start.column,this.srcFile,t))},functionCall:function(t,e,n){return n=this.generateList(n),this.wrap([t,e?"."+e+"(":"(",n,")"])},quotedString:function(t){return'"'+(t+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(t){var e=[];for(var n in t)if(t.hasOwnProperty(n)){var r=a(t[n],this);"undefined"!==r&&e.push([this.quotedString(n),":",r])}var i=this.generateList(e);return i.prepend("{"),i.add("}"),i},generateList:function(t){for(var e=this.empty(),n=0,r=t.length;n<r;n++)n&&e.add(","),e.add(a(t[n],this));return e},generateArray:function(t){var e=this.generateList(t);return e.prepend("["),e.add("]"),e}},n.default=s,e.exports=n.default},{362:362,374:374}],374:[function(t,e,n){t(371).SourceMapGenerator,t(370).SourceMapConsumer,n.SourceNode=t(372).SourceNode},{370:370,371:371,372:372}],344:[function(t,e,n){"use strict";n.print=function(t){return(new o).accept(t)},n.PrintVisitor=o;var r,i=(r=t(345))&&r.__esModule?r:{default:r};function o(){this.padding=0}o.prototype=new i.default,o.prototype.pad=function(t){for(var e="",n=0,r=this.padding;n<r;n++)e+="  ";return e+(t+"\n")},o.prototype.Program=function(t){var e="",n=t.body,r=void 0,i=void 0;if(t.blockParams){var o="BLOCK PARAMS: [";for(r=0,i=t.blockParams.length;r<i;r++)o+=" "+t.blockParams[r];o+=" ]",e+=this.pad(o)}for(r=0,i=n.length;r<i;r++)e+=this.accept(n[r]);return this.padding--,e},o.prototype.MustacheStatement=function(t){return this.pad("{{ "+this.SubExpression(t)+" }}")},o.prototype.Decorator=function(t){return this.pad("{{ DIRECTIVE "+this.SubExpression(t)+" }}")},o.prototype.BlockStatement=o.prototype.DecoratorBlock=function(t){var e="";return e+=this.pad(("DecoratorBlock"===t.type?"DIRECTIVE ":"")+"BLOCK:"),this.padding++,e+=this.pad(this.SubExpression(t)),t.program&&(e+=this.pad("PROGRAM:"),this.padding++,e+=this.accept(t.program),this.padding--),t.inverse&&(t.program&&this.padding++,e+=this.pad("{{^}}"),this.padding++,e+=this.accept(t.inverse),this.padding--,t.program&&this.padding--),this.padding--,e},o.prototype.PartialStatement=function(t){var e="PARTIAL:"+t.name.original;return t.params[0]&&(e+=" "+this.accept(t.params[0])),t.hash&&(e+=" "+this.accept(t.hash)),this.pad("{{> "+e+" }}")},o.prototype.PartialBlockStatement=function(t){var e="PARTIAL BLOCK:"+t.name.original;return t.params[0]&&(e+=" "+this.accept(t.params[0])),t.hash&&(e+=" "+this.accept(t.hash)),e+=" "+this.pad("PROGRAM:"),this.padding++,e+=this.accept(t.program),this.padding--,this.pad("{{> "+e+" }}")},o.prototype.ContentStatement=function(t){return this.pad("CONTENT[ '"+t.value+"' ]")},o.prototype.CommentStatement=function(t){return this.pad("{{! '"+t.value+"' }}")},o.prototype.SubExpression=function(t){for(var e,n=t.params,r=[],i=0,o=n.length;i<o;i++)r.push(this.accept(n[i]));return n="["+r.join(", ")+"]",e=t.hash?" "+this.accept(t.hash):"",this.accept(t.path)+" "+n+e},o.prototype.PathExpression=function(t){var e=t.parts.join("/");return(t.data?"@":"")+"PATH:"+e},o.prototype.StringLiteral=function(t){return'"'+t.value+'"'},o.prototype.NumberLiteral=function(t){return"NUMBER{"+t.value+"}"},o.prototype.BooleanLiteral=function(t){return"BOOLEAN{"+t.value+"}"},o.prototype.UndefinedLiteral=function(){return"UNDEFINED"},o.prototype.NullLiteral=function(){return"NULL"},o.prototype.Hash=function(t){for(var e=t.pairs,n=[],r=0,i=e.length;r<i;r++)n.push(this.accept(e[r]));return"HASH{"+n.join(", ")+"}"},o.prototype.HashPair=function(t){return t.key+"="+this.accept(t.value)}},{345:345}],348:[function(t,e,n){"use strict";n.__esModule=!0;var r=t(362);n.default=function(t){t.registerDecorator("inline",function(t,e,n,i){var o=t;return e.partials||(e.partials={},o=function(i,o){var a=n.partials;n.partials=r.extend({},a,e.partials);var s=t(i,o);return n.partials=a,s}),e.partials[i.args[0]]=i.fn,o})},e.exports=n.default},{362:362}],356:[function(t,e,n){"use strict";n.__esModule=!0,n.default=function(t){t.registerHelper("lookup",function(t,e){return t?"constructor"!==e||t.propertyIsEnumerable(e)?t[e]:void 0:t})},e.exports=n.default},{}],355:[function(t,e,n){"use strict";n.__esModule=!0,n.default=function(t){t.registerHelper("log",function(){for(var e=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)e.push(arguments[r]);var i=1;null!=n.hash.level?i=n.hash.level:n.data&&null!=n.data.level&&(i=n.data.level),e[0]=i,t.log.apply(t,e)})},e.exports=n.default},{}],352:[function(t,e,n){"use strict";n.__esModule=!0;var r,i=t(362),o=(r=t(349))&&r.__esModule?r:{default:r};n.default=function(t){t.registerHelper("each",function(t,e){if(!e)throw new o.default("Must pass iterator to #each");var n=e.fn,r=e.inverse,a=0,s="",u=void 0,c=void 0;function l(e,r,o){u&&(u.key=e,u.index=r,u.first=0===r,u.last=!!o,c&&(u.contextPath=c+e)),s+=n(t[e],{data:u,blockParams:i.blockParams([t[e],e],[c+e,null])})}if(e.data&&e.ids&&(c=i.appendContextPath(e.data.contextPath,e.ids[0])+"."),i.isFunction(t)&&(t=t.call(this)),e.data&&(u=i.createFrame(e.data)),t&&"object"==typeof t)if(i.isArray(t))for(var f=t.length;a<f;a++)a in t&&l(a,a,a===t.length-1);else{var h=void 0;for(var p in t)t.hasOwnProperty(p)&&(void 0!==h&&l(h,a-1),h=p,a++);void 0!==h&&l(h,a-1,!0)}return 0===a&&(s=r(this)),s})},e.exports=n.default},{349:349,362:362}],353:[function(t,e,n){"use strict";n.__esModule=!0;var r,i=(r=t(349))&&r.__esModule?r:{default:r};n.default=function(t){t.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},e.exports=n.default},{349:349}],354:[function(t,e,n){"use strict";n.__esModule=!0;var r=t(362);n.default=function(t){t.registerHelper("if",function(t,e){return r.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||r.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,n){return t.helpers.if.call(this,e,{fn:n.inverse,inverse:n.fn,hash:n.hash})})},e.exports=n.default},{362:362}],357:[function(t,e,n){"use strict";n.__esModule=!0;var r=t(362);n.default=function(t){t.registerHelper("with",function(t,e){r.isFunction(t)&&(t=t.call(this));var n=e.fn;if(r.isEmpty(t))return e.inverse(this);var i=e.data;return e.data&&e.ids&&((i=r.createFrame(e.data)).contextPath=r.appendContextPath(e.data.contextPath,e.ids[0])),n(t,{data:i,blockParams:r.blockParams([t],[i&&i.contextPath])})})},e.exports=n.default},{362:362}],351:[function(t,e,n){"use strict";n.__esModule=!0;var r=t(362);n.default=function(t){t.registerHelper("blockHelperMissing",function(e,n){var i=n.inverse,o=n.fn;if(!0===e)return o(this);if(!1===e||null==e)return i(this);if(r.isArray(e))return e.length>0?(n.ids&&(n.ids=[n.name]),t.helpers.each(e,n)):i(this);if(n.data&&n.ids){var a=r.createFrame(n.data);a.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:a}}return o(e,n)})},e.exports=n.default},{362:362}],363:[function(t,e,n){var r=t(334).default,i=t(344);function o(e,n){var i=t(3).readFileSync(n,"utf8");e.exports=r.compile(i)}r.PrintVisitor=i.PrintVisitor,r.print=i.print,e.exports=r,void 0!==t&&t.extensions&&(t.extensions[".handlebars"]=o,t.extensions[".hbs"]=o)},{3:3,334:334,344:344}],364:[function(t,e,n){var r=t(373),i=Object.prototype.hasOwnProperty,o="undefined"!=typeof Map;function a(){this._array=[],this._set=o?new Map:Object.create(null)}a.fromArray=function(t,e){for(var n=new a,r=0,i=t.length;r<i;r++)n.add(t[r],e);return n},a.prototype.size=function(){return o?this._set.size:Object.getOwnPropertyNames(this._set).length},a.prototype.add=function(t,e){var n=o?t:r.toSetString(t),a=o?this.has(t):i.call(this._set,n),s=this._array.length;a&&!e||this._array.push(t),a||(o?this._set.set(t,s):this._set[n]=s)},a.prototype.has=function(t){if(o)return this._set.has(t);var e=r.toSetString(t);return i.call(this._set,e)},a.prototype.indexOf=function(t){if(o){var e=this._set.get(t);if(e>=0)return e}else{var n=r.toSetString(t);if(i.call(this._set,n))return this._set[n]}throw new Error('"'+t+'" is not in the set.')},a.prototype.at=function(t){if(t>=0&&t<this._array.length)return this._array[t];throw new Error("No element indexed by "+t)},a.prototype.toArray=function(){return this._array.slice()},n.ArraySet=a},{373:373}],373:[function(t,e,n){n.getArg=function(t,e,n){if(e in t)return t[e];if(3===arguments.length)return n;throw new Error('"'+e+'" is a required argument.')};var r=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,i=/^data:.+\,.+$/;function o(t){var e=t.match(r);return e?{scheme:e[1],auth:e[2],host:e[3],port:e[4],path:e[5]}:null}function a(t){var e="";return t.scheme&&(e+=t.scheme+":"),e+="//",t.auth&&(e+=t.auth+"@"),t.host&&(e+=t.host),t.port&&(e+=":"+t.port),t.path&&(e+=t.path),e}function s(t){var e=t,r=o(t);if(r){if(!r.path)return t;e=r.path}for(var i,s=n.isAbsolute(e),u=e.split(/\/+/),c=0,l=u.length-1;l>=0;l--)"."===(i=u[l])?u.splice(l,1):".."===i?c++:c>0&&(""===i?(u.splice(l+1,c),c=0):(u.splice(l,2),c--));return""===(e=u.join("/"))&&(e=s?"/":"."),r?(r.path=e,a(r)):e}function u(t,e){""===t&&(t="."),""===e&&(e=".");var n=o(e),r=o(t);if(r&&(t=r.path||"/"),n&&!n.scheme)return r&&(n.scheme=r.scheme),a(n);if(n||e.match(i))return e;if(r&&!r.host&&!r.path)return r.host=e,a(r);var u="/"===e.charAt(0)?e:s(t.replace(/\/+$/,"")+"/"+e);return r?(r.path=u,a(r)):u}n.urlParse=o,n.normalize=s,n.join=u,n.isAbsolute=function(t){return"/"===t.charAt(0)||r.test(t)},n.relative=function(t,e){""===t&&(t="."),t=t.replace(/\/$/,"");for(var n=0;0!==e.indexOf(t+"/");){var r=t.lastIndexOf("/");if(r<0)return e;if((t=t.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return e;++n}return Array(n+1).join("../")+e.substr(t.length+1)};var c=!("__proto__"in Object.create(null));function l(t){return t}function f(t){if(!t)return!1;var e=t.length;if(e<9)return!1;if(95!==t.charCodeAt(e-1)||95!==t.charCodeAt(e-2)||111!==t.charCodeAt(e-3)||116!==t.charCodeAt(e-4)||111!==t.charCodeAt(e-5)||114!==t.charCodeAt(e-6)||112!==t.charCodeAt(e-7)||95!==t.charCodeAt(e-8)||95!==t.charCodeAt(e-9))return!1;for(var n=e-10;n>=0;n--)if(36!==t.charCodeAt(n))return!1;return!0}function h(t,e){return t===e?0:null===t?1:null===e?-1:t>e?1:-1}n.toSetString=c?l:function(t){return f(t)?"$"+t:t},n.fromSetString=c?l:function(t){return f(t)?t.slice(1):t},n.compareByOriginalPositions=function(t,e,n){var r=h(t.source,e.source);return 0!==r?r:0!=(r=t.originalLine-e.originalLine)?r:0!=(r=t.originalColumn-e.originalColumn)||n?r:0!=(r=t.generatedColumn-e.generatedColumn)?r:0!=(r=t.generatedLine-e.generatedLine)?r:h(t.name,e.name)},n.compareByGeneratedPositionsDeflated=function(t,e,n){var r=t.generatedLine-e.generatedLine;return 0!==r?r:0!=(r=t.generatedColumn-e.generatedColumn)||n?r:0!==(r=h(t.source,e.source))?r:0!=(r=t.originalLine-e.originalLine)?r:0!=(r=t.originalColumn-e.originalColumn)?r:h(t.name,e.name)},n.compareByGeneratedPositionsInflated=function(t,e){var n=t.generatedLine-e.generatedLine;return 0!==n?n:0!=(n=t.generatedColumn-e.generatedColumn)?n:0!==(n=h(t.source,e.source))?n:0!=(n=t.originalLine-e.originalLine)?n:0!=(n=t.originalColumn-e.originalColumn)?n:h(t.name,e.name)},n.parseSourceMapInput=function(t){return JSON.parse(t.replace(/^\)]}'[^\n]*\n/,""))},n.computeSourceURL=function(t,e,n){if(e=e||"",t&&("/"!==t[t.length-1]&&"/"!==e[0]&&(t+="/"),e=t+e),n){var r=o(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var i=r.path.lastIndexOf("/");i>=0&&(r.path=r.path.substring(0,i+1))}e=u(a(r),e)}return s(e)}},{}],365:[function(t,e,n){var r=t(366);n.encode=function(t){var e,n="",i=function(t){return t<0?1+(-t<<1):0+(t<<1)}(t);do{e=31&i,(i>>>=5)>0&&(e|=32),n+=r.encode(e)}while(i>0);return n},n.decode=function(t,e,n){var i,o,a,s,u=t.length,c=0,l=0;do{if(e>=u)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(o=r.decode(t.charCodeAt(e++))))throw new Error("Invalid base64 digit: "+t.charAt(e-1));i=!!(32&o),c+=(o&=31)<<l,l+=5}while(i);n.value=(s=(a=c)>>1,1==(1&a)?-s:s),n.rest=e}},{366:366}],366:[function(t,e,n){"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("")},{}],367:[function(t,e,n){n.GREATEST_LOWER_BOUND=1,n.LEAST_UPPER_BOUND=2,n.search=function(t,e,r,i){if(0===e.length)return-1;var o=function t(e,r,i,o,a,s){var u=Math.floor((r-e)/2)+e,c=a(i,o[u],!0);return 0===c?u:c>0?r-u>1?t(u,r,i,o,a,s):s==n.LEAST_UPPER_BOUND?r<o.length?r:-1:u:u-e>1?t(e,u,i,o,a,s):s==n.LEAST_UPPER_BOUND?u:e<0?-1:e}(-1,e.length,t,e,r,i||n.GREATEST_LOWER_BOUND);if(o<0)return-1;for(;o-1>=0&&0===r(e[o],e[o-1],!0);)--o;return o}},{}],368:[function(t,e,n){var r=t(373);function i(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}i.prototype.unsortedForEach=function(t,e){this._array.forEach(t,e)},i.prototype.add=function(t){var e,n,i,o,a,s;n=t,i=(e=this._last).generatedLine,o=n.generatedLine,a=e.generatedColumn,s=n.generatedColumn,o>i||o==i&&s>=a||r.compareByGeneratedPositionsInflated(e,n)<=0?(this._last=t,this._array.push(t)):(this._sorted=!1,this._array.push(t))},i.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},n.MappingList=i},{373:373}],369:[function(t,e,n){function r(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}n.quickSort=function(t,e){!function t(e,n,i,o){if(i<o){var a=i-1;r(e,(l=i,f=o,Math.round(l+Math.random()*(f-l))),o);for(var s=e[o],u=i;u<o;u++)n(e[u],s)<=0&&r(e,a+=1,u);r(e,a+1,u);var c=a+1;t(e,n,i,c-1),t(e,n,c+1,o)}var l,f}(t,e,0,t.length-1)}},{}],370:[function(t,e,n){var r=t(373),i=t(367),o=t(364).ArraySet,a=t(365),s=t(369).quickSort;function u(t,e){var n=t;return"string"==typeof t&&(n=r.parseSourceMapInput(t)),null!=n.sections?new f(n,e):new c(n,e)}function c(t,e){var n=t;"string"==typeof t&&(n=r.parseSourceMapInput(t));var i=r.getArg(n,"version"),a=r.getArg(n,"sources"),s=r.getArg(n,"names",[]),u=r.getArg(n,"sourceRoot",null),c=r.getArg(n,"sourcesContent",null),l=r.getArg(n,"mappings"),f=r.getArg(n,"file",null);if(i!=this._version)throw new Error("Unsupported version: "+i);u&&(u=r.normalize(u)),a=a.map(String).map(r.normalize).map(function(t){return u&&r.isAbsolute(u)&&r.isAbsolute(t)?r.relative(u,t):t}),this._names=o.fromArray(s.map(String),!0),this._sources=o.fromArray(a,!0),this._absoluteSources=this._sources.toArray().map(function(t){return r.computeSourceURL(u,t,e)}),this.sourceRoot=u,this.sourcesContent=c,this._mappings=l,this._sourceMapURL=e,this.file=f}function l(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function f(t,e){var n=t;"string"==typeof t&&(n=r.parseSourceMapInput(t));var i=r.getArg(n,"version"),a=r.getArg(n,"sections");if(i!=this._version)throw new Error("Unsupported version: "+i);this._sources=new o,this._names=new o;var s={line:-1,column:0};this._sections=a.map(function(t){if(t.url)throw new Error("Support for url field in sections not implemented.");var n=r.getArg(t,"offset"),i=r.getArg(n,"line"),o=r.getArg(n,"column");if(i<s.line||i===s.line&&o<s.column)throw new Error("Section offsets must be ordered and non-overlapping.");return s=n,{generatedOffset:{generatedLine:i+1,generatedColumn:o+1},consumer:new u(r.getArg(t,"map"),e)}})}u.fromSourceMap=function(t,e){return c.fromSourceMap(t,e)},u.prototype._version=3,u.prototype.__generatedMappings=null,Object.defineProperty(u.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),u.prototype.__originalMappings=null,Object.defineProperty(u.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),u.prototype._charIsMappingSeparator=function(t,e){var n=t.charAt(e);return";"===n||","===n},u.prototype._parseMappings=function(t,e){throw new Error("Subclasses must implement _parseMappings")},u.GENERATED_ORDER=1,u.ORIGINAL_ORDER=2,u.GREATEST_LOWER_BOUND=1,u.LEAST_UPPER_BOUND=2,u.prototype.eachMapping=function(t,e,n){var i,o=e||null;switch(n||u.GENERATED_ORDER){case u.GENERATED_ORDER:i=this._generatedMappings;break;case u.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var a=this.sourceRoot;i.map(function(t){var e=null===t.source?null:this._sources.at(t.source);return{source:e=r.computeSourceURL(a,e,this._sourceMapURL),generatedLine:t.generatedLine,generatedColumn:t.generatedColumn,originalLine:t.originalLine,originalColumn:t.originalColumn,name:null===t.name?null:this._names.at(t.name)}},this).forEach(t,o)},u.prototype.allGeneratedPositionsFor=function(t){var e=r.getArg(t,"line"),n={source:r.getArg(t,"source"),originalLine:e,originalColumn:r.getArg(t,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var o=[],a=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,i.LEAST_UPPER_BOUND);if(a>=0){var s=this._originalMappings[a];if(void 0===t.column)for(var u=s.originalLine;s&&s.originalLine===u;)o.push({line:r.getArg(s,"generatedLine",null),column:r.getArg(s,"generatedColumn",null),lastColumn:r.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++a];else for(var c=s.originalColumn;s&&s.originalLine===e&&s.originalColumn==c;)o.push({line:r.getArg(s,"generatedLine",null),column:r.getArg(s,"generatedColumn",null),lastColumn:r.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++a]}return o},c.prototype=Object.create(u.prototype),c.prototype.consumer=u,c.prototype._findSourceIndex=function(t){var e,n=t;if(null!=this.sourceRoot&&(n=r.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(e=0;e<this._absoluteSources.length;++e)if(this._absoluteSources[e]==t)return e;return-1},c.fromSourceMap=function(t,e){var n=Object.create(c.prototype),i=n._names=o.fromArray(t._names.toArray(),!0),a=n._sources=o.fromArray(t._sources.toArray(),!0);n.sourceRoot=t._sourceRoot,n.sourcesContent=t._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=t._file,n._sourceMapURL=e,n._absoluteSources=n._sources.toArray().map(function(t){return r.computeSourceURL(n.sourceRoot,t,e)});for(var u=t._mappings.toArray().slice(),f=n.__generatedMappings=[],h=n.__originalMappings=[],p=0,d=u.length;p<d;p++){var v=u[p],g=new l;g.generatedLine=v.generatedLine,g.generatedColumn=v.generatedColumn,v.source&&(g.source=a.indexOf(v.source),g.originalLine=v.originalLine,g.originalColumn=v.originalColumn,v.name&&(g.name=i.indexOf(v.name)),h.push(g)),f.push(g)}return s(n.__originalMappings,r.compareByOriginalPositions),n},c.prototype._version=3,Object.defineProperty(c.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),c.prototype._parseMappings=function(t,e){for(var n,i,o,u,c,f=1,h=0,p=0,d=0,v=0,g=0,_=t.length,y=0,m={},b={},w=[],S=[];y<_;)if(";"===t.charAt(y))f++,y++,h=0;else if(","===t.charAt(y))y++;else{for((n=new l).generatedLine=f,u=y;u<_&&!this._charIsMappingSeparator(t,u);u++);if(o=m[i=t.slice(y,u)])y+=i.length;else{for(o=[];y<u;)a.decode(t,y,b),c=b.value,y=b.rest,o.push(c);if(2===o.length)throw new Error("Found a source, but no line and column");if(3===o.length)throw new Error("Found a source and line, but no column");m[i]=o}n.generatedColumn=h+o[0],h=n.generatedColumn,o.length>1&&(n.source=v+o[1],v+=o[1],n.originalLine=p+o[2],p=n.originalLine,n.originalLine+=1,n.originalColumn=d+o[3],d=n.originalColumn,o.length>4&&(n.name=g+o[4],g+=o[4])),S.push(n),"number"==typeof n.originalLine&&w.push(n)}s(S,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=S,s(w,r.compareByOriginalPositions),this.__originalMappings=w},c.prototype._findMapping=function(t,e,n,r,o,a){if(t[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+t[n]);if(t[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+t[r]);return i.search(t,e,o,a)},c.prototype.computeColumnSpans=function(){for(var t=0;t<this._generatedMappings.length;++t){var e=this._generatedMappings[t];if(t+1<this._generatedMappings.length){var n=this._generatedMappings[t+1];if(e.generatedLine===n.generatedLine){e.lastGeneratedColumn=n.generatedColumn-1;continue}}e.lastGeneratedColumn=1/0}},c.prototype.originalPositionFor=function(t){var e={generatedLine:r.getArg(t,"line"),generatedColumn:r.getArg(t,"column")},n=this._findMapping(e,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositionsDeflated,r.getArg(t,"bias",u.GREATEST_LOWER_BOUND));if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===e.generatedLine){var o=r.getArg(i,"source",null);null!==o&&(o=this._sources.at(o),o=r.computeSourceURL(this.sourceRoot,o,this._sourceMapURL));var a=r.getArg(i,"name",null);return null!==a&&(a=this._names.at(a)),{source:o,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:a}}}return{source:null,line:null,column:null,name:null}},c.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(t){return null==t})},c.prototype.sourceContentFor=function(t,e){if(!this.sourcesContent)return null;var n=this._findSourceIndex(t);if(n>=0)return this.sourcesContent[n];var i,o=t;if(null!=this.sourceRoot&&(o=r.relative(this.sourceRoot,o)),null!=this.sourceRoot&&(i=r.urlParse(this.sourceRoot))){var a=o.replace(/^file:\/\//,"");if("file"==i.scheme&&this._sources.has(a))return this.sourcesContent[this._sources.indexOf(a)];if((!i.path||"/"==i.path)&&this._sources.has("/"+o))return this.sourcesContent[this._sources.indexOf("/"+o)]}if(e)return null;throw new Error('"'+o+'" is not in the SourceMap.')},c.prototype.generatedPositionFor=function(t){var e=r.getArg(t,"source");if((e=this._findSourceIndex(e))<0)return{line:null,column:null,lastColumn:null};var n={source:e,originalLine:r.getArg(t,"line"),originalColumn:r.getArg(t,"column")},i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,r.getArg(t,"bias",u.GREATEST_LOWER_BOUND));if(i>=0){var o=this._originalMappings[i];if(o.source===n.source)return{line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},f.prototype=Object.create(u.prototype),f.prototype.constructor=u,f.prototype._version=3,Object.defineProperty(f.prototype,"sources",{get:function(){for(var t=[],e=0;e<this._sections.length;e++)for(var n=0;n<this._sections[e].consumer.sources.length;n++)t.push(this._sections[e].consumer.sources[n]);return t}}),f.prototype.originalPositionFor=function(t){var e={generatedLine:r.getArg(t,"line"),generatedColumn:r.getArg(t,"column")},n=i.search(e,this._sections,function(t,e){return t.generatedLine-e.generatedOffset.generatedLine||t.generatedColumn-e.generatedOffset.generatedColumn}),o=this._sections[n];return o?o.consumer.originalPositionFor({line:e.generatedLine-(o.generatedOffset.generatedLine-1),column:e.generatedColumn-(o.generatedOffset.generatedLine===e.generatedLine?o.generatedOffset.generatedColumn-1:0),bias:t.bias}):{source:null,line:null,column:null,name:null}},f.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(t){return t.consumer.hasContentsOfAllSources()})},f.prototype.sourceContentFor=function(t,e){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(t,!0);if(r)return r}if(e)return null;throw new Error('"'+t+'" is not in the SourceMap.')},f.prototype.generatedPositionFor=function(t){for(var e=0;e<this._sections.length;e++){var n=this._sections[e];if(-1!==n.consumer._findSourceIndex(r.getArg(t,"source"))){var i=n.consumer.generatedPositionFor(t);if(i)return{line:i.line+(n.generatedOffset.generatedLine-1),column:i.column+(n.generatedOffset.generatedLine===i.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},f.prototype._parseMappings=function(t,e){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var i=this._sections[n],o=i.consumer._generatedMappings,a=0;a<o.length;a++){var u=o[a],c=i.consumer._sources.at(u.source);c=r.computeSourceURL(i.consumer.sourceRoot,c,this._sourceMapURL),this._sources.add(c),c=this._sources.indexOf(c);var l=null;u.name&&(l=i.consumer._names.at(u.name),this._names.add(l),l=this._names.indexOf(l));var f={source:c,generatedLine:u.generatedLine+(i.generatedOffset.generatedLine-1),generatedColumn:u.generatedColumn+(i.generatedOffset.generatedLine===u.generatedLine?i.generatedOffset.generatedColumn-1:0),originalLine:u.originalLine,originalColumn:u.originalColumn,name:l};this.__generatedMappings.push(f),"number"==typeof f.originalLine&&this.__originalMappings.push(f)}s(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),s(this.__originalMappings,r.compareByOriginalPositions)}},{364:364,365:365,367:367,369:369,373:373}],371:[function(t,e,n){var r=t(365),i=t(373),o=t(364).ArraySet,a=t(368).MappingList;function s(t){t||(t={}),this._file=i.getArg(t,"file",null),this._sourceRoot=i.getArg(t,"sourceRoot",null),this._skipValidation=i.getArg(t,"skipValidation",!1),this._sources=new o,this._names=new o,this._mappings=new a,this._sourcesContents=null}s.prototype._version=3,s.fromSourceMap=function(t){var e=t.sourceRoot,n=new s({file:t.file,sourceRoot:e});return t.eachMapping(function(t){var r={generated:{line:t.generatedLine,column:t.generatedColumn}};null!=t.source&&(r.source=t.source,null!=e&&(r.source=i.relative(e,r.source)),r.original={line:t.originalLine,column:t.originalColumn},null!=t.name&&(r.name=t.name)),n.addMapping(r)}),t.sources.forEach(function(r){var o=r;null!==e&&(o=i.relative(e,r)),n._sources.has(o)||n._sources.add(o);var a=t.sourceContentFor(r);null!=a&&n.setSourceContent(r,a)}),n},s.prototype.addMapping=function(t){var e=i.getArg(t,"generated"),n=i.getArg(t,"original",null),r=i.getArg(t,"source",null),o=i.getArg(t,"name",null);this._skipValidation||this._validateMapping(e,n,r,o),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=o&&(o=String(o),this._names.has(o)||this._names.add(o)),this._mappings.add({generatedLine:e.line,generatedColumn:e.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:o})},s.prototype.setSourceContent=function(t,e){var n=t;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=e?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[i.toSetString(n)]=e):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},s.prototype.applySourceMap=function(t,e,n){var r=e;if(null==e){if(null==t.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=t.file}var a=this._sourceRoot;null!=a&&(r=i.relative(a,r));var s=new o,u=new o;this._mappings.unsortedForEach(function(e){if(e.source===r&&null!=e.originalLine){var o=t.originalPositionFor({line:e.originalLine,column:e.originalColumn});null!=o.source&&(e.source=o.source,null!=n&&(e.source=i.join(n,e.source)),null!=a&&(e.source=i.relative(a,e.source)),e.originalLine=o.line,e.originalColumn=o.column,null!=o.name&&(e.name=o.name))}var c=e.source;null==c||s.has(c)||s.add(c);var l=e.name;null==l||u.has(l)||u.add(l)},this),this._sources=s,this._names=u,t.sources.forEach(function(e){var r=t.sourceContentFor(e);null!=r&&(null!=n&&(e=i.join(n,e)),null!=a&&(e=i.relative(a,e)),this.setSourceContent(e,r))},this)},s.prototype._validateMapping=function(t,e,n,r){if(e&&"number"!=typeof e.line&&"number"!=typeof e.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(t&&"line"in t&&"column"in t&&t.line>0&&t.column>=0)||e||n||r)&&!(t&&"line"in t&&"column"in t&&e&&"line"in e&&"column"in e&&t.line>0&&t.column>=0&&e.line>0&&e.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:t,source:n,original:e,name:r}))},s.prototype._serializeMappings=function(){for(var t,e,n,o,a=0,s=1,u=0,c=0,l=0,f=0,h="",p=this._mappings.toArray(),d=0,v=p.length;d<v;d++){if(t="",(e=p[d]).generatedLine!==s)for(a=0;e.generatedLine!==s;)t+=";",s++;else if(d>0){if(!i.compareByGeneratedPositionsInflated(e,p[d-1]))continue;t+=","}t+=r.encode(e.generatedColumn-a),a=e.generatedColumn,null!=e.source&&(o=this._sources.indexOf(e.source),t+=r.encode(o-f),f=o,t+=r.encode(e.originalLine-1-c),c=e.originalLine-1,t+=r.encode(e.originalColumn-u),u=e.originalColumn,null!=e.name&&(n=this._names.indexOf(e.name),t+=r.encode(n-l),l=n)),h+=t}return h},s.prototype._generateSourcesContent=function(t,e){return t.map(function(t){if(!this._sourcesContents)return null;null!=e&&(t=i.relative(e,t));var n=i.toSetString(t);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null},this)},s.prototype.toJSON=function(){var t={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(t.file=this._file),null!=this._sourceRoot&&(t.sourceRoot=this._sourceRoot),this._sourcesContents&&(t.sourcesContent=this._generateSourcesContent(t.sources,t.sourceRoot)),t},s.prototype.toString=function(){return JSON.stringify(this.toJSON())},n.SourceMapGenerator=s},{364:364,365:365,368:368,373:373}],372:[function(t,e,n){var r=t(371).SourceMapGenerator,i=t(373),o=/(\r?\n)/,a="$$$isSourceNode$$$";function s(t,e,n,r,i){this.children=[],this.sourceContents={},this.line=null==t?null:t,this.column=null==e?null:e,this.source=null==n?null:n,this.name=null==i?null:i,this[a]=!0,null!=r&&this.add(r)}s.fromStringWithSourceMap=function(t,e,n){var r=new s,a=t.split(o),u=0,c=function(){return t()+(t()||"");function t(){return u<a.length?a[u++]:void 0}},l=1,f=0,h=null;return e.eachMapping(function(t){if(null!==h){if(!(l<t.generatedLine)){var e=(n=a[u]||"").substr(0,t.generatedColumn-f);return a[u]=n.substr(t.generatedColumn-f),f=t.generatedColumn,p(h,e),void(h=t)}p(h,c()),l++,f=0}for(;l<t.generatedLine;)r.add(c()),l++;if(f<t.generatedColumn){var n=a[u]||"";r.add(n.substr(0,t.generatedColumn)),a[u]=n.substr(t.generatedColumn),f=t.generatedColumn}h=t},this),u<a.length&&(h&&p(h,c()),r.add(a.splice(u).join(""))),e.sources.forEach(function(t){var o=e.sourceContentFor(t);null!=o&&(null!=n&&(t=i.join(n,t)),r.setSourceContent(t,o))}),r;function p(t,e){if(null===t||void 0===t.source)r.add(e);else{var o=n?i.join(n,t.source):t.source;r.add(new s(t.originalLine,t.originalColumn,o,e,t.name))}}},s.prototype.add=function(t){if(Array.isArray(t))t.forEach(function(t){this.add(t)},this);else{if(!t[a]&&"string"!=typeof t)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+t);t&&this.children.push(t)}return this},s.prototype.prepend=function(t){if(Array.isArray(t))for(var e=t.length-1;e>=0;e--)this.prepend(t[e]);else{if(!t[a]&&"string"!=typeof t)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+t);this.children.unshift(t)}return this},s.prototype.walk=function(t){for(var e,n=0,r=this.children.length;n<r;n++)(e=this.children[n])[a]?e.walk(t):""!==e&&t(e,{source:this.source,line:this.line,column:this.column,name:this.name})},s.prototype.join=function(t){var e,n,r=this.children.length;if(r>0){for(e=[],n=0;n<r-1;n++)e.push(this.children[n]),e.push(t);e.push(this.children[n]),this.children=e}return this},s.prototype.replaceRight=function(t,e){var n=this.children[this.children.length-1];return n[a]?n.replaceRight(t,e):"string"==typeof n?this.children[this.children.length-1]=n.replace(t,e):this.children.push("".replace(t,e)),this},s.prototype.setSourceContent=function(t,e){this.sourceContents[i.toSetString(t)]=e},s.prototype.walkSourceContents=function(t){for(var e=0,n=this.children.length;e<n;e++)this.children[e][a]&&this.children[e].walkSourceContents(t);var r=Object.keys(this.sourceContents);for(e=0,n=r.length;e<n;e++)t(i.fromSetString(r[e]),this.sourceContents[r[e]])},s.prototype.toString=function(){var t="";return this.walk(function(e){t+=e}),t},s.prototype.toStringWithSourceMap=function(t){var e={code:"",line:1,column:0},n=new r(t),i=!1,o=null,a=null,s=null,u=null;return this.walk(function(t,r){e.code+=t,null!==r.source&&null!==r.line&&null!==r.column?(o===r.source&&a===r.line&&s===r.column&&u===r.name||n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:e.line,column:e.column},name:r.name}),o=r.source,a=r.line,s=r.column,u=r.name,i=!0):i&&(n.addMapping({generated:{line:e.line,column:e.column}}),o=null,i=!1);for(var c=0,l=t.length;c<l;c++)10===t.charCodeAt(c)?(e.line++,e.column=0,c+1===l?(o=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:e.line,column:e.column},name:r.name})):e.column++}),this.walkSourceContents(function(t,e){n.setSourceContent(t,e)}),{code:e.code,map:n}},n.SourceNode=s},{371:371,373:373}],375:[function(t,e,n){(function(t){(function(){var r,i=200,o="Expected a function",a="__lodash_placeholder__",s=1,u=2,c=4,l=1,f=2,h=1,p=2,d=4,v=8,g=16,_=32,y=64,m=128,b=256,w=512,S=800,x=16,k=1/0,E=9007199254740991,C=1.7976931348623157e308,P=NaN,O=4294967295,A=O-1,j=O>>>1,L=[["ary",m],["bind",h],["bindKey",p],["curry",v],["curryRight",g],["flip",w],["partial",_],["partialRight",y],["rearg",b]],F="[object Arguments]",R="[object Array]",T="[object AsyncFunction]",I="[object Boolean]",M="[object Date]",N="[object DOMException]",D="[object Error]",B="[object Function]",U="[object GeneratorFunction]",H="[object Map]",$="[object Number]",V="[object Null]",q="[object Object]",W="[object Proxy]",z="[object RegExp]",G="[object Set]",K="[object String]",Q="[object Symbol]",J="[object Undefined]",X="[object WeakMap]",Y="[object ArrayBuffer]",Z="[object DataView]",tt="[object Float32Array]",et="[object Float64Array]",nt="[object Int8Array]",rt="[object Int16Array]",it="[object Int32Array]",ot="[object Uint8Array]",at="[object Uint8ClampedArray]",st="[object Uint16Array]",ut="[object Uint32Array]",ct=/\b__p \+= '';/g,lt=/\b(__p \+=) '' \+/g,ft=/(__e\(.*?\)|\b__t\)) \+\n'';/g,ht=/&(?:amp|lt|gt|quot|#39);/g,pt=/[&<>"']/g,dt=RegExp(ht.source),vt=RegExp(pt.source),gt=/<%-([\s\S]+?)%>/g,_t=/<%([\s\S]+?)%>/g,yt=/<%=([\s\S]+?)%>/g,mt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,bt=/^\w*$/,wt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,St=/[\\^$.*+?()[\]{}|]/g,xt=RegExp(St.source),kt=/^\s+|\s+$/g,Et=/^\s+/,Ct=/\s+$/,Pt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ot=/\{\n\/\* \[wrapped with (.+)\] \*/,At=/,? & /,jt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Lt=/\\(\\)?/g,Ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Rt=/\w*$/,Tt=/^[-+]0x[0-9a-f]+$/i,It=/^0b[01]+$/i,Mt=/^\[object .+?Constructor\]$/,Nt=/^0o[0-7]+$/i,Dt=/^(?:0|[1-9]\d*)$/,Bt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ut=/($^)/,Ht=/['\n\r\u2028\u2029\\]/g,$t="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Vt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",qt="["+Vt+"]",Wt="["+$t+"]",zt="\\d+",Gt="[a-z\\xdf-\\xf6\\xf8-\\xff]",Kt="[^\\ud800-\\udfff"+Vt+zt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Qt="\\ud83c[\\udffb-\\udfff]",Jt="[^\\ud800-\\udfff]",Xt="(?:\\ud83c[\\udde6-\\uddff]){2}",Yt="[\\ud800-\\udbff][\\udc00-\\udfff]",Zt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",te="(?:"+Gt+"|"+Kt+")",ee="(?:"+Zt+"|"+Kt+")",ne="(?:"+Wt+"|"+Qt+")?",re="[\\ufe0e\\ufe0f]?"+ne+"(?:\\u200d(?:"+[Jt,Xt,Yt].join("|")+")[\\ufe0e\\ufe0f]?"+ne+")*",ie="(?:"+["[\\u2700-\\u27bf]",Xt,Yt].join("|")+")"+re,oe="(?:"+[Jt+Wt+"?",Wt,Xt,Yt,"[\\ud800-\\udfff]"].join("|")+")",ae=RegExp("['\u2019]","g"),se=RegExp(Wt,"g"),ue=RegExp(Qt+"(?="+Qt+")|"+oe+re,"g"),ce=RegExp([Zt+"?"+Gt+"+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?="+[qt,Zt,"$"].join("|")+")",ee+"+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?="+[qt,Zt+te,"$"].join("|")+")",Zt+"?"+te+"+(?:['\u2019](?:d|ll|m|re|s|t|ve))?",Zt+"+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",zt,ie].join("|"),"g"),le=RegExp("[\\u200d\\ud800-\\udfff"+$t+"\\ufe0e\\ufe0f]"),fe=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,he=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],pe=-1,de={};de[tt]=de[et]=de[nt]=de[rt]=de[it]=de[ot]=de[at]=de[st]=de[ut]=!0,de[F]=de[R]=de[Y]=de[I]=de[Z]=de[M]=de[D]=de[B]=de[H]=de[$]=de[q]=de[z]=de[G]=de[K]=de[X]=!1;var ve={};ve[F]=ve[R]=ve[Y]=ve[Z]=ve[I]=ve[M]=ve[tt]=ve[et]=ve[nt]=ve[rt]=ve[it]=ve[H]=ve[$]=ve[q]=ve[z]=ve[G]=ve[K]=ve[Q]=ve[ot]=ve[at]=ve[st]=ve[ut]=!0,ve[D]=ve[B]=ve[X]=!1;var ge={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},_e=parseFloat,ye=parseInt,me="object"==typeof t&&t&&t.Object===Object&&t,be="object"==typeof self&&self&&self.Object===Object&&self,we=me||be||Function("return this")(),Se="object"==typeof n&&n&&!n.nodeType&&n,xe=Se&&"object"==typeof e&&e&&!e.nodeType&&e,ke=xe&&xe.exports===Se,Ee=ke&&me.process,Ce=function(){try{return xe&&xe.require&&xe.require("util").types||Ee&&Ee.binding&&Ee.binding("util")}catch(r){}}(),Pe=Ce&&Ce.isArrayBuffer,Oe=Ce&&Ce.isDate,Ae=Ce&&Ce.isMap,je=Ce&&Ce.isRegExp,Le=Ce&&Ce.isSet,Fe=Ce&&Ce.isTypedArray;function Re(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Te(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function Ie(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Me(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ne(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function De(t,e){return!(null==t||!t.length)&&Ke(t,e,0)>-1}function Be(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ue(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function He(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function $e(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Ve(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function qe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var We=Ye("length");function ze(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function Ge(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Ke(t,e,n){return e==e?function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):Ge(t,Je,n)}function Qe(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function Je(t){return t!=t}function Xe(t,e){var n=null==t?0:t.length;return n?en(t,e)/n:P}function Ye(t){return function(e){return null==e?r:e[t]}}function Ze(t){return function(e){return null==t?r:t[e]}}function tn(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}function en(t,e){for(var n,i=-1,o=t.length;++i<o;){var a=e(t[i]);a!==r&&(n=n===r?a:n+a)}return n}function nn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function rn(t){return function(e){return t(e)}}function on(t,e){return Ue(e,function(e){return t[e]})}function an(t,e){return t.has(e)}function sn(t,e){for(var n=-1,r=t.length;++n<r&&Ke(e,t[n],0)>-1;);return n}function un(t,e){for(var n=t.length;n--&&Ke(e,t[n],0)>-1;);return n}var cn=Ze({"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss","\u0100":"A","\u0102":"A","\u0104":"A","\u0101":"a","\u0103":"a","\u0105":"a","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C","\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\u010e":"D","\u0110":"D","\u010f":"d","\u0111":"d","\u0112":"E","\u0114":"E","\u0116":"E","\u0118":"E","\u011a":"E","\u0113":"e","\u0115":"e","\u0117":"e","\u0119":"e","\u011b":"e","\u011c":"G","\u011e":"G","\u0120":"G","\u0122":"G","\u011d":"g","\u011f":"g","\u0121":"g","\u0123":"g","\u0124":"H","\u0126":"H","\u0125":"h","\u0127":"h","\u0128":"I","\u012a":"I","\u012c":"I","\u012e":"I","\u0130":"I","\u0129":"i","\u012b":"i","\u012d":"i","\u012f":"i","\u0131":"i","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u0138":"k","\u0139":"L","\u013b":"L","\u013d":"L","\u013f":"L","\u0141":"L","\u013a":"l","\u013c":"l","\u013e":"l","\u0140":"l","\u0142":"l","\u0143":"N","\u0145":"N","\u0147":"N","\u014a":"N","\u0144":"n","\u0146":"n","\u0148":"n","\u014b":"n","\u014c":"O","\u014e":"O","\u0150":"O","\u014d":"o","\u014f":"o","\u0151":"o","\u0154":"R","\u0156":"R","\u0158":"R","\u0155":"r","\u0157":"r","\u0159":"r","\u015a":"S","\u015c":"S","\u015e":"S","\u0160":"S","\u015b":"s","\u015d":"s","\u015f":"s","\u0161":"s","\u0162":"T","\u0164":"T","\u0166":"T","\u0163":"t","\u0165":"t","\u0167":"t","\u0168":"U","\u016a":"U","\u016c":"U","\u016e":"U","\u0170":"U","\u0172":"U","\u0169":"u","\u016b":"u","\u016d":"u","\u016f":"u","\u0171":"u","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017b":"Z","\u017d":"Z","\u017a":"z","\u017c":"z","\u017e":"z","\u0132":"IJ","\u0133":"ij","\u0152":"Oe","\u0153":"oe","\u0149":"'n","\u017f":"s"}),ln=Ze({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function fn(t){return"\\"+ge[t]}function hn(t){return le.test(t)}function pn(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function dn(t,e){return function(n){return t(e(n))}}function vn(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n];s!==e&&s!==a||(t[n]=a,o[i++]=n)}return o}function gn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function _n(t){return hn(t)?function(t){for(var e=ue.lastIndex=0;ue.test(t);)++e;return e}(t):We(t)}function yn(t){return hn(t)?function(t){return t.match(ue)||[]}(t):function(t){return t.split("")}(t)}var mn=Ze({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),bn=function t(e){var n,$t=(e=null==e?we:bn.defaults(we.Object(),e,bn.pick(we,he))).Array,Vt=e.Date,qt=e.Error,Wt=e.Function,zt=e.Math,Gt=e.Object,Kt=e.RegExp,Qt=e.String,Jt=e.TypeError,Xt=$t.prototype,Yt=Wt.prototype,Zt=Gt.prototype,te=e["__core-js_shared__"],ee=Yt.toString,ne=Zt.hasOwnProperty,re=0,ie=(n=/[^.]+$/.exec(te&&te.keys&&te.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",oe=Zt.toString,ue=ee.call(Gt),le=we._,ge=Kt("^"+ee.call(ne).replace(St,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),me=ke?e.Buffer:r,be=e.Symbol,Se=e.Uint8Array,xe=me?me.allocUnsafe:r,Ee=dn(Gt.getPrototypeOf,Gt),Ce=Gt.create,We=Zt.propertyIsEnumerable,Ze=Xt.splice,wn=be?be.isConcatSpreadable:r,Sn=be?be.iterator:r,xn=be?be.toStringTag:r,kn=function(){try{var t=xo(Gt,"defineProperty");return t({},"",{}),t}catch(t){}}(),En=e.clearTimeout!==we.clearTimeout&&e.clearTimeout,Cn=Vt&&Vt.now!==we.Date.now&&Vt.now,Pn=e.setTimeout!==we.setTimeout&&e.setTimeout,On=zt.ceil,An=zt.floor,jn=Gt.getOwnPropertySymbols,Ln=me?me.isBuffer:r,Fn=e.isFinite,Rn=Xt.join,Tn=dn(Gt.keys,Gt),In=zt.max,Mn=zt.min,Nn=Vt.now,Dn=e.parseInt,Bn=zt.random,Un=Xt.reverse,Hn=xo(e,"DataView"),$n=xo(e,"Map"),Vn=xo(e,"Promise"),qn=xo(e,"Set"),Wn=xo(e,"WeakMap"),zn=xo(Gt,"create"),Gn=Wn&&new Wn,Kn={},Qn=Xo(Hn),Jn=Xo($n),Xn=Xo(Vn),Yn=Xo(qn),Zn=Xo(Wn),tr=be?be.prototype:r,er=tr?tr.valueOf:r,nr=tr?tr.toString:r;function rr(t){if(ds(t)&&!rs(t)&&!(t instanceof sr)){if(t instanceof ar)return t;if(ne.call(t,"__wrapped__"))return Yo(t)}return new ar(t)}var ir=function(){function t(){}return function(e){if(!ps(e))return{};if(Ce)return Ce(e);t.prototype=e;var n=new t;return t.prototype=r,n}}();function or(){}function ar(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=r}function sr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=O,this.__views__=[]}function ur(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function cr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function lr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function fr(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new lr;++e<n;)this.add(t[e])}function hr(t){var e=this.__data__=new cr(t);this.size=e.size}function pr(t,e){var n=rs(t),r=!n&&ns(t),i=!n&&!r&&ss(t),o=!n&&!r&&!i&&Ss(t),a=n||r||i||o,s=a?nn(t.length,Qt):[],u=s.length;for(var c in t)!e&&!ne.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||jo(c,u))||s.push(c);return s}function dr(t){var e=t.length;return e?t[ui(0,e-1)]:r}function vr(t,e,n){(n===r||Za(t[e],n))&&(n!==r||e in t)||br(t,e,n)}function gr(t,e,n){var i=t[e];ne.call(t,e)&&Za(i,n)&&(n!==r||e in t)||br(t,e,n)}function _r(t,e){for(var n=t.length;n--;)if(Za(t[n][0],e))return n;return-1}function yr(t,e,n,r){return Pr(t,function(t,i,o){e(r,t,n(t),o)}),r}function mr(t,e){return t&&Hi(e,qs(e),t)}function br(t,e,n){"__proto__"==e&&kn?kn(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function wr(t,e){for(var n=-1,i=e.length,o=$t(i),a=null==t;++n<i;)o[n]=a?r:Bs(t,e[n]);return o}function Sr(t,e,n){return t==t&&(n!==r&&(t=t<=n?t:n),e!==r&&(t=t>=e?t:e)),t}function xr(t,e,n,i,o,a){var l,f=e&s,h=e&u,p=e&c;if(n&&(l=o?n(t,i,o,a):n(t)),l!==r)return l;if(!ps(t))return t;var d=rs(t);if(d){if(l=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&ne.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!f)return Ui(t,l)}else{var v=Co(t),g=v==B||v==U;if(ss(t))return Ti(t,f);if(v==q||v==F||g&&!o){if(l=h||g?{}:Oo(t),!f)return h?function(t,e){return Hi(t,Eo(t),e)}(t,function(e,n){return e&&Hi(t,Ws(t),e)}(l)):function(t,e){return Hi(t,ko(t),e)}(t,mr(l,t))}else{if(!ve[v])return o?t:{};l=function(t,e,n){var r,i,o,a=t.constructor;switch(e){case Y:return Ii(t);case I:case M:return new a(+t);case Z:return function(t,e){var n=e?Ii(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case tt:case et:case nt:case rt:case it:case ot:case at:case st:case ut:return Mi(t,n);case H:return new a;case $:case K:return new a(t);case z:return(o=new(i=t).constructor(i.source,Rt.exec(i))).lastIndex=i.lastIndex,o;case G:return new a;case Q:return r=t,er?Gt(er.call(r)):{}}}(t,v,f)}}a||(a=new hr);var _=a.get(t);if(_)return _;a.set(t,l),ms(t)?t.forEach(function(r){l.add(xr(r,e,n,r,t,a))}):vs(t)&&t.forEach(function(r,i){l.set(i,xr(r,e,n,i,t,a))});var y=d?r:(p?h?go:vo:h?Ws:qs)(t);return Ie(y||t,function(r,i){y&&(r=t[i=r]),gr(l,i,xr(r,e,n,i,t,a))}),l}function kr(t,e,n){var i=n.length;if(null==t)return!i;for(t=Gt(t);i--;){var o=n[i],a=e[o],s=t[o];if(s===r&&!(o in t)||!a(s))return!1}return!0}function Er(t,e,n){if("function"!=typeof t)throw new Jt(o);return $o(function(){t.apply(r,n)},e)}function Cr(t,e,n,r){var o=-1,a=De,s=!0,u=t.length,c=[],l=e.length;if(!u)return c;n&&(e=Ue(e,rn(n))),r?(a=Be,s=!1):e.length>=i&&(a=an,s=!1,e=new fr(e));t:for(;++o<u;){var f=t[o],h=null==n?f:n(f);if(f=r||0!==f?f:0,s&&h==h){for(var p=l;p--;)if(e[p]===h)continue t;c.push(f)}else a(e,h,r)||c.push(f)}return c}rr.templateSettings={escape:gt,evaluate:_t,interpolate:yt,variable:"",imports:{_:rr}},rr.prototype=or.prototype,rr.prototype.constructor=rr,ar.prototype=ir(or.prototype),ar.prototype.constructor=ar,sr.prototype=ir(or.prototype),sr.prototype.constructor=sr,ur.prototype.clear=function(){this.__data__=zn?zn(null):{},this.size=0},ur.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},ur.prototype.get=function(t){var e=this.__data__;if(zn){var n=e[t];return"__lodash_hash_undefined__"===n?r:n}return ne.call(e,t)?e[t]:r},ur.prototype.has=function(t){var e=this.__data__;return zn?e[t]!==r:ne.call(e,t)},ur.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=zn&&e===r?"__lodash_hash_undefined__":e,this},cr.prototype.clear=function(){this.__data__=[],this.size=0},cr.prototype.delete=function(t){var e=this.__data__,n=_r(e,t);return!(n<0||(n==e.length-1?e.pop():Ze.call(e,n,1),--this.size,0))},cr.prototype.get=function(t){var e=this.__data__,n=_r(e,t);return n<0?r:e[n][1]},cr.prototype.has=function(t){return _r(this.__data__,t)>-1},cr.prototype.set=function(t,e){var n=this.__data__,r=_r(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},lr.prototype.clear=function(){this.size=0,this.__data__={hash:new ur,map:new($n||cr),string:new ur}},lr.prototype.delete=function(t){var e=wo(this,t).delete(t);return this.size-=e?1:0,e},lr.prototype.get=function(t){return wo(this,t).get(t)},lr.prototype.has=function(t){return wo(this,t).has(t)},lr.prototype.set=function(t,e){var n=wo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},fr.prototype.add=fr.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},fr.prototype.has=function(t){return this.__data__.has(t)},hr.prototype.clear=function(){this.__data__=new cr,this.size=0},hr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},hr.prototype.get=function(t){return this.__data__.get(t)},hr.prototype.has=function(t){return this.__data__.has(t)},hr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof cr){var r=n.__data__;if(!$n||r.length<i-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new lr(r)}return n.set(t,e),this.size=n.size,this};var Pr=qi(Ir),Or=qi(Mr,!0);function Ar(t,e){var n=!0;return Pr(t,function(t,r,i){return n=!!e(t,r,i)}),n}function jr(t,e,n){for(var i=-1,o=t.length;++i<o;){var a=t[i],s=e(a);if(null!=s&&(u===r?s==s&&!ws(s):n(s,u)))var u=s,c=a}return c}function Lr(t,e){var n=[];return Pr(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function Fr(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=Ao),i||(i=[]);++o<a;){var s=t[o];e>0&&n(s)?e>1?Fr(s,e-1,n,r,i):He(i,s):r||(i[i.length]=s)}return i}var Rr=Wi(),Tr=Wi(!0);function Ir(t,e){return t&&Rr(t,e,qs)}function Mr(t,e){return t&&Tr(t,e,qs)}function Nr(t,e){return Ne(e,function(e){return ls(t[e])})}function Dr(t,e){for(var n=0,i=(e=ji(e,t)).length;null!=t&&n<i;)t=t[Jo(e[n++])];return n&&n==i?t:r}function Br(t,e,n){var r=e(t);return rs(t)?r:He(r,n(t))}function Ur(t){return null==t?t===r?J:V:xn&&xn in Gt(t)?function(t){var e=ne.call(t,xn),n=t[xn];try{t[xn]=r;var i=!0}catch(r){}var o=oe.call(t);return i&&(e?t[xn]=n:delete t[xn]),o}(t):function(t){return oe.call(t)}(t)}function Hr(t,e){return t>e}function $r(t,e){return null!=t&&ne.call(t,e)}function Vr(t,e){return null!=t&&e in Gt(t)}function qr(t,e,n){for(var i=n?Be:De,o=t[0].length,a=t.length,s=a,u=$t(a),c=1/0,l=[];s--;){var f=t[s];s&&e&&(f=Ue(f,rn(e))),c=Mn(f.length,c),u[s]=!n&&(e||o>=120&&f.length>=120)?new fr(s&&f):r}f=t[0];var h=-1,p=u[0];t:for(;++h<o&&l.length<c;){var d=f[h],v=e?e(d):d;if(d=n||0!==d?d:0,!(p?an(p,v):i(l,v,n))){for(s=a;--s;){var g=u[s];if(!(g?an(g,v):i(t[s],v,n)))continue t}p&&p.push(v),l.push(d)}}return l}function Wr(t,e,n){var i=null==(t=Bo(t,e=ji(e,t)))?t:t[Jo(ca(e))];return null==i?r:Re(i,t,n)}function zr(t){return ds(t)&&Ur(t)==F}function Gr(t,e,n,i,o){return t===e||(null==t||null==e||!ds(t)&&!ds(e)?t!=t&&e!=e:function(t,e,n,i,o,a){var s=rs(t),u=rs(e),c=s?R:Co(t),h=u?R:Co(e),p=(c=c==F?q:c)==q,d=(h=h==F?q:h)==q,v=c==h;if(v&&ss(t)){if(!ss(e))return!1;s=!0,p=!1}if(v&&!p)return a||(a=new hr),s||Ss(t)?ho(t,e,n,i,o,a):function(t,e,n,r,i,o,a){switch(c){case Z:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case Y:return!(t.byteLength!=e.byteLength||!o(new Se(t),new Se(e)));case I:case M:case $:return Za(+t,+e);case D:return t.name==e.name&&t.message==e.message;case z:case K:return t==e+"";case H:var s=pn;case G:var u=r&l;if(s||(s=gn),t.size!=e.size&&!u)return!1;var h=a.get(t);if(h)return h==e;r|=f,a.set(t,e);var p=ho(s(t),s(e),r,i,o,a);return a.delete(t),p;case Q:if(er)return er.call(t)==er.call(e)}return!1}(t,e,0,n,i,o,a);if(!(n&l)){var g=p&&ne.call(t,"__wrapped__"),_=d&&ne.call(e,"__wrapped__");if(g||_){var y=g?t.value():t,m=_?e.value():e;return a||(a=new hr),o(y,m,n,i,a)}}return!!v&&(a||(a=new hr),function(t,e,n,i,o,a){var s=n&l,u=vo(t),c=u.length;if(c!=vo(e).length&&!s)return!1;for(var f=c;f--;){var h=u[f];if(!(s?h in e:ne.call(e,h)))return!1}var p=a.get(t);if(p&&a.get(e))return p==e;var d=!0;a.set(t,e),a.set(e,t);for(var v=s;++f<c;){var g=t[h=u[f]],_=e[h];if(i)var y=s?i(_,g,h,e,t,a):i(g,_,h,t,e,a);if(!(y===r?g===_||o(g,_,n,i,a):y)){d=!1;break}v||(v="constructor"==h)}if(d&&!v){var m=t.constructor,b=e.constructor;m!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b)&&(d=!1)}return a.delete(t),a.delete(e),d}(t,e,n,i,o,a))}(t,e,n,i,Gr,o))}function Kr(t,e,n,i){var o=n.length,a=o,s=!i;if(null==t)return!a;for(t=Gt(t);o--;){var u=n[o];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<a;){var c=(u=n[o])[0],h=t[c],p=u[1];if(s&&u[2]){if(h===r&&!(c in t))return!1}else{var d=new hr;if(i)var v=i(h,p,c,t,e,d);if(!(v===r?Gr(p,h,l|f,i,d):v))return!1}}return!0}function Qr(t){return!(!ps(t)||(e=t,ie&&ie in e))&&(ls(t)?ge:Mt).test(Xo(t));var e}function Jr(t){return"function"==typeof t?t:null==t?gu:"object"==typeof t?rs(t)?ei(t[0],t[1]):ti(t):Eu(t)}function Xr(t){if(!Io(t))return Tn(t);var e=[];for(var n in Gt(t))ne.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Yr(t,e){return t<e}function Zr(t,e){var n=-1,r=os(t)?$t(t.length):[];return Pr(t,function(t,i,o){r[++n]=e(t,i,o)}),r}function ti(t){var e=So(t);return 1==e.length&&e[0][2]?No(e[0][0],e[0][1]):function(n){return n===t||Kr(n,t,e)}}function ei(t,e){return Fo(t)&&Mo(e)?No(Jo(t),e):function(n){var i=Bs(n,t);return i===r&&i===e?Us(n,t):Gr(e,i,l|f)}}function ni(t,e,n,i,o){t!==e&&Rr(e,function(a,s){if(o||(o=new hr),ps(a))!function(t,e,n,i,o,a,s){var u=Uo(t,n),c=Uo(e,n),l=s.get(c);if(l)vr(t,n,l);else{var f=a?a(u,c,n+"",t,e,s):r,h=f===r;if(h){var p=rs(c),d=!p&&ss(c),v=!p&&!d&&Ss(c);f=c,p||d||v?rs(u)?f=u:as(u)?f=Ui(u):d?(h=!1,f=Ti(c,!0)):v?(h=!1,f=Mi(c,!0)):f=[]:_s(c)||ns(c)?(f=u,ns(u)?f=js(u):ps(u)&&!ls(u)||(f=Oo(c))):h=!1}h&&(s.set(c,f),o(f,c,i,a,s),s.delete(c)),vr(t,n,f)}}(t,e,s,n,ni,i,o);else{var u=i?i(Uo(t,s),a,s+"",t,e,o):r;u===r&&(u=a),vr(t,s,u)}},Ws)}function ri(t,e){var n=t.length;if(n)return jo(e+=e<0?n:0,n)?t[e]:r}function ii(t,e,n){var r=-1;return e=Ue(e.length?e:[gu],rn(bo())),function(t,e){var r=t.length;for(t.sort(function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,s=n.length;++r<a;){var u=Ni(i[r],o[r]);if(u)return r>=s?u:u*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)});r--;)t[r]=t[r].value;return t}(Zr(t,function(t,n,i){return{criteria:Ue(e,function(e){return e(t)}),index:++r,value:t}}))}function oi(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],s=Dr(t,a);n(s,a)&&fi(o,ji(a,t),s)}return o}function ai(t,e,n,r){var i=r?Qe:Ke,o=-1,a=e.length,s=t;for(t===e&&(e=Ui(e)),n&&(s=Ue(t,rn(n)));++o<a;)for(var u=0,c=e[o],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==t&&Ze.call(s,u,1),Ze.call(t,u,1);return t}function si(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;jo(i)?Ze.call(t,i,1):Si(t,i)}}return t}function ui(t,e){return t+An(Bn()*(e-t+1))}function ci(t,e){var n="";if(!t||e<1||e>E)return n;do{e%2&&(n+=t),(e=An(e/2))&&(t+=t)}while(e);return n}function li(t,e){return Vo(Do(t,e,gu),t+"")}function fi(t,e,n,i){if(!ps(t))return t;for(var o=-1,a=(e=ji(e,t)).length,s=a-1,u=t;null!=u&&++o<a;){var c=Jo(e[o]),l=n;if(o!=s){var f=u[c];(l=i?i(f,c,u):r)===r&&(l=ps(f)?f:jo(e[o+1])?[]:{})}gr(u,c,l),u=u[c]}return t}var hi=Gn?function(t,e){return Gn.set(t,e),t}:gu,pi=kn?function(t,e){return kn(t,"toString",{configurable:!0,enumerable:!1,value:pu(e),writable:!0})}:gu;function di(t,e,n){var r=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var o=$t(i);++r<i;)o[r]=t[r+e];return o}function vi(t,e){var n;return Pr(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function gi(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=j){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!ws(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return _i(t,e,gu,n)}function _i(t,e,n,i){e=n(e);for(var o=0,a=null==t?0:t.length,s=e!=e,u=null===e,c=ws(e),l=e===r;o<a;){var f=An((o+a)/2),h=n(t[f]),p=h!==r,d=null===h,v=h==h,g=ws(h);if(s)var _=i||v;else _=l?v&&(i||p):u?v&&p&&(i||!d):c?v&&p&&!d&&(i||!g):!d&&!g&&(i?h<=e:h<e);_?o=f+1:a=f}return Mn(a,A)}function yi(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],s=e?e(a):a;if(!n||!Za(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function mi(t){return"number"==typeof t?t:ws(t)?P:+t}function bi(t){if("string"==typeof t)return t;if(rs(t))return Ue(t,bi)+"";if(ws(t))return nr?nr.call(t):"";var e=t+"";return"0"==e&&1/t==-k?"-0":e}function wi(t,e,n){var r=-1,o=De,a=t.length,s=!0,u=[],c=u;if(n)s=!1,o=Be;else if(a>=i){var l=e?null:ao(t);if(l)return gn(l);s=!1,o=an,c=new fr}else c=e?[]:u;t:for(;++r<a;){var f=t[r],h=e?e(f):f;if(f=n||0!==f?f:0,s&&h==h){for(var p=c.length;p--;)if(c[p]===h)continue t;e&&c.push(h),u.push(f)}else o(c,h,n)||(c!==u&&c.push(h),u.push(f))}return u}function Si(t,e){return null==(t=Bo(t,e=ji(e,t)))||delete t[Jo(ca(e))]}function xi(t,e,n,r){return fi(t,e,n(Dr(t,e)),r)}function ki(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?di(t,r?0:o,r?o+1:i):di(t,r?o+1:0,r?i:o)}function Ei(t,e){var n=t;return n instanceof sr&&(n=n.value()),$e(e,function(t,e){return e.func.apply(e.thisArg,He([t],e.args))},n)}function Ci(t,e,n){var r=t.length;if(r<2)return r?wi(t[0]):[];for(var i=-1,o=$t(r);++i<r;)for(var a=t[i],s=-1;++s<r;)s!=i&&(o[i]=Cr(o[i]||a,t[s],e,n));return wi(Fr(o,1),e,n)}function Pi(t,e,n){for(var i=-1,o=t.length,a=e.length,s={};++i<o;){var u=i<a?e[i]:r;n(s,t[i],u)}return s}function Oi(t){return as(t)?t:[]}function Ai(t){return"function"==typeof t?t:gu}function ji(t,e){return rs(t)?t:Fo(t,e)?[t]:Qo(Ls(t))}var Li=li;function Fi(t,e,n){var i=t.length;return n=n===r?i:n,!e&&n>=i?t:di(t,e,n)}var Ri=En||function(t){return we.clearTimeout(t)};function Ti(t,e){if(e)return t.slice();var n=t.length,r=xe?xe(n):new t.constructor(n);return t.copy(r),r}function Ii(t){var e=new t.constructor(t.byteLength);return new Se(e).set(new Se(t)),e}function Mi(t,e){var n=e?Ii(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Ni(t,e){if(t!==e){var n=t!==r,i=null===t,o=t==t,a=ws(t),s=e!==r,u=null===e,c=e==e,l=ws(e);if(!u&&!l&&!a&&t>e||a&&s&&c&&!u&&!l||i&&s&&c||!n&&c||!o)return 1;if(!i&&!a&&!l&&t<e||l&&n&&o&&!i&&!a||u&&n&&o||!s&&o||!c)return-1}return 0}function Di(t,e,n,r){for(var i=-1,o=t.length,a=n.length,s=-1,u=e.length,c=In(o-a,0),l=$t(u+c),f=!r;++s<u;)l[s]=e[s];for(;++i<a;)(f||i<o)&&(l[n[i]]=t[i]);for(;c--;)l[s++]=t[i++];return l}function Bi(t,e,n,r){for(var i=-1,o=t.length,a=-1,s=n.length,u=-1,c=e.length,l=In(o-s,0),f=$t(l+c),h=!r;++i<l;)f[i]=t[i];for(var p=i;++u<c;)f[p+u]=e[u];for(;++a<s;)(h||i<o)&&(f[p+n[a]]=t[i++]);return f}function Ui(t,e){var n=-1,r=t.length;for(e||(e=$t(r));++n<r;)e[n]=t[n];return e}function Hi(t,e,n,i){var o=!n;n||(n={});for(var a=-1,s=e.length;++a<s;){var u=e[a],c=i?i(n[u],t[u],u,n,t):r;c===r&&(c=t[u]),o?br(n,u,c):gr(n,u,c)}return n}function $i(t,e){return function(n,r){var i=rs(n)?Te:yr,o=e?e():{};return i(n,t,bo(r,2),o)}}function Vi(t){return li(function(e,n){var i=-1,o=n.length,a=o>1?n[o-1]:r,s=o>2?n[2]:r;for(a=t.length>3&&"function"==typeof a?(o--,a):r,s&&Lo(n[0],n[1],s)&&(a=o<3?r:a,o=1),e=Gt(e);++i<o;){var u=n[i];u&&t(e,u,i,a)}return e})}function qi(t,e){return function(n,r){if(null==n)return n;if(!os(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=Gt(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Wi(t){return function(e,n,r){for(var i=-1,o=Gt(e),a=r(e),s=a.length;s--;){var u=a[t?s:++i];if(!1===n(o[u],u,o))break}return e}}function zi(t){return function(e){var n=hn(e=Ls(e))?yn(e):r,i=n?n[0]:e.charAt(0),o=n?Fi(n,1).join(""):e.slice(1);return i[t]()+o}}function Gi(t){return function(e){return $e(lu(nu(e).replace(ae,"")),t,"")}}function Ki(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=ir(t.prototype),r=t.apply(n,e);return ps(r)?r:n}}function Qi(t){return function(e,n,i){var o=Gt(e);if(!os(e)){var a=bo(n,3);e=qs(e),n=function(t){return a(o[t],t,o)}}var s=t(e,n,i);return s>-1?o[a?e[s]:s]:r}}function Ji(t){return po(function(e){var n=e.length,i=n,a=ar.prototype.thru;for(t&&e.reverse();i--;){var s=e[i];if("function"!=typeof s)throw new Jt(o);if(a&&!u&&"wrapper"==yo(s))var u=new ar([],!0)}for(i=u?i:n;++i<n;){var c=yo(s=e[i]),l="wrapper"==c?_o(s):r;u=l&&Ro(l[0])&&l[1]==(m|v|_|b)&&!l[4].length&&1==l[9]?u[yo(l[0])].apply(u,l[3]):1==s.length&&Ro(s)?u[c]():u.thru(s)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&rs(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}function Xi(t,e,n,i,o,a,s,u,c,l){var f=e&m,d=e&h,_=e&p,y=e&(v|g),b=e&w,S=_?r:Ki(t);return function h(){for(var p=arguments.length,v=$t(p),g=p;g--;)v[g]=arguments[g];if(y)var m=mo(h),w=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(v,m);if(i&&(v=Di(v,i,o,y)),a&&(v=Bi(v,a,s,y)),p-=w,y&&p<l){var x=vn(v,m);return io(t,e,Xi,h.placeholder,n,v,x,u,c,l-p)}var k=d?n:this,E=_?k[t]:t;return p=v.length,u?v=function(t,e){for(var n=t.length,i=Mn(e.length,n),o=Ui(t);i--;){var a=e[i];t[i]=jo(a,n)?o[a]:r}return t}(v,u):b&&p>1&&v.reverse(),f&&c<p&&(v.length=c),this&&this!==we&&this instanceof h&&(E=S||Ki(E)),E.apply(k,v)}}function Yi(t,e){return function(n,r){return function(t,e,n,r){return Ir(t,function(t,i,o){e(r,n(t),i,o)}),r}(n,t,e(r),{})}}function Zi(t,e){return function(n,i){var o;if(n===r&&i===r)return e;if(n!==r&&(o=n),i!==r){if(o===r)return i;"string"==typeof n||"string"==typeof i?(n=bi(n),i=bi(i)):(n=mi(n),i=mi(i)),o=t(n,i)}return o}}function to(t){return po(function(e){return e=Ue(e,rn(bo())),li(function(n){var r=this;return t(e,function(t){return Re(t,r,n)})})})}function eo(t,e){var n=(e=e===r?" ":bi(e)).length;if(n<2)return n?ci(e,t):e;var i=ci(e,On(t/_n(e)));return hn(e)?Fi(yn(i),0,t).join(""):i.slice(0,t)}function no(t){return function(e,n,i){return i&&"number"!=typeof i&&Lo(e,n,i)&&(n=i=r),e=Cs(e),n===r?(n=e,e=0):n=Cs(n),function(t,e,n,r){for(var i=-1,o=In(On((e-t)/(n||1)),0),a=$t(o);o--;)a[r?o:++i]=t,t+=n;return a}(e,n,i=i===r?e<n?1:-1:Cs(i),t)}}function ro(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=As(e),n=As(n)),t(e,n)}}function io(t,e,n,i,o,a,s,u,c,l){var f=e&v;e|=f?_:y,(e&=~(f?y:_))&d||(e&=~(h|p));var g=[t,e,o,f?a:r,f?s:r,f?r:a,f?r:s,u,c,l],m=n.apply(r,g);return Ro(t)&&Ho(m,g),m.placeholder=i,qo(m,t,e)}function oo(t){var e=zt[t];return function(t,n){if(t=As(t),(n=null==n?0:Mn(Ps(n),292))&&Fn(t)){var r=(Ls(t)+"e").split("e");return+((r=(Ls(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var ao=qn&&1/gn(new qn([,-0]))[1]==k?function(t){return new qn(t)}:wu;function so(t){return function(e){var n=Co(e);return n==H?pn(e):n==G?function(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}(e):function(t,e){return Ue(e,function(e){return[e,t[e]]})}(e,t(e))}}function uo(t,e,n,i,s,u,c,l){var f=e&p;if(!f&&"function"!=typeof t)throw new Jt(o);var w=i?i.length:0;if(w||(e&=~(_|y),i=s=r),c=c===r?c:In(Ps(c),0),l=l===r?l:Ps(l),w-=s?s.length:0,e&y){var S=i,x=s;i=s=r}var k=f?r:_o(t),E=[t,e,n,i,s,S,x,u,c,l];if(k&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<(h|p|m),s=r==m&&n==v||r==m&&n==b&&t[7].length<=e[8]||r==(m|b)&&e[7].length<=e[8]&&n==v;if(!o&&!s)return t;r&h&&(t[2]=e[2],i|=n&h?0:d);var u=e[3];if(u){var c=t[3];t[3]=c?Di(c,u,e[4]):u,t[4]=c?vn(t[3],a):e[4]}(u=e[5])&&(c=t[5],t[5]=c?Bi(c,u,e[6]):u,t[6]=c?vn(t[5],a):e[6]),(u=e[7])&&(t[7]=u),r&m&&(t[8]=null==t[8]?e[8]:Mn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(E,k),t=E[0],e=E[1],n=E[2],i=E[3],s=E[4],!(l=E[9]=E[9]===r?f?0:t.length:In(E[9]-w,0))&&e&(v|g)&&(e&=~(v|g)),e&&e!=h)C=e==v||e==g?function(t,e,n){var i=Ki(t);return function o(){for(var a=arguments.length,s=$t(a),u=a,c=mo(o);u--;)s[u]=arguments[u];var l=a<3&&s[0]!==c&&s[a-1]!==c?[]:vn(s,c);return(a-=l.length)<n?io(t,e,Xi,o.placeholder,r,s,l,r,r,n-a):Re(this&&this!==we&&this instanceof o?i:t,this,s)}}(t,e,l):e!=_&&e!=(h|_)||s.length?Xi.apply(r,E):function(t,e,n,r){var i=e&h,o=Ki(t);return function e(){for(var a=-1,s=arguments.length,u=-1,c=r.length,l=$t(c+s),f=this&&this!==we&&this instanceof e?o:t;++u<c;)l[u]=r[u];for(;s--;)l[u++]=arguments[++a];return Re(f,i?n:this,l)}}(t,e,n,i);else var C=function(t,e,n){var r=e&h,i=Ki(t);return function e(){return(this&&this!==we&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return qo((k?hi:Ho)(C,E),t,e)}function co(t,e,n,i){return t===r||Za(t,Zt[n])&&!ne.call(i,n)?e:t}function lo(t,e,n,i,o,a){return ps(t)&&ps(e)&&(a.set(e,t),ni(t,e,r,lo,a),a.delete(e)),t}function fo(t){return _s(t)?r:t}function ho(t,e,n,i,o,a){var s=n&l,u=t.length,c=e.length;if(u!=c&&!(s&&c>u))return!1;var h=a.get(t);if(h&&a.get(e))return h==e;var p=-1,d=!0,v=n&f?new fr:r;for(a.set(t,e),a.set(e,t);++p<u;){var g=t[p],_=e[p];if(i)var y=s?i(_,g,p,e,t,a):i(g,_,p,t,e,a);if(y!==r){if(y)continue;d=!1;break}if(v){if(!qe(e,function(t,e){if(!an(v,e)&&(g===t||o(g,t,n,i,a)))return v.push(e)})){d=!1;break}}else if(g!==_&&!o(g,_,n,i,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function po(t){return Vo(Do(t,r,ia),t+"")}function vo(t){return Br(t,qs,ko)}function go(t){return Br(t,Ws,Eo)}var _o=Gn?function(t){return Gn.get(t)}:wu;function yo(t){for(var e=t.name+"",n=Kn[e],r=ne.call(Kn,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function mo(t){return(ne.call(rr,"placeholder")?rr:t).placeholder}function bo(){var t=rr.iteratee||_u;return t=t===_u?Jr:t,arguments.length?t(arguments[0],arguments[1]):t}function wo(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function So(t){for(var e=qs(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Mo(i)]}return e}function xo(t,e){var n=function(t,e){return null==t?r:t[e]}(t,e);return Qr(n)?n:r}var ko=jn?function(t){return null==t?[]:(t=Gt(t),Ne(jn(t),function(e){return We.call(t,e)}))}:Ou,Eo=jn?function(t){for(var e=[];t;)He(e,ko(t)),t=Ee(t);return e}:Ou,Co=Ur;function Po(t,e,n){for(var r=-1,i=(e=ji(e,t)).length,o=!1;++r<i;){var a=Jo(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&hs(i)&&jo(a,i)&&(rs(t)||ns(t))}function Oo(t){return"function"!=typeof t.constructor||Io(t)?{}:ir(Ee(t))}function Ao(t){return rs(t)||ns(t)||!!(wn&&t&&t[wn])}function jo(t,e){var n=typeof t;return!!(e=null==e?E:e)&&("number"==n||"symbol"!=n&&Dt.test(t))&&t>-1&&t%1==0&&t<e}function Lo(t,e,n){if(!ps(n))return!1;var r=typeof e;return!!("number"==r?os(n)&&jo(e,n.length):"string"==r&&e in n)&&Za(n[e],t)}function Fo(t,e){if(rs(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ws(t))||bt.test(t)||!mt.test(t)||null!=e&&t in Gt(e)}function Ro(t){var e=yo(t),n=rr[e];if("function"!=typeof n||!(e in sr.prototype))return!1;if(t===n)return!0;var r=_o(n);return!!r&&t===r[0]}(Hn&&Co(new Hn(new ArrayBuffer(1)))!=Z||$n&&Co(new $n)!=H||Vn&&"[object Promise]"!=Co(Vn.resolve())||qn&&Co(new qn)!=G||Wn&&Co(new Wn)!=X)&&(Co=function(t){var e=Ur(t),n=e==q?t.constructor:r,i=n?Xo(n):"";if(i)switch(i){case Qn:return Z;case Jn:return H;case Xn:return"[object Promise]";case Yn:return G;case Zn:return X}return e});var To=te?ls:Au;function Io(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Zt)}function Mo(t){return t==t&&!ps(t)}function No(t,e){return function(n){return null!=n&&n[t]===e&&(e!==r||t in Gt(n))}}function Do(t,e,n){return e=In(e===r?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=In(r.length-e,0),a=$t(o);++i<o;)a[i]=r[e+i];i=-1;for(var s=$t(e+1);++i<e;)s[i]=r[i];return s[e]=n(a),Re(t,this,s)}}function Bo(t,e){return e.length<2?t:Dr(t,di(e,0,-1))}function Uo(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Ho=Wo(hi),$o=Pn||function(t,e){return we.setTimeout(t,e)},Vo=Wo(pi);function qo(t,e,n){var r=e+"";return Vo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Pt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Ie(L,function(n){var r="_."+n[0];e&n[1]&&!De(t,r)&&t.push(r)}),t.sort()}(function(t){var e=r.match(Ot);return e?e[1].split(At):[]}(),n)))}function Wo(t){var e=0,n=0;return function(){var i=Nn(),o=x-(i-n);if(n=i,o>0){if(++e>=S)return arguments[0]}else e=0;return t.apply(r,arguments)}}function zo(t,e){var n=-1,i=t.length,o=i-1;for(e=e===r?i:e;++n<e;){var a=ui(n,o),s=t[a];t[a]=t[n],t[n]=s}return t.length=e,t}var Go,Ko,Qo=(Go=Ga(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(wt,function(t,n,r,i){e.push(r?i.replace(Lt,"$1"):n||t)}),e},function(t){return 500===Ko.size&&Ko.clear(),t}),Ko=Go.cache,Go);function Jo(t){if("string"==typeof t||ws(t))return t;var e=t+"";return"0"==e&&1/t==-k?"-0":e}function Xo(t){if(null!=t){try{return ee.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Yo(t){if(t instanceof sr)return t.clone();var e=new ar(t.__wrapped__,t.__chain__);return e.__actions__=Ui(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Zo=li(function(t,e){return as(t)?Cr(t,Fr(e,1,as,!0)):[]}),ta=li(function(t,e){var n=ca(e);return as(n)&&(n=r),as(t)?Cr(t,Fr(e,1,as,!0),bo(n,2)):[]}),ea=li(function(t,e){var n=ca(e);return as(n)&&(n=r),as(t)?Cr(t,Fr(e,1,as,!0),r,n):[]});function na(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Ps(n);return i<0&&(i=In(r+i,0)),Ge(t,bo(e,3),i)}function ra(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var o=i-1;return n!==r&&(o=Ps(n),o=n<0?In(i+o,0):Mn(o,i-1)),Ge(t,bo(e,3),o,!0)}function ia(t){return null!=t&&t.length?Fr(t,1):[]}function oa(t){return t&&t.length?t[0]:r}var aa=li(function(t){var e=Ue(t,Oi);return e.length&&e[0]===t[0]?qr(e):[]}),sa=li(function(t){var e=ca(t),n=Ue(t,Oi);return e===ca(n)?e=r:n.pop(),n.length&&n[0]===t[0]?qr(n,bo(e,2)):[]}),ua=li(function(t){var e=ca(t),n=Ue(t,Oi);return(e="function"==typeof e?e:r)&&n.pop(),n.length&&n[0]===t[0]?qr(n,r,e):[]});function ca(t){var e=null==t?0:t.length;return e?t[e-1]:r}var la=li(fa);function fa(t,e){return t&&t.length&&e&&e.length?ai(t,e):t}var ha=po(function(t,e){var n=null==t?0:t.length,r=wr(t,e);return si(t,Ue(e,function(t){return jo(t,n)?+t:t}).sort(Ni)),r});function pa(t){return null==t?t:Un.call(t)}var da=li(function(t){return wi(Fr(t,1,as,!0))}),va=li(function(t){var e=ca(t);return as(e)&&(e=r),wi(Fr(t,1,as,!0),bo(e,2))}),ga=li(function(t){var e=ca(t);return e="function"==typeof e?e:r,wi(Fr(t,1,as,!0),r,e)});function _a(t){if(!t||!t.length)return[];var e=0;return t=Ne(t,function(t){if(as(t))return e=In(t.length,e),!0}),nn(e,function(e){return Ue(t,Ye(e))})}function ya(t,e){if(!t||!t.length)return[];var n=_a(t);return null==e?n:Ue(n,function(t){return Re(e,r,t)})}var ma=li(function(t,e){return as(t)?Cr(t,e):[]}),ba=li(function(t){return Ci(Ne(t,as))}),wa=li(function(t){var e=ca(t);return as(e)&&(e=r),Ci(Ne(t,as),bo(e,2))}),Sa=li(function(t){var e=ca(t);return e="function"==typeof e?e:r,Ci(Ne(t,as),r,e)}),xa=li(_a),ka=li(function(t){var e=t.length,n=e>1?t[e-1]:r;return n="function"==typeof n?(t.pop(),n):r,ya(t,n)});function Ea(t){var e=rr(t);return e.__chain__=!0,e}function Ca(t,e){return e(t)}var Pa=po(function(t){var e=t.length,n=e?t[0]:0,i=this.__wrapped__,o=function(e){return wr(e,t)};return!(e>1||this.__actions__.length)&&i instanceof sr&&jo(n)?((i=i.slice(n,+n+(e?1:0))).__actions__.push({func:Ca,args:[o],thisArg:r}),new ar(i,this.__chain__).thru(function(t){return e&&!t.length&&t.push(r),t})):this.thru(o)}),Oa=$i(function(t,e,n){ne.call(t,n)?++t[n]:br(t,n,1)}),Aa=Qi(na),ja=Qi(ra);function La(t,e){return(rs(t)?Ie:Pr)(t,bo(e,3))}function Fa(t,e){return(rs(t)?function(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}:Or)(t,bo(e,3))}var Ra=$i(function(t,e,n){ne.call(t,n)?t[n].push(e):br(t,n,[e])}),Ta=li(function(t,e,n){var r=-1,i="function"==typeof e,o=os(t)?$t(t.length):[];return Pr(t,function(t){o[++r]=i?Re(e,t,n):Wr(t,e,n)}),o}),Ia=$i(function(t,e,n){br(t,n,e)});function Ma(t,e){return(rs(t)?Ue:Zr)(t,bo(e,3))}var Na=$i(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]}),Da=li(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Lo(t,e[0],e[1])?e=[]:n>2&&Lo(e[0],e[1],e[2])&&(e=[e[0]]),ii(t,Fr(e,1),[])}),Ba=Cn||function(){return we.Date.now()};function Ua(t,e,n){return e=n?r:e,e=t&&null==e?t.length:e,uo(t,m,r,r,r,r,e)}function Ha(t,e){var n;if("function"!=typeof e)throw new Jt(o);return t=Ps(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=r),n}}var $a=li(function(t,e,n){var r=h;if(n.length){var i=vn(n,mo($a));r|=_}return uo(t,r,e,n,i)}),Va=li(function(t,e,n){var r=h|p;if(n.length){var i=vn(n,mo(Va));r|=_}return uo(e,r,t,n,i)});function qa(t,e,n){var i,a,s,u,c,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new Jt(o);function v(e){var n=i,o=a;return i=a=r,f=e,u=t.apply(o,n)}function g(t){var n=t-l;return l===r||n>=e||n<0||p&&t-f>=s}function _(){var t=Ba();if(g(t))return y(t);c=$o(_,function(t){var n=e-(t-l);return p?Mn(n,s-(t-f)):n}(t))}function y(t){return c=r,d&&i?v(t):(i=a=r,u)}function m(){var t=Ba(),n=g(t);if(i=arguments,a=this,l=t,n){if(c===r)return function(t){return f=t,c=$o(_,e),h?v(t):u}(l);if(p)return Ri(c),c=$o(_,e),v(l)}return c===r&&(c=$o(_,e)),u}return e=As(e)||0,ps(n)&&(h=!!n.leading,s=(p="maxWait"in n)?In(As(n.maxWait)||0,e):s,d="trailing"in n?!!n.trailing:d),m.cancel=function(){c!==r&&Ri(c),f=0,i=l=a=c=r},m.flush=function(){return c===r?u:y(Ba())},m}var Wa=li(function(t,e){return Er(t,1,e)}),za=li(function(t,e,n){return Er(t,As(e)||0,n)});function Ga(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Jt(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(Ga.Cache||lr),n}function Ka(t){if("function"!=typeof t)throw new Jt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ga.Cache=lr;var Qa=Li(function(t,e){var n=(e=1==e.length&&rs(e[0])?Ue(e[0],rn(bo())):Ue(Fr(e,1),rn(bo()))).length;return li(function(r){for(var i=-1,o=Mn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return Re(t,this,r)})}),Ja=li(function(t,e){var n=vn(e,mo(Ja));return uo(t,_,r,e,n)}),Xa=li(function(t,e){var n=vn(e,mo(Xa));return uo(t,y,r,e,n)}),Ya=po(function(t,e){return uo(t,b,r,r,r,e)});function Za(t,e){return t===e||t!=t&&e!=e}var ts=ro(Hr),es=ro(function(t,e){return t>=e}),ns=zr(function(){return arguments}())?zr:function(t){return ds(t)&&ne.call(t,"callee")&&!We.call(t,"callee")},rs=$t.isArray,is=Pe?rn(Pe):function(t){return ds(t)&&Ur(t)==Y};function os(t){return null!=t&&hs(t.length)&&!ls(t)}function as(t){return ds(t)&&os(t)}var ss=Ln||Au,us=Oe?rn(Oe):function(t){return ds(t)&&Ur(t)==M};function cs(t){if(!ds(t))return!1;var e=Ur(t);return e==D||e==N||"string"==typeof t.message&&"string"==typeof t.name&&!_s(t)}function ls(t){if(!ps(t))return!1;var e=Ur(t);return e==B||e==U||e==T||e==W}function fs(t){return"number"==typeof t&&t==Ps(t)}function hs(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=E}function ps(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function ds(t){return null!=t&&"object"==typeof t}var vs=Ae?rn(Ae):function(t){return ds(t)&&Co(t)==H};function gs(t){return"number"==typeof t||ds(t)&&Ur(t)==$}function _s(t){if(!ds(t)||Ur(t)!=q)return!1;var e=Ee(t);if(null===e)return!0;var n=ne.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ee.call(n)==ue}var ys=je?rn(je):function(t){return ds(t)&&Ur(t)==z},ms=Le?rn(Le):function(t){return ds(t)&&Co(t)==G};function bs(t){return"string"==typeof t||!rs(t)&&ds(t)&&Ur(t)==K}function ws(t){return"symbol"==typeof t||ds(t)&&Ur(t)==Q}var Ss=Fe?rn(Fe):function(t){return ds(t)&&hs(t.length)&&!!de[Ur(t)]},xs=ro(Yr),ks=ro(function(t,e){return t<=e});function Es(t){if(!t)return[];if(os(t))return bs(t)?yn(t):Ui(t);if(Sn&&t[Sn])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Sn]());var e=Co(t);return(e==H?pn:e==G?gn:Zs)(t)}function Cs(t){return t?(t=As(t))===k||t===-k?(t<0?-1:1)*C:t==t?t:0:0===t?t:0}function Ps(t){var e=Cs(t),n=e%1;return e==e?n?e-n:e:0}function Os(t){return t?Sr(Ps(t),0,O):0}function As(t){if("number"==typeof t)return t;if(ws(t))return P;if(ps(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=ps(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(kt,"");var n=It.test(t);return n||Nt.test(t)?ye(t.slice(2),n?2:8):Tt.test(t)?P:+t}function js(t){return Hi(t,Ws(t))}function Ls(t){return null==t?"":bi(t)}var Fs=Vi(function(t,e){if(Io(e)||os(e))Hi(e,qs(e),t);else for(var n in e)ne.call(e,n)&&gr(t,n,e[n])}),Rs=Vi(function(t,e){Hi(e,Ws(e),t)}),Ts=Vi(function(t,e,n,r){Hi(e,Ws(e),t,r)}),Is=Vi(function(t,e,n,r){Hi(e,qs(e),t,r)}),Ms=po(wr),Ns=li(function(t,e){t=Gt(t);var n=-1,i=e.length,o=i>2?e[2]:r;for(o&&Lo(e[0],e[1],o)&&(i=1);++n<i;)for(var a=e[n],s=Ws(a),u=-1,c=s.length;++u<c;){var l=s[u],f=t[l];(f===r||Za(f,Zt[l])&&!ne.call(t,l))&&(t[l]=a[l])}return t}),Ds=li(function(t){return t.push(r,lo),Re(Gs,r,t)});function Bs(t,e,n){var i=null==t?r:Dr(t,e);return i===r?n:i}function Us(t,e){return null!=t&&Po(t,e,Vr)}var Hs=Yi(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=oe.call(e)),t[e]=n},pu(gu)),$s=Yi(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=oe.call(e)),ne.call(t,e)?t[e].push(n):t[e]=[n]},bo),Vs=li(Wr);function qs(t){return os(t)?pr(t):Xr(t)}function Ws(t){return os(t)?pr(t,!0):function(t){if(!ps(t))return function(t){var e=[];if(null!=t)for(var n in Gt(t))e.push(n);return e}(t);var e=Io(t),n=[];for(var r in t)("constructor"!=r||!e&&ne.call(t,r))&&n.push(r);return n}(t)}var zs=Vi(function(t,e,n){ni(t,e,n)}),Gs=Vi(function(t,e,n,r){ni(t,e,n,r)}),Ks=po(function(t,e){var n={};if(null==t)return n;var r=!1;e=Ue(e,function(e){return e=ji(e,t),r||(r=e.length>1),e}),Hi(t,go(t),n),r&&(n=xr(n,s|u|c,fo));for(var i=e.length;i--;)Si(n,e[i]);return n}),Qs=po(function(t,e){return null==t?{}:function(t,e){return oi(t,e,function(e,n){return Us(t,n)})}(t,e)});function Js(t,e){if(null==t)return{};var n=Ue(go(t),function(t){return[t]});return e=bo(e),oi(t,n,function(t,n){return e(t,n[0])})}var Xs=so(qs),Ys=so(Ws);function Zs(t){return null==t?[]:on(t,qs(t))}var tu=Gi(function(t,e,n){return e=e.toLowerCase(),t+(n?eu(e):e)});function eu(t){return cu(Ls(t).toLowerCase())}function nu(t){return(t=Ls(t))&&t.replace(Bt,cn).replace(se,"")}var ru=Gi(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),iu=Gi(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),ou=zi("toLowerCase"),au=Gi(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}),su=Gi(function(t,e,n){return t+(n?" ":"")+cu(e)}),uu=Gi(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),cu=zi("toUpperCase");function lu(t,e,n){return t=Ls(t),(e=n?r:e)===r?function(t){return fe.test(t)}(t)?t.match(ce)||[]:t.match(jt)||[]:t.match(e)||[]}var fu=li(function(t,e){try{return Re(t,r,e)}catch(r){return cs(r)?r:new qt(r)}}),hu=po(function(t,e){return Ie(e,function(e){e=Jo(e),br(t,e,$a(t[e],t))}),t});function pu(t){return function(){return t}}var du=Ji(),vu=Ji(!0);function gu(t){return t}function _u(t){return Jr("function"==typeof t?t:xr(t,s))}var yu=li(function(t,e){return function(n){return Wr(n,t,e)}}),mu=li(function(t,e){return function(n){return Wr(t,n,e)}});function bu(t,e,n){var r=qs(e),i=Nr(e,r);null!=n||ps(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Nr(e,qs(e)));var o=!(ps(n)&&"chain"in n&&!n.chain),a=ls(t);return Ie(i,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=Ui(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,He([this.value()],arguments))})}),t}function wu(){}var Su=to(Ue),xu=to(Me),ku=to(qe);function Eu(t){return Fo(t)?Ye(Jo(t)):function(t){return function(e){return Dr(e,t)}}(t)}var Cu=no(),Pu=no(!0);function Ou(){return[]}function Au(){return!1}var ju,Lu=Zi(function(t,e){return t+e},0),Fu=oo("ceil"),Ru=Zi(function(t,e){return t/e},1),Tu=oo("floor"),Iu=Zi(function(t,e){return t*e},1),Mu=oo("round"),Nu=Zi(function(t,e){return t-e},0);return rr.after=function(t,e){if("function"!=typeof e)throw new Jt(o);return t=Ps(t),function(){if(--t<1)return e.apply(this,arguments)}},rr.ary=Ua,rr.assign=Fs,rr.assignIn=Rs,rr.assignInWith=Ts,rr.assignWith=Is,rr.at=Ms,rr.before=Ha,rr.bind=$a,rr.bindAll=hu,rr.bindKey=Va,rr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return rs(t)?t:[t]},rr.chain=Ea,rr.chunk=function(t,e,n){e=(n?Lo(t,e,n):e===r)?1:In(Ps(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,a=0,s=$t(On(i/e));o<i;)s[a++]=di(t,o,o+=e);return s},rr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},rr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=$t(t-1),n=arguments[0],r=t;r--;)e[r-1]=arguments[r];return He(rs(n)?Ui(n):[n],Fr(e,1))},rr.cond=function(t){var e=null==t?0:t.length,n=bo();return t=e?Ue(t,function(t){if("function"!=typeof t[1])throw new Jt(o);return[n(t[0]),t[1]]}):[],li(function(n){for(var r=-1;++r<e;){var i=t[r];if(Re(i[0],this,n))return Re(i[1],this,n)}})},rr.conforms=function(t){return function(t){var e=qs(t);return function(n){return kr(n,t,e)}}(xr(t,s))},rr.constant=pu,rr.countBy=Oa,rr.create=function(t,e){var n=ir(t);return null==e?n:mr(n,e)},rr.curry=function t(e,n,i){var o=uo(e,v,r,r,r,r,r,n=i?r:n);return o.placeholder=t.placeholder,o},rr.curryRight=function t(e,n,i){var o=uo(e,g,r,r,r,r,r,n=i?r:n);return o.placeholder=t.placeholder,o},rr.debounce=qa,rr.defaults=Ns,rr.defaultsDeep=Ds,rr.defer=Wa,rr.delay=za,rr.difference=Zo,rr.differenceBy=ta,rr.differenceWith=ea,rr.drop=function(t,e,n){var i=null==t?0:t.length;return i?di(t,(e=n||e===r?1:Ps(e))<0?0:e,i):[]},rr.dropRight=function(t,e,n){var i=null==t?0:t.length;return i?di(t,0,(e=i-(e=n||e===r?1:Ps(e)))<0?0:e):[]},rr.dropRightWhile=function(t,e){return t&&t.length?ki(t,bo(e,3),!0,!0):[]},rr.dropWhile=function(t,e){return t&&t.length?ki(t,bo(e,3),!0):[]},rr.fill=function(t,e,n,i){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&Lo(t,e,n)&&(n=0,i=o),function(t,e,n,i){var o=t.length;for((n=Ps(n))<0&&(n=-n>o?0:o+n),(i=i===r||i>o?o:Ps(i))<0&&(i+=o),i=n>i?0:Os(i);n<i;)t[n++]=e;return t}(t,e,n,i)):[]},rr.filter=function(t,e){return(rs(t)?Ne:Lr)(t,bo(e,3))},rr.flatMap=function(t,e){return Fr(Ma(t,e),1)},rr.flatMapDeep=function(t,e){return Fr(Ma(t,e),k)},rr.flatMapDepth=function(t,e,n){return n=n===r?1:Ps(n),Fr(Ma(t,e),n)},rr.flatten=ia,rr.flattenDeep=function(t){return null!=t&&t.length?Fr(t,k):[]},rr.flattenDepth=function(t,e){return null!=t&&t.length?Fr(t,e=e===r?1:Ps(e)):[]},rr.flip=function(t){return uo(t,w)},rr.flow=du,rr.flowRight=vu,rr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},rr.functions=function(t){return null==t?[]:Nr(t,qs(t))},rr.functionsIn=function(t){return null==t?[]:Nr(t,Ws(t))},rr.groupBy=Ra,rr.initial=function(t){return null!=t&&t.length?di(t,0,-1):[]},rr.intersection=aa,rr.intersectionBy=sa,rr.intersectionWith=ua,rr.invert=Hs,rr.invertBy=$s,rr.invokeMap=Ta,rr.iteratee=_u,rr.keyBy=Ia,rr.keys=qs,rr.keysIn=Ws,rr.map=Ma,rr.mapKeys=function(t,e){var n={};return e=bo(e,3),Ir(t,function(t,r,i){br(n,e(t,r,i),t)}),n},rr.mapValues=function(t,e){var n={};return e=bo(e,3),Ir(t,function(t,r,i){br(n,r,e(t,r,i))}),n},rr.matches=function(t){return ti(xr(t,s))},rr.matchesProperty=function(t,e){return ei(t,xr(e,s))},rr.memoize=Ga,rr.merge=zs,rr.mergeWith=Gs,rr.method=yu,rr.methodOf=mu,rr.mixin=bu,rr.negate=Ka,rr.nthArg=function(t){return t=Ps(t),li(function(e){return ri(e,t)})},rr.omit=Ks,rr.omitBy=function(t,e){return Js(t,Ka(bo(e)))},rr.once=function(t){return Ha(2,t)},rr.orderBy=function(t,e,n,i){return null==t?[]:(rs(e)||(e=null==e?[]:[e]),rs(n=i?r:n)||(n=null==n?[]:[n]),ii(t,e,n))},rr.over=Su,rr.overArgs=Qa,rr.overEvery=xu,rr.overSome=ku,rr.partial=Ja,rr.partialRight=Xa,rr.partition=Na,rr.pick=Qs,rr.pickBy=Js,rr.property=Eu,rr.propertyOf=function(t){return function(e){return null==t?r:Dr(t,e)}},rr.pull=la,rr.pullAll=fa,rr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?ai(t,e,bo(n,2)):t},rr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?ai(t,e,r,n):t},rr.pullAt=ha,rr.range=Cu,rr.rangeRight=Pu,rr.rearg=Ya,rr.reject=function(t,e){return(rs(t)?Ne:Lr)(t,Ka(bo(e,3)))},rr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=bo(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return si(t,i),n},rr.rest=function(t,e){if("function"!=typeof t)throw new Jt(o);return li(t,e=e===r?e:Ps(e))},rr.reverse=pa,rr.sampleSize=function(t,e,n){return e=(n?Lo(t,e,n):e===r)?1:Ps(e),(rs(t)?function(t,e){return zo(Ui(t),Sr(e,0,t.length))}:function(t,e){var n=Zs(t);return zo(n,Sr(e,0,n.length))})(t,e)},rr.set=function(t,e,n){return null==t?t:fi(t,e,n)},rr.setWith=function(t,e,n,i){return i="function"==typeof i?i:r,null==t?t:fi(t,e,n,i)},rr.shuffle=function(t){return(rs(t)?function(t){return zo(Ui(t))}:function(t){return zo(Zs(t))})(t)},rr.slice=function(t,e,n){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Lo(t,e,n)?(e=0,n=i):(e=null==e?0:Ps(e),n=n===r?i:Ps(n)),di(t,e,n)):[]},rr.sortBy=Da,rr.sortedUniq=function(t){return t&&t.length?yi(t):[]},rr.sortedUniqBy=function(t,e){return t&&t.length?yi(t,bo(e,2)):[]},rr.split=function(t,e,n){return n&&"number"!=typeof n&&Lo(t,e,n)&&(e=n=r),(n=n===r?O:n>>>0)?(t=Ls(t))&&("string"==typeof e||null!=e&&!ys(e))&&!(e=bi(e))&&hn(t)?Fi(yn(t),0,n):t.split(e,n):[]},rr.spread=function(t,e){if("function"!=typeof t)throw new Jt(o);return e=null==e?0:In(Ps(e),0),li(function(n){var r=n[e],i=Fi(n,0,e);return r&&He(i,r),Re(t,this,i)})},rr.tail=function(t){var e=null==t?0:t.length;return e?di(t,1,e):[]},rr.take=function(t,e,n){return t&&t.length?di(t,0,(e=n||e===r?1:Ps(e))<0?0:e):[]},rr.takeRight=function(t,e,n){var i=null==t?0:t.length;return i?di(t,(e=i-(e=n||e===r?1:Ps(e)))<0?0:e,i):[]},rr.takeRightWhile=function(t,e){return t&&t.length?ki(t,bo(e,3),!1,!0):[]},rr.takeWhile=function(t,e){return t&&t.length?ki(t,bo(e,3)):[]},rr.tap=function(t,e){return e(t),t},rr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new Jt(o);return ps(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),qa(t,e,{leading:r,maxWait:e,trailing:i})},rr.thru=Ca,rr.toArray=Es,rr.toPairs=Xs,rr.toPairsIn=Ys,rr.toPath=function(t){return rs(t)?Ue(t,Jo):ws(t)?[t]:Ui(Qo(Ls(t)))},rr.toPlainObject=js,rr.transform=function(t,e,n){var r=rs(t),i=r||ss(t)||Ss(t);if(e=bo(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:ps(t)&&ls(o)?ir(Ee(t)):{}}return(i?Ie:Ir)(t,function(t,r,i){return e(n,t,r,i)}),n},rr.unary=function(t){return Ua(t,1)},rr.union=da,rr.unionBy=va,rr.unionWith=ga,rr.uniq=function(t){return t&&t.length?wi(t):[]},rr.uniqBy=function(t,e){return t&&t.length?wi(t,bo(e,2)):[]},rr.uniqWith=function(t,e){return e="function"==typeof e?e:r,t&&t.length?wi(t,r,e):[]},rr.unset=function(t,e){return null==t||Si(t,e)},rr.unzip=_a,rr.unzipWith=ya,rr.update=function(t,e,n){return null==t?t:xi(t,e,Ai(n))},rr.updateWith=function(t,e,n,i){return i="function"==typeof i?i:r,null==t?t:xi(t,e,Ai(n),i)},rr.values=Zs,rr.valuesIn=function(t){return null==t?[]:on(t,Ws(t))},rr.without=ma,rr.words=lu,rr.wrap=function(t,e){return Ja(Ai(e),t)},rr.xor=ba,rr.xorBy=wa,rr.xorWith=Sa,rr.zip=xa,rr.zipObject=function(t,e){return Pi(t||[],e||[],gr)},rr.zipObjectDeep=function(t,e){return Pi(t||[],e||[],fi)},rr.zipWith=ka,rr.entries=Xs,rr.entriesIn=Ys,rr.extend=Rs,rr.extendWith=Ts,bu(rr,rr),rr.add=Lu,rr.attempt=fu,rr.camelCase=tu,rr.capitalize=eu,rr.ceil=Fu,rr.clamp=function(t,e,n){return n===r&&(n=e,e=r),n!==r&&(n=(n=As(n))==n?n:0),e!==r&&(e=(e=As(e))==e?e:0),Sr(As(t),e,n)},rr.clone=function(t){return xr(t,c)},rr.cloneDeep=function(t){return xr(t,s|c)},rr.cloneDeepWith=function(t,e){return xr(t,s|c,e="function"==typeof e?e:r)},rr.cloneWith=function(t,e){return xr(t,c,e="function"==typeof e?e:r)},rr.conformsTo=function(t,e){return null==e||kr(t,e,qs(e))},rr.deburr=nu,rr.defaultTo=function(t,e){return null==t||t!=t?e:t},rr.divide=Ru,rr.endsWith=function(t,e,n){t=Ls(t),e=bi(e);var i=t.length,o=n=n===r?i:Sr(Ps(n),0,i);return(n-=e.length)>=0&&t.slice(n,o)==e},rr.eq=Za,rr.escape=function(t){return(t=Ls(t))&&vt.test(t)?t.replace(pt,ln):t},rr.escapeRegExp=function(t){return(t=Ls(t))&&xt.test(t)?t.replace(St,"\\$&"):t},rr.every=function(t,e,n){var i=rs(t)?Me:Ar;return n&&Lo(t,e,n)&&(e=r),i(t,bo(e,3))},rr.find=Aa,rr.findIndex=na,rr.findKey=function(t,e){return ze(t,bo(e,3),Ir)},rr.findLast=ja,rr.findLastIndex=ra,rr.findLastKey=function(t,e){return ze(t,bo(e,3),Mr)},rr.floor=Tu,rr.forEach=La,rr.forEachRight=Fa,rr.forIn=function(t,e){return null==t?t:Rr(t,bo(e,3),Ws)},rr.forInRight=function(t,e){return null==t?t:Tr(t,bo(e,3),Ws)},rr.forOwn=function(t,e){return t&&Ir(t,bo(e,3))},rr.forOwnRight=function(t,e){return t&&Mr(t,bo(e,3))},rr.get=Bs,rr.gt=ts,rr.gte=es,rr.has=function(t,e){return null!=t&&Po(t,e,$r)},rr.hasIn=Us,rr.head=oa,rr.identity=gu,rr.includes=function(t,e,n,r){t=os(t)?t:Zs(t),n=n&&!r?Ps(n):0;var i=t.length;return n<0&&(n=In(i+n,0)),bs(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Ke(t,e,n)>-1},rr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Ps(n);return i<0&&(i=In(r+i,0)),Ke(t,e,i)},rr.inRange=function(t,e,n){return e=Cs(e),n===r?(n=e,e=0):n=Cs(n),function(t,e,n){return t>=Mn(e,n)&&t<In(e,n)}(t=As(t),e,n)},rr.invoke=Vs,rr.isArguments=ns,rr.isArray=rs,rr.isArrayBuffer=is,rr.isArrayLike=os,rr.isArrayLikeObject=as,rr.isBoolean=function(t){return!0===t||!1===t||ds(t)&&Ur(t)==I},rr.isBuffer=ss,rr.isDate=us,rr.isElement=function(t){return ds(t)&&1===t.nodeType&&!_s(t)},rr.isEmpty=function(t){if(null==t)return!0;if(os(t)&&(rs(t)||"string"==typeof t||"function"==typeof t.splice||ss(t)||Ss(t)||ns(t)))return!t.length;var e=Co(t);if(e==H||e==G)return!t.size;if(Io(t))return!Xr(t).length;for(var n in t)if(ne.call(t,n))return!1;return!0},rr.isEqual=function(t,e){return Gr(t,e)},rr.isEqualWith=function(t,e,n){var i=(n="function"==typeof n?n:r)?n(t,e):r;return i===r?Gr(t,e,r,n):!!i},rr.isError=cs,rr.isFinite=function(t){return"number"==typeof t&&Fn(t)},rr.isFunction=ls,rr.isInteger=fs,rr.isLength=hs,rr.isMap=vs,rr.isMatch=function(t,e){return t===e||Kr(t,e,So(e))},rr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:r,Kr(t,e,So(e),n)},rr.isNaN=function(t){return gs(t)&&t!=+t},rr.isNative=function(t){if(To(t))throw new qt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Qr(t)},rr.isNil=function(t){return null==t},rr.isNull=function(t){return null===t},rr.isNumber=gs,rr.isObject=ps,rr.isObjectLike=ds,rr.isPlainObject=_s,rr.isRegExp=ys,rr.isSafeInteger=function(t){return fs(t)&&t>=-E&&t<=E},rr.isSet=ms,rr.isString=bs,rr.isSymbol=ws,rr.isTypedArray=Ss,rr.isUndefined=function(t){return t===r},rr.isWeakMap=function(t){return ds(t)&&Co(t)==X},rr.isWeakSet=function(t){return ds(t)&&"[object WeakSet]"==Ur(t)},rr.join=function(t,e){return null==t?"":Rn.call(t,e)},rr.kebabCase=ru,rr.last=ca,rr.lastIndexOf=function(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var o=i;return n!==r&&(o=(o=Ps(n))<0?In(i+o,0):Mn(o,i-1)),e==e?function(t,e,n){for(var r=o+1;r--;)if(t[r]===e)return r;return r}(t,e):Ge(t,Je,o,!0)},rr.lowerCase=iu,rr.lowerFirst=ou,rr.lt=xs,rr.lte=ks,rr.max=function(t){return t&&t.length?jr(t,gu,Hr):r},rr.maxBy=function(t,e){return t&&t.length?jr(t,bo(e,2),Hr):r},rr.mean=function(t){return Xe(t,gu)},rr.meanBy=function(t,e){return Xe(t,bo(e,2))},rr.min=function(t){return t&&t.length?jr(t,gu,Yr):r},rr.minBy=function(t,e){return t&&t.length?jr(t,bo(e,2),Yr):r},rr.stubArray=Ou,rr.stubFalse=Au,rr.stubObject=function(){return{}},rr.stubString=function(){return""},rr.stubTrue=function(){return!0},rr.multiply=Iu,rr.nth=function(t,e){return t&&t.length?ri(t,Ps(e)):r},rr.noConflict=function(){return we._===this&&(we._=le),this},rr.noop=wu,rr.now=Ba,rr.pad=function(t,e,n){t=Ls(t);var r=(e=Ps(e))?_n(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return eo(An(i),n)+t+eo(On(i),n)},rr.padEnd=function(t,e,n){t=Ls(t);var r=(e=Ps(e))?_n(t):0;return e&&r<e?t+eo(e-r,n):t},rr.padStart=function(t,e,n){t=Ls(t);var r=(e=Ps(e))?_n(t):0;return e&&r<e?eo(e-r,n)+t:t},rr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Dn(Ls(t).replace(Et,""),e||0)},rr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Lo(t,e,n)&&(e=n=r),n===r&&("boolean"==typeof e?(n=e,e=r):"boolean"==typeof t&&(n=t,t=r)),t===r&&e===r?(t=0,e=1):(t=Cs(t),e===r?(e=t,t=0):e=Cs(e)),t>e){var i=t;t=e,e=i}if(n||t%1||e%1){var o=Bn();return Mn(t+o*(e-t+_e("1e-"+((o+"").length-1))),e)}return ui(t,e)},rr.reduce=function(t,e,n){var r=rs(t)?$e:tn,i=arguments.length<3;return r(t,bo(e,4),n,i,Pr)},rr.reduceRight=function(t,e,n){var r=rs(t)?Ve:tn,i=arguments.length<3;return r(t,bo(e,4),n,i,Or)},rr.repeat=function(t,e,n){return e=(n?Lo(t,e,n):e===r)?1:Ps(e),ci(Ls(t),e)},rr.replace=function(){var t=arguments,e=Ls(t[0]);return t.length<3?e:e.replace(t[1],t[2])},rr.result=function(t,e,n){var i=-1,o=(e=ji(e,t)).length;for(o||(o=1,t=r);++i<o;){var a=null==t?r:t[Jo(e[i])];a===r&&(i=o,a=n),t=ls(a)?a.call(t):a}return t},rr.round=Mu,rr.runInContext=t,rr.sample=function(t){return(rs(t)?dr:function(t){return dr(Zs(t))})(t)},rr.size=function(t){if(null==t)return 0;if(os(t))return bs(t)?_n(t):t.length;var e=Co(t);return e==H||e==G?t.size:Xr(t).length},rr.snakeCase=au,rr.some=function(t,e,n){var i=rs(t)?qe:vi;return n&&Lo(t,e,n)&&(e=r),i(t,bo(e,3))},rr.sortedIndex=function(t,e){return gi(t,e)},rr.sortedIndexBy=function(t,e,n){return _i(t,e,bo(n,2))},rr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=gi(t,e);if(r<n&&Za(t[r],e))return r}return-1},rr.sortedLastIndex=function(t,e){return gi(t,e,!0)},rr.sortedLastIndexBy=function(t,e,n){return _i(t,e,bo(n,2),!0)},rr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=gi(t,e,!0)-1;if(Za(t[n],e))return n}return-1},rr.startCase=su,rr.startsWith=function(t,e,n){return t=Ls(t),n=null==n?0:Sr(Ps(n),0,t.length),e=bi(e),t.slice(n,n+e.length)==e},rr.subtract=Nu,rr.sum=function(t){return t&&t.length?en(t,gu):0},rr.sumBy=function(t,e){return t&&t.length?en(t,bo(e,2)):0},rr.template=function(t,e,n){var i=rr.templateSettings;n&&Lo(t,e,n)&&(e=r),t=Ls(t),e=Ts({},e,i,co);var o,a,s=Ts({},e.imports,i.imports,co),u=qs(s),c=on(s,u),l=0,f=e.interpolate||Ut,h="__p += '",p=Kt((e.escape||Ut).source+"|"+f.source+"|"+(f===yt?Ft:Ut).source+"|"+(e.evaluate||Ut).source+"|$","g"),d="//# sourceURL="+(ne.call(e,"sourceURL")?(e.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++pe+"]")+"\n";t.replace(p,function(e,n,r,i,s,u){return r||(r=i),h+=t.slice(l,u).replace(Ht,fn),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),s&&(a=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+e.length,e}),h+="';\n";var v=ne.call(e,"variable")&&e.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(a?h.replace(ct,""):h).replace(lt,"$1").replace(ft,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=fu(function(){return Wt(u,d+"return "+h).apply(r,c)});if(g.source=h,cs(g))throw g;return g},rr.times=function(t,e){if((t=Ps(t))<1||t>E)return[];var n=O,r=Mn(t,O);e=bo(e),t-=O;for(var i=nn(r,e);++n<t;)e(n);return i},rr.toFinite=Cs,rr.toInteger=Ps,rr.toLength=Os,rr.toLower=function(t){return Ls(t).toLowerCase()},rr.toNumber=As,rr.toSafeInteger=function(t){return t?Sr(Ps(t),-E,E):0===t?t:0},rr.toString=Ls,rr.toUpper=function(t){return Ls(t).toUpperCase()},rr.trim=function(t,e,n){if((t=Ls(t))&&(n||e===r))return t.replace(kt,"");if(!t||!(e=bi(e)))return t;var i=yn(t),o=yn(e);return Fi(i,sn(i,o),un(i,o)+1).join("")},rr.trimEnd=function(t,e,n){if((t=Ls(t))&&(n||e===r))return t.replace(Ct,"");if(!t||!(e=bi(e)))return t;var i=yn(t);return Fi(i,0,un(i,yn(e))+1).join("")},rr.trimStart=function(t,e,n){if((t=Ls(t))&&(n||e===r))return t.replace(Et,"");if(!t||!(e=bi(e)))return t;var i=yn(t);return Fi(i,sn(i,yn(e))).join("")},rr.truncate=function(t,e){var n=30,i="...";if(ps(e)){var o="separator"in e?e.separator:o;n="length"in e?Ps(e.length):n,i="omission"in e?bi(e.omission):i}var a=(t=Ls(t)).length;if(hn(t)){var s=yn(t);a=s.length}if(n>=a)return t;var u=n-_n(i);if(u<1)return i;var c=s?Fi(s,0,u).join(""):t.slice(0,u);if(o===r)return c+i;if(s&&(u+=c.length-u),ys(o)){if(t.slice(u).search(o)){var l,f=c;for(o.global||(o=Kt(o.source,Ls(Rt.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var h=l.index;c=c.slice(0,h===r?u:h)}}else if(t.indexOf(bi(o),u)!=u){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+i},rr.unescape=function(t){return(t=Ls(t))&&dt.test(t)?t.replace(ht,mn):t},rr.uniqueId=function(t){var e=++re;return Ls(t)+e},rr.upperCase=uu,rr.upperFirst=cu,rr.each=La,rr.eachRight=Fa,rr.first=oa,bu(rr,(ju={},Ir(rr,function(t,e){ne.call(rr.prototype,e)||(ju[e]=t)}),ju),{chain:!1}),rr.VERSION="4.17.15",Ie(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){rr[t].placeholder=rr}),Ie(["drop","take"],function(t,e){sr.prototype[t]=function(n){n=n===r?1:In(Ps(n),0);var i=this.__filtered__&&!e?new sr(this):this.clone();return i.__filtered__?i.__takeCount__=Mn(n,i.__takeCount__):i.__views__.push({size:Mn(n,O),type:t+(i.__dir__<0?"Right":"")}),i},sr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),Ie(["filter","map","takeWhile"],function(t,e){var n=e+1,r=1==n||3==n;sr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:bo(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),Ie(["head","last"],function(t,e){var n="take"+(e?"Right":"");sr.prototype[t]=function(){return this[n](1).value()[0]}}),Ie(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");sr.prototype[t]=function(){return this.__filtered__?new sr(this):this[n](1)}}),sr.prototype.compact=function(){return this.filter(gu)},sr.prototype.find=function(t){return this.filter(t).head()},sr.prototype.findLast=function(t){return this.reverse().find(t)},sr.prototype.invokeMap=li(function(t,e){return"function"==typeof t?new sr(this):this.map(function(n){return Wr(n,t,e)})}),sr.prototype.reject=function(t){return this.filter(Ka(bo(t)))},sr.prototype.slice=function(t,e){t=Ps(t);var n=this;return n.__filtered__&&(t>0||e<0)?new sr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==r&&(n=(e=Ps(e))<0?n.dropRight(-e):n.take(e-t)),n)},sr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},sr.prototype.toArray=function(){return this.take(O)},Ir(sr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),i=/^(?:head|last)$/.test(e),o=rr[i?"take"+("last"==e?"Right":""):e],a=i||/^find/.test(e);o&&(rr.prototype[e]=function(){var e=this.__wrapped__,s=i?[1]:arguments,u=e instanceof sr,c=s[0],l=u||rs(e),f=function(t){var e=o.apply(rr,He([t],s));return i&&h?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=a&&!h,v=u&&!p;if(!a&&l){e=v?e:new sr(this);var g=t.apply(e,s);return g.__actions__.push({func:Ca,args:[f],thisArg:r}),new ar(g,h)}return d&&v?t.apply(this,s):(g=this.thru(f),d?i?g.value()[0]:g.value():g)})}),Ie(["pop","push","shift","sort","splice","unshift"],function(t){var e=Xt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);rr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(rs(i)?i:[],t)}return this[n](function(n){return e.apply(rs(n)?n:[],t)})}}),Ir(sr.prototype,function(t,e){var n=rr[e];if(n){var r=n.name+"";ne.call(Kn,r)||(Kn[r]=[]),Kn[r].push({name:e,func:n})}}),Kn[Xi(r,p).name]=[{name:"wrapper",func:r}],sr.prototype.clone=function(){var t=new sr(this.__wrapped__);return t.__actions__=Ui(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ui(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ui(this.__views__),t},sr.prototype.reverse=function(){if(this.__filtered__){var t=new sr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},sr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=rs(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Mn(e,t+a);break;case"takeRight":t=In(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=r?s:a-1,l=this.__iteratees__,f=l.length,h=0,p=Mn(u,this.__takeCount__);if(!n||!r&&i==u&&p==u)return Ei(t,this.__actions__);var d=[];t:for(;u--&&h<p;){for(var v=-1,g=t[c+=e];++v<f;){var _=l[v],y=_.iteratee,m=_.type,b=y(g);if(2==m)g=b;else if(!b){if(1==m)continue t;break t}}d[h++]=g}return d},rr.prototype.at=Pa,rr.prototype.chain=function(){return Ea(this)},rr.prototype.commit=function(){return new ar(this.value(),this.__chain__)},rr.prototype.next=function(){this.__values__===r&&(this.__values__=Es(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?r:this.__values__[this.__index__++]}},rr.prototype.plant=function(t){for(var e,n=this;n instanceof or;){var i=Yo(n);i.__index__=0,i.__values__=r,e?o.__wrapped__=i:e=i;var o=i;n=n.__wrapped__}return o.__wrapped__=t,e},rr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof sr){var e=t;return this.__actions__.length&&(e=new sr(this)),(e=e.reverse()).__actions__.push({func:Ca,args:[pa],thisArg:r}),new ar(e,this.__chain__)}return this.thru(pa)},rr.prototype.toJSON=rr.prototype.valueOf=rr.prototype.value=function(){return Ei(this.__wrapped__,this.__actions__)},rr.prototype.first=rr.prototype.head,Sn&&(rr.prototype[Sn]=function(){return this}),rr}();xe?((xe.exports=bn)._=bn,Se._=bn):we._=bn}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],377:[function(t,e,n){"use strict";t(380);const r=t(332),i=t(379);function o(t,e){return e.decode?r(t):t}function a(t,e){const n=function(t){let e;switch(t.arrayFormat){case"index":return(t,n,r)=>{e=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),e?(void 0===r[t]&&(r[t]={}),r[t][e[1]]=n):r[t]=n};case"bracket":return(t,n,r)=>{e=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),e?void 0!==r[t]?r[t]=[].concat(r[t],n):r[t]=[n]:r[t]=n};case"comma":return(t,e,n)=>{const r="string"==typeof e&&e.split("").indexOf(",")>-1?e.split(","):e;n[t]=r};default:return(t,e,n)=>{void 0!==n[t]?n[t]=[].concat(n[t],e):n[t]=e}}}(e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",parseNumbers:!1,parseBooleans:!1},e)),r=Object.create(null);if("string"!=typeof t)return r;if(!(t=t.trim().replace(/^[?#&]/,"")))return r;for(const a of t.split("&")){let[t,s]=i(a.replace(/\+/g," "),"=");s=void 0===s?null:o(s,e),e.parseNumbers&&!Number.isNaN(Number(s))&&"string"==typeof s&&""!==s.trim()?s=Number(s):!e.parseBooleans||null===s||"true"!==s.toLowerCase()&&"false"!==s.toLowerCase()||(s="true"===s.toLowerCase()),n(o(t,e),s,r)}return!1===e.sort?r:(!0===e.sort?Object.keys(r).sort():Object.keys(r).sort(e.sort)).reduce((t,e)=>{const n=r[e];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?t[e]=function t(e){return Array.isArray(e)?e.sort():"object"==typeof e?t(Object.keys(e)).sort((t,e)=>Number(t)-Number(e)).map(t=>e[t]):e}(n):t[e]=n,t},Object.create(null))}n.parse=a},{332:332,379:379,380:380}],380:[function(t,e,n){"use strict";e.exports=(t=>encodeURIComponent(t).replace(/[!'()*]/g,t=>`%${t.charCodeAt(0).toString(16).toUpperCase()}`))},{}],379:[function(t,e,n){"use strict";e.exports=((t,e)=>{if("string"!=typeof t||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[t];const n=t.indexOf(e);return-1===n?[t]:[t.slice(0,n),t.slice(n+e.length)]})},{}],382:[function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e,n){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=o(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function o(t){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var a=t(384),s=(a.log,a.error,t(390)),u=(s.sargs,s.xhr,s.uuid,t(333).EventEmitter2),c=t(1),l=t(375),f=function(t){function e(t,n,i){var a;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(a=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}(this,o(e).call(this)))._data=t||[],a._lastQueryArgs=null,a._lastFilter=null,a._queryFn=n,a._formatFn=i,a._lastQuery=null,a._eventsOff=0,a}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&function(t,e){(Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}(t,e)}(e,u),function(t,e,n){e&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e)}(e,[{key:"eventsOff",value:function(){this._eventsOff++}},{key:"eventsOn",value:function(){this._eventsOff>0&&(this._eventsOff--,0==this._eventsOff&&this.emit("refresh",this))}},{key:"emit",value:function(){if(0==this._eventsOff)return i(o(e.prototype),"emit",this).apply(this,arguments)}},{key:"query",value:function(t){var e=this;if(this._queryFn){var n=JSON.stringify(t);return this._lastFilter&&this._lastFilter==n?this._lastQuery:(this._lastFilter=n,this._lastQuery=this._queryFn(t).then(function(t){return e._data=t,e.emit("refresh",e),e._formatFn?e._formatFn(e._data):t}),this._lastQuery)}return a.warn("This DataStore has no query function"),new c(function(t,e){t(base._data)})}},{key:"find",value:function(t){return l.find(this._data,t)}},{key:"update",value:function(t,e){void 0===e&&(e=!0);var n=l.find(this._data,{id:t.id});return n?(l.merge(n,t),e&&this.emit("update",this,n)):(this._data.push(t),e&&this.emit("insert",this,t)),this}},{key:"bulkUpdate",value:function(t,e){var n=this;return void 0===e&&(e=!0),t.forEach(function(t){return n.update(t,e)}),this}},{key:"remove",value:function(t){var e=l.remove(this._data,t);return this.emit("remove",this,e),e}},{key:"data",get:function(){return this._data}}]),e}();e.exports={DataStore:f}},{1:1,333:333,375:375,384:384,390:390}],384:[function(t,e,n){"use strict";e.exports={LEVEL:{NONE:0,LOG:1,INFO:2,WARN:3,ERROR:4,DEBUG:5},level:0,group:function(t,n){var r=void 0;if(void 0!==console.group){console.group(t);try{r=n()}catch(t){throw e.exports.error(t),console.groupEnd(),t}console.groupEnd()}else try{r=n()}catch(t){throw e.exports.error(t),console.groupEnd(),t}return r},log:function(){e.exports.level>=e.exports.LEVEL.LOG&&void 0!==console.log&&console.log.apply(console,Array.from(arguments))},info:function(){e.exports.level>=e.exports.LEVEL.INFO&&void 0!==console.log&&console.info.apply(console,Array.from(arguments))},error:function(){e.exports.level>=e.exports.LEVEL.ERROR&&void 0!==console.error&&console.error.apply(console,Array.from(arguments))},warn:function(){e.exports.level>=e.exports.LEVEL.WARN&&void 0!==console.warn&&console.warn.apply(console,Array.from(arguments))},debug:function(){e.exports.level>=e.exports.LEVEL.DEBUG&&void 0!==console.debug&&console.debug.apply(console,Array.from(arguments))},table:function(){e.exports.level>=e.exports.LEVEL.DEBUG&&void 0!==console.table&&console.table.apply(console,Array.from(arguments))}}},{}],390:[function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function a(t,e){return!e||"object"!==c(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&function(t,e){(Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}(t,e)}function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var l=t(1),f=t(387),h=(f.htmlEncode,f.htmlDecode,f.queryEscape,t(333).EventEmitter2),p=(t(384),{}),d={ajax:function(t){return new l(function(e,n){var r=new XMLHttpRequest;if("string"==typeof t&&(t={url:t}),void 0===t.type&&(t.type="GET"),t.onprogress&&"function"==typeof t.onprogress.dispense&&(t.onprogress=t.onprogress.dispense()),r.open(t.type,t.url),t.headers)for(var i in t.headers)r.setRequestHeader(i,t.headers[i]);return r.onload=function(){if(200===r.status){var i=r.responseText;t.type&&"json"==t.type.toLowerCase()&&(i=JSON.parse(r.responseText)),t.onprogress&&t.onprogress.constructor==v&&t.onprogress.ondone(),e({body:i,xhr:r})}else n({status:r.status,xhr:r})},r.addEventListener("progress",function(e){var n;(n=e.lengthComputable?e.total:e.target.getResponseHeader("x-decompressed-content-length"))||(n=2*e.loaded);var r=e.loaded/n;t.onprogress&&("function"==typeof t.onprogress.onprogress?t.onprogress.onprogress(r,e.loaded,n):"function"==typeof t.onprogress&&t.onprogress(r,e.loaded,n))},!1),void 0===t.data?r.send():"object"==c(t.data)?r.send(JSON.stringify(t.data)):r.send(encodeURI(t.data)),null})},get:function(t){return"string"==typeof t&&(t={url:t}),t.type="GET",d.ajax(t)},post:function(t){return"string"==typeof t&&(t={url:t}),t.headers||(t.headers={}),"Content-Type"in t.headers||(t.headers["Content-Type"]="application/x-www-form-urlencoded"),t.type="POST",d.ajax(t)}},v=function(t){function e(t){var n;return r(this,e),(n=a(this,s(e).call(this))).tracker=t,n.loaded=0,n.total=0,n.percent=0,n}return u(e,h),o(e,[{key:"onprogress",value:function(t,e,n){this.percent=t,this.loaded=e,this.total=n,this.emit("progress",this,t,e,n)}},{key:"ondone",value:function(){this.percent=1,this.loaded=this.total,this.emit("done",this,this.percent,this.loaded,this.total)}}]),e}(),g=function(t){function e(){var t;return r(this,e),(t=a(this,s(e).call(this))).children=[],t.isDone=!1,t}return u(e,h),o(e,[{key:"_onChildProgress",value:function(){for(var t=0,e=0,n=0,r=0;r<this.children.length;r++){var i=this.children[r];t+=i.percent,e=i.total,n=i.loaded}t/=this.children.length,this.percent=t,this.loaded=n,this.total=e,this.emit("progress",this,this.percent,this.loaded,this.total),this.percent>=1?(this.isDone=!0,this.emit("done",this,this.percent,this.loaded,this.total)):this.isDone=!1}},{key:"dispense",value:function(){var t=new v(this);return this.children.push(t),t.on("progress",this._onChildProgress.bind(this)),t.on("done",this._onChildProgress.bind(this)),this.isDone=!1,t}}]),e}();e.exports={xhr:d,ProgressTracker:g,uuid:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)})},sargs:function(){var t=arguments[0];"[object Arguments]"===Object.prototype.toString.call(t)&&(t=Array.from(t));var n=Array.from(arguments).splice(1),r={};for(var i in n){var o,a=n[i],s=void 0;if(s=t.constructor===Array?i in t?t[i]:a.default:a.arg in t?t[a.arg]:a.default,a.merge&&(void 0===s&&(s={}),s=Object.assign(a.merge,s)),void 0===s&&void 0!==a.required)throw o=a.required instanceof String?new Error(a.required):a.required instanceof Error?a.required:new Error('Argument "'.concat(a.arg,'" is required.')),Error.captureStackTrace(o,e.exports.sargs),o;r[a.arg]=s}return r},wrap:function(t,e,n,r){return n||(n=function(){}),function(){e&&e.apply(t,arguments);var i=n.apply(t,arguments);return r&&(i=r.apply(t,i,arguments)),i}},require:function(t){var e=null;return"object"==c(t)?t=(e=t).url:e={url:t},e.nocache&&(e.url+="?_nocache="+Math.floor(Date.now()),void 0===e.headers&&(e.headers={}),e.headers["Cache-Control"]="no-cache"),t in p?p[t]:(p[t]=d.get(e).then(function(e){var n,r=t.split(".").splice(-1);return"js"==r?n=document.createElement("script"):"css"==r?n=document.createElement("style"):"json"==r&&(e=JSON.parse(e.body)),n&&(n.appendChild(document.createTextNode(e.body)),document.getElementsByTagName("head")[0].appendChild(n)),e}),p[t])}}},{1:1,333:333,384:384,387:387}],383:[function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}function s(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&function(t,e){(Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}(t,e)}var l=t(384),f=(l.log,l.error,t(390)),h=f.sargs,p=(f.xhr,f.uuid,t(386)),d=(p.Feed,p.ProductFeed,p.CartFeed,t(382).DataStore,t(333).EventEmitter2),v=t(1),g=(t(375),function(t){function e(){var t;return i(this,e),(t=s(this,u(e).call(this)))._totals={grand_total:0},t._discounts=null,t}return c(e,d),a(e,[{key:"init",value:function(){return new v(function(t,e){t({data:[],success:!0})})}},{key:"getTotals",value:function(){return this._totals}},{key:"getDiscounts",value:function(){return this._discounts}},{key:"getCurrency",value:function(){return null}},{key:"getCurrencySymbol",value:function(){return null}},{key:"formatCurrency",value:function(t){return null}},{key:"getProductBySKU",value:function(t,e){return null}},{key:"fetchProducts",value:function(t,e,n,r){return null}},{key:"fetchCartSession",value:function(){return null}},{key:"sessionAction",value:function(t,e){return null}},{key:"loadTemplate",value:function(t){return null}},{key:"validate",value:function(){}}]),e}()),_=function(t){function e(t,n,r){var o;return i(this,e),(o=s(this,u(e).call(this)))._products=t||[],o._sessionHandler=n,o._sessionActionHandler=r,o}return c(e,g),a(e,[{key:"init",value:function(){var t=this;return new v(function(e,n){if(0==t._products.length)for(var r=1;r<11;r++)t._products.push({sku:"sku00".concat(r),name:"Demo Item ".concat(r),min:1,imageUrl:"http://placehold.it/400x250/?text400x250",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras congue, erat vel molestie pharetra, enim risus euismod libero, et aliquet neque libero ac dui.",price:Math.floor(10*Math.random())+10,tags:["demo"]});e(t.fetchCartSession())})}},{key:"getCurrency",value:function(){return"USD"}},{key:"getCurrencySymbol",value:function(){return"$"}},{key:"formatCurrency",value:function(t,e){return"$".concat(t.toFixed(e))}},{key:"fetchCartSession",value:function(){var t=this;return new v(function(e,n){t._sessionHandler?t._sessionHandler(e,n):e({data:[],success:!0})})}},{key:"sessionAction",value:function(t,e){var n=this;return new v(function(r,i){n._sessionActionHandler?n._sessionActionHandler(t,e,r,i):r({data:null,success:!0})})}},{key:"getProductBySKU",value:function(t,e){var n=this;return new v(function(e,r){var i=n._products.filter(function(e){return e.sku==t});e(i.length>0&&i[0])})}},{key:"fetchProducts",value:function(){var t=h(arguments,{arg:"tags",default:[]},{arg:"terms"},{arg:"start",default:0},{arg:"limit",default:9}),e=t.tags,n=(t.terms,t.start),r=t.limit;return new v(function(t,i){for(var o=[],a=n;a<n+r;a++){var s=this._products[a];e?s.tags.every(function(t){return e.indexOf(t)>=-1})&&o.push(s):o.push(s)}t(o)}.bind(this))}}]),e}();e.exports={StoreAdapter:g,DemoStoreaAdapter:_}},{1:1,333:333,375:375,382:382,384:384,386:386,390:390}],386:[function(t,e,n){"use strict";function r(t,e,n){return(r="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=c(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}function u(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?l(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&function(t,e){(Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}(t,e)}var h=t(384),p=(h.log,h.error,t(390)),d=p.sargs,v=(p.xhr,p.uuid,t(333).EventEmitter2),g=(t(1),t(382).DataStore),_=(t(375),function(t){function e(){var t;o(this,e),t=u(this,c(e).call(this));var n=d(arguments,{arg:"cart",required:1},{arg:"name",required:1},{arg:"options",default:{}});t.cart=n.cart,t.name=n.name;try{t.options=d(n.options,{arg:"dataSource",required:1},{arg:"idField",default:"id"},{arg:"container",required:1},{arg:"tpl",required:1},{arg:"filters",default:[]},{arg:"sort",default:null})}catch(t){throw t}return t._waitFor=[],t._freezeHeight=0,t._lastUnfreeze=null,t.cart.on("init",t.onInit.bind(l(t))),t.options.dataSource.constructor===g&&t.options.dataSource.on("updated",t.update.bind(l(t))),t}return f(e,v),s(e,[{key:"onInit",value:function(){this.update()}},{key:"updateWaitFor",value:function(t){this._waitFor.push(t)}},{key:"update",value:function(){var t=this;this.emit("update",this);var e=this.options.dataSource;"function"!=typeof e&&(e=this.options.dataSource.query.bind(this.options.dataSource)),e(this.filters).then(this.options.tpl.isFulfilledPassthrough()).then(function(e){return t.options.sort?e.sort(t.options.sort):e}).then(function(e){t.items=[];var n=0;for(var r in e)t.items.push(e[r]),n++;var i={items:t.items,is_empty:0==n},o=t.options.tpl.beginRender(i);return t.freezeHeight(),t.empty(),t.container.insertAdjacentHTML("beforeend",o),t.emit("tpl-inserted"),t.options.tpl.once("tpl-end-render",function(){t.emit("updated",t,t.products),t.unfreezeHeight()}),t.options.tpl.endRender()}).catch(function(t){h.error(t)})}},{key:"freezeHeight",value:function(){if(!(this._freezeHeight>0)){this._freezeHeight+=1;var t=this.container;if(!t)throw new Error('Invalid container for feed "'+this.name+'"');var e=t.clientHeight;t.style.height=e+"px"}}},{key:"unfreezeHeight",value:function(){var t=this;if(this._freezeHeight>1)this._freezeHeight-=1;else{this._freezeHeight-=1,this._freezeHeight<0&&(this._freezeHeight=0);var e=this.container;if(!e)throw new Error('Invalid container for feed "'+this.name+'"');this._lastUnfreeze&&clearTimeout(this._lastUnfreeze),this._lastUnfreeze=setTimeout(function(){e.style.height="",t._lastUnfreeze=null},200)}}},{key:"empty",value:function(){var t=this.container;if(!t)throw new Error('Invalid container for feed "'+this.name+'"');for(;t.hasChildNodes();)t.removeChild(t.lastChild)}},{key:"container",get:function(){return document.querySelector(this.options.container)}},{key:"filters",get:function(){return this.options.filters},set:function(t){this.options.filters=t||[],this.update()}}]),e}()),y=function(t){function e(){var t;o(this,e);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return u(this,(t=c(e)).call.apply(t,[this].concat(r)))}return f(e,_),e}(),m=function(t){function e(){var t;o(this,e);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return u(this,(t=c(e)).call.apply(t,[this].concat(r)))}return f(e,_),s(e,[{key:"onInit",value:function(){r(c(e.prototype),"onInit",this).call(this),this.cart.on("updated",this.update.bind(this))}}]),e}();e.exports={Feed:_,ProductFeed:y,CartFeed:m}},{1:1,333:333,375:375,382:382,384:384,390:390}],385:[function(t,e,n){"use strict";e.exports={customError:function(t,e){var n=function t(){"captureStackTrace"in Error?Error.captureStackTrace(this,t):this.stack=(new Error).stack,e.apply(this,arguments)};return(n.prototype=Object.create(Error.prototype)).name=t,n.prototype.constructor=n,n}}},{}],387:[function(t,e,n){"use strict";var r=document.createElement("pre"),i=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,o=/([^\#-~| |!])/g;e.exports={htmlEncode:function(t){return null==t&&(t=""),t.replace(/&/g,"&amp;").replace(i,function(t){return"&#"+(1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320)+65536)+";"}).replace(o,function(t){return"&#"+t.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")},htmlDecode:function(t){return null==t&&(t=""),t=t.replace(/</g,"&lt;"),r.innerHTML=t,r.textContent},queryEscape:function(t){return t?t.replace(/#(\d)/,"#\\3$1 "):[]},hasClass:function(t,e){return" ".concat(t.className," ").indexOf(" ".concat(e," "))>-1},addClass:function(t,e){t.classList.add(e)},removeClass:function(t,e){t.classList.remove(e)},hasAttr:function(t,e){return t.hasAttribute(e)},getAttr:function(t,n){return e.exports.htmlDecode(t.getAttribute(n))},setAttr:function(t,e,n){t.setAttribute(e,n)},queryAll:function(t,n){return void 0===n&&(n=document),n.querySelectorAll(e.exports.queryEscape(t))},queryFirst:function(t,n){var r=e.exports.queryAll(t,n);return r.length>0&&r[0]}}},{}],388:[function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function o(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}t(2);var a=t(384),s=(a.log,a.error,t(390)),u=s.sargs,c=s.xhr,l=s.uuid,f=s.ProgressTracker,h=t(387),p=h.htmlEncode,d=h.htmlDecode,v=h.queryAll,g=h.hasClass,_=h.addClass,y=h.removeClass,m=h.hasAttr,b=h.setAttr,w=h.getAttr,S=h.queryFirst,x=t(385),k=t(389),E=k.Template,C=t(386),P=(C.Feed,C.ProductFeed),O=C.CartFeed,A=t(382).DataStore,j=t(383),L=j.StoreAdapter,F=j.DemoStoreaAdapter,R=t(333).EventEmitter2,T=t(1),I=t(377),M=t(375),N=function(t){function n(){var t;(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,n),(t=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}(this,i(n).call(this)))._cart=new A([],t._queryCart.bind(o(t)),t.fetchCartItems.bind(o(t))),t._lastTotalCount=0,t._lastTotalItems=0;var a=u(arguments,{arg:"options",default:{}}).options;return t.options=u(a,{arg:"storeAdapter",default:e.exports.default_store_adapter||new F,required:1},{arg:"currencyDecimals",default:2},{arg:"feeds",default:{}},{arg:"sessionStoreUrl",default:!1}),t.storeAdapter=t.options.storeAdapter,window.addEventListener("hashchange",function(e){t.emit("hashchange",e)}),t._cart.on("update",t._onCartDataUpdate.bind(o(t))),t._cart.on("insert",t._onCartDataInsert.bind(o(t))),t._cart.on("remove",t._onCartDataRemove.bind(o(t))),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&function(t,e){(Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}(t,e)}(n,R),function(t,e,n){e&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e)}(n,[{key:"_onCartDataUpdate",value:function(t,e){var n=this;a.log("On cart update",arguments);var r={};return M.each(["id","qty","sku"],function(t){r[t]=e[t]}),this.storeAdapter.sessionAction("updateItem",[r]).then(function(t){if(t.shipping_rates){var e=JSON.stringify(t.shipping_rates);n._shipping_rates_cache!=e&&(n._shipping_rates_cache=e,n.emit("shipping_rates",t.shipping_rates))}n._updateBulkCartData(t).then(function(){n._emitUpdated()})})}},{key:"_onCartDataInsert",value:function(t,e){a.log("On cart insert",arguments)}},{key:"_onCartDataRemove",value:function(t,e){a.log("On cart remove",arguments)}},{key:"_updateBulkCartData",value:function(t){var e=this,n=[];return this._cart.eventsOff(),t.removed&&this._cart.remove(function(e){return t.removed.indexOf(e.id)>-1}),M.each(t.data,function(t){n.push(function(t){var e=this;return new T(function(n,r){e.storeAdapter.getProductBySKU(t.sku).then(function(r){if(r){var i={product:r,qty:t.qty,id:t.id,unit:t.unit,lock_qty:t.lock_qty?1:0,base_price:t.base_price,total:t.total};t.options&&(i.options=t.options),e._cart.update(i),n(i)}n(!1)}).catch(function(e){a.error("Error fetching product details during cart item update for item",t),a.error(e),n(!1)})})}.bind(e)(t))}),T.all(n).then(function(){return e._cart.eventsOn(),!0}).catch(function(t){e._cart.eventsOn(),a.error("Error while updating cart items"),a.error(t)})}},{key:"formatCurrency",value:function(t){return this.storeAdapter.formatCurrency(t)}},{key:"template",value:function(t){var n=this.storeAdapter.loadTemplate(t);if(n||(n=e.exports.loadTemplate(t)),n.constructor==E)return n;n=e.exports.loadTemplate(n);var r=new E(n,this);return r.on("tpl-end-render",this._on_tpl_end_render.bind(this)),r}},{key:"newProductFeed",value:function(t,e){e=u(e,{arg:"dataSource",default:this.storeAdapter.products},{arg:"idField",default:"sku"},{arg:"filters"},{arg:"container"},{arg:"tpl"},{arg:"sort",default:function(t,e){return e.price-t.price}});try{this.options.feeds[t]=new P(this,t,e),this.options.feeds[t].on("updated",this.updateUI.bind(this))}catch(t){throw t}}},{key:"newCartFeed",value:function(t,e){e=u(e,{arg:"dataSource",default:this._cart},{arg:"idField",default:"id"},{arg:"filters"},{arg:"container"},{arg:"tpl"}),this.options.feeds[t]=new O(this,t,e),this.options.feeds[t].on("updated",this.updateUI.bind(this))}},{key:"_queryCart",value:function(t){var e=this;return new T(function(t){t(e._cart.data)})}},{key:"fetchCartItems",value:function(t){var e=this;return new T(function(t,n){var r=[],i={};for(var o in e._cart.data){var a=e._cart.data[o],s={id:a.id,qty:a.qty,unit:a.unit,base_price:a.base_price,total:a.total,lock_qty:a.lock_qty?1:0,options:a.options,product:{name:a.product.name,sku:a.product.sku,imageUrl:a.product.imageUrl},subgroups:[]};if(a.options&&a.options.group&&!a.options.subgroup){var u=null;a.options.group in i&&(u=i[a.options.group].subgroups),i[a.options.group]=s,u&&(s.subgroups=u)}if(a.options&&a.options.group&&a.options.subgroup){a.options.group in i||(i[a.options.group]={subgroups:[]});var c=null;for(var l in i[a.options.group].subgroups)if(i[a.options.group].subgroups[l].name==a.options.subgroup){c=i[a.options.group].subgroups[l];break}c||(c={name:a.options.subgroup,items:[]},i[a.options.group].subgroups.push(c)),c.items.push(s)}else r.push(s)}return t(r),null})}},{key:"_onFromIdChange",value:function(t,e,n){b(e,"data-awc-id",t.value)}},{key:"_validateChildOptions",value:function(t,e,n){var r=t.selectors[e+1];if(r){var i=v(r);if(i.length>0){i=i[0];for(var o=0;o<i.length;o++){var a=i.options[o],s=d(a.value);n[e+1]=s;var u=n.join(",");void 0===t.hashes[u]?b(a,"disabled","disabled"):a.removeAttribute("disabled")}}}}},{key:"_onOptionElChange",value:function(t,e,n){for(var r=this,i=[],o=-1,s=0;s<e.selectors.length;s++){var u=e.selectors[s],c=v(u);if(c.length>0){var l=c[0],f=d(l.value);l==t&&(o=s),i.push(f)}}var h=i.join(","),p=e.hashes[h],g=e.price_selector;if(b(e.btn,"data-id",p),g){var _=v(g);if(_.length>0){var y=_[0];this.getProductBySKU(p).then(function(t){return a.log(t),y.textContent=r.storeAdapter.formatCurrency(t.price),t})}}this._validateChildOptions(e,o,i),e.validate()}},{key:"_onAdjustQtyChange",value:function(t,e,n){this._cart.update({id:e.item_id,qty:parseInt(t.value)})}},{key:"_validateAddToCartBtn",value:function(t,e){var n=!0;if(void 0===w(t,"data-id")&&(n=!1),e.custom_fields)for(var r=0;r<e.custom_fields.length;r++){var i=e.custom_fields[r];i.required&&(i.el.value||(n=!1))}n?(y(t,"disabled"),y(t,"btn-disabled")):(_(t,"disabled"),_(t,"btn-disabled"))}},{key:"updateUI",value:function(){for(var t=this,e=v("[data-awc-addtocart]"),n=0;n<e.length;n++){var r=e[n];if(!g(r,"awc-bound")){var i={};_(r,"awc-bound");var o=this._validateAddToCartBtn.bind(this,r,i);if(i.validate=o,m(r,"data-awc-id-from")){var s=w(r,"data-awc-id-from"),u=v(s);u.length>0&&(u=u[0]).addEventListener("change",this._onFromIdChange.bind(this,u,r))}if(m(r,"data-awc-options")){var c={price_selector:w(r,"data-awc-price-selector"),selectors:w(r,"data-awc-options-selectors").split(",").filter(function(t){return null!=t&&""!=t}),hashes:JSON.parse(w(r,"data-awc-options-hashes")),btn:r,validate:o},l=null;for(n=0;n<c.selectors.length;n++){var f=c.selectors[n],h=v(f);if(h.length>0){var p=h[0];null==l&&(l=p),p.addEventListener("change",this._onOptionElChange.bind(this,p,c))}else a.log("Could not bind to variant widget: ",f)}this._onOptionElChange.bind(this,l,c)()}if(m(r,"data-awc-qty-from")){var y=r.dataset.awcQtyFrom,b=[];try{b=v(y)}catch(t){a.error(t)}b.length>0&&b[0].addEventListener("change",function(t){var e=parseInt(t.target.value);isNaN(e)&&(e=1),t.target.value=e})}if(m(r,"data-awc-custom-fields")){var x=r.dataset.awcCustomFields;try{b=v(x+" [data-awc-custom-field]")}catch(t){a.error(t)}if(b.length>0){var k=[];for(n=0;n<b.length;n++)k.push({field_name:b[n].dataset.awcCustomField,required:"yes"==b[n].dataset.awcRequired,el:b[n]}),b[n].addEventListener("change",o);i.custom_fields=k}}r.addEventListener("click",this._onAddToCartClick.bind(this,i)),o()}}var E=v("[data-awc-removefromcart]");for(n=0;n<E.length;n++)r=E[n],g(r,"awc-bound")||(r.addEventListener("click",this._onRemoveFromCartClick.bind(this)),_(r,"awc-bound"));var C=v("[data-awc-adjustqty]");for(n=0;n<C.length;n++){var P=C[n];if(!g(P,"awc-bound")){var O={item_id:P.dataset.awcId||P.dataset.id};void 0===O.item_id&&a.warn("data-awc-adjustqty requires to be paired with data-awc-id or data-id to function",P),O.item_id=d(O.item_id),P.addEventListener("change",this._onAdjustQtyChange.bind(this,P,O)),_(P,"awc-bound")}}v("[data-awc-coupon-apply]").forEach(function(e,n){g(e,"awc-bound")||(_(e,"awc-bound"),e.addEventListener("click",function(e){var n=S(e.target.dataset.awcCouponApply);if(n){var r=n.value;t.applyCoupon(r).then(function(n){if(e.target.dataset.awcOnSuccess){var r=e.target.dataset.awcOnSuccess.split("."),i=window;try{r.forEach(function(t,e){i=i[t]}),"function"==typeof i&&i(n)}catch(t){a.error(t)}return t._updateBulkCartData(n).then(function(){return n})}return n}).then(function(e){return t._emitUpdated(),e}).catch(function(t){if(e.target.dataset.awcOnReject){var n=e.target.dataset.awcOnReject.split("."),r=window;try{n.forEach(function(t,e){r=r[t]}),"function"==typeof r&&r(t)}catch(t){a.error(t)}}})}}))}),v("[data-awc-coupon-remove]").forEach(function(e,n){g(e,"awc-bound")||(_(e,"awc-bound"),e.addEventListener("click",function(e){t.removeCoupon()}))})}},{key:"_onAddToCartClick",value:function(t,e){t.validate(e);var n=e.target,r=d(n.dataset.id),i=n.dataset.qty||n.dataset.awcQty||void 0;if(void 0===i){var o=n.dataset.awcQtyFrom,s=[];try{s=v(o)}catch(t){a.error(t)}s.length>0?(i=parseInt(s[0].value),isNaN(i)&&(i=1),s[0].value=i):(a.warn("Could not get qty from ",o),i=1)}var u=n.dataset.awcOptions;if(!g(n,"disabled")){if(u&&u instanceof String&&(u=I.parse(u)),t.custom_fields){u||(u={}),u.custom||(u.custom={});for(var c=0;c<t.custom_fields.length;c++){var l=t.custom_fields[c],f=l.el.value;u.custom[l.field_name]=f}}this.addToCart(r,i,u)}}},{key:"_onRemoveFromCartClick",value:function(t){var e=t.target,n=e.dataset.id;this.removeFromCart(n).catch(function(t){a.debug(e,n,e.dataset),a.error(t)})}},{key:"validate",value:function(){this.storeAdapter.validate.apply(this.storeAdapter,arguments)}},{key:"adjustQty",value:function(t,e){this._cart.update({id:t,qty:e})}},{key:"applyCoupon",value:function(t){var e=this;return this.coupon_code=t,this.storeAdapter.sessionAction("applyCoupon",[t]).then(function(t){return e._emitUpdated(),e.emit("coupon-applied"),t})}},{key:"removeCoupon",value:function(){var t=this;this.coupon_code=null;var e=this;return this.storeAdapter.sessionAction("removeCoupon",[]).then(function(t){t.removed&&e._cart.remove(function(e){return t.removed.indexOf(e.id)>-1})}).then(function(){return t._emitUpdated(),t.emit("coupon-removed"),!0})}},{key:"addToCart",value:function(){var t,e=this,n=this;t=arguments[0].constructor===Array?arguments[0]:[Array.from(arguments)];var r=[],i=[],o=[];for(var s in t){var c=t[s];!function(t,e){o.push(n.storeAdapter.getProductBySKU(t.sku).then(function(e){var o;return!!e&&(r.push(o={product:e,qty:t.qty,options:t.options,id:l(),unit:e.price,base_price:e.base_price,total:e.price*t.qty}),i.push({id:o.id,qty:o.qty,sku:o.product.sku,replaces:t.replaces,options:o.options||{}}),n._cart.data.push(o),!0)}))}(u(c,{arg:"sku",required:1},{arg:"qty",default:1},{arg:"options",default:{}},{arg:"replaces",default:""}))}return T.join.apply(T,o).then(function(){return e.storeAdapter.sessionAction("addToCart",i).then(function(t){for(var e in t.data){var r=t.data[e],i=null;(i=n._cart.find({id:r.old_id}))&&(i.id=r.id,i.qty=r.qty,i.sku=r.sku,i.lock_qty=r.lock_qty?1:0,i.options=r.options,i.unit=r.unit,i.base_price=r.base_price,i.total=r.total)}return t.removed&&n._cart.remove(function(e){return t.removed.indexOf(e.id)>-1}),t}).catch(function(t){a.error("Error adding items to cart",t)})}).then(function(){return e._emitUpdated(),a.table(e._cart.data),e.emit("add-to-cart-completed"),!0})}},{key:"removeFromCart",value:function(t){var e=this;return new T(function(n,r){if(t)return e._cart.remove(function(e){return e.id==t}),a.info("Sending removeFromCart request"),e.storeAdapter.sessionAction("removeFromCart",{id:t}).then(function(t){return e._cart.remove(function(e){return t.removed.indexOf(e.id)>-1}),a.info("Server returned success"),e._emitUpdated(),a.table(e._cart.data),!0}).catch(function(t){a.error(t)});r("Invalid id")})}},{key:"calculate_shipping",value:function(t,e){var n=this;return this.storeAdapter.sessionAction("calculate_shipping",{name:t,address:e}).then(function(t){return JSON.stringify(t.shipping_rates),n.emit("shipping_rates",t.shipping_rates,t),n._emitUpdated(),t})}},{key:"calculateShipping",value:function(t,e){return this.calculate_shipping(t,e)}},{key:"getProductBySKU",value:function(t,e){return this.storeAdapter.getProductBySKU(t,e)}},{key:"applyTpl",value:function(t,e,n){var r=this;return e.promiseReady().then(function(){new R({});var i=e.beginRender(n);return("string"==typeof t?document.querySelector(t):t).innerHTML=i,r.emit("tpl-inserted"),e.endRender()})}},{key:"_on_tpl_end_render",value:function(){this.emit("tpl-ready")}},{key:"_emitUpdated",value:function(){this.emit("updated"),this._lastTotalItems=this.totalItems,this._lastTotalCount=this.totalCount}},{key:"removeFromCartBySKU",value:function(t,e){return u(arguments,{arg:"sku",required:1},{arg:"qty",default:1}),new T(function(t,e){})}},{key:"bootstrap",value:function(){var t=this;return this.storeAdapter.init().then(function(e){return!!e.success&&t._updateBulkCartData({data:e.data.items}).then(function(){return t.emit("init"),t._emitUpdated(),!0})}).catch(function(t){a.error("Could not initialize Store Adapter!"),a.error(t)})}},{key:"totals",get:function(){return this.storeAdapter.getTotals()}},{key:"discounts",get:function(){return this.storeAdapter.getDiscounts()}},{key:"totalItems",get:function(){return this._cart.data.length}},{key:"lastTotalItems",get:function(){return this._lastTotalItems}},{key:"totalCount",get:function(){var t=0;for(var e in this._cart.data){var n=!0;this._cart.data[e].options&&this._cart.data[e].options.subgroup&&(n=!1),n&&(t+=this._cart.data[e].qty||0)}return t}},{key:"feed",get:function(){return this.options.feeds}},{key:"lastTotalCount",get:function(){return this._lastTotalCount}},{key:"items",get:function(){return this._cart.data}}]),n}();e.exports={debug:a,AwesomeCart:N,DemoStoreaAdapter:F,StoreAdapter:L,DataStore:A,ProgressTracker:f,utils:s,loadTemplate:function(t){return"string"==typeof t?c.get(t).then(function(t){return k.Handlebars.compile(t.body)}):(t.contructor==E&&(t=t.resource),t.then(function(t){return"string"==typeof t?k.Handlebars.compile(t):t}))},parseHash:function(){var t={},e=null,n=decodeURIComponent(window.location.hash.replace("#","")).trim().split("&");for(var r in n)(e=n[r].split("=")).length>1&&(t[e[0].trim()]=e[1].trim());return t},Errors:x,Handlebars:k.Handlebars,Promise:T,uuid:l,get:c.get,post:c.post,Template:E,htmlEncode:p,htmlDecode:d,_:M,require:s.require},e.exports.getTemplate=e.exports.loadTemplate},{1:1,2:2,333:333,375:375,377:377,382:382,383:383,384:384,385:385,386:386,387:387,389:389,390:390}],389:[function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var o=t(387),a=o.htmlEncode,s=o.htmlDecode,u=t(333).EventEmitter2,c=t(390),l=t(363),f=t(1),h=function(t){function e(t,n){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(o=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}(this,i(e).call(this)))._cart=n,o._waitFor=[],o.resource=t,o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&function(t,e){(Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}(t,e)}(e,u),function(t,e,n){e&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e)}(e,[{key:"promiseReady",value:function(){var t=this;return new f(function(e,n){t.resource.then(function(){return e(t),!0}).catch(function(t){return n(t),!1})})}},{key:"updateWaitFor",value:function(t){this._waitFor.push(t)}},{key:"beginRender",value:function(t){var e=this.resource.value();return this.emit("tpl-start-render"),e(Object.assign({$cart:this._cart,$parent:this,$tpl:this},t))}},{key:"endRender",value:function(){var t=this;return this._waitFor.length>0?f.join.apply(f,this._waitFor).then(function(){return t._waitFor=[],t.emit("tpl-end-render"),t.emit("tpl-ready"),!0}):new f(function(e,n){t.emit("tpl-end-render"),t.emit("tpl-ready"),e(!0)})}},{key:"delayedTpl",value:function(t,e,n){var r=this._cart,i=this._cart.template(e).promiseReady().then(function(e){var i=e.beginRender(n),o=document.getElementById(t);return!!o&&(o.innerHTML=i,o.className="awc-placeholder loaded",e.endRender().then(function(t){return r.updateUI(),t}))});n.$parent.updateWaitFor(i)}},{key:"isFulfilledPassthrough",value:function(t){var e=this;return function(n){return e.resource.isFulfilled()?t||n:new f(function(r,i){e.resource.then(function(){r(t||n)}).catch(function(t){i(t)})})}}}]),e}();l.registerHelper("sub",function(){for(var t=arguments[0],e=1;e<arguments.length-1;e++)t-=arguments[e];return t}),l.registerHelper("add",function(){for(var t=arguments[0],e=1;e<arguments.length-1;e++)t+=arguments[e];return t}),l.registerHelper("mul",function(){for(var t=arguments[0],e=1;e<arguments.length-1;e++)t*=arguments[e];return t}),l.registerHelper("div",function(){for(var t=arguments[0],e=1;e<arguments.length-1;e++)t/=arguments[e];return t}),l.registerHelper("mod",function(t,e,n){return t%e}),l.registerHelper("difPercentOf",function(t,e,n){return 100*(e-t)/e}),l.registerHelper("percentOf",function(t,e,n){return 100*t/e}),l.registerHelper("toFixed",function(t,e,n){return t.toFixed(e)}),l.registerHelper("not",function(t,e){return!t}),l.registerHelper("eq",function(t,e,n){return t==e}),l.registerHelper("ne",function(t,e,n){return t!=e}),l.registerHelper("gt",function(t,e,n){return t>e}),l.registerHelper("lt",function(t,e,n){return t<e}),l.registerHelper("ge",function(t,e,n){return t>=e}),l.registerHelper("le",function(t,e,n){return t<=e}),l.registerHelper("or",function(t,e,n){for(var r=0;r<arguments.length-1;r++)if("function"!=typeof arguments[r]&&arguments[r])return arguments[r];return!1}),l.registerHelper("and",function(t,e,n){return t&&e}),l.registerHelper("template",function(t,e,n){var r=awc.uuid();return e.$cart=n.data.root.$cart,e.$parent=n.data.root.$parent,e.$tpl=n.data.root.$tpl,e.$tpl.delayedTpl(r,t,e),'<div id="'+r+'" class="awc-placeholder loading"></div>'}),l.registerHelper("json",function(t,e){return JSON.stringify(t)}),l.registerHelper("escape",function(t,e){return t?t.replace(/(['"])/g,"\\$1"):""}),l.registerHelper("htmlEncode",function(t,e){return a(t)}),l.registerHelper("htmlDecode",function(t,e){return s(t)}),l.registerHelper("cssEscape",function(t,e){return t?t.replace(/[^a-z0-9\-]/gi,"_"):""}),l.registerHelper("eachEven",function(t,e){if(t&&t.length>0){for(var n="",r=0;r<t.length;r++){var i=t[r];i.$index=r,i.$is_first=0==r?1:0,i.$is_even=r%2==0,n+=e.fn(i)}return n}return e.inverse(this)}),l.registerHelper("is_even",function(t,e){return t%2==0?e.fn(this):e.inverse(this)}),l.registerHelper("is_odd",function(t,e){return t%2==1?e.fn(this):e.inverse(this)}),l.registerHelper("currency",function(t,e){var n=e.data.root;if(void 0===n.$cart)throw debug.error("Contexts: ",n,this),new Error("Cart not found in current context.");return void 0===t?"":n.$cart.storeAdapter.formatCurrency(t)}),l.registerHelper("jsinclude",function(t,e){return c.require(t),""}),e.exports={Handlebars:l,Template:h}},{1:1,333:333,363:363,387:387,390:390}]},{},[388])(388)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQmx1ZUJpcmQvanMvYnJvd3Nlci9ibHVlYmlyZC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9saWIvX2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwibm9kZV9tb2R1bGVzL2RlY29kZS11cmktY29tcG9uZW50L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjIvbGliL2V2ZW50ZW1pdHRlcjIuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9uby1jb25mbGljdC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci92aXNpdG9yLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci9jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvamF2YXNjcmlwdC1jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9leGNlcHRpb24uanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci93aGl0ZXNwYWNlLWNvbnRyb2wuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL2NvZGUtZ2VuLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvc291cmNlLW1hcC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvcHJpbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy9pbmxpbmUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL3dpdGguanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3V0aWwuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LXZscS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmluYXJ5LXNlYXJjaC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9tYXBwaW5nLWxpc3QuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3NwbGl0LW9uLWZpcnN0L2luZGV4LmpzIiwic3JjL0RhdGFTdG9yZS5qcyIsInNyYy9kZWJ1Zy5qcyIsInNyYy91dGlscy5qcyIsInNyYy9hZGFwdGVycy5qcyIsInNyYy9mZWVkcy5qcyIsInNyYy9lcnJvcnMuanMiLCJzcmMvaHRtbC5qcyIsInNyYy9tYWluLmpzIiwic3JjL3RlbXBsYXRpbmcuanMiXSwibmFtZXMiOlsiZiIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwidGhpcyIsImF3YyIsInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJzIiwiX2RlcmVxXyIsImwiLCJfU29tZVByb21pc2VBcnJheSIsInByb21pc2UiLCJzZXRIb3dNYW55Iiwic2V0VW53cmFwIiwiaW5pdCIsImFueSIsInByb3RvdHlwZSIsIjIiLCJfY3VzdG9tU2NoZWR1bGVyIiwiX2lzVGlja1VzZWQiLCJfbGF0ZVF1ZXVlIiwiX25vcm1hbFF1ZXVlIiwiX2hhdmVEcmFpbmVkUXVldWVzIiwiX3RyYW1wb2xpbmVFbmFibGVkIiwiZHJhaW5RdWV1ZXMiLCJfZHJhaW5RdWV1ZXMiLCJfc2NoZWR1bGUiLCJwdXNoIiwiX3F1ZXVlVGljayIsIl9wdXNoT25lIiwiaCIsInNoaWZ0IiwiX3NldHRsZVByb21pc2VzIiwic2V0U2NoZWR1bGVyIiwiaGFzQ3VzdG9tU2NoZWR1bGVyIiwiZW5hYmxlVHJhbXBvbGluZSIsImRpc2FibGVUcmFtcG9saW5lSWZOZWNlc3NhcnkiLCJoYXNEZXZUb29scyIsImhhdmVJdGVtc1F1ZXVlZCIsImZhdGFsRXJyb3IiLCJwcm9jZXNzIiwic3RkZXJyIiwid3JpdGUiLCJzdGFjayIsImV4aXQiLCJ0aHJvd0xhdGVyIiwiYXJndW1lbnRzIiwic2V0VGltZW91dCIsImludm9rZUxhdGVyIiwiaW52b2tlIiwic2V0dGxlUHJvbWlzZXMiLCJfcmVzZXQiLCJmaXJzdExpbmVFcnJvciIsIi4vcXVldWUiLCIuL3NjaGVkdWxlIiwiLi91dGlsIiwiMyIsIl9yZWplY3QiLCJwcm9taXNlUmVqZWN0aW9uUXVldWVkIiwiYmluZGluZ1Byb21pc2UiLCJfdGhlbiIsIl9iaXRGaWVsZCIsIl9yZXNvbHZlQ2FsbGJhY2siLCJ0YXJnZXQiLCJiaW5kIiwiX3Byb3BhZ2F0ZUZyb20iLCJwcm9wYWdhdGVGcm9tRnVuY3Rpb24iLCJfYm91bmRWYWx1ZSIsImJvdW5kVmFsdWVGdW5jdGlvbiIsIl90YXJnZXQiLCJfc2V0Qm91bmRUbyIsIl9zZXRPbkNhbmNlbCIsIl9ib3VuZFRvIiwiX2lzQm91bmQiLCJyZXNvbHZlIiwiNCIsIlByb21pc2UiLCJub0NvbmZsaWN0IiwiLi9wcm9taXNlIiwiNSIsIk9iamVjdCIsImNyZWF0ZSIsImNhbkV2YWx1YXRlIiwiY2xhc3NTdHJpbmciLCJ0b1N0cmluZyIsIlR5cGVFcnJvciIsInBvcCIsImFwcGx5IiwiTWF0aCIsIm1heCIsImlzSWRlbnRpZmllciIsInNsaWNlIiwiZ2V0IiwiNiIsInRyeUNhdGNoIiwiZXJyb3JPYmoiLCJfYXN5bmMiLCJicmVhayIsImNhbmNlbCIsImNhbmNlbGxhdGlvbiIsIl93YXJuIiwiX2lzQ2FuY2VsbGFibGUiLCJfY2FuY2VsQnkiLCJfaXNGb2xsb3dpbmciLCJfZm9sbG93ZWUiLCJfY2FuY2VsQnJhbmNoZWQiLCJfY2FuY2VsbGF0aW9uUGFyZW50IiwiX3NldFdpbGxCZUNhbmNlbGxlZCIsIl9icmFuY2hIYXNDYW5jZWxsZWQiLCJfYnJhbmNoZXNSZW1haW5pbmdUb0NhbmNlbCIsIl9lbm91Z2hCcmFuY2hlc0hhdmVDYW5jZWxsZWQiLCJfaW52b2tlT25DYW5jZWwiLCJfY2FuY2VsIiwiX3NldENhbmNlbGxlZCIsIl9jYW5jZWxQcm9taXNlcyIsIl9sZW5ndGgiLCJfdW5zZXRPbkNhbmNlbCIsIl9vbkNhbmNlbEZpZWxkIiwiaXNQZW5kaW5nIiwiX2lzQ2FuY2VsbGVkIiwiaXNDYW5jZWxsYWJsZSIsImlzQ2FuY2VsbGVkIiwiX2RvSW52b2tlT25DYW5jZWwiLCJpc0FycmF5IiwiX2F0dGFjaEV4dHJhVHJhY2UiLCJfcmVzdWx0Q2FuY2VsbGVkIiwiX29uQ2FuY2VsIiwiX2ludm9rZUludGVybmFsT25DYW5jZWwiLCI3Iiwia2V5cyIsImlzT2JqZWN0IiwiXyIsImQiLCIuL2VzNSIsIjgiLCJfdHJhY2UiLCJDYXB0dXJlZFRyYWNlIiwiX3Byb21pc2VDcmVhdGVkIiwiX3B1c2hDb250ZXh0IiwiX3BvcENvbnRleHQiLCJfcGVla0NvbnRleHQiLCJkZWFjdGl2YXRlTG9uZ1N0YWNrVHJhY2VzIiwiYWN0aXZhdGVMb25nU3RhY2tUcmFjZXMiLCI5IiwiX2dldERvbWFpbiIsIldhcm5pbmciLCJjYW5BdHRhY2hUcmFjZSIsInYiLCJ5IiwibSIsImVudiIsImciLCJiIiwidyIsInN1cHByZXNzVW5oYW5kbGVkUmVqZWN0aW9ucyIsIl9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQiLCJfc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQiLCJfbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uIiwiX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCIsIiQiLCJfc2V0UmV0dXJuZWROb25VbmRlZmluZWQiLCJfcmV0dXJuZWROb25VbmRlZmluZWQiLCJfaXNSZWplY3Rpb25VbmhhbmRsZWQiLCJfc2V0dGxlZFZhbHVlIiwiX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQiLCJfdW5zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkIiwiX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQiLCJfdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCIsIlUiLCJvblBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uIiwiZG9tYWluQmluZCIsIm9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCIsIkMiLCJsb25nU3RhY2tUcmFjZXMiLCJZIiwieiIsIl9jYXB0dXJlU3RhY2tUcmFjZSIsIl9kZXJlZmVyZW5jZVRyYWNlIiwiTCIsIkgiLCJOIiwiaGFzTG9uZ1N0YWNrVHJhY2VzIiwiaiIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImRldGFpbCIsImNhbmNlbGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmVhc29uIiwidG9Mb3dlckNhc2UiLCJFdmVudCIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJFIiwiaXNOb2RlIiwiZW1pdCIsImsiLCJGIiwicHJvbWlzZUNyZWF0ZWQiLCJwcm9taXNlRnVsZmlsbGVkIiwicHJvbWlzZVJlamVjdGVkIiwicHJvbWlzZVJlc29sdmVkIiwicHJvbWlzZUNhbmNlbGxlZCIsInByb21pc2VDaGFpbmVkIiwiY2hpbGQiLCJ3YXJuaW5nIiwidW5oYW5kbGVkUmVqZWN0aW9uIiwicmVqZWN0aW9uSGFuZGxlZCIsIlQiLCJ4IiwiUCIsIl9hdHRhY2hDYW5jZWxsYXRpb25DYWxsYmFjayIsIlMiLCJSIiwiTyIsIkEiLCJEIiwiY29uZmlnIiwid2FybmluZ3MiLCJ3Rm9yZ290dGVuUmV0dXJuIiwiX2NsZWFyQ2FuY2VsbGF0aW9uRGF0YSIsIl9leGVjdXRlIiwiViIsIm1vbml0b3JpbmciLCJfZmlyZUV2ZW50IiwiSSIsImlzRnVsZmlsbGVkIiwiSyIsIl9wYXJlbnQiLCJhdHRhY2hFeHRyYVRyYWNlIiwiX19zdGFja0NsZWFuZWRfXyIsIk0iLCJub3RFbnVtZXJhYmxlUHJvcCIsIm1lc3NhZ2UiLCJqb2luIiwicSIsIkIiLCJ0ZXN0IiwiRyIsImNoYXJBdCIsInJlcGxhY2UiLCJzcGxpdCIsIm5hbWUiLCJjb25zb2xlIiwiU3RyaW5nIiwibG9nIiwiUSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdWJzdHIiLCJKIiwiWCIsIlciLCJtYXRjaCIsImZpbGVOYW1lIiwibGluZSIsInBhcnNlSW50IiwiX3Byb21pc2VzQ3JlYXRlZCIsInVuY3ljbGUiLCJpbmhlcml0cyIsInNwbGljZSIsInN0YWNrVHJhY2VMaW1pdCIsImNhcHR1cmVTdGFja1RyYWNlIiwiaW5kZXhPZiIsIndhcm4iLCJpc1RUWSIsImNoZWNrRm9yZ290dGVuUmV0dXJucyIsInNldEJvdW5kcyIsImRlcHJlY2F0ZWQiLCJmaXJlRG9tRXZlbnQiLCJmaXJlR2xvYmFsRXZlbnQiLCIuL2Vycm9ycyIsIjEwIiwicmV0dXJuIiwidGhlblJldHVybiIsInRocm93IiwidGhlblRocm93IiwiY2F0Y2hUaHJvdyIsImNhdWdodCIsImNhdGNoUmV0dXJuIiwiMTEiLCJyZWR1Y2UiLCJhbGwiLCJlYWNoIiwibWFwU2VyaWVzIiwiMTIiLCJmcmVlemUiLCJjb25zdHJ1Y3RvciIsIlJhbmdlRXJyb3IiLCJBcnJheSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImlzT3BlcmF0aW9uYWwiLCJjYXVzZSIsIl9fQmx1ZWJpcmRFcnJvclR5cGVzX18iLCJDYW5jZWxsYXRpb25FcnJvciIsIlRpbWVvdXRFcnJvciIsIk9wZXJhdGlvbmFsRXJyb3IiLCJSZWplY3Rpb25FcnJvciIsIkFnZ3JlZ2F0ZUVycm9yIiwiMTMiLCJnZXREZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0VTNSIsInByb3BlcnR5SXNXcml0YWJsZSIsInNldCIsImhhc093blByb3BlcnR5IiwiMTQiLCJtYXAiLCJmaWx0ZXIiLCIxNSIsInR5cGUiLCJoYW5kbGVyIiwiY2FsbGVkIiwiY2FuY2VsUHJvbWlzZSIsImZpbmFsbHlIYW5kbGVyIiwiaXNGaW5hbGx5SGFuZGxlciIsImlzUmVqZWN0ZWQiLCJfcGFzc1Rocm91Z2giLCJ0aGVuIiwibGFzdGx5IiwiZmluYWxseSIsInRhcCIsInRhcENhdGNoIiwicmVqZWN0IiwiLi9jYXRjaF9maWx0ZXIiLCIxNiIsIl9maW5hbGx5UHJvbWlzZSIsIl9wcm9taXNlIiwiX3N0YWNrIiwiX2dlbmVyYXRvckZ1bmN0aW9uIiwiX3JlY2VpdmVyIiwiX2dlbmVyYXRvciIsIl95aWVsZEhhbmRsZXJzIiwiY29uY2F0IiwiX3lpZWxkZWRQcm9taXNlIiwiX2NhbmNlbGxhdGlvblBoYXNlIiwiX2lzUmVzb2x2ZWQiLCJfY2xlYW51cCIsIl9mdWxmaWxsIiwiX3Byb21pc2VDYW5jZWxsZWQiLCJjb3JvdXRpbmUiLCJyZXR1cm5TZW50aW5lbCIsIl9jb250aW51ZSIsIl9wcm9taXNlRnVsZmlsbGVkIiwibmV4dCIsIl9wcm9taXNlUmVqZWN0ZWQiLCJfcnVuIiwiX3JlamVjdENhbGxiYWNrIiwiZG9uZSIsIl9wcm94eSIsIl92YWx1ZSIsIl9yZWFzb24iLCJ5aWVsZEhhbmRsZXIiLCJhZGRZaWVsZEhhbmRsZXIiLCJzcGF3biIsIjE3Iiwic3ByZWFkIiwiMTgiLCJjb25zdHJ1Y3RvciQiLCJfY2FsbGJhY2siLCJfcHJlc2VydmVkVmFsdWVzIiwiX2xpbWl0IiwiX2luRmxpZ2h0IiwiX3F1ZXVlIiwiX2FzeW5jSW5pdCIsImNvbmN1cnJlbmN5IiwiaXNGaW5pdGUiLCJfaW5pdCQiLCJfaW5pdCIsIl92YWx1ZXMiLCJfZHJhaW5RdWV1ZSIsIl90b3RhbFJlc29sdmVkIiwiX2ZpbHRlciIsIl9yZXNvbHZlIiwicHJlc2VydmVkVmFsdWVzIiwiMTkiLCJtZXRob2QiLCJfcmVzb2x2ZUZyb21TeW5jVmFsdWUiLCJhdHRlbXB0IiwidHJ5IiwiMjAiLCJtYXliZVdyYXBBc0Vycm9yIiwibWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uIiwiMjEiLCJhc0NhbGxiYWNrIiwibm9kZWlmeSIsIjIyIiwiUHJvbWlzZUluc3BlY3Rpb24iLCJkb21haW4iLCJfZnVsZmlsbG1lbnRIYW5kbGVyMCIsIl9yZWplY3Rpb25IYW5kbGVyMCIsIl9wcm9taXNlMCIsIl9yZWNlaXZlcjAiLCJfcmVzb2x2ZUZyb21FeGVjdXRvciIsImNhdGNoIiwicmVmbGVjdCIsIl9zZXRJc0ZpbmFsIiwidG9KU09OIiwiZnVsZmlsbG1lbnRWYWx1ZSIsInJlamVjdGlvblJlYXNvbiIsImVycm9yIiwib3JpZ2luYXRlc0Zyb21SZWplY3Rpb24iLCJnZXROZXdMaWJyYXJ5Q29weSIsImlzIiwiZnJvbU5vZGUiLCJmcm9tQ2FsbGJhY2siLCJtdWx0aUFyZ3MiLCJfaXNGYXRlU2VhbGVkIiwiX3NldEFzeW5jR3VhcmFudGVlZCIsImNhc3QiLCJfc2V0RnVsZmlsbGVkIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJfc2V0dGxlUHJvbWlzZUN0eCIsIl9zZXR0bGVQcm9taXNlTGF0ZUNhbmNlbGxhdGlvbk9ic2VydmVyIiwicmVjZWl2ZXIiLCJfYWRkQ2FsbGJhY2tzIiwiX3NldExlbmd0aCIsIl9zZXRSZWplY3RlZCIsIl9zZXRGb2xsb3dpbmciLCJfaXNGaW5hbCIsIl91bnNldENhbmNlbGxlZCIsIl9yZWNlaXZlckF0IiwiX3Byb21pc2VBdCIsIl9mdWxmaWxsbWVudEhhbmRsZXJBdCIsIl9yZWplY3Rpb25IYW5kbGVyQXQiLCJfbWlncmF0ZUNhbGxiYWNrMCIsIl9taWdyYXRlQ2FsbGJhY2tBdCIsIl9zZXRGb2xsb3dlZSIsImVuc3VyZUVycm9yT2JqZWN0IiwiX3NldHRsZVByb21pc2VGcm9tSGFuZGxlciIsIl9zZXR0bGVQcm9taXNlIiwiX3NldHRsZVByb21pc2UwIiwiX2NsZWFyQ2FsbGJhY2tEYXRhQXRJbmRleCIsIl9mdWxmaWxsUHJvbWlzZXMiLCJfcmVqZWN0UHJvbWlzZXMiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmVyIiwicGVuZGluZyIsInZlcnNpb24iLCJ0b0Zhc3RQcm9wZXJ0aWVzIiwibGFzdExpbmVFcnJvciIsIi4vYW55LmpzIiwiLi9hc3luYyIsIi4vYmluZCIsIi4vY2FsbF9nZXQuanMiLCIuL2NhbmNlbCIsIi4vY29udGV4dCIsIi4vZGVidWdnYWJpbGl0eSIsIi4vZGlyZWN0X3Jlc29sdmUiLCIuL2VhY2guanMiLCIuL2ZpbHRlci5qcyIsIi4vZmluYWxseSIsIi4vZ2VuZXJhdG9ycy5qcyIsIi4vam9pbiIsIi4vbWFwLmpzIiwiLi9tZXRob2QiLCIuL25vZGViYWNrIiwiLi9ub2RlaWZ5LmpzIiwiLi9wcm9taXNlX2FycmF5IiwiLi9wcm9taXNpZnkuanMiLCIuL3Byb3BzLmpzIiwiLi9yYWNlLmpzIiwiLi9yZWR1Y2UuanMiLCIuL3NldHRsZS5qcyIsIi4vc29tZS5qcyIsIi4vc3luY2hyb25vdXNfaW5zcGVjdGlvbiIsIi4vdGhlbmFibGVzIiwiLi90aW1lcnMuanMiLCIuL3VzaW5nLmpzIiwiMjMiLCJhc0FycmF5IiwiX2l0ZXJhdGUiLCJfcmVzb2x2ZUVtcHR5QXJyYXkiLCJNYXAiLCJnZXRBY3R1YWxMZW5ndGgiLCJzaG91bGRDb3B5VmFsdWVzIiwiMjQiLCJ3aXRoQXBwZW5kZWQiLCJfX2lzUHJvbWlzaWZpZWRfXyIsIlJlZ0V4cCIsImdldERhdGFQcm9wZXJ0eU9yRGVmYXVsdCIsImluaGVyaXRlZERhdGFLZXlzIiwicHJvbWlzaWZ5IiwiY29udGV4dCIsImNvcHlEZXNjcmlwdG9ycyIsInByb21pc2lmeUFsbCIsInN1ZmZpeCIsInByb21pc2lmaWVyIiwiaXNDbGFzcyIsIjI1Iiwic2l6ZSIsImZvckVhY2giLCJfaXNNYXAiLCJwcm9wcyIsIjI2IiwiX2NhcGFjaXR5IiwiX2Zyb250IiwiX3dpbGxCZU92ZXJDYXBhY2l0eSIsIl9jaGVja0NhcGFjaXR5IiwiX3Jlc2l6ZVRvIiwiMjciLCJyYWNlIiwiMjgiLCJfZm4iLCJfaW5pdGlhbFZhbHVlIiwiX2N1cnJlbnRDYW5jZWxsYWJsZSIsIl9lYWNoVmFsdWVzIiwiYWNjdW0iLCJhcnJheSIsIl9nb3RBY2N1bSIsImluZGV4IiwiX2VhY2hDb21wbGV0ZSIsIl9yZXN1bHRDYW5jZWxsZWQkIiwiMjkiLCJnZXROYXRpdmVQcm9taXNlIiwiTXV0YXRpb25PYnNlcnZlciIsInNldEltbWVkaWF0ZSIsIm5leHRUaWNrIiwiaXNSZWNlbnROb2RlIiwibmF2aWdhdG9yIiwic3RhbmRhbG9uZSIsImNvcmRvdmEiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiMzAiLCJfcHJvbWlzZVJlc29sdmVkIiwiX3NldHRsZWRWYWx1ZUZpZWxkIiwic2V0dGxlIiwiMzEiLCJfaG93TWFueSIsIl91bndyYXAiLCJfaW5pdGlhbGl6ZWQiLCJfY2FuUG9zc2libHlGdWxmaWxsIiwiX2dldFJhbmdlRXJyb3IiLCJob3dNYW55IiwiX2FkZEZ1bGZpbGxlZCIsIl9mdWxmaWxsZWQiLCJfYWRkUmVqZWN0ZWQiLCJfY2hlY2tPdXRjb21lIiwiX3JlamVjdGVkIiwic29tZSIsIjMyIiwiaXNSZXNvbHZlZCIsIl9faXNDYW5jZWxsZWQiLCIzMyIsIjM0IiwiaGFuZGxlIiwiY2xlYXJUaW1lb3V0IiwiZGVsYXkiLCJ0aW1lb3V0IiwiMzUiLCJfZGF0YSIsIl9jb250ZXh0IiwiaXNEaXNwb3NlciIsInJlc291cmNlcyIsIl9zZXREaXNwb3NhYmxlIiwiZGF0YSIsInJlc291cmNlIiwidHJ5RGlzcG9zZSIsImRvRGlzcG9zZSIsIl91bnNldERpc3Bvc2FibGUiLCJ1c2luZyIsIl9pc0Rpc3Bvc2FibGUiLCJfZ2V0RGlzcG9zZXIiLCJfZGlzcG9zZXIiLCJkaXNwb3NlciIsIjM2IiwiRnVuY3Rpb24iLCJpdGVyYXRvciIsImZyb20iLCJ0aHJvd2VyIiwiaXNQcmltaXRpdmUiLCJpc0Vycm9yIiwiZm9vIiwiZmlsbGVkUmFuZ2UiLCJjaHJvbWUiLCJsb2FkVGltZXMiLCJoYXNFbnZWYXJpYWJsZXMiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJOdW1iZXIiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwiSXRlbSIsImZ1biIsIm5vb3AiLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2Iiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIjM4MSIsImltbWVkaWF0ZUlkcyIsIm5leHRJbW1lZGlhdGVJZCIsIlRpbWVvdXQiLCJfaWQiLCJfY2xlYXJGbiIsInVucmVmIiwicmVmIiwiY2xvc2UiLCJjbGVhckltbWVkaWF0ZSIsIl9iYWJlbFBvbHlmaWxsIiwiREVGSU5FX1BST1BFUlRZIiwicGFkU3RhcnQiLCJwYWRFbmQiLCJhc3luY0l0ZXJhdG9yIiwicmVnZW5lcmF0b3JSdW50aW1lIiwid3JhcCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiX19hd2FpdCIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsInJldmVyc2UiLCJ2YWx1ZXMiLCJyZXNldCIsInByZXYiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsImFyZyIsInRyeUVudHJpZXMiLCJpc05hTiIsInN0b3AiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiY29tcGxldGUiLCJmaW5pc2giLCJhZnRlckxvYyIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsIl9pbnZva2UiLCJlc2NhcGUiLCIxMzMiLCIzMzEiLCIxMzQiLCIxMzUiLCIxMzYiLCIxMzciLCIxMzgiLCIxMzkiLCIxNDAiLCIxNDEiLCIxNDIiLCIxNDMiLCIxNDQiLCIxNDUiLCIxNDYiLCIxNDciLCIxNDgiLCIxNDkiLCIxNTAiLCIxNTEiLCIxNTIiLCIxNTMiLCIxNTQiLCIxNTUiLCIxNTYiLCIxNTciLCIxNTgiLCIxNTkiLCIxNjAiLCIxNjEiLCIxNjIiLCIxNjMiLCIxNjQiLCIxNjUiLCIxNjYiLCIxNjciLCIxNjgiLCIxNjkiLCIxNzAiLCIxNzEiLCIxNzIiLCIxNzMiLCIxNzQiLCIxNzUiLCIxNzYiLCIxNzciLCIxNzgiLCIxNzkiLCIxODAiLCIxODEiLCIxODIiLCIxODMiLCIxODQiLCIxODUiLCIxODYiLCIxODciLCIxODgiLCIxODkiLCIxOTAiLCIxOTEiLCIxOTIiLCIxOTMiLCIxOTQiLCIxOTUiLCIxOTYiLCIxOTciLCIxOTgiLCIxOTkiLCIyMDAiLCIyMDEiLCIyMDIiLCIyMDMiLCIyMDQiLCIyMDUiLCIyMDYiLCIyMDciLCIyMDgiLCIyMDkiLCIyMTAiLCIyMTEiLCIyMTIiLCIyMTMiLCIyMTQiLCIyMTUiLCIyMTYiLCIyMTciLCIyMTgiLCIyMTkiLCIyMjAiLCIyMjEiLCIyMjIiLCIyMjMiLCIyMjQiLCIyMjUiLCIyMjYiLCIyMjciLCIyMjgiLCIyMjkiLCIyMzAiLCIyMzEiLCIyMzIiLCIyMzMiLCIyMzQiLCIyMzUiLCIyMzYiLCIyMzciLCIyMzgiLCIyMzkiLCIyNDAiLCIyNDEiLCIyNDIiLCIyNDMiLCIyNDQiLCIyNDUiLCIyNDYiLCIyNDciLCIyNDgiLCIyNDkiLCIyNTAiLCIyNTEiLCIyNTIiLCIyNTMiLCIyNTQiLCIyNTUiLCIyNTYiLCIyNTciLCIyNTgiLCIyNTkiLCIyNjAiLCIyNjEiLCIyNjIiLCIyNjMiLCIyNjQiLCIyNjUiLCIyNjYiLCIyNjciLCIyNjgiLCIyNjkiLCIyNzAiLCIyNzEiLCIyNzIiLCIyNzMiLCIyNzQiLCIyNzUiLCIyNzYiLCIyNzciLCIyNzgiLCIyNzkiLCIyODAiLCIyODEiLCIyODIiLCIyODMiLCIyODQiLCIyODUiLCIyODYiLCIyODciLCIyODgiLCIyODkiLCIyOTAiLCIyOTEiLCIyOTIiLCIyOTMiLCIyOTQiLCIyOTUiLCIyOTYiLCIyOTciLCIyOTgiLCIyOTkiLCIzMDAiLCIzMDEiLCIzMDIiLCIzMDMiLCIzMDQiLCIzMDUiLCIzMDYiLCIzMDciLCIzMDgiLCIzMDkiLCIzMTAiLCIzMTEiLCIzMTIiLCIzMTMiLCIzMTQiLCIzMTUiLCIzMTYiLCIzMTciLCIzMTgiLCIzMTkiLCIzMjAiLCIzMjEiLCIzMjIiLCIzMjMiLCIzMjQiLCIzMjUiLCIzMjYiLCIzMjciLCIzMjgiLCIzMjkiLCIzMzAiLCJjb3JlIiwiX19lIiwiJGV4cG9ydCIsIiRyZSIsIjk3IiwiY29mIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwiMTMxIiwiNDUiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCIxMDUiLCIxMjYiLCI0MyIsImRQIiwiY3JlYXRlRGVzYyIsIjc0IiwiOTIiLCJhdCIsIjEwOCIsInRvSW50ZWdlciIsImRlZmluZWQiLCJjaGFyQ29kZUF0IiwiMTE4IiwiNTQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsInRvTGVuZ3RoIiwiY29weVdpdGhpbiIsIm1pbiIsIjExNiIsIjEyMCIsIjEyMSIsImZvck9mIiwiNDIiLCJjdHgiLCJpc0FycmF5SXRlciIsImFuT2JqZWN0IiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCIxMzIiLCI1MSIsIjU2IiwidG9JT2JqZWN0IiwiMTE5IiwiSU9iamVjdCIsIjUwIiwiYXNjIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJhRnVuY3Rpb24iLCJTUEVDSUVTIiwiNTIiLCJhcnJheVNsaWNlIiwiZmFjdG9yaWVzIiwiNDkiLCJUQUciLCJBUkciLCJjYWxsZWUiLCJyZWRlZmluZUFsbCIsImFuSW5zdGFuY2UiLCIkaXRlckRlZmluZSIsInN0ZXAiLCJzZXRTcGVjaWVzIiwiREVTQ1JJUFRPUlMiLCJmYXN0S2V5IiwidmFsaWRhdGUiLCJTSVpFIiwiZ2V0RW50cnkiLCJfaSIsIl9mIiwiZ2V0Q29uc3RydWN0b3IiLCJfdCIsIl9sIiwiY2xlYXIiLCJkZWxldGUiLCJoYXMiLCJkZWYiLCJzZXRTdHJvbmciLCJfayIsIjEwMiIsIjEyOCIsIjU4IiwiNjAiLCI2OCIsIjczIiwiOTMiLCJyZWRlZmluZSIsIjk0IiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCIxMDQiLCI0NiIsIjc1IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsIjEyMiIsIjQ3IiwiTElCUkFSWSIsImhpZGUiLCJJdGVyYXRvcnMiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiSVRFUkFUT1IiLCJCVUdHWSIsInJldHVyblRoaXMiLCJlbnRyaWVzIiwiMTAzIiwiNTciLCI2MSIsIjYyIiwiODEiLCIzOCIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJtZXRhIiwiS0VZIiwiTkVFRCIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIjQ0IiwiY2xhc3NvZiIsImNyZWF0ZUFycmF5TWV0aG9kIiwiJGhhcyIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJ1ZnN0b3JlIiwiZmFpbHMiLCIkaXRlckRldGVjdCIsImluaGVyaXRJZlJlcXVpcmVkIiwiNDgiLCI1OSIsIl9fZyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsImluc3BlY3RTb3VyY2UiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsIjEwMSIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldFRpbWUiLCJEYXRlIiwiJHRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJseiIsIk5hTiIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiYWJzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsInZhbHVlT2YiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsIjgwIiwiODMiLCI4NCIsIiRrZXlzIiwiODIiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCIzNyIsIk1BVENIIiwiMzkiLCJ3a3MiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJleGVjIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwiOTYiLCJwcm90byIsImZvcmNlZCIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIk5QQ0dfSU5DTFVERUQiLCJzb3VyY2UiLCI0MCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiNDEiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiY2hlY2siLCI3NyIsIjUzIiwiZmxvb3IiLCI1NSIsImRlc2NyaXB0b3IiLCJJdGVyYXRvclByb3RvdHlwZSIsIk9iamVjdFByb3RvIiwiNjMiLCIkZXhwbTEiLCJleHBtMSIsImV4cCIsIjY0Iiwic2lnbiIsInBvdyIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiNjciLCI2NSIsImxvZzFwIiwiNjYiLCJzY2FsZSIsInB4IiwicmFuZG9tIiwiNjkiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwia2V5IiwibW9kZSIsImNvcHlyaWdodCIsInN0cm9uZyIsIkludGVybmFsTWFwIiwiYXNzaWduIiwid2VhayIsInRtcCIsIndyYXBwZXIiLCJtZXRob2RzIiwiJFdlYWtNYXAiLCI3MiIsIjcwIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiZm4iLCJlbnRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIjExNSIsImNoYW5uZWwiLCJwb3J0IiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJjbGVhclRhc2siLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsImxpc3RlbmVyIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsIjcxIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkYXNzaWduIiwiZGVmaW5lUHJvcGVydGllcyIsIjc2IiwiX19kZWZpbmVTZXR0ZXJfXyIsImdPUEQiLCI3OCIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsIjc5IiwiaGlkZGVuS2V5cyIsImFycmF5SW5kZXhPZiIsIjg1IiwiODYiLCJpc0VudW0iLCI4NyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiODgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCIkdHJpbSIsInRyaW0iLCIxMTMiLCIxMTQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIjg5IiwiJHBhcnNlSW50Iiwid3MiLCJoZXgiLCI5MCIsIjkxIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCI5NSIsImJ1aWx0aW5FeGVjIiwiOTgiLCI5OSIsIjEwMCIsIm9mIiwiMTA2IiwiMTA3IiwiY2VpbCIsIjEwOSIsImlzUmVnRXhwIiwiMTEwIiwicXVvdCIsImNyZWF0ZUhUTUwiLCIxMTEiLCJyZXBlYXQiLCIxMTIiLCIxMTciLCIxMjMiLCIkdHlwZWQiLCIkYnVmZmVyIiwicHJvcGVydHlEZXNjIiwidG9JbmRleCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiVWludDhBcnJheSIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJzcGVjaWVzRnJvbUxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsIl9kIiwiJGZyb20iLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwiZXZlcnkiLCJmaWxsIiwiZmluZCIsImZpbmRJbmRleCIsImluY2x1ZGVzIiwic3ViYXJyYXkiLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJBQlYiLCJyb3VuZCIsImJ5dGVMZW5ndGgiLCIxMjQiLCIxMjUiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkluZmluaXR5IiwiQmFzZUJ1ZmZlciIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwidW5wYWNrSUVFRTc1NCIsInVucGFja0kzMiIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJfYiIsIkFycmF5QnVmZmVyUHJvdG8iLCJ2aWV3IiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiQXJndW1lbnRzIiwiMTI3IiwidXNlckFnZW50IiwiMTI5Iiwid2tzRXh0IiwiMTMwIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kIiwiJGZvckVhY2giLCJTVFJJQ1QiLCJjcmVhdGVQcm9wZXJ0eSIsIiRpbmRleE9mIiwiJG5hdGl2ZSIsIk5FR0FUSVZFX1pFUk8iLCIkcmVkdWNlIiwiJHNvbWUiLCIkc29ydCIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90byIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCIkaW11bCIsImltdWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiJE51bWJlciIsIkJhc2UiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiX2lzRmluaXRlIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiJGZhaWxzIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldFByb3RvdHlwZU9mIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJ0YXNrIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2OCIsIiRQcm9taXNlIiwiZW1wdHkiLCJVU0VfTkFUSVZFIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsIl9uIiwiX2MiLCJfdiIsIl9zIiwib2siLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJyQXBwbHkiLCJmQXBwbHkiLCJyQ29uc3RydWN0IiwiY29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwiZ2V0UHJvdG8iLCIkaXNFeHRlbnNpYmxlIiwiJHByZXZlbnRFeHRlbnNpb25zIiwic2V0UHJvdG8iLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJwcm94eSIsImZsYWdzIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJzYW1lVmFsdWUiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIlNVUFBPUlRTX1kiLCJhZGQiLCIkYXQiLCJjb2RlUG9pbnRBdCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRTeW1ib2wiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmbGF0dGVuSW50b0FycmF5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdE1hcCIsImZsYXR0ZW4iLCIkaW5jbHVkZXMiLCJhc2FwIiwiY2xhbXAiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwiZnNjYWxlIiwiaWFkZGgiLCJpbXVsaCIsImlzdWJoIiwicmFkaWFucyIsInNpZ25iaXQiLCJ1bXVsaCIsIl9fZGVmaW5lR2V0dGVyX18iLCIkZW50cmllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIiR2YWx1ZXMiLCJPQlNFUlZBQkxFIiwiZ2V0TWV0aG9kIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJPYnNlcnZhYmxlIiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJkZWxldGVNZXRhZGF0YSIsIlNldCIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCIkbWV0YWRhdGEiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsIiRwYWQiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiTkFNRSIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsInNldEludGVydmFsIiwiMzMyIiwic2luZ2xlTWF0Y2hlciIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCIlRkUlRkYiLCIlRkYlRkUiLCIzMzMiLCJfZXZlbnRzIiwiX2NvbmYiLCJkZWxpbWl0ZXIiLCJfbWF4TGlzdGVuZXJzIiwibWF4TGlzdGVuZXJzIiwid2lsZGNhcmQiLCJuZXdMaXN0ZW5lciIsIl9uZXdMaXN0ZW5lciIsIl9yZW1vdmVMaXN0ZW5lciIsInZlcmJvc2VNZW1vcnlMZWFrIiwibGlzdGVuZXJUcmVlIiwiZW1pdFdhcm5pbmciLCJlbWl0dGVyIiwiY291bnQiLCJ0cmFjZSIsIl9saXN0ZW5lcnMiLCIqKiIsIkV2ZW50RW1pdHRlcjIiLCJzZXRNYXhMaXN0ZW5lcnMiLCJldmVudCIsIl9vbmNlIiwiX21hbnkiLCJtYW55IiwicHJlcGVuZE1hbnkiLCJfb3JpZ2luIiwiX29uIiwiX2FsbCIsImVtaXRBc3luYyIsIm9uQW55IiwiX29uQW55IiwicHJlcGVuZEFueSIsInVuc2hpZnQiLCJ3YXJuZWQiLCJvZmZBbnkiLCJldmVudE5hbWVzIiwibGlzdGVuZXJDb3VudCIsImxpc3RlbmVyc0FueSIsIl9oYW5kbGViYXJzQ29tcGlsZXJBc3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9oYW5kbGViYXJzQ29tcGlsZXJCYXNlIiwiX2hhbmRsZWJhcnNDb21waWxlckNvbXBpbGVyIiwiX2hhbmRsZWJhcnNDb21waWxlckphdmFzY3JpcHRDb21waWxlcjIiLCJfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIiLCJfaGFuZGxlYmFyc05vQ29uZmxpY3QyIiwiX2hhbmRsZWJhcnNSdW50aW1lMiIsImRlZmF1bHQiLCJjb21waWxlIiwicHJlY29tcGlsZSIsIkFTVCIsIkNvbXBpbGVyIiwiSmF2YVNjcmlwdENvbXBpbGVyIiwiUGFyc2VyIiwicGFyc2VyIiwicGFyc2UiLCJpbnN0IiwiVmlzaXRvciIsIkhhbmRsZWJhcnMiLCJoZWxwZXJzIiwiaGVscGVyRXhwcmVzc2lvbiIsInBhcmFtcyIsImhhc2giLCJzY29wZWRJZCIsIm9yaWdpbmFsIiwic2ltcGxlSWQiLCJwYXJ0cyIsImRlcHRoIiwiX2V4Y2VwdGlvbjIiLCJvYmoiLCJfX2VzTW9kdWxlIiwicGFyZW50cyIsInZpc2l0U3ViRXhwcmVzc2lvbiIsImFjY2VwdFJlcXVpcmVkIiwiYWNjZXB0QXJyYXkiLCJhY2NlcHRLZXkiLCJ2aXNpdEJsb2NrIiwidmlzaXRQYXJ0aWFsIiwibXV0YXRpbmciLCJhY2NlcHQiLCJjdXJyZW50IiwiUHJvZ3JhbSIsImJvZHkiLCJNdXN0YWNoZVN0YXRlbWVudCIsIkRlY29yYXRvciIsIkJsb2NrU3RhdGVtZW50IiwiRGVjb3JhdG9yQmxvY2siLCJQYXJ0aWFsU3RhdGVtZW50IiwiUGFydGlhbEJsb2NrU3RhdGVtZW50IiwiQ29udGVudFN0YXRlbWVudCIsIkNvbW1lbnRTdGF0ZW1lbnQiLCJTdWJFeHByZXNzaW9uIiwiUGF0aEV4cHJlc3Npb24iLCJTdHJpbmdMaXRlcmFsIiwiTnVtYmVyTGl0ZXJhbCIsIkJvb2xlYW5MaXRlcmFsIiwiVW5kZWZpbmVkTGl0ZXJhbCIsIk51bGxMaXRlcmFsIiwiSGFzaCIsInBhaXJzIiwiSGFzaFBhaXIiLCJjb21wYXQiLCJ1c2VEZXB0aHMiLCJfdXRpbHMiLCJleHRlbmQiLCJ0ZW1wbGF0ZSIsIl9zZXR1cCIsIl9jaGlsZCIsIl9hc3QyIiwiYXJnRXF1YWxzIiwidHJhbnNmb3JtTGl0ZXJhbFRvUGF0aCIsInBhdGgiLCJsb2MiLCJjb21waWxlciIsImVxdWFscyIsIm9wY29kZXMiLCJvcGNvZGUiLCJhcmdzIiwiY2hpbGRyZW4iLCJndWlkIiwic291cmNlTm9kZSIsIm9wdGlvbnMiLCJzdHJpbmdQYXJhbXMiLCJ0cmFja0lkcyIsImJsb2NrUGFyYW1zIiwia25vd25IZWxwZXJzIiwiaGVscGVyTWlzc2luZyIsImJsb2NrSGVscGVyTWlzc2luZyIsImlmIiwidW5sZXNzIiwid2l0aCIsImxvb2t1cCIsImNvbXBpbGVQcm9ncmFtIiwidXNlUGFydGlhbCIsImlzU2ltcGxlIiwicHJvZ3JhbSIsImludmVyc2UiLCJjbGFzc2lmeVNleHByIiwiaGVscGVyU2V4cHIiLCJzaW1wbGVTZXhwciIsImFtYmlndW91c1NleHByIiwic2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMiLCJ1c2VEZWNvcmF0b3JzIiwiZXhwbGljaXRQYXJ0aWFsQ29udGV4dCIsImluZGVudCIsInByZXZlbnRJbmRlbnQiLCJlc2NhcGVkIiwibm9Fc2NhcGUiLCJzdHJpY3QiLCJrbm93bkhlbHBlcnNPbmx5IiwiZmFsc3kiLCJhZGREZXB0aCIsImJsb2NrUGFyYW1JbmRleCIsInB1c2hQYXJhbSIsInB1c2hQYXJhbXMiLCJfcGFyc2VyMiIsInl5IiwibG9jSW5mbyIsIlNvdXJjZUxvY2F0aW9uIiwic3JjTmFtZSIsIl93aGl0ZXNwYWNlQ29udHJvbDIiLCJIZWxwZXJzIiwiYmFzZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiIsIl9oYW5kbGViYXJzRXhjZXB0aW9uMiIsIlV0aWxzIiwicnVudGltZSIsIkhhbmRsZWJhcnNFbnZpcm9ubWVudCIsIlNhZmVTdHJpbmciLCJFeGNlcHRpb24iLCJlc2NhcGVFeHByZXNzaW9uIiwiVk0iLCJfY29kZUdlbjIiLCJMaXRlcmFsIiwibmFtZUxvb2t1cCIsImlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lIiwiZGVwdGhlZExvb2t1cCIsImFsaWFzYWJsZSIsImNvbXBpbGVySW5mbyIsIl9iYXNlIiwiQ09NUElMRVJfUkVWSVNJT04iLCJSRVZJU0lPTl9DSEFOR0VTIiwiYXBwZW5kVG9CdWZmZXIiLCJlbnZpcm9ubWVudCIsImluaXRpYWxpemVCdWZmZXIiLCJxdW90ZWRTdHJpbmciLCJpc0NoaWxkIiwiZGVjb3JhdG9ycyIsInByb2dyYW1zIiwiZW52aXJvbm1lbnRzIiwicHJlYW1ibGUiLCJzdGFja1Nsb3QiLCJzdGFja1ZhcnMiLCJhbGlhc2VzIiwicmVnaXN0ZXJzIiwibGlzdCIsImhhc2hlcyIsImNvbXBpbGVTdGFjayIsImlubGluZVN0YWNrIiwiY29tcGlsZUNoaWxkcmVuIiwidXNlQmxvY2tQYXJhbXMiLCJjdXJyZW50TG9jYXRpb24iLCJwdXNoU291cmNlIiwiaXNFbXB0eSIsInByZXBlbmQiLCJtZXJnZSIsImNyZWF0ZUZ1bmN0aW9uQ29udGV4dCIsIm1haW4iLCJtYWluX2QiLCJ1c2VEYXRhIiwiY29tcGlsZXJPcHRpb25zIiwic3RhcnQiLCJjb2x1bW4iLCJvYmplY3RMaXRlcmFsIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwiZmlsZSIsImRlc3ROYW1lIiwibGFzdENvbnRleHQiLCJyZWZlcmVuY2VDb3VudCIsIm1lcmdlU291cmNlIiwiZm9yY2VCdWZmZXIiLCJzdWJzdHJpbmciLCJibG9ja1ZhbHVlIiwiY29udGV4dE5hbWUiLCJzZXR1cEhlbHBlckFyZ3MiLCJwb3BTdGFjayIsImZ1bmN0aW9uQ2FsbCIsImFtYmlndW91c0Jsb2NrVmFsdWUiLCJmbHVzaElubGluZSIsInRvcFN0YWNrIiwibGFzdEhlbHBlciIsImFwcGVuZENvbnRlbnQiLCJwZW5kaW5nQ29udGVudCIsInBlbmRpbmdMb2NhdGlvbiIsImFwcGVuZCIsImlzSW5saW5lIiwicmVwbGFjZVN0YWNrIiwiYXBwZW5kRXNjYXBlZCIsImdldENvbnRleHQiLCJwdXNoQ29udGV4dCIsInB1c2hTdGFja0xpdGVyYWwiLCJsb29rdXBPbkNvbnRleHQiLCJyZXNvbHZlUGF0aCIsImxvb2t1cEJsb2NrUGFyYW0iLCJsb29rdXBEYXRhIiwiYXNzdW1lT2JqZWN0cyIsInJlc29sdmVQb3NzaWJsZUxhbWJkYSIsInB1c2hTdHJpbmdQYXJhbSIsInB1c2hTdHJpbmciLCJlbXB0eUhhc2giLCJwdXNoSGFzaCIsInR5cGVzIiwiY29udGV4dHMiLCJpZHMiLCJwb3BIYXNoIiwicHVzaExpdGVyYWwiLCJwdXNoUHJvZ3JhbSIsInByb2dyYW1FeHByZXNzaW9uIiwicmVnaXN0ZXJEZWNvcmF0b3IiLCJpbnZva2VIZWxwZXIiLCJzZXR1cEhlbHBlciIsImNhbGxQYXJhbXMiLCJpbnZva2VLbm93bkhlbHBlciIsImludm9rZUFtYmlndW91cyIsInVzZVJlZ2lzdGVyIiwicGFyYW1zSW5pdCIsImludm9rZVBhcnRpYWwiLCJzZXR1cFBhcmFtcyIsInBhcnRpYWxzIiwiZGVwdGhzIiwiYXNzaWduVG9IYXNoIiwicHVzaElkIiwibWF0Y2hFeGlzdGluZ1Byb2dyYW0iLCJpbmNyU3RhY2siLCJ0b3BTdGFja05hbWUiLCJoYXNoSWRzIiwiaGFzaFR5cGVzIiwiaGFzaENvbnRleHRzIiwiZ2VuZXJhdGVBcnJheSIsIlJFU0VSVkVEX1dPUkRTIiwidG9IVE1MIiwicG9zc2libGUiLCJiYWRDaGFycyIsImVzY2FwZUNoYXIiLCJjcmVhdGVGcmFtZSIsImFwcGVuZENvbnRleHRQYXRoIiwiJiIsIjwiLCI+IiwiXCIiLCInIiwiYCIsIj0iLCJpc0Z1bmN0aW9uIiwic3RyaW5nIiwiZXJyb3JQcm9wcyIsImxpbmVOdW1iZXIiLCJkZWNvcmF0b3IiLCJjaGVja1JldmlzaW9uIiwibGFtYmRhIiwicmVzb2x2ZVBhcnRpYWwiLCJ3cmFwUHJvZ3JhbSIsIm51bGxDb250ZXh0Iiwic2VhbCIsInBhcnRpYWwiLCJyb290IiwiZXhlY3V0ZURlY29yYXRvcnMiLCJpc1RvcCIsImNvbnRleHRQYXRoIiwiX2hlbHBlcnMiLCJfZGVjb3JhdG9ycyIsIl9sb2dnZXIyIiwicmVnaXN0ZXJEZWZhdWx0SGVscGVycyIsInJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMiLCJWRVJTSU9OIiwibG9nZ2VyIiwicmVnaXN0ZXJIZWxwZXIiLCJ1bnJlZ2lzdGVySGVscGVyIiwicmVnaXN0ZXJQYXJ0aWFsIiwidW5yZWdpc3RlclBhcnRpYWwiLCJ1bnJlZ2lzdGVyRGVjb3JhdG9yIiwibWV0aG9kTWFwIiwibGV2ZWwiLCJsb29rdXBMZXZlbCIsIl9kZWNvcmF0b3JzSW5saW5lMiIsIl9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiIsIl9oZWxwZXJzRWFjaDIiLCJfaGVscGVyc0hlbHBlck1pc3NpbmcyIiwiX2hlbHBlcnNJZjIiLCJfaGVscGVyc0xvZzIiLCJfaGVscGVyc0xvb2t1cDIiLCJfaGVscGVyc1dpdGgyIiwiaGFuZGxlYmFycyIsInN5bWJvbHNfIiwiRU9GIiwicHJvZ3JhbV9yZXBldGl0aW9uMCIsInN0YXRlbWVudCIsIm11c3RhY2hlIiwiYmxvY2siLCJyYXdCbG9jayIsInBhcnRpYWxCbG9jayIsImNvbnRlbnQiLCJDT01NRU5UIiwiQ09OVEVOVCIsIm9wZW5SYXdCbG9jayIsInJhd0Jsb2NrX3JlcGV0aXRpb25fcGx1czAiLCJFTkRfUkFXX0JMT0NLIiwiT1BFTl9SQVdfQkxPQ0siLCJoZWxwZXJOYW1lIiwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wIiwib3BlblJhd0Jsb2NrX29wdGlvbjAiLCJDTE9TRV9SQVdfQkxPQ0siLCJvcGVuQmxvY2siLCJibG9ja19vcHRpb24wIiwiY2xvc2VCbG9jayIsIm9wZW5JbnZlcnNlIiwiYmxvY2tfb3B0aW9uMSIsIk9QRU5fQkxPQ0siLCJvcGVuQmxvY2tfcmVwZXRpdGlvbjAiLCJvcGVuQmxvY2tfb3B0aW9uMCIsIm9wZW5CbG9ja19vcHRpb24xIiwiQ0xPU0UiLCJPUEVOX0lOVkVSU0UiLCJvcGVuSW52ZXJzZV9yZXBldGl0aW9uMCIsIm9wZW5JbnZlcnNlX29wdGlvbjAiLCJvcGVuSW52ZXJzZV9vcHRpb24xIiwib3BlbkludmVyc2VDaGFpbiIsIk9QRU5fSU5WRVJTRV9DSEFJTiIsIm9wZW5JbnZlcnNlQ2hhaW5fcmVwZXRpdGlvbjAiLCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjAiLCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjEiLCJpbnZlcnNlQW5kUHJvZ3JhbSIsIklOVkVSU0UiLCJpbnZlcnNlQ2hhaW4iLCJpbnZlcnNlQ2hhaW5fb3B0aW9uMCIsIk9QRU5fRU5EQkxPQ0siLCJPUEVOIiwibXVzdGFjaGVfcmVwZXRpdGlvbjAiLCJtdXN0YWNoZV9vcHRpb24wIiwiT1BFTl9VTkVTQ0FQRUQiLCJtdXN0YWNoZV9yZXBldGl0aW9uMSIsIm11c3RhY2hlX29wdGlvbjEiLCJDTE9TRV9VTkVTQ0FQRUQiLCJPUEVOX1BBUlRJQUwiLCJwYXJ0aWFsTmFtZSIsInBhcnRpYWxfcmVwZXRpdGlvbjAiLCJwYXJ0aWFsX29wdGlvbjAiLCJvcGVuUGFydGlhbEJsb2NrIiwiT1BFTl9QQVJUSUFMX0JMT0NLIiwib3BlblBhcnRpYWxCbG9ja19yZXBldGl0aW9uMCIsIm9wZW5QYXJ0aWFsQmxvY2tfb3B0aW9uMCIsInBhcmFtIiwic2V4cHIiLCJPUEVOX1NFWFBSIiwic2V4cHJfcmVwZXRpdGlvbjAiLCJzZXhwcl9vcHRpb24wIiwiQ0xPU0VfU0VYUFIiLCJoYXNoX3JlcGV0aXRpb25fcGx1czAiLCJoYXNoU2VnbWVudCIsIklEIiwiRVFVQUxTIiwiT1BFTl9CTE9DS19QQVJBTVMiLCJibG9ja1BhcmFtc19yZXBldGl0aW9uX3BsdXMwIiwiQ0xPU0VfQkxPQ0tfUEFSQU1TIiwiZGF0YU5hbWUiLCJTVFJJTkciLCJOVU1CRVIiLCJCT09MRUFOIiwiVU5ERUZJTkVEIiwiTlVMTCIsIkRBVEEiLCJwYXRoU2VnbWVudHMiLCJTRVAiLCIkYWNjZXB0IiwiJGVuZCIsInRlcm1pbmFsc18iLCJwcm9kdWN0aW9uc18iLCJwZXJmb3JtQWN0aW9uIiwicHJlcGFyZVByb2dyYW0iLCJzdHJpcENvbW1lbnQiLCJzdHJpcCIsInN0cmlwRmxhZ3MiLCJfJCIsInByZXBhcmVSYXdCbG9jayIsInByZXBhcmVCbG9jayIsImNoYWluZWQiLCJjaGFpbiIsInByZXBhcmVNdXN0YWNoZSIsInByZXBhcmVQYXJ0aWFsQmxvY2siLCJwcmVwYXJlUGF0aCIsInBhcnQiLCJzZXBhcmF0b3IiLCJ0YWJsZSIsImRlZmF1bHRBY3Rpb25zIiwicGFyc2VFcnJvciIsImxleGVyIiwic2V0SW5wdXQiLCJ5eWxsb2MiLCJyYW5nZXMiLCJsZXgiLCJzaG93UG9zaXRpb24iLCJ0ZXh0IiwidG9rZW4iLCJ5eWxpbmVubyIsImV4cGVjdGVkIiwieXl0ZXh0IiwieXlsZW5nIiwiZmlyc3RfbGluZSIsImxhc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfY29sdW1uIiwicmFuZ2UiLCJfaW5wdXQiLCJfbW9yZSIsIl9sZXNzIiwibWF0Y2hlZCIsImNvbmRpdGlvblN0YWNrIiwib2Zmc2V0IiwiaW5wdXQiLCJ1bnB1dCIsIm1vcmUiLCJsZXNzIiwicGFzdElucHV0IiwidXBjb21pbmdJbnB1dCIsIl9jdXJyZW50UnVsZXMiLCJydWxlcyIsImZsZXgiLCJtYXRjaGVzIiwiYmVnaW4iLCJwb3BTdGF0ZSIsImNvbmRpdGlvbnMiLCJ0b3BTdGF0ZSIsInB1c2hTdGF0ZSIsIm11IiwiaW5jbHVzaXZlIiwiZW11IiwiY29tIiwiSU5JVElBTCIsImVuZCIsInZhbGlkYXRlQ2xvc2UiLCJvcGVuU3RyaXAiLCJpbnZlcnNlU3RyaXAiLCJjbG9zZVN0cmlwIiwiX3Zpc2l0b3IyIiwiV2hpdGVzcGFjZUNvbnRyb2wiLCJpc1ByZXZXaGl0ZXNwYWNlIiwiaXNOZXh0V2hpdGVzcGFjZSIsIm9taXRSaWdodCIsInJpZ2h0U3RyaXBwZWQiLCJvbWl0TGVmdCIsImxlZnRTdHJpcHBlZCIsImlnbm9yZVN0YW5kYWxvbmUiLCJpc1Jvb3RTZWVuIiwib3BlblN0YW5kYWxvbmUiLCJjbG9zZVN0YW5kYWxvbmUiLCJpbmxpbmVTdGFuZGFsb25lIiwiU291cmNlTm9kZSIsIlNvdXJjZU1hcCIsImNhc3RDaHVuayIsIkNvZGVHZW4iLCJzcmNGaWxlIiwiZ2VuZXJhdGVMaXN0IiwiU291cmNlTWFwR2VuZXJhdG9yIiwiU291cmNlTWFwQ29uc3VtZXIiLCIzNzAiLCIzNzEiLCIzNzIiLCIzNDQiLCJQcmludFZpc2l0b3IiLCJwYWRkaW5nIiwicGFkIiwiZmlyc3QiLCJsYXN0IiwiaW5jbHVkZVplcm8iLCJwcmludGVyIiwiZXh0ZW5zaW9uIiwicmVhZEZpbGVTeW5jIiwicHJpbnQiLCJleHRlbnNpb25zIiwiMzM0IiwiMzY0IiwidXRpbCIsImhhc05hdGl2ZU1hcCIsIkFycmF5U2V0IiwiX2FycmF5IiwiX3NldCIsImZyb21BcnJheSIsInRvU2V0U3RyaW5nIiwidG9BcnJheSIsIjM3MyIsImdldEFyZyIsInVybFJlZ2V4cCIsImRhdGFVcmxSZWdleHAiLCJ1cmxQYXJzZSIsInNjaGVtZSIsImF1dGgiLCJob3N0IiwidXJsR2VuZXJhdGUiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwicmVsYXRpdmUiLCJzdXBwb3J0c051bGxQcm90byIsImlkZW50aXR5IiwiaXNQcm90b1N0cmluZyIsInN0cmNtcCIsImZyb21TZXRTdHJpbmciLCJjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyIsIm9yaWdpbmFsTGluZSIsIm9yaWdpbmFsQ29sdW1uIiwiZ2VuZXJhdGVkQ29sdW1uIiwiZ2VuZXJhdGVkTGluZSIsImNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCJwYXJzZVNvdXJjZU1hcElucHV0IiwiY29tcHV0ZVNvdXJjZVVSTCIsIjM2NSIsImJhc2U2NCIsImVuY29kZSIsInJlc3QiLCIzNjYiLCIzNjciLCJHUkVBVEVTVF9MT1dFUl9CT1VORCIsIkxFQVNUX1VQUEVSX0JPVU5EIiwic2VhcmNoIiwiMzY4IiwiTWFwcGluZ0xpc3QiLCJfc29ydGVkIiwiX2xhc3QiLCJ1bnNvcnRlZEZvckVhY2giLCIzNjkiLCJzd2FwIiwicXVpY2tTb3J0IiwiZG9RdWlja1NvcnQiLCJiaW5hcnlTZWFyY2giLCJiYXNlNjRWTFEiLCJzZWN0aW9ucyIsIkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciIsIkJhc2ljU291cmNlTWFwQ29uc3VtZXIiLCJfdmVyc2lvbiIsIl9uYW1lcyIsIl9zb3VyY2VzIiwiX2Fic29sdXRlU291cmNlcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VzQ29udGVudCIsIl9tYXBwaW5ncyIsIl9zb3VyY2VNYXBVUkwiLCJNYXBwaW5nIiwiX3NlY3Rpb25zIiwidXJsIiwiZ2VuZXJhdGVkT2Zmc2V0IiwiY29uc3VtZXIiLCJmcm9tU291cmNlTWFwIiwiX19nZW5lcmF0ZWRNYXBwaW5ncyIsIl9wYXJzZU1hcHBpbmdzIiwiX19vcmlnaW5hbE1hcHBpbmdzIiwiX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IiLCJHRU5FUkFURURfT1JERVIiLCJPUklHSU5BTF9PUkRFUiIsImVhY2hNYXBwaW5nIiwiX2dlbmVyYXRlZE1hcHBpbmdzIiwiX29yaWdpbmFsTWFwcGluZ3MiLCJhbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IiLCJfZmluZFNvdXJjZUluZGV4IiwiX2ZpbmRNYXBwaW5nIiwibGFzdENvbHVtbiIsIl9zb3VyY2VSb290IiwiX2dlbmVyYXRlU291cmNlc0NvbnRlbnQiLCJfZmlsZSIsImNvbXB1dGVDb2x1bW5TcGFucyIsImxhc3RHZW5lcmF0ZWRDb2x1bW4iLCJvcmlnaW5hbFBvc2l0aW9uRm9yIiwiaGFzQ29udGVudHNPZkFsbFNvdXJjZXMiLCJzb3VyY2VDb250ZW50Rm9yIiwiZ2VuZXJhdGVkUG9zaXRpb25Gb3IiLCJzb3VyY2VzIiwiYmlhcyIsIl9za2lwVmFsaWRhdGlvbiIsIl9zb3VyY2VzQ29udGVudHMiLCJnZW5lcmF0ZWQiLCJhZGRNYXBwaW5nIiwic2V0U291cmNlQ29udGVudCIsIl92YWxpZGF0ZU1hcHBpbmciLCJhcHBseVNvdXJjZU1hcCIsIl9zZXJpYWxpemVNYXBwaW5ncyIsIm1hcHBpbmdzIiwiUkVHRVhfTkVXTElORSIsImlzU291cmNlTm9kZSIsInNvdXJjZUNvbnRlbnRzIiwiZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAiLCJ3YWxrIiwicmVwbGFjZVJpZ2h0Iiwid2Fsa1NvdXJjZUNvbnRlbnRzIiwiMzc1IiwiWiIsIm5uIiwidG4iLCJybiIsImVuIiwidW4iLCJhbiIsImNuIiwibG4iLCJzbiIsImhuIiwicG4iLCJ2biIsImduIiwieW4iLCJkbiIsImJuIiwid24iLCJtbiIsInhuIiwiam4iLCJBbiIsImtuIiwiT24iLCJJbiIsIlJuIiwiRW4iLCJ6biIsIlNuIiwiTG4iLCJXbiIsIkNuIiwiVW4iLCJCbiIsIlRuIiwiJG4iLCJEbiIsIk1uIiwiRm4iLCJObiIsIlBuIiwicW4iLCJabiIsIktuIiwiVm4iLCJHbiIsIkhuIiwiSm4iLCJZbiIsIlFuIiwiWG4iLCJudCIsInR0IiwicnQiLCJldCIsInV0IiwiaXQiLCJvdCIsImZ0IiwiY3QiLCJsdCIsInN0IiwiaHQiLCJwdCIsInZ0IiwiXFwiLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZ3QiLCJ5dCIsImR0IiwiYnQiLCJ3dCIsIm5vZGVUeXBlIiwibXQiLCJ4dCIsImp0IiwiQXQiLCJrdCIsImlzQXJyYXlCdWZmZXIiLCJPdCIsImlzRGF0ZSIsIkl0IiwiaXNNYXAiLCJSdCIsIkV0IiwiaXNTZXQiLCJ6dCIsImlzVHlwZWRBcnJheSIsIlN0IiwiTHQiLCJXdCIsIkN0IiwiVXQiLCJCdCIsIkt0IiwiVHQiLCIkdCIsIkR0IiwiTXQiLCJGdCIsIk50IiwiUHQiLCJKdCIsInF0IiwiWnQiLCJHdCIsIlZ0IiwiSHQiLCJYdCIsIll0IiwiUXQiLCJuciIsInRyIiwicnIiLCJlciIsInVyIiwiaXIiLCJvciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCLEgCIsIsSCIiwixIQiLCLEgSIsIsSDIiwixIUiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsSHIiwixIkiLCLEiyIsIsSNIiwixI4iLCLEkCIsIsSPIiwixJEiLCLEkiIsIsSUIiwixJYiLCLEmCIsIsSaIiwixJMiLCLElSIsIsSXIiwixJkiLCLEmyIsIsScIiwixJ4iLCLEoCIsIsSiIiwixJ0iLCLEnyIsIsShIiwixKMiLCLEpCIsIsSmIiwixKUiLCLEpyIsIsSoIiwixKoiLCLErCIsIsSuIiwixLAiLCLEqSIsIsSrIiwixK0iLCLEryIsIsSxIiwixLQiLCLEtSIsIsS2IiwixLciLCLEuCIsIsS5IiwixLsiLCLEvSIsIsS/IiwixYEiLCLEuiIsIsS8IiwixL4iLCLFgCIsIsWCIiwixYMiLCLFhSIsIsWHIiwixYoiLCLFhCIsIsWGIiwixYgiLCLFiyIsIsWMIiwixY4iLCLFkCIsIsWNIiwixY8iLCLFkSIsIsWUIiwixZYiLCLFmCIsIsWVIiwixZciLCLFmSIsIsWaIiwixZwiLCLFniIsIsWgIiwixZsiLCLFnSIsIsWfIiwixaEiLCLFoiIsIsWkIiwixaYiLCLFoyIsIsWlIiwixaciLCLFqCIsIsWqIiwixawiLCLFriIsIsWwIiwixbIiLCLFqSIsIsWrIiwixa0iLCLFryIsIsWxIiwixbMiLCLFtCIsIsW1IiwixbYiLCLFtyIsIsW4IiwixbkiLCLFuyIsIsW9IiwixboiLCLFvCIsIsW+IiwixLIiLCLEsyIsIsWSIiwixZMiLCLFiSIsIsW/IiwiZnIiLCJhciIsImNyIiwibHIiLCJzciIsImhyIiwicHIiLCJnciIsInlyIiwiJmFtcDsiLCImbHQ7IiwiJmd0OyIsIiZxdW90OyIsIiYjMzk7IiwiZHIiLCJkZWZhdWx0cyIsInBpY2siLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsImJyIiwid3IiLCJtciIsInhyIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwianIiLCJBciIsImtyIiwiamkiLCJPciIsIklyIiwiUnIiLCJFciIsInpyIiwiU3IiLCJMciIsImlzQnVmZmVyIiwiV3IiLCJDciIsIlVyIiwiQnIiLCJUciIsIiRyIiwiRHIiLCJNciIsIkZyIiwiTnIiLCJQciIsInFyIiwiWnIiLCJLciIsIlZyIiwiR3IiLCJIciIsIkpyIiwiWWkiLCJZciIsIlFyIiwiWHIiLCJuZSIsInRlIiwicmUiLCJlZSIsInVlIiwiZ2YiLCJ1ZiIsImFlIiwiZmUiLCJRaSIsImllIiwib2UiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsImNlIiwibGUiLCJzZSIsImhlIiwiX19kYXRhX18iLCJwZSIsInZlIiwiZWYiLCJjZiIsIkFmIiwiemkiLCJfZSIsImN1IiwiZ2UiLCJuZiIsIm1lIiwieWUiLCJkZSIsImJlIiwiUmUiLCJ3ZSIsIk51IiwiS2YiLCJ4ZSIsIkZmIiwiamUiLCJBZSIsIkZ1IiwiT2kiLCJVdSIsIlJpIiwia2kiLCJWZiIsIkFpIiwiQnUiLCJUdSIsIm1mIiwieWYiLCJnaSIsImtlIiwiT2UiLCJOaSIsIkllIiwidGVtcGxhdGVTZXR0aW5ncyIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJtaSIsIlp1IiwiQmUiLCJFZSIsIlRlIiwiemUiLCJTZSIsImpmIiwiTGUiLCJXZSIsIkVpIiwiQ2UiLCJLdSIsIlVlIiwiJGUiLCJoZiIsIkRlIiwiU3UiLCJKaSIsIk1lIiwiRmUiLCJOZSIsIlBlIiwicWUiLCJaZSIsIktlIiwiRGkiLCJjbyIsIlZlIiwiR2UiLCJwaSIsIkhlIiwiSmUiLCJZZSIsImRhIiwicnUiLCJ0dSIsIklhIiwiUWUiLCJVaSIsIlhlIiwibnUiLCJmZiIsInhpIiwiVGkiLCJMaSIsIkJpIiwiTmYiLCJldSIsIk1pIiwiYWYiLCJiZiIsIkxmIiwidXUiLCJpdSIsIndpIiwiY3JpdGVyaWEiLCIkdSIsIm91IiwiaHUiLCJmdSIsImF1IiwianUiLCJsdSIsInN1IiwiUGkiLCIkaSIsInB1IiwidnUiLCJfdSIsImd1IiwieXUiLCJkdSIsImJ1Iiwid3UiLCJ4dSIsImZpIiwiQXUiLCJrdSIsIk91IiwiZnVuYyIsInRoaXNBcmciLCJJdSIsIlJ1IiwiRXUiLCJ6dSIsIkhpIiwiV2YiLCJMdSIsIld1IiwiQ3UiLCJjb3B5IiwiRHUiLCJNdSIsIlB1IiwicXUiLCJTaSIsIlZ1IiwiR3UiLCJoYSIsInVhIiwiSHUiLCJKdSIsIll1IiwidmkiLCJ0aHJ1IiwiZGkiLCJ5aSIsIldpIiwicGxhbnQiLCJRdSIsImJpIiwiaWkiLCJwbGFjZWhvbGRlciIsIlh1IiwibmkiLCJ0aSIsInJpIiwiZWkiLCJSZiIsInVpIiwiU2YiLCJGaSIsInFpIiwib2kiLCJFZiIsImphIiwiYWkiLCJ2ciIsImNpIiwibGkiLCJzaSIsImhpIiwidW8iLCJpdGVyYXRlZSIsImJhIiwiemEiLCJJaSIsInZmIiwiQ2kiLCJTYSIsIlppIiwiS2kiLCJWaSIsIkdpIiwiR28iLCJjYWNoZSIsImNsb25lIiwiWGkiLCJubyIsInRvIiwicm8iLCJlbyIsImlvIiwib28iLCJmbyIsImFvIiwibG8iLCJzbyIsImhvIiwicG8iLCJ2byIsImdvIiwieW8iLCJibyIsIndvIiwibW8iLCJ4byIsImpvIiwiQW8iLCJrbyIsIk9vIiwiSW8iLCJSbyIsIkVvIiwiem8iLCJTbyIsIkxvIiwiV28iLCJDbyIsIlVvIiwiQm8iLCJUbyIsIiRvIiwiRG8iLCJNbyIsIkZvIiwiTm8iLCJQbyIsInFvIiwiWm8iLCJsZWFkaW5nIiwibWF4V2FpdCIsInRyYWlsaW5nIiwiZmx1c2giLCJLbyIsIlZvIiwiQ2FjaGUiLCJIbyIsIkpvIiwiWW8iLCJRbyIsIlhvIiwidGYiLCJyZiIsImxmIiwic2YiLCJwZiIsImRmIiwid2YiLCJ4ZiIsImtmIiwiT2YiLCJJZiIsInRhIiwiemYiLCJDZiIsIlVmIiwiQmYiLCJUZiIsIiRmIiwiRGYiLCJNZiIsIkhmIiwiUGYiLCJxZiIsIlpmIiwiR2YiLCJKZiIsIllmIiwiUWYiLCJYZiIsIm5hIiwicmEiLCJlYSIsInNhIiwiaWEiLCJvYSIsImZhIiwiYWEiLCJjYSIsImxhIiwidG9VcHBlckNhc2UiLCJwYSIsInZhIiwiZ2EiLCJ5YSIsIndhIiwibWEiLCJ4YSIsIkFhIiwia2EiLCJPYSIsIlJhIiwiRWEiLCJMYSIsIldhIiwiQ2EiLCJVYSIsIkJhIiwiVGEiLCIkYSIsIkRhIiwiYWZ0ZXIiLCJhcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJiZWZvcmUiLCJiaW5kQWxsIiwiYmluZEtleSIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImNvbnN0YW50IiwiY291bnRCeSIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRlYm91bmNlIiwiZGVmYXVsdHNEZWVwIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmbG93IiwiZmxvd1JpZ2h0IiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJncm91cEJ5IiwiaW5pdGlhbCIsImludGVyc2VjdGlvbiIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJrZXlzSW4iLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibWVtb2l6ZSIsIm1lcmdlV2l0aCIsIm1ldGhvZE9mIiwibWl4aW4iLCJuZWdhdGUiLCJudGhBcmciLCJvbWl0Iiwib21pdEJ5Iiwib3JkZXJCeSIsIm92ZXIiLCJvdmVyQXJncyIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwicGFydGlhbFJpZ2h0IiwicGFydGl0aW9uIiwicGlja0J5IiwicHJvcGVydHkiLCJwcm9wZXJ0eU9mIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInB1bGxBdCIsInJhbmdlUmlnaHQiLCJyZWFyZyIsInJlbW92ZSIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRCeSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGhyb3R0bGUiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwidG9QYXRoIiwidG9QbGFpbk9iamVjdCIsInRyYW5zZm9ybSIsInVuYXJ5IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1bnppcCIsInVuemlwV2l0aCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndpdGhvdXQiLCJ3b3JkcyIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJ6aXBXaXRoIiwiZW50cmllc0luIiwiZXh0ZW5kV2l0aCIsImNhbWVsQ2FzZSIsImNhcGl0YWxpemUiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlYnVyciIsImRlZmF1bHRUbyIsImVxIiwiZXNjYXBlUmVnRXhwIiwiZmluZEtleSIsImZpbmRMYXN0IiwiZmluZExhc3RJbmRleCIsImZpbmRMYXN0S2V5IiwiZm9yRWFjaFJpZ2h0IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJndGUiLCJoYXNJbiIsImhlYWQiLCJpblJhbmdlIiwiaXNBcmd1bWVudHMiLCJpc0FycmF5TGlrZSIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNMZW5ndGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNOdW1iZXIiLCJpc09iamVjdExpa2UiLCJpc1BsYWluT2JqZWN0IiwiaXNTdHJpbmciLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJsdGUiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJBcnJheSIsInN0dWJGYWxzZSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJyZXN1bHQiLCJydW5JbkNvbnRleHQiLCJzYW1wbGUiLCJzbmFrZUNhc2UiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0Q2FzZSIsInN1YnRyYWN0Iiwic3VtIiwic3VtQnkiLCJzb3VyY2VVUkwiLCJ0aW1lcyIsInRvRmluaXRlIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwidXBwZXJDYXNlIiwidXBwZXJGaXJzdCIsImVhY2hSaWdodCIsImNvbW1pdCIsImRlY29kZUNvbXBvbmVudCIsInNwbGl0T25GaXJzdCIsImFycmF5Rm9ybWF0IiwicGFyc2VOdW1iZXJzIiwicGFyc2VCb29sZWFucyIsIkJvb2xlYW4iLCIzNzkiLCIzODAiLCJlbmNvZGVVUklDb21wb25lbnQiLCIzODIiLCJkZWJ1ZyIsInV0aWxzIiwiRXZlbnRFbWl0dGVyIiwic2FyZ3MiLCJ4aHIiLCJ1dWlkIiwiRGF0YVN0b3JlIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJfbGFzdFF1ZXJ5QXJncyIsIl9sYXN0RmlsdGVyIiwiX3F1ZXJ5Rm4iLCJfZm9ybWF0Rm4iLCJfbGFzdFF1ZXJ5IiwiX2V2ZW50c09mZiIsIl9pbmhlcml0cyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2dldCIsIkxFVkVMIiwiTk9ORSIsIkxPRyIsIklORk8iLCJXQVJOIiwiREVCVUciLCJncm91cCIsImdyb3VwRW5kIiwiaW5mbyIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsIl90eXBlb2YiLCJSZWZlcmVuY2VFcnJvciIsIl9yZXF1aXJlIiwiaHRtbEVuY29kZSIsImh0bWxEZWNvZGUiLCJxdWVyeUVzY2FwZSIsIl9yZXF1aXJlZCIsInhockxpYiIsImFqYXgiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucHJvZ3Jlc3MiLCJkaXNwZW5zZSIsImhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwiUHJvZ3Jlc3MiLCJvbmRvbmUiLCJsZW5ndGhDb21wdXRhYmxlIiwidG90YWwiLCJnZXRSZXNwb25zZUhlYWRlciIsImxvYWRlZCIsInNlbmQiLCJlbmNvZGVVUkkiLCJwb3N0IiwidHJhY2tlciIsInBlcmNlbnQiLCJQcm9ncmVzc1RyYWNrZXIiLCJpc0RvbmUiLCJfb25DaGlsZFByb2dyZXNzIiwicmVxdWlyZWQiLCJub2NhY2hlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJGZWVkIiwiUHJvZHVjdEZlZWQiLCJDYXJ0RmVlZCIsIlN0b3JlQWRhcHRlciIsIl90b3RhbHMiLCJncmFuZF90b3RhbCIsIl9kaXNjb3VudHMiLCJzdWNjZXNzIiwiRGVtb1N0b3JlYUFkYXB0ZXIiLCJfcHJvZHVjdHMiLCJfc2Vzc2lvbkhhbmRsZXIiLCJfc2Vzc2lvbkFjdGlvbkhhbmRsZXIiLCJza3UiLCJpbWFnZVVybCIsImRlc2NyaXB0aW9uIiwicHJpY2UiLCJ0YWdzIiwiZmV0Y2hDYXJ0U2Vzc2lvbiIsInRlcm1zIiwibGltaXQiLCJjYXJ0IiwiX3dhaXRGb3IiLCJfZnJlZXplSGVpZ2h0IiwiX2xhc3RVbmZyZWV6ZSIsIm9uSW5pdCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJkYXRhU291cmNlIiwicXVlcnkiLCJmaWx0ZXJzIiwidHBsIiwiaXNGdWxmaWxsZWRQYXNzdGhyb3VnaCIsIml0ZW1zIiwiaXNfZW1wdHkiLCJiZWdpblJlbmRlciIsImZyZWV6ZUhlaWdodCIsImNvbnRhaW5lciIsImluc2VydEFkamFjZW50SFRNTCIsInByb2R1Y3RzIiwidW5mcmVlemVIZWlnaHQiLCJlbmRSZW5kZXIiLCJjbGllbnRIZWlnaHQiLCJoZWlnaHQiLCJoYXNDaGlsZE5vZGVzIiwibGFzdENoaWxkIiwicXVlcnlTZWxlY3RvciIsImN1c3RvbUVycm9yIiwiaGlkZGVuUHJlIiwiU1VSUk9HQVRFX1BBSVJfUkVHRVhQIiwiTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImhhc0NsYXNzIiwiY2xhc3NOYW1lIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImhhc0F0dHIiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0ciIsInNldEF0dHJpYnV0ZSIsInF1ZXJ5QWxsIiwicXVlcnlTZWxlY3RvckFsbCIsInF1ZXJ5Rmlyc3QiLCJFcnJvcnNMaWIiLCJUZW1wbGF0aW5nIiwiVGVtcGxhdGUiLCJfcmVxdWlyZTIiLCJfcmVxdWlyZTQiLCJxdWVyeVN0cmluZyIsIkF3ZXNvbWVDYXJ0IiwiX2NhcnQiLCJfcXVlcnlDYXJ0IiwiZmV0Y2hDYXJ0SXRlbXMiLCJfbGFzdFRvdGFsQ291bnQiLCJfbGFzdFRvdGFsSXRlbXMiLCJkZWZhdWx0X3N0b3JlX2FkYXB0ZXIiLCJzdG9yZUFkYXB0ZXIiLCJfb25DYXJ0RGF0YVVwZGF0ZSIsIl9vbkNhcnREYXRhSW5zZXJ0IiwiX29uQ2FydERhdGFSZW1vdmUiLCJzZXNzaW9uQWN0aW9uIiwic2hpcHBpbmdfcmF0ZXMiLCJfc2hpcHBpbmdfcmF0ZXNfY2FjaGUiLCJfdXBkYXRlQnVsa0NhcnREYXRhIiwiX2VtaXRVcGRhdGVkIiwiZXZlbnRzT2ZmIiwicmVtb3ZlZCIsImdldFByb2R1Y3RCeVNLVSIsInByb2R1Y3QiLCJxdHkiLCJ1bml0IiwibG9ja19xdHkiLCJiYXNlX3ByaWNlIiwiZXZlbnRzT24iLCJmb3JtYXRDdXJyZW5jeSIsImxvYWRUZW1wbGF0ZSIsIl9vbl90cGxfZW5kX3JlbmRlciIsImZlZWRzIiwidXBkYXRlVUkiLCJzdWJncm91cHMiLCJzdWJncm91cCIsInNlbGVjdG9ycyIsInJlbW92ZUF0dHJpYnV0ZSIsInByaWNlX3NlbGVjdG9yIiwiYnRuIiwiX3ZhbGlkYXRlQ2hpbGRPcHRpb25zIiwiaXRlbV9pZCIsImN1c3RvbV9maWVsZHMiLCJlbCIsIl92YWxpZGF0ZUFkZFRvQ2FydEJ0biIsIl9vbkZyb21JZENoYW5nZSIsIl9vbk9wdGlvbkVsQ2hhbmdlIiwiZGF0YXNldCIsImF3Y1F0eUZyb20iLCJhd2NDdXN0b21GaWVsZHMiLCJmaWVsZF9uYW1lIiwiYXdjQ3VzdG9tRmllbGQiLCJhd2NSZXF1aXJlZCIsIl9vbkFkZFRvQ2FydENsaWNrIiwiX29uUmVtb3ZlRnJvbUNhcnRDbGljayIsImF3Y0lkIiwiX29uQWRqdXN0UXR5Q2hhbmdlIiwiYXdjQ291cG9uQXBwbHkiLCJhcHBseUNvdXBvbiIsImF3Y09uU3VjY2VzcyIsImF3Y09uUmVqZWN0IiwicmVtb3ZlQ291cG9uIiwiYXdjUXR5IiwiYXdjT3B0aW9ucyIsImN1c3RvbSIsImFkZFRvQ2FydCIsInJlbW92ZUZyb21DYXJ0IiwiY291cG9uX2NvZGUiLCJyZXBsYWNlcyIsIm9sZF9pZCIsImFkZHJlc3MiLCJjYWxjdWxhdGVfc2hpcHBpbmciLCJwcm9taXNlUmVhZHkiLCJ0b3RhbEl0ZW1zIiwidG90YWxDb3VudCIsImdldFRvdGFscyIsImdldERpc2NvdW50cyIsImNvbnRydWN0b3IiLCJwYXJzZUhhc2giLCJsb2NhdGlvbiIsIkVycm9ycyIsImdldFRlbXBsYXRlIiwiJGNhcnQiLCIkcGFyZW50IiwiJHRwbCIsImdldEVsZW1lbnRCeUlkIiwidXBkYXRlV2FpdEZvciIsImRlbGF5ZWRUcGwiLCIkaW5kZXgiLCIkaXNfZmlyc3QiLCIkaXNfZXZlbiJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsR0FBQSxHQUFBLGlCQUFBQyxTQUFBLG9CQUFBQyxPQUFBQSxPQUFBRCxRQUFBRCxTQUFBLEdBQUEsbUJBQUFHLFFBQUFBLE9BQUFDLElBQUFELE9BQUEsR0FBQUgsT0FBQSxFQUFBLG9CQUFBSyxPQUFBQSxPQUFBLG9CQUFBQyxPQUFBQSxPQUFBLG9CQUFBQyxLQUFBQSxLQUFBQyxNQUFBQyxJQUFBVCxLQUFBLENBQUEsV0FBQSxPQUFBLFdBQUEsT0FBQSxTQUFBVSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFmLEdBQUEsSUFBQVksRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBQyxFQUFBLG1CQUFBQyxTQUFBQSxRQUFBLElBQUFqQixHQUFBZ0IsRUFBQSxPQUFBQSxFQUFBRCxHQUFBLEdBQUEsR0FBQUcsRUFBQSxPQUFBQSxFQUFBSCxHQUFBLEdBQUEsSUFBQUksRUFBQSxJQUFBQyxNQUFBLHVCQUFBTCxFQUFBLEtBQUEsTUFBQUksRUFBQUUsS0FBQSxtQkFBQUYsRUFBQSxJQUFBRyxFQUFBVixFQUFBRyxHQUFBLENBQUFkLFFBQUEsSUFBQVUsRUFBQUksR0FBQSxHQUFBUSxLQUFBRCxFQUFBckIsUUFBQSxTQUFBUyxHQUFBLE9BQUFJLEVBQUFILEVBQUFJLEdBQUEsR0FBQUws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QUEsSUFBQSxDQUFBLGlCQUFBaFgsRUFBQUEsRUFBQSxpQkFBQUQsT0FBQUEsT0FBQSxpQkFBQUUsS0FBQUEsS0FBQUMsUUFFQWUsS0FBQWYsS0FBQSxvQkFBQUYsT0FBQUEsT0FBQSxvQkFBQUMsS0FBQUEsS0FBQSxvQkFBQUYsT0FBQUEsT0FBQSw0QkNGQVksRUFBQSxLQUFBZixFQUFBRCxRQUFBZ0IsRUFBQSxJQUFBMGUsT0FBQTZMLFFBRUEsQ0FBQUMsSUFBQSxJQUFBL0ssR0FBQSxLQUFBZ0wsSUFBQSxDQUFBLFNBQUF6cUIsRUFBQWYsRUFBQUQsR0NGQWdCLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUFBZixFQUFBRCxRQUFBZ0IsRUFBQSxLQUVBLENBQUEwcUIsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQTlTLEdBQUEsR0FBQStTLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFB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LEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQ2xzQkMsY0FBZSxTQUFtQmgvRCxFQUFPRixFQUFPZSxFQUFTWCxFQUFHTCxFQUFRRSxFQUFHTyxHQUd2RSxJQUFJOEIsRUFBS3JDLEVBQUdZLE9BQVMsRUFDckIsT0FBUWQsR0FDUixLQUFLLEVBQUcsT0FBT0UsRUFBR3FDLEVBQUcsR0FDZixLQUNELEVBQUV6QyxLQUFLMEssRUFBSW5LLEVBQUcrK0QsZUFBZWwvRCxFQUFHcUMsSUFDckMsTUFBTSxLQUNELEVBQ0MsS0FDRCxFQUNDLEtBQ0QsRUFDQyxLQUNELEVBQ0MsS0FDRCxFQUNDLEtBQ0QsRUFBRXpDLEtBQUswSyxFQUFJdEssRUFBR3FDLEdBQ25CLE1BQU0sS0FDRCxFQUNEekMsS0FBSzBLLEVBQUksQ0FDUDhKLEtBQU0sbUJBQ05qSSxNQUFPaE0sRUFBR2cvRCxhQUFhbi9ELEVBQUdxQyxJQUMxQis4RCxNQUFPai9ELEVBQUdrL0QsV0FBV3IvRCxFQUFHcUMsR0FBS3JDLEVBQUdxQyxJQUNoQzBwRCxJQUFLNXJELEVBQUd5dUQsUUFBUWh2RCxLQUFLMC9ELEtBRzNCLE1BQU0sS0FDRCxHQUNEMS9ELEtBQUswSyxFQUFJLENBQ1A4SixLQUFNLG1CQUNOMjBDLFNBQVUvb0QsRUFBR3FDLEdBQ2I4SixNQUFPbk0sRUFBR3FDLEdBQ1YwcEQsSUFBSzVyRCxFQUFHeXVELFFBQVFodkQsS0FBSzAvRCxLQUczQixNQUFNLEtBQ0QsR0FBRzEvRCxLQUFLMEssRUFBSW5LLEVBQUdvL0QsZ0JBQWdCdi9ELEVBQUdxQyxFQUFHLEdBQUlyQyxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLEdBQUt6QyxLQUFLMC9ELElBQ3JFLE1BQU0sS0FDRCxHQUFHMS9ELEtBQUswSyxFQUFJLENBQUV3aEQsS0FBTTlyRCxFQUFHcUMsRUFBRyxHQUFJdW1ELE9BQVE1b0QsRUFBR3FDLEVBQUcsR0FBSXdtRCxLQUFNN29ELEVBQUdxQyxFQUFHLElBQ2pFLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUluSyxFQUFHcS9ELGFBQWF4L0QsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxFQUFHLEdBQUlyQyxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLElBQUEsRUFBWXpDLEtBQUswL0QsSUFDbkYsTUFBTSxLQUNELEdBQUcxL0QsS0FBSzBLLEVBQUluSyxFQUFHcS9ELGFBQWF4L0QsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxFQUFHLEdBQUlyQyxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLElBQUEsRUFBV3pDLEtBQUswL0QsSUFDbEYsTUFBTSxLQUNELEdBQUcxL0QsS0FBSzBLLEVBQUksQ0FBRW96QixLQUFNMTlCLEVBQUdxQyxFQUFHLEdBQUl5cEQsS0FBTTlyRCxFQUFHcUMsRUFBRyxHQUFJdW1ELE9BQVE1b0QsRUFBR3FDLEVBQUcsR0FBSXdtRCxLQUFNN29ELEVBQUdxQyxFQUFHLEdBQUlzcUQsWUFBYTNzRCxFQUFHcUMsRUFBRyxHQUFJKzhELE1BQU9qL0QsRUFBR2svRCxXQUFXci9ELEVBQUdxQyxFQUFHLEdBQUlyQyxFQUFHcUMsS0FDOUksTUFBTSxLQUNELEdBQ0MsS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksQ0FBRXdoRCxLQUFNOXJELEVBQUdxQyxFQUFHLEdBQUl1bUQsT0FBUTVvRCxFQUFHcUMsRUFBRyxHQUFJd21ELEtBQU03b0QsRUFBR3FDLEVBQUcsR0FBSXNxRCxZQUFhM3NELEVBQUdxQyxFQUFHLEdBQUkrOEQsTUFBT2ovRCxFQUFHay9ELFdBQVdyL0QsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxLQUM5SCxNQUFNLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJLENBQUU4MEQsTUFBT2ovRCxFQUFHay9ELFdBQVdyL0QsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxFQUFHLElBQUtpckQsUUFBU3R0RCxFQUFHcUMsSUFDekUsTUFBTSxLQUNELEdBQ0QsSUFBSW5DLEVBQVVDLEVBQUdxL0QsYUFBYXgvRCxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxHQUFLckMsRUFBR3FDLElBQUEsRUFBWXpDLEtBQUswL0QsSUFDMUV0K0QsRUFBVWIsRUFBRysrRCxlQUFlLENBQUNoL0QsR0FBVUYsRUFBR3FDLEVBQUcsR0FBRzBwRCxLQUNwRC9xRCxFQUFReStELFNBQUEsRUFFUjcvRCxLQUFLMEssRUFBSSxDQUFFODBELE1BQU9wL0QsRUFBR3FDLEVBQUcsR0FBRys4RCxNQUFPOVIsUUFBU3RzRCxFQUFTMCtELE9BQUEsR0FFeEQsTUFBTSxLQUNELEdBQUc5L0QsS0FBSzBLLEVBQUl0SyxFQUFHcUMsR0FDcEIsTUFBTSxLQUNELEdBQUd6QyxLQUFLMEssRUFBSSxDQUFDd2hELEtBQU05ckQsRUFBR3FDLEVBQUcsR0FBSSs4RCxNQUFPai9ELEVBQUdrL0QsV0FBV3IvRCxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLEtBQ3BFLE1BQU0sS0FDRCxHQUNDLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJbkssRUFBR3cvRCxnQkFBZ0IzL0QsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxFQUFHLEdBQUlyQyxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLEVBQUcsR0FBSWxDLEVBQUdrL0QsV0FBV3IvRCxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLElBQU16QyxLQUFLMC9ELElBQ2xILE1BQU0sS0FDRCxHQUNEMS9ELEtBQUswSyxFQUFJLENBQ1A4SixLQUFNLG1CQUNOekUsS0FBTTNQLEVBQUdxQyxFQUFHLEdBQ1p1bUQsT0FBUTVvRCxFQUFHcUMsRUFBRyxHQUNkd21ELEtBQU03b0QsRUFBR3FDLEVBQUcsR0FDWjByRCxPQUFRLEdBQ1JxUixNQUFPai9ELEVBQUdrL0QsV0FBV3IvRCxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLElBQ2xDMHBELElBQUs1ckQsRUFBR3l1RCxRQUFRaHZELEtBQUswL0QsS0FHM0IsTUFBTSxLQUNELEdBQUcxL0QsS0FBSzBLLEVBQUluSyxFQUFHeS9ELG9CQUFvQjUvRCxFQUFHcUMsRUFBRyxHQUFJckMsRUFBR3FDLEVBQUcsR0FBSXJDLEVBQUdxQyxHQUFLekMsS0FBSzAvRCxJQUN6RSxNQUFNLEtBQ0QsR0FBRzEvRCxLQUFLMEssRUFBSSxDQUFFd2hELEtBQU05ckQsRUFBR3FDLEVBQUcsR0FBSXVtRCxPQUFRNW9ELEVBQUdxQyxFQUFHLEdBQUl3bUQsS0FBTTdvRCxFQUFHcUMsRUFBRyxHQUFJKzhELE1BQU9qL0QsRUFBR2svRCxXQUFXci9ELEVBQUdxQyxFQUFHLEdBQUlyQyxFQUFHcUMsS0FDdkcsTUFBTSxLQUNELEdBQ0MsS0FDRCxHQUFHekMsS0FBSzBLLEVBQUl0SyxFQUFHcUMsR0FDcEIsTUFBTSxLQUNELEdBQ0R6QyxLQUFLMEssRUFBSSxDQUNQOEosS0FBTSxnQkFDTjAzQyxLQUFNOXJELEVBQUdxQyxFQUFHLEdBQ1p1bUQsT0FBUTVvRCxFQUFHcUMsRUFBRyxHQUNkd21ELEtBQU03b0QsRUFBR3FDLEVBQUcsR0FDWjBwRCxJQUFLNXJELEVBQUd5dUQsUUFBUWh2RCxLQUFLMC9ELEtBRzNCLE1BQU0sS0FDRCxHQUFHMS9ELEtBQUswSyxFQUFJLENBQUM4SixLQUFNLE9BQVE4MkMsTUFBT2xyRCxFQUFHcUMsR0FBSzBwRCxJQUFLNXJELEVBQUd5dUQsUUFBUWh2RCxLQUFLMC9ELEtBQ3BFLE1BQU0sS0FDRCxHQUFHMS9ELEtBQUswSyxFQUFJLENBQUM4SixLQUFNLFdBQVlxeUIsSUFBS3RtQyxFQUFHZy9CLEdBQUduL0IsRUFBR3FDLEVBQUcsSUFBSzhKLE1BQU9uTSxFQUFHcUMsR0FBSzBwRCxJQUFLNXJELEVBQUd5dUQsUUFBUWh2RCxLQUFLMC9ELEtBQzlGLE1BQU0sS0FDRCxHQUFHMS9ELEtBQUswSyxFQUFJbkssRUFBR2cvQixHQUFHbi9CLEVBQUdxQyxFQUFHLElBQzdCLE1BQU0sS0FDRCxHQUNDLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJdEssRUFBR3FDLEdBQ3BCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksQ0FBQzhKLEtBQU0sZ0JBQWlCakksTUFBT25NLEVBQUdxQyxHQUFLMG1ELFNBQVUvb0QsRUFBR3FDLEdBQUswcEQsSUFBSzVyRCxFQUFHeXVELFFBQVFodkQsS0FBSzAvRCxLQUMvRixNQUFNLEtBQ0QsR0FBRzEvRCxLQUFLMEssRUFBSSxDQUFDOEosS0FBTSxnQkFBaUJqSSxNQUFPc1osT0FBT3psQixFQUFHcUMsSUFBTTBtRCxTQUFVdGpDLE9BQU96bEIsRUFBR3FDLElBQU0wcEQsSUFBSzVyRCxFQUFHeXVELFFBQVFodkQsS0FBSzAvRCxLQUMvRyxNQUFNLEtBQ0QsR0FBRzEvRCxLQUFLMEssRUFBSSxDQUFDOEosS0FBTSxpQkFBa0JqSSxNQUFrQixTQUFYbk0sRUFBR3FDLEdBQWdCMG1ELFNBQXFCLFNBQVgvb0QsRUFBR3FDLEdBQWdCMHBELElBQUs1ckQsRUFBR3l1RCxRQUFRaHZELEtBQUswL0QsS0FDdEgsTUFBTSxLQUNELEdBQUcxL0QsS0FBSzBLLEVBQUksQ0FBQzhKLEtBQU0sbUJBQW9CMjBDLGNBQUEsRUFBcUI1OEMsV0FBQSxFQUFrQjQvQyxJQUFLNXJELEVBQUd5dUQsUUFBUWh2RCxLQUFLMC9ELEtBQ3hHLE1BQU0sS0FDRCxHQUFHMS9ELEtBQUswSyxFQUFJLENBQUM4SixLQUFNLGNBQWUyMEMsU0FBVSxLQUFNNThDLE1BQU8sS0FBTTQvQyxJQUFLNXJELEVBQUd5dUQsUUFBUWh2RCxLQUFLMC9ELEtBQ3pGLE1BQU0sS0FDRCxHQUNDLEtBQ0QsR0FBRzEvRCxLQUFLMEssRUFBSXRLLEVBQUdxQyxHQUNwQixNQUFNLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJbkssRUFBRzAvRCxhQUFBLEVBQWtCNy9ELEVBQUdxQyxHQUFLekMsS0FBSzAvRCxJQUNuRCxNQUFNLEtBQ0QsR0FBRzEvRCxLQUFLMEssRUFBSW5LLEVBQUcwL0QsYUFBQSxFQUFtQjcvRCxFQUFHcUMsR0FBS3pDLEtBQUswL0QsSUFDcEQsTUFBTSxLQUNELEdBQUl0L0QsRUFBR3FDLEVBQUcsR0FBR0gsS0FBSyxDQUFDNDlELEtBQU0zL0QsRUFBR2cvQixHQUFHbi9CLEVBQUdxQyxJQUFNMG1ELFNBQVUvb0QsRUFBR3FDLEdBQUswOUQsVUFBVy8vRCxFQUFHcUMsRUFBRyxLQUFLekMsS0FBTTBLLEVBQUl0SyxFQUFHcUMsRUFBRyxHQUNyRyxNQUFNLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJLENBQUMsQ0FBQ3cxRCxLQUFNMy9ELEVBQUdnL0IsR0FBR24vQixFQUFHcUMsSUFBTTBtRCxTQUFVL29ELEVBQUdxQyxLQUNyRCxNQUFNLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJLEdBQ2pCLE1BQU0sS0FDRCxHQUFHdEssRUFBR3FDLEVBQUcsR0FBR0gsS0FBS2xDLEVBQUdxQyxJQUN6QixNQUFNLEtBQ0QsR0FBR3pDLEtBQUswSyxFQUFJLENBQUN0SyxFQUFHcUMsSUFDckIsTUFBTSxLQUNELEdBQUdyQyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksR0FDakIsTUFBTSxLQUNELEdBQUd0SyxFQUFHcUMsRUFBRyxHQUFHSCxLQUFLbEMsRUFBR3FDLElBQ3pCLE1BQU0sS0FDRCxHQUFHekMsS0FBSzBLLEVBQUksQ0FBQ3RLLEVBQUdxQyxJQUNyQixNQUFNLEtBQ0QsR0FBR3JDLEVBQUdxQyxFQUFHLEdBQUdILEtBQUtsQyxFQUFHcUMsSUFDekIsTUFBTSxLQUNELElBQUl6QyxLQUFLMEssRUFBSSxDQUFDdEssRUFBR3FDLElBQ3RCLE1BQU0sS0FDRCxJQUFJckMsRUFBR3FDLEVBQUcsR0FBR0gsS0FBS2xDLEVBQUdxQyxNQUkxQjI5RCxNQUFPLENBQUMsQ0FBQ2o4RCxFQUFFLEVBQUVtQixFQUFFLEVBQUVJLEVBQUUsQ0FBQyxFQUFFLElBQUljLEVBQUUsRUFBRTROLEdBQUcsQ0FBQyxFQUFFLElBQUlHLEdBQUcsQ0FBQyxFQUFFLElBQUlrRSxHQUFHLENBQUMsRUFBRSxJQUFJNEksR0FBRyxDQUFDLEVBQUUsSUFBSXFDLEdBQUcsQ0FBQyxFQUFFLElBQUlvZCxHQUFHLENBQUMsRUFBRSxJQUFJMUcsR0FBRyxDQUFDLEVBQUUsSUFBSStLLEdBQUcsQ0FBQyxFQUFFLElBQUlySSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUM3N0IsRUFBRSxDQUFDLElBQUksQ0FBQ3lFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsR0FBR2lELEVBQUUsRUFBRU0sRUFBRSxFQUFFUyxFQUFFLEVBQUVtSSxHQUFHLEVBQUVRLEdBQUcsRUFBRUssR0FBRyxHQUFHZ0IsR0FBRyxHQUFHVSxHQUFHLENBQUMsRUFBRSxJQUFJRyxHQUFHLENBQUMsRUFBRSxJQUFJZ0IsR0FBRyxHQUFHa0QsR0FBRyxDQUFDLEVBQUUsSUFBSXVHLEdBQUcsR0FBR3dCLEdBQUcsR0FBR2EsR0FBRyxDQUFDLEVBQUUsSUFBSXFDLEdBQUcsQ0FBQyxFQUFFLElBQUl5ZixHQUFHLENBQUMsRUFBRSxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsR0FBRzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUd5QyxHQUFHLENBQUMsRUFBRSxJQUFJMUcsR0FBRyxDQUFDLEVBQUUsSUFBSStLLEdBQUcsQ0FBQyxFQUFFLElBQUlwRSxHQUFHLEdBQUdqRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUM3N0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDeUUsRUFBRSxDQUFDLEVBQUUsSUFBSTBPLEdBQUcsQ0FBQyxFQUFFLElBQUlHLEdBQUcsQ0FBQyxFQUFFLElBQUlrRSxHQUFHLENBQUMsRUFBRSxJQUFJNEksR0FBRyxDQUFDLEVBQUUsSUFBSXFDLEdBQUcsQ0FBQyxFQUFFLElBQUl5ZixHQUFHLENBQUMsRUFBRSxJQUFJbEQsR0FBRyxDQUFDLEVBQUUsSUFBSTVCLEdBQUcsQ0FBQyxFQUFFLElBQUl5QyxHQUFHLENBQUMsRUFBRSxJQUFJMUcsR0FBRyxDQUFDLEVBQUUsSUFBSStLLEdBQUcsQ0FBQyxFQUFFLElBQUlySSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNwM0IsRUFBRSxDQUFDLEVBQUUsR0FBRzBPLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQyxFQUFFLEdBQUdrRSxHQUFHLENBQUMsRUFBRSxHQUFHNEksR0FBRyxDQUFDLEVBQUUsR0FBR3FDLEdBQUcsQ0FBQyxFQUFFLEdBQUd5ZixHQUFHLENBQUMsRUFBRSxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsR0FBRzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUd5QyxHQUFHLENBQUMsRUFBRSxHQUFHMUcsR0FBRyxDQUFDLEVBQUUsR0FBRytLLEdBQUcsQ0FBQyxFQUFFLEdBQUdySSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNwM0IsRUFBRSxDQUFDLEVBQUUsR0FBRzBPLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQyxFQUFFLEdBQUdrRSxHQUFHLENBQUMsRUFBRSxHQUFHNEksR0FBRyxDQUFDLEVBQUUsR0FBR3FDLEdBQUcsQ0FBQyxFQUFFLEdBQUd5ZixHQUFHLENBQUMsRUFBRSxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsR0FBRzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUd5QyxHQUFHLENBQUMsRUFBRSxHQUFHMUcsR0FBRyxDQUFDLEVBQUUsR0FBRytLLEdBQUcsQ0FBQyxFQUFFLEdBQUdySSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNwM0IsRUFBRSxDQUFDLEVBQUUsR0FBRzBPLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQyxFQUFFLEdBQUdrRSxHQUFHLENBQUMsRUFBRSxHQUFHNEksR0FBRyxDQUFDLEVBQUUsR0FBR3FDLEdBQUcsQ0FBQyxFQUFFLEdBQUd5ZixHQUFHLENBQUMsRUFBRSxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsR0FBRzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUd5QyxHQUFHLENBQUMsRUFBRSxHQUFHMUcsR0FBRyxDQUFDLEVBQUUsR0FBRytLLEdBQUcsQ0FBQyxFQUFFLEdBQUdySSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNwM0IsRUFBRSxDQUFDLEVBQUUsR0FBRzBPLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQyxFQUFFLEdBQUdrRSxHQUFHLENBQUMsRUFBRSxHQUFHNEksR0FBRyxDQUFDLEVBQUUsR0FBR3FDLEdBQUcsQ0FBQyxFQUFFLEdBQUd5ZixHQUFHLENBQUMsRUFBRSxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsR0FBRzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUd5QyxHQUFHLENBQUMsRUFBRSxHQUFHMUcsR0FBRyxDQUFDLEVBQUUsR0FBRytLLEdBQUcsQ0FBQyxFQUFFLEdBQUdySSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNwM0IsRUFBRSxDQUFDLEVBQUUsR0FBRzBPLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQyxFQUFFLEdBQUdrRSxHQUFHLENBQUMsRUFBRSxHQUFHNEksR0FBRyxDQUFDLEVBQUUsR0FBR3FDLEdBQUcsQ0FBQyxFQUFFLEdBQUd5ZixHQUFHLENBQUMsRUFBRSxHQUFHbEQsR0FBRyxDQUFDLEVBQUUsR0FBRzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUd5QyxHQUFHLENBQUMsRUFBRSxHQUFHMUcsR0FBRyxDQUFDLEVBQUUsR0FBRytLLEdBQUcsQ0FBQyxFQUFFLEdBQUdySSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNwM0IsRUFBRSxDQUFDLEVBQUUsR0FBRzBPLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQyxFQUFFLEdBQUdrRSxHQUFHLENBQUMsRUFBRSxHQUFHNEks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SUFBQUMsT0FBQSxJQUFBQyxPQUFBLEtBQUFDLE9BQUEsS0FBQUMsT0FBQSxLQUFBQyxPQUFBLEtBQUFDLE9BQUEsS0FBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FBQSxJQUFBQyxTQUFBLElBQUFDLFNBQUEsSUFBQUMsU0FB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QUEsRUFDOUIsRUFBQUcsRUFBSW96RyxTQUNDdnpHLEVBQUEsR0FBQSxFQUFTQyxHQUNkSCxFQUFLMm5DLEdBQUF0bkMsR0FBQSxPQUFZRixFQUFLLE9BQ2pCSCxFQUFBeXRELFFBQWdCM3RELFFBQ1g2b0QsRUFFWG1RLGVBRWEsVUFBUSxTQUl2Qjc0RCxFQUFBRCxHQUFBLE9BQVdDLEVBQUEsR0FBQSxFQUFBRCxFQUFBMm5DLEdBQWU3bkMsTUFBQUUsRUFBV3l0RCxRQUFBM3RELFFBQ3BDNm9ELEVBQW9CbVEsZUFHTixTQUFRLFNBSXZCNzRELEVBQUFELEdBQUEsT0FBV0MsRUFBQSxHQUFBLEVBQUFELEVBQUEybkMsR0FBZTduQyxNQUFBRSxFQUFVeXRELFFBQUEzdEQsUUFDbkM2b0QsRUFBb0JtUSxlQUdOLFdBQVEsU0FJdkI3NEQsRUFBQUQsR0FBQSxJQUFXRyxFQUFBSCxFQUFBbWtCLEtBQUFnMEMsS0FBZSxRQUFBLElBQVloNEQsRUFBQTh5RyxNQUFnQixNQUVyRG5OLE1BQW9COXJGLE1BQUssYUFFekI3WixFQUFLTCxNQUFRLElBRVpZLE1BREEsc0NBQ1UsWUFBTSxJQUFBVCxFQUFBLEdBQUFFLEVBQUE4eUcsTUFBQXZFLGFBRWpCa0IsZUFBSzN2RyxLQUlFMG9ELEVBQWNtUSxlQUFhLFlBQWUsU0FHbEQ3NEQsRUFBQUQsR0FBVyxPQUFBK2xHLEVBQUF4bEcsUUFBZU4sR0FBQSxLQUFhVCxFQUFTRCxRQUUvQyxDQUFBb3BELFdBRE1BLEVBQ0NvbEQsU0FHUkEscUR0WS9TQSIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIhZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9dCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNle3ZhciBlO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/ZT13aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9lPWdsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmKGU9c2VsZiksZS5Qcm9taXNlPXQoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIHQoZSxuLHIpe2Z1bmN0aW9uIGkocyxhKXtpZighbltzXSl7aWYoIWVbc10pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIF9kZXJlcV8mJl9kZXJlcV87aWYoIWEmJmMpcmV0dXJuIGMocywhMCk7aWYobylyZXR1cm4gbyhzLCEwKTt2YXIgbD1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK3MrXCInXCIpO3Rocm93IGwuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixsfXZhciB1PW5bc109e2V4cG9ydHM6e319O2Vbc11bMF0uY2FsbCh1LmV4cG9ydHMsZnVuY3Rpb24odCl7cmV0dXJuIGkoZVtzXVsxXVt0XXx8dCl9LHUsdS5leHBvcnRzLHQsZSxuLHIpfXJldHVybiBuW3NdLmV4cG9ydHN9Zm9yKHZhciBvPVwiZnVuY3Rpb25cIj09dHlwZW9mIF9kZXJlcV8mJl9kZXJlcV8scz0wO3M8ci5sZW5ndGg7cysrKWkocltzXSk7cmV0dXJuIGl9KHsxOltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXQuX1NvbWVQcm9taXNlQXJyYXk7ZnVuY3Rpb24gbih0KXt2YXIgbj1uZXcgZSh0KSxyPW4ucHJvbWlzZSgpO3JldHVybiBuLnNldEhvd01hbnkoMSksbi5zZXRVbndyYXAoKSxuLmluaXQoKSxyfXQuYW55PWZ1bmN0aW9uKHQpe3JldHVybiBuKHQpfSx0LnByb3RvdHlwZS5hbnk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzKX19fSx7fV0sMjpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciByO3RyeXt0aHJvdyBuZXcgRXJyb3J9Y2F0Y2godCl7cj10fXZhciBpPXQoXCIuL3NjaGVkdWxlXCIpLG89dChcIi4vcXVldWVcIikscz10KFwiLi91dGlsXCIpO2Z1bmN0aW9uIGEoKXt0aGlzLl9jdXN0b21TY2hlZHVsZXI9ITEsdGhpcy5faXNUaWNrVXNlZD0hMSx0aGlzLl9sYXRlUXVldWU9bmV3IG8oMTYpLHRoaXMuX25vcm1hbFF1ZXVlPW5ldyBvKDE2KSx0aGlzLl9oYXZlRHJhaW5lZFF1ZXVlcz0hMSx0aGlzLl90cmFtcG9saW5lRW5hYmxlZD0hMDt2YXIgdD10aGlzO3RoaXMuZHJhaW5RdWV1ZXM9ZnVuY3Rpb24oKXt0Ll9kcmFpblF1ZXVlcygpfSx0aGlzLl9zY2hlZHVsZT1pfWZ1bmN0aW9uIGModCxlLG4pe3RoaXMuX2xhdGVRdWV1ZS5wdXNoKHQsZSxuKSx0aGlzLl9xdWV1ZVRpY2soKX1mdW5jdGlvbiBsKHQsZSxuKXt0aGlzLl9ub3JtYWxRdWV1ZS5wdXNoKHQsZSxuKSx0aGlzLl9xdWV1ZVRpY2soKX1mdW5jdGlvbiB1KHQpe3RoaXMuX25vcm1hbFF1ZXVlLl9wdXNoT25lKHQpLHRoaXMuX3F1ZXVlVGljaygpfWZ1bmN0aW9uIHAodCl7Zm9yKDt0Lmxlbmd0aCgpPjA7KWgodCl9ZnVuY3Rpb24gaCh0KXt2YXIgZT10LnNoaWZ0KCk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSllLl9zZXR0bGVQcm9taXNlcygpO2Vsc2V7dmFyIG49dC5zaGlmdCgpLHI9dC5zaGlmdCgpO2UuY2FsbChuLHIpfX1hLnByb3RvdHlwZS5zZXRTY2hlZHVsZXI9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fc2NoZWR1bGU7cmV0dXJuIHRoaXMuX3NjaGVkdWxlPXQsdGhpcy5fY3VzdG9tU2NoZWR1bGVyPSEwLGV9LGEucHJvdG90eXBlLmhhc0N1c3RvbVNjaGVkdWxlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXN0b21TY2hlZHVsZXJ9LGEucHJvdG90eXBlLmVuYWJsZVRyYW1wb2xpbmU9ZnVuY3Rpb24oKXt0aGlzLl90cmFtcG9saW5lRW5hYmxlZD0hMH0sYS5wcm90b3R5cGUuZGlzYWJsZVRyYW1wb2xpbmVJZk5lY2Vzc2FyeT1mdW5jdGlvbigpe3MuaGFzRGV2VG9vbHMmJih0aGlzLl90cmFtcG9saW5lRW5hYmxlZD0hMSl9LGEucHJvdG90eXBlLmhhdmVJdGVtc1F1ZXVlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc1RpY2tVc2VkfHx0aGlzLl9oYXZlRHJhaW5lZFF1ZXVlc30sYS5wcm90b3R5cGUuZmF0YWxFcnJvcj1mdW5jdGlvbih0LGUpe2U/KHByb2Nlc3Muc3RkZXJyLndyaXRlKFwiRmF0YWwgXCIrKHQgaW5zdGFuY2VvZiBFcnJvcj90LnN0YWNrOnQpK1wiXFxuXCIpLHByb2Nlc3MuZXhpdCgyKSk6dGhpcy50aHJvd0xhdGVyKHQpfSxhLnByb3RvdHlwZS50aHJvd0xhdGVyPWZ1bmN0aW9uKHQsZSl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgmJihlPXQsdD1mdW5jdGlvbigpe3Rocm93IGV9KSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0VGltZW91dClzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dChlKX0sMCk7ZWxzZSB0cnl7dGhpcy5fc2NoZWR1bGUoZnVuY3Rpb24oKXt0KGUpfSl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiTm8gYXN5bmMgc2NoZWR1bGVyIGF2YWlsYWJsZVxcblxcbiAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXG5cIil9fSxzLmhhc0RldlRvb2xzPyhhLnByb3RvdHlwZS5pbnZva2VMYXRlcj1mdW5jdGlvbih0LGUsbil7dGhpcy5fdHJhbXBvbGluZUVuYWJsZWQ/Yy5jYWxsKHRoaXMsdCxlLG4pOnRoaXMuX3NjaGVkdWxlKGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe3QuY2FsbChlLG4pfSwxMDApfSl9LGEucHJvdG90eXBlLmludm9rZT1mdW5jdGlvbih0LGUsbil7dGhpcy5fdHJhbXBvbGluZUVuYWJsZWQ/bC5jYWxsKHRoaXMsdCxlLG4pOnRoaXMuX3NjaGVkdWxlKGZ1bmN0aW9uKCl7dC5jYWxsKGUsbil9KX0sYS5wcm90b3R5cGUuc2V0dGxlUHJvbWlzZXM9ZnVuY3Rpb24odCl7dGhpcy5fdHJhbXBvbGluZUVuYWJsZWQ/dS5jYWxsKHRoaXMsdCk6dGhpcy5fc2NoZWR1bGUoZnVuY3Rpb24oKXt0Ll9zZXR0bGVQcm9taXNlcygpfSl9KTooYS5wcm90b3R5cGUuaW52b2tlTGF0ZXI9YyxhLnByb3RvdHlwZS5pbnZva2U9bCxhLnByb3RvdHlwZS5zZXR0bGVQcm9taXNlcz11KSxhLnByb3RvdHlwZS5fZHJhaW5RdWV1ZXM9ZnVuY3Rpb24oKXtwKHRoaXMuX25vcm1hbFF1ZXVlKSx0aGlzLl9yZXNldCgpLHRoaXMuX2hhdmVEcmFpbmVkUXVldWVzPSEwLHAodGhpcy5fbGF0ZVF1ZXVlKX0sYS5wcm90b3R5cGUuX3F1ZXVlVGljaz1mdW5jdGlvbigpe3RoaXMuX2lzVGlja1VzZWR8fCh0aGlzLl9pc1RpY2tVc2VkPSEwLHRoaXMuX3NjaGVkdWxlKHRoaXMuZHJhaW5RdWV1ZXMpKX0sYS5wcm90b3R5cGUuX3Jlc2V0PWZ1bmN0aW9uKCl7dGhpcy5faXNUaWNrVXNlZD0hMX0sZS5leHBvcnRzPWEsZS5leHBvcnRzLmZpcnN0TGluZUVycm9yPXJ9LHtcIi4vcXVldWVcIjoyNixcIi4vc2NoZWR1bGVcIjoyOSxcIi4vdXRpbFwiOjM2fV0sMzpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixyKXt2YXIgaT0hMSxvPWZ1bmN0aW9uKHQsZSl7dGhpcy5fcmVqZWN0KGUpfSxzPWZ1bmN0aW9uKHQsZSl7ZS5wcm9taXNlUmVqZWN0aW9uUXVldWVkPSEwLGUuYmluZGluZ1Byb21pc2UuX3RoZW4obyxvLG51bGwsdGhpcyx0KX0sYT1mdW5jdGlvbih0LGUpezA9PSg1MDM5NzE4NCZ0aGlzLl9iaXRGaWVsZCkmJnRoaXMuX3Jlc29sdmVDYWxsYmFjayhlLnRhcmdldCl9LGM9ZnVuY3Rpb24odCxlKXtlLnByb21pc2VSZWplY3Rpb25RdWV1ZWR8fHRoaXMuX3JlamVjdCh0KX07dC5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihvKXtpfHwoaT0hMCx0LnByb3RvdHlwZS5fcHJvcGFnYXRlRnJvbT1yLnByb3BhZ2F0ZUZyb21GdW5jdGlvbigpLHQucHJvdG90eXBlLl9ib3VuZFZhbHVlPXIuYm91bmRWYWx1ZUZ1bmN0aW9uKCkpO3ZhciBsPW4obyksdT1uZXcgdChlKTt1Ll9wcm9wYWdhdGVGcm9tKHRoaXMsMSk7dmFyIHA9dGhpcy5fdGFyZ2V0KCk7aWYodS5fc2V0Qm91bmRUbyhsKSxsIGluc3RhbmNlb2YgdCl7dmFyIGg9e3Byb21pc2VSZWplY3Rpb25RdWV1ZWQ6ITEscHJvbWlzZTp1LHRhcmdldDpwLGJpbmRpbmdQcm9taXNlOmx9O3AuX3RoZW4oZSxzLHZvaWQgMCx1LGgpLGwuX3RoZW4oYSxjLHZvaWQgMCx1LGgpLHUuX3NldE9uQ2FuY2VsKGwpfWVsc2UgdS5fcmVzb2x2ZUNhbGxiYWNrKHApO3JldHVybiB1fSx0LnByb3RvdHlwZS5fc2V0Qm91bmRUbz1mdW5jdGlvbih0KXt2b2lkIDAhPT10Pyh0aGlzLl9iaXRGaWVsZD0yMDk3MTUyfHRoaXMuX2JpdEZpZWxkLHRoaXMuX2JvdW5kVG89dCk6dGhpcy5fYml0RmllbGQ9LTIwOTcxNTMmdGhpcy5fYml0RmllbGR9LHQucHJvdG90eXBlLl9pc0JvdW5kPWZ1bmN0aW9uKCl7cmV0dXJuIDIwOTcxNTI9PSgyMDk3MTUyJnRoaXMuX2JpdEZpZWxkKX0sdC5iaW5kPWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQucmVzb2x2ZShuKS5iaW5kKGUpfX19LHt9XSw0OltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJihyPVByb21pc2UpO3ZhciBpPXQoXCIuL3Byb21pc2VcIikoKTtpLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXt0cnl7UHJvbWlzZT09PWkmJihQcm9taXNlPXIpfWNhdGNoKHQpe31yZXR1cm4gaX0sZS5leHBvcnRzPWl9LHtcIi4vcHJvbWlzZVwiOjIyfV0sNTpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciByPU9iamVjdC5jcmVhdGU7aWYocil7dmFyIGk9cihudWxsKSxvPXIobnVsbCk7aVtcIiBzaXplXCJdPW9bXCIgc2l6ZVwiXT0wfWUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgbj10KFwiLi91dGlsXCIpLHI9bi5jYW5FdmFsdWF0ZTtmdW5jdGlvbiBpKHQpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBpO2lmKG51bGwhPXQmJihpPXRbcl0pLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpe3ZhciBvPVwiT2JqZWN0IFwiK24uY2xhc3NTdHJpbmcodCkrXCIgaGFzIG5vIG1ldGhvZCAnXCIrbi50b1N0cmluZyhyKStcIidcIjt0aHJvdyBuZXcgZS5UeXBlRXJyb3Iobyl9cmV0dXJuIGl9KHQsdGhpcy5wb3AoKSkuYXBwbHkodCx0aGlzKX1mdW5jdGlvbiBvKHQpe3JldHVybiB0W3RoaXNdfWZ1bmN0aW9uIHModCl7dmFyIGU9K3RoaXM7cmV0dXJuIGU8MCYmKGU9TWF0aC5tYXgoMCxlK3QubGVuZ3RoKSksdFtlXX1uLmlzSWRlbnRpZmllcixlLnByb3RvdHlwZS5jYWxsPWZ1bmN0aW9uKHQpe3ZhciBlPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBlLnB1c2godCksdGhpcy5fdGhlbihpLHZvaWQgMCx2b2lkIDAsZSx2b2lkIDApfSxlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7dmFyIGU7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpZT1zO2Vsc2UgaWYocil7dmFyIG49KHZvaWQgMCkodCk7ZT1udWxsIT09bj9uOm99ZWxzZSBlPW87cmV0dXJuIHRoaXMuX3RoZW4oZSx2b2lkIDAsdm9pZCAwLHQsdm9pZCAwKX19fSx7XCIuL3V0aWxcIjozNn1dLDY6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSl7dmFyIG89dChcIi4vdXRpbFwiKSxzPW8udHJ5Q2F0Y2gsYT1vLmVycm9yT2JqLGM9ZS5fYXN5bmM7ZS5wcm90b3R5cGUuYnJlYWs9ZS5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKCl7aWYoIWkuY2FuY2VsbGF0aW9uKCkpcmV0dXJuIHRoaXMuX3dhcm4oXCJjYW5jZWxsYXRpb24gaXMgZGlzYWJsZWRcIik7Zm9yKHZhciB0PXRoaXMsZT10O3QuX2lzQ2FuY2VsbGFibGUoKTspe2lmKCF0Ll9jYW5jZWxCeShlKSl7ZS5faXNGb2xsb3dpbmcoKT9lLl9mb2xsb3dlZSgpLmNhbmNlbCgpOmUuX2NhbmNlbEJyYW5jaGVkKCk7YnJlYWt9dmFyIG49dC5fY2FuY2VsbGF0aW9uUGFyZW50O2lmKG51bGw9PW58fCFuLl9pc0NhbmNlbGxhYmxlKCkpe3QuX2lzRm9sbG93aW5nKCk/dC5fZm9sbG93ZWUoKS5jYW5jZWwoKTp0Ll9jYW5jZWxCcmFuY2hlZCgpO2JyZWFrfXQuX2lzRm9sbG93aW5nKCkmJnQuX2ZvbGxvd2VlKCkuY2FuY2VsKCksdC5fc2V0V2lsbEJlQ2FuY2VsbGVkKCksZT10LHQ9bn19LGUucHJvdG90eXBlLl9icmFuY2hIYXNDYW5jZWxsZWQ9ZnVuY3Rpb24oKXt0aGlzLl9icmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsLS19LGUucHJvdG90eXBlLl9lbm91Z2hCcmFuY2hlc0hhdmVDYW5jZWxsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fYnJhbmNoZXNSZW1haW5pbmdUb0NhbmNlbHx8dGhpcy5fYnJhbmNoZXNSZW1haW5pbmdUb0NhbmNlbDw9MH0sZS5wcm90b3R5cGUuX2NhbmNlbEJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0PT09dGhpcz8odGhpcy5fYnJhbmNoZXNSZW1haW5pbmdUb0NhbmNlbD0wLHRoaXMuX2ludm9rZU9uQ2FuY2VsKCksITApOih0aGlzLl9icmFuY2hIYXNDYW5jZWxsZWQoKSwhIXRoaXMuX2Vub3VnaEJyYW5jaGVzSGF2ZUNhbmNlbGxlZCgpJiYodGhpcy5faW52b2tlT25DYW5jZWwoKSwhMCkpfSxlLnByb3RvdHlwZS5fY2FuY2VsQnJhbmNoZWQ9ZnVuY3Rpb24oKXt0aGlzLl9lbm91Z2hCcmFuY2hlc0hhdmVDYW5jZWxsZWQoKSYmdGhpcy5fY2FuY2VsKCl9LGUucHJvdG90eXBlLl9jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLl9pc0NhbmNlbGxhYmxlKCkmJih0aGlzLl9zZXRDYW5jZWxsZWQoKSxjLmludm9rZSh0aGlzLl9jYW5jZWxQcm9taXNlcyx0aGlzLHZvaWQgMCkpfSxlLnByb3RvdHlwZS5fY2FuY2VsUHJvbWlzZXM9ZnVuY3Rpb24oKXt0aGlzLl9sZW5ndGgoKT4wJiZ0aGlzLl9zZXR0bGVQcm9taXNlcygpfSxlLnByb3RvdHlwZS5fdW5zZXRPbkNhbmNlbD1mdW5jdGlvbigpe3RoaXMuX29uQ2FuY2VsRmllbGQ9dm9pZCAwfSxlLnByb3RvdHlwZS5faXNDYW5jZWxsYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzUGVuZGluZygpJiYhdGhpcy5faXNDYW5jZWxsZWQoKX0sZS5wcm90b3R5cGUuaXNDYW5jZWxsYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzUGVuZGluZygpJiYhdGhpcy5pc0NhbmNlbGxlZCgpfSxlLnByb3RvdHlwZS5fZG9JbnZva2VPbkNhbmNlbD1mdW5jdGlvbih0LGUpe2lmKG8uaXNBcnJheSh0KSlmb3IodmFyIG49MDtuPHQubGVuZ3RoOysrbil0aGlzLl9kb0ludm9rZU9uQ2FuY2VsKHRbbl0sZSk7ZWxzZSBpZih2b2lkIDAhPT10KWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpe2lmKCFlKXt2YXIgcj1zKHQpLmNhbGwodGhpcy5fYm91bmRWYWx1ZSgpKTtyPT09YSYmKHRoaXMuX2F0dGFjaEV4dHJhVHJhY2Uoci5lKSxjLnRocm93TGF0ZXIoci5lKSl9fWVsc2UgdC5fcmVzdWx0Q2FuY2VsbGVkKHRoaXMpfSxlLnByb3RvdHlwZS5faW52b2tlT25DYW5jZWw9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9vbkNhbmNlbCgpO3RoaXMuX3Vuc2V0T25DYW5jZWwoKSxjLmludm9rZSh0aGlzLl9kb0ludm9rZU9uQ2FuY2VsLHRoaXMsdCl9LGUucHJvdG90eXBlLl9pbnZva2VJbnRlcm5hbE9uQ2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5faXNDYW5jZWxsYWJsZSgpJiYodGhpcy5fZG9JbnZva2VPbkNhbmNlbCh0aGlzLl9vbkNhbmNlbCgpLCEwKSx0aGlzLl91bnNldE9uQ2FuY2VsKCkpfSxlLnByb3RvdHlwZS5fcmVzdWx0Q2FuY2VsbGVkPWZ1bmN0aW9uKCl7dGhpcy5jYW5jZWwoKX19fSx7XCIuL3V0aWxcIjozNn1dLDc6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIG49dChcIi4vdXRpbFwiKSxyPXQoXCIuL2VzNVwiKS5rZXlzLGk9bi50cnlDYXRjaCxvPW4uZXJyb3JPYmo7cmV0dXJuIGZ1bmN0aW9uKHQscyxhKXtyZXR1cm4gZnVuY3Rpb24oYyl7dmFyIGw9YS5fYm91bmRWYWx1ZSgpO3Q6Zm9yKHZhciB1PTA7dTx0Lmxlbmd0aDsrK3Upe3ZhciBwPXRbdV07aWYocD09PUVycm9yfHxudWxsIT1wJiZwLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yKXtpZihjIGluc3RhbmNlb2YgcClyZXR1cm4gaShzKS5jYWxsKGwsYyl9ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBwKXt2YXIgaD1pKHApLmNhbGwobCxjKTtpZihoPT09bylyZXR1cm4gaDtpZihoKXJldHVybiBpKHMpLmNhbGwobCxjKX1lbHNlIGlmKG4uaXNPYmplY3QoYykpe2Zvcih2YXIgZj1yKHApLF89MDtfPGYubGVuZ3RoOysrXyl7dmFyIGQ9ZltfXTtpZihwW2RdIT1jW2RdKWNvbnRpbnVlIHR9cmV0dXJuIGkocykuY2FsbChsLGMpfX1yZXR1cm4gZX19fX0se1wiLi9lczVcIjoxMyxcIi4vdXRpbFwiOjM2fV0sODpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT0hMSxuPVtdO2Z1bmN0aW9uIHIoKXt0aGlzLl90cmFjZT1uZXcgci5DYXB0dXJlZFRyYWNlKGkoKSl9ZnVuY3Rpb24gaSgpe3ZhciB0PW4ubGVuZ3RoLTE7aWYodD49MClyZXR1cm4gblt0XX1yZXR1cm4gdC5wcm90b3R5cGUuX3Byb21pc2VDcmVhdGVkPWZ1bmN0aW9uKCl7fSx0LnByb3RvdHlwZS5fcHVzaENvbnRleHQ9ZnVuY3Rpb24oKXt9LHQucHJvdG90eXBlLl9wb3BDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LHQuX3BlZWtDb250ZXh0PXQucHJvdG90eXBlLl9wZWVrQ29udGV4dD1mdW5jdGlvbigpe30sci5wcm90b3R5cGUuX3B1c2hDb250ZXh0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fdHJhY2UmJih0aGlzLl90cmFjZS5fcHJvbWlzZUNyZWF0ZWQ9bnVsbCxuLnB1c2godGhpcy5fdHJhY2UpKX0sci5wcm90b3R5cGUuX3BvcENvbnRleHQ9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT10aGlzLl90cmFjZSl7dmFyIHQ9bi5wb3AoKSxlPXQuX3Byb21pc2VDcmVhdGVkO3JldHVybiB0Ll9wcm9taXNlQ3JlYXRlZD1udWxsLGV9cmV0dXJuIG51bGx9LHIuQ2FwdHVyZWRUcmFjZT1udWxsLHIuY3JlYXRlPWZ1bmN0aW9uKCl7aWYoZSlyZXR1cm4gbmV3IHJ9LHIuZGVhY3RpdmF0ZUxvbmdTdGFja1RyYWNlcz1mdW5jdGlvbigpe30sci5hY3RpdmF0ZUxvbmdTdGFja1RyYWNlcz1mdW5jdGlvbigpe3ZhciBuPXQucHJvdG90eXBlLl9wdXNoQ29udGV4dCxvPXQucHJvdG90eXBlLl9wb3BDb250ZXh0LHM9dC5fcGVla0NvbnRleHQsYT10LnByb3RvdHlwZS5fcGVla0NvbnRleHQsYz10LnByb3RvdHlwZS5fcHJvbWlzZUNyZWF0ZWQ7ci5kZWFjdGl2YXRlTG9uZ1N0YWNrVHJhY2VzPWZ1bmN0aW9uKCl7dC5wcm90b3R5cGUuX3B1c2hDb250ZXh0PW4sdC5wcm90b3R5cGUuX3BvcENvbnRleHQ9byx0Ll9wZWVrQ29udGV4dD1zLHQucHJvdG90eXBlLl9wZWVrQ29udGV4dD1hLHQucHJvdG90eXBlLl9wcm9taXNlQ3JlYXRlZD1jLGU9ITF9LGU9ITAsdC5wcm90b3R5cGUuX3B1c2hDb250ZXh0PXIucHJvdG90eXBlLl9wdXNoQ29udGV4dCx0LnByb3RvdHlwZS5fcG9wQ29udGV4dD1yLnByb3RvdHlwZS5fcG9wQ29udGV4dCx0Ll9wZWVrQ29udGV4dD10LnByb3RvdHlwZS5fcGVla0NvbnRleHQ9aSx0LnByb3RvdHlwZS5fcHJvbWlzZUNyZWF0ZWQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9wZWVrQ29udGV4dCgpO3QmJm51bGw9PXQuX3Byb21pc2VDcmVhdGVkJiYodC5fcHJvbWlzZUNyZWF0ZWQ9dGhpcyl9fSxyfX0se31dLDk6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuKXt2YXIgcixpLG8scz1lLl9nZXREb21haW4sYT1lLl9hc3luYyxjPXQoXCIuL2Vycm9yc1wiKS5XYXJuaW5nLGw9dChcIi4vdXRpbFwiKSx1PXQoXCIuL2VzNVwiKSxwPWwuY2FuQXR0YWNoVHJhY2UsaD0vW1xcXFxcXC9dYmx1ZWJpcmRbXFxcXFxcL11qc1tcXFxcXFwvXShyZWxlYXNlfGRlYnVnfGluc3RydW1lbnRlZCkvLGY9L1xcKCg/OnRpbWVyc1xcLmpzKTpcXGQrOlxcZCtcXCkvLF89L1tcXC88XFwoXSguKz8pOihcXGQrKTooXFxkKylcXCk/XFxzKiQvLGQ9bnVsbCx2PW51bGwseT0hMSxtPSEoMD09bC5lbnYoXCJCTFVFQklSRF9ERUJVR1wiKSksZz0hKDA9PWwuZW52KFwiQkxVRUJJUkRfV0FSTklOR1NcIil8fCFtJiYhbC5lbnYoXCJCTFVFQklSRF9XQVJOSU5HU1wiKSksYj0hKDA9PWwuZW52KFwiQkxVRUJJUkRfTE9OR19TVEFDS19UUkFDRVNcIil8fCFtJiYhbC5lbnYoXCJCTFVFQklSRF9MT05HX1NUQUNLX1RSQUNFU1wiKSksdz0wIT1sLmVudihcIkJMVUVCSVJEX1dfRk9SR09UVEVOX1JFVFVSTlwiKSYmKGd8fCEhbC5lbnYoXCJCTFVFQklSRF9XX0ZPUkdPVFRFTl9SRVRVUk5cIikpO2UucHJvdG90eXBlLnN1cHByZXNzVW5oYW5kbGVkUmVqZWN0aW9ucz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3RhcmdldCgpO3QuX2JpdEZpZWxkPS0xMDQ4NTc3JnQuX2JpdEZpZWxkfDUyNDI4OH0sZS5wcm90b3R5cGUuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZD1mdW5jdGlvbigpe2lmKDA9PSg1MjQyODgmdGhpcy5fYml0RmllbGQpKXt0aGlzLl9zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpO3ZhciB0PXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe3QuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbigpfSwxKX19LGUucHJvdG90eXBlLl9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb25Jc0hhbmRsZWQ9ZnVuY3Rpb24oKXskKFwicmVqZWN0aW9uSGFuZGxlZFwiLHIsdm9pZCAwLHRoaXMpfSxlLnByb3RvdHlwZS5fc2V0UmV0dXJuZWROb25VbmRlZmluZWQ9ZnVuY3Rpb24oKXt0aGlzLl9iaXRGaWVsZD0yNjg0MzU0NTZ8dGhpcy5fYml0RmllbGR9LGUucHJvdG90eXBlLl9yZXR1cm5lZE5vblVuZGVmaW5lZD1mdW5jdGlvbigpe3JldHVybiAwIT0oMjY4NDM1NDU2JnRoaXMuX2JpdEZpZWxkKX0sZS5wcm90b3R5cGUuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbj1mdW5jdGlvbigpe2lmKHRoaXMuX2lzUmVqZWN0aW9uVW5oYW5kbGVkKCkpe3ZhciB0PXRoaXMuX3NldHRsZWRWYWx1ZSgpO3RoaXMuX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKSwkKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsaSx0LHRoaXMpfX0sZS5wcm90b3R5cGUuX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQ9ZnVuY3Rpb24oKXt0aGlzLl9iaXRGaWVsZD0yNjIxNDR8dGhpcy5fYml0RmllbGR9LGUucHJvdG90eXBlLl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQ9ZnVuY3Rpb24oKXt0aGlzLl9iaXRGaWVsZD0tMjYyMTQ1JnRoaXMuX2JpdEZpZWxkfSxlLnByb3RvdHlwZS5faXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZD1mdW5jdGlvbigpe3JldHVybigyNjIxNDQmdGhpcy5fYml0RmllbGQpPjB9LGUucHJvdG90eXBlLl9zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZD1mdW5jdGlvbigpe3RoaXMuX2JpdEZpZWxkPTEwNDg1NzZ8dGhpcy5fYml0RmllbGR9LGUucHJvdG90eXBlLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkPWZ1bmN0aW9uKCl7dGhpcy5fYml0RmllbGQ9LTEwNDg1NzcmdGhpcy5fYml0RmllbGQsdGhpcy5faXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZCgpJiYodGhpcy5fdW5zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkKCksdGhpcy5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uSXNIYW5kbGVkKCkpfSxlLnByb3RvdHlwZS5faXNSZWplY3Rpb25VbmhhbmRsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4oMTA0ODU3NiZ0aGlzLl9iaXRGaWVsZCk+MH0sZS5wcm90b3R5cGUuX3dhcm49ZnVuY3Rpb24odCxlLG4pe3JldHVybiBVKHQsZSxufHx0aGlzKX0sZS5vblBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPXMoKTtpPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/bnVsbD09PWU/dDpsLmRvbWFpbkJpbmQoZSx0KTp2b2lkIDB9LGUub25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkPWZ1bmN0aW9uKHQpe3ZhciBlPXMoKTtyPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/bnVsbD09PWU/dDpsLmRvbWFpbkJpbmQoZSx0KTp2b2lkIDB9O3ZhciBDPWZ1bmN0aW9uKCl7fTtlLmxvbmdTdGFja1RyYWNlcz1mdW5jdGlvbigpe2lmKGEuaGF2ZUl0ZW1zUXVldWVkKCkmJiFZLmxvbmdTdGFja1RyYWNlcyl0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZW5hYmxlIGxvbmcgc3RhY2sgdHJhY2VzIGFmdGVyIHByb21pc2VzIGhhdmUgYmVlbiBjcmVhdGVkXFxuXFxuICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcblwiKTtpZighWS5sb25nU3RhY2tUcmFjZXMmJnooKSl7dmFyIHQ9ZS5wcm90b3R5cGUuX2NhcHR1cmVTdGFja1RyYWNlLHI9ZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2UsaT1lLnByb3RvdHlwZS5fZGVyZWZlcmVuY2VUcmFjZTtZLmxvbmdTdGFja1RyYWNlcz0hMCxDPWZ1bmN0aW9uKCl7aWYoYS5oYXZlSXRlbXNRdWV1ZWQoKSYmIVkubG9uZ1N0YWNrVHJhY2VzKXRocm93IG5ldyBFcnJvcihcImNhbm5vdCBlbmFibGUgbG9uZyBzdGFjayB0cmFjZXMgYWZ0ZXIgcHJvbWlzZXMgaGF2ZSBiZWVuIGNyZWF0ZWRcXG5cXG4gICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFxuXCIpO2UucHJvdG90eXBlLl9jYXB0dXJlU3RhY2tUcmFjZT10LGUucHJvdG90eXBlLl9hdHRhY2hFeHRyYVRyYWNlPXIsZS5wcm90b3R5cGUuX2RlcmVmZXJlbmNlVHJhY2U9aSxuLmRlYWN0aXZhdGVMb25nU3RhY2tUcmFjZXMoKSxhLmVuYWJsZVRyYW1wb2xpbmUoKSxZLmxvbmdTdGFja1RyYWNlcz0hMX0sZS5wcm90b3R5cGUuX2NhcHR1cmVTdGFja1RyYWNlPUwsZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2U9SCxlLnByb3RvdHlwZS5fZGVyZWZlcmVuY2VUcmFjZT1OLG4uYWN0aXZhdGVMb25nU3RhY2tUcmFjZXMoKSxhLmRpc2FibGVUcmFtcG9saW5lSWZOZWNlc3NhcnkoKX19LGUuaGFzTG9uZ1N0YWNrVHJhY2VzPWZ1bmN0aW9uKCl7cmV0dXJuIFkubG9uZ1N0YWNrVHJhY2VzJiZ6KCl9O3ZhciBqPWZ1bmN0aW9uKCl7dHJ5e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIEN1c3RvbUV2ZW50KXt2YXIgdD1uZXcgQ3VzdG9tRXZlbnQoXCJDdXN0b21FdmVudFwiKTtyZXR1cm4gbC5nbG9iYWwuZGlzcGF0Y2hFdmVudCh0KSxmdW5jdGlvbih0LGUpe3ZhciBuPXtkZXRhaWw6ZSxjYW5jZWxhYmxlOiEwfTt1LmRlZmluZVByb3BlcnR5KG4sXCJwcm9taXNlXCIse3ZhbHVlOmUucHJvbWlzZX0pLHUuZGVmaW5lUHJvcGVydHkobixcInJlYXNvblwiLHt2YWx1ZTplLnJlYXNvbn0pO3ZhciByPW5ldyBDdXN0b21FdmVudCh0LnRvTG93ZXJDYXNlKCksbik7cmV0dXJuIWwuZ2xvYmFsLmRpc3BhdGNoRXZlbnQocil9fXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIEV2ZW50Pyh0PW5ldyBFdmVudChcIkN1c3RvbUV2ZW50XCIpLGwuZ2xvYmFsLmRpc3BhdGNoRXZlbnQodCksZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgRXZlbnQodC50b0xvd2VyQ2FzZSgpLHtjYW5jZWxhYmxlOiEwfSk7cmV0dXJuIG4uZGV0YWlsPWUsdS5kZWZpbmVQcm9wZXJ0eShuLFwicHJvbWlzZVwiLHt2YWx1ZTplLnByb21pc2V9KSx1LmRlZmluZVByb3BlcnR5KG4sXCJyZWFzb25cIix7dmFsdWU6ZS5yZWFzb259KSwhbC5nbG9iYWwuZGlzcGF0Y2hFdmVudChuKX0pOigodD1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpKS5pbml0Q3VzdG9tRXZlbnQoXCJ0ZXN0aW5ndGhlZXZlbnRcIiwhMSwhMCx7fSksbC5nbG9iYWwuZGlzcGF0Y2hFdmVudCh0KSxmdW5jdGlvbih0LGUpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7cmV0dXJuIG4uaW5pdEN1c3RvbUV2ZW50KHQudG9Mb3dlckNhc2UoKSwhMSwhMCxlKSwhbC5nbG9iYWwuZGlzcGF0Y2hFdmVudChuKX0pfWNhdGNoKHQpe31yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4hMX19KCksRT1sLmlzTm9kZT9mdW5jdGlvbigpe3JldHVybiBwcm9jZXNzLmVtaXQuYXBwbHkocHJvY2Vzcyxhcmd1bWVudHMpfTpsLmdsb2JhbD9mdW5jdGlvbih0KXt2YXIgZT1cIm9uXCIrdC50b0xvd2VyQ2FzZSgpLG49bC5nbG9iYWxbZV07cmV0dXJuISFuJiYobi5hcHBseShsLmdsb2JhbCxbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSksITApfTpmdW5jdGlvbigpe3JldHVybiExfTtmdW5jdGlvbiBrKHQsZSl7cmV0dXJue3Byb21pc2U6ZX19dmFyIEY9e3Byb21pc2VDcmVhdGVkOmsscHJvbWlzZUZ1bGZpbGxlZDprLHByb21pc2VSZWplY3RlZDprLHByb21pc2VSZXNvbHZlZDprLHByb21pc2VDYW5jZWxsZWQ6ayxwcm9taXNlQ2hhaW5lZDpmdW5jdGlvbih0LGUsbil7cmV0dXJue3Byb21pc2U6ZSxjaGlsZDpufX0sd2FybmluZzpmdW5jdGlvbih0LGUpe3JldHVybnt3YXJuaW5nOmV9fSx1bmhhbmRsZWRSZWplY3Rpb246ZnVuY3Rpb24odCxlLG4pe3JldHVybntyZWFzb246ZSxwcm9taXNlOm59fSxyZWplY3Rpb25IYW5kbGVkOmt9LFQ9ZnVuY3Rpb24odCl7dmFyIGU9ITE7dHJ5e2U9RS5hcHBseShudWxsLGFyZ3VtZW50cyl9Y2F0Y2godCl7YS50aHJvd0xhdGVyKHQpLGU9ITB9dmFyIG49ITE7dHJ5e249aih0LEZbdF0uYXBwbHkobnVsbCxhcmd1bWVudHMpKX1jYXRjaCh0KXthLnRocm93TGF0ZXIodCksbj0hMH1yZXR1cm4gbnx8ZX07ZnVuY3Rpb24geCgpe3JldHVybiExfWZ1bmN0aW9uIFAodCxlLG4pe3ZhciByPXRoaXM7dHJ5e3QoZSxuLGZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm9uQ2FuY2VsIG11c3QgYmUgYSBmdW5jdGlvbiwgZ290OiBcIitsLnRvU3RyaW5nKHQpKTtyLl9hdHRhY2hDYW5jZWxsYXRpb25DYWxsYmFjayh0KX0pfWNhdGNoKHQpe3JldHVybiB0fX1mdW5jdGlvbiBTKHQpe2lmKCF0aGlzLl9pc0NhbmNlbGxhYmxlKCkpcmV0dXJuIHRoaXM7dmFyIGU9dGhpcy5fb25DYW5jZWwoKTt2b2lkIDAhPT1lP2wuaXNBcnJheShlKT9lLnB1c2godCk6dGhpcy5fc2V0T25DYW5jZWwoW2UsdF0pOnRoaXMuX3NldE9uQ2FuY2VsKHQpfWZ1bmN0aW9uIFIoKXtyZXR1cm4gdGhpcy5fb25DYW5jZWxGaWVsZH1mdW5jdGlvbiBPKHQpe3RoaXMuX29uQ2FuY2VsRmllbGQ9dH1mdW5jdGlvbiBBKCl7dGhpcy5fY2FuY2VsbGF0aW9uUGFyZW50PXZvaWQgMCx0aGlzLl9vbkNhbmNlbEZpZWxkPXZvaWQgMH1mdW5jdGlvbiBEKHQsZSl7aWYoMCE9KDEmZSkpe3RoaXMuX2NhbmNlbGxhdGlvblBhcmVudD10O3ZhciBuPXQuX2JyYW5jaGVzUmVtYWluaW5nVG9DYW5jZWw7dm9pZCAwPT09biYmKG49MCksdC5fYnJhbmNoZXNSZW1haW5pbmdUb0NhbmNlbD1uKzF9MCE9KDImZSkmJnQuX2lzQm91bmQoKSYmdGhpcy5fc2V0Qm91bmRUbyh0Ll9ib3VuZFRvKX1lLmNvbmZpZz1mdW5jdGlvbih0KXtpZihcImxvbmdTdGFja1RyYWNlc1wiaW4odD1PYmplY3QodCkpJiYodC5sb25nU3RhY2tUcmFjZXM/ZS5sb25nU3RhY2tUcmFjZXMoKTohdC5sb25nU3RhY2tUcmFjZXMmJmUuaGFzTG9uZ1N0YWNrVHJhY2VzKCkmJkMoKSksXCJ3YXJuaW5nc1wiaW4gdCl7dmFyIG49dC53YXJuaW5ncztZLndhcm5pbmdzPSEhbix3PVkud2FybmluZ3MsbC5pc09iamVjdChuKSYmXCJ3Rm9yZ290dGVuUmV0dXJuXCJpbiBuJiYodz0hIW4ud0ZvcmdvdHRlblJldHVybil9aWYoXCJjYW5jZWxsYXRpb25cImluIHQmJnQuY2FuY2VsbGF0aW9uJiYhWS5jYW5jZWxsYXRpb24pe2lmKGEuaGF2ZUl0ZW1zUXVldWVkKCkpdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGVuYWJsZSBjYW5jZWxsYXRpb24gYWZ0ZXIgcHJvbWlzZXMgYXJlIGluIHVzZVwiKTtlLnByb3RvdHlwZS5fY2xlYXJDYW5jZWxsYXRpb25EYXRhPUEsZS5wcm90b3R5cGUuX3Byb3BhZ2F0ZUZyb209RCxlLnByb3RvdHlwZS5fb25DYW5jZWw9UixlLnByb3RvdHlwZS5fc2V0T25DYW5jZWw9TyxlLnByb3RvdHlwZS5fYXR0YWNoQ2FuY2VsbGF0aW9uQ2FsbGJhY2s9UyxlLnByb3RvdHlwZS5fZXhlY3V0ZT1QLFY9RCxZLmNhbmNlbGxhdGlvbj0hMH1yZXR1cm5cIm1vbml0b3JpbmdcImluIHQmJih0Lm1vbml0b3JpbmcmJiFZLm1vbml0b3Jpbmc/KFkubW9uaXRvcmluZz0hMCxlLnByb3RvdHlwZS5fZmlyZUV2ZW50PVQpOiF0Lm1vbml0b3JpbmcmJlkubW9uaXRvcmluZyYmKFkubW9uaXRvcmluZz0hMSxlLnByb3RvdHlwZS5fZmlyZUV2ZW50PXgpKSxlfSxlLnByb3RvdHlwZS5fZmlyZUV2ZW50PXgsZS5wcm90b3R5cGUuX2V4ZWN1dGU9ZnVuY3Rpb24odCxlLG4pe3RyeXt0KGUsbil9Y2F0Y2godCl7cmV0dXJuIHR9fSxlLnByb3RvdHlwZS5fb25DYW5jZWw9ZnVuY3Rpb24oKXt9LGUucHJvdG90eXBlLl9zZXRPbkNhbmNlbD1mdW5jdGlvbih0KXt9LGUucHJvdG90eXBlLl9hdHRhY2hDYW5jZWxsYXRpb25DYWxsYmFjaz1mdW5jdGlvbih0KXt9LGUucHJvdG90eXBlLl9jYXB0dXJlU3RhY2tUcmFjZT1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2U9ZnVuY3Rpb24oKXt9LGUucHJvdG90eXBlLl9kZXJlZmVyZW5jZVRyYWNlPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5fY2xlYXJDYW5jZWxsYXRpb25EYXRhPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5fcHJvcGFnYXRlRnJvbT1mdW5jdGlvbih0LGUpe307dmFyIFY9ZnVuY3Rpb24odCxlKXswIT0oMiZlKSYmdC5faXNCb3VuZCgpJiZ0aGlzLl9zZXRCb3VuZFRvKHQuX2JvdW5kVG8pfTtmdW5jdGlvbiBJKCl7dmFyIHQ9dGhpcy5fYm91bmRUbztyZXR1cm4gdm9pZCAwIT09dCYmdCBpbnN0YW5jZW9mIGU/dC5pc0Z1bGZpbGxlZCgpP3QudmFsdWUoKTp2b2lkIDA6dH1mdW5jdGlvbiBMKCl7dGhpcy5fdHJhY2U9bmV3IEsodGhpcy5fcGVla0NvbnRleHQoKSl9ZnVuY3Rpb24gSCh0LGUpe2lmKHAodCkpe3ZhciBuPXRoaXMuX3RyYWNlO2lmKHZvaWQgMCE9PW4mJmUmJihuPW4uX3BhcmVudCksdm9pZCAwIT09biluLmF0dGFjaEV4dHJhVHJhY2UodCk7ZWxzZSBpZighdC5fX3N0YWNrQ2xlYW5lZF9fKXt2YXIgcj1NKHQpO2wubm90RW51bWVyYWJsZVByb3AodCxcInN0YWNrXCIsci5tZXNzYWdlK1wiXFxuXCIrci5zdGFjay5qb2luKFwiXFxuXCIpKSxsLm5vdEVudW1lcmFibGVQcm9wKHQsXCJfX3N0YWNrQ2xlYW5lZF9fXCIsITApfX19ZnVuY3Rpb24gTigpe3RoaXMuX3RyYWNlPXZvaWQgMH1mdW5jdGlvbiBVKHQsbixyKXtpZihZLndhcm5pbmdzKXt2YXIgaSxvPW5ldyBjKHQpO2lmKG4pci5fYXR0YWNoRXh0cmFUcmFjZShvKTtlbHNlIGlmKFkubG9uZ1N0YWNrVHJhY2VzJiYoaT1lLl9wZWVrQ29udGV4dCgpKSlpLmF0dGFjaEV4dHJhVHJhY2Uobyk7ZWxzZXt2YXIgcz1NKG8pO28uc3RhY2s9cy5tZXNzYWdlK1wiXFxuXCIrcy5zdGFjay5qb2luKFwiXFxuXCIpfVQoXCJ3YXJuaW5nXCIsbyl8fHEobyxcIlwiLCEwKX19ZnVuY3Rpb24gQih0KXtmb3IodmFyIGU9W10sbj0wO248dC5sZW5ndGg7KytuKXt2YXIgcj10W25dLGk9XCIgICAgKE5vIHN0YWNrIHRyYWNlKVwiPT09cnx8ZC50ZXN0KHIpLG89aSYmRyhyKTtpJiYhbyYmKHkmJlwiIFwiIT09ci5jaGFyQXQoMCkmJihyPVwiICAgIFwiK3IpLGUucHVzaChyKSl9cmV0dXJuIGV9ZnVuY3Rpb24gTSh0KXt2YXIgZT10LnN0YWNrLG49dC50b1N0cmluZygpO3JldHVybiBlPVwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLmxlbmd0aD4wP2Z1bmN0aW9uKHQpe2Zvcih2YXIgZT10LnN0YWNrLnJlcGxhY2UoL1xccyskL2csXCJcIikuc3BsaXQoXCJcXG5cIiksbj0wO248ZS5sZW5ndGg7KytuKXt2YXIgcj1lW25dO2lmKFwiICAgIChObyBzdGFjayB0cmFjZSlcIj09PXJ8fGQudGVzdChyKSlicmVha31yZXR1cm4gbj4wJiZcIlN5bnRheEVycm9yXCIhPXQubmFtZSYmKGU9ZS5zbGljZShuKSksZX0odCk6W1wiICAgIChObyBzdGFjayB0cmFjZSlcIl0se21lc3NhZ2U6bixzdGFjazpcIlN5bnRheEVycm9yXCI9PXQubmFtZT9lOkIoZSl9fWZ1bmN0aW9uIHEodCxlLG4pe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlKXt2YXIgcjtpZihsLmlzT2JqZWN0KHQpKXt2YXIgaT10LnN0YWNrO3I9ZSt2KGksdCl9ZWxzZSByPWUrU3RyaW5nKHQpO1wiZnVuY3Rpb25cIj09dHlwZW9mIG8/byhyLG4pOlwiZnVuY3Rpb25cIiE9dHlwZW9mIGNvbnNvbGUubG9nJiZcIm9iamVjdFwiIT10eXBlb2YgY29uc29sZS5sb2d8fGNvbnNvbGUubG9nKHIpfX1mdW5jdGlvbiAkKHQsZSxuLHIpe3ZhciBpPSExO3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoaT0hMCxcInJlamVjdGlvbkhhbmRsZWRcIj09PXQ/ZShyKTplKG4scikpfWNhdGNoKHQpe2EudGhyb3dMYXRlcih0KX1cInVuaGFuZGxlZFJlamVjdGlvblwiPT09dD9UKHQsbixyKXx8aXx8cShuLFwiVW5oYW5kbGVkIHJlamVjdGlvbiBcIik6VCh0LHIpfWZ1bmN0aW9uIFEodCl7dmFyIGU7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCllPVwiW2Z1bmN0aW9uIFwiKyh0Lm5hbWV8fFwiYW5vbnltb3VzXCIpK1wiXVwiO2Vsc2V7aWYoZT10JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRvU3RyaW5nP3QudG9TdHJpbmcoKTpsLnRvU3RyaW5nKHQpLC9cXFtvYmplY3QgW2EtekEtWjAtOSRfXStcXF0vLnRlc3QoZSkpdHJ5e2U9SlNPTi5zdHJpbmdpZnkodCl9Y2F0Y2godCl7fTA9PT1lLmxlbmd0aCYmKGU9XCIoZW1wdHkgYXJyYXkpXCIpfXJldHVyblwiKDxcIitmdW5jdGlvbih0KXtyZXR1cm4gdC5sZW5ndGg8NDE/dDp0LnN1YnN0cigwLDM4KStcIi4uLlwifShlKStcIj4sIG5vIHN0YWNrIHRyYWNlKVwifWZ1bmN0aW9uIHooKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBKfXZhciBHPWZ1bmN0aW9uKCl7cmV0dXJuITF9LFg9L1tcXC88XFwoXShbXjpcXC9dKyk6KFxcZCspOig/OlxcZCspXFwpP1xccyokLztmdW5jdGlvbiBXKHQpe3ZhciBlPXQubWF0Y2goWCk7aWYoZSlyZXR1cm57ZmlsZU5hbWU6ZVsxXSxsaW5lOnBhcnNlSW50KGVbMl0sMTApfX1mdW5jdGlvbiBLKHQpe3RoaXMuX3BhcmVudD10LHRoaXMuX3Byb21pc2VzQ3JlYXRlZD0wO3ZhciBlPXRoaXMuX2xlbmd0aD0xKyh2b2lkIDA9PT10PzA6dC5fbGVuZ3RoKTtKKHRoaXMsSyksZT4zMiYmdGhpcy51bmN5Y2xlKCl9bC5pbmhlcml0cyhLLEVycm9yKSxuLkNhcHR1cmVkVHJhY2U9SyxLLnByb3RvdHlwZS51bmN5Y2xlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fbGVuZ3RoO2lmKCEodDwyKSl7Zm9yKHZhciBlPVtdLG49e30scj0wLGk9dGhpczt2b2lkIDAhPT1pOysrcillLnB1c2goaSksaT1pLl9wYXJlbnQ7Zm9yKHI9KHQ9dGhpcy5fbGVuZ3RoPXIpLTE7cj49MDstLXIpe3ZhciBvPWVbcl0uc3RhY2s7dm9pZCAwPT09bltvXSYmKG5bb109cil9Zm9yKHI9MDtyPHQ7KytyKXt2YXIgcz1uW2Vbcl0uc3RhY2tdO2lmKHZvaWQgMCE9PXMmJnMhPT1yKXtzPjAmJihlW3MtMV0uX3BhcmVudD12b2lkIDAsZVtzLTFdLl9sZW5ndGg9MSksZVtyXS5fcGFyZW50PXZvaWQgMCxlW3JdLl9sZW5ndGg9MTt2YXIgYT1yPjA/ZVtyLTFdOnRoaXM7czx0LTE/KGEuX3BhcmVudD1lW3MrMV0sYS5fcGFyZW50LnVuY3ljbGUoKSxhLl9sZW5ndGg9YS5fcGFyZW50Ll9sZW5ndGgrMSk6KGEuX3BhcmVudD12b2lkIDAsYS5fbGVuZ3RoPTEpO2Zvcih2YXIgYz1hLl9sZW5ndGgrMSxsPXItMjtsPj0wOy0tbCllW2xdLl9sZW5ndGg9YyxjKys7cmV0dXJufX19fSxLLnByb3RvdHlwZS5hdHRhY2hFeHRyYVRyYWNlPWZ1bmN0aW9uKHQpe2lmKCF0Ll9fc3RhY2tDbGVhbmVkX18pe3RoaXMudW5jeWNsZSgpO2Zvcih2YXIgZT1NKHQpLG49ZS5tZXNzYWdlLHI9W2Uuc3RhY2tdLGk9dGhpczt2b2lkIDAhPT1pOylyLnB1c2goQihpLnN0YWNrLnNwbGl0KFwiXFxuXCIpKSksaT1pLl9wYXJlbnQ7IWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10WzBdLG49MTtuPHQubGVuZ3RoOysrbil7Zm9yKHZhciByPXRbbl0saT1lLmxlbmd0aC0xLG89ZVtpXSxzPS0xLGE9ci5sZW5ndGgtMTthPj0wOy0tYSlpZihyW2FdPT09byl7cz1hO2JyZWFrfWZvcihhPXM7YT49MDstLWEpe3ZhciBjPXJbYV07aWYoZVtpXSE9PWMpYnJlYWs7ZS5wb3AoKSxpLS19ZT1yfX0ociksZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDsrK2UpKDA9PT10W2VdLmxlbmd0aHx8ZSsxPHQubGVuZ3RoJiZ0W2VdWzBdPT09dFtlKzFdWzBdKSYmKHQuc3BsaWNlKGUsMSksZS0tKX0ociksbC5ub3RFbnVtZXJhYmxlUHJvcCh0LFwic3RhY2tcIixmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGgtMTsrK24pZVtuXS5wdXNoKFwiRnJvbSBwcmV2aW91cyBldmVudDpcIiksZVtuXT1lW25dLmpvaW4oXCJcXG5cIik7cmV0dXJuIG48ZS5sZW5ndGgmJihlW25dPWVbbl0uam9pbihcIlxcblwiKSksdCtcIlxcblwiK2Uuam9pbihcIlxcblwiKX0obixyKSksbC5ub3RFbnVtZXJhYmxlUHJvcCh0LFwiX19zdGFja0NsZWFuZWRfX1wiLCEwKX19O3ZhciBKPWZ1bmN0aW9uKCl7dmFyIHQ9L15cXHMqYXRcXHMqLyxlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp2b2lkIDAhPT1lLm5hbWUmJnZvaWQgMCE9PWUubWVzc2FnZT9lLnRvU3RyaW5nKCk6UShlKX07aWYoXCJudW1iZXJcIj09dHlwZW9mIEVycm9yLnN0YWNrVHJhY2VMaW1pdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2Upe0Vycm9yLnN0YWNrVHJhY2VMaW1pdCs9NixkPXQsdj1lO3ZhciBuPUVycm9yLmNhcHR1cmVTdGFja1RyYWNlO3JldHVybiBHPWZ1bmN0aW9uKHQpe3JldHVybiBoLnRlc3QodCl9LGZ1bmN0aW9uKHQsZSl7RXJyb3Iuc3RhY2tUcmFjZUxpbWl0Kz02LG4odCxlKSxFcnJvci5zdGFja1RyYWNlTGltaXQtPTZ9fXZhciByLGk9bmV3IEVycm9yO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpLnN0YWNrJiZpLnN0YWNrLnNwbGl0KFwiXFxuXCIpWzBdLmluZGV4T2YoXCJzdGFja0RldGVjdGlvbkBcIik+PTApcmV0dXJuIGQ9L0AvLHY9ZSx5PSEwLGZ1bmN0aW9uKHQpe3Quc3RhY2s9KG5ldyBFcnJvcikuc3RhY2t9O3RyeXt0aHJvdyBuZXcgRXJyb3J9Y2F0Y2godCl7cj1cInN0YWNrXCJpbiB0fXJldHVyblwic3RhY2tcImluIGl8fCFyfHxcIm51bWJlclwiIT10eXBlb2YgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0Pyh2PWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZXx8dm9pZCAwPT09ZS5uYW1lfHx2b2lkIDA9PT1lLm1lc3NhZ2U/UShlKTplLnRvU3RyaW5nKCl9LG51bGwpOihkPXQsdj1lLGZ1bmN0aW9uKHQpe0Vycm9yLnN0YWNrVHJhY2VMaW1pdCs9Njt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGUpe3Quc3RhY2s9ZS5zdGFja31FcnJvci5zdGFja1RyYWNlTGltaXQtPTZ9KX0oKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSYmdm9pZCAwIT09Y29uc29sZS53YXJuJiYobz1mdW5jdGlvbih0KXtjb25zb2xlLndhcm4odCl9LGwuaXNOb2RlJiZwcm9jZXNzLnN0ZGVyci5pc1RUWT9vPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZT9cIlx1MDAxYlszM21cIjpcIlx1MDAxYlszMW1cIjtjb25zb2xlLndhcm4obit0K1wiXHUwMDFiWzBtXFxuXCIpfTpsLmlzTm9kZXx8XCJzdHJpbmdcIiE9dHlwZW9mKG5ldyBFcnJvcikuc3RhY2t8fChvPWZ1bmN0aW9uKHQsZSl7Y29uc29sZS53YXJuKFwiJWNcIit0LGU/XCJjb2xvcjogZGFya29yYW5nZVwiOlwiY29sb3I6IHJlZFwiKX0pKTt2YXIgWT17d2FybmluZ3M6Zyxsb25nU3RhY2tUcmFjZXM6ITEsY2FuY2VsbGF0aW9uOiExLG1vbml0b3Jpbmc6ITF9O3JldHVybiBiJiZlLmxvbmdTdGFja1RyYWNlcygpLHtsb25nU3RhY2tUcmFjZXM6ZnVuY3Rpb24oKXtyZXR1cm4gWS5sb25nU3RhY2tUcmFjZXN9LHdhcm5pbmdzOmZ1bmN0aW9uKCl7cmV0dXJuIFkud2FybmluZ3N9LGNhbmNlbGxhdGlvbjpmdW5jdGlvbigpe3JldHVybiBZLmNhbmNlbGxhdGlvbn0sbW9uaXRvcmluZzpmdW5jdGlvbigpe3JldHVybiBZLm1vbml0b3Jpbmd9LHByb3BhZ2F0ZUZyb21GdW5jdGlvbjpmdW5jdGlvbigpe3JldHVybiBWfSxib3VuZFZhbHVlRnVuY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gSX0sY2hlY2tGb3Jnb3R0ZW5SZXR1cm5zOmZ1bmN0aW9uKHQsZSxuLHIsaSl7aWYodm9pZCAwPT09dCYmbnVsbCE9PWUmJncpe2lmKHZvaWQgMCE9PWkmJmkuX3JldHVybmVkTm9uVW5kZWZpbmVkKCkpcmV0dXJuO2lmKDA9PSg2NTUzNSZyLl9iaXRGaWVsZCkpcmV0dXJuO24mJihuKz1cIiBcIik7dmFyIG89XCJcIixzPVwiXCI7aWYoZS5fdHJhY2Upe2Zvcih2YXIgYT1lLl90cmFjZS5zdGFjay5zcGxpdChcIlxcblwiKSxjPUIoYSksbD1jLmxlbmd0aC0xO2w+PTA7LS1sKXt2YXIgdT1jW2xdO2lmKCFmLnRlc3QodSkpe3ZhciBwPXUubWF0Y2goXyk7cCYmKG89XCJhdCBcIitwWzFdK1wiOlwiK3BbMl0rXCI6XCIrcFszXStcIiBcIik7YnJlYWt9fWlmKGMubGVuZ3RoPjApe3ZhciBoPWNbMF07Zm9yKGw9MDtsPGEubGVuZ3RoOysrbClpZihhW2xdPT09aCl7bD4wJiYocz1cIlxcblwiK2FbbC0xXSk7YnJlYWt9fX12YXIgZD1cImEgcHJvbWlzZSB3YXMgY3JlYXRlZCBpbiBhIFwiK24rXCJoYW5kbGVyIFwiK28rXCJidXQgd2FzIG5vdCByZXR1cm5lZCBmcm9tIGl0LCBzZWUgaHR0cDovL2dvby5nbC9yUnFNVXdcIitzO3IuX3dhcm4oZCwhMCxlKX19LHNldEJvdW5kczpmdW5jdGlvbih0LGUpe2lmKHooKSl7Zm9yKHZhciBuLHIsaT0odC5zdGFja3x8XCJcIikuc3BsaXQoXCJcXG5cIiksbz0oZS5zdGFja3x8XCJcIikuc3BsaXQoXCJcXG5cIikscz0tMSxhPS0xLGM9MDtjPGkubGVuZ3RoOysrYylpZihsPVcoaVtjXSkpe249bC5maWxlTmFtZSxzPWwubGluZTticmVha31mb3IoYz0wO2M8by5sZW5ndGg7KytjKXt2YXIgbDtpZihsPVcob1tjXSkpe3I9bC5maWxlTmFtZSxhPWwubGluZTticmVha319czwwfHxhPDB8fCFufHwhcnx8biE9PXJ8fHM+PWF8fChHPWZ1bmN0aW9uKHQpe2lmKGgudGVzdCh0KSlyZXR1cm4hMDt2YXIgZT1XKHQpO3JldHVybiEhKGUmJmUuZmlsZU5hbWU9PT1uJiZzPD1lLmxpbmUmJmUubGluZTw9YSl9KX19LHdhcm46VSxkZXByZWNhdGVkOmZ1bmN0aW9uKHQsZSl7dmFyIG49dCtcIiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cIjtyZXR1cm4gZSYmKG4rPVwiIFVzZSBcIitlK1wiIGluc3RlYWQuXCIpLFUobil9LENhcHR1cmVkVHJhY2U6SyxmaXJlRG9tRXZlbnQ6aixmaXJlR2xvYmFsRXZlbnQ6RX19fSx7XCIuL2Vycm9yc1wiOjEyLFwiLi9lczVcIjoxMyxcIi4vdXRpbFwiOjM2fV0sMTA6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiB0aGlzLnZhbHVlfWZ1bmN0aW9uIG4oKXt0aHJvdyB0aGlzLnJlYXNvbn10LnByb3RvdHlwZS5yZXR1cm49dC5wcm90b3R5cGUudGhlblJldHVybj1mdW5jdGlvbihuKXtyZXR1cm4gbiBpbnN0YW5jZW9mIHQmJm4uc3VwcHJlc3NVbmhhbmRsZWRSZWplY3Rpb25zKCksdGhpcy5fdGhlbihlLHZvaWQgMCx2b2lkIDAse3ZhbHVlOm59LHZvaWQgMCl9LHQucHJvdG90eXBlLnRocm93PXQucHJvdG90eXBlLnRoZW5UaHJvdz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fdGhlbihuLHZvaWQgMCx2b2lkIDAse3JlYXNvbjp0fSx2b2lkIDApfSx0LnByb3RvdHlwZS5jYXRjaFRocm93PWZ1bmN0aW9uKHQpe2lmKGFyZ3VtZW50cy5sZW5ndGg8PTEpcmV0dXJuIHRoaXMuX3RoZW4odm9pZCAwLG4sdm9pZCAwLHtyZWFzb246dH0sdm9pZCAwKTt2YXIgZT1hcmd1bWVudHNbMV07cmV0dXJuIHRoaXMuY2F1Z2h0KHQsZnVuY3Rpb24oKXt0aHJvdyBlfSl9LHQucHJvdG90eXBlLmNhdGNoUmV0dXJuPWZ1bmN0aW9uKG4pe2lmKGFyZ3VtZW50cy5sZW5ndGg8PTEpcmV0dXJuIG4gaW5zdGFuY2VvZiB0JiZuLnN1cHByZXNzVW5oYW5kbGVkUmVqZWN0aW9ucygpLHRoaXMuX3RoZW4odm9pZCAwLGUsdm9pZCAwLHt2YWx1ZTpufSx2b2lkIDApO3ZhciByPWFyZ3VtZW50c1sxXTtyZXR1cm4gciBpbnN0YW5jZW9mIHQmJnIuc3VwcHJlc3NVbmhhbmRsZWRSZWplY3Rpb25zKCksdGhpcy5jYXVnaHQobixmdW5jdGlvbigpe3JldHVybiByfSl9fX0se31dLDExOltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5yZWR1Y2Uscj10LmFsbDtmdW5jdGlvbiBpKCl7cmV0dXJuIHIodGhpcyl9dC5wcm90b3R5cGUuZWFjaD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHQsZSwwKS5fdGhlbihpLHZvaWQgMCx2b2lkIDAsdGhpcyx2b2lkIDApfSx0LnByb3RvdHlwZS5tYXBTZXJpZXM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx0LGUsZSl9LHQuZWFjaD1mdW5jdGlvbih0LHIpe3JldHVybiBuKHQscixlLDApLl90aGVuKGksdm9pZCAwLHZvaWQgMCx0LHZvaWQgMCl9LHQubWFwU2VyaWVzPWZ1bmN0aW9uKHQscil7cmV0dXJuIG4odCxyLGUsZSl9fX0se31dLDEyOltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsaSxvPXQoXCIuL2VzNVwiKSxzPW8uZnJlZXplLGE9dChcIi4vdXRpbFwiKSxjPWEuaW5oZXJpdHMsbD1hLm5vdEVudW1lcmFibGVQcm9wO2Z1bmN0aW9uIHUodCxlKXtmdW5jdGlvbiBuKHIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbihyKTtsKHRoaXMsXCJtZXNzYWdlXCIsXCJzdHJpbmdcIj09dHlwZW9mIHI/cjplKSxsKHRoaXMsXCJuYW1lXCIsdCksRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2U/RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx0aGlzLmNvbnN0cnVjdG9yKTpFcnJvci5jYWxsKHRoaXMpfXJldHVybiBjKG4sRXJyb3IpLG59dmFyIHA9dShcIldhcm5pbmdcIixcIndhcm5pbmdcIiksaD11KFwiQ2FuY2VsbGF0aW9uRXJyb3JcIixcImNhbmNlbGxhdGlvbiBlcnJvclwiKSxmPXUoXCJUaW1lb3V0RXJyb3JcIixcInRpbWVvdXQgZXJyb3JcIiksXz11KFwiQWdncmVnYXRlRXJyb3JcIixcImFnZ3JlZ2F0ZSBlcnJvclwiKTt0cnl7cj1UeXBlRXJyb3IsaT1SYW5nZUVycm9yfWNhdGNoKHQpe3I9dShcIlR5cGVFcnJvclwiLFwidHlwZSBlcnJvclwiKSxpPXUoXCJSYW5nZUVycm9yXCIsXCJyYW5nZSBlcnJvclwiKX1mb3IodmFyIGQ9XCJqb2luIHBvcCBwdXNoIHNoaWZ0IHVuc2hpZnQgc2xpY2UgZmlsdGVyIGZvckVhY2ggc29tZSBldmVyeSBtYXAgaW5kZXhPZiBsYXN0SW5kZXhPZiByZWR1Y2UgcmVkdWNlUmlnaHQgc29ydCByZXZlcnNlXCIuc3BsaXQoXCIgXCIpLHY9MDt2PGQubGVuZ3RoOysrdilcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheS5wcm90b3R5cGVbZFt2XV0mJihfLnByb3RvdHlwZVtkW3ZdXT1BcnJheS5wcm90b3R5cGVbZFt2XV0pO28uZGVmaW5lUHJvcGVydHkoXy5wcm90b3R5cGUsXCJsZW5ndGhcIix7dmFsdWU6MCxjb25maWd1cmFibGU6ITEsd3JpdGFibGU6ITAsZW51bWVyYWJsZTohMH0pLF8ucHJvdG90eXBlLmlzT3BlcmF0aW9uYWw9ITA7dmFyIHk9MDtmdW5jdGlvbiBtKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG0pKXJldHVybiBuZXcgbSh0KTtsKHRoaXMsXCJuYW1lXCIsXCJPcGVyYXRpb25hbEVycm9yXCIpLGwodGhpcyxcIm1lc3NhZ2VcIix0KSx0aGlzLmNhdXNlPXQsdGhpcy5pc09wZXJhdGlvbmFsPSEwLHQgaW5zdGFuY2VvZiBFcnJvcj8obCh0aGlzLFwibWVzc2FnZVwiLHQubWVzc2FnZSksbCh0aGlzLFwic3RhY2tcIix0LnN0YWNrKSk6RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsdGhpcy5jb25zdHJ1Y3Rvcil9Xy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgdD1BcnJheSg0KnkrMSkuam9pbihcIiBcIiksZT1cIlxcblwiK3QrXCJBZ2dyZWdhdGVFcnJvciBvZjpcXG5cIjt5KyssdD1BcnJheSg0KnkrMSkuam9pbihcIiBcIik7Zm9yKHZhciBuPTA7bjx0aGlzLmxlbmd0aDsrK24pe2Zvcih2YXIgcj10aGlzW25dPT09dGhpcz9cIltDaXJjdWxhciBBZ2dyZWdhdGVFcnJvcl1cIjp0aGlzW25dK1wiXCIsaT1yLnNwbGl0KFwiXFxuXCIpLG89MDtvPGkubGVuZ3RoOysrbylpW29dPXQraVtvXTtlKz0ocj1pLmpvaW4oXCJcXG5cIikpK1wiXFxuXCJ9cmV0dXJuIHktLSxlfSxjKG0sRXJyb3IpO3ZhciBnPUVycm9yLl9fQmx1ZWJpcmRFcnJvclR5cGVzX187Z3x8KGc9cyh7Q2FuY2VsbGF0aW9uRXJyb3I6aCxUaW1lb3V0RXJyb3I6ZixPcGVyYXRpb25hbEVycm9yOm0sUmVqZWN0aW9uRXJyb3I6bSxBZ2dyZWdhdGVFcnJvcjpffSksby5kZWZpbmVQcm9wZXJ0eShFcnJvcixcIl9fQmx1ZWJpcmRFcnJvclR5cGVzX19cIix7dmFsdWU6Zyx3cml0YWJsZTohMSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMX0pKSxlLmV4cG9ydHM9e0Vycm9yOkVycm9yLFR5cGVFcnJvcjpyLFJhbmdlRXJyb3I6aSxDYW5jZWxsYXRpb25FcnJvcjpnLkNhbmNlbGxhdGlvbkVycm9yLE9wZXJhdGlvbmFsRXJyb3I6Zy5PcGVyYXRpb25hbEVycm9yLFRpbWVvdXRFcnJvcjpnLlRpbWVvdXRFcnJvcixBZ2dyZWdhdGVFcnJvcjpnLkFnZ3JlZ2F0ZUVycm9yLFdhcm5pbmc6cH19LHtcIi4vZXM1XCI6MTMsXCIuL3V0aWxcIjozNn1dLDEzOltmdW5jdGlvbih0LGUsbil7dmFyIHI9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gdm9pZCAwPT09dGhpc30oKTtpZihyKWUuZXhwb3J0cz17ZnJlZXplOk9iamVjdC5mcmVlemUsZGVmaW5lUHJvcGVydHk6T2JqZWN0LmRlZmluZVByb3BlcnR5LGdldERlc2NyaXB0b3I6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixrZXlzOk9iamVjdC5rZXlzLG5hbWVzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLGdldFByb3RvdHlwZU9mOk9iamVjdC5nZXRQcm90b3R5cGVPZixpc0FycmF5OkFycmF5LmlzQXJyYXksaXNFUzU6cixwcm9wZXJ0eUlzV3JpdGFibGU6ZnVuY3Rpb24odCxlKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSk7cmV0dXJuIShuJiYhbi53cml0YWJsZSYmIW4uc2V0KX19O2Vsc2V7dmFyIGk9e30uaGFzT3duUHJvcGVydHksbz17fS50b1N0cmluZyxzPXt9LmNvbnN0cnVjdG9yLnByb3RvdHlwZSxhPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO2Zvcih2YXIgbiBpbiB0KWkuY2FsbCh0LG4pJiZlLnB1c2gobik7cmV0dXJuIGV9O2UuZXhwb3J0cz17aXNBcnJheTpmdW5jdGlvbih0KXt0cnl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09by5jYWxsKHQpfWNhdGNoKHQpe3JldHVybiExfX0sa2V5czphLG5hbWVzOmEsZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0W2VdPW4udmFsdWUsdH0sZ2V0RGVzY3JpcHRvcjpmdW5jdGlvbih0LGUpe3JldHVybnt2YWx1ZTp0W2VdfX0sZnJlZXplOmZ1bmN0aW9uKHQpe3JldHVybiB0fSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXt0cnl7cmV0dXJuIE9iamVjdCh0KS5jb25zdHJ1Y3Rvci5wcm90b3R5cGV9Y2F0Y2godCl7cmV0dXJuIHN9fSxpc0VTNTpyLHByb3BlcnR5SXNXcml0YWJsZTpmdW5jdGlvbigpe3JldHVybiEwfX19fSx7fV0sMTQ6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1hcDt0LnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCxyKXtyZXR1cm4gbih0aGlzLHQscixlKX0sdC5maWx0ZXI9ZnVuY3Rpb24odCxyLGkpe3JldHVybiBuKHQscixpLGUpfX19LHt9XSwxNTpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlLG4scil7dmFyIGk9dChcIi4vdXRpbFwiKSxvPWUuQ2FuY2VsbGF0aW9uRXJyb3Iscz1pLmVycm9yT2JqLGE9dChcIi4vY2F0Y2hfZmlsdGVyXCIpKHIpO2Z1bmN0aW9uIGModCxlLG4pe3RoaXMucHJvbWlzZT10LHRoaXMudHlwZT1lLHRoaXMuaGFuZGxlcj1uLHRoaXMuY2FsbGVkPSExLHRoaXMuY2FuY2VsUHJvbWlzZT1udWxsfWZ1bmN0aW9uIGwodCl7dGhpcy5maW5hbGx5SGFuZGxlcj10fWZ1bmN0aW9uIHUodCxlKXtyZXR1cm4gbnVsbCE9dC5jYW5jZWxQcm9taXNlJiYoYXJndW1lbnRzLmxlbmd0aD4xP3QuY2FuY2VsUHJvbWlzZS5fcmVqZWN0KGUpOnQuY2FuY2VsUHJvbWlzZS5fY2FuY2VsKCksdC5jYW5jZWxQcm9taXNlPW51bGwsITApfWZ1bmN0aW9uIHAoKXtyZXR1cm4gZi5jYWxsKHRoaXMsdGhpcy5wcm9taXNlLl90YXJnZXQoKS5fc2V0dGxlZFZhbHVlKCkpfWZ1bmN0aW9uIGgodCl7aWYoIXUodGhpcyx0KSlyZXR1cm4gcy5lPXQsc31mdW5jdGlvbiBmKHQpe3ZhciBpPXRoaXMucHJvbWlzZSxhPXRoaXMuaGFuZGxlcjtpZighdGhpcy5jYWxsZWQpe3RoaXMuY2FsbGVkPSEwO3ZhciBjPXRoaXMuaXNGaW5hbGx5SGFuZGxlcigpP2EuY2FsbChpLl9ib3VuZFZhbHVlKCkpOmEuY2FsbChpLl9ib3VuZFZhbHVlKCksdCk7aWYoYz09PXIpcmV0dXJuIGM7aWYodm9pZCAwIT09Yyl7aS5fc2V0UmV0dXJuZWROb25VbmRlZmluZWQoKTt2YXIgZj1uKGMsaSk7aWYoZiBpbnN0YW5jZW9mIGUpe2lmKG51bGwhPXRoaXMuY2FuY2VsUHJvbWlzZSl7aWYoZi5faXNDYW5jZWxsZWQoKSl7dmFyIF89bmV3IG8oXCJsYXRlIGNhbmNlbGxhdGlvbiBvYnNlcnZlclwiKTtyZXR1cm4gaS5fYXR0YWNoRXh0cmFUcmFjZShfKSxzLmU9XyxzfWYuaXNQZW5kaW5nKCkmJmYuX2F0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrKG5ldyBsKHRoaXMpKX1yZXR1cm4gZi5fdGhlbihwLGgsdm9pZCAwLHRoaXMsdm9pZCAwKX19fXJldHVybiBpLmlzUmVqZWN0ZWQoKT8odSh0aGlzKSxzLmU9dCxzKToodSh0aGlzKSx0KX1yZXR1cm4gYy5wcm90b3R5cGUuaXNGaW5hbGx5SGFuZGxlcj1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy50eXBlfSxsLnByb3RvdHlwZS5fcmVzdWx0Q2FuY2VsbGVkPWZ1bmN0aW9uKCl7dSh0aGlzLmZpbmFsbHlIYW5kbGVyKX0sZS5wcm90b3R5cGUuX3Bhc3NUaHJvdWdoPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/dGhpcy50aGVuKCk6dGhpcy5fdGhlbihuLHIsdm9pZCAwLG5ldyBjKHRoaXMsZSx0KSx2b2lkIDApfSxlLnByb3RvdHlwZS5sYXN0bHk9ZS5wcm90b3R5cGUuZmluYWxseT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcGFzc1Rocm91Z2godCwwLGYsZil9LGUucHJvdG90eXBlLnRhcD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcGFzc1Rocm91Z2godCwxLGYpfSxlLnByb3RvdHlwZS50YXBDYXRjaD1mdW5jdGlvbih0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoO2lmKDE9PT1uKXJldHVybiB0aGlzLl9wYXNzVGhyb3VnaCh0LDEsdm9pZCAwLGYpO3ZhciByLG89bmV3IEFycmF5KG4tMSkscz0wO2ZvcihyPTA7cjxuLTE7KytyKXt2YXIgYz1hcmd1bWVudHNbcl07aWYoIWkuaXNPYmplY3QoYykpcmV0dXJuIGUucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJ0YXBDYXRjaCBzdGF0ZW1lbnQgcHJlZGljYXRlOiBleHBlY3RpbmcgYW4gb2JqZWN0IGJ1dCBnb3QgXCIraS5jbGFzc1N0cmluZyhjKSkpO29bcysrXT1jfW8ubGVuZ3RoPXM7dmFyIGw9YXJndW1lbnRzW3JdO3JldHVybiB0aGlzLl9wYXNzVGhyb3VnaChhKG8sbCx0aGlzKSwxLHZvaWQgMCxmKX0sY319LHtcIi4vY2F0Y2hfZmlsdGVyXCI6NyxcIi4vdXRpbFwiOjM2fV0sMTY6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSxvLHMpe3ZhciBhPXQoXCIuL2Vycm9yc1wiKS5UeXBlRXJyb3IsYz10KFwiLi91dGlsXCIpLGw9Yy5lcnJvck9iaix1PWMudHJ5Q2F0Y2gscD1bXTtmdW5jdGlvbiBoKHQsbixpLG8pe2lmKHMuY2FuY2VsbGF0aW9uKCkpe3ZhciBhPW5ldyBlKHIpLGM9dGhpcy5fZmluYWxseVByb21pc2U9bmV3IGUocik7dGhpcy5fcHJvbWlzZT1hLmxhc3RseShmdW5jdGlvbigpe3JldHVybiBjfSksYS5fY2FwdHVyZVN0YWNrVHJhY2UoKSxhLl9zZXRPbkNhbmNlbCh0aGlzKX1lbHNlKHRoaXMuX3Byb21pc2U9bmV3IGUocikpLl9jYXB0dXJlU3RhY2tUcmFjZSgpO3RoaXMuX3N0YWNrPW8sdGhpcy5fZ2VuZXJhdG9yRnVuY3Rpb249dCx0aGlzLl9yZWNlaXZlcj1uLHRoaXMuX2dlbmVyYXRvcj12b2lkIDAsdGhpcy5feWllbGRIYW5kbGVycz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP1tpXS5jb25jYXQocCk6cCx0aGlzLl95aWVsZGVkUHJvbWlzZT1udWxsLHRoaXMuX2NhbmNlbGxhdGlvblBoYXNlPSExfWMuaW5oZXJpdHMoaCxvKSxoLnByb3RvdHlwZS5faXNSZXNvbHZlZD1mdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5fcHJvbWlzZX0saC5wcm90b3R5cGUuX2NsZWFudXA9ZnVuY3Rpb24oKXt0aGlzLl9wcm9taXNlPXRoaXMuX2dlbmVyYXRvcj1udWxsLHMuY2FuY2VsbGF0aW9uKCkmJm51bGwhPT10aGlzLl9maW5hbGx5UHJvbWlzZSYmKHRoaXMuX2ZpbmFsbHlQcm9taXNlLl9mdWxmaWxsKCksdGhpcy5fZmluYWxseVByb21pc2U9bnVsbCl9LGgucHJvdG90eXBlLl9wcm9taXNlQ2FuY2VsbGVkPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2lzUmVzb2x2ZWQoKSl7dmFyIHQ7aWYodm9pZCAwIT09dGhpcy5fZ2VuZXJhdG9yLnJldHVybil0aGlzLl9wcm9taXNlLl9wdXNoQ29udGV4dCgpLHQ9dSh0aGlzLl9nZW5lcmF0b3IucmV0dXJuKS5jYWxsKHRoaXMuX2dlbmVyYXRvcix2b2lkIDApLHRoaXMuX3Byb21pc2UuX3BvcENvbnRleHQoKTtlbHNle3ZhciBuPW5ldyBlLkNhbmNlbGxhdGlvbkVycm9yKFwiZ2VuZXJhdG9yIC5yZXR1cm4oKSBzZW50aW5lbFwiKTtlLmNvcm91dGluZS5yZXR1cm5TZW50aW5lbD1uLHRoaXMuX3Byb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UobiksdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKSx0PXUodGhpcy5fZ2VuZXJhdG9yLnRocm93KS5jYWxsKHRoaXMuX2dlbmVyYXRvcixuKSx0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCl9dGhpcy5fY2FuY2VsbGF0aW9uUGhhc2U9ITAsdGhpcy5feWllbGRlZFByb21pc2U9bnVsbCx0aGlzLl9jb250aW51ZSh0KX19LGgucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkPWZ1bmN0aW9uKHQpe3RoaXMuX3lpZWxkZWRQcm9taXNlPW51bGwsdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKTt2YXIgZT11KHRoaXMuX2dlbmVyYXRvci5uZXh0KS5jYWxsKHRoaXMuX2dlbmVyYXRvcix0KTt0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCksdGhpcy5fY29udGludWUoZSl9LGgucHJvdG90eXBlLl9wcm9taXNlUmVqZWN0ZWQ9ZnVuY3Rpb24odCl7dGhpcy5feWllbGRlZFByb21pc2U9bnVsbCx0aGlzLl9wcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHQpLHRoaXMuX3Byb21pc2UuX3B1c2hDb250ZXh0KCk7dmFyIGU9dSh0aGlzLl9nZW5lcmF0b3IudGhyb3cpLmNhbGwodGhpcy5fZ2VuZXJhdG9yLHQpO3RoaXMuX3Byb21pc2UuX3BvcENvbnRleHQoKSx0aGlzLl9jb250aW51ZShlKX0saC5wcm90b3R5cGUuX3Jlc3VsdENhbmNlbGxlZD1mdW5jdGlvbigpe2lmKHRoaXMuX3lpZWxkZWRQcm9taXNlIGluc3RhbmNlb2YgZSl7dmFyIHQ9dGhpcy5feWllbGRlZFByb21pc2U7dGhpcy5feWllbGRlZFByb21pc2U9bnVsbCx0LmNhbmNlbCgpfX0saC5wcm90b3R5cGUucHJvbWlzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9taXNlfSxoLnByb3RvdHlwZS5fcnVuPWZ1bmN0aW9uKCl7dGhpcy5fZ2VuZXJhdG9yPXRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uLmNhbGwodGhpcy5fcmVjZWl2ZXIpLHRoaXMuX3JlY2VpdmVyPXRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uPXZvaWQgMCx0aGlzLl9wcm9taXNlRnVsZmlsbGVkKHZvaWQgMCl9LGgucHJvdG90eXBlLl9jb250aW51ZT1mdW5jdGlvbih0KXt2YXIgbj10aGlzLl9wcm9taXNlO2lmKHQ9PT1sKXJldHVybiB0aGlzLl9jbGVhbnVwKCksdGhpcy5fY2FuY2VsbGF0aW9uUGhhc2U/bi5jYW5jZWwoKTpuLl9yZWplY3RDYWxsYmFjayh0LmUsITEpO3ZhciByPXQudmFsdWU7aWYoITA9PT10LmRvbmUpcmV0dXJuIHRoaXMuX2NsZWFudXAoKSx0aGlzLl9jYW5jZWxsYXRpb25QaGFzZT9uLmNhbmNlbCgpOm4uX3Jlc29sdmVDYWxsYmFjayhyKTt2YXIgbz1pKHIsdGhpcy5fcHJvbWlzZSk7aWYobyBpbnN0YW5jZW9mIGV8fG51bGwhPT0obz1mdW5jdGlvbih0LG4scil7Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDsrK28pe3IuX3B1c2hDb250ZXh0KCk7dmFyIHM9dShuW29dKSh0KTtpZihyLl9wb3BDb250ZXh0KCkscz09PWwpe3IuX3B1c2hDb250ZXh0KCk7dmFyIGE9ZS5yZWplY3QobC5lKTtyZXR1cm4gci5fcG9wQ29udGV4dCgpLGF9dmFyIGM9aShzLHIpO2lmKGMgaW5zdGFuY2VvZiBlKXJldHVybiBjfXJldHVybiBudWxsfShvLHRoaXMuX3lpZWxkSGFuZGxlcnMsdGhpcy5fcHJvbWlzZSkpKXt2YXIgcz0obz1vLl90YXJnZXQoKSkuX2JpdEZpZWxkOzA9PSg1MDM5NzE4NCZzKT8odGhpcy5feWllbGRlZFByb21pc2U9byxvLl9wcm94eSh0aGlzLG51bGwpKTowIT0oMzM1NTQ0MzImcyk/ZS5fYXN5bmMuaW52b2tlKHRoaXMuX3Byb21pc2VGdWxmaWxsZWQsdGhpcyxvLl92YWx1ZSgpKTowIT0oMTY3NzcyMTYmcyk/ZS5fYXN5bmMuaW52b2tlKHRoaXMuX3Byb21pc2VSZWplY3RlZCx0aGlzLG8uX3JlYXNvbigpKTp0aGlzLl9wcm9taXNlQ2FuY2VsbGVkKCl9ZWxzZSB0aGlzLl9wcm9taXNlUmVqZWN0ZWQobmV3IGEoXCJBIHZhbHVlICVzIHdhcyB5aWVsZGVkIHRoYXQgY291bGQgbm90IGJlIHRyZWF0ZWQgYXMgYSBwcm9taXNlXFxuXFxuICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcblxcblwiLnJlcGxhY2UoXCIlc1wiLFN0cmluZyhyKSkrXCJGcm9tIGNvcm91dGluZTpcXG5cIit0aGlzLl9zdGFjay5zcGxpdChcIlxcblwiKS5zbGljZSgxLC03KS5qb2luKFwiXFxuXCIpKSl9LGUuY29yb3V0aW5lPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgYShcImdlbmVyYXRvckZ1bmN0aW9uIG11c3QgYmUgYSBmdW5jdGlvblxcblxcbiAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXG5cIik7dmFyIG49T2JqZWN0KGUpLnlpZWxkSGFuZGxlcixyPWgsaT0obmV3IEVycm9yKS5zdGFjaztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxvPW5ldyByKHZvaWQgMCx2b2lkIDAsbixpKSxzPW8ucHJvbWlzZSgpO3JldHVybiBvLl9nZW5lcmF0b3I9ZSxvLl9wcm9taXNlRnVsZmlsbGVkKHZvaWQgMCksc319LGUuY29yb3V0aW5lLmFkZFlpZWxkSGFuZGxlcj1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBhKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIitjLmNsYXNzU3RyaW5nKHQpKTtwLnB1c2godCl9LGUuc3Bhd249ZnVuY3Rpb24odCl7aWYocy5kZXByZWNhdGVkKFwiUHJvbWlzZS5zcGF3bigpXCIsXCJQcm9taXNlLmNvcm91dGluZSgpXCIpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpcmV0dXJuIG4oXCJnZW5lcmF0b3JGdW5jdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb25cXG5cXG4gICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFxuXCIpO3ZhciByPW5ldyBoKHQsdGhpcyksaT1yLnByb21pc2UoKTtyZXR1cm4gci5fcnVuKGUuc3Bhd24pLGl9fX0se1wiLi9lcnJvcnNcIjoxMixcIi4vdXRpbFwiOjM2fV0sMTc6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSxvLHMpe3ZhciBhPXQoXCIuL3V0aWxcIik7YS5jYW5FdmFsdWF0ZSxhLnRyeUNhdGNoLGEuZXJyb3JPYmosZS5qb2luPWZ1bmN0aW9uKCl7dmFyIHQsZT1hcmd1bWVudHMubGVuZ3RoLTE7ZT4wJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhcmd1bWVudHNbZV0mJih0PWFyZ3VtZW50c1tlXSk7dmFyIHI9W10uc2xpY2UuY2FsbChhcmd1bWVudHMpO3QmJnIucG9wKCk7dmFyIGk9bmV3IG4ocikucHJvbWlzZSgpO3JldHVybiB2b2lkIDAhPT10P2kuc3ByZWFkKHQpOml9fX0se1wiLi91dGlsXCI6MzZ9XSwxODpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlLG4scixpLG8scyl7dmFyIGE9ZS5fZ2V0RG9tYWluLGM9dChcIi4vdXRpbFwiKSxsPWMudHJ5Q2F0Y2gsdT1jLmVycm9yT2JqLHA9ZS5fYXN5bmM7ZnVuY3Rpb24gaCh0LGUsbixyKXt0aGlzLmNvbnN0cnVjdG9yJCh0KSx0aGlzLl9wcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpO3ZhciBpPWEoKTt0aGlzLl9jYWxsYmFjaz1udWxsPT09aT9lOmMuZG9tYWluQmluZChpLGUpLHRoaXMuX3ByZXNlcnZlZFZhbHVlcz1yPT09bz9uZXcgQXJyYXkodGhpcy5sZW5ndGgoKSk6bnVsbCx0aGlzLl9saW1pdD1uLHRoaXMuX2luRmxpZ2h0PTAsdGhpcy5fcXVldWU9W10scC5pbnZva2UodGhpcy5fYXN5bmNJbml0LHRoaXMsdm9pZCAwKX1mdW5jdGlvbiBmKHQsbixpLG8pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4pcmV0dXJuIHIoXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiK2MuY2xhc3NTdHJpbmcobikpO3ZhciBzPTA7aWYodm9pZCAwIT09aSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGl8fG51bGw9PT1pKXJldHVybiBlLnJlamVjdChuZXcgVHlwZUVycm9yKFwib3B0aW9ucyBhcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdCBidXQgaXQgaXMgXCIrYy5jbGFzc1N0cmluZyhpKSkpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBpLmNvbmN1cnJlbmN5KXJldHVybiBlLnJlamVjdChuZXcgVHlwZUVycm9yKFwiJ2NvbmN1cnJlbmN5JyBtdXN0IGJlIGEgbnVtYmVyIGJ1dCBpdCBpcyBcIitjLmNsYXNzU3RyaW5nKGkuY29uY3VycmVuY3kpKSk7cz1pLmNvbmN1cnJlbmN5fXJldHVybiBuZXcgaCh0LG4scz1cIm51bWJlclwiPT10eXBlb2YgcyYmaXNGaW5pdGUocykmJnM+PTE/czowLG8pLnByb21pc2UoKX1jLmluaGVyaXRzKGgsbiksaC5wcm90b3R5cGUuX2FzeW5jSW5pdD1mdW5jdGlvbigpe3RoaXMuX2luaXQkKHZvaWQgMCwtMil9LGgucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKCl7fSxoLnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZD1mdW5jdGlvbih0LG4pe3ZhciByPXRoaXMuX3ZhbHVlcyxvPXRoaXMubGVuZ3RoKCksYT10aGlzLl9wcmVzZXJ2ZWRWYWx1ZXMsYz10aGlzLl9saW1pdDtpZihuPDApe2lmKHJbbj0tMSpuLTFdPXQsYz49MSYmKHRoaXMuX2luRmxpZ2h0LS0sdGhpcy5fZHJhaW5RdWV1ZSgpLHRoaXMuX2lzUmVzb2x2ZWQoKSkpcmV0dXJuITB9ZWxzZXtpZihjPj0xJiZ0aGlzLl9pbkZsaWdodD49YylyZXR1cm4gcltuXT10LHRoaXMuX3F1ZXVlLnB1c2gobiksITE7bnVsbCE9PWEmJihhW25dPXQpO3ZhciBwPXRoaXMuX3Byb21pc2UsaD10aGlzLl9jYWxsYmFjayxmPXAuX2JvdW5kVmFsdWUoKTtwLl9wdXNoQ29udGV4dCgpO3ZhciBfPWwoaCkuY2FsbChmLHQsbixvKSxkPXAuX3BvcENvbnRleHQoKTtpZihzLmNoZWNrRm9yZ290dGVuUmV0dXJucyhfLGQsbnVsbCE9PWE/XCJQcm9taXNlLmZpbHRlclwiOlwiUHJvbWlzZS5tYXBcIixwKSxfPT09dSlyZXR1cm4gdGhpcy5fcmVqZWN0KF8uZSksITA7dmFyIHY9aShfLHRoaXMuX3Byb21pc2UpO2lmKHYgaW5zdGFuY2VvZiBlKXt2YXIgeT0odj12Ll90YXJnZXQoKSkuX2JpdEZpZWxkO2lmKDA9PSg1MDM5NzE4NCZ5KSlyZXR1cm4gYz49MSYmdGhpcy5faW5GbGlnaHQrKyxyW25dPXYsdi5fcHJveHkodGhpcywtMSoobisxKSksITE7aWYoMD09KDMzNTU0NDMyJnkpKXJldHVybiAwIT0oMTY3NzcyMTYmeSk/KHRoaXMuX3JlamVjdCh2Ll9yZWFzb24oKSksITApOih0aGlzLl9jYW5jZWwoKSwhMCk7Xz12Ll92YWx1ZSgpfXJbbl09X31yZXR1cm4rK3RoaXMuX3RvdGFsUmVzb2x2ZWQ+PW8mJihudWxsIT09YT90aGlzLl9maWx0ZXIocixhKTp0aGlzLl9yZXNvbHZlKHIpLCEwKX0saC5wcm90b3R5cGUuX2RyYWluUXVldWU9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5fcXVldWUsZT10aGlzLl9saW1pdCxuPXRoaXMuX3ZhbHVlczt0Lmxlbmd0aD4wJiZ0aGlzLl9pbkZsaWdodDxlOyl7aWYodGhpcy5faXNSZXNvbHZlZCgpKXJldHVybjt2YXIgcj10LnBvcCgpO3RoaXMuX3Byb21pc2VGdWxmaWxsZWQobltyXSxyKX19LGgucHJvdG90eXBlLl9maWx0ZXI9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49ZS5sZW5ndGgscj1uZXcgQXJyYXkobiksaT0wLG89MDtvPG47KytvKXRbb10mJihyW2krK109ZVtvXSk7ci5sZW5ndGg9aSx0aGlzLl9yZXNvbHZlKHIpfSxoLnByb3RvdHlwZS5wcmVzZXJ2ZWRWYWx1ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJlc2VydmVkVmFsdWVzfSxlLnByb3RvdHlwZS5tYXA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZih0aGlzLHQsZSxudWxsKX0sZS5tYXA9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIGYodCxlLG4scil9fX0se1wiLi91dGlsXCI6MzZ9XSwxOTpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlLG4scixpLG8pe3ZhciBzPXQoXCIuL3V0aWxcIiksYT1zLnRyeUNhdGNoO2UubWV0aG9kPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IGUuVHlwZUVycm9yKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIitzLmNsYXNzU3RyaW5nKHQpKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcj1uZXcgZShuKTtyLl9jYXB0dXJlU3RhY2tUcmFjZSgpLHIuX3B1c2hDb250ZXh0KCk7dmFyIGk9YSh0KS5hcHBseSh0aGlzLGFyZ3VtZW50cykscz1yLl9wb3BDb250ZXh0KCk7cmV0dXJuIG8uY2hlY2tGb3Jnb3R0ZW5SZXR1cm5zKGkscyxcIlByb21pc2UubWV0aG9kXCIsciksci5fcmVzb2x2ZUZyb21TeW5jVmFsdWUoaSkscn19LGUuYXR0ZW1wdD1lLnRyeT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXJldHVybiBpKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIitzLmNsYXNzU3RyaW5nKHQpKTt2YXIgcixjPW5ldyBlKG4pO2lmKGMuX2NhcHR1cmVTdGFja1RyYWNlKCksYy5fcHVzaENvbnRleHQoKSxhcmd1bWVudHMubGVuZ3RoPjEpe28uZGVwcmVjYXRlZChcImNhbGxpbmcgUHJvbWlzZS50cnkgd2l0aCBtb3JlIHRoYW4gMSBhcmd1bWVudFwiKTt2YXIgbD1hcmd1bWVudHNbMV0sdT1hcmd1bWVudHNbMl07cj1zLmlzQXJyYXkobCk/YSh0KS5hcHBseSh1LGwpOmEodCkuY2FsbCh1LGwpfWVsc2Ugcj1hKHQpKCk7dmFyIHA9Yy5fcG9wQ29udGV4dCgpO3JldHVybiBvLmNoZWNrRm9yZ290dGVuUmV0dXJucyhyLHAsXCJQcm9taXNlLnRyeVwiLGMpLGMuX3Jlc29sdmVGcm9tU3luY1ZhbHVlKHIpLGN9LGUucHJvdG90eXBlLl9yZXNvbHZlRnJvbVN5bmNWYWx1ZT1mdW5jdGlvbih0KXt0PT09cy5lcnJvck9iaj90aGlzLl9yZWplY3RDYWxsYmFjayh0LmUsITEpOnRoaXMuX3Jlc29sdmVDYWxsYmFjayh0LCEwKX19fSx7XCIuL3V0aWxcIjozNn1dLDIwOltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dChcIi4vdXRpbFwiKSxpPXIubWF5YmVXcmFwQXNFcnJvcixvPXQoXCIuL2Vycm9yc1wiKS5PcGVyYXRpb25hbEVycm9yLHM9dChcIi4vZXM1XCIpLGE9L14oPzpuYW1lfG1lc3NhZ2V8c3RhY2t8Y2F1c2UpJC87ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKG4sYyl7aWYobnVsbCE9PXQpe2lmKG4pe3ZhciBsPWZ1bmN0aW9uKHQpe3ZhciBlO2lmKGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRXJyb3ImJnMuZ2V0UHJvdG90eXBlT2YodCk9PT1FcnJvci5wcm90b3R5cGV9KHQpKXsoZT1uZXcgbyh0KSkubmFtZT10Lm5hbWUsZS5tZXNzYWdlPXQubWVzc2FnZSxlLnN0YWNrPXQuc3RhY2s7Zm9yKHZhciBuPXMua2V5cyh0KSxpPTA7aTxuLmxlbmd0aDsrK2kpe3ZhciBjPW5baV07YS50ZXN0KGMpfHwoZVtjXT10W2NdKX1yZXR1cm4gZX1yZXR1cm4gci5tYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24odCksdH0oaShuKSk7dC5fYXR0YWNoRXh0cmFUcmFjZShsKSx0Ll9yZWplY3QobCl9ZWxzZSBpZihlKXt2YXIgdT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTt0Ll9mdWxmaWxsKHUpfWVsc2UgdC5fZnVsZmlsbChjKTt0PW51bGx9fX19LHtcIi4vZXJyb3JzXCI6MTIsXCIuL2VzNVwiOjEzLFwiLi91dGlsXCI6MzZ9XSwyMTpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgbj10KFwiLi91dGlsXCIpLHI9ZS5fYXN5bmMsaT1uLnRyeUNhdGNoLG89bi5lcnJvck9iajtmdW5jdGlvbiBzKHQsZSl7aWYoIW4uaXNBcnJheSh0KSlyZXR1cm4gYS5jYWxsKHRoaXMsdCxlKTt2YXIgcz1pKGUpLmFwcGx5KHRoaXMuX2JvdW5kVmFsdWUoKSxbbnVsbF0uY29uY2F0KHQpKTtzPT09byYmci50aHJvd0xhdGVyKHMuZSl9ZnVuY3Rpb24gYSh0LGUpe3ZhciBuPXRoaXMuX2JvdW5kVmFsdWUoKSxzPXZvaWQgMD09PXQ/aShlKS5jYWxsKG4sbnVsbCk6aShlKS5jYWxsKG4sbnVsbCx0KTtzPT09byYmci50aHJvd0xhdGVyKHMuZSl9ZnVuY3Rpb24gYyh0LGUpe2lmKCF0KXt2YXIgbj1uZXcgRXJyb3IodCtcIlwiKTtuLmNhdXNlPXQsdD1ufXZhciBzPWkoZSkuY2FsbCh0aGlzLl9ib3VuZFZhbHVlKCksdCk7cz09PW8mJnIudGhyb3dMYXRlcihzLmUpfWUucHJvdG90eXBlLmFzQ2FsbGJhY2s9ZS5wcm90b3R5cGUubm9kZWlmeT1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpe3ZhciBuPWE7dm9pZCAwIT09ZSYmT2JqZWN0KGUpLnNwcmVhZCYmKG49cyksdGhpcy5fdGhlbihuLGMsdm9pZCAwLHRoaXMsdCl9cmV0dXJuIHRoaXN9fX0se1wiLi91dGlsXCI6MzZ9XSwyMjpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBmKFwiY2lyY3VsYXIgcHJvbWlzZSByZXNvbHV0aW9uIGNoYWluXFxuXFxuICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcblwiKX0scj1mdW5jdGlvbigpe3JldHVybiBuZXcgeC5Qcm9taXNlSW5zcGVjdGlvbih0aGlzLl90YXJnZXQoKSl9LGk9ZnVuY3Rpb24odCl7cmV0dXJuIHgucmVqZWN0KG5ldyBmKHQpKX07ZnVuY3Rpb24gbygpe312YXIgcyxhPXt9LGM9dChcIi4vdXRpbFwiKTtzPWMuaXNOb2RlP2Z1bmN0aW9uKCl7dmFyIHQ9cHJvY2Vzcy5kb21haW47cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHR9OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGMubm90RW51bWVyYWJsZVByb3AoeCxcIl9nZXREb21haW5cIixzKTt2YXIgbD10KFwiLi9lczVcIiksdT10KFwiLi9hc3luY1wiKSxwPW5ldyB1O2wuZGVmaW5lUHJvcGVydHkoeCxcIl9hc3luY1wiLHt2YWx1ZTpwfSk7dmFyIGg9dChcIi4vZXJyb3JzXCIpLGY9eC5UeXBlRXJyb3I9aC5UeXBlRXJyb3I7eC5SYW5nZUVycm9yPWguUmFuZ2VFcnJvcjt2YXIgXz14LkNhbmNlbGxhdGlvbkVycm9yPWguQ2FuY2VsbGF0aW9uRXJyb3I7eC5UaW1lb3V0RXJyb3I9aC5UaW1lb3V0RXJyb3IseC5PcGVyYXRpb25hbEVycm9yPWguT3BlcmF0aW9uYWxFcnJvcix4LlJlamVjdGlvbkVycm9yPWguT3BlcmF0aW9uYWxFcnJvcix4LkFnZ3JlZ2F0ZUVycm9yPWguQWdncmVnYXRlRXJyb3I7dmFyIGQ9ZnVuY3Rpb24oKXt9LHY9e30seT17fSxtPXQoXCIuL3RoZW5hYmxlc1wiKSh4LGQpLGc9dChcIi4vcHJvbWlzZV9hcnJheVwiKSh4LGQsbSxpLG8pLGI9dChcIi4vY29udGV4dFwiKSh4KSx3PWIuY3JlYXRlLEM9dChcIi4vZGVidWdnYWJpbGl0eVwiKSh4LGIpLGo9KEMuQ2FwdHVyZWRUcmFjZSx0KFwiLi9maW5hbGx5XCIpKHgsbSx5KSksRT10KFwiLi9jYXRjaF9maWx0ZXJcIikoeSksaz10KFwiLi9ub2RlYmFja1wiKSxGPWMuZXJyb3JPYmosVD1jLnRyeUNhdGNoO2Z1bmN0aW9uIHgodCl7dCE9PWQmJmZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dHx8dC5jb25zdHJ1Y3RvciE9PXgpdGhyb3cgbmV3IGYoXCJ0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgaW52b2tlZCBkaXJlY3RseVxcblxcbiAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXG5cIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgZihcImV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCIrYy5jbGFzc1N0cmluZyhlKSl9KHRoaXMsdCksdGhpcy5fYml0RmllbGQ9MCx0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwPXZvaWQgMCx0aGlzLl9yZWplY3Rpb25IYW5kbGVyMD12b2lkIDAsdGhpcy5fcHJvbWlzZTA9dm9pZCAwLHRoaXMuX3JlY2VpdmVyMD12b2lkIDAsdGhpcy5fcmVzb2x2ZUZyb21FeGVjdXRvcih0KSx0aGlzLl9wcm9taXNlQ3JlYXRlZCgpLHRoaXMuX2ZpcmVFdmVudChcInByb21pc2VDcmVhdGVkXCIsdGhpcyl9ZnVuY3Rpb24gUCh0KXt0aGlzLnByb21pc2UuX3Jlc29sdmVDYWxsYmFjayh0KX1mdW5jdGlvbiBTKHQpe3RoaXMucHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2sodCwhMSl9ZnVuY3Rpb24gUih0KXt2YXIgZT1uZXcgeChkKTtlLl9mdWxmaWxsbWVudEhhbmRsZXIwPXQsZS5fcmVqZWN0aW9uSGFuZGxlcjA9dCxlLl9wcm9taXNlMD10LGUuX3JlY2VpdmVyMD10fXJldHVybiB4LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBQcm9taXNlXVwifSx4LnByb3RvdHlwZS5jYXVnaHQ9eC5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aDtpZihlPjEpe3ZhciBuLHI9bmV3IEFycmF5KGUtMSksbz0wO2ZvcihuPTA7bjxlLTE7KytuKXt2YXIgcz1hcmd1bWVudHNbbl07aWYoIWMuaXNPYmplY3QocykpcmV0dXJuIGkoXCJDYXRjaCBzdGF0ZW1lbnQgcHJlZGljYXRlOiBleHBlY3RpbmcgYW4gb2JqZWN0IGJ1dCBnb3QgXCIrYy5jbGFzc1N0cmluZyhzKSk7cltvKytdPXN9aWYoci5sZW5ndGg9byxcImZ1bmN0aW9uXCIhPXR5cGVvZih0PWFyZ3VtZW50c1tuXSkpdGhyb3cgbmV3IGYoXCJUaGUgbGFzdCBhcmd1bWVudCB0byAuY2F0Y2goKSBtdXN0IGJlIGEgZnVuY3Rpb24sIGdvdCBcIitjLnRvU3RyaW5nKHQpKTtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxFKHIsdCx0aGlzKSl9cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsdCl9LHgucHJvdG90eXBlLnJlZmxlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGhlbihyLHIsdm9pZCAwLHRoaXMsdm9pZCAwKX0seC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbih0LGUpe2lmKEMud2FybmluZ3MoKSYmYXJndW1lbnRzLmxlbmd0aD4wJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXt2YXIgbj1cIi50aGVuKCkgb25seSBhY2NlcHRzIGZ1bmN0aW9ucyBidXQgd2FzIHBhc3NlZDogXCIrYy5jbGFzc1N0cmluZyh0KTthcmd1bWVudHMubGVuZ3RoPjEmJihuKz1cIiwgXCIrYy5jbGFzc1N0cmluZyhlKSksdGhpcy5fd2FybihuKX1yZXR1cm4gdGhpcy5fdGhlbih0LGUsdm9pZCAwLHZvaWQgMCx2b2lkIDApfSx4LnByb3RvdHlwZS5kb25lPWZ1bmN0aW9uKHQsZSl7dGhpcy5fdGhlbih0LGUsdm9pZCAwLHZvaWQgMCx2b2lkIDApLl9zZXRJc0ZpbmFsKCl9LHgucHJvdG90eXBlLnNwcmVhZD1mdW5jdGlvbih0KXtyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2koXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiK2MuY2xhc3NTdHJpbmcodCkpOnRoaXMuYWxsKCkuX3RoZW4odCx2b2lkIDAsdm9pZCAwLHYsdm9pZCAwKX0seC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIHQ9e2lzRnVsZmlsbGVkOiExLGlzUmVqZWN0ZWQ6ITEsZnVsZmlsbG1lbnRWYWx1ZTp2b2lkIDAscmVqZWN0aW9uUmVhc29uOnZvaWQgMH07cmV0dXJuIHRoaXMuaXNGdWxmaWxsZWQoKT8odC5mdWxmaWxsbWVudFZhbHVlPXRoaXMudmFsdWUoKSx0LmlzRnVsZmlsbGVkPSEwKTp0aGlzLmlzUmVqZWN0ZWQoKSYmKHQucmVqZWN0aW9uUmVhc29uPXRoaXMucmVhc29uKCksdC5pc1JlamVjdGVkPSEwKSx0fSx4LnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wJiZ0aGlzLl93YXJuKFwiLmFsbCgpIHdhcyBwYXNzZWQgYXJndW1lbnRzIGJ1dCBpdCBkb2VzIG5vdCB0YWtlIGFueVwiKSxuZXcgZyh0aGlzKS5wcm9taXNlKCl9LHgucHJvdG90eXBlLmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhdWdodChjLm9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uLHQpfSx4LmdldE5ld0xpYnJhcnlDb3B5PWUuZXhwb3J0cyx4LmlzPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgeH0seC5mcm9tTm9kZT14LmZyb21DYWxsYmFjaz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgeChkKTtlLl9jYXB0dXJlU3RhY2tUcmFjZSgpO3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmISFPYmplY3QoYXJndW1lbnRzWzFdKS5tdWx0aUFyZ3Mscj1UKHQpKGsoZSxuKSk7cmV0dXJuIHI9PT1GJiZlLl9yZWplY3RDYWxsYmFjayhyLmUsITApLGUuX2lzRmF0ZVNlYWxlZCgpfHxlLl9zZXRBc3luY0d1YXJhbnRlZWQoKSxlfSx4LmFsbD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGcodCkucHJvbWlzZSgpfSx4LmNhc3Q9ZnVuY3Rpb24odCl7dmFyIGU9bSh0KTtyZXR1cm4gZSBpbnN0YW5jZW9mIHh8fCgoZT1uZXcgeChkKSkuX2NhcHR1cmVTdGFja1RyYWNlKCksZS5fc2V0RnVsZmlsbGVkKCksZS5fcmVqZWN0aW9uSGFuZGxlcjA9dCksZX0seC5yZXNvbHZlPXguZnVsZmlsbGVkPXguY2FzdCx4LnJlamVjdD14LnJlamVjdGVkPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB4KGQpO3JldHVybiBlLl9jYXB0dXJlU3RhY2tUcmFjZSgpLGUuX3JlamVjdENhbGxiYWNrKHQsITApLGV9LHguc2V0U2NoZWR1bGVyPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IGYoXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiK2MuY2xhc3NTdHJpbmcodCkpO3JldHVybiBwLnNldFNjaGVkdWxlcih0KX0seC5wcm90b3R5cGUuX3RoZW49ZnVuY3Rpb24odCxlLG4scixpKXt2YXIgbz12b2lkIDAhPT1pLGE9bz9pOm5ldyB4KGQpLGw9dGhpcy5fdGFyZ2V0KCksdT1sLl9iaXRGaWVsZDtvfHwoYS5fcHJvcGFnYXRlRnJvbSh0aGlzLDMpLGEuX2NhcHR1cmVTdGFja1RyYWNlKCksdm9pZCAwPT09ciYmMCE9KDIwOTcxNTImdGhpcy5fYml0RmllbGQpJiYocj0wIT0oNTAzOTcxODQmdSk/dGhpcy5fYm91bmRWYWx1ZSgpOmw9PT10aGlzP3ZvaWQgMDp0aGlzLl9ib3VuZFRvKSx0aGlzLl9maXJlRXZlbnQoXCJwcm9taXNlQ2hhaW5lZFwiLHRoaXMsYSkpO3ZhciBoPXMoKTtpZigwIT0oNTAzOTcxODQmdSkpe3ZhciBmLHYseT1sLl9zZXR0bGVQcm9taXNlQ3R4OzAhPSgzMzU1NDQzMiZ1KT8odj1sLl9yZWplY3Rpb25IYW5kbGVyMCxmPXQpOjAhPSgxNjc3NzIxNiZ1KT8odj1sLl9mdWxmaWxsbWVudEhhbmRsZXIwLGY9ZSxsLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCkpOih5PWwuX3NldHRsZVByb21pc2VMYXRlQ2FuY2VsbGF0aW9uT2JzZXJ2ZXIsdj1uZXcgXyhcImxhdGUgY2FuY2VsbGF0aW9uIG9ic2VydmVyXCIpLGwuX2F0dGFjaEV4dHJhVHJhY2UodiksZj1lKSxwLmludm9rZSh5LGwse2hhbmRsZXI6bnVsbD09PWg/ZjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZjLmRvbWFpbkJpbmQoaCxmKSxwcm9taXNlOmEscmVjZWl2ZXI6cix2YWx1ZTp2fSl9ZWxzZSBsLl9hZGRDYWxsYmFja3ModCxlLGEscixoKTtyZXR1cm4gYX0seC5wcm90b3R5cGUuX2xlbmd0aD1mdW5jdGlvbigpe3JldHVybiA2NTUzNSZ0aGlzLl9iaXRGaWVsZH0seC5wcm90b3R5cGUuX2lzRmF0ZVNlYWxlZD1mdW5jdGlvbigpe3JldHVybiAwIT0oMTE3NTA2MDQ4JnRoaXMuX2JpdEZpZWxkKX0seC5wcm90b3R5cGUuX2lzRm9sbG93aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIDY3MTA4ODY0PT0oNjcxMDg4NjQmdGhpcy5fYml0RmllbGQpfSx4LnByb3RvdHlwZS5fc2V0TGVuZ3RoPWZ1bmN0aW9uKHQpe3RoaXMuX2JpdEZpZWxkPS02NTUzNiZ0aGlzLl9iaXRGaWVsZHw2NTUzNSZ0fSx4LnByb3RvdHlwZS5fc2V0RnVsZmlsbGVkPWZ1bmN0aW9uKCl7dGhpcy5fYml0RmllbGQ9MzM1NTQ0MzJ8dGhpcy5fYml0RmllbGQsdGhpcy5fZmlyZUV2ZW50KFwicHJvbWlzZUZ1bGZpbGxlZFwiLHRoaXMpfSx4LnByb3RvdHlwZS5fc2V0UmVqZWN0ZWQ9ZnVuY3Rpb24oKXt0aGlzLl9iaXRGaWVsZD0xNjc3NzIxNnx0aGlzLl9iaXRGaWVsZCx0aGlzLl9maXJlRXZlbnQoXCJwcm9taXNlUmVqZWN0ZWRcIix0aGlzKX0seC5wcm90b3R5cGUuX3NldEZvbGxvd2luZz1mdW5jdGlvbigpe3RoaXMuX2JpdEZpZWxkPTY3MTA4ODY0fHRoaXMuX2JpdEZpZWxkLHRoaXMuX2ZpcmVFdmVudChcInByb21pc2VSZXNvbHZlZFwiLHRoaXMpfSx4LnByb3RvdHlwZS5fc2V0SXNGaW5hbD1mdW5jdGlvbigpe3RoaXMuX2JpdEZpZWxkPTQxOTQzMDR8dGhpcy5fYml0RmllbGR9LHgucHJvdG90eXBlLl9pc0ZpbmFsPWZ1bmN0aW9uKCl7cmV0dXJuKDQxOTQzMDQmdGhpcy5fYml0RmllbGQpPjB9LHgucHJvdG90eXBlLl91bnNldENhbmNlbGxlZD1mdW5jdGlvbigpe3RoaXMuX2JpdEZpZWxkPS02NTUzNyZ0aGlzLl9iaXRGaWVsZH0seC5wcm90b3R5cGUuX3NldENhbmNlbGxlZD1mdW5jdGlvbigpe3RoaXMuX2JpdEZpZWxkPTY1NTM2fHRoaXMuX2JpdEZpZWxkLHRoaXMuX2ZpcmVFdmVudChcInByb21pc2VDYW5jZWxsZWRcIix0aGlzKX0seC5wcm90b3R5cGUuX3NldFdpbGxCZUNhbmNlbGxlZD1mdW5jdGlvbigpe3RoaXMuX2JpdEZpZWxkPTgzODg2MDh8dGhpcy5fYml0RmllbGR9LHgucHJvdG90eXBlLl9zZXRBc3luY0d1YXJhbnRlZWQ9ZnVuY3Rpb24oKXtwLmhhc0N1c3RvbVNjaGVkdWxlcigpfHwodGhpcy5fYml0RmllbGQ9MTM0MjE3NzI4fHRoaXMuX2JpdEZpZWxkKX0seC5wcm90b3R5cGUuX3JlY2VpdmVyQXQ9ZnVuY3Rpb24odCl7dmFyIGU9MD09PXQ/dGhpcy5fcmVjZWl2ZXIwOnRoaXNbNCp0LTQrM107aWYoZSE9PWEpcmV0dXJuIHZvaWQgMD09PWUmJnRoaXMuX2lzQm91bmQoKT90aGlzLl9ib3VuZFZhbHVlKCk6ZX0seC5wcm90b3R5cGUuX3Byb21pc2VBdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc1s0KnQtNCsyXX0seC5wcm90b3R5cGUuX2Z1bGZpbGxtZW50SGFuZGxlckF0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzWzQqdC00KzBdfSx4LnByb3RvdHlwZS5fcmVqZWN0aW9uSGFuZGxlckF0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzWzQqdC00KzFdfSx4LnByb3RvdHlwZS5fYm91bmRWYWx1ZT1mdW5jdGlvbigpe30seC5wcm90b3R5cGUuX21pZ3JhdGVDYWxsYmFjazA9ZnVuY3Rpb24odCl7dC5fYml0RmllbGQ7dmFyIGU9dC5fZnVsZmlsbG1lbnRIYW5kbGVyMCxuPXQuX3JlamVjdGlvbkhhbmRsZXIwLHI9dC5fcHJvbWlzZTAsaT10Ll9yZWNlaXZlckF0KDApO3ZvaWQgMD09PWkmJihpPWEpLHRoaXMuX2FkZENhbGxiYWNrcyhlLG4scixpLG51bGwpfSx4LnByb3RvdHlwZS5fbWlncmF0ZUNhbGxiYWNrQXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10Ll9mdWxmaWxsbWVudEhhbmRsZXJBdChlKSxyPXQuX3JlamVjdGlvbkhhbmRsZXJBdChlKSxpPXQuX3Byb21pc2VBdChlKSxvPXQuX3JlY2VpdmVyQXQoZSk7dm9pZCAwPT09byYmKG89YSksdGhpcy5fYWRkQ2FsbGJhY2tzKG4scixpLG8sbnVsbCl9LHgucHJvdG90eXBlLl9hZGRDYWxsYmFja3M9ZnVuY3Rpb24odCxlLG4scixpKXt2YXIgbz10aGlzLl9sZW5ndGgoKTtpZihvPj02NTUzMSYmKG89MCx0aGlzLl9zZXRMZW5ndGgoMCkpLDA9PT1vKXRoaXMuX3Byb21pc2UwPW4sdGhpcy5fcmVjZWl2ZXIwPXIsXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjA9bnVsbD09PWk/dDpjLmRvbWFpbkJpbmQoaSx0KSksXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwPW51bGw9PT1pP2U6Yy5kb21haW5CaW5kKGksZSkpO2Vsc2V7dmFyIHM9NCpvLTQ7dGhpc1tzKzJdPW4sdGhpc1tzKzNdPXIsXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHRoaXNbcyswXT1udWxsPT09aT90OmMuZG9tYWluQmluZChpLHQpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYodGhpc1tzKzFdPW51bGw9PT1pP2U6Yy5kb21haW5CaW5kKGksZSkpfXJldHVybiB0aGlzLl9zZXRMZW5ndGgobysxKSxvfSx4LnByb3RvdHlwZS5fcHJveHk9ZnVuY3Rpb24odCxlKXt0aGlzLl9hZGRDYWxsYmFja3Modm9pZCAwLHZvaWQgMCxlLHQsbnVsbCl9LHgucHJvdG90eXBlLl9yZXNvbHZlQ2FsbGJhY2s9ZnVuY3Rpb24odCxlKXtpZigwPT0oMTE3NTA2MDQ4JnRoaXMuX2JpdEZpZWxkKSl7aWYodD09PXRoaXMpcmV0dXJuIHRoaXMuX3JlamVjdENhbGxiYWNrKG4oKSwhMSk7dmFyIHI9bSh0LHRoaXMpO2lmKCEociBpbnN0YW5jZW9mIHgpKXJldHVybiB0aGlzLl9mdWxmaWxsKHQpO2UmJnRoaXMuX3Byb3BhZ2F0ZUZyb20ociwyKTt2YXIgaT1yLl90YXJnZXQoKTtpZihpIT09dGhpcyl7dmFyIG89aS5fYml0RmllbGQ7aWYoMD09KDUwMzk3MTg0Jm8pKXt2YXIgcz10aGlzLl9sZW5ndGgoKTtzPjAmJmkuX21pZ3JhdGVDYWxsYmFjazAodGhpcyk7Zm9yKHZhciBhPTE7YTxzOysrYSlpLl9taWdyYXRlQ2FsbGJhY2tBdCh0aGlzLGEpO3RoaXMuX3NldEZvbGxvd2luZygpLHRoaXMuX3NldExlbmd0aCgwKSx0aGlzLl9zZXRGb2xsb3dlZShpKX1lbHNlIGlmKDAhPSgzMzU1NDQzMiZvKSl0aGlzLl9mdWxmaWxsKGkuX3ZhbHVlKCkpO2Vsc2UgaWYoMCE9KDE2Nzc3MjE2Jm8pKXRoaXMuX3JlamVjdChpLl9yZWFzb24oKSk7ZWxzZXt2YXIgYz1uZXcgXyhcImxhdGUgY2FuY2VsbGF0aW9uIG9ic2VydmVyXCIpO2kuX2F0dGFjaEV4dHJhVHJhY2UoYyksdGhpcy5fcmVqZWN0KGMpfX1lbHNlIHRoaXMuX3JlamVjdChuKCkpfX0seC5wcm90b3R5cGUuX3JlamVjdENhbGxiYWNrPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1jLmVuc3VyZUVycm9yT2JqZWN0KHQpLGk9cj09PXQ7aWYoIWkmJiFuJiZDLndhcm5pbmdzKCkpe3ZhciBvPVwiYSBwcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgbm9uLWVycm9yOiBcIitjLmNsYXNzU3RyaW5nKHQpO3RoaXMuX3dhcm4obywhMCl9dGhpcy5fYXR0YWNoRXh0cmFUcmFjZShyLCEhZSYmaSksdGhpcy5fcmVqZWN0KHQpfSx4LnByb3RvdHlwZS5fcmVzb2x2ZUZyb21FeGVjdXRvcj1mdW5jdGlvbih0KXtpZih0IT09ZCl7dmFyIGU9dGhpczt0aGlzLl9jYXB0dXJlU3RhY2tUcmFjZSgpLHRoaXMuX3B1c2hDb250ZXh0KCk7dmFyIG49ITAscj10aGlzLl9leGVjdXRlKHQsZnVuY3Rpb24odCl7ZS5fcmVzb2x2ZUNhbGxiYWNrKHQpfSxmdW5jdGlvbih0KXtlLl9yZWplY3RDYWxsYmFjayh0LG4pfSk7bj0hMSx0aGlzLl9wb3BDb250ZXh0KCksdm9pZCAwIT09ciYmZS5fcmVqZWN0Q2FsbGJhY2sociwhMCl9fSx4LnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBpPXIuX2JpdEZpZWxkO2lmKDA9PSg2NTUzNiZpKSl7dmFyIG87ci5fcHVzaENvbnRleHQoKSxlPT09dj9uJiZcIm51bWJlclwiPT10eXBlb2Ygbi5sZW5ndGg/bz1UKHQpLmFwcGx5KHRoaXMuX2JvdW5kVmFsdWUoKSxuKToobz1GKS5lPW5ldyBmKFwiY2Fubm90IC5zcHJlYWQoKSBhIG5vbi1hcnJheTogXCIrYy5jbGFzc1N0cmluZyhuKSk6bz1UKHQpLmNhbGwoZSxuKTt2YXIgcz1yLl9wb3BDb250ZXh0KCk7MD09KDY1NTM2JihpPXIuX2JpdEZpZWxkKSkmJihvPT09eT9yLl9yZWplY3Qobik6bz09PUY/ci5fcmVqZWN0Q2FsbGJhY2soby5lLCExKTooQy5jaGVja0ZvcmdvdHRlblJldHVybnMobyxzLFwiXCIscix0aGlzKSxyLl9yZXNvbHZlQ2FsbGJhY2sobykpKX19LHgucHJvdG90eXBlLl90YXJnZXQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpczt0Ll9pc0ZvbGxvd2luZygpOyl0PXQuX2ZvbGxvd2VlKCk7cmV0dXJuIHR9LHgucHJvdG90eXBlLl9mb2xsb3dlZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMH0seC5wcm90b3R5cGUuX3NldEZvbGxvd2VlPWZ1bmN0aW9uKHQpe3RoaXMuX3JlamVjdGlvbkhhbmRsZXIwPXR9LHgucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciBzPXQgaW5zdGFuY2VvZiB4LGE9dGhpcy5fYml0RmllbGQsYz0wIT0oMTM0MjE3NzI4JmEpOzAhPSg2NTUzNiZhKT8ocyYmdC5faW52b2tlSW50ZXJuYWxPbkNhbmNlbCgpLG4gaW5zdGFuY2VvZiBqJiZuLmlzRmluYWxseUhhbmRsZXIoKT8obi5jYW5jZWxQcm9taXNlPXQsVChlKS5jYWxsKG4saSk9PT1GJiZ0Ll9yZWplY3QoRi5lKSk6ZT09PXI/dC5fZnVsZmlsbChyLmNhbGwobikpOm4gaW5zdGFuY2VvZiBvP24uX3Byb21pc2VDYW5jZWxsZWQodCk6c3x8dCBpbnN0YW5jZW9mIGc/dC5fY2FuY2VsKCk6bi5jYW5jZWwoKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZT9zPyhjJiZ0Ll9zZXRBc3luY0d1YXJhbnRlZWQoKSx0aGlzLl9zZXR0bGVQcm9taXNlRnJvbUhhbmRsZXIoZSxuLGksdCkpOmUuY2FsbChuLGksdCk6biBpbnN0YW5jZW9mIG8/bi5faXNSZXNvbHZlZCgpfHwoMCE9KDMzNTU0NDMyJmEpP24uX3Byb21pc2VGdWxmaWxsZWQoaSx0KTpuLl9wcm9taXNlUmVqZWN0ZWQoaSx0KSk6cyYmKGMmJnQuX3NldEFzeW5jR3VhcmFudGVlZCgpLDAhPSgzMzU1NDQzMiZhKT90Ll9mdWxmaWxsKGkpOnQuX3JlamVjdChpKSl9LHgucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlTGF0ZUNhbmNlbGxhdGlvbk9ic2VydmVyPWZ1bmN0aW9uKHQpe3ZhciBlPXQuaGFuZGxlcixuPXQucHJvbWlzZSxyPXQucmVjZWl2ZXIsaT10LnZhbHVlO1wiZnVuY3Rpb25cIj09dHlwZW9mIGU/biBpbnN0YW5jZW9mIHg/dGhpcy5fc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyKGUscixpLG4pOmUuY2FsbChyLGksbik6biBpbnN0YW5jZW9mIHgmJm4uX3JlamVjdChpKX0seC5wcm90b3R5cGUuX3NldHRsZVByb21pc2VDdHg9ZnVuY3Rpb24odCl7dGhpcy5fc2V0dGxlUHJvbWlzZSh0LnByb21pc2UsdC5oYW5kbGVyLHQucmVjZWl2ZXIsdC52YWx1ZSl9LHgucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlMD1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy5fcHJvbWlzZTAsaT10aGlzLl9yZWNlaXZlckF0KDApO3RoaXMuX3Byb21pc2UwPXZvaWQgMCx0aGlzLl9yZWNlaXZlcjA9dm9pZCAwLHRoaXMuX3NldHRsZVByb21pc2Uocix0LGksZSl9LHgucHJvdG90eXBlLl9jbGVhckNhbGxiYWNrRGF0YUF0SW5kZXg9ZnVuY3Rpb24odCl7dmFyIGU9NCp0LTQ7dGhpc1tlKzJdPXRoaXNbZSszXT10aGlzW2UrMF09dGhpc1tlKzFdPXZvaWQgMH0seC5wcm90b3R5cGUuX2Z1bGZpbGw9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fYml0RmllbGQ7aWYoISgoMTE3NTA2MDQ4JmUpPj4+MTYpKXtpZih0PT09dGhpcyl7dmFyIHI9bigpO3JldHVybiB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKHIpLHRoaXMuX3JlamVjdChyKX10aGlzLl9zZXRGdWxmaWxsZWQoKSx0aGlzLl9yZWplY3Rpb25IYW5kbGVyMD10LCg2NTUzNSZlKT4wJiYoMCE9KDEzNDIxNzcyOCZlKT90aGlzLl9zZXR0bGVQcm9taXNlcygpOnAuc2V0dGxlUHJvbWlzZXModGhpcyksdGhpcy5fZGVyZWZlcmVuY2VUcmFjZSgpKX19LHgucHJvdG90eXBlLl9yZWplY3Q9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fYml0RmllbGQ7aWYoISgoMTE3NTA2MDQ4JmUpPj4+MTYpKXtpZih0aGlzLl9zZXRSZWplY3RlZCgpLHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjA9dCx0aGlzLl9pc0ZpbmFsKCkpcmV0dXJuIHAuZmF0YWxFcnJvcih0LGMuaXNOb2RlKTsoNjU1MzUmZSk+MD9wLnNldHRsZVByb21pc2VzKHRoaXMpOnRoaXMuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCgpfX0seC5wcm90b3R5cGUuX2Z1bGZpbGxQcm9taXNlcz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0xO248dDtuKyspe3ZhciByPXRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlckF0KG4pLGk9dGhpcy5fcHJvbWlzZUF0KG4pLG89dGhpcy5fcmVjZWl2ZXJBdChuKTt0aGlzLl9jbGVhckNhbGxiYWNrRGF0YUF0SW5kZXgobiksdGhpcy5fc2V0dGxlUHJvbWlzZShpLHIsbyxlKX19LHgucHJvdG90eXBlLl9yZWplY3RQcm9taXNlcz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0xO248dDtuKyspe3ZhciByPXRoaXMuX3JlamVjdGlvbkhhbmRsZXJBdChuKSxpPXRoaXMuX3Byb21pc2VBdChuKSxvPXRoaXMuX3JlY2VpdmVyQXQobik7dGhpcy5fY2xlYXJDYWxsYmFja0RhdGFBdEluZGV4KG4pLHRoaXMuX3NldHRsZVByb21pc2UoaSxyLG8sZSl9fSx4LnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9iaXRGaWVsZCxlPTY1NTM1JnQ7aWYoZT4wKXtpZigwIT0oMTY4NDI3NTImdCkpe3ZhciBuPXRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjA7dGhpcy5fc2V0dGxlUHJvbWlzZTAodGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAsbix0KSx0aGlzLl9yZWplY3RQcm9taXNlcyhlLG4pfWVsc2V7dmFyIHI9dGhpcy5fcmVqZWN0aW9uSGFuZGxlcjA7dGhpcy5fc2V0dGxlUHJvbWlzZTAodGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCxyLHQpLHRoaXMuX2Z1bGZpbGxQcm9taXNlcyhlLHIpfXRoaXMuX3NldExlbmd0aCgwKX10aGlzLl9jbGVhckNhbmNlbGxhdGlvbkRhdGEoKX0seC5wcm90b3R5cGUuX3NldHRsZWRWYWx1ZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2JpdEZpZWxkO3JldHVybiAwIT0oMzM1NTQ0MzImdCk/dGhpcy5fcmVqZWN0aW9uSGFuZGxlcjA6MCE9KDE2Nzc3MjE2JnQpP3RoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjA6dm9pZCAwfSxcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJmwuZGVmaW5lUHJvcGVydHkoeC5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIk9iamVjdFwifX0pLHguZGVmZXI9eC5wZW5kaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEMuZGVwcmVjYXRlZChcIlByb21pc2UuZGVmZXJcIixcIm5ldyBQcm9taXNlXCIpLHtwcm9taXNlOm5ldyB4KGQpLHJlc29sdmU6UCxyZWplY3Q6U319LGMubm90RW51bWVyYWJsZVByb3AoeCxcIl9tYWtlU2VsZlJlc29sdXRpb25FcnJvclwiLG4pLHQoXCIuL21ldGhvZFwiKSh4LGQsbSxpLEMpLHQoXCIuL2JpbmRcIikoeCxkLG0sQyksdChcIi4vY2FuY2VsXCIpKHgsZyxpLEMpLHQoXCIuL2RpcmVjdF9yZXNvbHZlXCIpKHgpLHQoXCIuL3N5bmNocm9ub3VzX2luc3BlY3Rpb25cIikoeCksdChcIi4vam9pblwiKSh4LGcsbSxkLHAscykseC5Qcm9taXNlPXgseC52ZXJzaW9uPVwiMy41LjVcIix0KFwiLi9jYWxsX2dldC5qc1wiKSh4KSx0KFwiLi9nZW5lcmF0b3JzLmpzXCIpKHgsaSxkLG0sbyxDKSx0KFwiLi9tYXAuanNcIikoeCxnLGksbSxkLEMpLHQoXCIuL25vZGVpZnkuanNcIikoeCksdChcIi4vcHJvbWlzaWZ5LmpzXCIpKHgsZCksdChcIi4vcHJvcHMuanNcIikoeCxnLG0saSksdChcIi4vcmFjZS5qc1wiKSh4LGQsbSxpKSx0KFwiLi9yZWR1Y2UuanNcIikoeCxnLGksbSxkLEMpLHQoXCIuL3NldHRsZS5qc1wiKSh4LGcsQyksdChcIi4vc29tZS5qc1wiKSh4LGcsaSksdChcIi4vdGltZXJzLmpzXCIpKHgsZCxDKSx0KFwiLi91c2luZy5qc1wiKSh4LGksbSx3LGQsQyksdChcIi4vYW55LmpzXCIpKHgpLHQoXCIuL2VhY2guanNcIikoeCxkKSx0KFwiLi9maWx0ZXIuanNcIikoeCxkKSxjLnRvRmFzdFByb3BlcnRpZXMoeCksYy50b0Zhc3RQcm9wZXJ0aWVzKHgucHJvdG90eXBlKSxSKHthOjF9KSxSKHtiOjJ9KSxSKHtjOjN9KSxSKDEpLFIoZnVuY3Rpb24oKXt9KSxSKHZvaWQgMCksUighMSksUihuZXcgeChkKSksQy5zZXRCb3VuZHModS5maXJzdExpbmVFcnJvcixjLmxhc3RMaW5lRXJyb3IpLHh9fSx7XCIuL2FueS5qc1wiOjEsXCIuL2FzeW5jXCI6MixcIi4vYmluZFwiOjMsXCIuL2NhbGxfZ2V0LmpzXCI6NSxcIi4vY2FuY2VsXCI6NixcIi4vY2F0Y2hfZmlsdGVyXCI6NyxcIi4vY29udGV4dFwiOjgsXCIuL2RlYnVnZ2FiaWxpdHlcIjo5LFwiLi9kaXJlY3RfcmVzb2x2ZVwiOjEwLFwiLi9lYWNoLmpzXCI6MTEsXCIuL2Vycm9yc1wiOjEyLFwiLi9lczVcIjoxMyxcIi4vZmlsdGVyLmpzXCI6MTQsXCIuL2ZpbmFsbHlcIjoxNSxcIi4vZ2VuZXJhdG9ycy5qc1wiOjE2LFwiLi9qb2luXCI6MTcsXCIuL21hcC5qc1wiOjE4LFwiLi9tZXRob2RcIjoxOSxcIi4vbm9kZWJhY2tcIjoyMCxcIi4vbm9kZWlmeS5qc1wiOjIxLFwiLi9wcm9taXNlX2FycmF5XCI6MjMsXCIuL3Byb21pc2lmeS5qc1wiOjI0LFwiLi9wcm9wcy5qc1wiOjI1LFwiLi9yYWNlLmpzXCI6MjcsXCIuL3JlZHVjZS5qc1wiOjI4LFwiLi9zZXR0bGUuanNcIjozMCxcIi4vc29tZS5qc1wiOjMxLFwiLi9zeW5jaHJvbm91c19pbnNwZWN0aW9uXCI6MzIsXCIuL3RoZW5hYmxlc1wiOjMzLFwiLi90aW1lcnMuanNcIjozNCxcIi4vdXNpbmcuanNcIjozNSxcIi4vdXRpbFwiOjM2fV0sMjM6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSxvKXt2YXIgcz10KFwiLi91dGlsXCIpO2Z1bmN0aW9uIGEodCl7dmFyIHI9dGhpcy5fcHJvbWlzZT1uZXcgZShuKTt0IGluc3RhbmNlb2YgZSYmci5fcHJvcGFnYXRlRnJvbSh0LDMpLHIuX3NldE9uQ2FuY2VsKHRoaXMpLHRoaXMuX3ZhbHVlcz10LHRoaXMuX2xlbmd0aD0wLHRoaXMuX3RvdGFsUmVzb2x2ZWQ9MCx0aGlzLl9pbml0KHZvaWQgMCwtMil9cmV0dXJuIHMuaXNBcnJheSxzLmluaGVyaXRzKGEsbyksYS5wcm90b3R5cGUubGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xlbmd0aH0sYS5wcm90b3R5cGUucHJvbWlzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9taXNlfSxhLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbiB0KG4sbyl7dmFyIGE9cih0aGlzLl92YWx1ZXMsdGhpcy5fcHJvbWlzZSk7aWYoYSBpbnN0YW5jZW9mIGUpe3ZhciBjPShhPWEuX3RhcmdldCgpKS5fYml0RmllbGQ7aWYodGhpcy5fdmFsdWVzPWEsMD09KDUwMzk3MTg0JmMpKXJldHVybiB0aGlzLl9wcm9taXNlLl9zZXRBc3luY0d1YXJhbnRlZWQoKSxhLl90aGVuKHQsdGhpcy5fcmVqZWN0LHZvaWQgMCx0aGlzLG8pO2lmKDA9PSgzMzU1NDQzMiZjKSlyZXR1cm4gMCE9KDE2Nzc3MjE2JmMpP3RoaXMuX3JlamVjdChhLl9yZWFzb24oKSk6dGhpcy5fY2FuY2VsKCk7YT1hLl92YWx1ZSgpfWlmKG51bGwhPT0oYT1zLmFzQXJyYXkoYSkpKTAhPT1hLmxlbmd0aD90aGlzLl9pdGVyYXRlKGEpOi01PT09bz90aGlzLl9yZXNvbHZlRW1wdHlBcnJheSgpOnRoaXMuX3Jlc29sdmUoZnVuY3Rpb24odCl7c3dpdGNoKG8pe2Nhc2UtMjpyZXR1cm5bXTtjYXNlLTM6cmV0dXJue307Y2FzZS02OnJldHVybiBuZXcgTWFwfX0oKSk7ZWxzZXt2YXIgbD1pKFwiZXhwZWN0aW5nIGFuIGFycmF5IG9yIGFuIGl0ZXJhYmxlIG9iamVjdCBidXQgZ290IFwiK3MuY2xhc3NTdHJpbmcoYSkpLnJlYXNvbigpO3RoaXMuX3Byb21pc2UuX3JlamVjdENhbGxiYWNrKGwsITEpfX0sYS5wcm90b3R5cGUuX2l0ZXJhdGU9ZnVuY3Rpb24odCl7dmFyIG49dGhpcy5nZXRBY3R1YWxMZW5ndGgodC5sZW5ndGgpO3RoaXMuX2xlbmd0aD1uLHRoaXMuX3ZhbHVlcz10aGlzLnNob3VsZENvcHlWYWx1ZXMoKT9uZXcgQXJyYXkobik6dGhpcy5fdmFsdWVzO2Zvcih2YXIgaT10aGlzLl9wcm9taXNlLG89ITEscz1udWxsLGE9MDthPG47KythKXt2YXIgYz1yKHRbYV0saSk7cz1jIGluc3RhbmNlb2YgZT8oYz1jLl90YXJnZXQoKSkuX2JpdEZpZWxkOm51bGwsbz9udWxsIT09cyYmYy5zdXBwcmVzc1VuaGFuZGxlZFJlamVjdGlvbnMoKTpudWxsIT09cz8wPT0oNTAzOTcxODQmcyk/KGMuX3Byb3h5KHRoaXMsYSksdGhpcy5fdmFsdWVzW2FdPWMpOm89MCE9KDMzNTU0NDMyJnMpP3RoaXMuX3Byb21pc2VGdWxmaWxsZWQoYy5fdmFsdWUoKSxhKTowIT0oMTY3NzcyMTYmcyk/dGhpcy5fcHJvbWlzZVJlamVjdGVkKGMuX3JlYXNvbigpLGEpOnRoaXMuX3Byb21pc2VDYW5jZWxsZWQoYSk6bz10aGlzLl9wcm9taXNlRnVsZmlsbGVkKGMsYSl9b3x8aS5fc2V0QXN5bmNHdWFyYW50ZWVkKCl9LGEucHJvdG90eXBlLl9pc1Jlc29sdmVkPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLl92YWx1ZXN9LGEucHJvdG90eXBlLl9yZXNvbHZlPWZ1bmN0aW9uKHQpe3RoaXMuX3ZhbHVlcz1udWxsLHRoaXMuX3Byb21pc2UuX2Z1bGZpbGwodCl9LGEucHJvdG90eXBlLl9jYW5jZWw9ZnVuY3Rpb24oKXshdGhpcy5faXNSZXNvbHZlZCgpJiZ0aGlzLl9wcm9taXNlLl9pc0NhbmNlbGxhYmxlKCkmJih0aGlzLl92YWx1ZXM9bnVsbCx0aGlzLl9wcm9taXNlLl9jYW5jZWwoKSl9LGEucHJvdG90eXBlLl9yZWplY3Q9ZnVuY3Rpb24odCl7dGhpcy5fdmFsdWVzPW51bGwsdGhpcy5fcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2sodCwhMSl9LGEucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX3ZhbHVlc1tlXT10LCsrdGhpcy5fdG90YWxSZXNvbHZlZD49dGhpcy5fbGVuZ3RoJiYodGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpLCEwKX0sYS5wcm90b3R5cGUuX3Byb21pc2VDYW5jZWxsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2FuY2VsKCksITB9LGEucHJvdG90eXBlLl9wcm9taXNlUmVqZWN0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX3RvdGFsUmVzb2x2ZWQrKyx0aGlzLl9yZWplY3QodCksITB9LGEucHJvdG90eXBlLl9yZXN1bHRDYW5jZWxsZWQ9ZnVuY3Rpb24oKXtpZighdGhpcy5faXNSZXNvbHZlZCgpKXt2YXIgdD10aGlzLl92YWx1ZXM7aWYodGhpcy5fY2FuY2VsKCksdCBpbnN0YW5jZW9mIGUpdC5jYW5jZWwoKTtlbHNlIGZvcih2YXIgbj0wO248dC5sZW5ndGg7KytuKXRbbl1pbnN0YW5jZW9mIGUmJnRbbl0uY2FuY2VsKCl9fSxhLnByb3RvdHlwZS5zaG91bGRDb3B5VmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuITB9LGEucHJvdG90eXBlLmdldEFjdHVhbExlbmd0aD1mdW5jdGlvbih0KXtyZXR1cm4gdH0sYX19LHtcIi4vdXRpbFwiOjM2fV0sMjQ6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuKXt2YXIgcj17fSxpPXQoXCIuL3V0aWxcIiksbz10KFwiLi9ub2RlYmFja1wiKSxzPWkud2l0aEFwcGVuZGVkLGE9aS5tYXliZVdyYXBBc0Vycm9yLGM9aS5jYW5FdmFsdWF0ZSxsPXQoXCIuL2Vycm9yc1wiKS5UeXBlRXJyb3IsdT17X19pc1Byb21pc2lmaWVkX186ITB9LHA9bmV3IFJlZ0V4cChcIl4oPzpcIitbXCJhcml0eVwiLFwibGVuZ3RoXCIsXCJuYW1lXCIsXCJhcmd1bWVudHNcIixcImNhbGxlclwiLFwiY2FsbGVlXCIsXCJwcm90b3R5cGVcIixcIl9faXNQcm9taXNpZmllZF9fXCJdLmpvaW4oXCJ8XCIpK1wiKSRcIiksaD1mdW5jdGlvbih0KXtyZXR1cm4gaS5pc0lkZW50aWZpZXIodCkmJlwiX1wiIT09dC5jaGFyQXQoMCkmJlwiY29uc3RydWN0b3JcIiE9PXR9O2Z1bmN0aW9uIGYodCl7cmV0dXJuIXAudGVzdCh0KX1mdW5jdGlvbiBfKHQpe3RyeXtyZXR1cm4hMD09PXQuX19pc1Byb21pc2lmaWVkX199Y2F0Y2godCl7cmV0dXJuITF9fWZ1bmN0aW9uIGQodCxlLG4pe3ZhciByPWkuZ2V0RGF0YVByb3BlcnR5T3JEZWZhdWx0KHQsZStuLHUpO3JldHVybiEhciYmXyhyKX12YXIgdj1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC8oWyRdKS8sXCJcXFxcJFwiKX0seT1jP3ZvaWQgMDpmdW5jdGlvbih0LGMsbCx1LHAsaCl7dmFyIGY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKSxfPXQ7ZnVuY3Rpb24gZCgpe3ZhciBpPWM7Yz09PXImJihpPXRoaXMpO3ZhciBsPW5ldyBlKG4pO2wuX2NhcHR1cmVTdGFja1RyYWNlKCk7dmFyIHU9XCJzdHJpbmdcIj09dHlwZW9mIF8mJnRoaXMhPT1mP3RoaXNbX106dCxwPW8obCxoKTt0cnl7dS5hcHBseShpLHMoYXJndW1lbnRzLHApKX1jYXRjaCh0KXtsLl9yZWplY3RDYWxsYmFjayhhKHQpLCEwLCEwKX1yZXR1cm4gbC5faXNGYXRlU2VhbGVkKCl8fGwuX3NldEFzeW5jR3VhcmFudGVlZCgpLGx9cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIF8mJih0PXUpLGkubm90RW51bWVyYWJsZVByb3AoZCxcIl9faXNQcm9taXNpZmllZF9fXCIsITApLGR9O2Z1bmN0aW9uIG0odCxlLG4sbyxzKXtmb3IodmFyIGE9bmV3IFJlZ0V4cCh2KGUpK1wiJFwiKSxjPWZ1bmN0aW9uKHQsZSxuLHIpe2Zvcih2YXIgbz1pLmluaGVyaXRlZERhdGFLZXlzKHQpLHM9W10sYT0wO2E8by5sZW5ndGg7KythKXt2YXIgYz1vW2FdLHU9dFtjXSxwPXI9PT1ofHxoKGMsdSx0KTtcImZ1bmN0aW9uXCIhPXR5cGVvZiB1fHxfKHUpfHxkKHQsYyxlKXx8IXIoYyx1LHQscCl8fHMucHVzaChjLHUpfXJldHVybiBmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKz0yKXt2YXIgaT10W3JdO2lmKG4udGVzdChpKSlmb3IodmFyIG89aS5yZXBsYWNlKG4sXCJcIikscz0wO3M8dC5sZW5ndGg7cys9MilpZih0W3NdPT09byl0aHJvdyBuZXcgbChcIkNhbm5vdCBwcm9taXNpZnkgYW4gQVBJIHRoYXQgaGFzIG5vcm1hbCBtZXRob2RzIHdpdGggJyVzJy1zdWZmaXhcXG5cXG4gICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFxuXCIucmVwbGFjZShcIiVzXCIsZSkpfX0ocyxlLG4pLHN9KHQsZSxhLG4pLHU9MCxwPWMubGVuZ3RoO3U8cDt1Kz0yKXt2YXIgZj1jW3VdLG09Y1t1KzFdLGc9ZitlO2lmKG89PT15KXRbZ109eShmLHIsZixtLGUscyk7ZWxzZXt2YXIgYj1vKG0sZnVuY3Rpb24oKXtyZXR1cm4geShmLHIsZixtLGUscyl9KTtpLm5vdEVudW1lcmFibGVQcm9wKGIsXCJfX2lzUHJvbWlzaWZpZWRfX1wiLCEwKSx0W2ddPWJ9fXJldHVybiBpLnRvRmFzdFByb3BlcnRpZXModCksdH1lLnByb21pc2lmeT1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IGwoXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiK2kuY2xhc3NTdHJpbmcodCkpO2lmKF8odCkpcmV0dXJuIHQ7dmFyIG4sbyxzLGE9KG49dCxvPXZvaWQgMD09PShlPU9iamVjdChlKSkuY29udGV4dD9yOmUuY29udGV4dCxzPSEhZS5tdWx0aUFyZ3MseShuLG8sdm9pZCAwLG4sbnVsbCxzKSk7cmV0dXJuIGkuY29weURlc2NyaXB0b3JzKHQsYSxmKSxhfSxlLnByb21pc2lmeUFsbD1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJlwib2JqZWN0XCIhPXR5cGVvZiB0KXRocm93IG5ldyBsKFwidGhlIHRhcmdldCBvZiBwcm9taXNpZnlBbGwgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvblxcblxcbiAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXG5cIik7dmFyIG49ISEoZT1PYmplY3QoZSkpLm11bHRpQXJncyxyPWUuc3VmZml4O1wic3RyaW5nXCIhPXR5cGVvZiByJiYocj1cIkFzeW5jXCIpO3ZhciBvPWUuZmlsdGVyO1wiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJihvPWgpO3ZhciBzPWUucHJvbWlzaWZpZXI7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgcyYmKHM9eSksIWkuaXNJZGVudGlmaWVyKHIpKXRocm93IG5ldyBSYW5nZUVycm9yKFwic3VmZml4IG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXFxuXFxuICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcblwiKTtmb3IodmFyIGE9aS5pbmhlcml0ZWREYXRhS2V5cyh0KSxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciB1PXRbYVtjXV07XCJjb25zdHJ1Y3RvclwiIT09YVtjXSYmaS5pc0NsYXNzKHUpJiYobSh1LnByb3RvdHlwZSxyLG8scyxuKSxtKHUscixvLHMsbikpfXJldHVybiBtKHQscixvLHMsbil9fX0se1wiLi9lcnJvcnNcIjoxMixcIi4vbm9kZWJhY2tcIjoyMCxcIi4vdXRpbFwiOjM2fV0sMjU6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSl7dmFyIG8scz10KFwiLi91dGlsXCIpLGE9cy5pc09iamVjdCxjPXQoXCIuL2VzNVwiKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXAmJihvPU1hcCk7dmFyIGw9ZnVuY3Rpb24oKXt2YXIgdD0wLGU9MDtmdW5jdGlvbiBuKG4scil7dGhpc1t0XT1uLHRoaXNbdCtlXT1yLHQrK31yZXR1cm4gZnVuY3Rpb24ocil7ZT1yLnNpemUsdD0wO3ZhciBpPW5ldyBBcnJheSgyKnIuc2l6ZSk7cmV0dXJuIHIuZm9yRWFjaChuLGkpLGl9fSgpO2Z1bmN0aW9uIHUodCl7dmFyIGUsbj0hMTtpZih2b2lkIDAhPT1vJiZ0IGluc3RhbmNlb2YgbyllPWwodCksbj0hMDtlbHNle3ZhciByPWMua2V5cyh0KSxpPXIubGVuZ3RoO2U9bmV3IEFycmF5KDIqaSk7Zm9yKHZhciBzPTA7czxpOysrcyl7dmFyIGE9cltzXTtlW3NdPXRbYV0sZVtzK2ldPWF9fXRoaXMuY29uc3RydWN0b3IkKGUpLHRoaXMuX2lzTWFwPW4sdGhpcy5faW5pdCQodm9pZCAwLG4/LTY6LTMpfWZ1bmN0aW9uIHAodCl7dmFyIG4sbz1yKHQpO3JldHVybiBhKG8pPyhuPW8gaW5zdGFuY2VvZiBlP28uX3RoZW4oZS5wcm9wcyx2b2lkIDAsdm9pZCAwLHZvaWQgMCx2b2lkIDApOm5ldyB1KG8pLnByb21pc2UoKSxvIGluc3RhbmNlb2YgZSYmbi5fcHJvcGFnYXRlRnJvbShvLDIpLG4pOmkoXCJjYW5ub3QgYXdhaXQgcHJvcGVydGllcyBvZiBhIG5vbi1vYmplY3RcXG5cXG4gICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFxuXCIpfXMuaW5oZXJpdHModSxuKSx1LnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbigpe30sdS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQ9ZnVuY3Rpb24odCxlKXtpZih0aGlzLl92YWx1ZXNbZV09dCwrK3RoaXMuX3RvdGFsUmVzb2x2ZWQ+PXRoaXMuX2xlbmd0aCl7dmFyIG47aWYodGhpcy5faXNNYXApbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IG8sbj10Lmxlbmd0aC8yfDAscj0wO3I8bjsrK3Ipe3ZhciBpPXRbbityXSxzPXRbcl07ZS5zZXQoaSxzKX1yZXR1cm4gZX0odGhpcy5fdmFsdWVzKTtlbHNle249e307Zm9yKHZhciByPXRoaXMubGVuZ3RoKCksaT0wLHM9dGhpcy5sZW5ndGgoKTtpPHM7KytpKW5bdGhpcy5fdmFsdWVzW2krcl1dPXRoaXMuX3ZhbHVlc1tpXX1yZXR1cm4gdGhpcy5fcmVzb2x2ZShuKSwhMH1yZXR1cm4hMX0sdS5wcm90b3R5cGUuc2hvdWxkQ29weVZhbHVlcz1mdW5jdGlvbigpe3JldHVybiExfSx1LnByb3RvdHlwZS5nZXRBY3R1YWxMZW5ndGg9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+PjF9LGUucHJvdG90eXBlLnByb3BzPWZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpcyl9LGUucHJvcHM9ZnVuY3Rpb24odCl7cmV0dXJuIHAodCl9fX0se1wiLi9lczVcIjoxMyxcIi4vdXRpbFwiOjM2fV0sMjY6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQpe3RoaXMuX2NhcGFjaXR5PXQsdGhpcy5fbGVuZ3RoPTAsdGhpcy5fZnJvbnQ9MH1yLnByb3RvdHlwZS5fd2lsbEJlT3ZlckNhcGFjaXR5PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9jYXBhY2l0eTx0fSxyLnByb3RvdHlwZS5fcHVzaE9uZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmxlbmd0aCgpO3RoaXMuX2NoZWNrQ2FwYWNpdHkoZSsxKSx0aGlzW3RoaXMuX2Zyb250K2UmdGhpcy5fY2FwYWNpdHktMV09dCx0aGlzLl9sZW5ndGg9ZSsxfSxyLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLmxlbmd0aCgpKzM7aWYodGhpcy5fd2lsbEJlT3ZlckNhcGFjaXR5KHIpKXJldHVybiB0aGlzLl9wdXNoT25lKHQpLHRoaXMuX3B1c2hPbmUoZSksdm9pZCB0aGlzLl9wdXNoT25lKG4pO3ZhciBpPXRoaXMuX2Zyb250K3ItMzt0aGlzLl9jaGVja0NhcGFjaXR5KHIpO3ZhciBvPXRoaXMuX2NhcGFjaXR5LTE7dGhpc1tpKzAmb109dCx0aGlzW2krMSZvXT1lLHRoaXNbaSsyJm9dPW4sdGhpcy5fbGVuZ3RoPXJ9LHIucHJvdG90eXBlLnNoaWZ0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZnJvbnQsZT10aGlzW3RdO3JldHVybiB0aGlzW3RdPXZvaWQgMCx0aGlzLl9mcm9udD10KzEmdGhpcy5fY2FwYWNpdHktMSx0aGlzLl9sZW5ndGgtLSxlfSxyLnByb3RvdHlwZS5sZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGVuZ3RofSxyLnByb3RvdHlwZS5fY2hlY2tDYXBhY2l0eT1mdW5jdGlvbih0KXt0aGlzLl9jYXBhY2l0eTx0JiZ0aGlzLl9yZXNpemVUbyh0aGlzLl9jYXBhY2l0eTw8MSl9LHIucHJvdG90eXBlLl9yZXNpemVUbz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9jYXBhY2l0eTt0aGlzLl9jYXBhY2l0eT10LGZ1bmN0aW9uKHQsZSxuLHIsaSl7Zm9yKHZhciBvPTA7bzxpOysrbyluW28rcl09dFtvKzBdLHRbbyswXT12b2lkIDB9KHRoaXMsMCx0aGlzLGUsdGhpcy5fZnJvbnQrdGhpcy5fbGVuZ3RoJmUtMSl9LGUuZXhwb3J0cz1yfSx7fV0sMjc6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSl7dmFyIG89dChcIi4vdXRpbFwiKSxzPWZ1bmN0aW9uKHQpe3JldHVybiB0LnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSx0KX0pfTtmdW5jdGlvbiBhKHQsYSl7dmFyIGM9cih0KTtpZihjIGluc3RhbmNlb2YgZSlyZXR1cm4gcyhjKTtpZihudWxsPT09KHQ9by5hc0FycmF5KHQpKSlyZXR1cm4gaShcImV4cGVjdGluZyBhbiBhcnJheSBvciBhbiBpdGVyYWJsZSBvYmplY3QgYnV0IGdvdCBcIitvLmNsYXNzU3RyaW5nKHQpKTt2YXIgbD1uZXcgZShuKTt2b2lkIDAhPT1hJiZsLl9wcm9wYWdhdGVGcm9tKGEsMyk7Zm9yKHZhciB1PWwuX2Z1bGZpbGwscD1sLl9yZWplY3QsaD0wLGY9dC5sZW5ndGg7aDxmOysraCl7dmFyIF89dFtoXTsodm9pZCAwIT09X3x8aCBpbiB0KSYmZS5jYXN0KF8pLl90aGVuKHUscCx2b2lkIDAsbCxudWxsKX1yZXR1cm4gbH1lLnJhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIGEodCx2b2lkIDApfSxlLnByb3RvdHlwZS5yYWNlPWZ1bmN0aW9uKCl7cmV0dXJuIGEodGhpcyx2b2lkIDApfX19LHtcIi4vdXRpbFwiOjM2fV0sMjg6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIsaSxvLHMpe3ZhciBhPWUuX2dldERvbWFpbixjPXQoXCIuL3V0aWxcIiksbD1jLnRyeUNhdGNoO2Z1bmN0aW9uIHUodCxuLHIsaSl7dGhpcy5jb25zdHJ1Y3RvciQodCk7dmFyIHM9YSgpO3RoaXMuX2ZuPW51bGw9PT1zP246Yy5kb21haW5CaW5kKHMsbiksdm9pZCAwIT09ciYmKHI9ZS5yZXNvbHZlKHIpKS5fYXR0YWNoQ2FuY2VsbGF0aW9uQ2FsbGJhY2sodGhpcyksdGhpcy5faW5pdGlhbFZhbHVlPXIsdGhpcy5fY3VycmVudENhbmNlbGxhYmxlPW51bGwsdGhpcy5fZWFjaFZhbHVlcz1pPT09bz9BcnJheSh0aGlzLl9sZW5ndGgpOjA9PT1pP251bGw6dm9pZCAwLHRoaXMuX3Byb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCksdGhpcy5faW5pdCQodm9pZCAwLC01KX1mdW5jdGlvbiBwKHQsZSl7dGhpcy5pc0Z1bGZpbGxlZCgpP2UuX3Jlc29sdmUodCk6ZS5fcmVqZWN0KHQpfWZ1bmN0aW9uIGgodCxlLG4saSl7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgZT9yKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIitjLmNsYXNzU3RyaW5nKGUpKTpuZXcgdSh0LGUsbixpKS5wcm9taXNlKCl9ZnVuY3Rpb24gZih0KXt0aGlzLmFjY3VtPXQsdGhpcy5hcnJheS5fZ290QWNjdW0odCk7dmFyIG49aSh0aGlzLnZhbHVlLHRoaXMuYXJyYXkuX3Byb21pc2UpO3JldHVybiBuIGluc3RhbmNlb2YgZT8odGhpcy5hcnJheS5fY3VycmVudENhbmNlbGxhYmxlPW4sbi5fdGhlbihfLHZvaWQgMCx2b2lkIDAsdGhpcyx2b2lkIDApKTpfLmNhbGwodGhpcyxuKX1mdW5jdGlvbiBfKHQpe3ZhciBuLHI9dGhpcy5hcnJheSxpPXIuX3Byb21pc2Usbz1sKHIuX2ZuKTtpLl9wdXNoQ29udGV4dCgpLChuPXZvaWQgMCE9PXIuX2VhY2hWYWx1ZXM/by5jYWxsKGkuX2JvdW5kVmFsdWUoKSx0LHRoaXMuaW5kZXgsdGhpcy5sZW5ndGgpOm8uY2FsbChpLl9ib3VuZFZhbHVlKCksdGhpcy5hY2N1bSx0LHRoaXMuaW5kZXgsdGhpcy5sZW5ndGgpKWluc3RhbmNlb2YgZSYmKHIuX2N1cnJlbnRDYW5jZWxsYWJsZT1uKTt2YXIgYT1pLl9wb3BDb250ZXh0KCk7cmV0dXJuIHMuY2hlY2tGb3Jnb3R0ZW5SZXR1cm5zKG4sYSx2b2lkIDAhPT1yLl9lYWNoVmFsdWVzP1wiUHJvbWlzZS5lYWNoXCI6XCJQcm9taXNlLnJlZHVjZVwiLGkpLG59Yy5pbmhlcml0cyh1LG4pLHUucHJvdG90eXBlLl9nb3RBY2N1bT1mdW5jdGlvbih0KXt2b2lkIDAhPT10aGlzLl9lYWNoVmFsdWVzJiZudWxsIT09dGhpcy5fZWFjaFZhbHVlcyYmdCE9PW8mJnRoaXMuX2VhY2hWYWx1ZXMucHVzaCh0KX0sdS5wcm90b3R5cGUuX2VhY2hDb21wbGV0ZT1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXRoaXMuX2VhY2hWYWx1ZXMmJnRoaXMuX2VhY2hWYWx1ZXMucHVzaCh0KSx0aGlzLl9lYWNoVmFsdWVzfSx1LnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbigpe30sdS5wcm90b3R5cGUuX3Jlc29sdmVFbXB0eUFycmF5PWZ1bmN0aW9uKCl7dGhpcy5fcmVzb2x2ZSh2b2lkIDAhPT10aGlzLl9lYWNoVmFsdWVzP3RoaXMuX2VhY2hWYWx1ZXM6dGhpcy5faW5pdGlhbFZhbHVlKX0sdS5wcm90b3R5cGUuc2hvdWxkQ29weVZhbHVlcz1mdW5jdGlvbigpe3JldHVybiExfSx1LnByb3RvdHlwZS5fcmVzb2x2ZT1mdW5jdGlvbih0KXt0aGlzLl9wcm9taXNlLl9yZXNvbHZlQ2FsbGJhY2sodCksdGhpcy5fdmFsdWVzPW51bGx9LHUucHJvdG90eXBlLl9yZXN1bHRDYW5jZWxsZWQ9ZnVuY3Rpb24odCl7aWYodD09PXRoaXMuX2luaXRpYWxWYWx1ZSlyZXR1cm4gdGhpcy5fY2FuY2VsKCk7dGhpcy5faXNSZXNvbHZlZCgpfHwodGhpcy5fcmVzdWx0Q2FuY2VsbGVkJCgpLHRoaXMuX2N1cnJlbnRDYW5jZWxsYWJsZSBpbnN0YW5jZW9mIGUmJnRoaXMuX2N1cnJlbnRDYW5jZWxsYWJsZS5jYW5jZWwoKSx0aGlzLl9pbml0aWFsVmFsdWUgaW5zdGFuY2VvZiBlJiZ0aGlzLl9pbml0aWFsVmFsdWUuY2FuY2VsKCkpfSx1LnByb3RvdHlwZS5faXRlcmF0ZT1mdW5jdGlvbih0KXt2YXIgbixyO3RoaXMuX3ZhbHVlcz10O3ZhciBpPXQubGVuZ3RoO2lmKHZvaWQgMCE9PXRoaXMuX2luaXRpYWxWYWx1ZT8obj10aGlzLl9pbml0aWFsVmFsdWUscj0wKToobj1lLnJlc29sdmUodFswXSkscj0xKSx0aGlzLl9jdXJyZW50Q2FuY2VsbGFibGU9biwhbi5pc1JlamVjdGVkKCkpZm9yKDtyPGk7KytyKXt2YXIgbz17YWNjdW06bnVsbCx2YWx1ZTp0W3JdLGluZGV4OnIsbGVuZ3RoOmksYXJyYXk6dGhpc307bj1uLl90aGVuKGYsdm9pZCAwLHZvaWQgMCxvLHZvaWQgMCl9dm9pZCAwIT09dGhpcy5fZWFjaFZhbHVlcyYmKG49bi5fdGhlbih0aGlzLl9lYWNoQ29tcGxldGUsdm9pZCAwLHZvaWQgMCx0aGlzLHZvaWQgMCkpLG4uX3RoZW4ocCxwLHZvaWQgMCxuLHRoaXMpfSxlLnByb3RvdHlwZS5yZWR1Y2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gaCh0aGlzLHQsZSxudWxsKX0sZS5yZWR1Y2U9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIGgodCxlLG4scil9fX0se1wiLi91dGlsXCI6MzZ9XSwyOTpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciByLGksbyxzLGEsYz10KFwiLi91dGlsXCIpLGw9Yy5nZXROYXRpdmVQcm9taXNlKCk7aWYoYy5pc05vZGUmJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBNdXRhdGlvbk9ic2VydmVyKXt2YXIgdT1nbG9iYWwuc2V0SW1tZWRpYXRlLHA9cHJvY2Vzcy5uZXh0VGljaztyPWMuaXNSZWNlbnROb2RlP2Z1bmN0aW9uKHQpe3UuY2FsbChnbG9iYWwsdCl9OmZ1bmN0aW9uKHQpe3AuY2FsbChwcm9jZXNzLHQpfX1lbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGwucmVzb2x2ZSl7dmFyIGg9bC5yZXNvbHZlKCk7cj1mdW5jdGlvbih0KXtoLnRoZW4odCl9fWVsc2Ugcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgTXV0YXRpb25PYnNlcnZlciYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cubmF2aWdhdG9yfHwhd2luZG93Lm5hdmlnYXRvci5zdGFuZGFsb25lJiYhd2luZG93LmNvcmRvdmEpJiZcImNsYXNzTGlzdFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50PyhpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbz17YXR0cmlidXRlczohMH0scz0hMSxhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKXtpLmNsYXNzTGlzdC50b2dnbGUoXCJmb29cIikscz0hMX0pLm9ic2VydmUoYSxvKSxmdW5jdGlvbih0KXt2YXIgZT1uZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbigpe2UuZGlzY29ubmVjdCgpLHQoKX0pO2Uub2JzZXJ2ZShpLG8pLHN8fChzPSEwLGEuY2xhc3NMaXN0LnRvZ2dsZShcImZvb1wiKSl9KTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlP2Z1bmN0aW9uKHQpe3NldEltbWVkaWF0ZSh0KX06XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNldFRpbWVvdXQ/ZnVuY3Rpb24odCl7c2V0VGltZW91dCh0LDApfTpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk5vIGFzeW5jIHNjaGVkdWxlciBhdmFpbGFibGVcXG5cXG4gICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFxuXCIpfTtlLmV4cG9ydHM9cn0se1wiLi91dGlsXCI6MzZ9XSwzMDpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlLG4scil7dmFyIGk9ZS5Qcm9taXNlSW5zcGVjdGlvbjtmdW5jdGlvbiBvKHQpe3RoaXMuY29uc3RydWN0b3IkKHQpfXQoXCIuL3V0aWxcIikuaW5oZXJpdHMobyxuKSxvLnByb3RvdHlwZS5fcHJvbWlzZVJlc29sdmVkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX3ZhbHVlc1t0XT1lLCsrdGhpcy5fdG90YWxSZXNvbHZlZD49dGhpcy5fbGVuZ3RoJiYodGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpLCEwKX0sby5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgaTtyZXR1cm4gbi5fYml0RmllbGQ9MzM1NTQ0MzIsbi5fc2V0dGxlZFZhbHVlRmllbGQ9dCx0aGlzLl9wcm9taXNlUmVzb2x2ZWQoZSxuKX0sby5wcm90b3R5cGUuX3Byb21pc2VSZWplY3RlZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBpO3JldHVybiBuLl9iaXRGaWVsZD0xNjc3NzIxNixuLl9zZXR0bGVkVmFsdWVGaWVsZD10LHRoaXMuX3Byb21pc2VSZXNvbHZlZChlLG4pfSxlLnNldHRsZT1mdW5jdGlvbih0KXtyZXR1cm4gci5kZXByZWNhdGVkKFwiLnNldHRsZSgpXCIsXCIucmVmbGVjdCgpXCIpLG5ldyBvKHQpLnByb21pc2UoKX0sZS5wcm90b3R5cGUuc2V0dGxlPWZ1bmN0aW9uKCl7cmV0dXJuIGUuc2V0dGxlKHRoaXMpfX19LHtcIi4vdXRpbFwiOjM2fV0sMzE6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHIpe3ZhciBpPXQoXCIuL3V0aWxcIiksbz10KFwiLi9lcnJvcnNcIikuUmFuZ2VFcnJvcixzPXQoXCIuL2Vycm9yc1wiKS5BZ2dyZWdhdGVFcnJvcixhPWkuaXNBcnJheSxjPXt9O2Z1bmN0aW9uIGwodCl7dGhpcy5jb25zdHJ1Y3RvciQodCksdGhpcy5faG93TWFueT0wLHRoaXMuX3Vud3JhcD0hMSx0aGlzLl9pbml0aWFsaXplZD0hMX1mdW5jdGlvbiB1KHQsZSl7aWYoKDB8ZSkhPT1lfHxlPDApcmV0dXJuIHIoXCJleHBlY3RpbmcgYSBwb3NpdGl2ZSBpbnRlZ2VyXFxuXFxuICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcblwiKTt2YXIgbj1uZXcgbCh0KSxpPW4ucHJvbWlzZSgpO3JldHVybiBuLnNldEhvd01hbnkoZSksbi5pbml0KCksaX1pLmluaGVyaXRzKGwsbiksbC5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24oKXtpZih0aGlzLl9pbml0aWFsaXplZClpZigwIT09dGhpcy5faG93TWFueSl7dGhpcy5faW5pdCQodm9pZCAwLC01KTt2YXIgdD1hKHRoaXMuX3ZhbHVlcyk7IXRoaXMuX2lzUmVzb2x2ZWQoKSYmdCYmdGhpcy5faG93TWFueT50aGlzLl9jYW5Qb3NzaWJseUZ1bGZpbGwoKSYmdGhpcy5fcmVqZWN0KHRoaXMuX2dldFJhbmdlRXJyb3IodGhpcy5sZW5ndGgoKSkpfWVsc2UgdGhpcy5fcmVzb2x2ZShbXSl9LGwucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt0aGlzLl9pbml0aWFsaXplZD0hMCx0aGlzLl9pbml0KCl9LGwucHJvdG90eXBlLnNldFVud3JhcD1mdW5jdGlvbigpe3RoaXMuX3Vud3JhcD0hMH0sbC5wcm90b3R5cGUuaG93TWFueT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ob3dNYW55fSxsLnByb3RvdHlwZS5zZXRIb3dNYW55PWZ1bmN0aW9uKHQpe3RoaXMuX2hvd01hbnk9dH0sbC5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2FkZEZ1bGZpbGxlZCh0KSx0aGlzLl9mdWxmaWxsZWQoKT09PXRoaXMuaG93TWFueSgpJiYodGhpcy5fdmFsdWVzLmxlbmd0aD10aGlzLmhvd01hbnkoKSwxPT09dGhpcy5ob3dNYW55KCkmJnRoaXMuX3Vud3JhcD90aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlc1swXSk6dGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpLCEwKX0sbC5wcm90b3R5cGUuX3Byb21pc2VSZWplY3RlZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fYWRkUmVqZWN0ZWQodCksdGhpcy5fY2hlY2tPdXRjb21lKCl9LGwucHJvdG90eXBlLl9wcm9taXNlQ2FuY2VsbGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZhbHVlcyBpbnN0YW5jZW9mIGV8fG51bGw9PXRoaXMuX3ZhbHVlcz90aGlzLl9jYW5jZWwoKToodGhpcy5fYWRkUmVqZWN0ZWQoYyksdGhpcy5fY2hlY2tPdXRjb21lKCkpfSxsLnByb3RvdHlwZS5fY2hlY2tPdXRjb21lPWZ1bmN0aW9uKCl7aWYodGhpcy5ob3dNYW55KCk+dGhpcy5fY2FuUG9zc2libHlGdWxmaWxsKCkpe2Zvcih2YXIgdD1uZXcgcyxlPXRoaXMubGVuZ3RoKCk7ZTx0aGlzLl92YWx1ZXMubGVuZ3RoOysrZSl0aGlzLl92YWx1ZXNbZV0hPT1jJiZ0LnB1c2godGhpcy5fdmFsdWVzW2VdKTtyZXR1cm4gdC5sZW5ndGg+MD90aGlzLl9yZWplY3QodCk6dGhpcy5fY2FuY2VsKCksITB9cmV0dXJuITF9LGwucHJvdG90eXBlLl9mdWxmaWxsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdG90YWxSZXNvbHZlZH0sbC5wcm90b3R5cGUuX3JlamVjdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZhbHVlcy5sZW5ndGgtdGhpcy5sZW5ndGgoKX0sbC5wcm90b3R5cGUuX2FkZFJlamVjdGVkPWZ1bmN0aW9uKHQpe3RoaXMuX3ZhbHVlcy5wdXNoKHQpfSxsLnByb3RvdHlwZS5fYWRkRnVsZmlsbGVkPWZ1bmN0aW9uKHQpe3RoaXMuX3ZhbHVlc1t0aGlzLl90b3RhbFJlc29sdmVkKytdPXR9LGwucHJvdG90eXBlLl9jYW5Qb3NzaWJseUZ1bGZpbGw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGgoKS10aGlzLl9yZWplY3RlZCgpfSxsLnByb3RvdHlwZS5fZ2V0UmFuZ2VFcnJvcj1mdW5jdGlvbih0KXt2YXIgZT1cIklucHV0IGFycmF5IG11c3QgY29udGFpbiBhdCBsZWFzdCBcIit0aGlzLl9ob3dNYW55K1wiIGl0ZW1zIGJ1dCBjb250YWlucyBvbmx5IFwiK3QrXCIgaXRlbXNcIjtyZXR1cm4gbmV3IG8oZSl9LGwucHJvdG90eXBlLl9yZXNvbHZlRW1wdHlBcnJheT1mdW5jdGlvbigpe3RoaXMuX3JlamVjdCh0aGlzLl9nZXRSYW5nZUVycm9yKDApKX0sZS5zb21lPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHUodCxlKX0sZS5wcm90b3R5cGUuc29tZT1mdW5jdGlvbih0KXtyZXR1cm4gdSh0aGlzLHQpfSxlLl9Tb21lUHJvbWlzZUFycmF5PWx9fSx7XCIuL2Vycm9yc1wiOjEyLFwiLi91dGlsXCI6MzZ9XSwzMjpbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3ZvaWQgMCE9PXQ/KHQ9dC5fdGFyZ2V0KCksdGhpcy5fYml0RmllbGQ9dC5fYml0RmllbGQsdGhpcy5fc2V0dGxlZFZhbHVlRmllbGQ9dC5faXNGYXRlU2VhbGVkKCk/dC5fc2V0dGxlZFZhbHVlKCk6dm9pZCAwKToodGhpcy5fYml0RmllbGQ9MCx0aGlzLl9zZXR0bGVkVmFsdWVGaWVsZD12b2lkIDApfWUucHJvdG90eXBlLl9zZXR0bGVkVmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2V0dGxlZFZhbHVlRmllbGR9O3ZhciBuPWUucHJvdG90eXBlLnZhbHVlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNGdWxmaWxsZWQoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGdldCBmdWxmaWxsbWVudCB2YWx1ZSBvZiBhIG5vbi1mdWxmaWxsZWQgcHJvbWlzZVxcblxcbiAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXG5cIik7cmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZSgpfSxyPWUucHJvdG90eXBlLmVycm9yPWUucHJvdG90eXBlLnJlYXNvbj1mdW5jdGlvbigpe2lmKCF0aGlzLmlzUmVqZWN0ZWQoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGdldCByZWplY3Rpb24gcmVhc29uIG9mIGEgbm9uLXJlamVjdGVkIHByb21pc2VcXG5cXG4gICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFxuXCIpO3JldHVybiB0aGlzLl9zZXR0bGVkVmFsdWUoKX0saT1lLnByb3RvdHlwZS5pc0Z1bGZpbGxlZD1mdW5jdGlvbigpe3JldHVybiAwIT0oMzM1NTQ0MzImdGhpcy5fYml0RmllbGQpfSxvPWUucHJvdG90eXBlLmlzUmVqZWN0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gMCE9KDE2Nzc3MjE2JnRoaXMuX2JpdEZpZWxkKX0scz1lLnByb3RvdHlwZS5pc1BlbmRpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gMD09KDUwMzk3MTg0JnRoaXMuX2JpdEZpZWxkKX0sYT1lLnByb3RvdHlwZS5pc1Jlc29sdmVkPWZ1bmN0aW9uKCl7cmV0dXJuIDAhPSg1MDMzMTY0OCZ0aGlzLl9iaXRGaWVsZCl9O2UucHJvdG90eXBlLmlzQ2FuY2VsbGVkPWZ1bmN0aW9uKCl7cmV0dXJuIDAhPSg4NDU0MTQ0JnRoaXMuX2JpdEZpZWxkKX0sdC5wcm90b3R5cGUuX19pc0NhbmNlbGxlZD1mdW5jdGlvbigpe3JldHVybiA2NTUzNj09KDY1NTM2JnRoaXMuX2JpdEZpZWxkKX0sdC5wcm90b3R5cGUuX2lzQ2FuY2VsbGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhcmdldCgpLl9faXNDYW5jZWxsZWQoKX0sdC5wcm90b3R5cGUuaXNDYW5jZWxsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gMCE9KDg0NTQxNDQmdGhpcy5fdGFyZ2V0KCkuX2JpdEZpZWxkKX0sdC5wcm90b3R5cGUuaXNQZW5kaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHMuY2FsbCh0aGlzLl90YXJnZXQoKSl9LHQucHJvdG90eXBlLmlzUmVqZWN0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5jYWxsKHRoaXMuX3RhcmdldCgpKX0sdC5wcm90b3R5cGUuaXNGdWxmaWxsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gaS5jYWxsKHRoaXMuX3RhcmdldCgpKX0sdC5wcm90b3R5cGUuaXNSZXNvbHZlZD1mdW5jdGlvbigpe3JldHVybiBhLmNhbGwodGhpcy5fdGFyZ2V0KCkpfSx0LnByb3RvdHlwZS52YWx1ZT1mdW5jdGlvbigpe3JldHVybiBuLmNhbGwodGhpcy5fdGFyZ2V0KCkpfSx0LnByb3RvdHlwZS5yZWFzb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl90YXJnZXQoKTtyZXR1cm4gdC5fdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpLHIuY2FsbCh0KX0sdC5wcm90b3R5cGUuX3ZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZSgpfSx0LnByb3RvdHlwZS5fcmVhc29uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKSx0aGlzLl9zZXR0bGVkVmFsdWUoKX0sdC5Qcm9taXNlSW5zcGVjdGlvbj1lfX0se31dLDMzOltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsbil7dmFyIHI9dChcIi4vdXRpbFwiKSxpPXIuZXJyb3JPYmosbz1yLmlzT2JqZWN0LHM9e30uaGFzT3duUHJvcGVydHk7cmV0dXJuIGZ1bmN0aW9uKHQsYSl7aWYobyh0KSl7aWYodCBpbnN0YW5jZW9mIGUpcmV0dXJuIHQ7dmFyIGM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gdC50aGVufSh0KX1jYXRjaCh0KXtyZXR1cm4gaS5lPXQsaX19KHQpO2lmKGM9PT1pKXthJiZhLl9wdXNoQ29udGV4dCgpO3ZhciBsPWUucmVqZWN0KGMuZSk7cmV0dXJuIGEmJmEuX3BvcENvbnRleHQoKSxsfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMpcmV0dXJuIGZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gcy5jYWxsKHQsXCJfcHJvbWlzZTBcIil9Y2F0Y2godCl7cmV0dXJuITF9fSh0KT8obD1uZXcgZShuKSx0Ll90aGVuKGwuX2Z1bGZpbGwsbC5fcmVqZWN0LHZvaWQgMCxsLG51bGwpLGwpOmZ1bmN0aW9uKHQsbyxzKXt2YXIgYT1uZXcgZShuKSxjPWE7cyYmcy5fcHVzaENvbnRleHQoKSxhLl9jYXB0dXJlU3RhY2tUcmFjZSgpLHMmJnMuX3BvcENvbnRleHQoKTt2YXIgbD0hMCx1PXIudHJ5Q2F0Y2gobykuY2FsbCh0LGZ1bmN0aW9uKHQpe2EmJihhLl9yZXNvbHZlQ2FsbGJhY2sodCksYT1udWxsKX0sZnVuY3Rpb24odCl7YSYmKGEuX3JlamVjdENhbGxiYWNrKHQsbCwhMCksYT1udWxsKX0pO3JldHVybiBsPSExLGEmJnU9PT1pJiYoYS5fcmVqZWN0Q2FsbGJhY2sodS5lLCEwLCEwKSxhPW51bGwpLGN9KHQsYyxhKX1yZXR1cm4gdH19fSx7XCIuL3V0aWxcIjozNn1dLDM0OltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsbixyKXt2YXIgaT10KFwiLi91dGlsXCIpLG89ZS5UaW1lb3V0RXJyb3I7ZnVuY3Rpb24gcyh0KXt0aGlzLmhhbmRsZT10fXMucHJvdG90eXBlLl9yZXN1bHRDYW5jZWxsZWQ9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5oYW5kbGUpfTt2YXIgYT1mdW5jdGlvbih0KXtyZXR1cm4gYygrdGhpcykudGhlblJldHVybih0KX0sYz1lLmRlbGF5PWZ1bmN0aW9uKHQsaSl7dmFyIG8sYztyZXR1cm4gdm9pZCAwIT09aT8obz1lLnJlc29sdmUoaSkuX3RoZW4oYSxudWxsLG51bGwsdCx2b2lkIDApLHIuY2FuY2VsbGF0aW9uKCkmJmkgaW5zdGFuY2VvZiBlJiZvLl9zZXRPbkNhbmNlbChpKSk6KG89bmV3IGUobiksYz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7by5fZnVsZmlsbCgpfSwrdCksci5jYW5jZWxsYXRpb24oKSYmby5fc2V0T25DYW5jZWwobmV3IHMoYykpLG8uX2NhcHR1cmVTdGFja1RyYWNlKCkpLG8uX3NldEFzeW5jR3VhcmFudGVlZCgpLG99O2Z1bmN0aW9uIGwodCl7cmV0dXJuIGNsZWFyVGltZW91dCh0aGlzLmhhbmRsZSksdH1mdW5jdGlvbiB1KHQpe3Rocm93IGNsZWFyVGltZW91dCh0aGlzLmhhbmRsZSksdH1lLnByb3RvdHlwZS5kZWxheT1mdW5jdGlvbih0KXtyZXR1cm4gYyh0LHRoaXMpfSxlLnByb3RvdHlwZS50aW1lb3V0PWZ1bmN0aW9uKHQsZSl7dmFyIG4sYTt0PSt0O3ZhciBjPW5ldyBzKHNldFRpbWVvdXQoZnVuY3Rpb24oKXtuLmlzUGVuZGluZygpJiZmdW5jdGlvbih0LGUsbil7dmFyIHI7cj1cInN0cmluZ1wiIT10eXBlb2YgZT9lIGluc3RhbmNlb2YgRXJyb3I/ZTpuZXcgbyhcIm9wZXJhdGlvbiB0aW1lZCBvdXRcIik6bmV3IG8oZSksaS5tYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24ociksdC5fYXR0YWNoRXh0cmFUcmFjZShyKSx0Ll9yZWplY3QociksbnVsbCE9biYmbi5jYW5jZWwoKX0obixlLGEpfSx0KSk7cmV0dXJuIHIuY2FuY2VsbGF0aW9uKCk/KGE9dGhpcy50aGVuKCksKG49YS5fdGhlbihsLHUsdm9pZCAwLGMsdm9pZCAwKSkuX3NldE9uQ2FuY2VsKGMpKTpuPXRoaXMuX3RoZW4obCx1LHZvaWQgMCxjLHZvaWQgMCksbn19fSx7XCIuL3V0aWxcIjozNn1dLDM1OltmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsbixyLGksbyxzKXt2YXIgYT10KFwiLi91dGlsXCIpLGM9dChcIi4vZXJyb3JzXCIpLlR5cGVFcnJvcixsPXQoXCIuL3V0aWxcIikuaW5oZXJpdHMsdT1hLmVycm9yT2JqLHA9YS50cnlDYXRjaCxoPXt9O2Z1bmN0aW9uIGYodCl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IHR9LDApfWZ1bmN0aW9uIF8odCxlLG4pe3RoaXMuX2RhdGE9dCx0aGlzLl9wcm9taXNlPWUsdGhpcy5fY29udGV4dD1ufWZ1bmN0aW9uIGQodCxlLG4pe3RoaXMuY29uc3RydWN0b3IkKHQsZSxuKX1mdW5jdGlvbiB2KHQpe3JldHVybiBfLmlzRGlzcG9zZXIodCk/KHRoaXMucmVzb3VyY2VzW3RoaXMuaW5kZXhdLl9zZXREaXNwb3NhYmxlKHQpLHQucHJvbWlzZSgpKTp0fWZ1bmN0aW9uIHkodCl7dGhpcy5sZW5ndGg9dCx0aGlzLnByb21pc2U9bnVsbCx0aGlzW3QtMV09bnVsbH1fLnByb3RvdHlwZS5kYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9LF8ucHJvdG90eXBlLnByb21pc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJvbWlzZX0sXy5wcm90b3R5cGUucmVzb3VyY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9taXNlKCkuaXNGdWxmaWxsZWQoKT90aGlzLnByb21pc2UoKS52YWx1ZSgpOmh9LF8ucHJvdG90eXBlLnRyeURpc3Bvc2U9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZXNvdXJjZSgpLG49dGhpcy5fY29udGV4dDt2b2lkIDAhPT1uJiZuLl9wdXNoQ29udGV4dCgpO3ZhciByPWUhPT1oP3RoaXMuZG9EaXNwb3NlKGUsdCk6bnVsbDtyZXR1cm4gdm9pZCAwIT09biYmbi5fcG9wQ29udGV4dCgpLHRoaXMuX3Byb21pc2UuX3Vuc2V0RGlzcG9zYWJsZSgpLHRoaXMuX2RhdGE9bnVsbCxyfSxfLmlzRGlzcG9zZXI9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQucmVzb3VyY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQudHJ5RGlzcG9zZX0sbChkLF8pLGQucHJvdG90eXBlLmRvRGlzcG9zZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmRhdGEoKS5jYWxsKHQsdCxlKX0seS5wcm90b3R5cGUuX3Jlc3VsdENhbmNlbGxlZD1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmxlbmd0aCxuPTA7bjx0Oysrbil7dmFyIHI9dGhpc1tuXTtyIGluc3RhbmNlb2YgZSYmci5jYW5jZWwoKX19LGUudXNpbmc9ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoO2lmKHQ8MilyZXR1cm4gbihcInlvdSBtdXN0IHBhc3MgYXQgbGVhc3QgMiBhcmd1bWVudHMgdG8gUHJvbWlzZS51c2luZ1wiKTt2YXIgaSxjPWFyZ3VtZW50c1t0LTFdO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGMpcmV0dXJuIG4oXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiK2EuY2xhc3NTdHJpbmcoYykpO3ZhciBsPSEwOzI9PT10JiZBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSk/KHQ9KGk9YXJndW1lbnRzWzBdKS5sZW5ndGgsbD0hMSk6KGk9YXJndW1lbnRzLHQtLSk7Zm9yKHZhciBoPW5ldyB5KHQpLGQ9MDtkPHQ7KytkKXt2YXIgbT1pW2RdO2lmKF8uaXNEaXNwb3NlcihtKSl7dmFyIGc9bTsobT1tLnByb21pc2UoKSkuX3NldERpc3Bvc2FibGUoZyl9ZWxzZXt2YXIgYj1yKG0pO2IgaW5zdGFuY2VvZiBlJiYobT1iLl90aGVuKHYsbnVsbCxudWxsLHtyZXNvdXJjZXM6aCxpbmRleDpkfSx2b2lkIDApKX1oW2RdPW19dmFyIHc9bmV3IEFycmF5KGgubGVuZ3RoKTtmb3IoZD0wO2Q8dy5sZW5ndGg7KytkKXdbZF09ZS5yZXNvbHZlKGhbZF0pLnJlZmxlY3QoKTt2YXIgQz1lLmFsbCh3KS50aGVuKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7KytlKXt2YXIgbj10W2VdO2lmKG4uaXNSZWplY3RlZCgpKXJldHVybiB1LmU9bi5lcnJvcigpLHU7aWYoIW4uaXNGdWxmaWxsZWQoKSlyZXR1cm4gdm9pZCBDLmNhbmNlbCgpO3RbZV09bi52YWx1ZSgpfWouX3B1c2hDb250ZXh0KCksYz1wKGMpO3ZhciByPWw/Yy5hcHBseSh2b2lkIDAsdCk6Yyh0KSxpPWouX3BvcENvbnRleHQoKTtyZXR1cm4gcy5jaGVja0ZvcmdvdHRlblJldHVybnMocixpLFwiUHJvbWlzZS51c2luZ1wiLGopLHJ9KSxqPUMubGFzdGx5KGZ1bmN0aW9uKCl7dmFyIHQ9bmV3IGUuUHJvbWlzZUluc3BlY3Rpb24oQyk7cmV0dXJuIGZ1bmN0aW9uKHQsbil7dmFyIGk9MCxzPXQubGVuZ3RoLGE9bmV3IGUobyk7cmV0dXJuIGZ1bmN0aW9uIG8oKXtpZihpPj1zKXJldHVybiBhLl9mdWxmaWxsKCk7dmFyIGM9ZnVuY3Rpb24odCl7dmFyIGU9cih0KTtyZXR1cm4gZSE9PXQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuX2lzRGlzcG9zYWJsZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5fZ2V0RGlzcG9zZXImJnQuX2lzRGlzcG9zYWJsZSgpJiZlLl9zZXREaXNwb3NhYmxlKHQuX2dldERpc3Bvc2VyKCkpLGV9KHRbaSsrXSk7aWYoYyBpbnN0YW5jZW9mIGUmJmMuX2lzRGlzcG9zYWJsZSgpKXt0cnl7Yz1yKGMuX2dldERpc3Bvc2VyKCkudHJ5RGlzcG9zZShuKSx0LnByb21pc2UpfWNhdGNoKHQpe3JldHVybiBmKHQpfWlmKGMgaW5zdGFuY2VvZiBlKXJldHVybiBjLl90aGVuKG8sZixudWxsLG51bGwsbnVsbCl9bygpfSgpLGF9KGgsdCl9KTtyZXR1cm4gaC5wcm9taXNlPWosai5fc2V0T25DYW5jZWwoaCksan0sZS5wcm90b3R5cGUuX3NldERpc3Bvc2FibGU9ZnVuY3Rpb24odCl7dGhpcy5fYml0RmllbGQ9MTMxMDcyfHRoaXMuX2JpdEZpZWxkLHRoaXMuX2Rpc3Bvc2VyPXR9LGUucHJvdG90eXBlLl9pc0Rpc3Bvc2FibGU9ZnVuY3Rpb24oKXtyZXR1cm4oMTMxMDcyJnRoaXMuX2JpdEZpZWxkKT4wfSxlLnByb3RvdHlwZS5fZ2V0RGlzcG9zZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGlzcG9zZXJ9LGUucHJvdG90eXBlLl91bnNldERpc3Bvc2FibGU9ZnVuY3Rpb24oKXt0aGlzLl9iaXRGaWVsZD0tMTMxMDczJnRoaXMuX2JpdEZpZWxkLHRoaXMuX2Rpc3Bvc2VyPXZvaWQgMH0sZS5wcm90b3R5cGUuZGlzcG9zZXI9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gbmV3IGQodCx0aGlzLGkoKSk7dGhyb3cgbmV3IGN9fX0se1wiLi9lcnJvcnNcIjoxMixcIi4vdXRpbFwiOjM2fV0sMzY6W2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcixpPXQoXCIuL2VzNVwiKSxvPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBuYXZpZ2F0b3Iscz17ZTp7fX0sYT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOnZvaWQgMCE9PXRoaXM/dGhpczpudWxsO2Z1bmN0aW9uIGMoKXt0cnl7dmFyIHQ9cjtyZXR1cm4gcj1udWxsLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3JldHVybiBzLmU9dCxzfX1mdW5jdGlvbiBsKHQpe3JldHVybiBudWxsPT10fHwhMD09PXR8fCExPT09dHx8XCJzdHJpbmdcIj09dHlwZW9mIHR8fFwibnVtYmVyXCI9PXR5cGVvZiB0fWZ1bmN0aW9uIHUodCxlLG4pe2lmKGwodCkpcmV0dXJuIHQ7dmFyIHI9e3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITB9O3JldHVybiBpLmRlZmluZVByb3BlcnR5KHQsZSxyKSx0fXZhciBwPWZ1bmN0aW9uKCl7dmFyIHQ9W0FycmF5LnByb3RvdHlwZSxPYmplY3QucHJvdG90eXBlLEZ1bmN0aW9uLnByb3RvdHlwZV0sZT1mdW5jdGlvbihlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoOysrbilpZih0W25dPT09ZSlyZXR1cm4hMDtyZXR1cm4hMX07aWYoaS5pc0VTNSl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7cmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgcj1bXSxvPU9iamVjdC5jcmVhdGUobnVsbCk7bnVsbCE9dCYmIWUodCk7KXt2YXIgczt0cnl7cz1uKHQpfWNhdGNoKHQpe3JldHVybiByfWZvcih2YXIgYT0wO2E8cy5sZW5ndGg7KythKXt2YXIgYz1zW2FdO2lmKCFvW2NdKXtvW2NdPSEwO3ZhciBsPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxjKTtudWxsIT1sJiZudWxsPT1sLmdldCYmbnVsbD09bC5zZXQmJnIucHVzaChjKX19dD1pLmdldFByb3RvdHlwZU9mKHQpfXJldHVybiByfX12YXIgcj17fS5oYXNPd25Qcm9wZXJ0eTtyZXR1cm4gZnVuY3Rpb24obil7aWYoZShuKSlyZXR1cm5bXTt2YXIgaT1bXTt0OmZvcih2YXIgbyBpbiBuKWlmKHIuY2FsbChuLG8pKWkucHVzaChvKTtlbHNle2Zvcih2YXIgcz0wO3M8dC5sZW5ndGg7KytzKWlmKHIuY2FsbCh0W3NdLG8pKWNvbnRpbnVlIHQ7aS5wdXNoKG8pfXJldHVybiBpfX0oKSxoPS90aGlzXFxzKlxcLlxccypcXFMrXFxzKj0vO3ZhciBmPS9eW2EteiRfXVthLXokXzAtOV0qJC9pO2Z1bmN0aW9uIF8odCl7dHJ5e3JldHVybiB0K1wiXCJ9Y2F0Y2godCl7cmV0dXJuXCJbbm8gc3RyaW5nIHJlcHJlc2VudGF0aW9uXVwifX1mdW5jdGlvbiBkKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRXJyb3J8fG51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJzdHJpbmdcIj09dHlwZW9mIHQubWVzc2FnZSYmXCJzdHJpbmdcIj09dHlwZW9mIHQubmFtZX1mdW5jdGlvbiB2KHQpe3JldHVybiBkKHQpJiZpLnByb3BlcnR5SXNXcml0YWJsZSh0LFwic3RhY2tcIil9dmFyIHk9XCJzdGFja1wiaW4gbmV3IEVycm9yP2Z1bmN0aW9uKHQpe3JldHVybiB2KHQpP3Q6bmV3IEVycm9yKF8odCkpfTpmdW5jdGlvbih0KXtpZih2KHQpKXJldHVybiB0O3RyeXt0aHJvdyBuZXcgRXJyb3IoXyh0KSl9Y2F0Y2godCl7cmV0dXJuIHR9fTtmdW5jdGlvbiBtKHQpe3JldHVybnt9LnRvU3RyaW5nLmNhbGwodCl9dmFyIGc9ZnVuY3Rpb24odCl7cmV0dXJuIGkuaXNBcnJheSh0KT90Om51bGx9O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcil7dmFyIGI9XCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXkuZnJvbT9mdW5jdGlvbih0KXtyZXR1cm4gQXJyYXkuZnJvbSh0KX06ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49W10scj10W1N5bWJvbC5pdGVyYXRvcl0oKTshKGU9ci5uZXh0KCkpLmRvbmU7KW4ucHVzaChlLnZhbHVlKTtyZXR1cm4gbn07Zz1mdW5jdGlvbih0KXtyZXR1cm4gaS5pc0FycmF5KHQpP3Q6bnVsbCE9dCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdFtTeW1ib2wuaXRlcmF0b3JdP2IodCk6bnVsbH19dmFyIHc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJlwiW29iamVjdCBwcm9jZXNzXVwiPT09bShwcm9jZXNzKS50b0xvd2VyQ2FzZSgpLEM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52O3ZhciBqLEU9e2lzQ2xhc3M6ZnVuY3Rpb24odCl7dHJ5e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpe3ZhciBlPWkubmFtZXModC5wcm90b3R5cGUpLG49aS5pc0VTNSYmZS5sZW5ndGg+MSxyPWUubGVuZ3RoPjAmJiEoMT09PWUubGVuZ3RoJiZcImNvbnN0cnVjdG9yXCI9PT1lWzBdKSxvPWgudGVzdCh0K1wiXCIpJiZpLm5hbWVzKHQpLmxlbmd0aD4wO2lmKG58fHJ8fG8pcmV0dXJuITB9cmV0dXJuITF9Y2F0Y2godCl7cmV0dXJuITF9fSxpc0lkZW50aWZpZXI6ZnVuY3Rpb24odCl7cmV0dXJuIGYudGVzdCh0KX0saW5oZXJpdGVkRGF0YUtleXM6cCxnZXREYXRhUHJvcGVydHlPckRlZmF1bHQ6ZnVuY3Rpb24odCxlLG4pe2lmKCFpLmlzRVM1KXJldHVybnt9Lmhhc093blByb3BlcnR5LmNhbGwodCxlKT90W2VdOnZvaWQgMDt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSk7cmV0dXJuIG51bGwhPXI/bnVsbD09ci5nZXQmJm51bGw9PXIuc2V0P3IudmFsdWU6bjp2b2lkIDB9LHRocm93ZXI6ZnVuY3Rpb24odCl7dGhyb3cgdH0saXNBcnJheTppLmlzQXJyYXksYXNBcnJheTpnLG5vdEVudW1lcmFibGVQcm9wOnUsaXNQcmltaXRpdmU6bCxpc09iamVjdDpmdW5jdGlvbih0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9PXR9LGlzRXJyb3I6ZCxjYW5FdmFsdWF0ZTpvLGVycm9yT2JqOnMsdHJ5Q2F0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuIHI9dCxjfSxpbmhlcml0czpmdW5jdGlvbih0LGUpe3ZhciBuPXt9Lmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHIoKXtmb3IodmFyIHIgaW4gdGhpcy5jb25zdHJ1Y3Rvcj10LHRoaXMuY29uc3RydWN0b3IkPWUsZS5wcm90b3R5cGUpbi5jYWxsKGUucHJvdG90eXBlLHIpJiZcIiRcIiE9PXIuY2hhckF0KHIubGVuZ3RoLTEpJiYodGhpc1tyK1wiJFwiXT1lLnByb3RvdHlwZVtyXSl9cmV0dXJuIHIucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyByLHQucHJvdG90eXBlfSx3aXRoQXBwZW5kZWQ6ZnVuY3Rpb24odCxlKXt2YXIgbixyPXQubGVuZ3RoLGk9bmV3IEFycmF5KHIrMSk7Zm9yKG49MDtuPHI7KytuKWlbbl09dFtuXTtyZXR1cm4gaVtuXT1lLGl9LG1heWJlV3JhcEFzRXJyb3I6ZnVuY3Rpb24odCl7cmV0dXJuIGwodCk/bmV3IEVycm9yKF8odCkpOnR9LHRvRmFzdFByb3BlcnRpZXM6ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe31lLnByb3RvdHlwZT10O3ZhciBuPW5ldyBlO2Z1bmN0aW9uIHIoKXtyZXR1cm4gdHlwZW9mIG4uZm9vfXJldHVybiByKCkscigpLHR9LGZpbGxlZFJhbmdlOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bmV3IEFycmF5KHQpLGk9MDtpPHQ7KytpKXJbaV09ZStpK247cmV0dXJuIHJ9LHRvU3RyaW5nOl8sY2FuQXR0YWNoVHJhY2U6dixlbnN1cmVFcnJvck9iamVjdDp5LG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uOmZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10JiYodCBpbnN0YW5jZW9mIEVycm9yLl9fQmx1ZWJpcmRFcnJvclR5cGVzX18uT3BlcmF0aW9uYWxFcnJvcnx8ITA9PT10LmlzT3BlcmF0aW9uYWwpfSxtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb246ZnVuY3Rpb24odCl7dHJ5e3UodCxcImlzT3BlcmF0aW9uYWxcIiwhMCl9Y2F0Y2godCl7fX0sY2xhc3NTdHJpbmc6bSxjb3B5RGVzY3JpcHRvcnM6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj1pLm5hbWVzKHQpLG89MDtvPHIubGVuZ3RoOysrbyl7dmFyIHM9cltvXTtpZihuKHMpKXRyeXtpLmRlZmluZVByb3BlcnR5KGUscyxpLmdldERlc2NyaXB0b3IodCxzKSl9Y2F0Y2godCl7fX19LGhhc0RldlRvb2xzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBjaHJvbWUmJmNocm9tZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgY2hyb21lLmxvYWRUaW1lcyxpc05vZGU6dyxoYXNFbnZWYXJpYWJsZXM6QyxlbnY6ZnVuY3Rpb24odCl7cmV0dXJuIEM/cHJvY2Vzcy5lbnZbdF06dm9pZCAwfSxnbG9iYWw6YSxnZXROYXRpdmVQcm9taXNlOmZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZSl0cnl7dmFyIHQ9bmV3IFByb21pc2UoZnVuY3Rpb24oKXt9KTtpZihcIltvYmplY3QgUHJvbWlzZV1cIj09PXt9LnRvU3RyaW5nLmNhbGwodCkpcmV0dXJuIFByb21pc2V9Y2F0Y2godCl7fX0sZG9tYWluQmluZDpmdW5jdGlvbih0LGUpe3JldHVybiB0LmJpbmQoZSl9fTtFLmlzUmVjZW50Tm9kZT1FLmlzTm9kZSYmKHByb2Nlc3MudmVyc2lvbnMmJnByb2Nlc3MudmVyc2lvbnMubm9kZT9qPXByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdChcIi5cIikubWFwKE51bWJlcik6cHJvY2Vzcy52ZXJzaW9uJiYoaj1wcm9jZXNzLnZlcnNpb24uc3BsaXQoXCIuXCIpLm1hcChOdW1iZXIpKSwwPT09alswXSYmalsxXT4xMHx8alswXT4wKSxFLmlzTm9kZSYmRS50b0Zhc3RQcm9wZXJ0aWVzKHByb2Nlc3MpO3RyeXt0aHJvdyBuZXcgRXJyb3J9Y2F0Y2godCl7RS5sYXN0TGluZUVycm9yPXR9ZS5leHBvcnRzPUV9LHtcIi4vZXM1XCI6MTN9XX0se30sWzRdKSg0KX0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJm51bGwhPT13aW5kb3c/d2luZG93LlA9d2luZG93LlByb21pc2U6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJm51bGwhPT1zZWxmJiYoc2VsZi5QPXNlbGYuUHJvbWlzZSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUpzZFdWaWFYSmtMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVWlMQ0psZUhCdmNuUnpJaXdpYlc5a2RXeGxJaXdpWkdWbWFXNWxJaXdpWVcxa0lpd2laaUlzSW5kcGJtUnZkeUlzSW1kc2IySmhiQ0lzSW5ObGJHWWlMQ0pRY205dGFYTmxJaXdpZENJc0ltNGlMQ0p5SWl3aWN5SXNJbThpTENKMUlpd2lZU0lzSWw5a1pYSmxjVjhpTENKcElpd2lSWEp5YjNJaUxDSmpiMlJsSWl3aWJDSXNJbU5oYkd3aUxDSnNaVzVuZEdnaUxDSXhJaXdpVTI5dFpWQnliMjFwYzJWQmNuSmhlU0lzSWw5VGIyMWxVSEp2YldselpVRnljbUY1SWl3aVlXNTVJaXdpY0hKdmJXbHpaWE1pTENKeVpYUWlMQ0p3Y205dGFYTmxJaXdpYzJWMFNHOTNUV0Z1ZVNJc0luTmxkRlZ1ZDNKaGNDSXNJbWx1YVhRaUxDSndjbTkwYjNSNWNHVWlMQ0owYUdseklpd2lNaUlzSW1acGNuTjBUR2x1WlVWeWNtOXlJaXdpYzJOb1pXUjFiR1VpTENKUmRXVjFaU0lzSW5WMGFXd2lMQ0pCYzNsdVl5SXNJbDlqZFhOMGIyMVRZMmhsWkhWc1pYSWlMQ0pmYVhOVWFXTnJWWE5sWkNJc0lsOXNZWFJsVVhWbGRXVWlMQ0pmYm05eWJXRnNVWFZsZFdVaUxDSmZhR0YyWlVSeVlXbHVaV1JSZFdWMVpYTWlMQ0pmZEhKaGJYQnZiR2x1WlVWdVlXSnNaV1FpTENKa2NtRnBibEYxWlhWbGN5SXNJbDlrY21GcGJsRjFaWFZsY3lJc0lsOXpZMmhsWkhWc1pTSXNJa0Z6ZVc1alNXNTJiMnRsVEdGMFpYSWlMQ0ptYmlJc0luSmxZMlZwZG1WeUlpd2lZWEpuSWl3aWNIVnphQ0lzSWw5eGRXVjFaVlJwWTJzaUxDSkJjM2x1WTBsdWRtOXJaU0lzSWtGemVXNWpVMlYwZEd4bFVISnZiV2x6WlhNaUxDSmZjSFZ6YUU5dVpTSXNJbDlrY21GcGJsRjFaWFZsSWl3aWNYVmxkV1VpTENKZlpISmhhVzVSZFdWMVpWTjBaWEFpTENKemFHbG1kQ0lzSWw5elpYUjBiR1ZRY205dGFYTmxjeUlzSW5ObGRGTmphR1ZrZFd4bGNpSXNJbkJ5WlhZaUxDSm9ZWE5EZFhOMGIyMVRZMmhsWkhWc1pYSWlMQ0psYm1GaWJHVlVjbUZ0Y0c5c2FXNWxJaXdpWkdsellXSnNaVlJ5WVcxd2IyeHBibVZKWms1bFkyVnpjMkZ5ZVNJc0ltaGhjMFJsZGxSdmIyeHpJaXdpYUdGMlpVbDBaVzF6VVhWbGRXVmtJaXdpWm1GMFlXeEZjbkp2Y2lJc0ltbHpUbTlrWlNJc0luQnliMk5sYzNNaUxDSnpkR1JsY25JaUxDSjNjbWwwWlNJc0luTjBZV05ySWl3aVpYaHBkQ0lzSW5Sb2NtOTNUR0YwWlhJaUxDSmhjbWQxYldWdWRITWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWFXNTJiMnRsVEdGMFpYSWlMQ0pwYm5admEyVWlMQ0p6WlhSMGJHVlFjbTl0YVhObGN5SXNJbDl5WlhObGRDSXNJaTR2Y1hWbGRXVWlMQ0l1TDNOamFHVmtkV3hsSWl3aUxpOTFkR2xzSWl3aU15SXNJa2xPVkVWU1RrRk1JaXdpZEhKNVEyOXVkbVZ5ZEZSdlVISnZiV2x6WlNJc0ltUmxZblZuSWl3aVkyRnNiR1ZrUW1sdVpDSXNJbkpsYW1WamRGUm9hWE1pTENKZklpd2lYM0psYW1WamRDSXNJblJoY21kbGRGSmxhbVZqZEdWa0lpd2lZMjl1ZEdWNGRDSXNJbkJ5YjIxcGMyVlNaV3BsWTNScGIyNVJkV1YxWldRaUxDSmlhVzVrYVc1blVISnZiV2x6WlNJc0lsOTBhR1Z1SWl3aVltbHVaR2x1WjFKbGMyOXNkbVZrSWl3aWRHaHBjMEZ5WnlJc0lsOWlhWFJHYVdWc1pDSXNJbDl5WlhOdmJIWmxRMkZzYkdKaFkyc2lMQ0owWVhKblpYUWlMQ0ppYVc1a2FXNW5VbVZxWldOMFpXUWlMQ0ppYVc1a0lpd2lYM0J5YjNCaFoyRjBaVVp5YjIwaUxDSndjbTl3WVdkaGRHVkdjbTl0Um5WdVkzUnBiMjRpTENKZlltOTFibVJXWVd4MVpTSXNJbUp2ZFc1a1ZtRnNkV1ZHZFc1amRHbHZiaUlzSW0xaGVXSmxVSEp2YldselpTSXNJbDkwWVhKblpYUWlMQ0pmYzJWMFFtOTFibVJVYnlJc0lsOXpaWFJQYmtOaGJtTmxiQ0lzSW05aWFpSXNJbDlpYjNWdVpGUnZJaXdpWDJselFtOTFibVFpTENKMllXeDFaU0lzSW5KbGMyOXNkbVVpTENJMElpd2liMnhrSWl3aVlteDFaV0pwY21RaUxDSnViME52Ym1ac2FXTjBJaXdpTGk5d2NtOXRhWE5sSWl3aU5TSXNJbU55SWl3aVQySnFaV04wSWl3aVkzSmxZWFJsSWl3aVkyRnNiR1Z5UTJGamFHVWlMQ0puWlhSMFpYSkRZV05vWlNJc0ltTmhia1YyWVd4MVlYUmxJaXdpWTJGc2JHVnlJaXdpYldWMGFHOWtUbUZ0WlNJc0ltMWxjM05oWjJVaUxDSmpiR0Z6YzFOMGNtbHVaeUlzSW5SdlUzUnlhVzVuSWl3aVZIbHdaVVZ5Y205eUlpd2laVzV6ZFhKbFRXVjBhRzlrSWl3aWNHOXdJaXdpWVhCd2JIa2lMQ0p1WVcxbFpFZGxkSFJsY2lJc0ltbHVaR1Y0WldSSFpYUjBaWElpTENKcGJtUmxlQ0lzSWsxaGRHZ2lMQ0p0WVhnaUxDSnBjMGxrWlc1MGFXWnBaWElpTENKaGNtZHpJaXdpYzJ4cFkyVWlMQ0oxYm1SbFptbHVaV1FpTENKblpYUWlMQ0p3Y205d1pYSjBlVTVoYldVaUxDSm5aWFIwWlhJaUxDSnRZWGxpWlVkbGRIUmxjaUlzSW1kbGRFZGxkSFJsY2lJc0lqWWlMQ0pRY205dGFYTmxRWEp5WVhraUxDSmhjR2xTWldwbFkzUnBiMjRpTENKMGNubERZWFJqYUNJc0ltVnljbTl5VDJKcUlpd2lZWE41Ym1NaUxDSmZZWE41Ym1NaUxDSmljbVZoYXlJc0ltTmhibU5sYkNJc0ltTmhibU5sYkd4aGRHbHZiaUlzSWw5M1lYSnVJaXdpWTJocGJHUWlMQ0pmYVhORFlXNWpaV3hzWVdKc1pTSXNJbDlqWVc1alpXeENlU0lzSWw5cGMwWnZiR3h2ZDJsdVp5SXNJbDltYjJ4c2IzZGxaU0lzSWw5allXNWpaV3hDY21GdVkyaGxaQ0lzSW5CaGNtVnVkQ0lzSWw5allXNWpaV3hzWVhScGIyNVFZWEpsYm5RaUxDSmZjMlYwVjJsc2JFSmxRMkZ1WTJWc2JHVmtJaXdpWDJKeVlXNWphRWhoYzBOaGJtTmxiR3hsWkNJc0lsOWljbUZ1WTJobGMxSmxiV0ZwYm1sdVoxUnZRMkZ1WTJWc0lpd2lYMlZ1YjNWbmFFSnlZVzVqYUdWelNHRjJaVU5oYm1ObGJHeGxaQ0lzSW1OaGJtTmxiR3hsY2lJc0lsOXBiblp2YTJWUGJrTmhibU5sYkNJc0lsOWpZVzVqWld3aUxDSmZjMlYwUTJGdVkyVnNiR1ZrSWl3aVgyTmhibU5sYkZCeWIyMXBjMlZ6SWl3aVgyeGxibWQwYUNJc0lsOTFibk5sZEU5dVEyRnVZMlZzSWl3aVgyOXVRMkZ1WTJWc1JtbGxiR1FpTENKcGMxQmxibVJwYm1jaUxDSmZhWE5EWVc1alpXeHNaV1FpTENKcGMwTmhibU5sYkd4aFlteGxJaXdpYVhORFlXNWpaV3hzWldRaUxDSmZaRzlKYm5admEyVlBia05oYm1ObGJDSXNJbTl1UTJGdVkyVnNRMkZzYkdKaFkyc2lMQ0pwYm5SbGNtNWhiRTl1YkhraUxDSnBjMEZ5Y21GNUlpd2lYMkYwZEdGamFFVjRkSEpoVkhKaFkyVWlMQ0pmY21WemRXeDBRMkZ1WTJWc2JHVmtJaXdpWDI5dVEyRnVZMlZzSWl3aVgybHVkbTlyWlVsdWRHVnlibUZzVDI1RFlXNWpaV3dpTENJM0lpd2lUa1ZZVkY5R1NVeFVSVklpTENKblpYUkxaWGx6SWl3aWEyVjVjeUlzSW1sdWMzUmhibU5sY3lJc0ltTmlJaXdpWW05MWJtUlVieUlzSW5CeVpXUnBZMkYwWlV4dmIzQWlMQ0pwZEdWdElpd2liV0YwWTJobGMxQnlaV1JwWTJGMFpTSXNJbWx6VDJKcVpXTjBJaXdpYWlJc0ltdGxlU0lzSWk0dlpYTTFJaXdpT0NJc0lteHZibWRUZEdGamExUnlZV05sY3lJc0ltTnZiblJsZUhSVGRHRmpheUlzSWtOdmJuUmxlSFFpTENKZmRISmhZMlVpTENKRFlYQjBkWEpsWkZSeVlXTmxJaXdpY0dWbGEwTnZiblJsZUhRaUxDSnNZWE4wU1c1a1pYZ2lMQ0pmY0hKdmJXbHpaVU55WldGMFpXUWlMQ0pmY0hWemFFTnZiblJsZUhRaUxDSmZjRzl3UTI5dWRHVjRkQ0lzSWw5d1pXVnJRMjl1ZEdWNGRDSXNJblJ5WVdObElpd2laR1ZoWTNScGRtRjBaVXh2Ym1kVGRHRmphMVJ5WVdObGN5SXNJbUZqZEdsMllYUmxURzl1WjFOMFlXTnJWSEpoWTJWeklpd2lVSEp2YldselpWOXdkWE5vUTI5dWRHVjRkQ0lzSWxCeWIyMXBjMlZmY0c5d1EyOXVkR1Y0ZENJc0lsQnliMjFwYzJWZlVHVmxhME52Ym5SbGVIUWlMQ0pRY205dGFYTmxYM0JsWld0RGIyNTBaWGgwSWl3aVVISnZiV2x6WlY5d2NtOXRhWE5sUTNKbFlYUmxaQ0lzSW1OMGVDSXNJamtpTENKMWJtaGhibVJzWldSU1pXcGxZM1JwYjI1SVlXNWtiR1ZrSWl3aWNHOXpjMmxpYkhsVmJtaGhibVJzWldSU1pXcGxZM1JwYjI0aUxDSndjbWx1ZEZkaGNtNXBibWNpTENKblpYUkViMjFoYVc0aUxDSmZaMlYwUkc5dFlXbHVJaXdpVjJGeWJtbHVaeUlzSW1Wek5TSXNJbU5oYmtGMGRHRmphRlJ5WVdObElpd2lZbXgxWldKcGNtUkdjbUZ0WlZCaGRIUmxjbTRpTENKdWIyUmxSbkpoYldWUVlYUjBaWEp1SWl3aWNHRnljMlZNYVc1bFVHRjBkR1Z5YmlJc0luTjBZV05yUm5KaGJXVlFZWFIwWlhKdUlpd2labTl5YldGMFUzUmhZMnNpTENKcGJtUmxiblJUZEdGamEwWnlZVzFsY3lJc0ltUmxZblZuWjJsdVp5SXNJbVZ1ZGlJc0luZGhjbTVwYm1keklpd2lkMFp2Y21kdmRIUmxibEpsZEhWeWJpSXNJbk4xY0hCeVpYTnpWVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVjeUlzSWw5bGJuTjFjbVZRYjNOemFXSnNaVkpsYW1WamRHbHZia2hoYm1Sc1pXUWlMQ0pmYzJWMFVtVnFaV04wYVc5dVNYTlZibWhoYm1Sc1pXUWlMQ0pmYm05MGFXWjVWVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVJaXdpWDI1dmRHbG1lVlZ1YUdGdVpHeGxaRkpsYW1WamRHbHZia2x6U0dGdVpHeGxaQ0lzSW1acGNtVlNaV3BsWTNScGIyNUZkbVZ1ZENJc0lsOXpaWFJTWlhSMWNtNWxaRTV2YmxWdVpHVm1hVzVsWkNJc0lsOXlaWFIxY201bFpFNXZibFZ1WkdWbWFXNWxaQ0lzSWw5cGMxSmxhbVZqZEdsdmJsVnVhR0Z1Wkd4bFpDSXNJbkpsWVhOdmJpSXNJbDl6WlhSMGJHVmtWbUZzZFdVaUxDSmZjMlYwVlc1b1lXNWtiR1ZrVW1WcVpXTjBhVzl1U1hOT2IzUnBabWxsWkNJc0lsOTFibk5sZEZWdWFHRnVaR3hsWkZKbGFtVmpkR2x2YmtselRtOTBhV1pwWldRaUxDSmZhWE5WYm1oaGJtUnNaV1JTWldwbFkzUnBiMjVPYjNScFptbGxaQ0lzSWw5MWJuTmxkRkpsYW1WamRHbHZia2x6Vlc1b1lXNWtiR1ZrSWl3aWMyaHZkV3hrVlhObFQzZHVWSEpoWTJVaUxDSjNZWEp1SWl3aWIyNVFiM056YVdKc2VWVnVhR0Z1Wkd4bFpGSmxhbVZqZEdsdmJpSXNJbVJ2YldGcGJpSXNJbVJ2YldGcGJrSnBibVFpTENKdmJsVnVhR0Z1Wkd4bFpGSmxhbVZqZEdsdmJraGhibVJzWldRaUxDSmthWE5oWW14bFRHOXVaMU4wWVdOclZISmhZMlZ6SWl3aVkyOXVabWxuSWl3aWJHOXVaMU4wWVdOclZISmhZMlZ6U1hOVGRYQndiM0owWldRaUxDSlFjbTl0YVhObFgyTmhjSFIxY21WVGRHRmphMVJ5WVdObElpd2lYMk5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxJaXdpVUhKdmJXbHpaVjloZEhSaFkyaEZlSFJ5WVZSeVlXTmxJaXdpVUhKdmJXbHpaVjlrWlhKbFptVnlaVzVqWlZSeVlXTmxJaXdpWDJSbGNtVm1aWEpsYm1ObFZISmhZMlVpTENKc2IyNW5VM1JoWTJ0VWNtRmpaWE5EWVhCMGRYSmxVM1JoWTJ0VWNtRmpaU0lzSW14dmJtZFRkR0ZqYTFSeVlXTmxjMEYwZEdGamFFVjRkSEpoVkhKaFkyVWlMQ0pzYjI1blUzUmhZMnRVY21GalpYTkVaWEpsWm1WeVpXNWpaVlJ5WVdObElpd2lhR0Z6VEc5dVoxTjBZV05yVkhKaFkyVnpJaXdpWm1seVpVUnZiVVYyWlc1MElpd2lRM1Z6ZEc5dFJYWmxiblFpTENKbGRtVnVkQ0lzSW1ScGMzQmhkR05vUlhabGJuUWlMQ0p1WVcxbElpd2laWFpsYm5SRVlYUmhJaXdpWkdWMFlXbHNJaXdpWTJGdVkyVnNZV0pzWlNJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpHOXRSWFpsYm5RaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSWtWMlpXNTBJaXdpWkc5amRXMWxiblFpTENKamNtVmhkR1ZGZG1WdWRDSXNJbWx1YVhSRGRYTjBiMjFGZG1WdWRDSXNJbVpwY21WSGJHOWlZV3hGZG1WdWRDSXNJbVZ0YVhRaUxDSnRaWFJvYjJRaUxDSm5aVzVsY21GMFpWQnliMjFwYzJWTWFXWmxZM2xqYkdWRmRtVnVkRTlpYW1WamRDSXNJbVYyWlc1MFZHOVBZbXBsWTNSSFpXNWxjbUYwYjNJaUxDSndjbTl0YVhObFEzSmxZWFJsWkNJc0luQnliMjFwYzJWR2RXeG1hV3hzWldRaUxDSndjbTl0YVhObFVtVnFaV04wWldRaUxDSndjbTl0YVhObFVtVnpiMngyWldRaUxDSndjbTl0YVhObFEyRnVZMlZzYkdWa0lpd2ljSEp2YldselpVTm9ZV2x1WldRaUxDSjNZWEp1YVc1bklpd2lkVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVJaXdpY21WcVpXTjBhVzl1U0dGdVpHeGxaQ0lzSW1GamRHbDJaVVpwY21WRmRtVnVkQ0lzSW1kc2IySmhiRVYyWlc1MFJtbHlaV1FpTENKa2IyMUZkbVZ1ZEVacGNtVmtJaXdpWkdWbVlYVnNkRVpwY21WRmRtVnVkQ0lzSW1OaGJtTmxiR3hoZEdsdmJrVjRaV04xZEdVaUxDSmxlR1ZqZFhSdmNpSXNJbkpsYW1WamRDSXNJbTl1UTJGdVkyVnNJaXdpWDJGMGRHRmphRU5oYm1ObGJHeGhkR2x2YmtOaGJHeGlZV05ySWl3aVkyRnVZMlZzYkdGMGFXOXVRWFIwWVdOb1EyRnVZMlZzYkdGMGFXOXVRMkZzYkdKaFkyc2lMQ0p3Y21WMmFXOTFjMDl1UTJGdVkyVnNJaXdpWTJGdVkyVnNiR0YwYVc5dVQyNURZVzVqWld3aUxDSmpZVzVqWld4c1lYUnBiMjVUWlhSUGJrTmhibU5sYkNJc0ltTmhibU5sYkd4aGRHbHZia05zWldGeVEyRnVZMlZzYkdGMGFXOXVSR0YwWVNJc0ltTmhibU5sYkd4aGRHbHZibEJ5YjNCaFoyRjBaVVp5YjIwaUxDSm1iR0ZuY3lJc0ltSnlZVzVqYUdWelVtVnRZV2x1YVc1blZHOURZVzVqWld3aUxDSnZjSFJ6SWl3aWQyRnlibWx1WjNOUGNIUnBiMjRpTENKZlkyeGxZWEpEWVc1alpXeHNZWFJwYjI1RVlYUmhJaXdpWDJWNFpXTjFkR1VpTENKdGIyNXBkRzl5YVc1bklpd2lYMlpwY21WRmRtVnVkQ0lzSW1oaGJtUnNaWElpTENKcGMwWjFiR1pwYkd4bFpDSXNJbVZ5Y205eUlpd2lhV2R1YjNKbFUyVnNaaUlzSWw5d1lYSmxiblFpTENKaGRIUmhZMmhGZUhSeVlWUnlZV05sSWl3aVgxOXpkR0ZqYTBOc1pXRnVaV1JmWHlJc0luQmhjbk5sWkNJc0luQmhjbk5sVTNSaFkydEJibVJOWlhOellXZGxJaXdpYm05MFJXNTFiV1Z5WVdKc1pWQnliM0FpTENKcWIybHVJaXdpWm05eWJXRjBRVzVrVEc5blJYSnliM0lpTENKamJHVmhibE4wWVdOcklpd2liR2x1WlNJc0ltbHpWSEpoWTJWTWFXNWxJaXdpZEdWemRDSXNJbWx6U1c1MFpYSnVZV3hHY21GdFpTSXNJbk5vYjNWc1pFbG5ibTl5WlNJc0ltTm9ZWEpCZENJc0luSmxjR3hoWTJVaUxDSnpjR3hwZENJc0luUnBkR3hsSWl3aWFYTlRiMlowSWl3aVkyOXVjMjlzWlNJc0lsTjBjbWx1WnlJc0lteHZaeUlzSW14dlkyRnNTR0Z1Wkd4bGNpSXNJbXh2WTJGc1JYWmxiblJHYVhKbFpDSXNJbVp2Y20xaGRFNXZia1Z5Y205eUlpd2ljM1J5SWl3aVNsTlBUaUlzSW5OMGNtbHVaMmxtZVNJc0luTjFZbk4wY2lJc0ltMWhlRU5vWVhKeklpd2lZMkZ3ZEhWeVpWTjBZV05yVkhKaFkyVWlMQ0p3WVhKelpVeHBibVZKYm1adlVtVm5aWGdpTENKd1lYSnpaVXhwYm1WSmJtWnZJaXdpYldGMFkyaGxjeUlzSW0xaGRHTm9JaXdpWm1sc1pVNWhiV1VpTENKd1lYSnpaVWx1ZENJc0lsOXdjbTl0YVhObGMwTnlaV0YwWldRaUxDSjFibU41WTJ4bElpd2lhVzVvWlhKcGRITWlMQ0p1YjJSbGN5SXNJbk4wWVdOclZHOUpibVJsZUNJc0ltNXZaR1VpTENKamVXTnNaVVZrWjJWT2IyUmxJaXdpWTNWeWNtVnVkRU5vYVd4a1RHVnVaM1JvSWl3aWMzUmhZMnR6SWl3aVkzVnljbVZ1ZENJc0ltTjFjbkpsYm5STVlYTjBTVzVrWlhnaUxDSmpkWEp5Wlc1MFRHRnpkRXhwYm1VaUxDSmpiMjF0YjI1U2IyOTBUV1ZsZEZCdmFXNTBJaXdpYzNCc2FXTmxJaXdpZGpoemRHRmphMFp5WVcxbFVHRjBkR1Z5YmlJc0luWTRjM1JoWTJ0R2IzSnRZWFIwWlhJaUxDSnpkR0ZqYTFSeVlXTmxUR2x0YVhRaUxDSnBaMjV2Y21WVmJuUnBiQ0lzSW1oaGMxTjBZV05yUVdaMFpYSlVhSEp2ZHlJc0ltVnljaUlzSW1sdVpHVjRUMllpTENKcGMxUlVXU0lzSW1OdmJHOXlJaXdpWTJobFkydEdiM0puYjNSMFpXNVNaWFIxY201eklpd2ljbVYwZFhKdVZtRnNkV1VpTENKb1lXNWtiR1Z5VEdsdVpTSXNJbU55WldGMGIzSk1hVzVsSWl3aWRISmhZMlZNYVc1bGN5SXNJbXhwYm1WTllYUmphR1Z6SWl3aVptbHljM1JWYzJWeVRHbHVaU0lzSW0xelp5SXNJbk5sZEVKdmRXNWtjeUlzSW14aGMzUk1hVzVsUlhKeWIzSWlMQ0ptYVhKemRFWnBiR1ZPWVcxbElpd2liR0Z6ZEVacGJHVk9ZVzFsSWl3aVptbHljM1JUZEdGamEweHBibVZ6SWl3aWJHRnpkRk4wWVdOclRHbHVaWE1pTENKbWFYSnpkRWx1WkdWNElpd2ljbVZ6ZFd4MElpd2lhVzVtYnlJc0ltUmxjSEpsWTJGMFpXUWlMQ0p5WlhCc1lXTmxiV1Z1ZENJc0lpNHZaWEp5YjNKeklpd2lNVEFpTENKeVpYUjFjbTVsY2lJc0luUm9jbTkzWlhJaUxDSnlaWFIxY200aUxDSjBhR1Z1VW1WMGRYSnVJaXdpZEdoeWIzY2lMQ0owYUdWdVZHaHliM2NpTENKallYUmphRlJvY205M0lpd2lYM0psWVhOdmJpSXNJbU5oZFdkb2RDSXNJbU5oZEdOb1VtVjBkWEp1SWl3aVgzWmhiSFZsSWl3aU1URWlMQ0pRY205dGFYTmxVbVZrZFdObElpd2ljbVZrZFdObElpd2lVSEp2YldselpVRnNiQ0lzSW1Gc2JDSXNJbkJ5YjIxcGMyVkJiR3hVYUdseklpd2laV0ZqYUNJc0ltMWhjRk5sY21sbGN5SXNJakV5SWl3aVgxUjVjR1ZGY25KdmNpSXNJbDlTWVc1blpVVnljbTl5SWl3aVQySnFaV04wWm5KbFpYcGxJaXdpWm5KbFpYcGxJaXdpYzNWaVJYSnliM0lpTENKdVlXMWxVSEp2Y0dWeWRIa2lMQ0prWldaaGRXeDBUV1Z6YzJGblpTSXNJbE4xWWtWeWNtOXlJaXdpWTI5dWMzUnlkV04wYjNJaUxDSkRZVzVqWld4c1lYUnBiMjVGY25KdmNpSXNJbFJwYldWdmRYUkZjbkp2Y2lJc0lrRm5aM0psWjJGMFpVVnljbTl5SWl3aVVtRnVaMlZGY25KdmNpSXNJbTFsZEdodlpITWlMQ0pCY25KaGVTSXNJbU52Ym1acFozVnlZV0pzWlNJc0luZHlhWFJoWW14bElpd2laVzUxYldWeVlXSnNaU0lzSW1selQzQmxjbUYwYVc5dVlXd2lMQ0pzWlhabGJDSXNJazl3WlhKaGRHbHZibUZzUlhKeWIzSWlMQ0pqWVhWelpTSXNJbWx1WkdWdWRDSXNJbXhwYm1Weklpd2laWEp5YjNKVWVYQmxjeUlzSWw5ZlFteDFaV0pwY21SRmNuSnZjbFI1Y0dWelgxOGlMQ0pTWldwbFkzUnBiMjVGY25KdmNpSXNJakV6SWl3aWFYTkZVelVpTENKblpYUkVaWE5qY21sd2RHOXlJaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpYm1GdFpYTWlMQ0puWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKd2NtOXdaWEowZVVselYzSnBkR0ZpYkdVaUxDSndjbTl3SWl3aVpHVnpZM0pwY0hSdmNpSXNJbk5sZENJc0ltaGhjeUlzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpY0hKdmRHOGlMQ0pQWW1wbFkzUkxaWGx6SWl3aVpHVnpZeUlzSWpFMElpd2lVSEp2YldselpVMWhjQ0lzSW0xaGNDSXNJbVpwYkhSbGNpSXNJbTl3ZEdsdmJuTWlMQ0l4TlNJc0ltTmhkR05vUm1sc2RHVnlJaXdpVUdGemMxUm9jbTkxWjJoSVlXNWtiR1Z5UTI5dWRHVjRkQ0lzSW5SNWNHVWlMQ0pqWVd4c1pXUWlMQ0pqWVc1alpXeFFjbTl0YVhObElpd2lSbWx1WVd4c2VVaGhibVJzWlhKRFlXNWpaV3hTWldGamRHbHZiaUlzSW1acGJtRnNiSGxJWVc1a2JHVnlJaXdpWTJobFkydERZVzVqWld3aUxDSnpkV05qWldWa0lpd2labUZwYkNJc0luSmxZWE52Yms5eVZtRnNkV1VpTENKcGMwWnBibUZzYkhsSVlXNWtiR1Z5SWl3aWFYTlNaV3BsWTNSbFpDSXNJbDl3WVhOelZHaHliM1ZuYUNJc0luTjFZMk5sYzNNaUxDSjBhR1Z1SWl3aWJHRnpkR3g1SWl3aVptbHVZV3hzZVNJc0luUmhjQ0lzSW5SaGNFTmhkR05vSWl3aWFHRnVaR3hsY2s5eVVISmxaR2xqWVhSbElpd2liR1Z1SWl3aVkyRjBZMmhKYm5OMFlXNWpaWE1pTENJdUwyTmhkR05vWDJacGJIUmxjaUlzSWpFMklpd2lVSEp2ZUhsaFlteGxJaXdpZVdsbGJHUklZVzVrYkdWeWN5SXNJbEJ5YjIxcGMyVlRjR0YzYmlJc0ltZGxibVZ5WVhSdmNrWjFibU4wYVc5dUlpd2llV2xsYkdSSVlXNWtiR1Z5SWl3aWFXNTBaWEp1WVd3aUxDSmZabWx1WVd4c2VWQnliMjFwYzJVaUxDSmZjSEp2YldselpTSXNJbDl6ZEdGamF5SXNJbDluWlc1bGNtRjBiM0pHZFc1amRHbHZiaUlzSWw5eVpXTmxhWFpsY2lJc0lsOW5aVzVsY21GMGIzSWlMQ0pmZVdsbGJHUklZVzVrYkdWeWN5SXNJbU52Ym1OaGRDSXNJbDk1YVdWc1pHVmtVSEp2YldselpTSXNJbDlqWVc1alpXeHNZWFJwYjI1UWFHRnpaU0lzSWw5cGMxSmxjMjlzZG1Wa0lpd2lYMk5zWldGdWRYQWlMQ0pmWm5Wc1ptbHNiQ0lzSWw5d2NtOXRhWE5sUTJGdVkyVnNiR1ZrSWl3aVkyOXliM1YwYVc1bElpd2ljbVYwZFhKdVUyVnVkR2x1Wld3aUxDSmZZMjl1ZEdsdWRXVWlMQ0pmY0hKdmJXbHpaVVoxYkdacGJHeGxaQ0lzSW01bGVIUWlMQ0pmY0hKdmJXbHpaVkpsYW1WamRHVmtJaXdpWDNKMWJpSXNJbDl5WldwbFkzUkRZV3hzWW1GamF5SXNJbVJ2Ym1VaUxDSjBjbUZqWlZCaGNtVnVkQ0lzSW1KcGRFWnBaV3hrSWl3aVgzQnliM2g1SWl3aVVISnZiV2x6WlZOd1lYZHVKQ0lzSW1kbGJtVnlZWFJ2Y2lJc0luTndZWGR1SWl3aVlXUmtXV2xsYkdSSVlXNWtiR1Z5SWl3aU1UY2lMQ0pzWVhOMElpd2ljM0J5WldGa0lpd2lNVGdpTENKTllYQndhVzVuVUhKdmJXbHpaVUZ5Y21GNUlpd2liR2x0YVhRaUxDSmZabWxzZEdWeUlpd2lZMjl1YzNSeWRXTjBiM0lrSWl3aVgyTmhiR3hpWVdOcklpd2lYM0J5WlhObGNuWmxaRlpoYkhWbGN5SXNJbDlzYVcxcGRDSXNJbDlwYmtac2FXZG9kQ0lzSWw5eGRXVjFaU0lzSWw5aGMzbHVZMGx1YVhRaUxDSmpiMjVqZFhKeVpXNWplU0lzSW1selJtbHVhWFJsSWl3aVgybHVhWFFrSWl3aVgybHVhWFFpTENKMllXeDFaWE1pTENKZmRtRnNkV1Z6SWl3aWNISmxjMlZ5ZG1Wa1ZtRnNkV1Z6SWl3aVkyRnNiR0poWTJzaUxDSmZkRzkwWVd4U1pYTnZiSFpsWkNJc0lsOXlaWE52YkhabElpd2lZbTl2YkdWaGJuTWlMQ0l4T1NJc0lsOXlaWE52YkhabFJuSnZiVk41Ym1OV1lXeDFaU0lzSW1GMGRHVnRjSFFpTENKMGNua2lMQ0l5TUNJc0ltMWhlV0psVjNKaGNFRnpSWEp5YjNJaUxDSnlSWEp5YjNKTFpYa2lMQ0p0ZFd4MGFVRnlaM01pTENKM2NtRndjR1ZrSWl3aWJXRnlhMEZ6VDNKcFoybHVZWFJwYm1kR2NtOXRVbVZxWldOMGFXOXVJaXdpZDNKaGNFRnpUM0JsY21GMGFXOXVZV3hGY25KdmNpSXNJakl4SWl3aWMzQnlaV0ZrUVdSaGNIUmxjaUlzSW5aaGJDSXNJbTV2WkdWaVlXTnJJaXdpYzNWalkyVnpjMEZrWVhCMFpYSWlMQ0psY25KdmNrRmtZWEIwWlhJaUxDSnVaWGRTWldGemIyNGlMQ0poYzBOaGJHeGlZV05ySWl3aWJtOWtaV2xtZVNJc0ltRmtZWEIwWlhJaUxDSXlNaUlzSW0xaGEyVlRaV3htVW1WemIyeDFkR2x2YmtWeWNtOXlJaXdpY21WbWJHVmpkRWhoYm1Sc1pYSWlMQ0pRY205dGFYTmxTVzV6Y0dWamRHbHZiaUlzSWxWT1JFVkdTVTVGUkY5Q1NVNUVTVTVISWl3aVpYSnliM0p6SWl3aVFWQlFURmtpTENKamNtVmhkR1ZEYjI1MFpYaDBJaXdpYm05a1pXSmhZMnRHYjNKUWNtOXRhWE5sSWl3aVgyWjFiR1pwYkd4dFpXNTBTR0Z1Wkd4bGNqQWlMQ0pmY21WcVpXTjBhVzl1U0dGdVpHeGxjakFpTENKZmNISnZiV2x6WlRBaUxDSmZjbVZqWldsMlpYSXdJaXdpWDNKbGMyOXNkbVZHY205dFJYaGxZM1YwYjNJaUxDSmtaV1psY2xKbGMyOXNkbVVpTENKMklpd2laR1ZtWlhKU1pXcGxZM1FpTENKbWFXeHNWSGx3WlhNaUxDSndJaXdpWTJGMFkyZ2lMQ0p5Wldac1pXTjBJaXdpWkdsa1JuVnNabWxzYkNJc0ltUnBaRkpsYW1WamRDSXNJbDl6WlhSSmMwWnBibUZzSWl3aWRHOUtVMDlPSWl3aVpuVnNabWxzYkcxbGJuUldZV3gxWlNJc0luSmxhbVZqZEdsdmJsSmxZWE52YmlJc0ltOXlhV2RwYm1GMFpYTkdjbTl0VW1WcVpXTjBhVzl1SWl3aVoyVjBUbVYzVEdsaWNtRnllVU52Y0hraUxDSnBjeUlzSW1aeWIyMU9iMlJsSWl3aVpuSnZiVU5oYkd4aVlXTnJJaXdpWDJselJtRjBaVk5sWVd4bFpDSXNJbDl6WlhSQmMzbHVZMGQxWVhKaGJuUmxaV1FpTENKallYTjBJaXdpWDNObGRFWjFiR1pwYkd4bFpDSXNJbVoxYkdacGJHeGxaQ0lzSW5KbGFtVmpkR1ZrSWl3aWFXNTBaWEp1WVd4RVlYUmhJaXdpYUdGMlpVbHVkR1Z5Ym1Gc1JHRjBZU0lzSW5ObGRIUnNaWElpTENKZmMyVjBkR3hsVUhKdmJXbHpaVU4wZUNJc0lsOXpaWFIwYkdWUWNtOXRhWE5sVEdGMFpVTmhibU5sYkd4aGRHbHZiazlpYzJWeWRtVnlJaXdpWDJGa1pFTmhiR3hpWVdOcmN5SXNJbDl6WlhSTVpXNW5kR2dpTENKZmMyVjBVbVZxWldOMFpXUWlMQ0pmYzJWMFJtOXNiRzkzYVc1bklpd2lYMmx6Um1sdVlXd2lMQ0pmZFc1elpYUkRZVzVqWld4c1pXUWlMQ0pmY21WalpXbDJaWEpCZENJc0lsOXdjbTl0YVhObFFYUWlMQ0pmWm5Wc1ptbHNiRzFsYm5SSVlXNWtiR1Z5UVhRaUxDSmZjbVZxWldOMGFXOXVTR0Z1Wkd4bGNrRjBJaXdpWDIxcFozSmhkR1ZEWVd4c1ltRmphekFpTENKbWIyeHNiM2RsY2lJc0ltWjFiR1pwYkd3aUxDSmZiV2xuY21GMFpVTmhiR3hpWVdOclFYUWlMQ0ppWVhObElpd2ljSEp2ZUhsaFlteGxJaXdpYzJodmRXeGtRbWx1WkNJc0lsOXpaWFJHYjJ4c2IzZGxaU0lzSW5ONWJtTm9jbTl1YjNWeklpd2lhV2R1YjNKbFRtOXVSWEp5YjNKWFlYSnVhVzVuY3lJc0ltVnVjM1Z5WlVWeWNtOXlUMkpxWldOMElpd2lhR0Z6VTNSaFkyc2lMQ0pmYzJWMGRHeGxVSEp2YldselpVWnliMjFJWVc1a2JHVnlJaXdpZUNJc0lsOXpaWFIwYkdWUWNtOXRhWE5sSWl3aWFYTlFjbTl0YVhObElpd2lZWE41Ym1OSGRXRnlZVzUwWldWa0lpd2lYM05sZEhSc1pWQnliMjFwYzJVd0lpd2lYMk5zWldGeVEyRnNiR0poWTJ0RVlYUmhRWFJKYm1SbGVDSXNJbDltZFd4bWFXeHNVSEp2YldselpYTWlMQ0pmY21WcVpXTjBVSEp2YldselpYTWlMQ0pUZVcxaWIyd2lMQ0owYjFOMGNtbHVaMVJoWnlJc0ltUmxabVZ5SWl3aWNHVnVaR2x1WnlJc0luWmxjbk5wYjI0aUxDSjBiMFpoYzNSUWNtOXdaWEowYVdWeklpd2lZaUlzSW1NaUxDSXVMMkZ1ZVM1cWN5SXNJaTR2WVhONWJtTWlMQ0l1TDJKcGJtUWlMQ0l1TDJOaGJHeGZaMlYwTG1weklpd2lMaTlqWVc1alpXd2lMQ0l1TDJOdmJuUmxlSFFpTENJdUwyUmxZblZuWjJGaWFXeHBkSGtpTENJdUwyUnBjbVZqZEY5eVpYTnZiSFpsSWl3aUxpOWxZV05vTG1weklpd2lMaTltYVd4MFpYSXVhbk1pTENJdUwyWnBibUZzYkhraUxDSXVMMmRsYm1WeVlYUnZjbk11YW5NaUxDSXVMMnB2YVc0aUxDSXVMMjFoY0M1cWN5SXNJaTR2YldWMGFHOWtJaXdpTGk5dWIyUmxZbUZqYXlJc0lpNHZibTlrWldsbWVTNXFjeUlzSWk0dmNISnZiV2x6WlY5aGNuSmhlU0lzSWk0dmNISnZiV2x6YVdaNUxtcHpJaXdpTGk5d2NtOXdjeTVxY3lJc0lpNHZjbUZqWlM1cWN5SXNJaTR2Y21Wa2RXTmxMbXB6SWl3aUxpOXpaWFIwYkdVdWFuTWlMQ0l1TDNOdmJXVXVhbk1pTENJdUwzTjVibU5vY205dWIzVnpYMmx1YzNCbFkzUnBiMjRpTENJdUwzUm9aVzVoWW14bGN5SXNJaTR2ZEdsdFpYSnpMbXB6SWl3aUxpOTFjMmx1Wnk1cWN5SXNJakl6SWl3aWNtVnpiMngyWlZaaGJIVmxTV1pGYlhCMGVTSXNJbUZ6UVhKeVlYa2lMQ0pmYVhSbGNtRjBaU0lzSWw5eVpYTnZiSFpsUlcxd2RIbEJjbkpoZVNJc0lrMWhjQ0lzSW1kbGRFRmpkSFZoYkV4bGJtZDBhQ0lzSW5Ob2IzVnNaRU52Y0hsV1lXeDFaWE1pTENKcGMxSmxjMjlzZG1Wa0lpd2lNalFpTENKVVNFbFRJaXdpZDJsMGFFRndjR1Z1WkdWa0lpd2laR1ZtWVhWc2RGQnliMjFwYzJsbWFXVmtJaXdpWDE5cGMxQnliMjFwYzJsbWFXVmtYMThpTENKdWIwTnZjSGxRY205d2MxQmhkSFJsY200aUxDSlNaV2RGZUhBaUxDSmtaV1poZFd4MFJtbHNkR1Z5SWl3aWNISnZjSE5HYVd4MFpYSWlMQ0pwYzFCeWIyMXBjMmxtYVdWa0lpd2lhR0Z6VUhKdmJXbHphV1pwWldRaUxDSnpkV1ptYVhnaUxDSm5aWFJFWVhSaFVISnZjR1Z5ZEhsUGNrUmxabUYxYkhRaUxDSmxjMk5oY0dWSlpHVnVkRkpsWjJWNElpd2liV0ZyWlU1dlpHVlFjbTl0YVhOcFptbGxaQ0lzSW0xaGEyVk9iMlJsVUhKdmJXbHphV1pwWldSRmRtRnNJaXdpWDE4aUxDSmtaV1poZFd4MFZHaHBjeUlzSW5CeWIyMXBjMmxtYVdWa0lpd2ljSEp2YldsemFXWjVRV3hzSWl3aWNISnZiV2x6YVdacFpYSWlMQ0p6ZFdabWFYaFNaV2RsZUhBaUxDSnBibWhsY21sMFpXUkVZWFJoUzJWNWN5SXNJbkJoYzNObGMwUmxabUYxYkhSR2FXeDBaWElpTENKclpYbFhhWFJvYjNWMFFYTjVibU5UZFdabWFYZ2lMQ0p3Y205dGFYTnBabWxoWW14bFRXVjBhRzlrY3lJc0luQnliMjFwYzJsbWFXVmtTMlY1SWl3aWNISnZiV2x6YVdaNUlpd2lZMjl3ZVVSbGMyTnlhWEIwYjNKeklpd2lhWE5EYkdGemN5SXNJakkxSWl3aVJYTTJUV0Z3SWl3aWJXRndWRzlGYm5SeWFXVnpJaXdpYzJsNlpTSXNJbVY0ZEhKaFkzUkZiblJ5ZVNJc0ltWnZja1ZoWTJnaUxDSlFjbTl3WlhKMGFXVnpVSEp2YldselpVRnljbUY1SWl3aVpXNTBjbWxsY3lJc0ltbHpUV0Z3SWl3aVgybHpUV0Z3SWl3aWNISnZjSE1pTENKallYTjBWbUZzZFdVaUxDSnJaWGxQWm1aelpYUWlMQ0l5TmlJc0ltTmhjR0ZqYVhSNUlpd2lYMk5oY0dGamFYUjVJaXdpWDJaeWIyNTBJaXdpWDNkcGJHeENaVTkyWlhKRFlYQmhZMmwwZVNJc0lsOWphR1ZqYTBOaGNHRmphWFI1SWl3aWQzSmhjRTFoYzJzaUxDSm1jbTl1ZENJc0lsOXlaWE5wZW1WVWJ5SXNJbTlzWkVOaGNHRmphWFI1SWl3aWMzSmpJaXdpYzNKalNXNWtaWGdpTENKa2MzUWlMQ0prYzNSSmJtUmxlQ0lzSWpJM0lpd2ljbUZqWlV4aGRHVnlJaXdpWVhKeVlYa2lMQ0p5WVdObElpd2lNamdpTENKU1pXUjFZM1JwYjI1UWNtOXRhWE5sUVhKeVlYa2lMQ0pwYm1sMGFXRnNWbUZzZFdVaUxDSmZaV0ZqYUNJc0lsOW1iaUlzSWw5cGJtbDBhV0ZzVm1Gc2RXVWlMQ0pmWTNWeWNtVnVkRU5oYm1ObGJHeGhZbXhsSWl3aVgyVmhZMmhXWVd4MVpYTWlMQ0pqYjIxd2JHVjBaV1FpTENKMllXeDFaVTl5VW1WaGMyOXVJaXdpWjI5MFFXTmpkVzBpTENKaFkyTjFiU0lzSWw5bmIzUkJZMk4xYlNJc0ltZHZkRlpoYkhWbElpd2lYMlZoWTJoRGIyMXdiR1YwWlNJc0luTmxibVJsY2lJc0lsOXlaWE4xYkhSRFlXNWpaV3hzWldRa0lpd2lNamtpTENKa2FYWWlMQ0owYjJkbmJHVlRZMmhsWkhWc1pXUWlMQ0prYVhZeUlpd2lUbUYwYVhabFVISnZiV2x6WlNJc0ltZGxkRTVoZEdsMlpWQnliMjFwYzJVaUxDSk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUlpd2lSMnh2WW1Gc1UyVjBTVzF0WldScFlYUmxJaXdpYzJWMFNXMXRaV1JwWVhSbElpd2lVSEp2WTJWemMwNWxlSFJVYVdOcklpd2libVY0ZEZScFkyc2lMQ0pwYzFKbFkyVnVkRTV2WkdVaUxDSnVZWFJwZG1WUWNtOXRhWE5sSWl3aWJtRjJhV2RoZEc5eUlpd2ljM1JoYm1SaGJHOXVaU0lzSW1OdmNtUnZkbUVpTENKa2IyTjFiV1Z1ZEVWc1pXMWxiblFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWVhSMGNtbGlkWFJsY3lJc0ltTnNZWE56VEdsemRDSXNJblJ2WjJkc1pTSXNJbTlpYzJWeWRtVWlMQ0prYVhOamIyNXVaV04wSWl3aU16QWlMQ0pUWlhSMGJHVmtVSEp2YldselpVRnljbUY1SWl3aVgzQnliMjFwYzJWU1pYTnZiSFpsWkNJc0ltbHVjM0JsWTNScGIyNGlMQ0pmYzJWMGRHeGxaRlpoYkhWbFJtbGxiR1FpTENKelpYUjBiR1VpTENJek1TSXNJa05CVGtORlRFeEJWRWxQVGlJc0lsOW9iM2ROWVc1NUlpd2lYM1Z1ZDNKaGNDSXNJbDlwYm1sMGFXRnNhWHBsWkNJc0luTnZiV1VpTENKb2IzZE5ZVzU1SWl3aWFYTkJjbkpoZVZKbGMyOXNkbVZrSWl3aVgyTmhibEJ2YzNOcFlteDVSblZzWm1sc2JDSXNJbDluWlhSU1lXNW5aVVZ5Y205eUlpd2lZMjkxYm5RaUxDSmZZV1JrUm5Wc1ptbHNiR1ZrSWl3aVgyWjFiR1pwYkd4bFpDSXNJbDloWkdSU1pXcGxZM1JsWkNJc0lsOWphR1ZqYTA5MWRHTnZiV1VpTENKZmNtVnFaV04wWldRaUxDSXpNaUlzSWw5ZmFYTkRZVzVqWld4c1pXUWlMQ0l6TXlJc0ltaGhjMUJ5YjNBaUxDSXpOQ0lzSWtoaGJtUnNaVmR5WVhCd1pYSWlMQ0pvWVc1a2JHVWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSmhablJsY2xaaGJIVmxJaXdpWkdWc1lYa2lMQ0p0Y3lJc0luTjFZMk5sYzNORGJHVmhjaUlzSW1aaGFXeDFjbVZEYkdWaGNpSXNJblJwYldWdmRYUWlMQ0pvWVc1a2JHVlhjbUZ3Y0dWeUlpd2lNelVpTENKT1ZVeE1JaXdpUkdsemNHOXpaWElpTENKa1lYUmhJaXdpWDJSaGRHRWlMQ0pmWTI5dWRHVjRkQ0lzSWtaMWJtTjBhVzl1UkdsemNHOXpaWElpTENKdFlYbGlaVlZ1ZDNKaGNFUnBjM0J2YzJWeUlpd2lhWE5FYVhOd2IzTmxjaUlzSW5KbGMyOTFjbU5sY3lJc0lsOXpaWFJFYVhOd2IzTmhZbXhsSWl3aVVtVnpiM1Z5WTJWTWFYTjBJaXdpY21WemIzVnlZMlVpTENKMGNubEVhWE53YjNObElpd2laRzlFYVhOd2IzTmxJaXdpWDNWdWMyVjBSR2x6Y0c5ellXSnNaU0lzSW1RaUxDSjFjMmx1WnlJc0ltbHVjSFYwSWl3aWMzQnlaV0ZrUVhKbmN5SXNJbVJwYzNCdmMyVnlJaXdpY21WbWJHVmpkR1ZrVW1WemIzVnlZMlZ6SWl3aWNtVnpkV3gwVUhKdmJXbHpaU0lzSW1sdWMzQmxZM1JwYjI1eklpd2lhWFJsY21GMGIzSWlMQ0owYUdWdVlXSnNaU0lzSWw5cGMwUnBjM0J2YzJGaWJHVWlMQ0pmWjJWMFJHbHpjRzl6WlhJaUxDSmthWE53YjNObElpd2lYMlJwYzNCdmMyVnlJaXdpTXpZaUxDSjBjbmxEWVhSamFGUmhjbWRsZENJc0ltZHNiMkpoYkU5aWFtVmpkQ0lzSW5SeWVVTmhkR05vWlhJaUxDSnBjMUJ5YVcxcGRHbDJaU0lzSW1WNFkyeDFaR1ZrVUhKdmRHOTBlWEJsY3lJc0lrWjFibU4wYVc5dUlpd2lhWE5GZUdOc2RXUmxaRkJ5YjNSdklpd2lkbWx6YVhSbFpFdGxlWE1pTENKbGJuVnRaWEpoZEdsdmJpSXNJblJvYVhOQmMzTnBaMjV0Wlc1MFVHRjBkR1Z5YmlJc0luSnBaR1Z1ZENJc0luTmhabVZVYjFOMGNtbHVaeUlzSW1selJYSnliM0lpTENKQmNuSmhlVVp5YjIwaUxDSm1jbTl0SWl3aWFYUlNaWE4xYkhRaUxDSnBkQ0lzSW1oaGMwVnVkbFpoY21saFlteGxjeUlzSW1oaGMwMWxkR2h2WkhNaUxDSm9ZWE5OWlhSb2IyUnpUM1JvWlhKVWFHRnVRMjl1YzNSeWRXTjBiM0lpTENKb1lYTlVhR2x6UVhOemFXZHViV1Z1ZEVGdVpGTjBZWFJwWTAxbGRHaHZaSE1pTENKa1pXWmhkV3gwVm1Gc2RXVWlMQ0pEYUdsc1pDSXNJbEJoY21WdWRDSXNJbFFpTENKaGNIQmxibVJsWlNJc0ltMWhlV0psUlhKeWIzSWlMQ0pHWVd0bFEyOXVjM1J5ZFdOMGIzSWlMQ0pwWXlJc0ltWnZieUlzSW1acGJHeGxaRkpoYm1kbElpd2ljSEpsWm1sNElpd2lhV2R1YjNKbElpd2lkRzhpTENKamFISnZiV1VpTENKc2IyRmtWR2x0WlhNaUxDSjJaWEp6YVc5dWN5SXNJazUxYldKbGNpSXNJbEFpWFN3aWJXRndjR2x1WjNNaU9pSkRRVFJDUXl4VFFVRlRRU3hIUVVGSExFZEJRVWNzYVVKQlFXbENReXhUUVVGVExHOUNRVUZ2UWtNc1QwRkJUMEVzVDBGQlQwUXNVVUZCVVVRc1UwRkJVeXhIUVVGSExHMUNRVUZ0UWtjc1VVRkJVVUVzVDBGQlQwTXNTVUZCU1VRc1QwRkJUeXhIUVVGSFNDeFBRVUZQTEVOQlFVTXNTVUZCU1Vzc1JVRkJSU3h2UWtGQmIwSkRMRTlCUVU5RUxFVkJRVVZETEU5QlFVOHNiMEpCUVc5Q1F5eFBRVUZQUml4RlFVRkZSU3hQUVVGUExHOUNRVUZ2UWtNc1QwRkJUMGdzUlVGQlJVY3NUVUZCVFVnc1JVRkJSVWtzVVVGQlVWUXNTMEZCYkZJc1EwRkJkMUlzVjBGQmNVTXNUMEZCVHl4VFFVRlZRU3hGUVVGRlZTeEZRVUZGUXl4RlFVRkZReXhIUVVGSExGTkJRVk5ETEVWQlFVVkRMRVZCUVVWRExFZEJRVWNzU1VGQlNVb3NSVUZCUlVjc1IwRkJSeXhEUVVGRExFbEJRVWxLTEVWQlFVVkpMRWRCUVVjc1EwRkJReXhKUVVGSlJTeEZRVUZyUWl4dFFrRkJWRU1zVTBGQmNVSkJMRkZCUVZFc1NVRkJTVVlzUjBGQlIwTXNSVUZCUlN4UFFVRlBRU3hGUVVGRlJpeEhRVUZCUVN4SFFVRk5MRWRCUVVkSkxFVkJRVVVzVDBGQlQwRXNSVUZCUlVvc1IwRkJRVUVzUjBGQlRTeEpRVUZKVkN4RlFVRkZMRWxCUVVsakxFMUJRVTBzZFVKQlFYVkNUQ3hGUVVGRkxFdEJRVXNzVFVGQlRWUXNSVUZCUldVc1MwRkJTeXh0UWtGQmJVSm1MRVZCUVVVc1NVRkJTV2RDTEVWQlFVVldMRVZCUVVWSExFZEJRVWNzUTBGQlEySXNVVUZCVVN4SlFVRkpVeXhGUVVGRlNTeEhRVUZITEVkQlFVZFJMRXRCUVV0RUxFVkJRVVZ3UWl4UlFVRlJMRk5CUVZORUxFZEJRVzlDTEU5QlFVOWhMRVZCUVd4Q1NDeEZRVUZGU1N4SFFVRkhMRWRCUVVka0xFbEJRV2RDUVN4SlFVRkpjVUlzUlVGQlJVRXNSVUZCUlhCQ0xGRkJRVkZFTEVWQlFVVlZMRVZCUVVWRExFVkJRVVZETEVkQlFVY3NUMEZCVDBRc1JVRkJSVWNzUjBGQlIySXNVVUZCYTBRc1NVRkJNVU1zU1VGQlNXbENMRVZCUVd0Q0xHMUNRVUZVUkN4VFFVRnhRa0VzVVVGQlowSklMRVZCUVVVc1JVRkJSVUVzUlVGQlJVWXNSVUZCUlZjc1QwRkJUMVFzU1VGQlNVUXNSVUZCUlVRc1JVRkJSVVVzU1VGQlNTeFBRVUZQUkN4RlFVRjJZaXhEUVVFeVlpeERRVUZEVnl4RlFVRkZMRU5CUVVNc1UwRkJVMUFzUlVGQlVXWXNSVUZCVDBRc1IwRkROWGhDTEdGQlEwRkRMRVZCUVU5RUxGRkJRVlVzVTBGQlUxRXNSMEZETVVJc1NVRkJTV2RDTEVWQlFXMUNhRUlzUlVGQlVXbENMR3RDUVVNdlFpeFRRVUZUUXl4RlFVRkpReXhIUVVOVUxFbEJRVWxETEVWQlFVMHNTVUZCU1Vvc1JVRkJhVUpITEVkQlF6TkNSU3hGUVVGVlJDeEZRVUZKUXl4VlFVbHNRaXhQUVVoQlJDeEZRVUZKUlN4WFFVRlhMRWRCUTJaR0xFVkJRVWxITEZsQlEwcElMRVZCUVVsSkxFOUJRMGRJTEVWQlIxaHlRaXhGUVVGUmEwSXNTVUZCVFN4VFFVRlZReXhIUVVOd1FpeFBRVUZQUkN4RlFVRkpReXhKUVVkbWJrSXNSVUZCVVhsQ0xGVkJRVlZRTEVsQlFVMHNWMEZEY0VJc1QwRkJUMEVzUlVGQlNWRXNVMEZMWWl4SlFVRkpReXhGUVVGRkxFTkJRVU1zVTBGQlUyNUNMRVZCUVZGbUxFVkJRVTlFTEVkQlEycERMR0ZCUTBFc1NVRkJTVzlETEVWQlEwb3NTVUZCU3l4TlFVRk5MRWxCUVVsc1FpeE5RVUZYTEUxQlFVOXVRaXhIUVVGSmNVTXNSVUZCYVVKeVF5eEZRVU4wUkN4SlFVRkpjME1zUlVGQlYzSkNMRVZCUVZFc1kwRkRia0p6UWl4RlFVRlJkRUlzUlVGQlVTeFhRVU5vUW5WQ0xFVkJRVTkyUWl4RlFVRlJMRlZCUlc1Q0xGTkJRVk4zUWl4SlFVTk1UaXhMUVVGTFR5eHJRa0ZCUVVFc1JVRkRURkFzUzBGQlMxRXNZVUZCUVVFc1JVRkRURklzUzBGQlMxTXNWMEZCWVN4SlFVRkpUQ3hGUVVGTkxFbEJRelZDU2l4TFFVRkxWU3hoUVVGbExFbEJRVWxPTEVWQlFVMHNTVUZET1VKS0xFdEJRVXRYTEc5Q1FVRkJRU3hGUVVOTVdDeExRVUZMV1N4dlFrRkJRVUVzUlVGRFRDeEpRVUZKZGtNc1JVRkJUekpDTEV0QlExaEJMRXRCUVV0aExGbEJRV01zVjBGRFpuaERMRVZCUVV0NVF5eG5Ra0ZGVkdRc1MwRkJTMlVzVlVGQldWb3NSVUY1UkhKQ0xGTkJRVk5oTEVWQlFXbENReXhGUVVGSlF5eEZRVUZWUXl4SFFVTndRMjVDTEV0QlFVdFRMRmRCUVZkWExFdEJRVXRJTEVWQlFVbERMRVZCUVZWRExFZEJRMjVEYmtJc1MwRkJTM0ZDTEdGQlIxUXNVMEZCVTBNc1JVRkJXVXdzUlVGQlNVTXNSVUZCVlVNc1IwRkRMMEp1UWl4TFFVRkxWU3hoUVVGaFZTeExRVUZMU0N4RlFVRkpReXhGUVVGVlF5eEhRVU55UTI1Q0xFdEJRVXR4UWl4aFFVZFVMRk5CUVZORkxFVkJRVzlDTlVJc1IwRkRla0pMTEV0QlFVdFZMR0ZCUVdGakxGTkJRVk0zUWl4SFFVTXpRa3NzUzBGQlMzRkNMR0ZCZVVOVUxGTkJRVk5KTEVWQlFWbERMRWRCUTJwQ0xFdEJRVTlCTEVWQlFVMTBReXhUUVVGWExFZEJRM0JDZFVNc1JVRkJaMEpFTEVkQlNYaENMRk5CUVZORExFVkJRV2RDUkN4SFFVTnlRaXhKUVVGSlZDeEZRVUZMVXl4RlFVRk5SU3hSUVVObUxFZEJRV3RDTEcxQ1FVRlFXQ3hGUVVOUVFTeEZRVUZIV1N4elFrRkRRU3hEUVVOSUxFbEJRVWxZTEVWQlFWZFJMRVZCUVUxRkxGRkJRMnBDVkN4RlFVRk5UeXhGUVVGTlJTeFJRVU5vUWxnc1JVRkJSemxDTEV0QlFVc3JRaXhGUVVGVlF5eEpRWGhJTVVKaUxFVkJRVTFRTEZWQlFWVXJRaXhoUVVGbExGTkJRVk5pTEVkQlEzQkRMRWxCUVVsakxFVkJRVTh2UWl4TFFVRkxaU3hWUVVkb1FpeFBRVVpCWml4TFFVRkxaU3hWUVVGWlJTeEZRVU5xUW1wQ0xFdEJRVXRQTEd0Q1FVRkJRU3hGUVVORmQwSXNSMEZIV0hwQ0xFVkJRVTFRTEZWQlFWVnBReXh0UWtGQmNVSXNWMEZEYWtNc1QwRkJUMmhETEV0QlFVdFBMR3RDUVVkb1FrUXNSVUZCVFZBc1ZVRkJWV3RETEdsQ1FVRnRRaXhYUVVNdlFtcERMRXRCUVV0WkxHOUNRVUZCUVN4SFFVZFVUaXhGUVVGTlVDeFZRVUZWYlVNc05rSkJRU3RDTEZkQlEzWkROMElzUlVGQlN6aENMR05CUTB4dVF5eExRVUZMV1N4dlFrRkJRVUVzU1VGSllrNHNSVUZCVFZBc1ZVRkJWWEZETEdkQ1FVRnJRaXhYUVVNNVFpeFBRVUZQY0VNc1MwRkJTMUVzWVVGQlpWSXNTMEZCUzFjc2IwSkJTWEJEVEN4RlFVRk5VQ3hWUVVGVmMwTXNWMEZCWVN4VFFVRlRlRVVzUlVGQlIzbEZMRWRCUTJwRFFTeEhRVU5CUXl4UlFVRlJReXhQUVVGUFF5eE5RVUZOTEZWQlFWazFSU3hoUVVGaGJVSXNUVUZCVVc1Q0xFVkJRVVUyUlN4TlFVRlJOMFVzUjBGRE5VUXNUVUZEU2pCRkxGRkJRVkZKTEV0QlFVc3NTVUZGWWpORExFdEJRVXMwUXl4WFFVRlhMMFVzU1VGSmVFSjVReXhGUVVGTlVDeFZRVUZWTmtNc1YwRkJZU3hUUVVGVE0wSXNSVUZCU1VVc1IwRkxkRU1zUjBGS2VVSXNTVUZCY2tJd1FpeFZRVUZWZWtRc1UwRkRWaXRDTEVWQlFVMUdMRVZCUTA1QkxFVkJRVXNzVjBGQll5eE5RVUZOUlN4SlFVVklMRzlDUVVGbU1rSXNWMEZEVUVFc1YwRkJWeXhYUVVOUU4wSXNSVUZCUjBVc1NVRkRTaXhSUVVOQkxFbEJRMGh1UWl4TFFVRkxaU3hWUVVGVkxGZEJRMWhGTEVWQlFVZEZMRXRCUlZRc1RVRkJUM1JFTEVkQlEwd3NUVUZCVFN4SlFVRkpiVUlzVFVGQlRTeHZSVUZ0UW01Q2NVSXNSVUZCU3poQ0xHRkJTMDQzUWl4RlFVRk5VQ3hWUVVGVlowUXNXVUZCWXl4VFFVRlZPVUlzUlVGQlNVTXNSVUZCVlVNc1IwRkRPVU51UWl4TFFVRkxXU3h0UWtGRFRFa3NSVUZCYVVJM1FpeExRVUZMWVN4TFFVRk5hVUlzUlVGQlNVTXNSVUZCVlVNc1IwRkZNVU51UWl4TFFVRkxaU3hWUVVGVkxGZEJRMWdyUWl4WFFVRlhMRmRCUTFBM1FpeEZRVUZIT1VJc1MwRkJTeXRDTEVWQlFWVkRMRWxCUTI1Q0xGRkJTMlppTEVWQlFVMVFMRlZCUVZWcFJDeFBRVUZUTEZOQlFWVXZRaXhGUVVGSlF5eEZRVUZWUXl4SFFVTjZRMjVDTEV0QlFVdFpMRzFDUVVOTVZTeEZRVUZaYmtNc1MwRkJTMkVzUzBGQlRXbENMRVZCUVVsRExFVkJRVlZETEVkQlJYSkRia0lzUzBGQlMyVXNWVUZCVlN4WFFVTllSU3hGUVVGSE9VSXNTMEZCU3l0Q0xFVkJRVlZETEUxQlN6bENZaXhGUVVGTlVDeFZRVUZWYTBRc1pVRkJhVUlzVTBGQlUzUkVMRWRCUTJ4RFN5eExRVUZMV1N4dFFrRkRURmNzUlVGQmIwSndReXhMUVVGTFlTeExRVUZOVEN4SFFVVXZRa3NzUzBGQlMyVXNWVUZCVlN4WFFVTlljRUlzUlVGQlVXdERMSFZDUVM5Q2NFSjJRaXhGUVVGTlVDeFZRVUZWWjBRc1dVRkJZeTlDTEVWQlF6bENWaXhGUVVGTlVDeFZRVUZWYVVRc1QwRkJVekZDTEVWQlEzcENhRUlzUlVGQlRWQXNWVUZCVld0RUxHVkJRV2xDTVVJc1IwRnZSSEpEYWtJc1JVRkJUVkFzVlVGQlZXVXNZVUZCWlN4WFFVTXpRbGNzUlVGQldYcENMRXRCUVV0VkxHTkJRMnBDVml4TFFVRkxhMFFzVTBGRFRHeEVMRXRCUVV0WExHOUNRVUZCUVN4RlFVTk1ZeXhGUVVGWmVrSXNTMEZCUzFNc1lVRkhja0pJTEVWQlFVMVFMRlZCUVZWelFpeFhRVUZoTEZkQlEzQkNja0lzUzBGQlMxRXNZMEZEVGxJc1MwRkJTMUVzWVVGQlFVRXNSVUZEVEZJc1MwRkJTMlVzVlVGQlZXWXNTMEZCUzJFc1pVRkpOVUpRTEVWQlFVMVFMRlZCUVZWdFJDeFBRVUZUTEZkQlEzSkNiRVFzUzBGQlMxRXNZVUZCUVVFc1IwRkhWSHBETEVWQlFVOUVMRkZCUVZWM1F5eEZRVU5xUW5aRExFVkJRVTlFTEZGQlFWRnZReXhsUVVGcFFrRXNSMEZGT1VJc1EwRkJRMmxFTEZWQlFWVXNSMEZCUjBNc1lVRkJZU3hIUVVGSFF5eFRRVUZUTEV0QlFVdERMRVZCUVVVc1EwRkJReXhUUVVGVGVFVXNSVUZCVVdZc1JVRkJUMFFzUjBGRGVrVXNZVUZEUVVNc1JVRkJUMFFzVVVGQlZTeFRRVUZUVVN4RlFVRlRhVVlzUlVGQlZVTXNSVUZCY1VKRExFZEJRMnhGTEVsQlFVbERMRWRCUVVGQkxFVkJRMEZETEVWQlFXRXNVMEZCVTBNc1JVRkJSeTlHTEVkQlEzcENiVU1zUzBGQlN6WkVMRkZCUVZGb1J5eEpRVWRpYVVjc1JVRkJhVUlzVTBGQlUycEhMRVZCUVVkclJ5eEhRVU0zUWtFc1JVRkJVVU1zZDBKQlFVRkJMRVZCUTFKRUxFVkJRVkZGTEdWQlFXVkRMRTFCUVUxUUxFVkJRVmxCTEVWQlFWa3NTMEZCVFRORUxFdEJRVTF1UXl4SlFVZHFSWE5ITEVWQlFXdENMRk5CUVZORExFVkJRVk5NTEVkQlEwTXNTVUZCWkN4VFFVRnFRaTlFTEV0QlFVdHhSU3haUVVOUWNrVXNTMEZCUzNORkxHbENRVUZwUWxBc1JVRkJVVkVzVTBGSmJFTkRMRVZCUVd0Q0xGTkJRVk16Unl4RlFVRkhhMGNzUjBGRGVrSkJMRVZCUVZGRExIZENRVUYzUW1oRkxFdEJRVXMyUkN4UlFVRlJhRWNzU1VGSGRFUlRMRVZCUVZGNVFpeFZRVUZWTUVVc1MwRkJUeXhUUVVGVlRDeEhRVU14UWxZc1NVRkRSRUVzUjBGQlFVRXNSVUZEUVhCR0xFVkJRVkY1UWl4VlFVRlZNa1VzWlVGQmFVSnFRaXhGUVVGTmEwSXNkMEpCUTNwRGNrY3NSVUZCVVhsQ0xGVkJRVlUyUlN4WlFVRmpia0lzUlVGQlRXOUNMSE5DUVVVeFF5eEpRVUZKUXl4RlFVRmxkRUlzUlVGQmIwSlpMRWRCUTI1RE1VVXNSVUZCVFN4SlFVRkpjRUlzUlVGQlVXbEdMRWRCUTNSQ04wUXNSVUZCU1dkR0xHVkJRV1V4UlN4TFFVRk5MRWRCUTNwQ0xFbEJRVWwxUlN4RlFVRlRka1VzUzBGQlN5dEZMRlZCUld4Q0xFZEJSRUZ5Uml4RlFVRkpjMFlzV1VGQldVWXNSMEZEV2tFc1lVRkJkMEo0Unl4RlFVRlRMRU5CUTJwRExFbEJRVWw1Uml4RlFVRlZMRU5CUTFaRExIZENRVUZCUVN4RlFVTkJja1VzVVVGQlUwUXNSVUZEVkRaRkxFOUJRVkZCTEVWQlExSk9MR1ZCUVdkQ1lTeEhRVVZ3UWxBc1JVRkJUMHdzVFVGQlRWZ3NSVUZCVlU4c1QwRkJRVUVzUlVGQk1rSndSU3hGUVVGTGNVVXNSMEZEZGtSbExFVkJRV0ZhTEUxQlExUkRMRVZCUVdsQ1N5eFBRVUZCUVN4RlFVRTBRamxGTEVWQlFVdHhSU3hIUVVOMFJISkZMRVZCUVVsMVJpeGhRVUZoU0N4UlFVVnFRbkJHTEVWQlFVazBSU3hwUWtGQmFVSkRMRWRCUlhwQ0xFOUJRVTgzUlN4SFFVZFljRUlzUlVGQlVYbENMRlZCUVZWcFJpeFpRVUZqTEZOQlFWVkZMRkZCUVVGQkxFbEJRMnhEUVN4SFFVTkJiRVlzUzBGQlMzRkZMRlZCUVRaQ0xGRkJRV3BDY2tVc1MwRkJTM0ZGTEZWQlEzUkNja1VzUzBGQlMyMUdMRk5CUVZkRUxFZEJSV2hDYkVZc1MwRkJTM0ZGTEZkQlFUWkNMRkZCUVdwQ2NrVXNTMEZCUzNGRkxGZEJTVGxDTDBZc1JVRkJVWGxDTEZWQlFWVnhSaXhUUVVGWExGZEJRM3BDTEU5QlFYTkRMRlZCUVdJc1VVRkJha0p3Uml4TFFVRkxjVVVzV1VGSGFrSXZSaXhGUVVGUmJVY3NTMEZCVHl4VFFVRlZUQ3hGUVVGVGFVSXNSMEZET1VJc1QwRkJUeTlITEVWQlFWRm5TQ3hSUVVGUlJDeEhRVUZQV2l4TFFVRkxUQ3hOUVVseVF5eEpRVUZKYlVJc1JVRkJSU3hEUVVGRExGTkJRVk42Unl4RlFVRlJaaXhGUVVGUFJDeEhRVU5xUXl4aFFVTkJMRWxCUVVrd1NDeEZRVU50UWl4dlFrRkJXbXhJTEZWQlFYbENhMGdzUlVGQlRXeElMRk5CVFRGRExFbEJRVWx0U0N4RlFVRlhNMGNzUlVGQlVTeFpRVUZTUVN4SFFVTm1Na2NzUlVGQlUwTXNWMEZPVkN4WFFVTkpMRWxCUVZWd1NDeFZRVUZaYlVnc1NVRkJWVzVJTEZGQlFWVnJTQ3hIUVVNeFF5eE5RVUZQTTBnc1NVRkRVQ3hQUVVGUE5FZ3NSMEZKV0RGSUxFVkJRVTlFTEZGQlFWVXlTQ3hIUVVWbUxFTkJRVU5GTEZsQlFWa3NTMEZCUzBNc1JVRkJSU3hEUVVGRExGTkJRVk01Unl4RlFVRlJaaXhGUVVGUFJDeEhRVU12UXl4aFFVTkJMRWxCUVVrclNDeEZRVUZMUXl4UFFVRlBReXhQUVVOb1FpeEhRVUZKUml4RlFVRkpMRU5CUTBvc1NVRkJTVWNzUlVGQlkwZ3NSVUZCUnl4TlFVTnFRa2tzUlVGQlkwb3NSVUZCUnl4TlFVTnlRa2NzUlVGQldTeFRRVUZYUXl4RlFVRlpMRk5CUVZjc1JVRkhiRVJzU1N4RlFVRlBSQ3hSUVVGVkxGTkJRVk5STEVkQlF6RkNMRWxCUVVrclFpeEZRVUZQZGtJc1JVRkJVU3hWUVVObWIwZ3NSVUZCWXpkR0xFVkJRVXMyUml4WlFYRkZka0lzVTBGQlUwTXNSVUZCVDJwQ0xFZEJSMW9zVDBGa1NpeFRRVUZ6UWtFc1JVRkJTMnRDTEVkQlEzWkNMRWxCUVVsdVJpeEZRVVZLTEVkQlJGY3NUVUZCVUdsRkxFbEJRV0ZxUlN4RlFVRkxhVVVzUlVGQlNXdENMRWxCUTFJc2JVSkJRVkJ1Uml4RlFVRnRRaXhEUVVNeFFpeEpRVUZKYjBZc1JVRkJWU3hWUVVGWmFFY3NSVUZCUzJsSExGbEJRVmx3UWl4SFFVRlBMRzFDUVVNNVF6ZEZMRVZCUVV0clJ5eFRRVUZUU0N4SFFVRmpMRWxCUTJoRExFMUJRVTBzU1VGQlNUbElMRVZCUVZGclNTeFZRVUZWU0N4SFFVVm9ReXhQUVVGUGNFWXNSVUZMUlhkR0xFTkJRV0YyUWl4RlFVUk1iRVlzUzBGQlN6QkhMRTlCUlZwRExFMUJRVTE2UWl4RlFVRkxiRVlzVFVGcFFucENMRk5CUVZNMFJ5eEZRVUZaTVVJc1IwRkRha0lzVDBGQlQwRXNSVUZCU1d4R0xFMUJSV1lzVTBGQlV6WkhMRVZCUVdNelFpeEhRVU51UWl4SlFVRkpORUlzUjBGQlV6bEhMRXRCUldJc1QwRkVTVGhITEVWQlFWRXNTVUZCUjBFc1JVRkJVVU1zUzBGQlMwTXNTVUZCU1N4RlFVRkhSaXhGUVVGUk5VSXNSVUZCU1RsR0xGTkJRM2hET0VZc1JVRkJTVFJDTEVkQk9VWkpla2NzUlVGQlN6UkhMR0ZCZVVWNFFqTkpMRVZCUVZGNVFpeFZRVUZWV2l4TFFVRlBMRk5CUVZWcFNDeEhRVU12UWl4SlFVRkpZeXhGUVVGUExFZEJRVWRETEUxQlFVMW9TU3hMUVVGTE1FUXNWVUZCVnl4SFFWZHdReXhQUVVSQmNVVXNSVUZCU3psR0xFdEJRVXRuUml4SFFVTkljRWNzUzBGQlMydEZMRTFCUVUxcFF5eFBRVUZCUVN4UFFVRlJhVUlzUlVGQmMwSkdMRTlCUVVGQkxFbEJWM0JFTlVrc1JVRkJVWGxDTEZWQlFWVnpTQ3hKUVVGTkxGTkJRVlZETEVkQlF6bENMRWxCUTBsRExFVkJRMG9zUjBGR2RVTXNhVUpCUVdwQ1JDeEZRVlZzUWtNc1JVRkJVMVlzVDBGUVZDeEhRVUZKV0N4RlFVRmhMRU5CUTJJc1NVRkJTWE5DTEZGQmJFZGFReXhIUVd0SGIwTklMRWRCUXpWQ1F5eEZRVUY1UWl4UFFVRm9Ra01zUlVGQmRVSkJMRVZCUVdOYUxFOUJSVGxEVnl4RlFVRlRXQ3hGUVV0cVFpeFBRVUZQTlVjc1MwRkJTMnRGTEUxQlFVMXhSQ3hQUVVGQlFTeFBRVUZSU0N4RlFVRnpRa1VzVDBGQlFVRXNUVUZKYkVRc1EwRkJRMnBGTEZOQlFWTXNTMEZCUzNGRkxFVkJRVVVzUTBGQlF5eFRRVUZUTlVrc1JVRkJVV1lzUlVGQlQwUXNSMEZETlVNc1lVRkRRVU1zUlVGQlQwUXNVVUZCVlN4VFFVRlRVU3hGUVVGVGNVb3NSVUZCWTBNc1JVRkJZMjVGTEVkQlF5OUVMRWxCUVVsd1JDeEZRVUZQZGtJc1JVRkJVU3hWUVVObUswa3NSVUZCVjNoSUxFVkJRVXQzU0N4VFFVTm9Ra01zUlVGQlYzcElMRVZCUVV0NVNDeFRRVU5vUWtNc1JVRkJVWHBLTEVWQlFWRXdTaXhQUVVWd1FqRktMRVZCUVZGNVFpeFZRVUZwUW10SkxFMUJRVWt6U2l4RlFVRlJlVUlzVlVGQlZXMUpMRTlCUVZNc1YwRkRjRVFzU1VGQlMzcEZMRVZCUVUwd1JTeGxRVUZuUWl4UFFVRlBia2tzUzBGQlMyOUpMRTFCUVUwc05FSkJTVGRETEVsQlJrRXNTVUZCU1hwSkxFVkJRVlZMTEV0QlExWnhTU3hGUVVGUk1Va3NSVUZEVEVFc1JVRkJVVEpKTEd0Q1FVRnJRaXhEUVVNM1FpeEpRVUZMTTBrc1JVRkJVVFJKTEZWQlFWVkdMRWRCUVZFc1EwRkRka0pCTEVWQlFVMUhMR1ZCUTA1SUxFVkJRVTFKTEZsQlFWbFFMRk5CUld4Q1J5eEZRVUZOU3l4clFrRkZWaXhOUVVkS0xFbEJRVWxETEVWQlFWTm9TaXhGUVVGUmFVb3NiMEpCUTNKQ0xFZEJRV01zVFVGQlZrUXNTVUZCYlVKQkxFVkJRVTlNTEdsQ1FVRnJRaXhEUVVONFF6TkpMRVZCUVZFMlNTeGxRVU5TTjBrc1JVRkJVVGhKTEZsQlFWbFFMRk5CUlhCQ2Rra3NSVUZCVVN0SkxHdENRVVZhTEUxQlJVa3ZTU3hGUVVGUk5ra3NaMEpCUVdkQ04wa3NSVUZCVVRoSkxGbEJRVmxRTEZOQlEyaEVka2tzUlVGQlVXdEtMSE5DUVVOU1VpeEZRVUZSTVVrc1JVRkRVa0VzUlVGQlZXZEtMRWxCUzNSQ2Nrc3NSVUZCVVhsQ0xGVkJRVlVyU1N4dlFrRkJjMElzVjBGRGNFTTVTU3hMUVVGTEswa3NPRUpCUjFSNlN5eEZRVUZSZVVJc1ZVRkJWV2xLTERaQ1FVRXJRaXhYUVVNM1F5eFpRVUZCTEVsQlFVOW9TaXhMUVVGTEswa3NORUpCUTB3dlNTeExRVUZMSzBrc05FSkJRVGhDTEVkQlJ6bERla3NzUlVGQlVYbENMRlZCUVZWM1NTeFZRVUZaTEZOQlFWTlZMRWRCUTI1RExFOUJRVWxCTEVsQlFXTnFTaXhOUVVOa1FTeExRVUZMSzBrc01rSkJRVFpDTEVWQlEyeERMMGtzUzBGQlMydEtMRzFDUVVGQlFTeEpRVWRNYkVvc1MwRkJTemhKTEhkQ1FVTkVPVWtzUzBGQlMyZEtMR2xEUVVOTWFFb3NTMEZCUzJ0S0xHMUNRVUZCUVN4TFFVOXFRalZMTEVWQlFWRjVRaXhWUVVGVk1ra3NaMEpCUVd0Q0xGZEJRelZDTVVrc1MwRkJTMmRLTEdkRFFVTk1hRW9zUzBGQlMyMUtMRmRCU1dJM1N5eEZRVUZSZVVJc1ZVRkJWVzlLTEZGQlFWVXNWMEZEYmtKdVNpeExRVUZMYzBrc2JVSkJRMVowU1N4TFFVRkxiMG9zWjBKQlEweHlRaXhGUVVGTkwwVXNUMEZCVDJoRUxFdEJRVXR4U2l4blFrRkJhVUp5U2l4VlFVRkJRU3hMUVVkMlF6RkNMRVZCUVZGNVFpeFZRVUZWYzBvc1owSkJRV3RDTEZkQlF6VkNja29zUzBGQlMzTktMRlZCUVZrc1IwRkJSM1JLTEV0QlFVczJRaXh0UWtGSGFrTjJSQ3hGUVVGUmVVSXNWVUZCVlhkS0xHVkJRV2xDTEZkQlF5OUNka29zUzBGQlMzZEtMRzlDUVVGQlFTeEhRVWRVYkV3c1JVRkJVWGxDTEZWQlFWVjFTU3hsUVVGcFFpeFhRVU12UWl4UFFVRlBkRWtzUzBGQlMzbEtMR05CUVdkQ2Vrb3NTMEZCU3pCS0xHZENRVWR5UTNCTUxFVkJRVkY1UWl4VlFVRlZORW9zWTBGQlowSXNWMEZET1VJc1QwRkJUek5LTEV0QlFVdDVTaXhqUVVGblFucEtMRXRCUVVzMFNpeGxRVWR5UTNSTUxFVkJRVkY1UWl4VlFVRlZPRW9zYTBKQlFXOUNMRk5CUVZORExFVkJRV3RDUXl4SFFVTTNSQ3hIUVVGSk1Vb3NSVUZCU3pKS0xGRkJRVkZHTEVkQlEySXNTVUZCU3l4SlFVRkpMMHNzUlVGQlNTeEZRVUZIUVN4RlFVRkpLMHNzUlVGQmFVSXhTeXhUUVVGVlRDeEZRVU16UTJsQ0xFdEJRVXMyU2l4clFrRkJhMEpETEVWQlFXbENMMHNzUjBGQlNXZE1MRkZCUlRkRExGRkJRVUVzU1VGQlNVUXNSVUZEVUN4SFFVRm5ReXh0UWtGQmNrSkJMRWRCUTFBc1NVRkJTME1zUlVGQll5eERRVU5tTEVsQlFVbHNUU3hGUVVGSlowc3NSVUZCVTJsRExFZEJRV3RDTTBzc1MwRkJTMkVzUzBGQlN6UkZMR1ZCUTNwREwwY3NTVUZCVFdsTExFbEJRMDQ1U0N4TFFVRkxhVXNzYTBKQlFXdENjRTBzUlVGQlJVRXNSMEZEZWtKclN5eEZRVUZOYmtZc1YwRkJWeTlGTEVWQlFVVkJMRlZCU1ROQ2FVMHNSVUZCYVVKSkxHbENRVUZwUW14TExFOUJTemxETVVJc1JVRkJVWGxDTEZWQlFWVnRTaXhuUWtGQmEwSXNWMEZEYUVNc1NVRkJTVmtzUlVGQmJVSTVTaXhMUVVGTGJVc3NXVUZETlVKdVN5eExRVUZMZFVvc2FVSkJRMHg0UWl4RlFVRk5MMFVzVDBGQlQyaEVMRXRCUVVzMlNpeHJRa0ZCYlVJM1NpeExRVUZOT0Vvc1NVRkhMME40VEN4RlFVRlJlVUlzVlVGQlZYRkxMSGRDUVVFd1FpeFhRVU53UTNCTExFdEJRVXR6U1N4dFFrRkRUSFJKTEV0QlFVczJTaXhyUWtGQmEwSTNTaXhMUVVGTGJVc3NZVUZCUVVFc1IwRkROVUp1U3l4TFFVRkxkVW9zYlVKQlNXSnFUQ3hGUVVGUmVVSXNWVUZCVlcxTExHbENRVUZ0UWl4WFFVTnFRMnhMTEV0QlFVdHJTU3haUVV0UUxFTkJRVU0zUlN4VFFVRlRMRXRCUVV0blNDeEZRVUZGTEVOQlFVTXNVMEZCVTNaTUxFVkJRVkZtTEVWQlFVOUVMRWRCUXpWRExHRkJRMEZETEVWQlFVOUVMRkZCUVZVc1UwRkJVM2ROTEVkQlF6RkNMRWxCUVVscVN5eEZRVUZQZGtJc1JVRkJVU3hWUVVObWVVd3NSVUZCVlhwTUxFVkJRVkVzVTBGQlV6Qk1MRXRCUXpOQ00wTXNSVUZCVjNoSUxFVkJRVXQzU0N4VFFVTm9Ra01zUlVGQlYzcElMRVZCUVV0NVNDeFRRVzFEY0VJc1QwRnFRMEVzVTBGQmNVSXlReXhGUVVGWFF5eEZRVUZKTDBzc1IwRkRhRU1zVDBGQlR5eFRRVUZUT1VJc1IwRkRXaXhKUVVGSk9FMHNSVUZCVldoTUxFVkJRVkZwUml4alFVTjBRbWRITEVWQlFXVXNTVUZCU3l4SlFVRkpOMHdzUlVGQlNTeEZRVUZIUVN4RlFVRkpNRXdzUlVGQlZYSk1MRk5CUVZWTUxFVkJRVWNzUTBGRGRFUXNTVUZCU1RoTUxFVkJRVTlLTEVWQlFWVXhUQ3hIUVVWeVFpeEhRVUZKT0V3c1NVRkJVemRNTEU5QlEwRXNUVUZCVWpaTUxFZEJRV2RDUVN4RlFVRkxPVXNzY1VKQlFYRkNaaXhQUVVNelF5eEhRVUZKYmtJc1lVRkJZV2RPTEVWQlEySXNUMEZCVDJoRUxFVkJRVk0yUXl4SFFVRkpka3dzUzBGQlMzZE1MRVZCUVZNNVRTeFJRVVZ1UXl4SFFVRnZRaXh0UWtGQlZHZE9MRVZCUVhGQ0xFTkJRMjVETEVsQlFVbERMRVZCUVcxQ2FrUXNSVUZCVTJkRUxFZEJRVTB4VEN4TFFVRkxkMHdzUlVGQlV6bE5MRWRCUTNCRUxFZEJRVWxwVGl4SlFVRnhRbWhFTEVWQlEzSkNMRTlCUVU5blJDeEZRVU5LTEVkQlFVbEJMRVZCUTFBc1QwRkJUMnBFTEVWQlFWTTJReXhIUVVGSmRrd3NTMEZCUzNkTUxFVkJRVk01VFN4UlFVVnVReXhIUVVGSmQwTXNSVUZCU3pCTExGTkJRVk5zVGl4SFFVRkpMRU5CUlhwQ0xFbEJSRUVzU1VGQlNUSk5MRVZCUVU5RUxFVkJRVkZOTEVkQlExWkhMRVZCUVVrc1JVRkJSMEVzUlVGQlNWSXNSVUZCUzNCTUxGTkJRVlUwVEN4RlFVRkhMRU5CUTJ4RExFbEJRVWxETEVWQlFVMVVMRVZCUVV0UkxFZEJRMllzUjBGQlNVZ3NSVUZCUzBrc1NVRkJVWEJPTEVWQlFVVnZUaXhIUVVObUxGTkJRVk5NTEVWQlIycENMRTlCUVU4dlF5eEZRVUZUTmtNc1IwRkJTWFpNTEV0QlFVdDNUQ3hGUVVGVE9VMHNTVUZITVVNc1QwRkJUM2xOTEUxQlQySXNRMEZCUTFrc1VVRkJVU3hIUVVGSE4wZ3NVMEZCVXl4TFFVRkxPRWdzUlVGQlJTeERRVUZETEZOQlFWTnlUU3hGUVVGUlppeEZRVUZQUkN4SFFVTjJSQ3hoUVVOQlF5eEZRVUZQUkN4UlFVRlZMRk5CUVZOUkxFZEJRekZDTEVsQlFVazRUU3hIUVVGQlFTeEZRVU5CUXl4RlFVRmxMRWRCVDI1Q0xGTkJRVk5ETEVsQlEweDBUQ3hMUVVGTGRVd3NUMEZCVXl4SlFVRkpSQ3hGUVVGUlJTeGpRVUZqUXl4TFFYVkNOVU1zVTBGQlUwRXNTVUZEVEN4SlFVRkpReXhGUVVGWlRDeEZRVUZoYWswc1QwRkJVeXhGUVVOMFF5eEhRVUZKYzAwc1IwRkJZU3hGUVVOaUxFOUJRVTlNTEVWQlFXRkxMRWRCT0VJMVFpeFBRVGxFUVhCT0xFVkJRVkY1UWl4VlFVRlZORXdzWjBKQlFXdENMR0ZCUTNCRGNrNHNSVUZCVVhsQ0xGVkJRVlUyVEN4aFFVRmxMR0ZCUTJwRGRFNHNSVUZCVVhsQ0xGVkJRVlU0VEN4WlFVRmpMRmRCUVZrc1QwRkJUeXhOUVVOdVJIWk9MRVZCUVZGM1RpeGhRVUZsZUU0c1JVRkJVWGxDTEZWQlFWVXJUQ3hoUVVGbExHRkJTM2hFVWl4RlFVRlJka3dzVlVGQlZUWk1MR0ZCUVdVc1owSkJRVUVzU1VGRGVrSTFUQ3hMUVVGTGRVd3NVMEZEVEhaTUxFdEJRVXQxVEN4UFFVRlBTU3huUWtGQmEwSXNTMEZET1VKT0xFVkJRV0ZxU3l4TFFVRkxjRUlzUzBGQlMzVk1MRlZCU1M5Q1JDeEZRVUZSZGt3c1ZVRkJWVGhNTEZsQlFXTXNWMEZETlVJc1VVRkJRU3hKUVVGSk4wd3NTMEZCUzNWTUxFOUJRWE5DTEVOQlF6TkNMRWxCUVVsUkxFVkJRVkZXTEVWQlFXRXpSU3hOUVVOeVFtaElMRVZCUVUxeFRTeEZRVUZOU2l4blFrRkZhRUlzVDBGRVFVa3NSVUZCVFVvc1owSkJRV3RDTEV0QlEycENhazBzUlVGRldDeFBRVUZQTEUxQlkxZzBUQ3hGUVVGUlJTeGpRVUZuUWl4TFFVTjRRa1lzUlVGQlVYWkdMRTlCV2xJc1YwRkRTU3hIUVVGSmNVWXNSVUZCYVVJc1QwRkJUeXhKUVVGSlJTeEhRVmx3UTBFc1JVRkJVVlVzTUVKQlFUUkNMR0ZCUTNCRFZpeEZRVUZSVnl4M1FrRkJNRUlzVjBGRE9VSXNTVUZCU1VNc1JVRkJjMEkxVGl4RlFVRlJlVUlzVlVGQlZUWk1MR0ZCUTNoRFR5eEZRVUZ4UWpkT0xFVkJRVkY1UWl4VlFVRlZPRXdzV1VGRGRrTlBMRVZCUVhOQ09VNHNSVUZCVVhkT0xHRkJRemxDVHl4RlFVRnpRaTlPTEVWQlFWRjVRaXhWUVVGVkswd3NZVUZEZUVOUkxFVkJRWGxDYUU4c1JVRkJVWGxDTEZWQlFWVTBUQ3huUWtGREwwTk1MRVZCUVZGVkxEQkNRVUUwUWl4WFFVTm9RekZPTEVWQlFWRjVRaXhWUVVGVk5rd3NZVUZCWlUwc1JVRkRha00xVGl4RlFVRlJlVUlzVlVGQlZUaE1MRmxCUVdOTkxFVkJRMmhETjA0c1JVRkJVWGRPTEdGQlFXVk5MRVZCUTNaQ09VNHNSVUZCVVhsQ0xGVkJRVlVyVEN4aFFVRmxUeXhGUVVOcVF5OU9MRVZCUVZGNVFpeFZRVUZWTkV3c1owSkJRV3RDVnl4RlFVTndRMnhDTEVkQlFVRkJMRWRCUlVwQkxFZEJRVUZCTEVWQlEwRTVUU3hGUVVGUmVVSXNWVUZCVlRaTUxHRkJRV1ZPTEVWQlFWRjJUQ3hWUVVGVk5rd3NZVUZEYmtSMFRpeEZRVUZSZVVJc1ZVRkJWVGhNTEZsQlFXTlFMRVZCUVZGMlRDeFZRVUZWT0V3c1dVRkRiRVIyVGl4RlFVRlJkMDRzWVVGQlpYaE9MRVZCUVZGNVFpeFZRVUZWSzB3c1lVRkJaVXdzUlVGRGVFUnVUaXhGUVVGUmVVSXNWVUZCVlRSTUxHZENRVUZyUWl4WFFVTm9ReXhKUVVGSldTeEZRVUZOZGswc1MwRkJTemhNTEdWQlExaFRMRWRCUVRoQ0xFMUJRWFpDUVN4RlFVRkpXaXhyUWtGQmVVSlpMRVZCUVVsYUxHZENRVUZyUWpOTUxGRkJSeTlFYzB3c1NVRkhUQ3hKUVVGSmEwSXNSVUZCUlN4RFFVRkRMRk5CUVZNeFRpeEZRVUZSWml4RlFVRlBSQ3hIUVVOcVF5eGhRVU5CUXl4RlFVRlBSQ3hSUVVGVkxGTkJRVk5STEVWQlFWTm5UaXhIUVVOdVF5eEpRVTFKYlVJc1JVRkRRVU1zUlVGUlFVTXNSVUZtUVVNc1JVRkJXWFJQTEVWQlFWRjFUeXhYUVVOd1FqbEZMRVZCUVZGNlNpeEZRVUZSTUVvc1QwRkRhRUk0UlN4RlFVRlZhRThzUlVGQlVTeFpRVUZaWjA4c1VVRkRPVUo2VFN4RlFVRlBka0lzUlVGQlVTeFZRVU5tYVU4c1JVRkJUV3BQTEVWQlFWRXNVMEZEWkd0UExFVkJRV2xDTTAwc1JVRkJTekpOTEdWQlIzUkNReXhGUVVOQkxESkVRVU5CUXl4RlFVRnRRaXcyUWtGRGJrSkRMRVZCUVcxQ0xHdERRVU51UWtNc1JVRkJiMElzUzBGRGNFSkRMRVZCUVdNc1MwRkRaRU1zUjBGQlFVRXNSVUZGUVVNc1NVRkJOa01zUjBGQk9VSnNUaXhGUVVGTGJVNHNTVUZCU1N4dFFrRkxlRUpETEVsQlFTdERMRWRCUVdwRGNFNHNSVUZCUzIxT0xFbEJRVWtzZFVKQlEzUkNSQ3hKUVVGaGJFNHNSVUZCUzIxT0xFbEJRVWtzYzBKQlJYWkNjRU1zU1VGQkswUXNSMEZCTVVNdlN5eEZRVUZMYlU0c1NVRkJTU3huUTBGRE4wSkVMRWxCUVdGc1RpeEZRVUZMYlU0c1NVRkJTU3dyUWtGRmRrSkZMRVZCUVRoRUxFZEJRVE5EY2s0c1JVRkJTMjFPTEVsQlFVa3NhVU5CUXpOQ1F5eExRVUZqY0U0c1JVRkJTMjFPTEVsQlFVa3NaME5CUlRWQ2JGQXNSVUZCVVhsQ0xGVkJRVlUwVGl3MFFrRkJPRUlzVjBGRE5VTXNTVUZCU1hCS0xFVkJRVk4yUlN4TFFVRkxLMFVzVlVGRGJFSlNMRVZCUVU5R0xGZEJRV2xETEZGQlFXNUNSU3hGUVVGUFJpeFZRVU5XTEZGQlIzUkNMMFlzUlVGQlVYbENMRlZCUVZVMlRpeG5RMEZCYTBNc1YwRkRhRVFzUjBGQmEwTXNTVUZCV2l4UFFVRnFRalZPTEV0QlFVdHhSU3hYUVVGV0xFTkJRMEZ5UlN4TFFVRkxOazRzTWtKQlEwd3NTVUZCU1hoUUxFVkJRVTh5UWl4TFFVTllPRU1zVjBGQlZ5eFhRVU5RZWtVc1JVRkJTM2xRTERaQ1FVTk9MRXRCUjFCNFVDeEZRVUZSZVVJc1ZVRkJWV2RQTEcxRFFVRnhReXhYUVVOdVJFTXNSVUZCYlVJc2JVSkJRMWQyUWl4UFFVRkJRU3hGUVVGelEzcE5MRTlCUjNoRk1VSXNSVUZCVVhsQ0xGVkJRVlZyVHl4NVFrRkJNa0lzVjBGRGVrTnFUeXhMUVVGTGNVVXNWVUZCTmtJc1ZVRkJha0p5UlN4TFFVRkxjVVVzVjBGSE1VSXZSaXhGUVVGUmVVSXNWVUZCVlcxUExITkNRVUYzUWl4WFFVTjBReXhQUVVGM1F5eEpRVUZtTEZWQlFXcENiRThzUzBGQlMzRkZMRmxCUjJwQ0wwWXNSVUZCVVhsQ0xGVkJRVlVyVGl3d1FrRkJORUlzVjBGRE1VTXNSMEZCU1RsT0xFdEJRVXR0VHl4M1FrRkJlVUlzUTBGRE9VSXNTVUZCU1VNc1JVRkJVM0JQTEV0QlFVdHhUeXhuUWtGRGJFSnlUeXhMUVVGTGMwOHNiVU5CUTB4T0xFVkJRVzFDTEhGQ1FVTlhkRUlzUlVGQk5FSXdRaXhGUVVGUmNFOHNVVUZKTVVVeFFpeEZRVUZSZVVJc1ZVRkJWWFZQTEdsRFFVRnRReXhYUVVOcVJIUlBMRXRCUVV0eFJTeFZRVUUyUWl4UFFVRnFRbkpGTEV0QlFVdHhSU3hYUVVjeFFpOUdMRVZCUVZGNVFpeFZRVUZWZDA4c2JVTkJRWEZETEZkQlEyNUVkazhzUzBGQlMzRkZMRmRCUVRaQ0xFOUJRV3BDY2tVc1MwRkJTM0ZGTEZkQlJ6RkNMMFlzUlVGQlVYbENMRlZCUVZWNVR5dzRRa0ZCWjBNc1YwRkRPVU1zVDBGQmVVSXNUMEZCYWtKNFR5eExRVUZMY1VVc1YwRkJjMElzUjBGSGRrTXZSaXhGUVVGUmVVSXNWVUZCVlRoT0xIbENRVUV5UWl4WFFVTjZRemRPTEV0QlFVdHhSU3hWUVVFMlFpeFJRVUZxUW5KRkxFdEJRVXR4UlN4WFFVY3hRaTlHTEVWQlFWRjVRaXhWUVVGVk1FOHNNa0pCUVRaQ0xGZEJRek5EZWs4c1MwRkJTM0ZGTEZkQlFUWkNMRkZCUVdwQ2NrVXNTMEZCUzNGRkxGVkJRMnhDY2tVc1MwRkJTM2RQTEd0RFFVTk1lRThzUzBGQlMzVlBMSEZEUVVOTWRrOHNTMEZCU3l0T0xIVkRRVWxpZWxBc1JVRkJVWGxDTEZWQlFWVnZUeXh6UWtGQmQwSXNWMEZEZEVNc1QwRkJlVUlzVVVGQmFrSnVUeXhMUVVGTGNVVXNWMEZCZFVJc1IwRkhlRU12Uml4RlFVRlJlVUlzVlVGQlZYRkpMRTFCUVZFc1UwRkJVeTlDTEVWQlFWTnhTU3hGUVVGdFFpOVBMRWRCUXpORUxFOUJRVTluVUN4RlFVRkxkRWtzUlVGQlUzRkpMRVZCUVcxQ0wwOHNSMEZCVjBzc1QwRkhka1F4UWl4RlFVRlJjMUVzTmtKQlFTdENMRk5CUVZVelRpeEhRVU0zUXl4SlFVRkpORTRzUlVGQlUycERMRWxCUTJKR0xFVkJRMnRDTEcxQ1FVRlFla3dzUlVGQlowTXNUMEZCV0RST0xFVkJRMUUxVGl4RlFVRkxXaXhGUVVGTGVVOHNWMEZCVjBRc1JVRkJVVFZPTEZGQlFVRkJMRWRCU1hwRk0wTXNSVUZCVVhsUkxEUkNRVUU0UWl4VFFVRlZPVTRzUjBGRE5VTXNTVUZCU1RST0xFVkJRVk5xUXl4SlFVTmlTQ3hGUVVOclFpeHRRa0ZCVUhoTUxFVkJRV2RETEU5QlFWZzBUaXhGUVVOUk5VNHNSVUZCUzFvc1JVRkJTM2xQTEZkQlFWZEVMRVZCUVZFMVRpeFJRVUZCUVN4SFFVbDZSU3hKUVVGSkswNHNSVUZCZVVJc1lVRkROMEl4VVN4RlFVRlJPRTBzWjBKQlFXdENMRmRCUTNSQ0xFZEJRVWx5UkN4RlFVRk5NMFlzYjBKQlFYTkNOazBzUlVGQlR6ZEVMR2RDUVVOdVF5eE5RVUZOTEVsQlFVbHdUU3hOUVVGTkxITkhRVVZ3UWl4SlFVRkxhVkVzUlVGQlR6ZEVMR2xDUVVGdFFqaEVMRWxCUVRoQ0xFTkJRM3BFTEVsQlFVbERMRVZCUVRSQ04xRXNSVUZCVVhsQ0xGVkJRVlZ4VUN4dFFrRkRPVU5ETEVWQlFUSkNMMUVzUlVGQlVYbENMRlZCUVZWclN5eHJRa0ZETjBOeFJpeEZRVUV5UW1oU0xFVkJRVkY1UWl4VlFVRlZkMUFzYTBKQlEycEVUaXhGUVVGUE4wUXNhVUpCUVVGQkxFVkJRMUEwUkN4RlFVRjVRaXhYUVVOeVFpeEhRVUZKYWtnc1JVRkJUVE5HTEc5Q1FVRnpRalpOTEVWQlFVODNSQ3huUWtGRGJrTXNUVUZCVFN4SlFVRkpjRTBzVFVGQlRTeHpSMEZGY0VKV0xFVkJRVkY1UWl4VlFVRlZjVkFzYlVKQlFYRkNSQ3hGUVVOMlF6ZFJMRVZCUVZGNVFpeFZRVUZWYTBzc2EwSkJRVzlDYjBZc1JVRkRkRU12VVN4RlFVRlJlVUlzVlVGQlZYZFFMR3RDUVVGdlFrUXNSVUZEZEVOb1JTeEZRVUZSVlN3MFFrRkRVbXBGTEVWQlFVMDVSaXh0UWtGRFRtZE9MRVZCUVU4M1JDeHBRa0ZCUVVFc1IwRkZXRGxOTEVWQlFWRjVRaXhWUVVGVmNWQXNiVUpCUVhGQ1NTeEZRVU4yUTJ4U0xFVkJRVkY1UWl4VlFVRlZhMHNzYTBKQlFXOUNkMFlzUlVGRGRFTnVVaXhGUVVGUmVVSXNWVUZCVlhkUUxHdENRVUZ2UWtjc1JVRkRkRU53UlN4RlFVRlJWeXd3UWtGRFVteEZMRVZCUVUwM1JpeHBRMEZKWkRWRUxFVkJRVkZ4VWl4dFFrRkJjVUlzVjBGRGVrSXNUMEZCVDFZc1JVRkJUemRFTEdsQ1FVRnRRamhFTEV0QlIzSkRMRWxCUVVsVkxFVkJRV1VzVjBGRFppeEpRVU5KTEVkQlFUSkNMRzFDUVVGb1FrTXNXVUZCTkVJc1EwRkRia01zU1VGQlNVTXNSVUZCVVN4SlFVRkpSQ3haUVVGWkxHVkJSVFZDTEU5QlJFRjRVQ3hGUVVGTGFrTXNUMEZCVHpKU0xHTkJRV05FTEVkQlEyNUNMRk5CUVZORkxFVkJRVTFHTEVkQlEyeENMRWxCUVVsSExFVkJRVmtzUTBGRFdrTXNUMEZCVVVvc1JVRkRVa3NzV1VGQlFVRXNSMEZGU25CRUxFVkJRVWx4UkN4bFFVTkJTQ3hGUVVGWExGVkJRVmNzUTBGQlF6VkxMRTFCUVU5NVN5eEZRVUZOYmxFc1ZVRkRlRU52VGl4RlFVRkpjVVFzWlVGQlpVZ3NSVUZCVnl4VFFVRlZMRU5CUVVNMVN5eE5RVUZQZVVzc1JVRkJUVEZDTEZOQlEzUkVMRWxCUVVscFF5eEZRVUZYTEVsQlFVbFNMRmxCUVZsSExFVkJRVXROTEdOQlFXVk1MRWRCUTI1RUxFOUJRVkUxVUN4RlFVRkxha01zVDBGQlR6SlNMR05CUVdOTkxFbEJSVzVETEUxQlFYRkNMRzFDUVVGV1JTeFBRVU5XVkN4RlFVRlJMRWxCUVVsVExFMUJRVTBzWlVGRGRFSnNVU3hGUVVGTGFrTXNUMEZCVHpKU0xHTkJRV05FTEVkQlEyNUNMRk5CUVZORkxFVkJRVTFHTEVkQlEyeENMRWxCUVVsUExFVkJRVmNzU1VGQlNVVXNUVUZCVFZBc1JVRkJTMDBzWTBGQlpTeERRVU42UTBnc1dVRkJRVUVzU1VGTFNpeFBRVWhCUlN4RlFVRlRTQ3hQUVVGVFNpeEZRVU5zUWk5RExFVkJRVWx4UkN4bFFVRmxReXhGUVVGVkxGVkJRVmNzUTBGQlEyaE1MRTFCUVU5NVN5eEZRVUZOYmxFc1ZVRkRkRVJ2VGl4RlFVRkpjVVFzWlVGQlpVTXNSVUZCVlN4VFFVRlZMRU5CUVVOb1RDeE5RVUZQZVVzc1JVRkJUVEZDTEZWQlF6ZERMMDRzUlVGQlMycERMRTlCUVU4eVVpeGpRVUZqVFN4UFFVZHNRMUFzUlVGQlVWVXNVMEZCVTBNc1dVRkJXU3huUWtGRE0wSkRMR2RDUVVGblFpeHRRa0ZCUVN4SFFVRnRRaXhGUVVGaExFbEJRM1JFY2xFc1JVRkJTMnBETEU5QlFVOHlVaXhqUVVGalJDeEhRVU51UWl4VFFVRlRSU3hGUVVGTlJpeEhRVU5zUWl4SlFVRkpUeXhGUVVGWFJ5eFRRVUZUUXl4WlFVRlpMR1ZCUjNCRExFOUJSa0ZLTEVWQlFWTkxMR2RDUVVGblFsWXNSVUZCUzAwc1pVRkJRVUVzUjBGQlpTeEZRVU42UTFJc1NVRkRTWHBRTEVWQlFVdHFReXhQUVVGUE1sSXNZMEZCWTAwc1MwRkhOVU1zVFVGQlQzaFRMRWxCUTFRc1QwRkJUeXhYUVVOSUxFOUJRVUVzUjBGNlExY3NSMEUyUTJZNFV5eEZRVU5KZEZFc1JVRkJTMmxETEU5QlEwVXNWMEZEU0N4UFFVRlBReXhSUVVGUmNVOHNTMEZCUzJwTExFMUJRVTF3UlN4UlFVRlRUU3haUVVkc1EzaERMRVZCUVV0cVF5eFBRVXRJTEZOQlFWTTBVaXhIUVVOYUxFbEJRVWsxU2l4RlFVRmhMRXRCUVU4MFNpeEZRVUZMVFN4alFVTjZRazhzUlVGQlUzaFJMRVZCUVV0cVF5eFBRVUZQWjBrc1IwRkRla0lzVVVGQlMzbExMRWxCUTB4QkxFVkJRVTlzU3l4TlFVRk5kRWNzUlVGQlMycERMRTlCUVZFc1IwRkJSeXRKTEUxQlFVMW9TU3hMUVVGTE1FUXNWVUZCVnl4TFFVRkJMRWxCVWpWRExGZEJRMGdzVDBGQlFTeEhRV0ZvUWl4VFFVRlRhVThzUlVGQmIwTmtMRVZCUVUxeVVTeEhRVU12UXl4TlFVRlBMRU5CUVVOQkxGRkJRVk5CTEVkQlIzSkNMRWxCUVVsdlVpeEZRVUY1UWl4RFFVTjZRa01zWlVGQlowSkdMRVZCUTJoQ1J5eHBRa0ZCYTBKSUxFVkJRMnhDU1N4blFrRkJhVUpLTEVWQlEycENTeXhuUWtGQmFVSk1MRVZCUTJwQ1RTeHBRa0ZCYTBKT0xFVkJRMnhDVHl4bFFVRm5RaXhUUVVGVGNrSXNSVUZCVFhKUkxFVkJRVk13U1N4SFFVTndReXhOUVVGUExFTkJRVU14U1N4UlFVRlRRU3hGUVVGVE1Fa3NUVUZCVDBFc1NVRkZja05wU2l4UlFVRlRMRk5CUVZOMFFpeEZRVUZOYzBJc1IwRkRjRUlzVFVGQlR5eERRVUZEUVN4UlFVRlRRU3hKUVVWeVFrTXNiVUpCUVc5Q0xGTkJRVlYyUWl4RlFVRk5OVUlzUlVGQlVYcFBMRWRCUTNoRExFMUJRVThzUTBGQlEzbFBMRTlCUVZGQkxFVkJRVkY2VHl4UlFVRlRRU3hKUVVWeVF6WlNMR2xDUVVGclFsWXNSMEZIYkVKWExFVkJRV3RDTEZOQlFWVjZRaXhIUVVNMVFpeEpRVUZKTUVJc1IwRkJRVUVzUlVGRFNpeEpRVU5KUVN4RlFVRnRRbVlzUlVGQlowSm9TeXhOUVVGTkxFdEJRVTA1UkN4WFFVTnFSQ3hOUVVGUGFFWXNSMEZEVEd0TExFVkJRVTF1Uml4WFFVRlhMMFVzUjBGRGFrSTJWQ3hIUVVGQlFTeEZRVWRLTEVsQlFVbERMRWRCUVVGQkxFVkJRMG9zU1VGRFNVRXNSVUZCWjBJdlFpeEZRVUZoU1N4RlFVTnFRbVVzUlVGQmRVSm1MRWRCUVUxeVNpeE5RVUZOTEV0QlFVMDVSQ3haUVVOMlJDeE5RVUZQYUVZc1IwRkRUR3RMTEVWQlFVMXVSaXhYUVVGWEwwVXNSMEZEYWtJNFZDeEhRVUZCUVN4RlFVZEtMRTlCUVU5QkxFZEJRV2xDUkN4SFFXMUVOVUlzVTBGQlUwVXNTVUZCY1VJc1QwRkJRU3hGUVhkQ09VSXNVMEZCVTBNc1JVRkJiMEpETEVWQlFWVjRUU3hGUVVGVGVVMHNSMEZETlVNc1NVRkJTWEJUTEVWQlFWVkxMRXRCUTJRc1NVRkRTVGhTTEVWQlFWTjRUU3hGUVVGVGVVMHNSVUZCVVN4VFFVRlRReXhIUVVNdlFpeEhRVUYzUWl4dFFrRkJZa0VzUlVGRFVDeE5RVUZOTEVsQlFVbDRUQ3hWUVVGVkxIRkRRVU5CYmtjc1JVRkJTMnRITEZOQlFWTjVUQ3hKUVVWMFEzSlRMRVZCUVZGelV5dzBRa0ZCTkVKRUxFdEJSVEZETEUxQlFVOXVWU3hIUVVOTUxFOUJRVTlCTEVkQlNXWXNVMEZCVTNGVkxFVkJRWFZEUml4SFFVTTFReXhKUVVGTGFGTXNTMEZCUzNOSkxHbENRVUZyUWl4UFFVRlBkRWtzUzBGRmJrTXNTVUZCU1cxVExFVkJRVzFDYmxNc1MwRkJTMjFMTEdsQ1FVRkJRU3hKUVVONFFtZEpMRVZCUTBrNVVpeEZRVUZMTWtvc1VVRkJVVzFKTEVkQlEySkJMRVZCUVdsQ0wxRXNTMEZCU3pSUkxFZEJSWFJDYUZNc1MwRkJTMmxHTEdGQlFXRXNRMEZCUTJ0T0xFVkJRV3RDU0N4SlFVZDZRMmhUTEV0QlFVdHBSaXhoUVVGaEswMHNSMEZKTVVJc1UwRkJVMGtzU1VGRFRDeFBRVUZQY0ZNc1MwRkJTM2RLTEdWQlIyaENMRk5CUVZNMlNTeEZRVUYzUWt3c1IwRkROMEpvVXl4TFFVRkxkMG9zWlVGQmFVSjNTU3hGUVVjeFFpeFRRVUZUVFN4SlFVTk1kRk1zUzBGQlN6UkpMSGxDUVVGQlFTeEZRVU5NTlVrc1MwRkJTM2RLTEc5Q1FVRkJRU3hGUVVkVUxGTkJRVk1yU1N4RlFVRXdRalZLTEVWQlFWRTJTaXhIUVVOMlF5eEhRVUZ2UWl4SlFVRlFMRVZCUVZKQkxFZEJRV3RDTEVOQlEyNUNlRk1zUzBGQlN6UkpMRzlDUVVGelFrUXNSVUZETTBJc1NVRkJTVGhLTEVWQlFUUkNPVW9zUlVGQlQwa3NaME5CUVVGQkxFbEJRMjVETUVvc1NVRkRRVUVzUlVGQk5FSXNSMEZGYUVNNVNpeEZRVUZQU1N3eVFrRkJOa0l3U2l4RlFVRTBRaXhGUVVWb1JDeEpRVUZRTEVWQlFWSkVMRWxCUVc5Q04wb3NSVUZCVDNaRUxGbEJRelZDY0VZc1MwRkJTMmRHTEZsQlFWa3lSQ3hGUVVGUGVFUXNWVUUzU0doRE4wY3NSVUZCVVRKUkxFOUJRVk1zVTBGQlUzbEVMRWRCVTNSQ0xFZEJVRWtzYjBKQlJFcEJMRVZCUVU4MVRTeFBRVUZQTkUwc1RVRkZUa0VzUlVGQlMzUklMR2RDUVVOTU9VMHNSVUZCVVRoTkxHMUNRVU5CYzBnc1JVRkJTM1JJTEdsQ1FVRnRRamxOTEVWQlFWRnhVaXh6UWtGRGVFTllMRXRCUjBvc1lVRkJZekJFTEVWQlFVMHNRMEZEY0VJc1NVRkJTVU1zUlVGQmFVSkVMRVZCUVV0cVJpeFRRVU14UW5kQ0xFVkJRVTk0UWl4WFFVRmhhMFlzUlVGRGNFSnFSaXhGUVVGdFFuVkNMRVZCUVU5NFFpeFRRVVYwUW5CT0xFVkJRVXN3U3l4VFFVRlRORWdzU1VGRFZpeHhRa0ZCYzBKQkxFbEJRM1JDYWtZc1NVRkJjVUpwUml4RlFVRmxha1lzYTBKQlNXaEVMRWRCUVVrc2FVSkJRV3RDWjBZc1IwRkJVVUVzUlVGQlMzWkxMR1ZCUVdsQ09FY3NSVUZCVHpsSExHRkJRV01zUTBGRGNrVXNSMEZCU1Vvc1JVRkJUVE5HTEd0Q1FVTk9MRTFCUVUwc1NVRkJTWEJFTEUxQlEwNHNkMFJCUlZKV0xFVkJRVkY1UWl4VlFVRlZObE1zZFVKQlEyUk9MRVZCUTBwb1ZTeEZRVUZSZVVJc1ZVRkJWVEpGTEdWQlFXbENOazRzUlVGRGJrTnFWU3hGUVVGUmVVSXNWVUZCVlc5TExGVkJRVmxwU1N4RlFVTTVRamxVTEVWQlFWRjVRaXhWUVVGVmEwWXNZVUZCWlc5T0xFVkJRMnBETDFRc1JVRkJVWGxDTEZWQlFWVnJVeXcwUWtGRFpFTXNSVUZEU2pWVUxFVkJRVkY1UWl4VlFVRlZPRk1zVTBGQlYyaENMRVZCUXpkQ2JFNHNSVUZCZDBJMFRpeEZRVU40UW5SRUxFVkJRVTg1Unl4alFVRkJRU3hGUVZkWUxFMUJWRWtzWlVGQlowSjFTeXhKUVVOYVFTeEZRVUZMU1N4aFFVRmxOMFFzUlVGQlR6WkVMRmxCUXpOQ04wUXNSVUZCVHpaRUxGbEJRVUZCTEVWQlExQjRWU3hGUVVGUmVVSXNWVUZCVldkVUxGZEJRV0YwUWl4SlFVTjJRbWxDTEVWQlFVdEpMRmxCUVdNM1JDeEZRVUZQTmtRc1lVRkRiRU0zUkN4RlFVRlBOa1FzV1VGQlFVRXNSVUZEVUhoVkxFVkJRVkY1UWl4VlFVRlZaMVFzVjBGQllXNUNMRWxCUjJoRGRGUXNSMEZMV0VFc1JVRkJVWGxDTEZWQlFWVm5WQ3hYUVVGaGJrSXNSVUZETDBKMFZDeEZRVUZSZVVJc1ZVRkJWVGhUTEZOQlFWY3NVMEZCVTJZc1JVRkJWWGhOTEVWQlFWTjVUU3hIUVVOeVJDeEpRVU5KUkN4RlFVRlRlRTBzUlVGQlUzbE5MRWRCUTNCQ0xFMUJRVTlzVlN4SFFVTk1MRTlCUVU5QkxFbEJSMlpUTEVWQlFWRjVRaXhWUVVGVmIwc3NWVUZCV1N4aFFVTTVRamRNTEVWQlFWRjVRaXhWUVVGVmEwWXNZVUZCWlN4VFFVRlZLMDRzUzBGRE0wTXhWU3hGUVVGUmVVSXNWVUZCVld0VExEUkNRVUU0UWl4VFFVRlRSQ3hMUVVkNlJERlVMRVZCUVZGNVFpeFZRVUZWY1ZBc2JVSkJRWEZDTEdGQlEzWkRPVkVzUlVGQlVYbENMRlZCUVZWclN5eHJRa0ZCYjBJc1lVRkRkRU16VEN4RlFVRlJlVUlzVlVGQlZYZFFMR3RDUVVGdlFpeGhRVU4wUTJwU0xFVkJRVkY1UWl4VlFVRlZObE1zZFVKQlFYbENMR0ZCUXpORGRGVXNSVUZCVVhsQ0xGVkJRVlV5UlN4bFFVRnBRaXhUUVVGVmFVVXNSVUZCVVRaS0xFdEJiVVZ5UkN4SlFVRkpOMDRzUlVGTVNpeFRRVUU0UW1kRkxFVkJRVkUyU2l4SFFVTmtMRWxCUVZBc1JVRkJVa0VzU1VGQmIwSTNTaXhGUVVGUGRrUXNXVUZETlVKd1JpeExRVUZMWjBZc1dVRkJXVEpFTEVWQlFVOTRSQ3hYUVV0b1F5eFRRVUZUVGl4SlFVTk1MRWxCUVVsdVJpeEZRVUZOVFN4TFFVRkxiVVlzVTBGRFppeFpRVUZCTEVsQlFVbDZSaXhIUVVOSlFTeGhRVUZsY0VJc1JVRkRXRzlDTEVWQlFVbDFWQ3hqUVVOSGRsUXNSVUZCU1RKR0xHRkJRVUZCTEVWQlRXaENNMFlzUlVGSFdDeFRRVUZUT0ZBc1NVRkRUSGhRTEV0QlFVdDFUQ3hQUVVGVExFbEJRVWxETEVWQlFXTjRUQ3hMUVVGTE9Fd3NaMEpCUjNwRExGTkJRVk15UkN4RlFVRm5RM2xFTEVWQlFVOURMRWRCUXpWRExFZEJRVWx1Unl4RlFVRmxhMGNzUjBGQlVTeERRVU4yUWl4SlFVRkpia2dzUlVGQlVTOU1MRXRCUVV0MVRDeFBRVWxxUWl4UlFVRkJMRWxCU0VsUkxFZEJRMGx2U0N4SlFVRlpjRWdzUlVGQlVVRXNSVUZCVFhGSUxHTkJRVUZCTEVsQlJUbENja2dzUlVGRFFVRXNSVUZCVFhOSUxHbENRVUZwUWtnc1VVRkRjRUlzU1VGQlMwRXNSVUZCVFVrc2FVSkJRV3RDTEVOQlEyaERMRWxCUVVsRExFVkJRVk5ETEVWQlFYRkNUaXhIUVVOc1F6ZFRMRVZCUVV0dlZDeHJRa0ZCYTBKUUxFVkJRVThzVVVGRE1VSkxMRVZCUVU5c1RpeFJRVUZWTEV0QlFVOXJUaXhGUVVGUE4xRXNUVUZCVFdkU0xFdEJRVXNzVDBGRE9VTnlWQ3hGUVVGTGIxUXNhMEpCUVd0Q1VDeEZRVUZQTEc5Q1FVRkJMRXRCU3pGRExGTkJRVk40UkN4SlFVTk1NVkFzUzBGQlMzVk1MRmxCUVVGQkxFVkJlVVJVTEZOQlFWTnZSQ3hGUVVGTGRFa3NSVUZCVTNGSkxFVkJRVzFDTDA4c1IwRkRkRU1zUjBGQlMzTlFMRVZCUVU5NFFpeFRRVUZhTEVOQlEwRXNTVUZEU1d4Q0xFVkJSRUVyUlN4RlFVRlZMRWxCUVVsNFJTeEZRVUZSZWtjc1IwRkZNVUlzUjBGQlNYRkpMRVZCUTBFdlR5eEZRVUZSYzBzc2EwSkJRV3RDY1Vnc1VVRkRka0lzUjBGQlNYSkRMRVZCUVU4M1JDeHJRa0ZCYjBKdFFpeEZRVUZOYWs4c1JVRkJVWGRPTEdkQ1FVTm9SRk1zUlVGQlNUaEhMR2xDUVVGcFFpOUNMRTlCUTJ4Q0xFTkJRMGdzU1VGQlNXbERMRVZCUVZORExFVkJRWEZDYkVNc1IwRkRiRU5CTEVWQlFWRTFUeXhOUVVGUk5sRXNSVUZCVDJ4T0xGRkJRVlVzUzBGQlQydE9MRVZCUVU4M1VTeE5RVUZOWjFJc1MwRkJTeXhOUVVkNlJHcERMRVZCUVdkQ0xGVkJRVmRJTEVsQlF6VkNjVU1zUlVGQmEwSnlReXhGUVVGVExFbEJRVUVzU1VGeFJHNURMRk5CUVZOelF5eEZRVUZYYkZJc1IwRkZhRUlzU1VGRVFTeEpRVUZKYUVRc1JVRkJUU3hIUVVORVdDeEZRVUZKTEVWQlFVZEJMRVZCUVVreVJDeEZRVUZOZEVRc1UwRkJWVXdzUlVGQlJ5eERRVU51UXl4SlFVRkpPRlVzUlVGQlQyNVNMRVZCUVUwelJDeEhRVU5pSzFVc1JVRkJZeXg1UWtGQk1rSkVMRWRCUTNwRGVrY3NSVUZCYTBJeVJ5eExRVUZMUml4SFFVTjJRa2NzUlVGQmEwSkdMRWRCUVdWSExFVkJRV0ZLTEVkQlF6bERReXhKUVVGblFrVXNTVUZEV2pGSExFZEJRWGRETEUxQlFXNUNkVWNzUlVGQlMwc3NUMEZCVHl4TFFVTnFRMHdzUlVGQlR5eFBRVUZUUVN4SFFVVndRbTVWTEVWQlFVa3dRaXhMUVVGTGVWTXNTVUZIYWtJc1QwRkJUMjVWTEVWQmFVSllMRk5CUVZNNFZDeEZRVUZ4UWs0c1IwRkRNVUlzU1VGQlNYaFJMRVZCUVZGM1VTeEZRVUZOZUZFc1RVRkRaREpFTEVWQlFWVTJUU3hGUVVGTk0wMHNWMEZIY0VJc1QwRkdRVGRFTEVWQlFYbENMR2xDUVVGV1FTeEhRVUZ6UWtFc1JVRkJUWFJFTEU5QlFWTXNSVUZxUW5oRUxGTkJRVFJDT0ZRc1IwRkZlRUlzU1VGRVFTeEpRVUZKZUZFc1JVRkJVWGRSTEVWQlFVMTRVU3hOUVVGTmVWSXNVVUZCVVN4UlFVRlRMRWxCUVVsRExFMUJRVTBzVFVGRE1VTnlWaXhGUVVGSkxFVkJRVWRCTEVWQlFVa3lSQ3hGUVVGTmRFUXNVMEZCVlV3c1JVRkJSeXhEUVVOdVF5eEpRVUZKT0ZVc1JVRkJUMjVTTEVWQlFVMHpSQ3hIUVVOcVFpeEhRVUZKTEhsQ1FVRXlRamhWTEVkQlFWRjZSeXhGUVVGclFqSkhMRXRCUVV0R0xFZEJRekZFTEUxQlRWSXNUMEZJU1RsVkxFVkJRVWtzUjBGQmJVSXNaVUZCWkcxVkxFVkJRVTFzUkN4UFFVTm1kRTRzUlVGQlVVRXNSVUZCVFhsRkxFMUJRVTF3U1N4SlFVVnFRakpFTEVWQldGZ3NRMEZyUW5GRGQxRXNSMEZCVXl4RFFVRkRMSGRDUVVOd1F5eERRVU5JTjAwc1VVRkJVMEVzUlVGRFZETkVMRTFCUVhGQ0xHVkJRV1IzVVN4RlFVRk5iRVFzUzBGQmQwSjBUaXhGUVVGUmExSXNSVUZCVjJ4U0xFbEJTV2hGTEZOQlFWTnBVaXhGUVVGclFsUXNSVUZCVDIxQ0xFVkJRVTlETEVkQlEzSkRMRWRCUVhWQ0xHOUNRVUZhUXl4UlFVRjVRaXhEUVVOb1F5eEpRVUZKYkU4c1JVRkRTaXhIUVVGSmFFY3NSVUZCU3pCTExGTkJRVk50U1N4SFFVRlJMRU5CUTNSQ0xFbEJRVWw0VVN4RlFVRlJkMUVzUlVGQlRYaFJMRTFCUTJ4Q01rUXNSVUZCVldkUExFVkJRVkZvU0N4RlFVRlpNMHNzUlVGQlQzZFJMRkZCUlhKRE4wMHNSVUZCVldkUExFVkJRVkZITEU5QlFVOTBRaXhIUVVWRUxHMUNRVUZxUW5aSExFVkJRMUJCTEVWQlFXRjBSeXhGUVVGVGFVOHNSMEZEVVN4dFFrRkJhRUpETEZGQlFWRkZMRXRCUTBNc2FVSkJRV2hDUml4UlFVRlJSU3hMUVVObVJpeFJRVUZSUlN4SlFVRkpjRThzU1VGTGVFSXNVMEZCVXpKSUxFVkJRVzFDWjBNc1JVRkJUVEJGTEVWQlFXTjBSeXhGUVVGUmVrOHNSMEZEY0VRc1NVRkJTV2RXTEVkQlFVRkJMRVZCUTBvc1NVRkRaME1zYlVKQlFXcENSQ3hKUVVOUVF5eEhRVUZCUVN4RlFVTmhMSEZDUVVGVU0wVXNSVUZEUVRCRkxFVkJRV0V2VlN4SFFVVmlLMVVzUlVGQllYUkhMRVZCUVZGNlR5eEpRVWN2UWl4TlFVRlBPVUlzUjBGRFRHdExMRVZCUVUxdVJpeFhRVUZYTDBVc1IwRkhVaXgxUWtGQlZHMVRMRVZCUTB0NVFpeEZRVUZuUW5wQ0xFVkJRVTAxUWl4RlFVRlJlazhzU1VGQllXZFdMRWRCUXpWRGFFSXNSVUZCYTBKMlJpeEZRVUZSTEhkQ1FVYzVRbkZFTEVWQlFXZENla0lzUlVGQlRYSlJMRWRCU1RsQ0xGTkJRVk5wVml4RlFVRmxNVkFzUjBGRGNFSXNTVUZCU1RKUUxFVkJRMG9zUjBGQmJVSXNiVUpCUVZJelVDeEZRVU5RTWxBc1JVRkJUU3hqUVVORU0xQXNSVUZCU1RoTExFMUJRVkVzWVVGRFlpeFJRVU5FTEVOQlNVZ3NSMEZJUVRaRkxFVkJRVTB6VUN4SFFVRXJRaXh0UWtGQmFrSkJMRVZCUVVseFFpeFRRVU5zUW5KQ0xFVkJRVWx4UWl4WFFVRmhiRWNzUlVGQlMydEhMRk5CUVZOeVFpeEhRVU5rTERSQ1FVTkdOazhzUzBGQlMyTXNSMEZEZEVJc1NVRkZTVUVzUlVGRVlVTXNTMEZCUzBNc1ZVRkJWVGRRTEVkQlIyaERMRTFCUVUxeVNDeEpRVWxUTEVsQlFXWm5XQ3hGUVVGSmVsWXNVMEZEU25sV0xFVkJRVTBzYVVKQlIyUXNUVUZCVVN4TFFVZGFMRk5CUVdOQkxFZEJSVllzVDBGQlNVRXNSVUZCU1hwV0xFOUJSRThzUjBGRlNubFdMRVZCUlVwQkxFVkJRVWxITEU5QlFVOHNSVUZCUjBNc1NVRkJaMElzVFVGTWVrTXNRMEZJZDBKS0xFZEJRVThzY1VKQlZ5OUNMRk5CUVZNelJpeEpRVU5NTEUxQlFXOURMRzFDUVVGMFFtZEhMRVZCUjJ4Q0xFbEJRVWxxUWl4RlFVRmxMRmRCUVdFc1QwRkJRU3hIUVVNMVFtdENMRVZCUVhGQ0xIZERRVU42UWl4VFFVRlRReXhGUVVGamRrSXNSMEZEYmtJc1NVRkJTWGRDTEVWQlFWVjRRaXhGUVVGTGVVSXNUVUZCVFVnc1IwRkRla0lzUjBGQlNVVXNSVUZEUVN4TlFVRlBMRU5CUTBoRkxGTkJRVlZHTEVWQlFWRXNSMEZEYkVKNFFpeExRVUZOTWtJc1UwRkJVMGdzUlVGQlVTeEhRVUZKTEV0QkswTjJReXhUUVVGVE4wb3NSVUZCWXpkRExFZEJRMjVDTTBrc1MwRkJTMjlVTEZGQlFWVjZTeXhGUVVObU0wa3NTMEZCUzNsV0xHbENRVUZ0UWl4RlFVTjRRaXhKUVVGSmNsY3NSVUZCVTFrc1MwRkJTM05LTEZGQlFWVXNVVUZCUVN4SlFVRkxXQ3hGUVVGMVFpeEZRVUZKUVN4RlFVRlBWeXhUUVVOdVJUUk1MRVZCUVd0Q2JGWXNTMEZCVFhkTUxFZEJRM0JDY0Uwc1JVRkJVeXhKUVVGSldTeExRVUZMTUZZc1ZVRkZNVUp5Vml4RlFVRkxjMVlzVTBGQlUyNUxMRVZCUVdWNFRTeFBRVU0zUW5OTkxFVkJRVkZGTEdOQlFXZENRU3hGUVVWNFFrRXNSVUZCWTNwTUxGVkJRVlV5Vml4UlFVRlZMRmRCUXpsQ0xFbEJRVWwwVnl4RlFVRlRXU3hMUVVGTGMwb3NVVUZEYkVJc1MwRkJTV3hMTEVWQlFWTXNSMEZCWWl4RFFVbEJMRWxCU0VFc1NVRkJTWGRYTEVWQlFWRXNSMEZEVWtNc1JVRkJaU3hIUVVWV09WY3NSVUZCU1N4RlFVRkhLMWNzUlVGQlR6bFdMRlZCUVVGQkxFbEJRVTA0Vml4SlFVRnpRaTlYTEVWQlF5OURObGNzUlVGQlRYaFZMRXRCUVVzd1ZTeEhRVU5ZUVN4RlFVRlBRU3hGUVVGTE1VTXNVVUZIYUVJc1NVRkJVM0pWTEVkQlJGUkxMRVZCUVZOWkxFdEJRVXR6U2l4UlFVRlZka3NzUjBGRFJpeEZRVUZIUVN4SFFVRkxMRWxCUVV0QkxFVkJRVWNzUTBGRGJFTXNTVUZCU1RKRUxFVkJRVkZyVkN4RlFVRk5OMWNzUjBGQlJ6SkVMRmRCUVVGQkxFbEJRMnBDYlZRc1JVRkJZVzVVTEV0QlEySnRWQ3hGUVVGaGJsUXNSMEZCVXpORUxFZEJSemxDTEVsQlFWTkJMRVZCUVVrc1JVRkJSMEVzUlVGQlNVc3NTVUZCVlV3c1JVRkJSeXhEUVVNM1FpeEpRVU5KSzBnc1JVRkJVU3RQTEVWQlJFOUVMRVZCUVUwM1Z5eEhRVUZITWtRc1QwRkZOVUlzVVVGQlFTeEpRVUZKYjBVc1IwRkJkVUpCTEVsQlFWVXZTQ3hGUVVGSExFTkJRMmhESzBnc1JVRkJVU3hKUVVOU09FOHNSVUZCVFRsUExFVkJRVkVzUjBGQlIzTk5MR0ZCUVVGQkxFVkJRMnBDZDBNc1JVRkJUVGxQTEVWQlFWRXNSMEZCUjNkRExGRkJRVlVzUjBGRkwwSnpUU3hGUVVGTk4xY3NSMEZCUjNGVkxHRkJRVUZCTEVWQlExUjNReXhGUVVGTk4xY3NSMEZCUjNWTExGRkJRVlVzUlVGRGJrSXNTVUZCU1hsTkxFVkJRV2RDYUZnc1JVRkJTU3hGUVVGSk5sY3NSVUZCVFRkWExFVkJRVWtzUjBGQlMybENMRXRCUlhaRE9FY3NSVUZCVVRGSUxFVkJRVk1zUjBGRGFrSXlWeXhGUVVGak0wTXNVVUZCVlhkRExFVkJRVTA1VHl4RlFVRlJMRWRCUTNSRGFWQXNSVUZCWXpORExGRkJRVkZ6UXl4VlFVTjBRa3NzUlVGQlkzcE5MRkZCUTFaNVRTeEZRVUZqTTBNc1VVRkJVVGxLTEZGQlFWVXNTVUZGY0VONVRTeEZRVUZqTTBNc1lVRkJRVUVzUlVGRFpESkRMRVZCUVdONlRTeFJRVUZWTEVkQlJ6VkNMRWxCUkVFc1NVRkJTVEJOTEVWQlFYRkNSQ3hGUVVGamVrMHNVVUZCVlN4RlFVTjRRekJDTEVWQlFVbHFUU3hGUVVGSkxFVkJRVWRwVFN4SFFVRkxMRWxCUVV0QkxFVkJRekZDTkVzc1JVRkJUVFZMTEVkQlFVY3hRaXhSUVVGVk1FMHNSVUZEYmtKQkxFbEJSVW9zVjBGTFduaExMRVZCUVdONlRDeFZRVUZWYzFRc2FVSkJRVzFDTEZOQlFWTklMRWRCUTJoRUxFbEJRVWxCTEVWQlFVMUpMR2xDUVVGV0xFTkJRMEYwVkN4TFFVRkxNRllzVlVGTlRDeEpRVXhCTEVsQlFVbHVReXhGUVVGVFF5eEZRVUZ4UWs0c1IwRkRPVUkzVFN4RlFVRlZhMDRzUlVGQlQyeE9MRkZCUTJwQ05GQXNSVUZCVXl4RFFVRkRNVU1zUlVGQlR6ZFJMRTlCUldwQ2NVb3NSVUZCVVM5TUxGVkJRVUZCTEVsQlEwd3JUQ3hIUVVOSWEwc3NSVUZCVHpkVkxFdEJRVXQzVXl4RlFVRlhOMGdzUlVGQlRYSktMRTFCUVUwd1VpeE5RVUZOTEZGQlEzcERja2tzUlVGQlVVRXNSVUZCVFhGSUxGTkJhRkowUWl4VFFVRXlRalpETEVkQlJYWkNMRWxCUkVFc1NVRkJTVU1zUlVGQlZVUXNSVUZCVHl4SFFVTmFiRmdzUlVGQlNTeEZRVUZIUVN4RlFVRkphMWdzUlVGQlR6ZFhMRk5CUVZWTUxFVkJRVWNzUTBGTmNFTXNTVUZNUVN4SlFVRkpaMFFzUlVGQlQydFZMRVZCUVU5c1dDeEhRVU5rYjFnc1JVRkJiVUpFTEVWQlFWRTVWeXhQUVVGVExFVkJRM0JEWjFnc1JVRkJhMEpHTEVWQlFWRkRMRWRCUXpGQ1JTeEhRVUYxUWl4RlFVVnNRbkpNTEVWQlFVbHFTaXhGUVVGTE0wTXNUMEZCVXl4RlFVRkhORXdzUjBGQlN5eEpRVUZMUVN4RlFVTndReXhIUVVGSmFrb3NSVUZCUzJsS0xFdEJRVTl2VEN4RlFVRnBRaXhEUVVNM1FrTXNSVUZCYzBKeVRDeEZRVU4wUWl4TlFVbFNMRWxCUVZOQkxFVkJRVWx4VEN4RlFVRnhRbkpNTEVkQlFVc3NTVUZCUzBFc1JVRkJSeXhEUVVNelF5eEpRVUZKTmtrc1JVRkJUemxTTEVWQlFVdHBTaXhIUVVOb1FpeEhRVUZKYTB3c1JVRkJVVU1zUzBGQmMwSjBReXhGUVVrNVFpeE5RVWhCY1VNc1JVRkJVWGhRTEUxQlExSjVVQ3hKUVV0U1JDeEZRVUZWYmxVc1IwRjRRbXhDTEVOQmExSnpRbXRWTEVkQk5WSjBRaXhUUVVGeFEwRXNSMEZEYWtNc1NVRkJTeXhKUVVGSmJGZ3NSVUZCU1N4RlFVRkhRU3hGUVVGSmExZ3NSVUZCVHpkWExGTkJRVlZNTEVkQlExSXNTVUZCY2tKcldDeEZRVUZQYkZnc1IwRkJSMHNzVVVGRFVrd3NSVUZCU1N4RlFVRkphMWdzUlVGQlR6ZFhMRkZCUVZjMlZ5eEZRVUZQYkZnc1IwRkJSeXhMUVVGUGExZ3NSVUZCVDJ4WUxFVkJRVVVzUjBGQlJ5eE5RVU42Ukd0WUxFVkJRVTlMTEU5QlFVOTJXQ3hGUVVGSExFZEJRMnBDUVN4TFFVeGFMRU5CTmxKblEydFlMRWRCUXpWQ05WWXNSVUZCUzI5VUxHdENRVUZyUWxBc1JVRkJUeXhSUVhwVGJFTXNVMEZCTUVJM1RTeEZRVUZUTkZBc1IwRkRMMElzU1VGQlN5eEpRVUZKYkZnc1JVRkJTU3hGUVVGSFFTeEZRVUZKYTFnc1JVRkJUemRYTEU5QlFWTXNTVUZCUzB3c1JVRkRja05yV0N4RlFVRlBiRmdzUjBGQlIzRkRMRXRCUVVzc2QwSkJRMlkyVlN4RlFVRlBiRmdzUjBGQlMydFlMRVZCUVU5c1dDeEhRVUZITWxVc1MwRkJTeXhOUVVzdlFpeFBRVWhKTTFVc1JVRkJTV3RZTEVWQlFVODNWeXhUUVVOWU5sY3NSVUZCVDJ4WUxFZEJRVXRyV0N4RlFVRlBiRmdzUjBGQlJ6SlZMRXRCUVVzc1QwRkZlRUp5VGl4RlFVRlZMRXRCUVU4MFVDeEZRVUZQZGtNc1MwRkJTeXhOUVZKNFF5eERRWGxUTkVSeVRpeEZRVUZUTkZBc1NVRkRha1UxVml4RlFVRkxiMVFzYTBKQlFXdENVQ3hGUVVGUExHOUNRVUZCTEV0QlIyeERMRWxCUVVsblF5eEZRVUZ2UWl4WFFVTndRaXhKUVVGSmNVSXNSVUZCYzBJc1dVRkRkRUpETEVWQlFXMUNMRk5CUVZNNVZDeEZRVUZQZDFFc1IwRkRia01zVFVGQmNVSXNhVUpCUVZaNFVTeEZRVUV5UWtFc1QwRkJRVUVzU1VGRmJFTjNVU3hGUVVGTmJFUXNWMEZCUVVFc1NVRkRUbXRFTEVWQlFVMDNUU3hSUVVORE5rMHNSVUZCVFROTkxGZEJSVlp4VHl4RlFVRmxNVUlzU1VGSE1VSXNSMEZCY1VNc2FVSkJRVEZDYkZVc1RVRkJUWGxZTEdsQ1FVTnpRaXh0UWtGQk5VSjZXQ3hOUVVGTmExY3NhMEpCUVd0RExFTkJReTlEYkZjc1RVRkJUWGxZTEdsQ1FVRnRRaXhGUVVONlFuSktMRVZCUVc5Q2JVb3NSVUZEY0VKc1NpeEZRVUZqYlVvc1JVRkRaQ3hKUVVGSmRFSXNSVUZCYjBKc1Z5eE5RVUZOYTFjc2EwSkJTemxDTEU5QlNFRnFRaXhGUVVGbExGTkJRVk5LTEVkQlEzQkNMRTlCUVU4MVJ5eEZRVUZ4UWpoSExFdEJRVXRHTEVsQlJUbENMRk5CUVZNelV5eEZRVUZWZDFZc1IwRkRkRUl4V0N4TlFVRk5lVmdzYVVKQlFXMUNMRVZCUTNwQ2RrSXNSVUZCYTBKb1ZTeEZRVUZWZDFZc1IwRkROVUl4V0N4TlFVRk5lVmdzYVVKQlFXMUNMRWRCUjJwRExFbEJXVWxGTEVWQldrRkRMRVZCUVUwc1NVRkJTVFZZTEUxQlJXUXNSMEZCZVVJc2FVSkJRV1EwV0N4RlFVRkpiRlVzVDBGRFdHdFZMRVZCUVVsc1ZTeE5RVUZOTUZJc1RVRkJUU3hOUVVGTkxFZEJRVWQ1UXl4UlFVRlJMRzlDUVVGelFpeEZRVWwyUkN4UFFVaEJla29zUlVGQmIwSXNTVUZEY0VKRExFVkJRV050U2l4RlFVTmtiRW9zUjBGQlFVRXNSVUZEVHl4VFFVRXlRak5QTEVkQlF6bENRU3hGUVVGRkswUXNUMEZCUVVFc1NVRkJXVEZFTEU5QlFWRXdSQ3hQUVVzNVFpeEpRVUZOTEUxQlFVMHNTVUZCU1RGRUxFMUJRMmhDTEUxQlFVMXVRaXhIUVVOR09Ga3NSVUZCYzBJc1ZVRkJWemxaTEVWQlJYSkRMRTFCUVUwc1ZVRkJWeXRaTEVsQlFWRkVMRWRCUTFrc2FVSkJRVEZDTTFnc1RVRkJUWGxZTEdsQ1FWZHFRbkJLTEVWQlFXTXNVMEZCVXpOTExFVkJRVTkzVVN4SFFVTXhRaXhOUVVGeFFpeHBRa0ZCVm5oUkxFVkJRVEpDUVN4RlFVVm9RaXhwUWtGQlZuZFJMRWRCUTFNc2JVSkJRVlpCTEZGQlFVRkJMRWxCUTFCQkxFVkJRVTFzUkN4WFFVRkJRU3hKUVVOT2EwUXNSVUZCVFRkTkxGRkJSMGgxVHl4RlFVRmxNVUlzUjBGR1dFRXNSVUZCVFROTkxGbEJTMlFzVDBGMFFrZzJSeXhGUVVGdlFtMUtMRVZCUTNCQ2JFb3NSVUZCWTIxS0xFVkJRMUFzVTBGQk1rSTNXQ3hIUVVNNVFrc3NUVUZCVFhsWUxHbENRVUZ0UWl4RlFVTjZRaXhKUVVGTkxFMUJRVTBzU1VGQlNYcFlMRTFCUTJoQ0xFMUJRVTF1UWl4SFFVRkxZeXhGUVVGRkswUXNUVUZCVVRkRkxFVkJRVVUyUlN4TlFVTjJRakZFTEUxQlFVMTVXQ3hwUWtGQmJVSXNTVUZ5UkdJc1IwRjVSVVFzYjBKQlFWcHNReXhqUVVGQlFTeEpRVUZyUTBFc1VVRkJVVFZHTEU5QlEycEVhRU1zUlVGQlpTeFRRVUZWZEVjc1IwRkRja0pyVHl4UlFVRlJOVVlzUzBGQlMzUkpMRWxCUldKb1J5eEZRVUZMYVVNc1VVRkJWVU1zVVVGQlVVTXNUMEZCVDNOVkxFMUJRemxDYmtzc1JVRkJaU3hUUVVGVGRFY3NSVUZCVTJsUExFZEJRemRDTEVsQlFVbDVReXhGUVVGUmVrTXNSVUZCVXl4UlFVRmxMRkZCUTNCRFF5eFJRVUZSTlVZc1MwRkJTMjlKTEVWQlFWRXhVU3hGUVVGVkxGZEJSVE5DYUVjc1JVRkJTMmxETEZGQlFYbERMR2xDUVVGQkxFbEJRVzVDZEVRc1QwRkJZVEJFTEZGQlEyaEVhVXNzUlVGQlpTeFRRVUZUZEVjc1JVRkJVMmxQTEVkQlF6ZENReXhSUVVGUk5VWXNTMEZCU3l4TFFVRlBkRWtzUlVGRFVtbFBMRVZCUVZNc2IwSkJRWE5DTEdsQ1FVdDJSQ3hKUVVGSmNrWXNSVUZCVXl4RFFVTlVlRUlzVTBGQlZVRXNSVUZEVm5KRExHbENRVUZCUVN4RlFVTkJha1FzWTBGQlFVRXNSVUZEUVRKTExGbEJRVUZCTEVkQlMwb3NUMEZHU1RGSUxFZEJRV2xDT1Uwc1JVRkJVVGhOTEd0Q1FVVjBRaXhEUVVOSVFTeG5Ra0ZCYVVJc1YwRkRZaXhQUVVGUE5rUXNSVUZCVHpkRUxHbENRVVZzUW5GRExGTkJRVlVzVjBGRFRpeFBRVUZQZDBJc1JVRkJUM2hDTEZWQlJXeENkRVlzWVVGQll5eFhRVU5XTEU5QlFVODRSeXhGUVVGUE9VY3NZMEZGYkVJeVN5eFhRVUZaTEZkQlExSXNUMEZCVHpkRUxFVkJRVTgyUkN4WlFVVnNRbTVQTEhOQ1FVRjFRaXhYUVVOdVFpeFBRVUZQUVN4SFFVVllSU3h0UWtGQmIwSXNWMEZEYUVJc1QwRkJUMEVzUjBGRldHMVRMSE5DUVRObFNpeFRRVUVyUWtNc1JVRkJZV3BITEVWQlFXZENhRUlzUlVGQlRYSlJMRVZCUTI1RFowb3NSMEZETTBJc1VVRkJRU3hKUVVGSmMwOHNSMEZCWjBRc1QwRkJia0pxUnl4SFFVTTNRblJFTEVWQlFXdENMRU5CUTJ4Q0xGRkJRVUVzU1VGQlNTOUZMRWRCUVhkQ1FTeEZRVUZQZFVZc2QwSkJRWGxDTEU5QlF6VkVMRWRCUVc5RExFbEJRVmdzVFVGQmNFSjJUeXhGUVVGUk1FVXNWMEZCTUVJc1QwRkZia015VEN4SlFVRk5RU3hIUVVGakxFdEJRM2hDTEVsQlFVbHJTQ3hGUVVGakxFZEJRMlJETEVWQlFXTXNSMEZEYkVJc1IwRkJTVzVITEVWQlFXVjZSaXhQUVVGUkxFTkJSM1pDTEVsQlJrRXNTVUZCU1RaTUxFVkJRV0Z3Unl4RlFVRmxla1lzVDBGQlR6ZEpMRTFCUVUwd1VpeE5RVUZOTEUxQlF5OURNVklzUlVGQlVXdFNMRVZCUVZkM1JDeEhRVU5rY2xrc1JVRkJTVEpFTEVWQlFVMTBSQ3hQUVVGVExFVkJRVWRNTEVkQlFVc3NTVUZCUzBFc1JVRkJSeXhEUVVONFF5eEpRVUZKT0ZVc1JVRkJUMjVTTEVWQlFVMHpSQ3hIUVVOcVFpeEpRVUZMYlU4c1JVRkJhVUkyUnl4TFFVRkxSaXhIUVVGUExFTkJRemxDTEVsQlFVbDNSQ3hGUVVGamVFUXNSVUZCUzNsQ0xFMUJRVTF1U1N4SFFVTjZRbXRMTEVsQlEwRklMRVZCUVdVc1RVRkJVVWNzUlVGQldTeEhRVU12UWl4SlFVRk5RU3hGUVVGWkxFZEJRVXNzU1VGQlRVRXNSVUZCV1N4SFFVRkxMRXRCUlhSRUxFOUJTVklzUjBGQlNUTlZMRVZCUVUxMFJDeFBRVUZUTEVWQlEyWXNRMEZCUVN4SlFVRkphMWtzUlVGQlowSTFWU3hGUVVGTkxFZEJRekZDTEVsQlFWTXpSQ3hGUVVGSkxFVkJRVWRCTEVWQlFVbHhXU3hGUVVGWGFGa3NVMEZCVlV3c1JVRkZja01zUjBGQlNYRlpMRVZCUVZkeVdTeExRVUZQZFZrc1JVRkJaU3hEUVVNM1FuWlpMRVZCUVVrc1NVRkRTbTlaTEVWQlFXTXNTMEZCVDBNc1JVRkJWM0paTEVWQlFVa3NTVUZGZUVNc1VVRk5hRUlzU1VGQlNYZFpMRVZCUVUwc09FSkJRV2REZGtnc1JVRkRkRU1zVjBGQllXdElMRVZCUVdNc2VVUkJSVE5DUXl4RlFVTktlRmdzUlVGQlVYbEpMRTFCUVUxdFVDeEhRVUZCUVN4RlFVRlhka2NzUzBGcFl6ZENkMGNzVlVFM1Qwb3NVMEZCYlVKMFdDeEZRVUZuUW5WWUxFZEJReTlDTEVkQlFVdDJTU3hKUVVGTUxFTkJUMEVzU1VGT1FTeEpRVWxKZDBrc1JVRkRRVU1zUlVGTVFVTXNSMEZCYlVJeFdDeEZRVUZsZDBNc1QwRkJVeXhKUVVGSk1GSXNUVUZCVFN4TlFVTnlSSGxFTEVkQlFXdENTaXhGUVVGakwxVXNUMEZCVXl4SlFVRkpNRklzVFVGQlRTeE5RVU51UkRCRUxFZEJRV01zUlVGRFpIQk5MRWRCUVdFc1JVRkhVak5OTEVWQlFVa3NSVUZCUjBFc1JVRkJTVFpaTEVWQlFXZENlRmtzVTBGQlZVd3NSVUZGTVVNc1IwRkVTV2RhTEVWQlFWTXpReXhGUVVGamQwTXNSVUZCWjBJM1dTeEpRVU12UWl4RFFVTlNNbGtzUlVGQlowSkxMRVZCUVU5NFF5eFRRVU4yUW5WRExFVkJRV0ZETEVWQlFVOXNSU3hMUVVOd1FpeE5RVWRTTEVsQlFWTTVWU3hGUVVGSkxFVkJRVWRCTEVWQlFVazRXU3hGUVVGbGVsa3NVMEZCVlV3c1JVRkJSeXhEUVVNMVF5eEpRVUZKWjFvc1JVRkRTaXhIUVVSSlFTeEZRVUZUTTBNc1JVRkJZM2xETEVWQlFXVTVXU3hKUVVNNVFpeERRVU5TTkZrc1JVRkJaVWtzUlVGQlQzaERMRk5CUTNSQ04wb3NSVUZCV1hGTkxFVkJRVTlzUlN4TFFVTnVRaXhQUVVkS2FVVXNSVUZCWVN4SFFVRkxjRTBzUlVGQldTeEpRVUZOWjAwc1NVRkJhMEpETEVkQlEzUkVSQ3hKUVVGclFrTXNSMEZCWjBKSExFZEJRV053VFN4SlFVbHdSSFZKTEVWQlFXVXNVMEZCVTBvc1IwRkRjRUlzUjBGQlNUVkhMRVZCUVhGQ09FY3NTMEZCUzBZc1IwRkJUeXhQUVVGQkxFVkJRM0pETEVsQlFVbHRSU3hGUVVGUE5VTXNSVUZCWTNaQ0xFZEJRM3BDTEZOQlFVbHRSU3hIUVVOSlFTeEZRVUZMZWtNc1YwRkJZVzFETEVkQlEycENTU3hIUVVGalJTeEZRVUZMYmtVc1RVRkJVVzFGTEVWQlFVdHVSU3hOUVVGUmJra3NUMEUwVFhKRWFVUXNTMEZCVFVFc1JVRkRUbk5LTEZkQkwySktMRk5CUVc5Q2Fra3NSVUZCVFd0SkxFZEJRM1JDTEVsQlFVazNVaXhGUVVGVk1rb3NSVUZEVml3d1JFRkZTaXhQUVVSSmEwa3NTVUZCWVRkU0xFZEJRVmNzVVVGQlZUWlNMRVZCUVdNc1lVRkROME4yU2l4RlFVRkxkRWtzU1VFMFlscHRSaXhqUVVGbFFTeEZRVU5tYjBVc1lVRkJZMEVzUlVGRFpHVXNaMEpCUVdsQ1FTeExRVWx1UWl4RFFVRkRkMGdzVjBGQlZ5eEhRVUZIYWs0c1VVRkJVU3hIUVVGSE4wZ3NVMEZCVXl4TFFVRkxLMVVzUjBGQlJ5eERRVUZETEZOQlFWTjBXaXhGUVVGUlppeEZRVUZQUkN4SFFVTjBSU3hoUVVOQlF5eEZRVUZQUkN4UlFVRlZMRk5CUVZOUkxFZEJRekZDTEZOQlFWTXJXaXhKUVVOTUxFOUJRVTl5V1N4TFFVRkxjVVlzVFVGRmFFSXNVMEZCVTJsVUxFbEJRMHdzVFVGQlRYUlpMRXRCUVV0dlR5eFBRVWRtT1ZBc1JVRkJVWGxDTEZWQlFXdENkMWtzVDBGRE1VSnFZU3hGUVVGUmVVSXNWVUZCVlhsWkxGZEJRV0VzVTBGQlZXNVVMRWRCUlhKRExFOUJSRWxCTEdGQlFXbENMMGNzUjBGQlV5dEhMRVZCUVUxelNTdzRRa0ZETjBJelRpeExRVUZMYTBVc1RVRkRVbTFWTEU5QlFVRkJMRTlCUVZWcVVpeEZRVUZ6UWl4RFFVRkRMMElzVFVGQlQwRXNVVUZCUVVFc1NVRkhhRVF2Unl4RlFVRlJlVUlzVlVGQmFVSXdXU3hOUVVONlFtNWhMRVZCUVZGNVFpeFZRVUZWTWxrc1ZVRkJXU3hUUVVGVmRFc3NSMEZEY0VNc1QwRkJUM0JQTEV0QlFVdHJSU3hOUVVOU2IxVXNUMEZCUVVFc1QwRkJVMnhTTEVWQlFYTkNMRU5CUVVOblNDeFBRVUZSUVN4UlFVRkJRU3hKUVVkb1JEbFFMRVZCUVZGNVFpeFZRVUZWTkZrc1YwRkJZU3hUUVVGVmRrc3NSMEZEY2tNc1IwRkJTWFpNTEZWQlFWVjZSQ3hSUVVGVkxFVkJRM0JDTEU5QlFVOVpMRXRCUVV0clJTeFhRVUZCUVN4RlFVTkhiMVVzVDBGQlFVRXNSVUZCYjBJc1EwRkJRMnhMTEU5QlFWRkJMRkZCUVVGQkxFZEJSVFZETEVsQlFVbDNTeXhGUVVGVkwxWXNWVUZCVlN4SFFVVjRRaXhQUVVGUE4wTXNTMEZCU3paWkxFOUJRVTk2U3l4RlFVUk1MRmRCUVZrc1RVRkJUWGRMTEV0QlMzaERkR0VzUlVGQlVYbENMRlZCUVZVcldTeFpRVUZqTEZOQlFWVjZWQ3hIUVVOMFF5eEhRVUZKZUVNc1ZVRkJWWHBFTEZGQlFWVXNSVUZGY0VJc1QwRkVTV2xITEdGQlFXbENMMGNzUjBGQlV5dEhMRVZCUVUxelNTdzRRa0ZETjBJelRpeExRVUZMYTBVc1YwRkJRVUVzUlVGRFIyMVZMRTlCUVVGQkxFVkJRWEZDTEVOQlFVTm9WQ3hOUVVGUFFTeFJRVUZCUVN4SFFVVTFReXhKUVVGSk1GUXNSVUZCVTJ4WExGVkJRVlVzUjBGSGRrSXNUMEZHU1d0WExHRkJRV3RDZW1Fc1IwRkJVM2xoTEVWQlFVOXdUQ3c0UWtGRkwwSXpUaXhMUVVGTE5sa3NUMEZCVDNoVUxFVkJSRXdzVjBGQldTeFBRVUZQTUZRc1QwRk5ka01zU1VGQlNVTXNSMEZCUnl4RFFVRkRMRk5CUVZOc1lTeEZRVUZSWml4RlFVRlBSQ3hIUVVOc1F5eGhRVU5CUXl4RlFVRlBSQ3hSUVVGVkxGTkJRVk5STEVWQlFWTnBSaXhIUVVOdVF5eEpRVUZKTUZZc1JVRkJaMEl6WVN4RlFVRlJOR0VzVDBGRGVFSkRMRVZCUVdFM1lTeEZRVUZST0dFc1NVRkZla0lzVTBGQlUwTXNTVUZEVEN4UFFVRlBSaXhGUVVGWGJsb3NUVUZQZEVJeFFpeEZRVUZSZVVJc1ZVRkJWWFZhTEV0QlFVOHNVMEZCVlhKWkxFZEJReTlDTEU5QlFVOW5XU3hGUVVGamFsb3NTMEZCVFdsQ0xFVkJRVWx6UXl4RlFVRlZMRWRCUXpsQ1Z5eE5RVUZOYlZZc1QwRkJRVUVzVDBGQlowSnFVeXhGUVVGelFuQklMRlZCUVVGQkxFbEJSek5FTVVJc1JVRkJVWGxDTEZWQlFWVjNXaXhWUVVGWkxGTkJRVlYwV1N4SFFVTndReXhQUVVGUFoxa3NSVUZCWTJwYUxFdEJRVTFwUWl4RlFVRkpjME1zUlVGQlZVRXNTVUZITjBOcVJpeEZRVUZSWjJJc1MwRkJUeXhUUVVGVk4xb3NSVUZCVlhkQ0xFZEJReTlDTEU5QlFVOW5XU3hGUVVGamVGb3NSVUZCVlhkQ0xFVkJRVWx6UXl4RlFVRlZMRWRCUTJ4RFZ5eE5RVUZOYlZZc1QwRkJRVUVzVDBGQlowSnFVeXhGUVVGelFqTklMRTlCUVVGQkxFbEJSek5FYmtJc1JVRkJVV2xpTEZWQmJFSlNMRk5CUVRCQ09Wb3NSVUZCVlhkQ0xFZEJRMmhETEU5QlFVOW5XU3hGUVVGamVGb3NSVUZCVlhkQ0xFVkJRVWx6UXl4RlFVRlZRU3hOUVhGQ0wwTXNTVUZCU1dsWExFZEJRVWNzUTBGQlF5eFRRVUZUTVdFc1JVRkJVV1lzUlVGQlQwUXNSMEZEYkVNc1lVRkRRU3hKUVhOQ1NUSmlMRVZCUVZsRExFVkJkRUphTTAwc1JVRkJUV3BQTEVWQlFWRXNVMEZEWkRaaExFVkJRV1UxVFN4RlFVRkpOazBzVDBGRGJrSjJXaXhGUVVGUGRrSXNSVUZCVVN4VlFVTm1ObGNzUlVGQlYzUldMRVZCUVV0elZpeFRRVU5vUW14RExFVkJRVzlDY0ZRc1JVRkJTMjlVTEd0Q1FVVTNRaXhUUVVGVGIwY3NSVUZCVTBNc1JVRkJZME1zUjBGRE5VSXNVMEZCVTBNc1JVRkJVek5VTEVkQlEyUXNTMEZCVFhKSExHZENRVUZuUW1kaExFZEJRVmNzVDBGQlR5eEpRVUZKUVN4RlFVRlRNMVFzUjBGRGNrUnZUaXhGUVVGclFucFVMRXRCUVUwc1ZVRkRSQ3hwUWtGQlduRkhMRVZCUVhWQ1FTeEZRVUZWTUZRc1IwRkROVU4wUnl4RlFVRnJRbnBVTEV0QlFVMHNUMEZCVVRoYUxFZEJRelZDT1dFc1RVRkJUV3RYTEd0Q1FVTk9iRmNzVFVGQlRXdFhMR3RDUVVGclFteFdMRXRCUVUxQkxFdEJRVXRwWVN4aFFVVnVRMnBpTEUxQlFVMUhMRXRCUVV0aExFMUJTVzVDTEU5QlJFRXlWaXhGUVVGVGNVVXNSVUZCVldoaUxFOUJRMXBuWWl4RlFVbFlMRWxCUVVsc1RpeEZRVUZWSzAwc1JVRkJVeXhWUVVGWExGZEJRemxDU3l4RlFVRnZRa3dzUlVGQlV5eHZRa0ZCY1VJc2MwSkJRMnhFVFN4RlFVRmxUaXhGUVVGVExHVkJRV2RDTEdsQ1FVTjRRMDhzUlVGQmFVSlFMRVZCUVZNc2FVSkJRV3RDTEcxQ1FVTm9SQ3hKUVVOSlNpeEZRVUZoYWxRc1ZVRkRZbXRVTEVWQlFXTlhMRmRCUTJoQ0xFMUJRVTE0WXl4SFFVTktOR0lzUlVGQllVa3NSVUZCVXl4WlFVRmhMR05CUTI1RFNDeEZRVUZqUnl4RlFVRlRMR0ZCUVdNc1pVRk5la01zU1VGSVFTeEpRVUZKVXl4RlFVRlZMSE5JUVVOMVJHeEhMRTFCUVUwc1MwRkZiRVZ5Vml4RlFVRkpMRVZCUVVkQkxFVkJRVWwxWWl4RlFVRlJiR0lzVTBGQlZVd3NSVUZEVXl4dFFrRkJhRU4zWWl4TlFVRk5lR0VzVlVGQlZYVmhMRVZCUVZGMllpeE5RVU12UW5GaUxFVkJRV1Z5WVN4VlFVRlZkV0VzUlVGQlVYWmlMRWxCUVUxM1lpeE5RVUZOZUdFc1ZVRkJWWFZoTEVWQlFWRjJZaXhMUVVsMlJXZFBMRVZCUVVseFJDeGxRVUZsWjBzc1JVRkJaWEpoTEZWQlFWY3NVMEZCVlN4RFFVTnVSSE5HTEUxQlFVOHNSVUZEVUcxV0xHTkJRVUZCTEVWQlEwRkRMRlZCUVVGQkxFVkJRMEZETEZsQlFVRkJMRWxCUlVwT0xFVkJRV1Z5WVN4VlFVRjVRalJoTEdWQlFVRXNSVUZEZUVNc1NVRkJTVU1zUlVGQlVTeEZRVzFDV2l4VFFVRlRReXhGUVVGcFFuaFZMRWRCUTNSQ0xFdEJRVTF5Unl4blFrRkJaMEkyWVN4SFFVTnNRaXhQUVVGUExFbEJRVWxCTEVWQlFXbENlRlVzUjBGRGFFTnZUaXhGUVVGclFucFVMRXRCUVUwc1QwRkJVU3h2UWtGRGFFTjVWQ3hGUVVGclFucFVMRXRCUVUwc1ZVRkJWM0ZITEVkQlEyNURja2NzUzBGQlN6aGhMRTFCUVZGNlZTeEZRVU5pY2tjc1MwRkJiMEl5WVN4bFFVRkJMRVZCUldoQ2RGVXNZVUZCYlVKeVNDeFBRVU51UW5sVkxFVkJRV3RDZWxRc1MwRkJUU3hWUVVGWGNVY3NSVUZCVVVFc1UwRkRNME52VGl4RlFVRnJRbnBVTEV0QlFVMHNVVUZCVTNGSExFVkJRVkV6UkN4UlFVTnNRekZFTEUxQlFVMXJWeXh0UWtGRFlteFhMRTFCUVUxclZ5eHJRa0ZCYTBKc1ZpeExRVUZOUVN4TFFVRkxhV0VzWVVFNVFqTkRSeXhGUVVGbGNtRXNWVUZCVlhkSExGTkJRVmNzVjBGRGFFTXNTVUZCU1hkVkxFVkJRVk5TTEUxQlFXTXNSVUZCVWtzc1JVRkJXU3hIUVVGSGJFZ3NTMEZCU3l4TFFVTnVRMmhWTEVWQlFVMHNTMEZCVDNGaUxFVkJRVk1zZFVKQlF6RkNTQ3hKUVVOQlJ5eEZRVUZUVWl4TlFVRmpMRVZCUVZKTExFVkJRVmtzUjBGQlIyeElMRXRCUVVzc1MwRkRia01zU1VGQlN5eEpRVUZKTTFVc1JVRkJTU3hGUVVGSFFTeEZRVUZKYVVJc1MwRkJTMW9zVTBGQlZVd3NSVUZCUnl4RFFVZHNReXhKUVVaQkxFbEJRVWs0Vml4RlFVRk5OMVVzUzBGQlMycENMRXRCUVU5cFFpeExRVUZQTERSQ1FVRTRRa0VzUzBGQlMycENMRWRCUVVzc1IwRkRha1ZwWXl4RlFVRlJia2NzUlVGQlNWUXNUVUZCVFN4TlFVTmljRW9zUlVGQlNTeEZRVUZIUVN4RlFVRkpaMUVzUlVGQlRUVmlMRk5CUVZVMFRDeEZRVU5vUTJkUkxFVkJRVTFvVVN4SFFVRkxLMUFzUlVGQlUwTXNSVUZCVFdoUkxFZEJSemxDZEV3c1NVRkVRVzFXTEVWQlFVMXRSeXhGUVVGTmRFZ3NTMEZCU3l4UFFVTktMRXRCUjJwQ0xFOUJSRUZyU0N4SlFVTlBiR0lzUjBGdFFsaHBWeXhGUVVGVGEwWXNSVUZCYTBJM1lpeFBRVVV6UWl4SlFVRkphV01zUlVGQllXcGpMRTFCUVRoQ2EyTXNkVUpCUXpGRFJDeEpRVU5FUVN4RlFVRmhkRUlzUlVGQllTeERRVU4wUWs4c2EwSkJRVzFDUVN4RlFVTnVRa01zWVVGQlkwRXNSVUZEWkZVc2FVSkJRV3RDUVN4RlFVTnNRazBzWlVGQlowSk9MRVZCUTJoQ1ZDeGxRVUZuUWtFc1NVRkZjRUp5VGl4RlFVRkpjVVFzWlVGQlpYQlNMRTFCUVU4c2VVSkJRVEJDTEVOQlEyaEVjVWNzVFVGQlR6UldMRVZCUTFCU0xGVkJRVUZCTEVWQlEwRkRMRmxCUVVGQkxFVkJRMEZHTEdOQlFVRkJMRXRCU1ZKNll5eEZRVUZQUkN4UlFVRlZMRU5CUTJKclFpeE5RVUZQUVN4TlFVTlFkMGdzVlVGQlYybFVMRVZCUTFoWkxGZEJRVmxZTEVWQlExcFJMR3RDUVVGdFFtVXNSVUZCVjJZc2EwSkJRemxDVnl4cFFrRkJhMEpKTEVWQlFWZEtMR2xDUVVNM1FsWXNZVUZCWTJNc1JVRkJWMlFzWVVGRGVrSkRMR1ZCUVdkQ1lTeEZRVUZYWWl4bFFVTXpRblJPTEZGQlFWTkJMRWxCUjFnc1EwRkJRelZDTEZGQlFWRXNSMEZCUnpkSUxGTkJRVk1zUzBGQlN5dFlMRWRCUVVjc1EwRkJReXhUUVVGVGRHTXNSVUZCVVdZc1JVRkJUMFFzUjBGRGVFUXNTVUZCU1hWa0xFVkJRVkVzVjBGRFVpeGhRVU5CTEZsQlFVRXNTVUZCVDNKaUxFdEJSa01zUjBGTFdpeEhRVUZKY1dJc1JVRkRRWFJrTEVWQlFVOUVMRkZCUVZVc1EwRkRZamhpTEU5QlFWRTVWQ3hQUVVGUE9GUXNUMEZEWm5oS0xHVkJRV2RDZEVzc1QwRkJUM05MTEdWQlEzWkNhMHdzWTBGQlpYaFdMRTlCUVU5NVZpeDVRa0ZEZEVJdlVTeExRVUZOTVVVc1QwRkJUekJGTEV0QlEySm5VaXhOUVVGUE1WWXNUMEZCVHpKV0xHOUNRVU5rUXl4bFFVRm5RalZXTEU5QlFVODBWaXhsUVVOMlFqRlNMRkZCUVZOMVVTeE5RVUZOZGxFc1VVRkRabkZTTEUxQlFVOUJMRVZCUTFCTkxHMUNRVUZ2UWl4VFFVRlRlbGNzUlVGQlN6QlhMRWRCUXpsQ0xFbEJRVWxETEVWQlFXRXZWaXhQUVVGUGVWWXNlVUpCUVhsQ2NsY3NSVUZCU3pCWExFZEJRM1JFTEZGQlFWZERMRWxCUVdOQkxFVkJRVmR3UWl4WFFVRlpiMElzUlVGQlYwTXNWMEZIYUVVc1EwRkRTQ3hKUVVGSlF5eEZRVUZOTEVkQlFVZERMR1ZCUTFSdVNDeEZRVUZOTEVkQlFVZDBUeXhUUVVOVU1GWXNSVUZCVVN4SFFVRkhhRU1zV1VGQldXeGhMRlZCUlhaQ2JXTXNSVUZCWVN4VFFVRlZkbVFzUjBGRGRrSXNTVUZCU1dVc1JVRkJUU3hIUVVOV0xFbEJRVXNzU1VGQlNYVk1MRXRCUVU5MFRTeEZRVU5TYjJRc1JVRkJTVFZqTEV0QlFVdFNMRVZCUVVkelRTeEpRVU5hZGt3c1JVRkJTVEJDTEV0QlFVczJTaXhIUVVkcVFpeFBRVUZQZGt3c1IwRnJRMWd6UWl4RlFVRlBSQ3hSUVVGVkxFTkJRMkpyVFN4UlFWWmxMRk5CUVZVNVJTeEhRVU42UWl4SlFVTkpMRTFCUVhsQ0xHMUNRVUZzUWpKUUxFVkJRVWt4Vml4TFFVRkxLMFlzUjBGRmNFSXNUVUZCVFhKSUxFZEJRMFlzVDBGQlFTeEpRVTFLTWswc1MwRkJUVEJTTEVWQlEwNVdMRTFCUVU5VkxFVkJRMUE1VEN4bFFTOUNkVUlzVTBGQlZYcFNMRVZCUVVkelRTeEZRVUZMYTFJc1IwRkZla01zVDBGRVFYaGtMRVZCUVVWelRTeEhRVUZQYTFJc1JVRkJTemxYTEUxQlExQXhSeXhIUVRoQ1VESmpMR05CY0VOelFpeFRRVUZUTTJNc1JVRkJSM05OTEVkQlEyeERMRTFCUVU4c1EwRkJRelZHTEUxQlFVOHhSeXhGUVVGRmMwMHNTMEZ2UTJwQ01rOHNUMEUxUW1Vc1UwRkJWVEZWTEVkQlEzcENMRTlCUVU5QkxFZEJORUpRZDFjc1pVRjZRblZDTEZOQlFWVjRWeXhIUVVOcVF5eEpRVU5KTEU5QlFVOVpMRTlCUVU5YUxFZEJRVXNyVlN4WlFVRlpiR0VzVlVGRmJrTXNUVUZCVDJ4RExFZEJRMGdzVDBGQlQyOWxMRWxCY1VKWVdpeE5RVUZQUVN4RlFVTlFUU3h0UWtGQmIwSXNWMEZEYUVJc1QwRkJRU3hOUVV0V0xFbEJRVWxUTEVkQlFVY3NRMEZCUXl4VFFVRlRkR1FzUlVGQlVXWXNSVUZCVDBRc1IwRkRiRU1zWVVGRFFVTXNSVUZCVDBRc1VVRkJWU3hUUVVGVFVTeEZRVUZUYVVZc1IwRkRia01zU1VGQlNUaFpMRVZCUVdFdlpDeEZRVUZSWjJVc1NVRkZla0pvWlN4RlFVRlJlVUlzVlVGQlZYZGpMRTlCUVZNc1UwRkJWWFJpTEVWQlFVbDFZaXhIUVVOeVF5eFBRVUZQU0N4RlFVRlhjbU1zUzBGQlRXbENMRVZCUVVsMVlpeEZRVUZUYWxvc1NVRkhla05xUml4RlFVRlJhV1VzVDBGQlV5eFRRVUZWT1dNc1JVRkJWWGRDTEVWQlFVbDFZaXhIUVVOeVF5eFBRVUZQU0N4RlFVRlhOV01zUlVGQlZYZENMRVZCUVVsMVlpeEZRVUZUYWxvc1RVRkpNME1zU1VGQlNXdGFMRWRCUVVjc1EwRkJReXhUUVVGVE0yUXNSVUZCVVdZc1JVRkJUMFFzUjBGRGJFTXNZVUZEUVVNc1JVRkJUMFFzVVVGQlZTeFRRVUZUVVN4RlFVRlRhMFlzUlVGQmNVSTRSeXhIUVVONFJDeEpRVUZKYWtzc1JVRkJUM1pDTEVWQlFWRXNWVUZEWm05aUxFVkJRVzlDTldJc1JVRkJVVFJpTEd0Q1FVTTFRbkJUTEVWQlFWZDZTQ3hGUVVGTGVVZ3NVMEZEYUVJMFZTeEZRVUZqTldRc1JVRkJVU3hwUWtGQlVrRXNRMEZCTUVKM1RDeEhRVVUxUXl4VFFVRlRjVk1zUlVGQk1FSm9aQ3hGUVVGVGFXUXNSVUZCVFRWS0xFZEJRemxEYUZRc1MwRkJTMHdzVVVGQlZVRXNSVUZEWmtzc1MwRkJTelJqTEV0QlFVOUJMRVZCUTFvMVl5eExRVUZMWjFRc1VVRkJWVUVzUlVGRFptaFVMRXRCUVVzMll5eFJRVUZCUVN4RlFVTk1OMk1zUzBGQlN6aGpMR05CUVdkQ0xFdEJUM3BDTEZOQlFWTkRMRVZCUVRaQ1F5eEhRVU5zUTJoa0xFdEJRVXRuWkN4bFFVRnBRa0VzUlVGUE1VSXNVMEZCVTBNc1JVRkJXVEZSTEVWQlFVczJRaXhIUVVOMFFpeFBRVUY1UWl4TlFVRnlRamRDTEVWQlFVbDFVU3huUWtGRFFXcGhMRlZCUVZWNlJDeFBRVUZUTEVWQlEyNUNiVTRzUlVGQlNYVlJMR05CUVdOcVdpeFJRVUZSZFVzc1IwRkZNVUkzUWl4RlFVRkpkVkVzWTBGQll6TlVMRlZCUlhSQ2IwUXNSVUZCU1hWUkxHTkJRV2RDTEUxQlFVRXNSMEZOTlVJc1UwRkJVMGtzU1VGRFRDeFBRVUZQUml4RlFVRmxOMlFzUzBGQlMyRXNTMEZCVFVFc1MwRkJTMHdzVVVGQlVXOUdMRlZCUVZWelNpeHBRa0ZGTlVRc1UwRkJVemhQTEVWQlFVc3ZUeXhIUVVOV0xFbEJRVWsyVHl4RlFVRlphbVFzUzBGQlRXOVBMRWRCUlhSQ0xFOUJSRUYwUnl4RlFVRlRha3NzUlVGQlNYVlJMRVZCUTA1MFJ5eEZRVVZZTEZOQlFWTnJWaXhGUVVGbFNTeEhRVU53UWl4SlFVRkplbVFzUlVGQlZVc3NTMEZCUzB3c1VVRkRabkZVTEVWQlFWVm9WQ3hMUVVGTFoxUXNVVUZGYmtJc1NVRkJTMmhVTEV0QlFVczJZeXhQUVVGUkxFTkJRMlEzWXl4TFFVRkxObU1zVVVGQlFVRXNSVUZEVEN4SlFVRkpibVFzUlVGQlRVMHNTMEZCUzNGa0xHMUNRVU5VY2tzc1JVRkJVVGRVTEV0QlFVdFJMRVZCUVZGcFJpeGxRVU55UW05UExFVkJRVkUzVkN4TFFVRkxVU3hGUVVGUmFVWXNZMEZCWlhkWkxFZEJRekZETEVkQlFVa3haQ3hKUVVGUk5Fc3NSVUZEVWl4UFFVRlBOVXNzUlVGRFNpeFJRVUZCTEVsQlFVbEJMRVZCUVcxQ0xFTkJRekZDUXl4RlFVRlJjMDhzTWtKQlExSXNTVUZCU1c1S0xFVkJRV1YwUWl4RlFVRnZRamxFTEVWQlFVdERMRWRCUXpWRExFZEJRVWx0Uml4aFFVRjNRbmhITEVWQlFWTXNRMEZEYWtNc1IwRkJNRUlzVFVGQmRFSXdRaXhMUVVGTE9HTXNZMEZCZFVJc1EwRkROVUlzUjBGQlNXaFpMRVZCUVdFMFJTeGxRVUZuUWl4RFFVTTNRaXhKUVVGSk1FVXNSVUZEUVN4SlFVRkpPRXdzUlVGQmEwSXNPRUpCUnpGQ0xFOUJSa0YyWVN4RlFVRlJjMHNzYTBKQlFXdENiVVVzUjBGRE1VSjBSeXhGUVVGVGFrc3NSVUZCU1hWUkxFVkJRMDUwUnl4RlFVTkJhRVFzUlVGQllUSkZMR0ZCUTNCQ00wVXNSVUZCWVcxT0xEUkNRVU5VTEVsQlFVazRTeXhGUVVFMlFpOWpMRTlCUnpkRExFOUJRVTg0UlN4RlFVRmhXaXhOUVVOb1FtZGFMRVZCUVZORExFOUJRVUZCTEVWQlFXbENibVFzVlVGQlFVRXNTMEZMTVVNc1QwRkJTVXdzUlVGQlVUSmtMR05CUTFKTUxFVkJRVmxxWkN4TlFVTmFPRWdzUlVGQlUycExMRVZCUVVsMVppeEZRVU5PZEZZc1NVRkZVRzFXTEVWQlFWbHFaQ3hOUVVOTWIyUXNSMEY1UkdZc1QwRnFTVUZVTEVWQlFUQkNOV01zVlVGQlZYTmtMR2xDUVVGdFFpeFhRVU51UkN4UFFVRnhRaXhKUVVGa2NtUXNTMEZCU3pSakxFMUJUMmhDUnl4RlFVRTJRbWhrTEZWQlFWVnRTeXhwUWtGQmJVSXNWMEZEZEVRclV5eEZRVUZaYW1Rc1MwRkJTMmRrTEdsQ1FXMUZja0l4WlN4RlFVRlJlVUlzVlVGQlZYZGtMR0ZCUVdVc1UwRkJVM1pMTEVWQlFWTTBTaXhGUVVGTldTeEZRVUZUVEN4SFFVTTVSQ3hOUVVGMVFpeHRRa0ZCV201TExFVkJRU3RDYUZRc1MwRkJTM2xrTEU5QlEzaERlbVFzUzBGQlMydEZMRTFCUVUxeldpeEZRVU5CVEN4UFFVRkJRU3hGUVVWQkxFbEJRVWxTTEVWQlFUQkNNMk1zUzBGQlRUUmpMRVZCUVUwMVNpeFJRVUZCUVN4SlFVbG9SVEZWTEVWQlFWRjVRaXhWUVVGVk1tUXNUMEZEYkVKd1ppeEZRVUZSZVVJc1ZVRkJiVUkwWkN4UlFVRkpMRk5CUVZVelN5eEhRVU55UXl4UFFVRlBhRlFzUzBGQlMzVmtMR0ZCUVdGMlN5eEZRVU5CTEVWQlEwRm5TeXhGUVVOQlFTeEpRVWszUWpGbExFVkJRVkY1UWl4VlFVRlZObVFzU1VGQlRTeFRRVUZWTlVzc1IwRkRPVUlzVDBGQlQyaFVMRXRCUVV0MVpDeGhRVUZoZGtzc1JVRkJVeXhGUVVGSFowc3NTVUZIZWtNeFpTeEZRVUZSZVVJc1ZVRkJWVGhrTEZOQlFWY3NVMEZCVlVNc1IwRkRia01zU1VGQlNVTXNSVUZCVFd4aUxGVkJRVlY2UkN4UFFVTndRaXhIUVVGWExFbEJRVkl5WlN4RlFVTkRMRTlCUVU4dlpDeExRVUZMZFdRc1lVRkJZVThzUlVGRFFTeFBRVUZCTEVWQlJVRmtMRWRCUlhoQ0xFbEJRMVZxWlN4RlFVUk9hV1lzUlVGQmFVSXNTVUZCU1hwRUxFMUJRVTEzUkN4RlFVRk5MRWRCUTJ4REwxTXNSVUZCU1N4RlFVTlNMRWxCUVV0cVRTeEZRVUZKTEVWQlFVZEJMRVZCUVVsblppeEZRVUZOTEVsQlFVdG9aaXhGUVVGSExFTkJRekZDTEVsQlFVazRUQ3hGUVVGUGFFa3NWVUZCVlRsRUxFZEJRM0pDTEVsQlFVbHpRaXhGUVVGTE1Fc3NVMEZCVTBZc1IwRkhaQ3hQUVVGUGRrMHNSVUZCVVhsVUxFOUJRVThzU1VGQlNYWk1MRlZCUTNSQ0xEWkVRVU50UTI1SExFVkJRVXRwUnl4WlFVRlpkVVVzUzBGS2VFUnRWQ3hGUVVGbGFGUXNTMEZCVDBnc1JVRlJPVUp0VkN4RlFVRmxOV1VzVDBGQlV6Uk1MRVZCUTNoQ0xFbEJRVWxuU1N4RlFVRlZibEVzVlVGQlZUbEVMRWRCUTNoQ0xFOUJRVTlwUWl4TFFVRkxkV1FzWVVGQllXSXNSVUZCV1hOQ0xFVkJRV2RDYUV3c1JVRkJVMmhVTEUxQlEzSkRMRTlCUVVFc1JVRkZRV2RrTEVsQlN6RkNUQ3hKUVVkTUxFTkJRVU56UWl4cFFrRkJhVUlzUlVGQlJUVmhMRk5CUVZNc1MwRkJTelpoTEVkQlFVY3NRMEZCUXl4VFFVRlRjR1lzUlVGQlVXWXNSVUZCVDBRc1IwRkRhRVVzWVVGRFFVTXNSVUZCVDBRc1VVRkJWU3hUUVVGVFVTeEZRVU5CYzBvc1JVRkRRWEpGTEVWQlEwRkRMRVZCUTBFeVlTeEZRVU5CTVdFc1IwRkRNVUlzU1VGRFNTdERMRVZCUkZNeFNDeEZRVUZSTEZsQlEwVXdTQ3hWUVVOdVFtNUhMRVZCUVU5MlFpeEZRVUZSTEZWQlEyWm5TaXhGUVVGWGVrZ3NSVUZCUzNsSUxGTkJRMmhDUkN4RlFVRlhlRWdzUlVGQlMzZElMRk5CUTJoQ2RWY3NSVUZCWjBJc1IwRnRRbkJDTEZOQlFWTkRMRVZCUVdGRExFVkJRVzFDY0dRc1JVRkJWWEZrTEVWQlFXTTNZaXhIUVVNM1JDeEhRVUZKWlN4RlFVRk5NRVVzWlVGQlowSXNRMEZEZEVJc1NVRkJTWEZYTEVWQlFWY3NTVUZCU1d4blFpeEZRVUZSYVVZc1IwRkRka0pyWWl4RlFVRnJRbnBsTEV0QlFVdDVaU3huUWtGQmEwSXNTVUZCU1c1blFpeEZRVUZSYVVZc1IwRkRla1IyUkN4TFFVRkxNR1VzVTBGQlYwWXNSVUZCVTJRc1QwRkJUeXhYUVVNMVFpeFBRVUZQWlN4SlFVVllSQ3hGUVVGVGNGQXNjVUpCUTFSdlVDeEZRVUZUZGxvc1lVRkJZV3BHTEZkQlJWSkJMRXRCUVVzd1pTeFRRVUZYTEVsQlFVbHdaMElzUlVGQlVXbEdMRWxCUTJ4RE5rd3NjVUpCUlZwd1VDeExRVUZMTW1Vc1QwRkJVMnBqTEVWQlEyUXhReXhMUVVGTE5HVXNiVUpCUVhGQ1RpeEZRVU14UW5SbExFdEJRVXMyWlN4VlFVRlpNMlFzUlVGRGFrSnNRaXhMUVVGTE9HVXNaMEpCUVVGQkxFVkJRMHc1WlN4TFFVRkxLMlVzWlVGQmVVTXNiVUpCUVdwQ1VpeEZRVU4yUWl4RFFVRkRRU3hIUVVGalV5eFBRVUZQV2l4SFFVTjBRa0VzUlVGRFRuQmxMRXRCUVV0cFppeG5Ra0ZCYTBJc1MwRkRka0pxWml4TFFVRkxhMllzYjBKQlFVRkJMRVZCUlZRM1pTeEZRVUZMYzFZc1UwRkJVekJKTEVWQlFXTkdMRWRCUlRWQ1JTeEZRVUZoZEdVc1ZVRkJWVzltTEZsQlFXTXNWMEZEYWtNc1QwRkJlVUlzVDBGQmJFSnVaaXhMUVVGTE1HVXNWVUZIYUVKTUxFVkJRV0YwWlN4VlFVRlZjV1lzVTBGQlZ5eFhRVU01UW5CbUxFdEJRVXN3WlN4VFFVRlhNV1VzUzBGQlN6aGxMRmRCUVdFc1MwRkRPVUp5WWl4RlFVRk5NRVVzWjBKQlFUSkRMRTlCUVhwQ2Jra3NTMEZCUzNsbExHdENRVU0zUW5wbExFdEJRVXQ1WlN4blFrRkJaMEpaTEZkQlEzSkNjbVlzUzBGQlMzbGxMR2RDUVVGclFpeFBRVWt2UWtvc1JVRkJZWFJsTEZWQlFWVjFaaXhyUWtGQmIwSXNWMEZEZGtNc1NVRkJTWFJtTEV0QlFVdHRaaXhqUVVGVUxFTkJRMEVzU1VGRlNYQklMRVZCUTBvc1VVRkJRU3hKUVVnNFFpOVlMRXRCUVVzNFpTeFhRVUZ0UW5aSExFOUJZV3hFZGxrc1MwRkJTekJsTEZOQlFWTTVVeXhsUVVOa2JVMHNSVUZCVTJ4UkxFVkJRVk0zU0N4TFFVRkxPR1VzVjBGQmJVSjJSeXhSUVVGSGNGb3NTMEZCUzJFc1MwRkJTemhsTEdkQ1FVRkJRU3hIUVVWMlJEbGxMRXRCUVVzd1pTeFRRVUZUTjFNc2EwSkJZa3NzUTBGRGJrSXNTVUZCU1hWRExFVkJRVk1zU1VGQlNUbFFMRVZCUVZFMFlpeHJRa0ZEY2tJc1owTkJRMG8xWWl4RlFVRlJhV2hDTEZWQlFWVkRMR1ZCUVdsQ2NGSXNSVUZEYmtOd1R5eExRVUZMTUdVc1UwRkJVM3BWTEd0Q1FVRnJRbTFGTEVkQlEyaERjRThzUzBGQlN6QmxMRk5CUVZNNVV5eGxRVU5rYlUwc1JVRkJVMnhSTEVWQlFWTTNTQ3hMUVVGTE9HVXNWMEZCYTBKeVJ5eFBRVUZIZEZvc1MwRkJTMkVzUzBGQlN6aGxMRmRCUTB3eFVTeEhRVU5xUkhCUExFdEJRVXN3WlN4VFFVRlROMU1zWTBGUGJFSTNUQ3hMUVVGTGEyWXNiMEpCUVVGQkxFVkJRMHhzWml4TFFVRkxhV1lzWjBKQlFXdENMRXRCUTNaQ2FtWXNTMEZCUzNsbUxGVkJRVlV4U0N4TFFVZHVRbk5ITEVWQlFXRjBaU3hWUVVGVk1tWXNhMEpCUVc5Q0xGTkJRVk55WVN4SFFVTm9SSEpHTEV0QlFVdHBaaXhuUWtGQmEwSXNTMEZEZGtKcVppeExRVUZMTUdVc1UwRkJVemxUTEdWQlEyUXNTVUZCU1cxTkxFVkJRVk5zVVN4RlFVRlROMGdzUzBGQlN6aGxMRmRCUVZkaExFMUJRVTE0WjBJc1MwRkJTMkVzUzBGQlN6aGxMRmRCUVZsNldpeEhRVU5zUlhKR0xFdEJRVXN3WlN4VFFVRlROMU1zWTBGRFpEZE1MRXRCUVV0NVppeFZRVUZWTVVnc1NVRkhia0p6Unl4RlFVRmhkR1VzVlVGQlZUWm1MR2xDUVVGdFFpeFRRVUZUZUZJc1IwRkRMME53VHl4TFFVRkxhV1lzWjBKQlFXdENMRXRCUTNaQ2FtWXNTMEZCU3pCbExGTkJRVk42VlN4clFrRkJhMEp0UlN4SFFVTm9RM0JQTEV0QlFVc3daU3hUUVVGVE9WTXNaVUZEWkN4SlFVRkpiVTBzUlVGQlUyeFJMRVZCUVZNM1NDeExRVUZMT0dVc1YwRkJhMEp5Unl4UFFVTjRRM1JhTEV0QlFVdGhMRXRCUVVzNFpTeFhRVUZaTVZFc1IwRkRNMEp3VHl4TFFVRkxNR1VzVTBGQlV6ZFRMR05CUTJRM1RDeExRVUZMZVdZc1ZVRkJWVEZJTEVsQlIyNUNjMGNzUlVGQllYUmxMRlZCUVZWdFN5eHBRa0ZCYlVJc1YwRkRkRU1zUjBGQlNXeExMRXRCUVV0cFppd3lRa0ZCTWtJelowSXNSVUZCVXl4RFFVTjZReXhKUVVGSmNVSXNSVUZCVlVzc1MwRkJTMmxtTEdkQ1FVTnVRbXBtTEV0QlFVdHBaaXhuUWtGQmEwSXNTMEZEZGtKMFppeEZRVUZSZFVrc1YwRkphRUp0Vnl4RlFVRmhkR1VzVlVGQlZVb3NVVUZCVlN4WFFVTTNRaXhQUVVGUFN5eExRVUZMTUdVc1ZVRkhhRUpNTEVWQlFXRjBaU3hWUVVGVk9HWXNTMEZCVHl4WFFVTXhRamRtTEV0QlFVczRaU3hYUVVGaE9XVXNTMEZCU3pSbExHMUNRVUZ0UW5wbUxFdEJRVXRoTEV0QlFVczJaU3hYUVVOd1JEZGxMRXRCUVVzMlpTeFZRVU5FTjJVc1MwRkJTelJsTEhkQ1FVRkJRU3hGUVVOVU5XVXNTMEZCU3pCbUxIVkNRVUZCUVN4SlFVZFVja0lzUlVGQllYUmxMRlZCUVZVd1ppeFZRVUZaTEZOQlFWVXhTQ3hIUVVONlF5eEpRVUZKY0Zrc1JVRkJWVXNzUzBGQlN6QmxMRk5CUTI1Q0xFZEJRVWt6Unl4SlFVRlhhbEVzUlVGRldDeFBRVVJCT1Vnc1MwRkJTMjltTEZkQlEwUndaaXhMUVVGTGEyWXNiVUpCUTBWMlppeEZRVUZSZFVrc1UwRkZVblpKTEVWQlFWRnRaMElzWjBKQlFXZENMMGdzUlVGQlQyeGhMRWRCUVVGQkxFZEJTVGxETEVsQlFVbDNTQ3hGUVVGUk1GTXNSVUZCVHpGVExFMUJRMjVDTEVsQlFVRXNTVUZCU1RCVExFVkJRVTluU1N4TFFVVlFMRTlCUkVFdlppeExRVUZMYjJZc1YwRkRSSEJtTEV0QlFVdHJaaXh0UWtGRFJYWm1MRVZCUVZGMVNTeFRRVVZTZGtrc1JVRkJVVEpGTEdsQ1FVRnBRbVVzUjBGSGNFTXNTVUZCU1ZBc1JVRkJaWFJDTEVWQlFXOUNOa0lzUlVGQlQzSkdMRXRCUVVzd1pTeFZRVU51UkN4SFFVRk5OVm9zWVVGQmQwSjRSeXhIUVV0TUxGRkJTbkpDZDBjc1JVRXhTVm9zVTBGQmFVTlBMRVZCUVU4cldTeEZRVUZsTkVJc1IwRkRia1FzU1VGQlN5eEpRVUZKYW1oQ0xFVkJRVWtzUlVGQlIwRXNSVUZCU1hGbUxFVkJRV05vWml4VFFVRlZUQ3hGUVVGSExFTkJRek5EYVdoQ0xFVkJRVmx3VlN4bFFVTmFMRWxCUVVsdFRTeEZRVUZUYkZFc1JVRkJVM1ZYTEVWQlFXTnlaaXhIUVVGMlFqaEpMRU5CUVRKQ2VFTXNSMEZGZUVNc1IwRkVRVEpoTEVWQlFWbHVWU3hqUVVOU2EwMHNTVUZCVjJwUkxFVkJRVlVzUTBGRGNrSnJXU3hGUVVGWmNGVXNaVUZEV2l4SlFVRkpiRTBzUlVGQlRYQkNMRVZCUVZGNVZDeFBRVUZQYWtzc1JVRkJVMnBMTEVkQlJXeERMRTlCUkVGdGFVSXNSVUZCV1c1VkxHTkJRMHh1VFN4RlFVVllMRWxCUVVsdlJpeEZRVUZsZEVJc1JVRkJiMEoxVlN4RlFVRlJhVWtzUjBGREwwTXNSMEZCU1d4aUxHRkJRWGRDZUVjc1JVRkJVeXhQUVVGUGQwY3NSVUZGYUVRc1QwRkJUeXhMUVdSWUxFTkJNa2wzUTBFc1JVRkRRVGxGTEV0QlFVc3JaU3hsUVVOTUwyVXNTMEZCU3pCbExGZEJTbkpETEVOQmFVSkJMRWxCUVVsMVFpeEhRVVJLYm1Jc1JVRkJaVUVzUlVGQllVTXNWMEZEUVZZc1ZVRkZSeXhKUVVGa0xGTkJRVmcwWWl4SlFVTkdhbWRDTEV0QlFVdHBaaXhuUWtGQmEwSnVZU3hGUVVOMlFrRXNSVUZCWVc5aUxFOUJRVTlzWjBJc1MwRkJUU3hQUVVOUkxFbEJRV1FzVTBGQldHbG5RaXhIUVVOVU0yaENMRVZCUVZFd1NpeFBRVUZQYUVZc1QwRkRXR2hFTEV0QlFVc3daaXhyUWtGQmJVSXhaaXhMUVVGTk9FVXNSVUZCWVdsVkxGVkJSV0lzU1VGQlpDeFRRVUZZYTBnc1IwRkRWRE5vUWl4RlFVRlJNRW9zVDBGQlQyaEdMRTlCUTFob1JDeExRVUZMTkdZc2FVSkJRV3RDTldZc1MwRkJUVGhGTEVWQlFXRTRWQ3hYUVVjNVF6VlpMRXRCUVV0elppeDVRa0Y2UWtSMFppeExRVUZMTkdZc2FVSkJRMFFzU1VGQlNYQmFMRVZCUTBFc2IwZEJRVzlJTWs0c1VVRkJVU3hMUVVGTlN5eFBRVUZQYmxBc1NVRkRla2tzYjBKQlEwRnlSaXhMUVVGTE1tVXNUMEZCVDNaTExFMUJRVTBzVFVGQlRXcE9MRTFCUVUwc1IwRkJTU3hIUVVGSGRVMHNTMEZCU3l4VFFUQkNiRVZ3Vml4RlFVRlJhV2hDTEZWQlFWa3NVMEZCVldwQ0xFVkJRVzFDT1VJc1IwRkROME1zUjBGQmFVTXNiVUpCUVhSQ09FSXNSVUZEVUN4TlFVRk5MRWxCUVVrNVdDeEZRVUZWTERCRlFVVjRRaXhKUVVGSksxZ3NSVUZCWlhwWkxFOUJRVTh3Vnl4SFFVRlRLMElzWVVGREwwSTBRaXhGUVVGblFqbENMRVZCUTJoQ00ySXNSMEZCUVVFc1NVRkJXVEZFTEU5QlFWRXdSQ3hOUVVONFFpeFBRVUZQTEZkQlEwZ3NTVUZCU1RCa0xFVkJRVms1UWl4RlFVRnJRak5ZTEUxQlFVMHpSeXhMUVVGTk5rTXNWMEZETVVOM1pDeEZRVUZSTEVsQlFVbEdMRTlCUVVGQkxFOUJRV012V1N4RlFVRnpRbTFZTEVWQlEzUkNOMklzUjBGRE1VSm9SQ3hGUVVGTk1tZENMRVZCUVUweFowSXNWVUZIYUVJc1QwRkdRVEJuUWl4RlFVRk5ka0lzVjBGQllYTkNMRVZCUTI1Q1F5eEZRVUZOV0N4MVFrRkJRVUVzUjBGRFEyaG5RaXhKUVVsbWNFSXNSVUZCVVdsb1FpeFZRVUZWWlN4blFrRkJhMElzVTBGQlUzSm1MRWRCUTNwRExFZEJRV3RDTEcxQ1FVRlFRU3hGUVVOUUxFMUJRVTBzU1VGQlNYVkdMRVZCUVZVc1owTkJRV3REYmtjc1JVRkJTMmxITEZsQlFWbHlSaXhKUVVVelJXMWtMRVZCUVdOb1pDeExRVUZMU0N4SlFVZDJRak5ETEVWQlFWRXJhRUlzVFVGQlVTeFRRVUZWTDBJc1IwRkZkRUlzUjBGRVFUZGhMRVZCUVUxM1ZTeFhRVUZYTEd0Q1FVRnRRaXgxUWtGRFNDeHRRa0ZCZEVKeFJ5eEZRVU5RTEU5QlFVOHhWeXhGUVVGaExEQkZRVVY0UWl4SlFVRkplVmtzUlVGQlVTeEpRVUZKYUVNc1JVRkJZVU1zUlVGQmJVSjBaU3hOUVVNMVEwNHNSVUZCVFRKblFpeEZRVUZOTVdkQ0xGVkJSV2hDTEU5QlJFRXdaMElzUlVGQlRWSXNTMEZCUzNab1FpeEZRVUZSSzJoQ0xFOUJRMW96WjBJc1MwRkpWQ3hEUVVGRGVWa3NWMEZCVnl4SFFVRkhPVlVzVTBGQlV5eExRVUZMYTJRc1IwRkJSeXhEUVVGRExGTkJRVk42YUVJc1JVRkJVV1lzUlVGQlQwUXNSMEZETTBRc1lVRkRRVU1zUlVGQlQwUXNVVUZEVUN4VFFVRlRVU3hGUVVGVGNVb3NSVUZCWTI1RkxFVkJRWEZDUkN4RlFVRlZkMFVzUlVGRGRFUTJSU3hIUVVOVUxFbEJRVWwyVFN4RlFVRlBka0lzUlVGQlVTeFZRVU5FZFVJc1JVRkJTelpHTEZsQlExSTNSaXhGUVVGTGQwZ3NVMEZEVEhoSUxFVkJRVXQ1U0N4VFFYVkhjRUo0U2l4RlFVRlJiMVlzUzBGQlR5eFhRVU5ZTEVsQlEwbDZVeXhGUVVSQmRXWXNSVUZCVHpOa0xGVkJRVlY2UkN4UFFVRlRMRVZCUlRGQ2IyaENMRVZCUVU4c1IwRkJaME1zYlVKQlFYQkNNMlFzVlVGQlZUSmtMRXRCUXpkQ2RtWXNSVUZCU3pSQ0xGVkJRVlV5WkN4SlFTdERia0lzU1VGQlNYUmFMRVZCUVU4c1IwRkJSME1zVFVGQlRXaEpMRXRCUVVzd1JDeFhRVU55UWpWQ0xFZEJRVWxwUnl4RlFVRkxVaXhOUVVOaUxFbEJRVWxvU0N4RlFVRk5MRWxCUVVscFNTeEZRVUZoVkN4SFFVRk5ka2dzVlVGRGFrTXNXVUZCUVN4SlFVRlBjMElzUlVGQmJVSjJRaXhGUVVGSksyZENMRTlCUVU5NFppeEhRVUZOZGtJc1MwRkxOME1zUTBGQlF6SkVMRk5CUVZNc1MwRkJTM0ZrTEVkQlFVY3NRMEZCUXl4VFFVRlROV2hDTEVWQlFWRm1MRVZCUVU5RUxFZEJRemRETEdGQlEwRkRMRVZCUVU5RUxGRkJRVlVzVTBGQlUxRXNSVUZEUVhGS0xFVkJRMEZETEVWQlEwRndSU3hGUVVOQlJDeEZRVU5CUlN4SFFVTXhRaXhKUVVGSmJVb3NSVUZCV1hSUExFVkJRVkYxVHl4WFFVTndRbmhOTEVWQlFVOTJRaXhGUVVGUkxGVkJRMllyU1N4RlFVRlhlRWdzUlVGQlMzZElMRk5CUTJoQ1F5eEZRVUZYZWtnc1JVRkJTM2xJTEZOQlEyaENReXhGUVVGUmVrb3NSVUZCVVRCS0xFOUJSWEJDTEZOQlFWTXlXU3hGUVVGdlFteG9RaXhGUVVGVmQwSXNSVUZCU1RKbUxFVkJRVTlETEVkQlF6bEROMmRDTEV0QlFVczRaMElzWVVGQllYSm9RaXhIUVVOc1FrOHNTMEZCU3pCbExGTkJRVk4wVUN4eFFrRkRaQ3hKUVVGSlVDeEZRVUZUYWtNc1NVRkRZalZOTEV0QlFVc3JaMElzVlVGQmRVSXNUMEZCV0d4VExFVkJRV3RDTlU0c1JVRkJTMW9zUlVGQlMzbFBMRmRCUVZkRUxFVkJRVkUxVGl4SFFVTm9SV3BDTEV0QlFVdG5hRUlzYVVKQlFXMUNTQ3hKUVVGWmRHUXNSVUZET1VJc1NVRkJTV2RZTEUxQlFVMTJZU3hMUVVGTFdpeFZRVU5tTEV0QlEwNVpMRXRCUVV0cGFFSXNUMEZCVTB3c1JVRkRaRFZuUWl4TFFVRkxhMmhDTEZWQlFWa3NSVUZEYWtKc2FFSXNTMEZCUzIxb1FpeFBRVUZUTEVkQlEyUndXaXhGUVVGTkwwVXNUMEZCVDJoRUxFdEJRVXR2YUVJc1YwRkJXWEJvUWl4VlFVRkJRU3hIUVRaSGJFTXNVMEZCVTNOakxFVkJRVWszWXl4RlFVRlZkMElzUlVGQlNYVmlMRVZCUVZOeFJTeEhRVU5vUXl4SFFVRnJRaXh0UWtGQlVEVm1MRVZCUTFBc1QwRkJUekpITEVWQlFXRXNaME5CUVd0RGRrZ3NSVUZCUzJsSExGbEJRVmx5Uml4SlFVY3pSU3hKUVVGSk1tWXNSVUZCVVN4RlFVTmFMRkZCUVVFc1NVRkJTWEJGTEVWQlFYVkNMRU5CUTNaQ0xFZEJRWFZDTEdsQ1FVRmFRU3hIUVVGdlF5eFBRVUZhUVN4RlFWRXZRaXhQUVVGUGJHVXNSVUZCVVhsVUxFOUJRVThzU1VGQlNYWk1MRlZCUTFZc1owUkJRME51Unl4RlFVRkxhVWNzV1VGQldXdFhMRXRCVkd4RExFZEJRVzFETEdsQ1FVRjRRa0VzUlVGQlVUWkZMRmxCUTJZc1QwRkJUeTlwUWl4RlFVRlJlVlFzVDBGRFdDeEpRVUZKZGt3c1ZVRkJWU3cwUTBGRFJXNUhMRVZCUVV0cFJ5eFpRVUZaYTFjc1JVRkJVVFpGTEdWQlJXcEVWQ3hGUVVGUmNFVXNSVUZCVVRaRkxGbEJVM2hDTEU5QlFVOHNTVUZCU1ZZc1JVRkJiMEpzYUVJc1JVRkJWWGRDTEVWQlJucERNbVlzUlVGQmVVSXNhVUpCUVZaQkxFZEJRMWhWTEZOQlFWTldMRWxCUVZWQkxFZEJRVk1zUlVGQlNVRXNSVUZCVVN4RlFVTlJReXhIUVVGVGJHaENMRlZCYWtscVJWVXNSVUZCUzNOV0xGTkJRVk5uVEN4RlFVRnhRbWhhTEVkQlJXNURaMW9zUlVGQmIwSTFaMElzVlVGQlZYRm9RaXhYUVVGaExGZEJRM1pEY0doQ0xFdEJRVXQxYUVJc1dVRkJRVUVzUjBGQmJVSXNTVUZITlVKYUxFVkJRVzlDTldkQ0xGVkJRVlY1YUVJc1RVRkJVU3hoUVVWMFEySXNSVUZCYjBJMVowSXNWVUZCVlRKbUxHdENRVUZ2UWl4VFFVRlZjbUVzUlVGQlQzbENMRWRCUXk5RUxFbEJRVWt5WVN4RlFVRlRlbWhDTEV0QlFVc3dhRUlzVVVGRFpIUnBRaXhGUVVGVFdTeExRVUZMV2l4VFFVTmtkV2xDTEVWQlFXdENNMmhDTEV0QlFVdG5hRUlzYVVKQlEzWkNTaXhGUVVGUk5XZENMRXRCUVV0cGFFSXNUMEZGYWtJc1IwRkJTVzVoTEVWQlFWRXNSMEZIVWl4SFFVUkJNbUVzUlVGRVFUTmhMRWRCUVd0Q0xFVkJRVlJCTEVWQlFXTXNSMEZEVUhwQ0xFVkJRMXAxWWl4SFFVRlRMRWxCUTFRMVowSXNTMEZCUzJ0b1FpeFpRVU5NYkdoQ0xFdEJRVXQ1UWl4alFVTkVla0lzUzBGQlMyMW1MR1ZCUVdVc1QwRkJRU3hOUVVWNlFpeERRVU5JTEVkQlFVbDVRaXhIUVVGVExFZEJRVXMxWjBJc1MwRkJTMnRvUWl4WFFVRmhUaXhGUVVkb1F5eFBRVVpCWVN4RlFVRlBNMkVzUjBGQlUzcENMRVZCUTJoQ2NrWXNTMEZCUzIxb1FpeFBRVUZQTDJZc1MwRkJTekJHTEVsQlFVRkJMRVZCUjBjc1QwRkJjRUkyWVN4SlFVRXdRa0VzUlVGQlowSTNZU3hIUVVGVGVrSXNSMEZGZGtRc1NVRkJTVEZHTEVWQlFWVkxMRXRCUVVzd1pTeFRRVU5tYTBRc1JVRkJWelZvUWl4TFFVRkxLMmRDTEZWQlEyaENOMllzUlVGQlYzWkNMRVZCUVZGcFJpeGpRVU4yUW1wR0xFVkJRVkZwVFN4bFFVTlNMRWxCUVVsc1RTeEZRVUZOYlVrc1JVRkJVeXRhTEVkQlFWVjZhVUlzUzBGQlN5dENMRVZCUVZWdFJTeEZRVUZQZVVJc1JVRkJUekZJTEVkQlEzUkVORklzUlVGQmFVSnlVaXhGUVVGUmEwMHNZMEZQTjBJc1IwRk9RWEJKTEVWQlFVMTFWQ3h6UWtGRFJuUllMRVZCUTBGelVpeEZRVU52UWl4UFFVRndRakpSTEVWQlFUSkNMR2xDUVVGdFFpeGpRVU01UTJocFFpeEhRVVZCUkN4SlFVRlJiMGtzUlVGRlVpeFBRVVJCT1Vnc1MwRkJTelpFTEZGQlFWRnVSU3hGUVVGSk4wSXNTVUZCUVVFc1JVRkpja0lzU1VGQlNXbElMRVZCUVdWMFFpeEZRVUZ2UWpsRUxFVkJRVXROTEV0QlFVc3daU3hWUVVOcVJDeEhRVUZKTlZvc1lVRkJkMEo0Unl4RlFVRlRMRU5CUldwRExFbEJRVWt5YUVJc1IwRkVTbTVpTEVWQlFXVkJMRVZCUVdGRExGZEJRMEZXTEZWQlJUVkNMRWRCUVN0Q0xFbEJRV1FzVTBGQldEUmlMRWRCU1VZc1QwRklTVmNzUjBGQlV5eEhRVUZITldkQ0xFdEJRVXRyYUVJc1dVRkRja0pQTEVWQlFVOHpZU3hIUVVGVGFFTXNSVUZEYUVKQkxFVkJRV0Z2WWl4UFFVRlBiR2RDTEUxQlFYRkNMRWRCUVdRNFJ5eEZRVUZSTEV0QlFVRXNSVUZGYUVNc1IwRkJLMElzU1VGQlpDeFRRVUZZYlZvc1IwRkZUaXhQUVVFclFpeEpRVUZrTEZOQlFWaEJMRWxCUTFScVowSXNTMEZCU3paRUxGRkJRVkZwUWl4RlFVRmhPRlFzV1VGQlFVRXNTVUZITVVJMVdTeExRVUZMYlVvc1YwRkJRVUVzUjBGTVRIcEtMRVZCUVUxdlJpeEZRVUZoYVZVc1UwRlRNMEl3U1N4RlFVRlBNMkVzUjBGQlUzQklMRVZCUjNCQ0xGRkJSSE5DVFN4TFFVRkxObWhDTEdkQ1FVTk9lbWxDTEVsQlEwOHNUMEZCY0VKMWFVSXNSVUZEUVROb1FpeExRVUZMTm1kQ0xGRkJRVkZaTEVWQlFWRkZMRWRCUlhKQ00yaENMRXRCUVVzNGFFSXNVMEZCVTB3c1NVRkJRVUVzU1VGUE1VSmtMRVZCUVc5Q05XZENMRlZCUVZVd1FpeFpRVUZqTEZkQlNYaERMRWxCU0VFc1NVRkJTVU1zUlVGQlVURkNMRXRCUVV0dGFFSXNUMEZEWWxBc1JVRkJVVFZuUWl4TFFVRkxhV2hDTEU5QlEySlJMRVZCUVZONmFFSXNTMEZCU3pCb1FpeFJRVU5ZYUdkQ0xFVkJRVTEwUXl4UFFVRlRMRWRCUVV0WkxFdEJRVXRyYUVJc1ZVRkJXVTRzUjBGQlR5eERRVU12UXl4SFFVRkpOV2RDTEV0QlFVdHRaaXhqUVVGbExFOUJRM2hDTEVsQlFVbHlXU3hGUVVGUmNFWXNSVUZCVFdkR0xFMUJRMnhDTVVjc1MwRkJTekJtTEd0Q1FVRnJRaXRDTEVWQlFVOHpZU3hIUVVGUlFTeExRVWs1UXpaYUxFVkJRVzlDTldkQ0xGVkJRVlU0WjBJc1VVRkJWU3hUUVVGVmEwSXNSVUZCVlU0c1IwRkplRVFzU1VGSVFTeEpRVUZKTVVRc1JVRkJUVEJFTEVWQlFVOXlhVUlzVDBGRFlrMHNSVUZCVFN4SlFVRkpObUVzVFVGQlRYZEVMRWRCUTJoQ0wxTXNSVUZCU1N4RlFVTkRhazBzUlVGQlNTeEZRVUZIUVN4RlFVRkpaMllzU1VGQlQyaG1MRVZCUTI1Q1oycENMRVZCUVZOb2FrSXNTMEZCU1Zjc1JVRkJTWE5NTEV0QlFVOTVWeXhGUVVGUE1XbENMRWxCUlhaRFZ5eEZRVUZKVGl4UFFVRlRORXdzUlVGRFltaE1MRXRCUVVzNGFFSXNVMEZCVTNCcFFpeEpRVWRzUW1sb1FpeEZRVUZ2UWpWblFpeFZRVUZWTkdoQ0xHZENRVUZyUWl4WFFVTTFReXhQUVVGUE0yaENMRXRCUVV0bmFFSXNhMEpCTkVKb1FqRnBRaXhGUVVGUmVVSXNWVUZCVlhWakxFbEJRVTBzVTBGQlZYSmlMRVZCUVVsMVlpeEhRVU5zUXl4UFFVRlBSaXhGUVVGSmRHTXNTMEZCVFdsQ0xFVkJRVWwxWWl4RlFVRlRMRTlCUjJ4RGJHVXNSVUZCVVdkbExFbEJRVTBzVTBGQlZUZGpMRVZCUVZWM1FpeEZRVUZKZFdJc1JVRkJVM0ZGTEVkQlF6TkRMRTlCUVU5MlJTeEZRVUZKTjJNc1JVRkJWWGRDTEVWQlFVbDFZaXhGUVVGVGNVVXNUVUZOY0VNc1EwRkJRM2hrTEZOQlFWTXNTMEZCU3pKbExFZEJRVWNzUTBGQlF5eFRRVUZUYkdwQ0xFVkJRVkZtTEVWQlFVOUVMRWRCUXpkRExHRkJRMEZETEVWQlFVOUVMRkZCUTFBc1UwRkJVMUVzUlVGQlUybEdMRVZCUVZWRExFVkJRWEZDYjBVc1JVRkJZMjVGTEVkQlF5OUVMRWxCUVVsd1JDeEZRVUZQZGtJc1JVRkJVU3hWUVVObUswa3NSVUZCVjNoSUxFVkJRVXQzU0N4VFFVVndRblpLTEVWQlFWRjFVeXhQUVVGVExGTkJRVlUxVUN4SFFVTjJRaXhIUVVGclFpeHRRa0ZCVUVFc1JVRkRVQ3hOUVVGTkxFbEJRVWt6UXl4RlFVRlJhMGtzVlVGQlZTeG5RMEZCYTBOdVJ5eEZRVUZMYVVjc1dVRkJXWEpHTEVsQlJXNUdMRTlCUVU4c1YwRkRTQ3hKUVVGSmRrSXNSVUZCVFN4SlFVRkpjRUlzUlVGQlVXbEdMRWRCUTNSQ04wUXNSVUZCU1RCUUxIRkNRVU5LTVZBc1JVRkJTV3ROTEdWQlEwb3NTVUZCU1haSExFVkJRVkYzUXl4RlFVRlROVWNzUjBGQlNUQkdMRTFCUVUwelJ5eExRVUZOTmtNc1YwRkRha050VHl4RlFVRnBRblJTTEVWQlFVbHRUU3hqUVVsNlFpeFBRVWhCY0Vrc1JVRkJUWFZVTEhOQ1FVTkdNMUlzUlVGQlR6Sk1MRVZCUVdkQ0xHbENRVUZyUW5SU0xFZEJRemREUVN4RlFVRkpkV2xDTEhOQ1FVRnpRalZqTEVkQlEyNUNNMFlzU1VGSlpuQkNMRVZCUVZFMGFrSXNVVUZCVlRWcVFpeEZRVUZoTm1wQ0xFbEJRVWtzVTBGQlZXeG9RaXhIUVVONlF5eEhRVUZyUWl4dFFrRkJVRUVzUlVGRFVDeFBRVUZQTWtjc1JVRkJZU3huUTBGQmEwTjJTQ3hGUVVGTGFVY3NXVUZCV1hKR0xFbEJSVE5GTEVsQlIwbHZSU3hGUVVoQk0wWXNSVUZCVFN4SlFVRkpjRUlzUlVGQlVXbEdMRWRCU1hSQ0xFZEJTRUUzUkN4RlFVRkpNRkFzY1VKQlEwb3hVQ3hGUVVGSmEwMHNaVUZGUVM5SkxGVkJRVlY2UkN4UFFVRlRMRVZCUVVjc1EwRkRkRUp4UlN4RlFVRk5kMVVzVjBGQlZ5eHBSRUZEYWtJc1NVRkJTVGxYTEVWQlFVMHdRaXhWUVVGVkxFZEJRMmhDTUVvc1JVRkJUVEZLTEZWQlFWVXNSMEZEY0VKM1F5eEZRVUZSYUVZc1JVRkJTekpLTEZGQlFWRTNTU3hIUVVGUE1FY3NSVUZCVXpWSExFZEJRVWt3Uml4TlFVRk5ORVlzUlVGQlMzQk1MRWRCUTNoQ01FY3NSVUZCVXpWSExFZEJRVWs1UWl4TFFVRkxiMDRzUlVGQlMzQk1MRkZCUlc1RWEwVXNSVUZCVVhkRExFVkJRVk0xUnl4RlFVRlVORWNzUjBGRldpeEpRVUZKYlVvc1JVRkJhVUowVWl4RlFVRkpiVTBzWTBGSmVrSXNUMEZJUVhCSkxFVkJRVTExVkN4elFrRkRSak5TTEVWQlFVOHlUQ3hGUVVGblFpeGpRVUZsZEZJc1IwRkRNVU5CTEVWQlFVbDFhVUlzYzBKQlFYTkNOV01zUjBGRGJrSXpSaXhIUVVkWWNFSXNSVUZCVVhsQ0xGVkJRVlZyYVVJc2MwSkJRWGRDTEZOQlFWVTFZeXhIUVVNMVEwRXNTVUZCVldoR0xFVkJRVXQ1U0N4VFFVTm1PVWdzUzBGQlN6aG1MR2RDUVVGblFucGhMRVZCUVUxNFNDeEhRVUZCUVN4SFFVVXpRbTFETEV0QlFVdHpSU3hwUWtGQmFVSmxMRWRCUVVGQkxFMUJTelZDTEVOQlFVTm9ReXhUUVVGVExFdEJRVXNyWlN4SFFVRkhMRU5CUVVNc1UwRkJVM1JxUWl4RlFVRlJaaXhGUVVGUFJDeEhRVU0zUXl4aFFVTkJMRWxCUVVsMVF5eEZRVUZQZGtJc1JVRkJVU3hWUVVObWRXcENMRVZCUVcxQ2FHbENMRVZCUVV0bmFVSXNhVUpCUlhoQ2VFZ3NSVUZFVXk5aUxFVkJRVkVzV1VGRFV5dGlMR2xDUVVNeFFqbE9MRVZCUVUxcVR5eEZRVUZSTEZOQlQyUjNha0lzUlVGQldTeHBRMEZ6UTJoQ2RtdENMRVZCUVU5RUxGRkJha0pRTEZOQlFUUkNOa0lzUlVGQlV6UnBRaXhIUVVOcVF5eFBRVUZQTEZOQlFWTXpUQ3hGUVVGTGRsSXNSMEZEYWtJc1IwRkJaMElzVDBGQldqRkdMRVZCUVVvc1EwRkRRU3hIUVVGSmFWZ3NSVUZCU3l4RFFVTk1MRWxCUVVrMFRDeEZRWGhDYUVJc1UwRkJaME4wWkN4SFFVTTFRaXhKUVVGSmVFWXNSVUZEU2l4SFFWSktMRk5CUVhkQ2QwWXNSMEZEY0VJc1QwRkJUMEVzWVVGQlpXeEhMRTlCUTJ4Q0swNHNSVUZCU1RKUExHVkJRV1Y0Vnl4TFFVRlRiRWNzVFVGQlRXVXNWVUZHTVVNc1EwRlJkVUp0Uml4SFFVRk5MRVZCUTNKQ2VFWXNSVUZCVFN4SlFVRkpiV0lzUlVGQmFVSXpWaXhKUVVOMlFqaExMRXRCUVU4NVN5eEZRVUZKT0Vzc1MwRkRablJSTEVWQlFVa3lSeXhSUVVGVmJrSXNSVUZCU1cxQ0xGRkJRMnhDTTBjc1JVRkJTV2RFTEUxQlFWRjNReXhGUVVGSmVFTXNUVUZGYUVJc1NVRkVRU3hKUVVGSk9FZ3NSVUZCVDNWRExFVkJRVWwyUXl4TFFVRkxkRVlzUjBGRFdHNUhMRVZCUVVrc1JVRkJSMEVzUlVGQlNYbE1MRVZCUVV0d1RDeFRRVUZWVEN4RlFVRkhMRU5CUTJ4RExFbEJRVWxyVFN4RlFVRk5WQ3hGUVVGTGVrd3NSMEZEVm5WcVFpeEZRVUZWZGs4c1MwRkJTemxKTEV0QlEyaENka3dzUlVGQlNYVk1MRWRCUVU4dlJpeEZRVUZKSzBZc1NVRkhka0lzVDBGQlQzWk1MRVZCUjFnc1QwRkVRVmNzUlVGQlMyOXBRaXdyUWtGQkswSjJaQ3hIUVVNM1FrRXNSVUZQWlhka0xFTkJRWFZDVEN4RlFVRnBRbnBNTEVsQlEzUkVhbGdzUlVGQlVYTkxMR3RDUVVGclFuVlpMRWRCUXpGQ04ybENMRVZCUVZGclJTeFJRVUZSTW1Vc1VVRkRZaXhIUVVGTFJDeEZRVVZNTEVOQlEwZ3NTVUZCU1hKaUxFVkJRVThzUjBGQlIwTXNUVUZCVFdoSkxFdEJRVXN3UkN4VlFVRlhMRWRCUTNCRGJFUXNSVUZCVVRCbUxGTkJRVk51V1N4UlFVaHFRblpJTEVWQlFWRXdaaXhUUVVGVGFHRXNSMEZMY2tJeFJpeEZRVUZWTEZOQlRXaENMRU5CUVVOM1dTeFhRVUZYTEVkQlFVZHFUaXhSUVVGUkxFZEJRVWMzU0N4VFFVRlRMRXRCUVV0elppeEhRVUZITEVOQlFVTXNVMEZCVXpkcVFpeEZRVUZSWml4RlFVRlBSQ3hIUVVOMFJTeGhRVU5CUXl4RlFVRlBSQ3hSUVVGVkxGTkJRVk5STEVkQlF6RkNMRWxCUVVrclFpeEZRVUZQZGtJc1JVRkJVU3hWUVVObWFVb3NSVUZCVVhwS0xFVkJRVkV3U2l4UFFVTm9Ra2dzUlVGQlYzaElMRVZCUVV0M1NDeFRRVU5vUWtNc1JVRkJWM3BJTEVWQlFVdDVTQ3hUUVVWd1FpeFRRVUZUT0dFc1JVRkJZME1zUlVGQlMwTXNSMEZGZUVJc1NVRkJTM3BwUWl4RlFVRkxNa29zVVVGQlVUWlpMRWRCUVUwc1QwRkJUMFVzUlVGQlpUVnFRaXhMUVVSb1EyRXNTMEZET0VNMmFVSXNSVUZCUzBNc1IwRkRha1VzU1VGQlNYQnFRaXhGUVVOQmJVa3NSVUZCVTJsaUxFZEJRVlZ1WXl4TlFVaFVNMGNzUzBGSGRVSTBSU3hqUVVGbExFTkJRVU1zVFVGQlRXOWhMRTlCUVU4MlJDeEpRVU01Ukc1cVFpeEpRVUZSYjBrc1IwRkRVa01zUlVGQlRXNUdMRmRCUVZkc1JDeEZRVUZKTjBJc1IwRkpOMElzVTBGQlUydHNRaXhGUVVGbFJpeEZRVUZMUXl4SFFVTjZRaXhKUVVOSk5XaENMRVZCUkZWc1FpeExRVU5UTkVVc1kwRkRia0pzUml4UFFVRkJRU3hKUVVGTmJXcENMRVZCUTBwb1lpeEZRVUZUYVdJc1IwRkJWVE5xUWl4TFFVRkxLMElzUlVGQlZTeE5RVU5zUXpKSExFVkJRVk5wWWl4SFFVRlZNMnBDTEV0QlFVc3JRaXhGUVVGVkxFdEJRVTB5YUVJc1IwRkRNVU51YWtJc1NVRkJVVzlKTEVkQlExSkRMRVZCUVUxdVJpeFhRVUZYYkVRc1JVRkJTVGRDTEVkQlJ6ZENMRk5CUVZOdGJFSXNSVUZCWVRWVkxFVkJRVkV3VlN4SFFVVXhRaXhKUVVGTE1WVXNSVUZCVVN4RFFVTlVMRWxCUVVrMlZTeEZRVUZaTEVsQlFVbHFhMElzVFVGQlRXOVFMRVZCUVZNc1NVRkRia00yVlN4RlFVRlZia2tzVFVGQlVURk5MRVZCUTJ4Q1FTeEZRVUZUTmxVc1JVRkZZaXhKUVVGSmRtcENMRVZCUVUxdFNTeEZRVUZUYVdJc1IwRkJWVE5xUWl4TFFVNW1ZU3hMUVUwMFFqUkZMR05CUVdWM1NpeEhRVU55UkRGUExFbEJRVkZ2U1N4SFFVTlNReXhGUVVGTmJrWXNWMEZCVjJ4RUxFVkJRVWszUWl4SFFVazNRbE1zUlVGQlVYbENMRlZCUVZWdGFrSXNWMEZCWVRWclFpeEZRVUZSZVVJc1ZVRkJWVzlxUWl4UlFVRlZMRk5CUVZWTUxFVkJRMEYwUnl4SFFVTnFSU3hIUVVGMVFpeHRRa0ZCV25OSExFVkJRWGRDTEVOQlF5OUNMRWxCUVVsTkxFVkJRVlZNTEU5QlFVRkJMRWxCUTFaMlJ5eEhRVUY1UWpGWExFOUJRVTh3Vnl4SFFVRlRhVVVzVTBGRGVrTXlReXhGUVVGVlVpeEhRVVZrTldsQ0xFdEJRVXRyUlN4TlFVTkVhMllzUlVGRFFVb3NUMEZCUVVFc1JVRkZRV2hxUWl4TFFVTkJPR2xDTEVkQlIxSXNUMEZCVHpscFFpeFJRVWxVTEVOQlFVTnhSQ3hUUVVGVExFdEJRVXRuWjBJc1IwRkJSeXhEUVVGRExGTkJRVk4yYTBJc1JVRkJVV1lzUlVGQlQwUXNSMEZETjBNc1lVRkRRVU1zUlVGQlQwUXNVVUZCVlN4WFFVTnFRaXhKUVVGSmQyeENMRVZCUVRCQ0xGZEJRekZDTEU5QlFVOHNTVUZCU1RsakxFVkJRVlVzZDBWQlJYSkNLMk1zUlVGQmFVSXNWMEZEYWtJc1QwRkJUeXhKUVVGSmFteENMRVZCUVZGcmJFSXNhMEpCUVd0Q2VHcENMRXRCUVVzclJTeFpRVVV4UXpaRExFVkJRV1VzVTBGQlV6SlFMRWRCUTNoQ0xFOUJRVTlxV2l4RlFVRlJlVlFzVDBGQlR5eEpRVUZKZGt3c1JVRkJWU3RSTEV0QlJYaERMRk5CUVZNMFJ5eExRVU5VTEVsQlIwbDJVaXhGUVVoQk5sY3NSVUZCYjBJc1IwRkRjRUp3YWtJc1JVRkJUM1pDTEVWQlFWRXNWVUZKWmpoT0xFVkJSRUYyVFN4RlFVRkxhVU1zVDBGRFR5eFhRVU5TTEVsQlFVazFReXhGUVVGTk5rTXNVVUZCVVhOTkxFOUJSV3hDTEZsQlFVRXNTVUZFU1c1UUxFbEJRVzFDUVN4RlFVRk5MRTFCUTNSQ1FTeEhRVWRETEZkQlExSXNUMEZCVHl4TlFVZG1WeXhGUVVGTGIxUXNhMEpCUVd0Q2JsWXNSVUZCVXl4aFFVRmpjMDhzUjBGRk9VTXNTVUZCU1Vjc1JVRkJUV3BQTEVWQlFWRXNVMEZEWkhkQ0xFVkJRVkY0UWl4RlFVRlJMRmRCUTJoQ2FVb3NSVUZCVVN4SlFVRkpla2dzUlVGRGFFSjVUU3hGUVVGSmNVUXNaVUZCWlRsU0xFVkJRVk1zVTBGQlZTeERRVUZESzBjc1RVRkJUekJETEVsQlF6bERMRWxCUVVreVlpeEZRVUZUTld0Q0xFVkJRVkVzV1VGRGFrSXdTQ3hGUVVGWmJFa3NSVUZCVVd0SkxGVkJRVmxyWkN4RlFVRlBiR1FzVlVGRE0wTnNTU3hGUVVGUksySXNWMEZCWVhGS0xFVkJRVTl5U2l4WFFVTTFRaXhKUVVGSlNDeEZRVUZ2UWpWaUxFVkJRVkUwWWl4clFrRkJiMEozU2l4RlFVRlBlRW9zYTBKQlF6TkVOV0lzUlVGQlVUWmlMR0ZCUVdWMVNpeEZRVUZQZGtvc1lVRkRPVUkzWWl4RlFVRlJkV01zYVVKQlFXMUNOa2tzUlVGQlR6ZEpMR2xDUVVOc1EzWmpMRVZCUVZFMll5eGxRVUZwUW5WSkxFVkJRVTgzU1N4cFFrRkRhRU4yWXl4RlFVRlJPR0lzWlVGQmFVSnpTaXhGUVVGUGRFb3NaVUZEYUVNc1NVRkJTVGRYTEVWQlFWY3NZVUZEV0c5blFpeEZRVUZSTEVkQlExSnlXaXhGUVVGakxFZEJRMlE1Unl4RlFVRnpRakZGTEVWQlFWRXNZMEZCVWtFc1EwRkJkVUpTTEVWQlFWTnBSaXhIUVVOMFJHOUZMRVZCUTBFM1NTeEZRVUZSTEd0Q1FVRlNRU3hEUVVFeVFsSXNSVUZCVTJsR0xFVkJRMVJETEVWQlFYRkNiMFVzUlVGQlkzVlhMRWRCUXpsRU4xTXNSVUZCVlhoTkxFVkJRVkVzV1VGQlVrRXNRMEZCY1VKU0xFZEJSUzlDYzJ4Q0xFVkJRV2RDZEZrc1JVRkJVWFpHTEU5QlEzaENkRU1zUlVGQlVUTkZMRVZCUVZFc2EwSkJRVkpCTEVOQlFUSkNVaXhGUVVGVFowNHNSMEZGTlVOeFVpeEhRVVJuUW14YUxFVkJRVTByU0N4alFVVjBRakZOTEVWQlFWRXNXVUZCVWtFc1EwRkJjVUpTTEVWQlFWTnJSaXhGUVVGeFFqaEhMRWxCUTI1RWIxTXNSVUZCWXpWa0xFVkJRVkVzYVVKQlFWSkJMRU5CUVRCQ2Qwd3NSMEZEZUVOMVdpeEZRVUZ4UWk5clFpeEZRVUZSTEdOQlF6ZENaMG9zUlVGQlYzcElMRVZCUVV0NVNDeFRRVU5vUWtRc1JVRkJWM2hJTEVWQlFVdDNTQ3hUUVZkd1FpeFRRVUZUZGtvc1JVRkJVWGRVTEVkQlExUkJMRWxCUVdGMlR5eEhRVmh5UWl4VFFVRmxiRVlzUlVGQlRYbFVMRWRCUTJwQ0xFZEJRVmtzVFVGQlVucFVMRWRCUVdkQ1FTeEZRVUZMTkdJc1kwRkJaMEl6WWl4RlFVTnlReXhOUVVGTkxFbEJRVWxyU1N4RlFVRlZMSGRHUVVWNFFpeEhRVUYzUWl4dFFrRkJZbk5NTEVWQlExQXNUVUZCVFN4SlFVRkpkRXdzUlVGQlZTeG5RMEZCYTBOdVJ5eEZRVUZMYVVjc1dVRkJXWGRNTEVsQlRDOUZMRU5CV1dNNVVpeExRVUZOT0ZJc1IwRkZhRUk1VWl4TFFVRkxjVVVzVlVGQldTeEZRVU5xUW5KRkxFdEJRVXM0YWtJc01FSkJRVUZCTEVWQlEwdzVha0lzUzBGQlN5dHFRaXgzUWtGQlFVRXNSVUZEVEM5cVFpeExRVUZMWjJ0Q0xHVkJRVUZCTEVWQlEweG9hMElzUzBGQlMybHJRaXhuUWtGQlFVRXNSVUZEVEdwclFpeExRVUZMYTJ0Q0xIRkNRVUZ4UW5CVExFZEJRekZDT1ZJc1MwRkJTekpNTEd0Q1FVTk1NMHdzUzBGQlN5dFRMRmRCUVZjc2FVSkJRV3RDTDFNc1RVRnRiMEowUXl4VFFVRlRiV3RDTEVWQlFXRkRMRWRCUVVsd2EwSXNTMEZCUzB3c1VVRkJVVEpGTEdsQ1FVRnBRamhtTEVkQlEzaEVMRk5CUVZORExFVkJRVmxFTEVkQlFVbHdhMElzUzBGQlMwd3NVVUZCVVcxblFpeG5Ra0ZCWjBKelJTeEhRVUZCUVN4SFFUUkRiRVFzVTBGQlUwVXNSVUZCVldwbUxFZEJRMllzU1VGQlNXdG1MRVZCUVVrc1NVRkJTV3B0UWl4RlFVRlJhVVlzUjBGRGNFSm5hRUlzUlVGQlJWUXNjVUpCUVhWQ2VtVXNSVUZEZWtKclppeEZRVUZGVWl4dFFrRkJjVUl4WlN4RlFVTjJRbXRtTEVWQlFVVlFMRlZCUVZrelpTeEZRVU5rYTJZc1JVRkJSVTRzVjBGQllUVmxMRVZCWVc1Q0xFOUJMM0pDU2k5SExFVkJRVkY1UWl4VlFVRlZkMGNzVTBGQlZ5eFhRVU42UWl4TlFVRlBMRzlDUVVkWWFra3NSVUZCVVhsQ0xGVkJRVlU0V1N4UFFVRlRkbUVzUlVGQlVYbENMRlZCUVdsQ2VXdENMRTFCUVVrc1UwRkJWWFpxUWl4SFFVTTVSQ3hKUVVGSk9HTXNSVUZCVFd4aUxGVkJRVlY2UkN4UFFVTndRaXhIUVVGSk1tVXNSVUZCVFN4RlFVRkhMRU5CUTFRc1NVRkRWMmhtTEVWQlJGQnBaaXhGUVVGcFFpeEpRVUZKZWtRc1RVRkJUWGRFTEVWQlFVMHNSMEZEYWtNdlV5eEZRVUZKTEVWQlExSXNTVUZCUzJwTkxFVkJRVWtzUlVGQlIwRXNSVUZCU1dkbUxFVkJRVTBzU1VGQlMyaG1MRVZCUVVjc1EwRkRNVUlzU1VGQlNUaE1MRVZCUVU5b1NTeFZRVUZWT1VRc1IwRkRja0lzU1VGQlNYTkNMRVZCUVVzd1N5eFRRVUZUUml4SFFVZGtMRTlCUVU5cVJDeEZRVUZoTERCRVFVTnBRblpJTEVWQlFVdHBSeXhaUVVGWmRVVXNTVUZJZEVSdFZDeEZRVUZsYUZRc1MwRkJUMGdzUlVGVE9VSXNSMEZJUVcxVUxFVkJRV1UxWlN4UFFVRlRORXdzUlVGSFRpeHRRa0ZHYkVJdlNpeEZRVUZMTkVJc1ZVRkJWVGxFTEVsQlIxZ3NUVUZCVFN4SlFVRkplVWdzUlVGQlZTeDVSRUZEWVc1SExFVkJRVXRyUnl4VFFVRlRkRVlzU1VGRmJrUXNUMEZCVDJwQ0xFdEJRVXQ1WkN4VlFVRkJRU3hGUVVGblFtWXNSVUZCV1hOQ0xFVkJRV2RDTDJNc1JVRkJTV3BDTEU5QlJXaEZMRTlCUVU5QkxFdEJRVXQ1WkN4VlFVRkJRU3hGUVVGblFuaGpMRWxCUjJoRE0wTXNSVUZCVVhsQ0xGVkJRVlV3YTBJc1VVRkJWU3hYUVVONFFpeFBRVUZQZW10Q0xFdEJRVXRyUlN4TlFVRk5jV1lzUlVGRFpFRXNUMEZCUVVFc1JVRkJNa0oyYWtJc1ZVRkJRVUVzU1VGSGJrTXhRaXhGUVVGUmVVSXNWVUZCVlRCa0xFdEJRVThzVTBGQlZXbElMRVZCUVZsRExFZEJRek5ETEVkQlFVbHNhRUlzUlVGQlRXZExMRmxCUVdNMVN5eFZRVUZWZWtRc1QwRkJVeXhIUVVOcVFpeHRRa0ZCWm5Oc1FpeEhRVU5qTEcxQ1FVRmtReXhGUVVFd1FpeERRVU5xUXl4SlFVRkpjRTRzUlVGQlRTeHJSRUZEUm14WUxFVkJRVXRwUnl4WlFVRlpiMlVzUjBGRGNrSTNhRUlzVlVGQlZYcEVMRTlCUVZNc1NVRkRia0p0V1N4SFFVRlBMRXRCUVU5c1dDeEZRVUZMYVVjc1dVRkJXWEZsTEVsQlJXNURNMnRDTEV0QlFVdHZTU3hOUVVGTmJWQXNSMEZGWml4UFFVRlBkbGdzUzBGQlMydEZMRTFCUVUxM1owSXNSVUZCV1VNc1QwRkJRVUVzVDBGQlYzWmtMRTlCUVZkQkxFbEJSM2hFT1Vrc1JVRkJVWGxDTEZWQlFWVm5aMElzUzBGQlR5eFRRVUZWTWtVc1JVRkJXVU1zUjBGRmRrTXphMElzUzBGQlMydEZMRTFCUVUxM1owSXNSVUZCV1VNc1QwRkJRVUVzVDBGQlYzWmtMRTlCUVZkQkxFZEJRM3BEZDJRc1pVRkhXblJ0UWl4RlFVRlJlVUlzVlVGQlZUQm5RaXhQUVVGVExGTkJRVlY0Wml4SFFVTnFReXhOUVVGclFpeHRRa0ZCVUVFc1JVRkRRVEpITEVWQlFXRXNaME5CUVd0RGRrZ3NSVUZCUzJsSExGbEJRVmx5Uml4SlFVVndSV3BDTEV0QlFVdHZXaXhOUVVGTmJGWXNUVUZCVFdwRUxFOUJRVUZCTEU5QlFVbHRSeXhGUVVGelFuVmpMRTlCUVVGQkxFbEJSM1JFY214Q0xFVkJRVkY1UWl4VlFVRlZPR3RDTEU5QlFWTXNWMEZEZGtJc1NVRkJTVzVzUWl4RlFVRk5MRU5CUTA1MVZDeGhRVUZCUVN4RlFVTkJjVXNzV1VGQlFVRXNSVUZEUVhkSUxITkNRVUZCUVN4RlFVTkJReXh4UWtGQlFVRXNSMEZUU2l4UFFWQkpMMnRDTEV0QlFVdHBWQ3hsUVVOTWRsUXNSVUZCU1c5c1FpeHBRa0ZCYlVJNWEwSXNTMEZCUzNGR0xGRkJRelZDTTBZc1JVRkJTWFZVTEdGQlFVRkJMRWRCUTBkcVZDeExRVUZMYzJRc1pVRkRXalZrTEVWQlFVbHhiRUlzWjBKQlFXdENMMnRDTEV0QlFVdHZUeXhUUVVNelFqRlBMRVZCUVVrMFpDeFpRVUZCUVN4SFFVVkVOV1FzUjBGSFdIQkNMRVZCUVZGNVFpeFZRVUZWY1Zvc1NVRkJUU3hYUVVsd1FpeFBRVWhKZGxjc1ZVRkJWWHBFTEU5QlFWTXNSMEZEYmtKWkxFdEJRVXR2U1N4TlFVRk5MSGRFUVVWU0xFbEJRVWxVTEVWQlFXRXpTQ3hOUVVGTlRDeFhRVWRzUTNKQ0xFVkJRVkY1UWl4VlFVRlZiVlFzVFVGQlVTeFRRVUZWYWxNc1IwRkRhRU1zVDBGQlQycENMRXRCUVVzMldTeFBRVUZQZUZrc1JVRkJTekpyUWl4M1FrRkJlVUl2YWtJc1NVRkhja1F6UXl4RlFVRlJNbTFDTEd0Q1FVRnZRbXh1UWl4RlFVRlBSQ3hSUVVWdVExRXNSVUZCVVRSdFFpeEhRVUZMTEZOQlFWVnlReXhIUVVOdVFpeFBRVUZQUVN4aFFVRmxkbXRDTEVkQlJ6RkNRU3hGUVVGUk5tMUNMRk5CUVZjM2JVSXNSVUZCVVRodFFpeGhRVUZsTEZOQlFWTnVhMElzUjBGREwwTXNTVUZCU1haQ0xFVkJRVTBzU1VGQlNYQkNMRVZCUVZGcFJpeEhRVU4wUWpkRUxFVkJRVWt3VUN4eFFrRkRTaXhKUVVGSmJWUXNSVUZCV1RGbUxGVkJRVlY2UkN4UFFVRlRMRXRCUVUwd1J5eFBRVUZQYWtRc1ZVRkJWU3hKUVVGSk1HWXNWVUZGTVVSNFN5eEZRVUZUYkZFc1JVRkJVelZITEVWQlFWUTBSeXhEUVVGaFoyTXNSVUZCYlVKdWEwSXNSVUZCU3pacFFpeEpRVXRzUkN4UFFVcEplRXNzU1VGQlYycFJMRWRCUTFod1NTeEZRVUZKYjJkQ0xHZENRVUZuUWk5SUxFVkJRVTlzWVN4SFFVRkJRU3hIUVVVeFFqWkNMRVZCUVVreWJFSXNhVUpCUVdsQ00yeENMRVZCUVVrMGJFSXNjMEpCUTNaQ05XeENMRWRCUjFod1FpeEZRVUZST0dFc1NVRkJUU3hUUVVGVk0xb3NSMEZEY0VJc1QwRkJUeXhKUVVGSmEwa3NSVUZCWVd4SkxFZEJRVlZGTEZkQlIzUkRja0lzUlVGQlVXbHVRaXhMUVVGUExGTkJRVlZ5WjBJc1IwRkRja0lzU1VGQlNYaEdMRVZCUVUwNFJDeEZRVUZ2UWpCQ0xFZEJUemxDTEU5QlRrMTRSaXhoUVVGbGNFSXNTMEZEYWtKdlFpeEZRVUZOTEVsQlFVbHdRaXhGUVVGUmFVWXNTVUZEWkRaTUxIRkNRVU5LTVZBc1JVRkJTVGhzUWl4blFrRkRTamxzUWl4RlFVRkpjV3RDTEcxQ1FVRnhRamRsTEVkQlJYUkNlRVlzUjBGSFdIQkNMRVZCUVZGblNDeFJRVUZWYUVnc1JVRkJVVzF1UWl4VlFVRlpibTVDTEVWQlFWRnBia0lzUzBGRk9VTnFia0lzUlVGQlVYbFVMRTlCUVZONlZDeEZRVUZSYjI1Q0xGTkJRVmNzVTBGQlZYUllMRWRCUXpGRExFbEJRVWt4VHl4RlFVRk5MRWxCUVVsd1FpeEZRVUZSYVVZc1IwRkhkRUlzVDBGR1FUZEVMRVZCUVVrd1VDeHhRa0ZEU2pGUUxFVkJRVWx2WjBJc1owSkJRV2RDTVZJc1IwRkJRVUVzUjBGRFlqRlBMRWRCUjFod1FpeEZRVUZSZDBRc1lVRkJaU3hUUVVGVFlpeEhRVU0xUWl4SFFVRnJRaXh0UWtGQlVFRXNSVUZEVUN4TlFVRk5MRWxCUVVsMVJpeEZRVUZWTEdkRFFVRnJRMjVITEVWQlFVdHBSeXhaUVVGWmNrWXNTVUZGTTBVc1QwRkJUemhITEVWQlFVMXFSeXhoUVVGaFlpeEpRVWM1UWpORExFVkJRVkY1UWl4VlFVRlZiVVVzVFVGQlVTeFRRVU4wUW5kblFpeEZRVU5CUXl4RlFVTkJMMmRDTEVWQlFVMHhReXhGUVVOT2VXdENMRWRCUlVFc1NVRkJTVU1zVDBGQlFVRXNTVUZCYlVKRUxFVkJRMjVDYUcxQ0xFVkJRVlZwYlVJc1JVRkJiVUpFTEVWQlFXVXNTVUZCU1hKdVFpeEZRVUZSYVVZc1IwRkRlRVJuUWl4RlFVRlRka1VzUzBGQlN5dEZMRlZCUTJScllpeEZRVUZYTVdJc1JVRkJUMFlzVlVGRmFrSjFhRUlzU1VGRFJHcHRRaXhGUVVGUkswVXNaVUZCWlRGRkxFdEJRVTBzUjBGRE4wSk1MRVZCUVZGNVVDd3dRa0ZCUVVFc1NVRkRTbXhQTEVkQlEyZERMRWxCUVdJc1VVRkJha0pzUWl4TFFVRkxjVVVzWVVGRlNHNUVMRVZCUkRSQ0xFbEJRV1FzVTBGQldDdGxMRWRCUTFGcVowSXNTMEZCU3pSRkxHTkJSVXhNTEVsQlFWZDJSU3hWUVVGQlFTeEZRVUZ0UWtFc1MwRkJTMjFHTEZWQlIzUkVia1lzUzBGQlN5dFRMRmRCUVZjc2FVSkJRV3RDTDFNc1MwRkJUVXdzU1VGSE5VTXNTVUZCU1d0UUxFVkJRVk5xUXl4SlFVTmlMRWRCUVdkRExFbEJRV1FzVTBGQldIRlVMRWRCUVRaQ0xFTkJRMmhETEVsQlFVbHFUaXhGUVVGVE0wNHNSVUZCVDNkblFpeEZRVUZWZEdoQ0xFVkJRVTkxYUVJc2EwSkJRMDRzU1VGQlpDeFRRVUZZTjBZc1NVRkRSalZoTEVWQlFWRmtMRVZCUVU5M1ppeHRRa0ZEWmk5UkxFVkJRVlV3VWl4SFFVTjNRaXhKUVVGa0xGTkJRVmg2UlN4SlFVTlVOV0VzUlVGQlVXUXNSVUZCVDNWbUxIRkNRVU5tT1ZFc1JVRkJWVEpTTEVWQlExWndaMElzUlVGQlQydExMQ3RDUVVWUWIxZ3NSVUZCVlhSb1FpeEZRVUZQZDJoQ0xIVkRRVU5xUWpGblFpeEZRVUZSTEVsQlFVazJWU3hGUVVGclFpdzRRa0ZET1VJelZpeEZRVUZQTUVZc2EwSkJRV3RDTlVVc1IwRkRla0l5VGl4RlFVRlZNbElzUjBGSFpEVmpMRVZCUVUwdlJTeFBRVUZQTm1sQ0xFVkJRVk4wYUVJc1JVRkJVU3hEUVVNeFFubFBMRkZCUVc5Q0xFOUJRVmh1UlN4RlFVRnJRbTFGTEVWQlEwUXNiVUpCUVZwQkxFZEJRMDR6VXl4RlFVRkxlVThzVjBGQlYwUXNSVUZCVVcxRkxFZEJRMmhEY2xRc1VVRkJVMEVzUlVGRFZIVkNMRk5CUVZWQkxFVkJRMVp0UlN4TlFVRlBRU3hUUVVkWVpDeEZRVUZQZVdoQ0xHTkJRV04wUWl4RlFVRlpReXhGUVVGWGFHeENMRVZCUVZOMVFpeEZRVUZWTWs0c1IwRkhia1VzVDBGQlQyeFFMRWRCUjFoeVFpeEZRVUZSZVVJc1ZVRkJWWFZLTEZGQlFWVXNWMEZEZUVJc1QwRkJkMElzVFVGQmFrSjBTaXhMUVVGTGNVVXNWMEZIYUVJdlJpeEZRVUZSZVVJc1ZVRkJWWE5zUWl4alFVRm5RaXhYUVVNNVFpeFBRVUYzUXl4SlFVRm1MRlZCUVdwQ2NteENMRXRCUVV0eFJTeFpRVWRxUWk5R0xFVkJRVkY1UWl4VlFVRlZlVWtzWVVGQlpTeFhRVU0zUWl4UFFVRjFReXhYUVVGa0xGTkJRV3BDZUVrc1MwRkJTM0ZGTEZsQlIycENMMFlzUlVGQlVYbENMRlZCUVZWcmJVSXNWMEZCWVN4VFFVRlZiRWtzUjBGRGNrTXZaQ3hMUVVGTGNVVXNWMEZCSzBJc1RVRkJiRUp5UlN4TFFVRkxjVVVzVlVGRFdpeE5RVUZPTUZvc1IwRkhWSHBtTEVWQlFWRjVRaXhWUVVGVmVXeENMR05CUVdkQ0xGZEJRemxDZUd4Q0xFdEJRVXR4UlN4VlFVRTJRaXhUUVVGcVFuSkZMRXRCUVV0eFJTeFZRVU4wUW5KRkxFdEJRVXNyVXl4WFFVRlhMRzFDUVVGdlFpOVRMRTlCUjNoRE1VSXNSVUZCVVhsQ0xGVkJRVlZ0YlVJc1lVRkJaU3hYUVVNM1FteHRRaXhMUVVGTGNVVXNWVUZCTmtJc1UwRkJha0p5UlN4TFFVRkxjVVVzVlVGRGRFSnlSU3hMUVVGTEsxTXNWMEZCVnl4clFrRkJiVUl2VXl4UFFVZDJRekZDTEVWQlFWRjVRaXhWUVVGVmIyMUNMR05CUVdkQ0xGZEJRemxDYm0xQ0xFdEJRVXR4UlN4VlFVRTJRaXhUUVVGcVFuSkZMRXRCUVV0eFJTeFZRVU4wUW5KRkxFdEJRVXNyVXl4WFFVRlhMR3RDUVVGdFFpOVRMRTlCUjNaRE1VSXNSVUZCVVhsQ0xGVkJRVlUyYTBJc1dVRkJZeXhYUVVNMVFqVnJRaXhMUVVGTGNVVXNWVUZCTmtJc1VVRkJha0p5UlN4TFFVRkxjVVVzVjBGSE1VSXZSaXhGUVVGUmVVSXNWVUZCVlhGdFFpeFRRVUZYTEZkQlEzcENMRTlCUVhsQ0xGRkJRV3BDY0cxQ0xFdEJRVXR4UlN4WFFVRjFRaXhIUVVkNFF5OUdMRVZCUVZGNVFpeFZRVUZWYzIxQ0xHZENRVUZyUWl4WFFVTm9RM0p0UWl4TFFVRkxjVVVzVjBGQk5rSXNUVUZCYWtKeVJTeExRVUZMY1VVc1YwRkhNVUl2Uml4RlFVRlJlVUlzVlVGQlZYRktMR05CUVdkQ0xGZEJRemxDY0Vvc1MwRkJTM0ZGTEZWQlFUWkNMRTFCUVdwQ2NrVXNTMEZCUzNGRkxGVkJRM1JDY2tVc1MwRkJTeXRUTEZkQlFWY3NiVUpCUVc5Q0wxTXNUMEZIZUVNeFFpeEZRVUZSZVVJc1ZVRkJWVGhKTEc5Q1FVRnpRaXhYUVVOd1F6ZEpMRXRCUVV0eFJTeFZRVUUyUWl4UlFVRnFRbkpGTEV0QlFVdHhSU3hYUVVjeFFpOUdMRVZCUVZGNVFpeFZRVUZWZFd4Q0xHOUNRVUZ6UWl4WFFVTm9RM1prTEVWQlFVMHZSaXgxUWtGRFZtaERMRXRCUVV0eFJTeFZRVUUyUWl4VlFVRnFRbkpGTEV0QlFVdHhSU3haUVVjeFFpOUdMRVZCUVZGNVFpeFZRVUZWZFcxQ0xGbEJRV01zVTBGQlZYaG1MRWRCUTNSRExFbEJRVWx3U0N4RlFVRm5RaXhKUVVGV2IwZ3NSVUZCWXpsSExFdEJRVXRwYTBJc1YwRkJZV3ByUWl4TFFVTXhRaXhGUVVGU09FY3NSVUZCV1N4RlFVRkpMRWRCUTNoQ0xFZEJRVWx3U0N4SlFVRlJLMnBDTEVWQlJVd3NXVUZCUVN4SlFVRkpMMnBDTEVkQlFYRkNUU3hMUVVGTGIwWXNWMEZETVVKd1JpeExRVUZMTkVVc1kwRkZWR3hHTEVkQlIxaHdRaXhGUVVGUmVVSXNWVUZCVlhkdFFpeFhRVUZoTEZOQlFWVjZaaXhIUVVOeVF5eFBRVUZQT1Vjc1MwRkRVeXhGUVVGU09FY3NSVUZCV1N4RlFVRkpMRWxCUnpWQ2VFa3NSVUZCVVhsQ0xGVkJRVlY1YlVJc2MwSkJRWGRDTEZOQlFWVXhaaXhIUVVOb1JDeFBRVUZQT1Vjc1MwRkRVeXhGUVVGU09FY3NSVUZCV1N4RlFVRkpMRWxCUnpWQ2VFa3NSVUZCVVhsQ0xGVkJRVlV3YlVJc2IwSkJRWE5DTEZOQlFWVXpaaXhIUVVNNVF5eFBRVUZQT1Vjc1MwRkRVeXhGUVVGU09FY3NSVUZCV1N4RlFVRkpMRWxCUnpWQ2VFa3NSVUZCVVhsQ0xGVkJRVlUyUlN4WlFVRmpMR0ZCUldoRGRFY3NSVUZCVVhsQ0xGVkJRVlV5YlVJc2EwSkJRVzlDTEZOQlFWVkRMRWRCUXpkQ1FTeEZRVUZUZEdsQ0xGVkJRWGhDTEVsQlEwbDFhVUlzUlVGQlZVUXNSVUZCVXpkRExIRkNRVU51UWk5U0xFVkJRVk0wVlN4RlFVRlROVU1zYlVKQlEyeENjR3RDTEVWQlFWVm5ia0lzUlVGQlV6TkRMRlZCUTI1Q09XbENMRVZCUVZkNWJFSXNSVUZCVTB3c1dVRkJXU3hSUVVGQkxFbEJRMmhEY0d4Q0xFbEJRWGRDUVN4RlFVRlhkV2xDTEVkQlEzWkRlbXBDTEV0QlFVdG5iVUlzWTBGQlkxa3NSVUZCVXpkVkxFVkJRVkZ3VXl4RlFVRlRkVUlzUlVGQlZTeFBRVWN6UkRWRExFVkJRVkY1UWl4VlFVRlZPRzFDTEcxQ1FVRnhRaXhUUVVGVlJpeEZRVUZWTjJZc1IwRkRka1FzU1VGQlNUaG1MRVZCUVZWRUxFVkJRVk5JTEhOQ1FVRnpRakZtTEVkQlEzcERhVXdzUlVGQlV6UlZMRVZCUVZOR0xHOUNRVUZ2UWpObUxFZEJRM1JEYmtnc1JVRkJWV2R1UWl4RlFVRlRTaXhYUVVGWGVtWXNSMEZET1VJMVJpeEZRVUZYZVd4Q0xFVkJRVk5NTEZsQlFWbDRaaXhSUVVGQlFTeEpRVU5vUXpWR0xFbEJRWGRDUVN4RlFVRlhkV2xDTEVkQlEzWkRlbXBDTEV0QlFVdG5iVUlzWTBGQlkxa3NSVUZCVXpkVkxFVkJRVkZ3VXl4RlFVRlRkVUlzUlVGQlZTeFBRVWN6UkRWRExFVkJRVkY1UWl4VlFVRlZhVzFDTEdOQlFXZENMRk5CUXpsQ1dTeEZRVU5CTjFVc1JVRkRRWEJUTEVWQlEwRjFRaXhGUVVOQk1rNHNSMEZGUVN4SlFVRkpMMGdzUlVGQlVUbEhMRXRCUVV0elNpeFZRVTlxUWl4SFFVeEplRU1zUjBGQlV5eFJRVU5VUVN4RlFVRlJMRVZCUTFJNVJ5eExRVUZMYVcxQ0xGZEJRVmNzU1VGSFRpeEpRVUZXYm1Zc1JVRkRRVGxITEV0QlFVdG5hMElzVlVGQldYSnJRaXhGUVVOcVFrc3NTMEZCUzJsclFpeFhRVUZoTDJsQ0xFVkJRMHNzYlVKQlFWb3diRUlzU1VGRFVEVnRRaXhMUVVGTE9HcENMSEZDUVVOVkxFOUJRVmhxVml4RlFVRnJRaXRZTEVWQlFWVjJiVUlzUlVGQlMzbFBMRmRCUVZkRUxFVkJRVkVyV0N4SlFVVjBReXh0UWtGQldEZFZMRWxCUTFBdlVpeExRVUZMSzJwQ0xHMUNRVU5WTEU5QlFWaHNWaXhGUVVGclFtdEVMRVZCUVZNeFVpeEZRVUZMZVU4c1YwRkJWMFFzUlVGQlVXdEVMRkZCUlhoRUxFTkJRMGdzU1VGQlNTdFZMRVZCUVdVc1JVRkJVbWhuUWl4RlFVRlpMRVZCUTNaQ09VY3NTMEZCU3podFFpeEZRVUZQTEVkQlFVdHVia0lzUlVGRGFrSkxMRXRCUVVzNGJVSXNSVUZCVHl4SFFVRkxOV3hDTEVWQlEwMHNiVUpCUVZvd2JFSXNTVUZEVURWdFFpeExRVUZMT0cxQ0xFVkJRVThzUjBGRFJ5eFBRVUZZYWxrc1JVRkJhMElyV0N4RlFVRlZkbTFDTEVWQlFVdDVUeXhYUVVGWFJDeEZRVUZSSzFnc1NVRkZkRU1zYlVKQlFWZzNWU3hKUVVOUUwxSXNTMEZCU3podFFpeEZRVUZQTEVkQlEwY3NUMEZCV0dwWkxFVkJRV3RDYTBRc1JVRkJVekZTTEVWQlFVdDVUeXhYUVVGWFJDeEZRVUZSYTBRc1NVRkpMMFFzVDBGRVFTOVNMRXRCUVV0cGJVSXNWMEZCVjI1bUxFVkJRVkVzUjBGRGFrSkJMRWRCUjFoNFNTeEZRVUZSZVVJc1ZVRkJWVzFuUWl4UFFVRlRMRk5CUVZVMlJ5eEZRVUZYTld4Q0xFZEJRelZEYmtJc1MwRkJTMmR0UWl4dFFrRkJRVUVzVDBGQll6VmxMRVZCUVhOQ2FrY3NSVUZCU3pSc1FpeEZRVUZYTEU5QlJ6ZEVlbTlDTEVWQlFWRjVRaXhWUVVGVmRVVXNhVUpCUVcxQ0xGTkJRVk5sTEVWQlFVOHlhRUlzUjBGRGFrUXNSMEZCYzBNc1NVRkJaaXhWUVVGcVFtaHVRaXhMUVVGTGNVVXNWMEZCV0N4RFFVTkJMRWRCUVVsblFpeEpRVUZWY2tZc1MwRkRWaXhQUVVGUFFTeExRVUZMT0dZc1owSkJRV2RDZDBRc1MwRkJRVUVzUjBGRGFFTXNTVUZCU1hobExFVkJRV1YwUWl4RlFVRnZRalpDTEVWQlFVOXlSaXhOUVVNNVF5eExRVUZOT0VVc1lVRkJkMEo0Unl4SFFVRlZMRTlCUVU4d1FpeExRVUZMY1dZc1UwRkJVMmhoTEVkQlJYcEVNbWhDTEVkQlFWbG9ia0lzUzBGQlN6QkZMR1ZCUVdWSkxFVkJRV01zUjBGRmJFUXNTVUZCU1c1R0xFVkJRVlZ0Uml4RlFVRmhReXhWUVVVelFpeEhRVUZKY0VZc1NVRkJXVXNzUzBGQmFFSXNRMEZMUVN4SlFVRkphV2RDTEVWQlFWZDBaMElzUlVGQlVUQkZMRlZCUTNaQ0xFZEJRU3RDTEVsQlFXUXNVMEZCV0RSaUxFZEJRVFpDTEVOQlF5OUNMRWxCUVVsc1F5eEZRVUZOTDJRc1MwRkJTM05LTEZWQlExaDVWU3hGUVVGTkxFZEJRVWR3WlN4RlFVRlJLMjFDTEd0Q1FVRnJRakZ0UWl4TlFVTjJReXhKUVVGTExFbEJRVWxxUWl4RlFVRkpMRVZCUVVkQkxFVkJRVWxuWml4SlFVRlBhR1lzUlVGRGRrSlpMRVZCUVZGcmJrSXNiVUpCUVcxQ04yMUNMRXRCUVUxcVFpeEhRVVZ5UTJsQ0xFdEJRVXR0YlVJc1owSkJRMHh1YlVJc1MwRkJTMmx0UWl4WFFVRlhMRWRCUTJoQ2FtMUNMRXRCUVV0cGJrSXNZVUZCWVhSdVFpeFJRVU5tTEVkQlFTdENMRWxCUVdRc1UwRkJXSE5uUWl4SFFVTlVhbWRDTEV0QlFVdHhaaXhUUVVGVE1XWXNSVUZCVVc5YUxHVkJRMjVDTEVkQlFTdENMRWxCUVdRc1UwRkJXR3RJTEVkQlExUnFaMElzUzBGQlN6WkVMRkZCUVZGc1JTeEZRVUZSYVZvc1pVRkRiRUlzUTBGRFNDeEpRVUZKZUVzc1JVRkJVeXhKUVVGSk9Fd3NSVUZCYTBJc09FSkJRMjVEZG1Fc1JVRkJVWE5MTEd0Q1FVRnJRbTFGTEVkQlF6RkNjRThzUzBGQlN6WkVMRkZCUVZGMVN5eFRRWEpDWW5CUExFdEJRVXMyUkN4UlFVRlJlV1lzVDBGNVFuSkNhR3hDTEVWQlFWRjVRaXhWUVVGVksyWXNaMEpCUTJ4Q0xGTkJRVk14VWl4RlFVRlJPRmtzUlVGQllVTXNSMEZETVVJc1NVRkJTWEJpTEVWQlFWRXhUQ3hGUVVGTEsyMUNMR3RDUVVGclFtaGFMRWRCUXk5Q2FWb3NSVUZCVjNSaUxFbEJRVlZ4UXl4RlFVTjZRaXhKUVVGTGFWb3NTVUZCWVVZc1IwRkJNRUl4YWtJc1JVRkJUV2RMTEZkQlFWa3NRMEZETVVRc1NVRkJTWEJJTEVWQlFWVXNORU5CUTFab1J5eEZRVUZMYVVjc1dVRkJXVGhJTEVkQlEzSkNjRThzUzBGQlMyOUpMRTFCUVUwdlFpeEhRVUZCUVN4SFFVVm1ja2NzUzBGQlMybExMR3RDUVVGclFqaENMRWxCUVU5dFlpeEhRVUZqUnl4SFFVTTFRM0p1UWl4TFFVRkxOa1FzVVVGQlVYVkxMRWxCUjJwQ09WQXNSVUZCVVhsQ0xGVkJRVlZ0YTBJc2NVSkJRWFZDTEZOQlFWVndVeXhIUVVNdlF5eEhRVUZKUVN4SlFVRmhkazhzUlVGQmFrSXNRMEZEUVN4SlFVRkpOVVFzUlVGQlZVc3NTMEZEWkVFc1MwRkJTMjlRTEhGQ1FVTk1jRkFzUzBGQlN6Uk1MR1ZCUTB3c1NVRkJTWE5pTEVkQlFVRkJMRVZCUTBGNmIwSXNSVUZCU1hWQ0xFdEJRVXMyVXl4VFFVRlRaaXhGUVVGVkxGTkJRVk42VFN4SFFVTnlRekZHTEVWQlFWRXlSU3hwUWtGQmFVSmxMRWxCUXpGQ0xGTkJRVlVyU1N4SFFVTlVlazhzUlVGQlVXMW5RaXhuUWtGQlowSXhVaXhGUVVGUk9Ga3NTMEZGY0VOQkxFZEJRVUZCTEVWQlEwRnNia0lzUzBGQlN6Wk1MRzFDUVVGQlFTeEpRVVZFY0U0c1IwRkRRV3RDTEVWQlFWRnRaMElzWjBKQlFXZENjbWhDTEVkQlFVRkJMRXRCU1doRFNDeEZRVUZSZVVJc1ZVRkJWWFZ1UWl3d1FrRkJORUlzVTBGRE1VTjBWU3hGUVVGVE9WSXNSVUZCVlcxRkxFVkJRVTh4Uml4SFFVVXhRaXhKUVVGSmMyZENMRVZCUVZkMFowSXNSVUZCVVRCRkxGVkJRM1pDTEVkQlFUUkNMRWxCUVZnc1RVRkJXRFJpTEVkQlFVNHNRMEZGUVN4SlFVRkpjMGdzUlVGRVNqVnVRaXhGUVVGUmFVMHNaVUZGU2pGTExFbEJRV0Y1YVVJc1JVRkRVblJsTEVkQlFXbERMR2xDUVVGcVFrRXNSVUZCVFdwSExFOUJTM1pDYlc5Q0xFVkJRVWt4Wml4RlFVRlRiVXdzUjBGQlUzSk5MRTFCUVUwelJ5eExRVUZMTkVVc1kwRkJaVk1zU1VGS2FFUnJhVUlzUlVGQlNYcG1MRWRCUTBacVN5eEZRVUZKTEVsQlFVa3lTU3hGUVVGVkxHbERRVU5KYmtjc1JVRkJTMmxITEZsQlFWbHFRaXhKUVVzM1EydHBRaXhGUVVGSk1XWXNSVUZCVTIxTUxFZEJRVk0zVkN4TFFVRkxLMElzUlVGQlZXMUZMRWRCUlhwRExFbEJRVWt5VEN4RlFVRnBRbkpTTEVWQlFWRnJUU3hqUVVWRUxFbEJRVmdzVDBGRWFrSnZWU3hGUVVGWGRHZENMRVZCUVZFd1JTeGpRVWRtYTJwQ0xFbEJRVTFxWkN4RlFVTk9NMHNzUlVGQlVXdEZMRkZCUVZGM1FpeEhRVU5VYTJsQ0xFbEJRVTE2Wml4RlFVTmlia2tzUlVGQlVXMW5RaXhuUWtGQlowSjVTQ3hGUVVGRk1YQkNMRWRCUVVGQkxFbEJSVEZDTkVZc1JVRkJUWFZVTEhOQ1FVRnpRblZSTEVWQlFVZDJWeXhGUVVGblFpeEhRVUZMY2xJc1JVRkJVMHNzVFVGRE4wUk1MRVZCUVZFeVJTeHBRa0ZCYVVKcGFrSXNUMEZKYWtOcWNFSXNSVUZCVVhsQ0xGVkJRVlZuUml4UlFVRlZMRmRCUlhoQ0xFbEJSRUVzU1VGQlNYSkdMRVZCUVUxTkxFdEJRMGhPTEVWQlFVazRTU3huUWtGQlowSTVTU3hGUVVGTlFTeEZRVUZKSzBrc1dVRkRja01zVDBGQlR5OUpMRWRCUjFod1FpeEZRVUZSZVVJc1ZVRkJWVEJKTEZWQlFWa3NWMEZETVVJc1QwRkJUM3BKTEV0QlFVc3Jha0lzYjBKQlIyaENlbXhDTEVWQlFWRjVRaXhWUVVGVmEyNUNMR0ZCUVdVc1UwRkJVM1J1UWl4SFFVTjBRMHNzUzBGQlN5dHFRaXh0UWtGQmNVSndhMElzUjBGSE9VSnlRaXhGUVVGUmVVSXNWVUZCVlhsdVFpeGxRVUZwUWl4VFFVRlROMjVDTEVWQlFWTnhWQ3hGUVVGVE9WSXNSVUZCVlcxRkxFZEJRM0JGTEVsQlFVbHZhVUlzUlVGQldUbHVRaXhoUVVGdFFuSkNMRVZCUXk5Q01taENMRVZCUVZkcVowSXNTMEZCUzNGRkxGVkJRMmhDY1dwQ0xFVkJRVGhETEVsQlFXWXNWVUZCV0hwSUxFZEJRMGtzU1VGQldDeE5RVUZZUVN4SlFVTkZkMGdzUjBGQlZ6bHVRaXhGUVVGUmVVc3NNRUpCUlc1Q2JFb3NZVUZCYjBKNVlpeEhRVU53UW5waUxFVkJRVk50WXl4dlFrRkRWRzVqTEVWQlFWTTBZaXhqUVVGblFtNWtMRVZCUTNKQ2Ewa3NSVUZCVTIxTUxFZEJRVk0zVkN4TFFVRkxLMElzUlVGQlZXMUZMRXRCUVZkNVF5eEhRVU0xUTI1SkxFVkJRVkZyUlN4UlFVRlJhVVVzUlVGQlUycExMRWxCUlhSQ2JWWXNTVUZCV1hWUkxFVkJRMjVDTldwQ0xFVkJRVkV3Wml4VFFVRlRhMFVzUlVGQlpYQnJRaXhMUVVGTEswSXNTVUZET1VKQkxHRkJRVzlDYVdRc1JVRkRNMEpxWkN4RlFVRlRiMlVzYTBKQlFXdENNMllzUjBGRGNFSTRia0lzUjBGQllUbHVRaXhoUVVGdFFtZEpMRVZCUTNaRGFFa3NSVUZCVVhkS0xGVkJSVkpxU1N4RlFVRlRaMGdzVlVGRllTeHRRa0ZCV2poTExFVkJRMVI1VlN4SFFVZEhReXhIUVVGcFFpOXVRaXhGUVVGUk1teENMSE5DUVVNM1FuUnNRaXhMUVVGTGMyNUNMREJDUVVFd1FuUlZMRVZCUVZNNVVpeEZRVUZWYlVVc1JVRkJUekZHTEVsQlNIcEVjVlFzUlVGQlVUZFVMRXRCUVVzclFpeEZRVUZWYlVVc1JVRkJUekZHTEVkQlN6TkNkVUlzWVVGQmIwSnBaQ3hGUVVOMFFtcGtMRVZCUVZOcFpTeG5Ra0ZEY1VJc1NVRkJaQ3hUUVVGWVl5eEhRVU5HTDJVc1JVRkJVM2RsTEd0Q1FVRnJRbkpoTEVWQlFVOHhSaXhIUVVWc1EzVkNMRVZCUVZNd1pTeHBRa0ZCYVVKMllTeEZRVUZQTVVZc1NVRkhiRU00YmtJc1NVRkRTRU1zUjBGQmFVSXZia0lzUlVGQlVUSnNRaXh6UWtGRFJTeEpRVUZrTEZOQlFWaHlSaXhIUVVOR2RHZENMRVZCUVZFd1ppeFRRVUZUYUdFc1IwRkZha0l4Uml4RlFVRlJhMFVzVVVGQlVYZENMRXRCU3pWQ0wwY3NSVUZCVVhsQ0xGVkJRVlZuYlVJc2RVTkJRWGxETEZOQlFWTjRXaXhIUVVOb1JTeEpRVUZKZVVjc1JVRkJWWHBITEVWQlFVbDVSeXhSUVVOa2NsUXNSVUZCVlRSTkxFVkJRVWsxVFN4UlFVTmtkVUlzUlVGQlYzRk1MRVZCUVVseVRDeFRRVU5tYlVVc1JVRkJVV3RJTEVWQlFVbHNTQ3hOUVVOUExHMUNRVUZhTWs0c1JVRkRSSEpVTEdGQlFXMUNja0lzUlVGSGNrSXdRaXhMUVVGTGMyNUNMREJDUVVFd1FuUlZMRVZCUVZNNVVpeEZRVUZWYlVVc1JVRkJUekZHTEVkQlJucEVjVlFzUlVGQlVUZFVMRXRCUVVzclFpeEZRVUZWYlVVc1JVRkJUekZHTEVkQlNUTkNRU3hoUVVGdFFuSkNMRWRCUXpGQ2NVSXNSVUZCVVd0RkxGRkJRVkYzUWl4SlFVbDRRaTlITEVWQlFWRjVRaXhWUVVGVksyeENMR3RDUVVGdlFpeFRRVUZUZGxvc1IwRkRNME4yVFN4TFFVRkxkMjVDTEdWQlFXVnFZaXhGUVVGSk5VMHNVVUZCVXpSTkxFVkJRVWw1Unl4UlFVRlRla2NzUlVGQlNYSk1MRk5CUVZWeFRDeEZRVUZKYkVnc1VVRkhjRVV2Unl4RlFVRlJlVUlzVlVGQlZUUnVRaXhuUWtGQmEwSXNVMEZCVXpOVkxFVkJRVk16VGl4RlFVRlBOR0VzUjBGRGVrUXNTVUZCU1hSblFpeEZRVUZWU3l4TFFVRkxaMnRDTEZWQlEyWTVhVUlzUlVGQlYyeENMRXRCUVV0emJVSXNXVUZCV1N4SFFVTm9RM1J0UWl4TFFVRkxaMnRDTEdWQlFVRkJMRVZCUTB4b2EwSXNTMEZCUzJsclFpeG5Ra0ZCUVVFc1JVRkRUR3ByUWl4TFFVRkxkMjVDTEdWQlFXVTNia0lzUlVGQlUzRlVMRVZCUVZNNVVpeEZRVUZWYlVVc1NVRkhjRVF2Unl4RlFVRlJlVUlzVlVGQlZUWnVRaXd3UWtGQk5FSXNVMEZCVXpsblFpeEhRVU51UkN4SlFVRkpaMmRDTEVWQlFXVXNSVUZCVW1oblFpeEZRVUZaTEVWQlEzWkNPVWNzUzBGQlN6aHRRaXhGUVVGUExFZEJRMW81YlVJc1MwRkJTemh0UWl4RlFVRlBMRWRCUTFvNWJVSXNTMEZCU3podFFpeEZRVUZQTEVkQlExbzViVUlzUzBGQlN6aHRRaXhGUVVGUExGRkJRVUVzUjBGSGFFSjRiMElzUlVGQlVYbENMRlZCUVZWelppeFRRVUZYTEZOQlFWVm9ZU3hIUVVOdVF5eEpRVUZKTkdFc1JVRkJWMnBuUWl4TFFVRkxjVVVzVlVGRGNFSXNUVUZCYVVJc1ZVRkJXRFJpTEV0QlFUQkNMRWxCUVdoRExFTkJRMEVzUjBGQlNUVmhMRWxCUVZWeVJpeExRVUZOTEVOQlEyaENMRWxCUVVrMFZ5eEZRVUZOTUUwc1NVRkZWaXhQUVVSQmRHcENMRXRCUVV0cFN5eHJRa0ZCYTBJeVRTeEhRVU5vUWpWWExFdEJRVXMyUkN4UlFVRlJLMU1zUjBGRmVFSTFWeXhMUVVGTGQyeENMR2RDUVVOTWVHeENMRXRCUVVzcmFrSXNiVUpCUVhGQ01XVXNSMEZGVml4TlFVRllOR0VzUjBGQmIwSXNTVUZEVnl4SlFVRm1MRlZCUVZoQkxFZEJRMFpxWjBJc1MwRkJTelpDTEd0Q1FVVk1hMGNzUlVGQlRUbEZMR1ZCUVdWcVJDeE5RVVY2UWtFc1MwRkJTM1ZRTEhWQ1FVbGlhbElzUlVGQlVYbENMRlZCUVZVNFJDeFJRVUZWTEZOQlFWVjFTeXhIUVVOc1F5eEpRVUZKTmxJc1JVRkJWMnBuUWl4TFFVRkxjVVVzVlVGRGNFSXNUVUZCYVVJc1ZVRkJXRFJpTEV0QlFUQkNMRWxCUVdoRExFTkJTVUVzUjBGSVFXcG5RaXhMUVVGTGEyMUNMR1ZCUTB4c2JVSXNTMEZCU3pocVFpeHhRa0ZCZFVJeFZpeEZRVVY0UW5CUExFdEJRVXR2YlVJc1YwRkRUQ3hQUVVGUGNtVXNSVUZCVFRGR0xGZEJRVmNyVEN4RlFVRlJMMDRzUlVGQlMybERMRk5CUjNwQ0xFMUJRVmd5WkN4SFFVRnZRaXhGUVVOeVFteFpMRVZCUVUwNVJTeGxRVUZsYWtRc1RVRkZja0pCTEV0QlFVczBUaXh2UTBGSlluUlFMRVZCUVZGNVFpeFZRVUZWT0c1Q0xHbENRVUZ0UWl4VFFVRlZPVW9zUlVGQlN6RlpMRWRCUTJoRUxFbEJRVXNzU1VGQlNYUkhMRVZCUVVrc1JVRkJSMEVzUlVGQlNXZG1MRVZCUVV0b1ppeEpRVUZMTEVOQlF6RkNMRWxCUVVscFZTeEZRVUZWYUZRc1MwRkJTM2R0UWl4elFrRkJjMEo2YmtJc1IwRkRja05aTEVWQlFWVkxMRXRCUVV0MWJVSXNWMEZCVjNodVFpeEhRVU14UW0xRExFVkJRVmRzUWl4TFFVRkxjMjFDTEZsQlFWbDJia0lzUjBGRGFFTnBRaXhMUVVGTE5HNUNMREJDUVVFd1FqZHZRaXhIUVVNdlFtbENMRXRCUVV0M2JrSXNaVUZCWlRkdVFpeEZRVUZUY1ZRc1JVRkJVemxTTEVWQlFWVnRSU3hMUVVsNFJDOUhMRVZCUVZGNVFpeFZRVUZWSzI1Q0xHZENRVUZyUWl4VFFVRlZMMG9zUlVGQlN6TlFMRWRCUXk5RExFbEJRVXNzU1VGQlNYSlFMRVZCUVVrc1JVRkJSMEVzUlVGQlNXZG1MRVZCUVV0b1ppeEpRVUZMTEVOQlF6RkNMRWxCUVVscFZTeEZRVUZWYUZRc1MwRkJTM2x0UWl4dlFrRkJiMEl4YmtJc1IwRkRia05aTEVWQlFWVkxMRXRCUVV0MWJVSXNWMEZCVjNodVFpeEhRVU14UW0xRExFVkJRVmRzUWl4TFFVRkxjMjFDTEZsQlFWbDJia0lzUjBGRGFFTnBRaXhMUVVGTE5HNUNMREJDUVVFd1FqZHZRaXhIUVVNdlFtbENMRXRCUVV0M2JrSXNaVUZCWlRkdVFpeEZRVUZUY1ZRc1JVRkJVemxTTEVWQlFWVnJUaXhMUVVsNFJEbFFMRVZCUVZGNVFpeFZRVUZWT0VJc1owSkJRV3RDTEZkQlEyaERMRWxCUVVsdlpTeEZRVUZYYW1kQ0xFdEJRVXR4UlN4VlFVTm9RakJhTEVWQlFXdENMRTFCUVZoclF5eEZRVVZZTEVkQlFVbHNReXhGUVVGTkxFVkJRVWNzUTBGRFZDeEhRVUVyUWl4SlFVRmtMRk5CUVZoclF5eEhRVUUyUWl4RFFVTXZRaXhKUVVGSk4xSXNSVUZCVTNCUExFdEJRVXM0YWtJc2NVSkJRMnhDT1dwQ0xFdEJRVXN5YmtJc1owSkJRV2RDTTI1Q0xFdEJRVXNyYWtJc2JVSkJRVzlDTTFZc1JVRkJVVFpTTEVkQlEzUkVhbWRDTEV0QlFVczRia0lzWjBKQlFXZENMMG9zUlVGQlN6TlFMRTlCUTNaQ0xFTkJRMGdzU1VGQlNTOUpMRVZCUVZGeVJpeExRVUZMSzJwQ0xHMUNRVU5xUWk5cVFpeExRVUZMTW01Q0xHZENRVUZuUWpOdVFpeExRVUZMT0dwQ0xIRkNRVUZ6UW5wbExFVkJRVTgwWVN4SFFVTjJSR3BuUWl4TFFVRkxObTVDTEdsQ1FVRnBRamxLTEVWQlFVc3hXU3hIUVVVdlFuSkdMRXRCUVV0cGJVSXNWMEZCVnl4SFFVVndRbXB0UWl4TFFVRkxORk1zTUVKQlIxUjBWU3hGUVVGUmVVSXNWVUZCVlhOUExHTkJRV2RDTEZkQlF6bENMRWxCUVVrMFVpeEZRVUZYYW1kQ0xFdEJRVXR4UlN4VlFVTndRaXhQUVVFclFpeEpRVUZrTEZOQlFWZzBZaXhIUVVOTGFtZENMRXRCUVVzcmFrSXNiVUpCUTNOQ0xFbEJRV1FzVTBGQldEbEVMRWRCUTBacVowSXNTMEZCU3pocVFpd3dRa0ZCUVVFc1IwRkpSU3h2UWtGQldHbEZMRkZCUVRCQ1FTeFBRVUZQUXl4aFFVTjRRMnBpTEVWQlFVbHhSQ3hsUVVGbE9WSXNSVUZCVVhsQ0xGVkJRVmRuYjBJc1QwRkJUME1zV1VGQllTeERRVU4wUkROblFpeEpRVUZMTEZkQlEwUXNUVUZCVHl4WlFWRnVRaTlKTEVWQlFWRXljRUlzVFVGQlVUTndRaXhGUVVGUk5IQkNMRkZCUVZVc1YwRkhPVUlzVDBGR1FYcHJRaXhGUVVGTmQxVXNWMEZCVnl4blFrRkJhVUlzWlVGRk0wSXNRMEZEU0hSWkxGRkJSbFVzU1VGQlNYSkNMRVZCUVZGcFJpeEhRVWQwUWl0Q0xGRkJRVk0yWlN4RlFVTlVjRk1zVDBGQlVYTlRMRWxCU1doQ2FHdENMRVZCUVV0dlZDeHJRa0ZCYTBKdVZpeEZRVU5CTERKQ1FVTkJaMnhDTEVkQlJYWkNlR3RDTEVWQlFWRXNWMEZCVWtFc1EwRkJiMEpTTEVWQlFWTnBSaXhGUVVGVlF5eEZRVUZ4UW05RkxFVkJRM2hFYmtVc1IwRkRTak5GTEVWQlFWRXNVMEZCVWtFc1EwRkJhMEpTTEVWQlFWTnBSaXhGUVVGVlF5eEZRVUZ4UWtNc1IwRkRNVVF6UlN4RlFVRlJMRmRCUVZKQkxFTkJRVzlDVWl4RlFVRlRjVW9zUlVGQlkwTXNSVUZCWTI1RkxFZEJRM3BFTTBVc1JVRkJVU3h0UWtGQlVrRXNRMEZCTkVKU0xFZEJRelZDVVN4RlFVRlJMREpDUVVGU1FTeERRVUZ2UTFJc1IwRkRjRU5STEVWQlFWRXNVMEZCVWtFc1EwRkRTVklzUlVGQlUzRktMRVZCUVdOdVJTeEZRVUZ4UWtRc1JVRkJWWGRGTEVWQlFVODJSU3hIUVVOcVJYUlBMRVZCUVZGQkxGRkJRVlZCTEVWQlEyeENRU3hGUVVGUk5uQkNMRkZCUVZVc1VVRkRiRUp5Y0VJc1JVRkJVU3huUWtGQlVrRXNRMEZCZVVKU0xFZEJRM3BDVVN4RlFVRlJMR3RDUVVGU1FTeERRVUV5UWxJc1JVRkJVM05LTEVWQlFXTnlSU3hGUVVGVlF5eEZRVUZ4UWpKaExFVkJRVmN4WVN4SFFVTTFSak5GTEVWQlFWRXNWMEZCVWtFc1EwRkJiMEpTTEVWQlFWTnhTaXhGUVVGalF5eEZRVUZqY0VVc1JVRkJjVUpFTEVWQlFWVkZMRWRCUTNoR00wVXNSVUZCVVN4bFFVRlNRU3hEUVVGM1FsSXNSMEZEZUVKUkxFVkJRVkVzYVVKQlFWSkJMRU5CUVRCQ1VpeEZRVUZUYVVZc1IwRkRia042UlN4RlFVRlJMR0ZCUVZKQkxFTkJRWE5DVWl4RlFVRlRjVW9zUlVGQlkyNUZMRVZCUVhGQ2IwVXNSMEZEYkVVNVNTeEZRVUZSTEZsQlFWSkJMRU5CUVhGQ1VpeEZRVUZUYVVZc1JVRkJWVU1zUlVGQmNVSnZSU3hIUVVNM1JEbEpMRVZCUVZFc1kwRkJVa0VzUTBGQmRVSlNMRVZCUVZOeFNpeEZRVUZqUXl4RlFVRmpjRVVzUlVGQmNVSkVMRVZCUVZWRkxFZEJRek5HTTBVc1JVRkJVU3hqUVVGU1FTeERRVUYxUWxJc1JVRkJVM0ZLTEVWQlFXTnNSU3hIUVVNNVF6TkZMRVZCUVZFc1dVRkJVa0VzUTBGQmNVSlNMRVZCUVZOeFNpeEZRVUZqUXl4SFFVTTFRemxKTEVWQlFWRXNZMEZCVWtFc1EwRkJkVUpTTEVWQlFWTnBSaXhGUVVGVlJTeEhRVU14UXpORkxFVkJRVkVzWVVGQlVrRXNRMEZCYzBKU0xFVkJRVk56U2l4RlFVRmpjRVVzUlVGQmNVSnZaMElzUlVGQlpYSm5RaXhGUVVGVlJTeEhRVU16UmpORkxFVkJRVkVzVjBGQlVrRXNRMEZCYjBKU0xFZEJRM0JDVVN4RlFVRlJMRmxCUVZKQkxFTkJRWEZDVWl4RlFVRlRhVVlzUjBGRE9VSjZSU3hGUVVGUkxHTkJRVkpCTEVOQlFYVkNVaXhGUVVGVGFVWXNSMEZGTlVKc1JDeEZRVUZMSzI1Q0xHbENRVUZwUWpsd1FpeEhRVU4wUWl0Q0xFVkJRVXNyYmtJc2FVSkJRV2xDT1hCQ0xFVkJRVkY1UWl4WFFWVTVRblZyUWl4RlFVRlZMRU5CUVVONmJFSXNSVUZCUnl4SlFVTmtlV3hDTEVWQlFWVXNRMEZCUXl0RUxFVkJRVWNzU1VGRFpDOUVMRVZCUVZVc1EwRkJRMmRGTEVWQlFVY3NTVUZEWkdoRkxFVkJRVlVzUjBGRFZrRXNSVUZCVlN4alFVTldRU3hQUVVGQlFTeEhRVU5CUVN4SFFVRkJRU3hIUVVOQlFTeEZRVUZWTEVsQlFVbG9iVUlzUlVGQlVXbEdMRWxCUTNSQ1JTeEZRVUZOSzFRc1ZVRkJWV3hZTEVWQlFVMUtMR1ZCUVdkQ1J5eEZRVUZMYjFnc1pVRkRjRU51V2l4SlFVbFVMRU5CUVVOcGNVSXNWMEZCVnl4RlFVRkZReXhWUVVGVkxFVkJRVVZETEZOQlFWTXNSVUZCUlVNc1owSkJRV2RDTEVWQlFVVkRMRmRCUVZjc1JVRkJSVEZMTEdsQ1FVRnBRaXhGUVVGRk1rc3NXVUZCV1N4RlFVRkZReXhyUWtGQmEwSXNSVUZCUlVNc2JVSkJRVzFDTEVkQlFVZERMRmxCUVZrc1IwRkJSelZSTEZkQlFWY3NSMEZCUjJwT0xGRkJRVkVzUjBGQlJ6aGtMR05CUVdNc1IwRkJSME1zV1VGQldTeEhRVUZIUXl4clFrRkJhMElzUjBGQlIwTXNVMEZCVXl4SFFVRkhReXhYUVVGWExFZEJRVWRETEZkQlFWY3NSMEZCUjBNc1lVRkJZU3hIUVVGSFF5eGxRVUZsTEVkQlFVZERMR3RDUVVGclFpeEhRVUZIUXl4cFFrRkJhVUlzUjBGQlIwTXNZVUZCWVN4SFFVRkhReXhaUVVGWkxFZEJRVWRETEdOQlFXTXNSMEZCUjBNc1kwRkJZeXhIUVVGSFF5eFpRVUZaTEVkQlFVZERMREpDUVVFeVFpeEhRVUZIUXl4alFVRmpMRWRCUVVkRExHTkJRV01zUjBGQlIwTXNZVUZCWVN4SFFVRkhOMjFDTEZOQlFWTXNTMEZCU3podFFpeEhRVUZITEVOQlFVTXNVMEZCVTNKeVFpeEZRVUZSWml4RlFVRlBSQ3hIUVVNemFVSXNZVUZEUVVNc1JVRkJUMFFzVVVGQlZTeFRRVUZUVVN4RlFVRlRhVVlzUlVGQlZVTXNSVUZEZWtOdlJTeEZRVUZqZFZjc1IwRkRiRUlzU1VGQlNUbGtMRVZCUVU5MlFpeEZRVUZSTEZWQlYyNUNMRk5CUVZNMlNTeEZRVUZoT0Zvc1IwRkRiRUlzU1VGQlNUbG9RaXhGUVVGVlN5eExRVUZMTUdVc1UwRkJWeXhKUVVGSmNHZENMRVZCUVZGcFJpeEhRVU4wUTJ0bExHRkJRV3RDYm1wQ0xFZEJRMnhDY1VJc1JVRkJVU3RGTEdWQlFXVXJZeXhGUVVGUkxFZEJSVzVET1doQ0xFVkJRVkZ6Uml4aFFVRmhha1lzVFVGRGNrSkJMRXRCUVVzd2FFSXNVVUZCVlVRc1JVRkRabnBvUWl4TFFVRkxjMG9zVVVGQlZTeEZRVU5tZEVvc1MwRkJTelpvUWl4bFFVRnBRaXhGUVVOMFFqZG9RaXhMUVVGTGQyaENMRmRCUVVGQkxFZEJRV3RDTEVkQlowc3pRaXhQUVc1TVkyNW9RaXhGUVVGTE1rb3NVVUZ4UW01Q00wb3NSVUZCUzNOV0xGTkJRVk5vVHl4RlFVRmpkMWNzUjBGRk5VSjRWeXhGUVVGaE5VZ3NWVUZCVlZnc1QwRkJVeXhYUVVNMVFpeFBRVUZQV1N4TFFVRkxjMG9zVTBGSGFFSXpRaXhGUVVGaE5VZ3NWVUZCVlVvc1VVRkJWU3hYUVVNM1FpeFBRVUZQU3l4TFFVRkxNR1VzVlVGSGFFSXZWeXhGUVVGaE5VZ3NWVUZCVlhsb1FpeE5RVUZSTEZOQlFWTXhhRUlzUlVGQlN6aEVMRVZCUVVkM2JVSXNSMEZETlVNc1NVRkJTVE5KTEVWQlFWTnFaU3hGUVVGdlFuaEVMRXRCUVVzd2FFSXNVVUZCVXpGb1FpeExRVUZMTUdVc1ZVRkRjRVFzUjBGQlNTdERMR0ZCUVd0Q2JtcENMRVZCUVZNc1EwRkZNMElzU1VGQlNUSm9RaXhIUVVSS2QwSXNSVUZCVTBFc1JVRkJUekZqTEZkQlEwMVdMRlZCU1hSQ0xFZEJSa0Z5UlN4TFFVRkxNR2hDTEZGQlFWVkVMRVZCUldkQ0xFbEJRV1FzVTBGQldIaENMRWRCUlVZc1QwRkVRV3BuUWl4TFFVRkxNR1VzVTBGQlV6UkhMSE5DUVVOUU4wUXNSVUZCVDNaa0xFMUJRMVp3UlN4RlFVTkJSU3hMUVVGTE5rUXNZVUZCUVVFc1JVRkZURGRFTEV0QlEwRnZjVUlzUjBGRlJDeEhRVUVyUWl4SlFVRmtMRk5CUVZodVN5eEhRVVZPTEU5QlFTdENMRWxCUVdRc1UwRkJXRUVzUjBGRFJtcG5RaXhMUVVGTE5rUXNVVUZCVVRSa0xFVkJRVTgzU1N4WFFVVndRalZaTEV0QlFVdHRTaXhWUVVwYWMxa3NSVUZCVTBFc1JVRkJUekZKTEZOQlVYaENMRWRCUVdVc1VVRkVaakJKTEVWQlFWTndhRUlzUlVGQlMyZHhRaXhSUVVGUk5Va3NTVUZSUVN4SlFVRnNRa0VzUlVGQlQzSnBRaXhQUVZOWVdTeExRVUZMYzNGQ0xGTkJRVk0zU1N4SlFWSnRRaXhKUVVGNlFqSkpMRVZCUTBGd2NVSXNTMEZCUzNWeFFpeHhRa0ZIVEhaeFFpeExRVUZMT0doQ0xGTkJia1ZxUWl4VFFVRXlRbVVzUjBGRGRrSXNUMEZyUlhkRGRVZ3NSMEZxUlhoRExFdEJRVTBzUlVGQlJ5eE5RVUZQTEVkQlEyaENMRXRCUVUwc1JVRkJSeXhOUVVGUExFZEJRMmhDTEV0QlFVMHNSVUZCUnl4UFFVRlBMRWxCUVVsSkxFdEJTbmhDTEZGQmRVUkpMRU5CUTBrc1NVRkJTVFZVTEVWQlFVMW9VQ3hGUVVOT0xHOUVRVUZ6UkhaSUxFVkJRVXRwUnl4WlFVRlpiV0lzU1VGQlUzSlVMRk5CUTNCR2NFOHNTMEZCU3pCbExGTkJRVk52UWl4blFrRkJaMEpzU2l4SFFVRkJRU3hMUVdkQ2RFTnFVQ3hGUVVGaE5VZ3NWVUZCVlhWeFFpeFRRVUZYTEZOQlFWTTNTU3hIUVVOMlF5eEpRVUZKTVVRc1JVRkJUUzlrTEV0QlFVdDVjVUlzWjBKQlFXZENhRW9zUlVGQlQzSnBRaXhSUVVOMFExa3NTMEZCUzNOS0xGRkJRVlY1VlN4RlFVTm1MMlFzUzBGQlN6Qm9RaXhSUVVGVk1XaENMRXRCUVVzd2NVSXNiVUpCUVhGQ0xFbEJRVWx1VVN4TlFVRk5kMFFzUjBGQlR5OWtMRXRCUVVzd2FFSXNVVUZKTDBRc1NVRklRU3hKUVVGSk0wb3NSVUZCVXk5WUxFdEJRVXN3WlN4VFFVTmthVTBzUjBGQlFVRXNSVUZEUVRGTExFVkJRVmNzUzBGRFRteG9RaXhGUVVGSkxFVkJRVWRCTEVWQlFVbG5aaXhKUVVGUGFHWXNSVUZCUnl4RFFVTXhRaXhKUVVGSkswWXNSVUZCWlhSQ0xFVkJRVzlDYVdVc1JVRkJUekZwUWl4SFFVRkpaMW9zUjBGSk9VTnJTU3hGUVVaQmJtSXNZVUZCZDBKNFJ5eEhRVU40UW5kSExFVkJRV1ZCTEVWQlFXRkRMRmRCUTBwV0xGVkJSV0lzUzBGSFdITnRRaXhGUVVOcFFpeFBRVUZpTVVzc1IwRkRRVzVpTEVWQlFXRTJTU3c0UWtGRlJ5eFBRVUZpYzFNc1JVRkRkMElzU1VGQlpDeFRRVUZZUVN4SlFVTkdibUlzUlVGQllXOWlMRTlCUVU5c1owSXNTMEZCVFdwQ0xFZEJRekZDYVVJc1MwRkJTekJvUWl4UlFVRlJNMmxDTEVkQlFVc3JSaXhIUVVWc1FqWnNRaXhGUVVSclF5eEpRVUZrTEZOQlFWZ3hTeXhIUVVOSmFtZENMRXRCUVVzd1ppeHJRa0ZCYTBJMVlTeEZRVUZoYVZVc1UwRkJWV2hoTEVkQlEzcENMRWxCUVdRc1UwRkJXR3RvUWl4SFFVTkphbWRDTEV0QlFVczBaaXhwUWtGQmFVSTVZU3hGUVVGaE9GUXNWVUZCVnpkYUxFZEJSVGxEYVVJc1MwRkJTM05tTEd0Q1FVRnJRblpuUWl4SFFVZDRRelJ5UWl4RlFVRmhNM0ZDTEV0QlFVc3daaXhyUWtGQmEwSTFZU3hGUVVGakwwWXNSMEZIY2tRMGNrSXNSMEZCV1RWVExFVkJRVTkxVGl4MVFrRkhOVUl6WkN4RlFVRmhOVWdzVlVGQlZXOW1MRmxCUVdNc1YwRkRha01zVDBGQmQwSXNUMEZCYWtKdVppeExRVUZMTUdoQ0xGTkJSMmhDTDFvc1JVRkJZVFZJTEZWQlFWVXJhRUlzVTBGQlZ5eFRRVUZWZW1Nc1IwRkRlRU55Uml4TFFVRkxNR2hDTEZGQlFWVXNTMEZEWmpGb1FpeExRVUZMTUdVc1UwRkJVMWNzVTBGQlUyaGhMRWxCUnpOQ2MwTXNSVUZCWVRWSUxGVkJRVlZ2U2l4UlFVRlZMRmxCUTNwQ2Jrb3NTMEZCUzIxbUxHVkJRV3RDYm1Zc1MwRkJTekJsTEZOQlFWTndWeXh0UWtGRGVrTjBTU3hMUVVGTE1HaENMRkZCUVZVc1MwRkRaakZvUWl4TFFVRkxNR1VzVTBGQlUzWldMRmxCUjJ4Q2VFSXNSVUZCWVRWSUxGVkJRVlU0UkN4UlFVRlZMRk5CUVZWMVN5eEhRVU4yUTNCUExFdEJRVXN3YUVJc1VVRkJWU3hMUVVObU1XaENMRXRCUVVzd1pTeFRRVUZUYjBJc1owSkJRV2RDTVZJc1IwRkJRVUVzU1VGSGJFTjZSeXhGUVVGaE5VZ3NWVUZCVlRKbUxHdENRVUZ2UWl4VFFVRlZjbUVzUlVGQlQzbENMRWRCUjNoRUxFOUJSa0U1Unl4TFFVRkxNR2hDTEZGQlFWRTFZU3hIUVVGVGVrSXNTVUZEUVhKR0xFdEJRVXMyYUVJc1owSkJRMDQzYUVJc1MwRkJTM05LTEZWQlEzUkNkRW9zUzBGQlN6aG9RaXhUUVVGVE9XaENMRXRCUVVzd2FFSXNWVUZCUVVFc1NVRk5NMEl2V2l4RlFVRmhOVWdzVlVGQlZYVm1MR3RDUVVGdlFpeFhRVVYyUXl4UFFVUkJkR1lzUzBGQlMyMUtMRmRCUVVGQkxFZEJTVlI0UWl4RlFVRmhOVWdzVlVGQlZUWm1MR2xDUVVGdFFpeFRRVUZWZUZJc1IwRkhhRVFzVDBGR1FYQlBMRXRCUVVzMmFFSXNhVUpCUTB3M2FFSXNTMEZCU3paRUxGRkJRVkYxU3l4SlFVRkJRU3hIUVVscVFucEhMRVZCUVdFMVNDeFZRVUZWYlVzc2FVSkJRVzFDTEZkQlEzUkRMRWxCUVVsc1N5eExRVUZMYldZc1kwRkJWQ3hEUVVOQkxFbEJRVWx6UXl4RlFVRlRlbWhDTEV0QlFVc3dhRUlzVVVGRmJFSXNSMEZFUVRGb1FpeExRVUZMYlVvc1ZVRkRSSE5aTEdGQlFXdENibXBDTEVWQlEyeENiV3BDTEVWQlFVOTJXaXhqUVVWUUxFbEJRVXNzU1VGQlNXNUtMRVZCUVVrc1JVRkJSMEVzUlVGQlNUQnBRaXhGUVVGUGNtbENMRk5CUVZWTUxFVkJRemRDTUdsQ0xFVkJRVTh4YVVJc1lVRkJZMVFzUjBGRGNrSnRha0lzUlVGQlR6RnBRaXhIUVVGSGJVb3NWMEZOTVVKUUxFVkJRV0UxU0N4VlFVRlZNbkZDTEdsQ1FVRnRRaXhYUVVOMFF5eFBRVUZCTEVkQlIwb3ZhVUlzUlVGQllUVklMRlZCUVZVd2NVSXNaMEpCUVd0Q0xGTkJRVlV4VFN4SFFVTXZReXhQUVVGUFFTeEhRVWRLY0Zjc1NVRkhUQ3hEUVVGRGRFVXNVMEZCVXl4TFFVRkxkVzVDTEVkQlFVY3NRMEZCUXl4VFFVRlRPWEpDTEVWQlFWRm1MRVZCUVU5RUxFZEJRemRETEdGQlEwRkRMRVZCUVU5RUxGRkJRVlVzVTBGQlUxRXNSVUZCVTJsR0xFZEJRMjVETEVsQlFVbHpia0lzUlVGQlR5eEhRVU5RZUhGQ0xFVkJRVTkyUWl4RlFVRlJMRlZCUTJZcmEwSXNSVUZCY1VJdmEwSXNSVUZCVVN4alFVTTNRbWR6UWl4RlFVRmxlbkZDTEVWQlFVdDVjVUlzWVVGRGNFSjZTU3hGUVVGdFFtaHBRaXhGUVVGTFoybENMR2xDUVVONFFtNWpMRVZCUVdNM1JpeEZRVUZMTmtZc1dVRkRia0pOTEVWQlFWa3hTQ3hGUVVGUkxGbEJRVmt3U0N4VlFVVm9RM1ZyUWl4RlFVRnhRaXhEUVVGRFF5eHRRa0ZCUVVFc1IwRlZkRUpETEVWQlFYRkNMRWxCUVVsRExFOUJRVThzVDBGVWJFSXNRMEZEWkN4UlFVRlpMRk5CUTFvc1QwRkRRU3haUVVOQkxGTkJRMEVzVTBGRFFTeFpRVU5CTEhGQ1FVVnhSSGhZTEV0QlFVc3NTMEZCVHl4TlFVVnFSWGxZTEVWQlFXZENMRk5CUVZOdVlpeEhRVU42UWl4UFFVRlBNMUFzUlVGQlN6UkhMR0ZCUVdFclNTeEpRVU5HTEUxQlFXNUNRU3hGUVVGTGEwVXNUMEZCVHl4SlFVTklMR2RDUVVGVWJFVXNSMEZIVWl4VFFVRlRiMklzUlVGQldXNW5RaXhIUVVOcVFpeFBRVUZSWjJkQ0xFVkJRVzFDYkZnc1MwRkJTemxKTEVkQlIzQkRMRk5CUVZOdlowSXNSVUZCWTNCeFFpeEhRVU51UWl4SlFVTkpMRTlCUVVFc1NVRkJUMEVzUlVGQlJ5dHdRaXhyUWtGRlpDeE5RVUZQYm5SQ0xFZEJRMGdzVDBGQlFTeEhRVWxTTEZOQlFWTjVkRUlzUlVGQlpYQnRRaXhGUVVGTEswWXNSVUZCUzNOblFpeEhRVU01UWl4SlFVRkpNVWtzUlVGQlRYaHBRaXhGUVVGTGJYSkNMSGxDUVVGNVFuUnRRaXhGUVVGTEswWXNSVUZCVFhOblFpeEZRVU5ZVWl4SFFVTjRReXhSUVVGUGJFa3NSMEZCVFhkSkxFVkJRV040U1N4SFFXOURMMElzU1VGQlNUUkpMRVZCUVcxQ0xGTkJRVk0xVnl4SFFVTTFRaXhQUVVGUFFTeEZRVUZKVml4UlFVRlJMRkZCUVZNc1VVRjNTalZDZFZnc1JVRkJjMEo0YkVJc1QwRnlTblJDZVd4Q0xFVkJNa2hLTEZOQlFXOURMMG9zUlVGQlZURm5RaXhGUVVGVk1FTXNSVUZCUnpORExFVkJRVWt5Y1VJc1JVRkJTWEpLTEVkQlF5OUVMRWxCUVVselNpeEZRVUZqTEZkQlFXRXNUMEZCVHpkeVFpeExRVUZ3UWl4SFFVTmtObEVzUlVGQlV5dFJMRVZCU1dJc1UwRkJVMnRMTEVsQlEwd3NTVUZCU1dwT0xFVkJRVmt6WkN4RlFVTmFRU3hKUVVGaE1uQkNMRWxCUVUxb1RTeEZRVUZaTjJVc1RVRkRia01zU1VGQlNVd3NSVUZCVlN4SlFVRkpja0lzUlVGQlVXbEdMRWRCUXpGQ05VUXNSVUZCVVhsUUxIRkNRVU5TTEVsQlFVa3hSU3hGUVVGMVFpeHBRa0ZCV0cxSExFZEJRWFZDTjFFc1QwRkJVelp5UWl4RlFVTXhRemR5UWl4TFFVRkxObEVzUjBGQlZTdFJMRVZCUTJwQ00yZENMRVZCUVVzMGFVSXNSVUZCYlVKc2EwSXNSVUZCVXpScFFpeEhRVU55UXl4SlFVTkpOMWdzUlVGQlJ5OUVMRTFCUVUxcldTeEZRVUZYYVUwc1JVRkJZV3B2UWl4VlFVRlhOVUlzU1VGRE9VTXNUVUZCVFhCRUxFZEJRMG80UWl4RlFVRlJiV2RDTEdkQ1FVRm5RblZETEVWQlFXbENlR3RDTEVsQlFVRkJMRWRCUVVrc1IwRkhha1FzVDBGRVN6aENMRVZCUVZFd2JFSXNhVUpCUVdsQ01XeENMRVZCUVZFeWJFSXNjMEpCUXk5Q00yeENMRVZCUjFnc1RVRndRbk5DTEdsQ1FVRllhMUlzU1VGRFVDdFJMRVZCUVZjelowSXNSMEZyUW1aYUxFVkJRVXR2VkN4clFrRkJhMEp4V1N4RlFVRmhMSEZDUVVGQkxFZEJRemRDUVN4SFFVOVlMRk5CUVZORExFVkJRV0UzYlVJc1JVRkJTM0Z0UWl4RlFVRlJhRkFzUlVGQlVYbFFMRVZCUVdGNlNpeEhRVXR3UkN4SlFVcEJMRWxCUVVrd1NpeEZRVUZsTEVsQlFVbG1MRTlCUVU5UExFVkJRV2xDUml4SFFVRlZMRXRCUTNKRWFsSXNSVUZzVEZJc1UwRkJPRUp3Vml4RlFVRkxjVzFDTEVWQlFWRlZMRVZCUVdNeFVDeEhRVWR5UkN4SlFVWkJMRWxCUVVrdlVpeEZRVUZQYmtzc1JVRkJTelp5UWl4clFrRkJhMEpvYmtJc1IwRkRPVUo0Uml4RlFVRk5MRWRCUTBSWUxFVkJRVWtzUlVGQlIwRXNSVUZCU1hsTUxFVkJRVXR3VEN4VFFVRlZUQ3hGUVVGSExFTkJRMnhETEVsQlFVbHJUU3hGUVVGTlZDeEZRVUZMZWt3c1IwRkRXSE5ITEVWQlFWRklMRVZCUVVrclJpeEhRVU5hYTJoQ0xFVkJRWE5DTlZBc1NVRkJWelJQTEVkQlEzaENRU3hGUVVGamJHZENMRVZCUVVzMVJpeEZRVUZQU0N4SFFVTnNRaXh0UWtGQlZrY3NSMEZEVG1kdFFpeEZRVUZqYUcxQ0xFbEJRMlJwYlVJc1JVRkJaWEJ0UWl4RlFVRkxLMFlzUlVGQlMzTm5RaXhMUVVNeFFtaFFMRVZCUVU5MFVpeEZRVUZMTlVZc1JVRkJUMGdzUlVGQlMybHVRaXhKUVVONFFucHpRaXhGUVVGSk1FSXNTMEZCU3paS0xFVkJRVXMxUml4SFFVbDBRaXhQUVM5Q1NpeFRRVUZ2UWpOR0xFVkJRVXMyY2tJc1JVRkJVVlVzUjBGRE4wSXNTVUZCU3l4SlFVRkpiSFJDTEVWQlFVa3NSVUZCUjBFc1JVRkJTVmNzUlVGQlNVNHNUMEZCVVV3c1IwRkJTeXhGUVVGSExFTkJRM0JETEVsQlFVbHJUU3hGUVVGTmRrd3NSVUZCU1Znc1IwRkRaQ3hIUVVGSmEzUkNMRVZCUVdGc1dTeExRVUZMT1Vrc1IwRkZiRUlzU1VGRVFTeEpRVUZKYldoQ0xFVkJRWGRDYm1oQ0xFVkJRVWxyU2l4UlFVRlJPRmdzUlVGQll5eEpRVU0zUTJwb1FpeEZRVUZKTEVWQlFVZEJMRVZCUVVsMFRDeEZRVUZKVGl4UFFVRlJORXdzUjBGQlN5eEZRVU5xUXl4SFFVRkpkRXdzUlVGQlNYTk1MRXRCUVU5dmFFSXNSVUZEV0N4TlFVRk5MRWxCUVVrMWJFSXNSVUZCVlN4eFIwRkRaakpPTEZGQlFWRXNTMEZCVFc5WUxFdEJVblpETEVOQk9FSmxOM0pDTEVWQlFVczJja0lzUlVGQlVWVXNSMEZEYWtKMmMwSXNSVUZ0UzBneWMwSXNRMEZCY1VKdWJrSXNSVUZCUzNGdFFpeEZRVUZSVlN4RlFVRmpNVkFzUjBGRk0wTjRaQ3hGUVVGSkxFVkJRVWRuWml4RlFVRk5la1FzUlVGQlVXeGlMRTlCUVZGTUxFVkJRVWxuWml4RlFVRkxhR1lzUjBGQlNTeEZRVUZITEVOQlEyeEVMRWxCUVVsclRTeEZRVUZOY1ZBc1JVRkJVWFppTEVkQlEyUnJReXhGUVVGTGNWb3NSVUZCVVhaaUxFVkJRVVVzUjBGRFpuVjBRaXhGUVVGcFFuSm9RaXhGUVVGTmMyZENMRVZCUXpOQ0xFZEJRVWxUTEVsQlFXZENUaXhGUVVOb1FuaHRRaXhGUVVGSmIyNUNMRWRCUTBGYUxFVkJRVzlDZW1kQ0xFVkJRVXMwWml4RlFVRk5OV1lzUlVGQlMyaExMRVZCUVVsemNVSXNSVUZCVVdoS0xFOUJRMnBFTEVOQlEwZ3NTVUZCU1hWS0xFVkJRV05GTEVWQlFWa3ZjVUlzUlVGQlNTeFhRVU01UWl4UFFVRlBlWEZDTEVWQlFXOUNlbWRDTEVWQlFVczBaaXhGUVVGTk5XWXNSVUZEV0doTExFVkJRVWx6Y1VJc1JVRkJVV2hLTEV0QlJUTkRiR2xDTEVWQlFVdHZWQ3hyUWtGQmEwSnhXU3hGUVVGaExIRkNRVUZCTEVkQlEzQkROVzFDTEVWQlFVbHZia0lzUjBGQmEwSlNMRWRCU1RsQ0xFOUJSRUY2Y2tJc1JVRkJTeXR1UWl4cFFrRkJhVUpzYWtJc1IwRkRaa0VzUlVGUldEVkhMRVZCUVZGcGRVSXNWVUZCV1N4VFFVRlZkSEpDTEVWQlFVbDFZaXhIUVVNNVFpeEhRVUZyUWl4dFFrRkJVSFppTEVWQlExQXNUVUZCVFN4SlFVRkpkVVlzUlVGQlZTeG5RMEZCYTBOdVJ5eEZRVUZMYVVjc1dVRkJXWEpHTEVsQlJUTkZMRWRCUVVsdmNVSXNSVUZCWTNCeFFpeEhRVU5rTEU5QlFVOUJMRVZCUjFnc1NVRmlaVEpuUWl4RlFVRlZNV2RDTEVWQlFWVnhhRUlzUlVGbEwwSTNhVUlzUjBGbVYydHBRaXhGUVdWTE0yZENMRVZCWmt0RExFOUJaVXhFTEV0QlNIQkNkV0lzUlVGQlZURlhMRTlCUVU4d1Z5eEpRVU5OZWxrc1VVRkJkMEk0YlVJc1JVRkJUM0pQTEVWQlFWRjZXU3hSUVdJelFuZGxMRWxCWTJwQ0wwWXNSVUZCVVN0R0xGVkJZbTVDYlVvc1JVRkJiMEk1U2l4RlFVRlZNV2RDTEU5QlFVRkJMRVZCUTFRd1owSXNSVUZCVlN4TFFVRk5WeXhKUVdVMVF5eFBRVVJCYkdsQ0xFVkJRVXR0YzBJc1owSkJRV2RDZG5KQ0xFVkJRVWwyUWl4RlFVRkxNSEpDTEVkQlEzWkNNWEpDTEVkQlIxaHdRaXhGUVVGUmVYUkNMR0ZCUVdVc1UwRkJWWGh1UWl4RlFVRlJhVmtzUjBGRGNrTXNSMEZCYzBJc2JVSkJRVmhxV1N4SFFVRXlReXhwUWtGQldFRXNSVUZEZGtNc1RVRkJUU3hKUVVGSmFVTXNSVUZCVlN4blIwRkhlRUlzU1VGQlNTdGlMRXRCUkVvdlJpeEZRVUZWTVZjc1QwRkJUekJYTEVsQlExTXJSaXhWUVVOMFFtZEtMRVZCUVZNdlR5eEZRVUZSSzA4c1QwRkRReXhwUWtGQldFRXNTVUZCY1VKQkxFVkJlRkpvUWl4VFFYbFNhRUlzU1VGQlNXaFFMRVZCUVZORExFVkJRVkZFTEU5QlEwTXNiVUpCUVZoQkxFbEJRWFZDUVN4RlFVRlRORThzUjBGRE0wTXNTVUZCU1dFc1JVRkJZM2hRTEVWQlFWRjNVQ3haUVVjeFFpeEhRVVl5UWl4dFFrRkJhRUpCTEVsQlFUUkNRU3hGUVVGalRpeEpRVVZvUkhKeVFpeEZRVUZMTkVjc1lVRkJZWE5yUWl4SFFVTnVRaXhOUVVGTkxFbEJRVWxzVWl4WFFVRlhMSFZGUVVsNlFpeEpRVVJCTEVsQlFVazNVQ3hGUVVGUGJrc3NSVUZCU3paeVFpeHJRa0ZCYTBJemJrSXNSMEZEZWtKNFJpeEZRVUZKTEVWQlFVZEJMRVZCUVVsNVRDeEZRVUZMY0V3c1UwRkJWVXdzUlVGQlJ5eERRVU5zUXl4SlFVRkpjMGNzUlVGQlVXUXNSVUZCVDJsSExFVkJRVXQ2VEN4SlFVTlNMR2RDUVVGYWVVd3NSVUZCUzNwTUxFbEJRMHh6UWl4RlFVRkxiM05DTEZGQlFWRndia0lzUzBGRFlqQnRRaXhGUVVGaE1XMUNMRVZCUVUxMFJpeFZRVUZYZDNKQ0xFVkJRVkZvVUN4RlFVRlJlVkFzUlVGRE1VTjZTaXhIUVVOS2Qwb3NSVUZCWVRGdFFpeEZRVUZQYTIxQ0xFVkJRVkZvVUN4RlFVRlJlVkFzUlVGQllYcEtMRWxCU1hwRUxFOUJRVTkzU2l4RlFVRmhlRzVDTEVWQlFWRm5ia0lzUlVGQlVXaFFMRVZCUVZGNVVDeEZRVUZoZWtvc1RVRkxNMFFzUTBGQlEzQkxMRmRCUVZjc1IwRkJSMjFTTEdGQlFXRXNSMEZCUjJwdFFpeFRRVUZUTEV0QlFVdHhjRUlzUjBGQlJ5eERRVUZETEZOQlFWTTFkRUlzUlVGQlVXWXNSVUZCVDBRc1IwRkRNMFVzWVVGRFFVTXNSVUZCVDBRc1VVRkJWU3hUUVVOaVVTeEZRVUZUY1Vvc1JVRkJZMjVGTEVWQlFYRkNiMFVzUjBGRGFFUXNTVUZIU1N0clFpeEZRVWhCZEhOQ0xFVkJRVTkyUWl4RlFVRlJMRlZCUTJacFRTeEZRVUZYTVVzc1JVRkJTekJMTEZOQlEyaENaME1zUlVGQlRXcFBMRVZCUVZFc1UwRkZReXh0UWtGQlVqQnlRaXhOUVVGdlFtMURMRVZCUVZOdVF5eExRVVY0UXl4SlFVRkpiME1zUlVGQlpTeFhRVU5tTEVsQlFVazViRUlzUlVGQlVTeEZRVU5TSzJ4Q0xFVkJRVThzUlVGRldDeFRRVUZUUXl4RlFVRmhlbTVDTEVWQlFVODBSaXhIUVVONlFtcE1MRXRCUVVzNFJ5eEhRVUZUZWtJc1JVRkRaSEpHTEV0QlFVczRSeXhGUVVGUksyeENMRWRCUVZFMWFFSXNSVUZEY2tKdVJTeEpRVWRLTEU5QlFVOHNVMEZCYzBKM1ZpeEhRVU42UW5WUkxFVkJRVTkyVVN4RlFVRkpkVkVzUzBGRFdDOXNRaXhGUVVGUkxFVkJRMUlzU1VGQlNYQklMRVZCUVUwc1NVRkJTVFpoTEUxQlFXbENMRVZCUVZnclFpeEZRVUZKZFZFc1RVRkZlRUlzVDBGRVFYWlJMRVZCUVVsNVVTeFJRVUZSUkN4RlFVRmpjSFJDTEVkQlEyNUNRU3hIUVdaSkxFZEJPRUp1UWl4VFFVRlRjM1JDTEVWQlFYVkNPVzVDTEVkQlF6VkNMRWxCUTBrcmJrSXNSVUZFUVVNc1IwRkJRVUVzUlVGRlNpeFJRVUZCTEVsQlFVbFFMRWRCUVhkQ2VtNUNMR0ZCUVdWNWJrSXNSVUZEZGtOTkxFVkJRVlZNTEVWQlFXRXhia0lzUjBGRGRrSm5iMElzUjBGQlFVRXNUVUZEUnl4RFFVTklMRWxCUVVreGFVSXNSVUZCVDNWRExFVkJRVWwyUXl4TFFVRkxkRVlzUjBGRGFFSTJXU3hGUVVGTmRsUXNSVUZCUzNCTUxFOUJRMlkyZEVJc1JVRkJWU3hKUVVGSk1WTXNUVUZCV1N4RlFVRk9kMFFzUjBGRGNFSXNTVUZCU3l4SlFVRkphR1lzUlVGQlNTeEZRVUZIUVN4RlFVRkpaMllzU1VGQlQyaG1MRVZCUVVjc1EwRkRNVUlzU1VGQlNXdE5MRVZCUVUxVUxFVkJRVXQ2VEN4SFFVTm1hM1ZDTEVWQlFWRnNkVUlzUjBGQlMyMUhMRVZCUVVrclJpeEhRVU5xUW1kcFFpeEZRVUZSYkhWQ0xFVkJRVWxuWml4SFFVRlBPVk1zUjBGSE0wSnFUQ3hMUVVGTE9HZENMR0ZCUVdGdFRTeEhRVU5zUW1wMFFpeExRVUZMYlhSQ0xFOUJRVk5FTEVWQlEyUnNkRUlzUzBGQlMzVm9RaXhaUVVGQlFTeEZRVUZyUWpKTUxFZEJRVk1zUjBGQlN5eEhRV3REZWtNc1UwRkJVMFVzUlVGQlRUTjBRaXhIUVVOWUxFbEJRVWxETEVWQlEwRXlkRUlzUlVGQldUZHdRaXhGUVVGdlFpOUVMRWRCUlhCRExFOUJRVXR6VEN4RlFVRlRjMmxDTEVsQlIxWXpkRUlzUlVGRVR6SjBRaXhoUVVGeFFpOTFRaXhGUVVOMFFpdDFRaXhGUVVGVmJuQkNMRTFCUTFvMVJpeEZRVUZST0hWQ0xGZEJRVUZCTEU5QlFVOW9iVUlzVDBGQlYwRXNUMEZCVjBFc1IwRkZia01zU1VGQlNUUnNRaXhGUVVGMVFrc3NSMEZCVnpGMFFpeFZRVWMxUXpCMFFpeGhRVUZ4UWk5MVFpeEhRVU55UW05Q0xFVkJRVWxuUml4bFFVRmxNbTlDTEVWQlFWY3NSMEZGTTBJemRFSXNSMEZZU1d0SkxFVkJRV0VzTmtWQmNrTTFRblpJTEVWQlFVdHpWaXhUUVVGVGNWZ3NSVUZCZDBKeWJFSXNSMEZGZEVOeGJFSXNSVUZCZFVKcWRFSXNWVUZCVlhsb1FpeE5RVUZSTEdGQlJYcERkMHdzUlVGQmRVSnFkRUlzVlVGQlZUSm1MR3RDUVVGdlFpeFRRVUZWY21Fc1JVRkJUM2xDTEVkQlIyeEZMRWRCUmtFNVJ5eExRVUZMTUdoQ0xGRkJRVkUxWVN4SFFVRlRla0lzU1VGRFFYSkdMRXRCUVVzMmFFSXNaMEpCUTA0M2FFSXNTMEZCUzNOS0xGRkJRVk1zUTBGREwwSXNTVUZCU1hWYUxFVkJRMG9zUjBGQlNUZHBRaXhMUVVGTGJYUkNMRTlCUTB4MFN5eEZRWHBEVHl4VFFVRlRiMHNzUjBGSGVFSXNTVUZHUVN4SlFVRkpkblJDTEVWQlFVMHNTVUZCU1dsMFFpeEZRVU5XZG5SQ0xFVkJRVk0yZEVJc1JVRkJVVGQwUWl4UFFVRlRMRVZCUVVrc1JVRkRla0pNTEVWQlFVa3NSVUZCUjBFc1JVRkJTVXNzU1VGQlZVd3NSVUZCUnl4RFFVTTNRaXhKUVVGSmEwMHNSVUZCVFdkcFFpeEZRVUZSTjNSQ0xFVkJRVk5NTEVkQlEzWkNjMGNzUlVGQlVUUnVRaXhGUVVGUmJIVkNMRWRCUTNCQ1Z5eEZRVUZKYjJNc1NVRkJTVGRSTEVWQlFVczFSaXhIUVVWcVFpeFBRVUZQTTBZc1JVRlNVU3hEUVhsRFdVMHNTMEZCU3pCb1FpeGhRVU55UWl4RFFVTkliVUlzUlVGQlRTeEhRVVZPTEVsQlJFRXNTVUZCU1hsTExFVkJRVmwwZEVJc1MwRkJTMW9zVTBGRFdrd3NSVUZCU1N4RlFVRkhaMllzUlVGQlRTOWtMRXRCUVV0YUxGTkJRVlZNTEVWQlFVbG5aaXhKUVVGUGFHWXNSVUZETlVNNGFrSXNSVUZCU1RkcFFpeExRVUZMTUdoQ0xGRkJRVkV6YVVJc1JVRkJTWFYxUWl4SlFVRmpkSFJDTEV0QlFVc3dhRUlzVVVGQlVUTnBRaXhIUVVsNFJDeFBRVVJCYVVJc1MwRkJTemhvUWl4VFFVRlRaU3hKUVVGQlFTeEZRVWRzUWl4UFFVRkJMRWRCUjBwdFN5eEZRVUYxUW1wMFFpeFZRVUZWTW5GQ0xHbENRVUZ0UWl4WFFVTm9SQ3hQUVVGQkxFZEJSMHB6UXl4RlFVRjFRbXAwUWl4VlFVRlZNSEZDTEdkQ1FVRnJRaXhUUVVGVk1VMHNSMEZEZWtRc1QwRkJUMEVzUjBGQlR5eEhRWE5DYkVKNlppeEZRVUZSZVVJc1ZVRkJWWEYwUWl4TlFVRlJMRmRCUTNSQ0xFOUJRVTlCTEVWQlFVMXdkRUlzVDBGSGFrSXhRaXhGUVVGUk9IVkNMRTFCUVZFc1UwRkJWVE4wUWl4SFFVTjBRaXhQUVVGUE1uUkNMRVZCUVUwemRFSXNUVUZKWml4RFFVRkRlVXdzVVVGQlVTeEhRVUZITjBnc1UwRkJVeXhMUVVGTGEzRkNMRWRCUVVjc1EwRkJReXhUUVVGVGVuVkNMRVZCUVZGbUxFVkJRVTlFTEVkQlEzaEVMR0ZCVVVFc1UwRkJVM05ETEVWQlFVMXZkRUlzUjBGRFdIaDBRaXhMUVVGTGVYUkNMRlZCUVZsRUxFVkJRMnBDZUhSQ0xFdEJRVXR6U2l4UlFVRlZMRVZCUTJaMFNpeExRVUZMTUhSQ0xFOUJRVk1zUlVGSGJFSjBkRUlzUlVGQlRVd3NWVUZCVlRSMFFpeHZRa0ZCYzBJc1UwRkJWV1FzUjBGRE5VTXNUMEZCVHpkelFpeExRVUZMZVhSQ0xGVkJRVmxhTEVkQlJ6VkNlbk5DTEVWQlFVMU1MRlZCUVZWNVFpeFRRVUZYTEZOQlFWVk1MRWRCUTJwRExFbEJRVWt2UWl4RlFVRlRXU3hMUVVGTFdpeFRRVU5zUWxrc1MwRkJTelIwUWl4bFFVRmxlSFZDTEVWQlFWTXNSMEZGTjBKWkxFdEJSRk5CTEV0QlFVc3dkRUlzVDBGQlUzUjFRaXhGUVVGWFdTeExRVUZMZVhSQ0xGVkJRVmtzUjBGRGVrTjBjMElzUlVGRFZtNUNMRXRCUVV0elNpeFJRVUZWYkVzc1JVRkJVeXhIUVVjMVFtZENMRVZCUVUxTUxGVkJRVlZ4UWl4TFFVRlBMRk5CUVZWSUxFVkJRVWxETEVWQlFWVkRMRWRCUXpORExFbEJRVWt2UWl4RlFVRlRXU3hMUVVGTFdpeFRRVUZYTEVWQlF6ZENMRWRCUVVsWkxFdEJRVXN5ZEVJc2IwSkJRVzlDZG5WQ0xFZEJTWHBDTEU5QlNFRlpMRXRCUVV0M1FpeFRRVUZUVUN4SFFVTmtha0lzUzBGQlMzZENMRk5CUVZOT0xGRkJRMlJzUWl4TFFVRkxkMElzVTBGQlUwd3NSMEZIYkVJc1NVRkJTVFpLTEVWQlFVbG9UQ3hMUVVGTE1IUkNMRTlCUVZOMGRVSXNSVUZCVXl4RlFVTXZRbGtzUzBGQlN6UjBRaXhsUVVGbGVIVkNMRWRCUTNCQ0xFbEJRVWw1ZFVJc1JVRkJWemQwUWl4TFFVRkxlWFJDTEZWQlFWa3NSVUZEYUVONmRFSXNTMEZCVFdkTUxFVkJRVWtzUlVGQlN6WnBRaXhIUVVGWk5YTkNMRVZCUXpOQ2FrSXNTMEZCVFdkTUxFVkJRVWtzUlVGQlN6WnBRaXhIUVVGWk0zTkNMRVZCUXpOQ2JFSXNTMEZCVFdkTUxFVkJRVWtzUlVGQlN6WnBRaXhIUVVGWk1YTkNMRVZCUXpOQ2JrSXNTMEZCUzNOS0xGRkJRVlZzU3l4SFFVZHVRbWRDTEVWQlFVMU1MRlZCUVZVMlFpeE5RVUZSTEZkQlEzQkNMRWxCUVVscmMwSXNSVUZCVVRsMFFpeExRVUZMTUhSQ0xFOUJRMkpvZFVJc1JVRkJUVTBzUzBGQlN6aDBRaXhIUVV0bUxFOUJTRUU1ZEVJc1MwRkJTemgwUWl4UlFVRkJRU3hGUVVOTU9YUkNMRXRCUVVzd2RFSXNUMEZCVlVrc1JVRkJVU3hGUVVGTk9YUkNMRXRCUVV0NWRFSXNWVUZCV1N4RlFVTTVRM3AwUWl4TFFVRkxjMG9zVlVGRFJUVktMRWRCUjFoVkxFVkJRVTFNTEZWQlFWVllMRTlCUVZNc1YwRkRja0lzVDBGQlQxa3NTMEZCUzNOS0xGTkJSMmhDYkVvc1JVRkJUVXdzVlVGQlZUWjBRaXhsUVVGcFFpeFRRVUZWWml4SFFVTnVRemR6UWl4TFFVRkxlWFJDTEZWQlFWbGFMRWRCUTJwQ04zTkNMRXRCUVVzcmRFSXNWVUZCVlM5MFFpeExRVUZMZVhSQ0xGZEJRV0VzU1VGSmVrTnlkRUlzUlVGQlRVd3NWVUZCVldkMVFpeFZRVUZaTEZOQlFWVlFMRWRCUTJ4RExFbEJRVWxSTEVWQlFXTm9kVUlzUzBGQlMzbDBRaXhWUVVOMlFucDBRaXhMUVVGTGVYUkNMRlZCUVZsRUxFVkJhRVZ5UWl4VFFVRnRRbE1zUlVGQlMwTXNSVUZCVlVNc1JVRkJTME1zUlVGQlZYSlJMRWRCUXpkRExFbEJRVXNzU1VGQlNTOVRMRVZCUVVrc1JVRkJSMEVzUlVGQlNTdFRMRWxCUVU4dlV5eEZRVU4yUW0xcVFpeEZRVUZKYm1wQ0xFVkJRVWx2YWtJc1IwRkJXVWdzUlVGQlNXcHFRaXhGUVd0RldpeEhRV3BGV21scVFpeEZRVUZKYW1wQ0xFVkJhVVZSTEZGQmFrVkthMnBDTEVWQlNHaENMRU5CYjBWamJIVkNMRXRCUVUwc1JVRkJSMEVzUzBGQlRXZDFRaXhGUVVoaWFIVkNMRXRCUVVzd2RFSXNUMEZEU2pGMFFpeExRVUZMYzBvc1VVRkRkVUl3YTBJc1JVRkJZeXhKUVVrelJHcDNRaXhGUVVGUFJDeFJRVUZWYzBNc1IwRkZaaXhKUVVGSmFYVkNMRWRCUVVjc1EwRkJReXhUUVVGVGRuWkNMRVZCUVZGbUxFVkJRVTlFTEVkQlEyeERMR0ZCUTBGRExFVkJRVTlFTEZGQlFWVXNVMEZEWWxFc1JVRkJVMmxHTEVWQlFWVkRMRVZCUVhGQ2IwVXNSMEZETlVNc1NVRkJTWFpJTEVWQlFVOTJRaXhGUVVGUkxGVkJSV1ozZGtJc1JVRkJXU3hUUVVGVk0zVkNMRWRCUTNSQ0xFOUJRVTlCTEVWQlFWRTRaQ3hMUVVGTExGTkJRVk00VVN4SFFVTjZRaXhQUVVGUFF5eEZRVUZMUkN4RlFVRlBOWFZDTEUxQlNUTkNMRk5CUVZNMmRVSXNSVUZCU3k5MVFpeEZRVUZWYTBvc1IwRkRjRUlzU1VGQlNUZEVMRVZCUVdWMFFpeEZRVUZ2UWk5RUxFZEJSWFpETEVkQlFVbHhSaXhoUVVGM1FuaEhMRVZCUTNoQ0xFOUJRVTluZDBJc1JVRkJWWGh3UWl4SFFVZHFRaXhIUVVGcFFpeFJRVVJxUW5KR0xFVkJRVmRaTEVWQlFVdG5jVUlzVVVGQlVUVnhRaXhKUVVWd1FpeFBRVUZQYlVrc1JVRkJZU3h2UkVGQmMwUjJTQ3hGUVVGTGFVY3NXVUZCV1RkSExFbEJSMjVITEVsQlFVbERMRVZCUVUwc1NVRkJTWEJDTEVWQlFWRnBSaXhSUVVGQlFTeEpRVU5zUW05R0xFZEJRMEZxU2l4RlFVRkpaMFlzWlVGQlpXbEZMRVZCUVZFc1IwRkpMMElzU1VGR1FTeEpRVUZKYVdVc1JVRkJWV3h1UWl4RlFVRkpNbVlzVTBGRFpIUk9MRVZCUVZOeVV5eEZRVUZKYlVVc1VVRkRVamxGTEVWQlFVa3NSVUZCUjJkbUxFVkJRVTEwWlN4RlFVRlRUQ3hQUVVGUlRDeEZRVUZKWjJZc1NVRkJUMmhtTEVWQlFVY3NRMEZEYWtRc1NVRkJTVGhxUWl4RlFVRk5jR3BDTEVWQlFWTldMRk5CUVVGQkxFbEJSV1k0YWtJc1IwRkJkVUk1YWtJc1MwRkJTMVVzU1VGSmFFTnVRaXhGUVVGUmFXNUNMRXRCUVVzeFF5eEhRVUZMTTJVc1RVRkJUVEJwUWl4RlFVRlROMVVzVDBGQlFVRXNSVUZCYlVKeVV5eEZRVUZMTEUxQlJUZEVMRTlCUVU5QkxFVkJSMWh3UWl4RlFVRlJhM2RDTEV0QlFVOHNVMEZCVlM5MVFpeEhRVU55UWl4UFFVRlBLM1ZDTEVWQlFVc3ZkVUlzVDBGQlFVRXNTVUZIYUVKdVFpeEZRVUZSZVVJc1ZVRkJWWGwxUWl4TFFVRlBMRmRCUTNKQ0xFOUJRVTlCTEVWQlFVdDRkVUlzVlVGQlFVRXNUVUZMWkN4RFFVRkRjVVFzVTBGQlV5eExRVUZMYjNKQ0xFZEJRVWNzUTBGQlF5eFRRVUZUTTNaQ0xFVkJRVkZtTEVWQlFVOUVMRWRCUXpkRExHRkJRMEZETEVWQlFVOUVMRkZCUVZVc1UwRkJVMUVzUlVGRFFYRktMRVZCUTBGRExFVkJRMEZ3UlN4RlFVTkJSQ3hGUVVOQlJTeEhRVU14UWl4SlFVRkpiVW9zUlVGQldYUlBMRVZCUVZGMVR5eFhRVU53UW5oTkxFVkJRVTkyUWl4RlFVRlJMRlZCUTJZclNTeEZRVUZYZUVnc1JVRkJTM2RJTEZOQlJYQkNMRk5CUVZNMmJVSXNSVUZCYzBKcWRrSXNSVUZCVlhkQ0xFVkJRVWt3ZEVJc1JVRkJZME1zUjBGRGRrUTFkVUlzUzBGQlN6aG5RaXhoUVVGaGNtaENMRWRCUTJ4Q0xFbEJRVWx2VUN4RlFVRlRha01zU1VGRFlqVk5MRXRCUVVzMmRVSXNTVUZCYVVJc1QwRkJXR2huUWl4RlFVRnJRalZPTEVWQlFVdGFMRVZCUVV0NVR5eFhRVUZYUkN4RlFVRlJOVTRzVVVGQlFVRXNTVUZEZEVRd2RFSXNTVUZEUVVFc1JVRkJaWEozUWl4RlFVRlJaMGdzVVVGQlVYRndRaXhKUVVOc1FqRmpMRFJDUVVFMFFtcFRMRTFCUlRkRFFTeExRVUZMT0hWQ0xHTkJRV2RDU0N4RlFVTnlRak4xUWl4TFFVRkxLM1ZDTEc5Q1FVRnpRaXhMUVVWMlFpOTFRaXhMUVVGTFozWkNMRmxCUkU1S0xFbEJRVlZ5Y2tJc1JVRkRWV2RZTEUxQlFVMTJZU3hMUVVGTGMwb3NVMEZEWWl4SlFVRldjMnhDTEVWQlExa3NWVUZCUVN4RlFVbDJRalYxUWl4TFFVRkxNR1VzVTBGQlUzUlFMSEZDUVVOa2NGQXNTMEZCUzNWb1FpeFpRVUZCUVN4SFFVRnRRaXhIUVRCR05VSXNVMEZCVXpCT0xFVkJRVlZETEVWQlFXVllMRWRCUXpGQ2RuVkNMRXRCUVV0cFZDeGpRVU5NYzJJc1JVRkJUWHBOTEZOQlFWTnZUaXhIUVVWbVdDeEZRVUZOTVhGQ0xGRkJRVkZ4Y2tJc1IwRkpkRUlzVTBGQlUyaFhMRVZCUVU5NldpeEZRVUZWZDBJc1JVRkJTVEIwUWl4RlFVRmpReXhIUVVONFF5eE5RVUZyUWl4dFFrRkJVRE4wUWl4RlFVTkJNa2NzUlVGQllTeG5RMEZCYTBOMlNDeEZRVUZMYVVjc1dVRkJXWEpHTEVsQlJTOUVMRWxCUVVsNWRFSXNSVUZCYzBKcWRrSXNSVUZCVlhkQ0xFVkJRVWt3ZEVJc1JVRkJZME1zUjBGRGNrUnFka0lzVlVGSGFrSXNVMEZCVTNkMlFpeEZRVUZUUXl4SFFVTmtjSFpDTEV0QlFVdHZka0lzVFVGQlVVRXNSVUZEWW5CMlFpeExRVUZMZFhWQ0xFMUJRVTFqTEZWQlFWVkVMRWRCUTNKQ0xFbEJRVWt2Y0VJc1JVRkJVVGRDTEVWQlFXOUNlRVFzUzBGQlMzRkdMRTFCUVU5eVJpeExRVUZMZFhWQ0xFMUJRVTAzVUN4VlFVTjJSQ3hQUVVGSmNsb3NZVUZCYVVJdlJ5eEhRVU5xUWpCQ0xFdEJRVXQxZFVJc1RVRkJUVkVzYjBKQlFYTkNNWEJDTEVWQlF6RkNRU3hGUVVGTmJrSXNUVUZCVFc5eVFpeFBRVUZCUVN4UFFVRlZiRzlDTEVWQlFYTkNjRWdzVlVGQlFVRXNTVUZGTlVOemRrSXNSVUZCVTI1M1FpeExRVUZMWVN4TFFVRk5jVVlzUjBGSmJrTXNVMEZCVTJseFFpeEZRVUZUYW5GQ0xFZEJRMlFzU1VGSlNUTkdMRVZCU2tFMmRVSXNSVUZCVVhaMVFpeExRVUZMZFhWQ0xFMUJRMkkxZFVJc1JVRkJWVFIxUWl4RlFVRk5OMUFzVTBGRGFFSjZaQ3hGUVVGTE5FY3NSVUZCVXpCdFFpeEZRVUZOVFN4TFFVTjRRbXgyUWl4RlFVRlJhVTBzWjBKQlIwcHNUU3hQUVVGQlFTeEpRVVJCTm5WQ0xFVkJRVTFUTEZsQlEwRXZkRUlzUlVGQlJ6bENMRXRCUVV0UkxFVkJRVkZwUml4alFVRmxVeXhGUVVGUGNrWXNTMEZCU3poSExFMUJRVTg1Unl4TFFVRkxXaXhSUVVWMlJEWkNMRVZCUVVjNVFpeExRVUZMVVN4RlFVRlJhVVlzWTBGRFFUVkZMRXRCUVV0dmRrSXNUVUZCVHk5d1FpeEZRVUZQY2tZc1MwRkJTemhITEUxQlFVODVSeXhMUVVGTFdpeHRRa0ZGTTBOa0xFbEJRMlpwZDBJc1JVRkJUVkVzYjBKQlFYTkNjblpDTEVkQlJXaERMRWxCUVVselVpeEZRVUZwUW5KU0xFVkJRVkZyVFN4alFVODNRaXhQUVU1QmNFa3NSVUZCVFhWVUxITkNRVU5HZEZnc1JVRkRRWE5TTEU5QlFVRkJMRWxCUTBGMVpDeEZRVUZOVXl4WlFVRTBRaXhsUVVGcFFpeHBRa0ZEYmtSeWRrSXNSMEZGUjBRc1JVRXhTVmhYTEVWQlFVdHpWaXhUUVVGVEsxa3NSVUZCZFVJdmJVSXNSMEZGY2tNcmJVSXNSVUZCYzBJemRVSXNWVUZCVlhOMlFpeFZRVUZaTEZOQlFWTkVMRkZCUVVGQkxFbEJRemREY0haQ0xFdEJRVXRuZGtJc1lVRkRaMElzVDBGQmNrSm9ka0lzUzBGQlMyZDJRaXhoUVVOTVNTeEpRVUZWTjNKQ0xFZEJRMVoyUkN4TFFVRkxaM1pDTEZsQlFWazFkRUlzUzBGQlMyZDFRaXhKUVVrNVFsWXNSVUZCYzBJemRVSXNWVUZCVlhkMlFpeGpRVUZuUWl4VFFVRlRiSEZDTEVkQlNYSkVMRTlCU0hsQ0xFOUJRWEpDY2tZc1MwRkJTMmQyUWl4aFFVTk1hSFpDTEV0QlFVdG5ka0lzV1VGQldUVjBRaXhMUVVGTGFVVXNSMEZGYmtKeVJpeExRVUZMWjNaQ0xHRkJSMmhDVGl4RlFVRnpRak4xUWl4VlFVRlZlV2hDTEUxQlFWRXNZVUZGZUVOclRpeEZRVUZ6UWpOMVFpeFZRVUZWZDNGQ0xHMUNRVUZ4UWl4WFFVTnFSSFp4UWl4TFFVRkxPR2hDTEdOQlFVRkJMRWxCUVZNNWFFSXNTMEZCUzJkMlFpeFpRVUUwUW1oMlFpeExRVUZMWjNaQ0xGbEJRMHhvZGtJc1MwRkJTemgxUWl4blFrRkhlRVJLTEVWQlFYTkNNM1ZDTEZWQlFWVXljVUlzYVVKQlFXMUNMRmRCUXk5RExFOUJRVUVzUjBGSFNtZEZMRVZCUVhOQ00zVkNMRlZCUVZVcmFFSXNVMEZCVnl4VFFVRlRlbU1zUjBGRGFFUnlSaXhMUVVGTE1HVXNVMEZCVTNCaExHbENRVUZwUW1Vc1IwRkRMMEp5Uml4TFFVRkxNR2hDTEZGQlFWVXNUVUZIYmtKblRpeEZRVUZ6UWpOMVFpeFZRVUZWYlVzc2FVSkJRVzFDTEZOQlFWTnpiRUlzUjBGRGVFUXNSMEZCU1VFc1NVRkJWM2gyUWl4TFFVRkxPSFZDTEdOQlFXVXNUMEZCVHpsMVFpeExRVUZMYlVvc1ZVRkRNME51U2l4TFFVRkxiV1lzWjBKQlExUnVaaXhMUVVGTGVYWkNMRzlDUVVORWVuWkNMRXRCUVVzcmRVSXNLMEpCUVN0Q2VuZENMRWRCUTNCRE1FSXNTMEZCU3l0MVFpeHZRa0ZCYjBJM2JVSXNVMEZGZWtKc1NTeExRVUZMT0hWQ0xIbENRVUY1UW5oM1FpeEhRVU01UWpCQ0xFdEJRVXM0ZFVJc1kwRkJZelZ0UWl4WFFVa3pRbmR0UWl4RlFVRnpRak4xUWl4VlFVRlZkWEZDTEZOQlFWY3NVMEZCVlRkSkxFZEJSV3BFTEVsQlFVbHdZeXhGUVVOQmRFY3NSVUZHU21sQ0xFdEJRVXN3YUVJc1VVRkJWVVFzUlVGSFppeEpRVUZKY21sQ0xFVkJRVk54YVVJc1JVRkJUM0pwUWl4UFFWZHdRaXhSUVVGQkxFbEJWa2xaTEV0QlFVczRkVUlzWlVGRFRIcHdRaXhGUVVGUmNrWXNTMEZCU3poMVFpeGpRVU5pTDNaQ0xFVkJRVWtzU1VGRlNuTkhMRVZCUVZFdlJ5eEZRVUZSWjBnc1VVRkJVVzFqTEVWQlFVOHNTVUZETDBJeGFVSXNSVUZCU1N4SFFVZFNhVUlzUzBGQlN5dDFRaXh2UWtGQmMwSXhjRUlzUjBGRmRFSkJMRVZCUVUxcFdTeGhRVU5RTEV0QlFVOTJaU3hGUVVGSlN5eEpRVUZWVEN4RlFVRkhMRU5CUTNCQ0xFbEJRVWwzVGl4RlFVRk5MRU5CUTA0MmFVSXNUVUZCVHl4TFFVTlFMM0JDTEUxQlFVOXZZeXhGUVVGUE1XbENMRWRCUTJRclNDeE5RVUZQTDBnc1JVRkRVRXNzVDBGQlVVRXNSVUZEVW0xMlFpeE5RVUZQZG5WQ0xFMUJSVmh4Uml4RlFVRlJRU3hGUVVGTmJrSXNUVUZCVFdseVFpeFBRVUZCUVN4UFFVRlZMMjVDTEVWQlFYTkNiVVlzVDBGQlFVRXNVVUZCUzI1R0xFbEJTVGRFY0Vnc1MwRkJTMmQyUWl4alFVTk1NM0JDTEVWQlFWRkJMRVZCUTBodVFpeE5RVUZOYkVVc1MwRkJTM1YyUWl4dFFrRkJRVUVzVDBGQlpXNXZRaXhGUVVGelFuQklMRlZCUVVGQkxFbEJSWHBFY1VZc1JVRkJUVzVDTEUxQlFVMHJjVUlzUlVGQlYwRXNUMEZCUVVFc1JVRkJjMEkxY0VJc1JVRkJUM0pHTEU5QlIzaEVNVUlzUlVGQlVYbENMRlZCUVZWdFdpeFBRVUZUTEZOQlFWVnFXU3hGUVVGSk1IUkNMRWRCUTNKRExFOUJRVTk2Vml4RlFVRlBiRm9zUzBGQlRXbENMRVZCUVVrd2RFSXNSVUZCWXl4UFFVY3hRM0ozUWl4RlFVRlJOR0VzVDBGQlV5eFRRVUZWZWxvc1JVRkJWWGRDTEVWQlFVa3dkRUlzUlVGQlkwTXNSMEZEYmtRc1QwRkJUekZXTEVWQlFVOTZXaXhGUVVGVmQwSXNSVUZCU1RCMFFpeEZRVUZqUXl4TlFYbEVOVU1zUTBGQlEzWnlRaXhUUVVGVExFdEJRVXR4YzBJc1IwRkJSeXhEUVVGRExGTkJRVk0xZDBJc1JVRkJVV1lzUlVGQlQwUXNSMEZETjBNc1lVRkRRU3hKUVVOSmNVTXNSVUYxUWxGM2RrSXNSVUZEUVdwa0xFVkJRMEZyWkN4RlFVTkJReXhGUVROQ1VuaDJRaXhGUVVGUGRrSXNSVUZCVVN4VlFVdG1aM2hDTEVWQlFXZENlblpDTEVWQlFVc3dka0lzYlVKQlEzcENMRWRCUVVreGRrSXNSVUZCUzJsRExGRkJRWE5ETEc5Q1FVRnlRakIwUWl4cFFrRkJhME1zUTBGRGVFUXNTVUZCU1VNc1JVRkJjVUkzZUVJc1QwRkJUemg0UWl4aFFVTTFRa01zUlVGQmEwSTFkRUlzVVVGQlVUWjBRaXhUUVVNNVFtcDNRaXhGUVVGWFJTeEZRVUZMWjNkQ0xHRkJRMFlzVTBGQlUzQjJRaXhIUVVGTlozWkNMRVZCUVcxQ09YZENMRXRCUVV0bUxFOUJRVkUyUXl4SlFVTXZReXhUUVVGVFFTeEhRVUZOYTNaQ0xFVkJRV2RDYUhoQ0xFdEJRVXR2UkN4UlFVRlRkRUlzVTBGRGVFUXNSMEZCTmtJc2JVSkJRV3hDTm5WQ0xFZEJRekJDTEcxQ1FVRXhRa0VzUlVGQlkzaHhRaXhSUVVGM1FpeERRVU53UkN4SlFVRkpaM0pDTEVWQlFXZENVaXhGUVVGamVIRkNMRlZCUTJ4RGJrWXNSVUZCVnl4VFFVRlRZeXhIUVVOb1FuRjJRaXhGUVVGak4xTXNTMEZCUzNoakxGTkJUM1pDWkN4RlFVeHZReXh2UWtGQmNrSTJka0lzYlVKQlExY3NiMEpCUVZnM2VFSXNVMEZEVUVFc1QwRkJUMjk1UWl4WlFVTk9jSGxDTEU5QlFVOXZlVUlzVlVGQlZVTXNZVUZCWTNKNVFpeFBRVUZQYzNsQ0xGVkJRM2hETEdOQlFXVnFaMElzVTBGQlUydG5RaXhwUWtGRmRrSm1MRVZCUVUxdVppeFRRVUZUYldkQ0xHTkJRV01zVDBGRE4wSnFaU3hGUVVGUExFTkJRVU5yWlN4WlFVRkJRU3hIUVVOU2FFSXNSMEZCUVVFc1JVRkRRVU1zUlVGQlQzSm1MRk5CUVZOdFowSXNZMEZCWXl4UFFVTjZRaXhKUVVGSldDeHBRa0ZCYVVJc1YwRkRNVUpNTEVWQlFVbHJRaXhWUVVGVlF5eFBRVUZQTEU5QlEzSkNiRUlzUjBGQlFVRXNTVUZGUkcxQ0xGRkJRVkZzUWl4RlFVRk5ibVFzUjBGUlZpeFRRVUZyUW5wU0xFZEJRM0pDTEVsQlFVbDBReXhGUVVGSkxFbEJRVWx4ZUVJc2FVSkJRV2xDTEZkQlEzcENjbmhDTEVWQlFVVnhlVUlzWVVGRFJpOTJRaXhOUVVWS2RFTXNSVUZCUlc5NVFpeFJRVUZSY0VJc1JVRkJTMnBrTEVkQlZsaHJaQ3hKUVVOS1FTeEhRVUZCUVN4RlFVTkJReXhGUVVGTFowSXNWVUZCVlVNc1QwRkJUeXhWUVZsRExHOUNRVUZxUWxvc1lVRkRTQ3hUUVVGVmFuWkNMRWRCUTJwQ2FYWkNMR0ZCUVdGcWRrSXNTVUZGV1N4dlFrRkJaalpDTEZkQlEwZ3NVMEZCVlRkQ0xFZEJRMnBDTmtJc1YwRkJWemRDTEVWQlFVa3NTVUZ5UkVFc1YwRkRia0lzVFVGQlRTeEpRVUZKYWtNc1RVRkJUU3h0UlVGNVJIQkNha0lzUlVGQlQwUXNVVUZCVlhGRExFZEJSV1lzUTBGQlEydEVMRk5CUVZNc1MwRkJTelIwUWl4SFFVRkhMRU5CUVVNc1UwRkJVMjU1UWl4RlFVRlJaaXhGUVVGUFJDeEhRVU0zUXl4aFFVTkJReXhGUVVGUFJDeFJRVU5JTEZOQlFWTlJMRVZCUVZOeFNpeEZRVUZqYkVVc1IwRkRjRU1zU1VGQlNTdG1MRVZCUVc5Q2JHeENMRVZCUVZGcmJFSXNhMEpCUjJoRExGTkJRVk13VGl4RlFVRnZRbnBRTEVkQlEzcENlbWhDTEV0QlFVczRaMElzWVVGQllWY3NSMEZJV0ROcFFpeEZRVUZSTEZWQlMyUTJWeXhUUVVGVGRXSXNSVUZCY1VKMmNFSXNSMEZGYmtOMWNFSXNSVUZCYjBKdWVFSXNWVUZCVlc5NFFpeHBRa0ZCYlVJc1UwRkJWWEp4UWl4RlFVRlBjM0ZDTEVkQlJ6bEVMRTlCUmtGd2VFSXNTMEZCU3pCb1FpeFJRVUZSTldFc1IwRkJVM054UWl4SlFVTkJjSGhDTEV0QlFVczJhRUlzWjBKQlEwNDNhRUlzUzBGQlMzTktMRlZCUTNSQ2RFb3NTMEZCU3pob1FpeFRRVUZUT1doQ0xFdEJRVXN3YUVJc1ZVRkJRVUVzU1VGTk0wSjNVQ3hGUVVGdlFtNTRRaXhWUVVGVk1tWXNhMEpCUVc5Q0xGTkJRVlZ5WVN4RlFVRlBlVUlzUjBGREwwUXNTVUZCU1hCSUxFVkJRVTBzU1VGQlNUaHFRaXhGUVVka0xFOUJSa0U1YWtJc1JVRkJTVEpGTEZWQlFWa3NVMEZEYUVJelJTeEZRVUZKTW5oQ0xHMUNRVUZ4UW1oelFpeEZRVU5zUW5KR0xFdEJRVXR0ZUVJc2FVSkJRV2xDY25GQ0xFVkJRVTl3U0N4SlFVVjRRM2Q0UWl4RlFVRnZRbTU0UWl4VlFVRlZObVlzYVVKQlFXMUNMRk5CUVZWNFVpeEZRVUZSZEVnc1IwRkRMMFFzU1VGQlNYQklMRVZCUVUwc1NVRkJTVGhxUWl4RlFVZGtMRTlCUmtFNWFrSXNSVUZCU1RKRkxGVkJRVmtzVTBGRGFFSXpSU3hGUVVGSk1uaENMRzFDUVVGeFFtcHFRaXhGUVVOc1FuQlBMRXRCUVV0dGVFSXNhVUpCUVdsQ2NuRkNMRVZCUVU5d1NDeEpRVWQ0UTNCQ0xFVkJRVkZuZWtJc1QwRkJVeXhUUVVGVk4zaENMRWRCUlhaQ0xFOUJSRUZuUlN4RlFVRk5kMVVzVjBGQlZ5eFpRVUZoTEdOQlEzWkNMRWxCUVVscFdpeEZRVUZ2UW5wNFFpeEhRVUZWUlN4WFFVYzNRM0pDTEVWQlFWRjVRaXhWUVVGVmRYaENMRTlCUVZNc1YwRkRka0lzVDBGQlQyaDZRaXhGUVVGUlozcENMRTlCUVU5MGVFSXNVMEZKZUVJc1EwRkJRM0ZFTEZOQlFWTXNTMEZCUzJ0MVFpeEhRVUZITEVOQlFVTXNVMEZCVTNwNVFpeEZRVUZSWml4RlFVRlBSQ3hIUVVNM1F5eGhRVU5CUXl4RlFVRlBSQ3hSUVVOUUxGTkJRVk5STEVWQlFWTnhTaXhGUVVGalF5eEhRVU5vUXl4SlFVRkpka2dzUlVGQlQzWkNMRVZCUVZFc1ZVRkRablZpTEVWQlFXRjJZaXhGUVVGUkxGbEJRVmwxWWl4WFFVTnFRMFFzUlVGQmFVSjBZaXhGUVVGUkxGbEJRVmx6WWl4bFFVTnlRM0JSTEVWQlFWVXpTaXhGUVVGTE1rb3NVVUZEWm5kdVFpeEZRVUZsTEVkQlIyNUNMRk5CUVZOc2VVSXNSVUZCYVVKdGFVSXNSMEZEZEVKNmFFSXNTMEZCU3poblFpeGhRVUZoVnl4SFFVTnNRbnBvUWl4TFFVRkxlWGhDTEZOQlFWY3NSVUZEYUVKNmVFSXNTMEZCU3pCNFFpeFRRVUZCUVN4RlFVTk1NWGhDTEV0QlFVc3llRUlzWTBGQlFVRXNSVUZwU0ZRc1UwRkJVME1zUlVGQlMyNTVRaXhGUVVGVmIzbENMRWRCUTNCQ0xFbEJRV1VzUlVGQlZrRXNTMEZCYVVKQkxFZEJRVmRCTEVWQlFWVXNSVUZEZGtNc1QwRkJUMnB4UWl4RlFVRmhMR3RGUVVWNFFpeEpRVUZKYkVrc1JVRkJUU3hKUVVGSlNpeEZRVUZwUWtjc1IwRkRNMEpGTEVWQlFWVkVMRVZCUVVsRExGVkJSMnhDTEU5QlJrRkVMRVZCUVVsRkxGZEJRVmRwZVVJc1IwRkRabTU1UWl4RlFVRkpTU3hQUVVOSFNDeEZRWFpJV0ZVc1JVRkJTM05XTEZOQlFWTnlWeXhGUVVGclFuRkpMRWRCUldoRGNra3NSVUZCYVVKVExGVkJRVlY1YUVJc1RVRkJVU3hYUVVNdlFpeEhRVUZMZUdoQ0xFdEJRVXN5ZUVJc1lVRkhWaXhIUVVGelFpeEpRVUZzUWpONFFpeExRVUZMZVhoQ0xGTkJRVlFzUTBGSlFYcDRRaXhMUVVGTGRXaENMRmxCUVVGQkxFZEJRVzFDTEVkQlEzaENMRWxCUVVsMVVTeEZRVUZyUWpsdVFpeEZRVUZSYUVzc1MwRkJTekJvUWl4VlFVTTVRakZvUWl4TFFVRkxiV1lzWlVGRFRqSlRMRWRCUTBFNWVFSXNTMEZCUzNsNFFpeFRRVUZYZW5oQ0xFdEJRVXNyZUVJc2RVSkJRM0pDTDNoQ0xFdEJRVXMyUkN4UlFVRlJOMFFzUzBGQlMyZDVRaXhsUVVGbGFIbENMRXRCUVV0YUxHZENRVkowUTFrc1MwRkJTemhvUWl4VFFVRlRMRXRCV1hSQ2VHbENMRVZCUVdsQ1V5eFZRVUZWUkN4TFFVRlBMRmRCUXpsQ1JTeExRVUZMTW5oQ0xHTkJRVUZCTEVWQlEwd3plRUlzUzBGQlMzZG9RaXhUUVVkVWJHbENMRVZCUVdsQ1V5eFZRVUZWUml4VlFVRlpMRmRCUTI1RFJ5eExRVUZMTUhoQ0xGTkJRVUZCTEVkQlIxUndlVUlzUlVGQmFVSlRMRlZCUVZVNGVFSXNVVUZCVlN4WFFVTnFReXhQUVVGUE4zaENMRXRCUVV0NWVFSXNWVUZIYUVKdWVVSXNSVUZCYVVKVExGVkJRVlZJTEZkQlFXRXNVMEZCVlhGNVFpeEhRVU01UTJwNVFpeExRVUZMZVhoQ0xGTkJRVmRSTEVkQlIzQkNNM2xDTEVWQlFXbENVeXhWUVVGVk1tWXNhMEpCUVc5Q0xGTkJRVlZ5WVN4SFFVVnlSQ3hQUVVSQmNrWXNTMEZCUzJ0NVFpeGpRVUZqTjNOQ0xFZEJRMlp5Uml4TFFVRkxiWGxDTEdWQlFXbENibmxDTEV0QlFVczJlRUlzV1VGRE0wSTNlRUlzUzBGQlN6Qm9RaXhSUVVGUmRHbENMRTlCUVZOWkxFdEJRVXMyZUVJc1ZVRkRTaXhKUVVGdVFqZDRRaXhMUVVGTE5uaENMRmRCUVcxQ04zaENMRXRCUVVzd2VFSXNVVUZETjBJeGVFSXNTMEZCU3pob1FpeFRRVUZUT1doQ0xFdEJRVXN3YUVJc1VVRkJVU3hKUVVVelFqRm9RaXhMUVVGTE9HaENMRk5CUVZNNWFFSXNTMEZCU3pCb1FpeFZRVUZCUVN4SlFVOHZRbkJwUWl4RlFVRnBRbE1zVlVGQlZUWm1MR2xDUVVGdFFpeFRRVUZWZUZJc1IwRkZjRVFzVDBGRVFYQlBMRXRCUVV0dmVVSXNZVUZCWVdoclFpeEhRVU5ZY0U4c1MwRkJTM0Y1UWl4cFFrRkhhRUl2ZVVJc1JVRkJhVUpUTEZWQlFWVjFaaXhyUWtGQmIwSXNWMEZETTBNc1QwRkJTWFJtTEV0QlFVc3dhRUlzYlVKQlFXMUNjR3BDTEVkQlFUSkNMRTFCUVdoQ01FSXNTMEZCU3pCb1FpeFJRVU5xUXpGb1FpeExRVUZMYlVvc1YwRkZhRUp1U2l4TFFVRkxiM2xDTEdGQlFXRmFMRWRCUTFoNGVFSXNTMEZCUzNGNVFpeHJRa0ZIYUVJdmVVSXNSVUZCYVVKVExGVkJRVlZ6ZVVJc1kwRkJaMElzVjBGRGRrTXNSMEZCU1hKNVFpeExRVUZMTm5oQ0xGVkJRVmszZUVJc1MwRkJTeXQ0UWl4elFrRkJkVUlzUTBGRk4wTXNTVUZFUVN4SlFVRkpiREJDTEVWQlFVa3NTVUZCU1hWakxFVkJRMGh5WWl4RlFVRkphVUlzUzBGQlMxb3NVMEZCVlV3c1JVRkJTV2xDTEV0QlFVc3dhRUlzVVVGQlVYUnBRaXhUUVVGVlRDeEZRVU12UTJsQ0xFdEJRVXN3YUVJc1VVRkJVVE5wUWl4TFFVRlBlWGxDTEVkQlEzQkNNM3BDTEVWQlFVVjFSQ3hMUVVGTGNFSXNTMEZCU3pCb1FpeFJRVUZSTTJsQ0xFbEJVVFZDTEU5QlRFbHNRaXhGUVVGRmRVSXNUMEZCVXl4RlFVTllXU3hMUVVGTE5rUXNVVUZCVVdoSExFZEJSV0p0UXl4TFFVRkxiVW9zVjBGQlFVRXNSVUZKWWl4UFFVRkJMRWRCUjBvM1NpeEZRVUZwUWxNc1ZVRkJWVzk1UWl4WFFVRmhMRmRCUTNCRExFOUJRVTl1ZVVJc1MwRkJTelpvUWl4blFrRkhhRUoyYVVJc1JVRkJhVUpUTEZWQlFWVjFlVUlzVlVGQldTeFhRVU51UXl4UFFVRlBkSGxDTEV0QlFVc3dhRUlzVVVGQlVYUnBRaXhQUVVGVFdTeExRVUZMV2l4VlFVZDBRMFVzUlVGQmFVSlRMRlZCUVZWeGVVSXNZVUZCWlN4VFFVRlZhR3RDTEVkQlEyaEVjRThzUzBGQlN6Qm9RaXhSUVVGUmRHZENMRXRCUVV0blRpeEpRVWQwUWpsUExFVkJRV2xDVXl4VlFVRlZiWGxDTEdOQlFXZENMRk5CUVZVM2MwSXNSMEZEYWtSeVJpeExRVUZMTUdoQ0xGRkJRVkV4YUVJc1MwRkJTelpvUWl4clFrRkJiMEo0WXl4SFFVY3hReTlHTEVWQlFXbENVeXhWUVVGVlozbENMRzlDUVVGelFpeFhRVU0zUXl4UFFVRlBMM2hDTEV0QlFVdGFMRk5CUVZkWkxFdEJRVXR6ZVVJc1lVRkhhRU5vZWtJc1JVRkJhVUpUTEZWQlFWVnBlVUlzWlVGQmFVSXNVMEZCVlVNc1IwRkRiRVFzU1VGQlNUVnlRaXhGUVVGVkxIRkRRVU5PY2tjc1MwRkJTM2w0UWl4VFFVRlhMRFJDUVVFNFFsRXNSVUZCVVN4VFFVTTVSQ3hQUVVGUExFbEJRVWsxV0N4RlFVRlhhRlVzU1VGSE1VSXZSeXhGUVVGcFFsTXNWVUZCVlhkeFFpeHRRa0ZCY1VJc1YwRkROVU4yY1VJc1MwRkJTelpFTEZGQlFWRTNSQ3hMUVVGTFozbENMR1ZCUVdVc1MwRmpja014ZWtJc1JVRkJVWE42UWl4TFFVRlBMRk5CUVZWdWVVSXNSVUZCVlc5NVFpeEhRVU12UWl4UFFVRlBSQ3hGUVVGTGJubENMRVZCUVZWdmVVSXNTVUZITVVKMmVrSXNSVUZCVVhsQ0xGVkJRVlUyZUVJc1MwRkJUeXhUUVVGVlF5eEhRVU12UWl4UFFVRlBSQ3hGUVVGTE5YaENMRXRCUVUwMmVFSXNTVUZIZEVKMmVrSXNSVUZCVVdsQ0xHdENRVUZ2UWtRc1NVRkhNVUlzUTBGQlF6WlpMRmRCUVZjc1IwRkJSemxWTEZOQlFWTXNTMEZCUzJ0MlFpeEhRVUZITEVOQlFVTXNVMEZCVTNwNlFpeEZRVUZSWml4RlFVRlBSQ3hIUVVNelJDeGhRVU5CUXl4RlFVRlBSQ3hSUVVGVkxGTkJRVk5STEVkQlF6RkNMRk5CUVZOcmJFSXNSVUZCYTBJM2FrSXNVVUZCUVVFc1NVRkRia0pCTEVkQlEwRkJMRVZCUVZWQkxFVkJRVkZ2Uml4VlFVTnNRaTlGTEV0QlFVdHhSU3hWUVVGWk1VVXNSVUZCVVRCRkxGVkJRM3BDY2tVc1MwRkJTM0Y0UWl4dFFrRkJjVUl4ZUVJc1JVRkJVVEJzUWl4blFrRkROVUl4YkVJc1JVRkJVVEJQTEhGQ1FVRkJRU3hKUVVka2NrOHNTMEZCUzNGRkxGVkJRVmtzUlVGRGFrSnlSU3hMUVVGTGNYaENMSGRDUVVGQlFTeEhRVWxpTjA0c1JVRkJhMEo2YWtJc1ZVRkJWWE5QTEdOQlFXZENMRmRCUTNoRExFOUJRVTl5VHl4TFFVRkxjWGhDTEc5Q1FVZG9RaXhKUVVGSmFITkNMRVZCUVZGdFpTeEZRVUZyUW5wcVFpeFZRVUZWYzBZc1RVRkJVU3hYUVVNMVF5eEpRVUZMY2tZc1MwRkJTMmxVTEdOQlEwNHNUVUZCVFN4SlFVRkplazBzVlVGQlZTdzJSa0ZGZUVJc1QwRkJUM2hITEV0QlFVdHhUeXhwUWtGSFdrUXNSVUZCVTI5V0xFVkJRV3RDZW1wQ0xGVkJRVlZ0VkN4TlFVTjZRM05STEVWQlFXdENlbXBDTEZWQlFWVnhUeXhQUVVGVExGZEJRMnBETEVsQlFVdHdUeXhMUVVGTGMyUXNZVUZEVGl4TlFVRk5MRWxCUVVrNVZ5eFZRVUZWTERKR1FVVjRRaXhQUVVGUGVFY3NTMEZCUzNGUExHbENRVWRhTkVVc1JVRkJZM1ZSTEVWQlFXdENlbXBDTEZWQlFWVnJWQ3haUVVGakxGZEJRM2hFTEU5QlFYVkRMRWxCUVdRc1UwRkJha0pxVkN4TFFVRkxjVVVzV1VGSFltbGFMRVZCUVdGclJ5eEZRVUZyUW5wcVFpeFZRVUZWZFdRc1YwRkJZU3hYUVVOMFJDeFBRVUYxUXl4SlFVRmtMRk5CUVdwQ2RHUXNTMEZCUzNGRkxGbEJSMkp2Uml4RlFVRlpLMW9zUlVGQmEwSjZha0lzVlVGQlZUQktMRlZCUVZrc1YwRkRjRVFzVDBGQmRVTXNTVUZCWkN4VFFVRnFRbnBLTEV0QlFVdHhSU3haUVVkaWMyMUNMRVZCUVdGdVNDeEZRVUZyUW5wcVFpeFZRVUZWTkhGQ0xGZEJRV0VzVjBGRGRFUXNUMEZCZFVNc1NVRkJaQ3hUUVVGcVFqTnhRaXhMUVVGTGNVVXNXVUZIYWtKdFppeEZRVUZyUW5wcVFpeFZRVUZWTmtvc1dVRkJZeXhYUVVOMFF5eFBRVUZ6UXl4SlFVRmlMRkZCUVdwQ05Vb3NTMEZCUzNGRkxGbEJSMnBDTDBZc1JVRkJVWGxDTEZWQlFWVjVlVUlzWTBGQlowSXNWMEZET1VJc1QwRkJiME1zVVVGQldDeE5RVUZxUW5oNVFpeExRVUZMY1VVc1dVRkhha0l2Uml4RlFVRlJlVUlzVlVGQlZUSktMR0ZCUVdVc1YwRkROMElzVDBGQlR6RktMRXRCUVVzclJTeFZRVUZWZVhSQ0xHbENRVWN4UW13d1FpeEZRVUZSZVVJc1ZVRkJWVFpLTEZsQlFXTXNWMEZETlVJc1QwRkJaMFFzU1VGQllpeFJRVUV6UWpWS0xFdEJRVXNyUlN4VlFVRlZWaXhaUVVjelFpOUdMRVZCUVZGNVFpeFZRVUZWTUVvc1ZVRkJXU3hYUVVNeFFpeFBRVUZQUVN4RlFVRlZkRXNzUzBGQlMyRXNTMEZCU3l0RkxGbEJSeTlDZWtjc1JVRkJVWGxDTEZWQlFWVjFaQ3hYUVVGaExGZEJRek5DTEU5QlFVOUJMRVZCUVZkdVpTeExRVUZMWVN4TFFVRkxLMFVzV1VGSGFFTjZSeXhGUVVGUmVVSXNWVUZCVld0VUxGbEJRV01zVjBGRE5VSXNUMEZCVDBFc1JVRkJXVGxVTEV0QlFVdGhMRXRCUVVzclJTeFpRVWRxUTNwSExFVkJRVkY1UWl4VlFVRlZOSEZDTEZkQlFXRXNWMEZETTBJc1QwRkJUMEVzUlVGQlYzaHlRaXhMUVVGTFlTeExRVUZMSzBVc1dVRkhhRU42Unl4RlFVRlJlVUlzVlVGQlZYTkdMRTFCUVZFc1YwRkRkRUlzVDBGQlQwRXNSVUZCVFd4SExFdEJRVXRoTEV0QlFVc3JSU3haUVVjelFucEhMRVZCUVZGNVFpeFZRVUZWY1U4c1QwRkJVeXhYUVVOMlFpeEpRVUZKTjBvc1JVRkJVM1pGTEV0QlFVc3JSU3hWUVVWc1FpeFBRVVJCVWl4RlFVRlBhMHNzTmtKQlEwRk1MRVZCUVU5cVVDeExRVUZMYjBZc1NVRkhka0pxUnl4RlFVRlJlVUlzVlVGQlZXZGFMRTlCUVZNc1YwRkRka0lzVDBGQlR5OVpMRXRCUVV0eFR5eHBRa0ZIYUVJdlVDeEZRVUZSZVVJc1ZVRkJWVFpaTEZGQlFWVXNWMEZGZUVJc1QwRkVRVFZaTEV0QlFVdDVUeXcyUWtGRFJYcFBMRXRCUVV0eFR5eHBRa0ZIYUVJdlVDeEZRVUZSYTJ4Q0xHdENRVUZ2UWtFc1NVRkhNVUlzU1VGQlNXbFFMRWRCUVVjc1EwRkJReXhUUVVGVE0zcENMRVZCUVZGbUxFVkJRVTlFTEVkQlEyeERMR0ZCUTBGRExFVkJRVTlFTEZGQlFWVXNVMEZCVTFFc1JVRkJVMmxHTEVkQlEyNURMRWxCUVVsc1JDeEZRVUZQZGtJc1JVRkJVU3hWUVVObVowb3NSVUZCVjNwSUxFVkJRVXQ1U0N4VFFVTm9RbWxFTEVWQlFWY3hTeXhGUVVGTE1Fc3NVMEV3UTJoQ01tNUNMRVZCUVZVc1IwRkJSekZYTEdWQmMwTnFRaXhQUVRsRlFTeFRRVUUyUWpsWExFVkJRVXR1UWl4SFFVTTVRaXhIUVVGSlowZ3NSVUZCVXpkR0xFZEJRVTBzUTBGRFppeEhRVUZKUVN4aFFVRmxOVWNzUlVGQlV5eFBRVUZQTkVjc1JVRkRia01zU1VGQlNYVlpMRVZCTkVKYUxGTkJRV2xDZGxrc1IwRkRZaXhKUVVOSkxFOUJUbElzVTBGQmJVSkJMRWRCUTJZc1QwRkJUMEVzUlVGQlNYVlpMRXRCUkdZc1EwRk5lVUoyV1N4SFFVTnVRaXhOUVVGUGNrZ3NSMEZGVEN4UFFVUkJhVXNzUlVGQlUycExMRVZCUVVsQkxFVkJRMDVwU3l4SFFVeG1MRU5CTlVJeVFqVkRMRWRCUTI1Q0xFZEJRVWwxV1N4SlFVRlRNMVlzUlVGQlZTeERRVU5tTDBRc1IwRkJVMEVzUlVGQlVUWklMR1ZCUTNKQ0xFbEJRVWxzVFN4RlFVRk5jRUlzUlVGQlVYbFVMRTlCUVU4d1RDeEZRVUZMTldZc1IwRkZPVUlzVDBGRVNXdEhMRWRCUVZOQkxFVkJRVkU0U0N4alFVTmtiazBzUlVGRFNpeEhRVUZ2UWl4dFFrRkJWQ3RrTEVWQlEyUXNUMEVyUWxvc1UwRkJPRUoyV1N4SFFVTXhRaXhKUVVOSkxFOUJRVTkzZEVJc1JVRkJVWFo2UWl4TFFVRkxLMFlzUlVGQlN5eGhRVU16UWl4TlFVRlBja2dzUjBGRFRDeFBRVUZCTEVkQlNsSXNRMEV2UW5GRGNVZ3NTVUZEYWtKNFJpeEZRVUZOTEVsQlFVbHdRaXhGUVVGUmFVWXNSMEZEZEVJeVFpeEZRVUZKYUVJc1RVRkRRWGhGTEVWQlFVa3laaXhUUVVOS00yWXNSVUZCU1cxRkxHRkJRVUZCTEVWQlJVcHVSU3hGUVVOQkxFMUJSVWRCTEVkQk9FSjJRaXhUUVVGdlFqWnVRaXhGUVVGSE9Vb3NSVUZCVFRGYUxFZEJRM3BDTEVsQlFVbHdSU3hGUVVGVkxFbEJRVWx5UWl4RlFVRlJhVVlzUjBGRGRFSTNSQ3hGUVVGTlF5eEZRVU5PYjBVc1IwRkJVMEVzUlVGQlVUWklMR1ZCUTNKQ2FrMHNSVUZCVVhsUUxIRkNRVU5LY2t3c1IwRkJVMEVzUlVGQlVUaElMR05CUTNKQ0xFbEJRVWx4WWl4SFFVRkJRU3hGUVVOQmJsQXNSVUZCVXpGWUxFVkJRVXQzU0N4VFFVRlRORllzUjBGQlRYUmxMRXRCUVV0dmIwSXNSVUZSZEVNc1UwRkJhVUpzYVVJc1IwRkRVakZHTEVsQlEweEJMRVZCUVZFeVJTeHBRa0ZCYVVKbExFZEJRM3BDTVVZc1JVRkJWU3hQUVVka0xGTkJRV2RDZVU4c1IwRkRVSHBQTEVsQlEweEJMRVZCUVZGdFowSXNaMEpCUVdkQ01WSXNSVUZCVVRoWkxFZEJRVUZCTEVkQlEyaERkbTVDTEVWQlFWVXNVVUZGWkN4UFFXeENRWFZ1UWl4SFFVRkJRU3hGUVVWSmRtNUNMRWRCUVZkdldTeEpRVUZYYWxFc1NVRkRkRUp1U1N4RlFVRlJiV2RDTEdkQ1FVRm5RaTlJTEVWQlFVOXNZU3hIUVVGQlFTeEhRVUZITEVkQlEyeERPRUlzUlVGQlZTeE5RV05RUkN4RlFURkNXQ3hEUVRWQ09FSjNSaXhGUVVGTGRWa3NSVUZCVFRGYUxFZEJSM0pETEU5QlFVOXRRaXhMUVhsRVZDeERRVUZETjBJc1UwRkJVeXhMUVVGTGMzWkNMRWRCUVVjc1EwRkJReXhUUVVGVE4zcENMRVZCUVZGbUxFVkJRVTlFTEVkQlF6ZERMR0ZCUTBGRExFVkJRVTlFTEZGQlFWVXNVMEZCVTFFc1JVRkJVMmxHTEVWQlFWVkZMRWRCUXpkRExFbEJRVWx3UkN4RlFVRlBka0lzUlVGQlVTeFZRVU5tY1dJc1JVRkJaVGRpTEVWQlFWRTJZaXhoUVVVelFpeFRRVUZUZVZrc1JVRkJZME1zUjBGRGJrSTNlVUlzUzBGQlN6WjVRaXhQUVVGVFFTeEZRVWRzUWtRc1JVRkJZemQ1UWl4VlFVRlZiVXNzYVVKQlFXMUNMRmRCUTNaRE5HOUNMR0ZCUVdFNWVVSXNTMEZCU3paNVFpeFRRVWQwUWl4SlFVRkpSU3hGUVVGaExGTkJRVk14ZEVJc1IwRkJVeXhQUVVGUE1uUkNMRWRCUVU5b2VrSXNUVUZCVFhkWkxGZEJRVmR1VkN4SlFVTTVSREowUWl4RlFVRlJNVEJDTEVWQlFWRXdNRUlzVFVGQlVTeFRRVUZWUXl4RlFVRkpOWFJDTEVkQlEzUkRMRWxCUVVrelJpeEZRVU5CYlhwQ0xFVkJaMEpLTEZsQlFVRXNTVUZtU1hoMFFpeEhRVU5CTTBZc1JVRkJUWEJDTEVWQlFWRm5TQ3hSUVVGUlJDeEhRVU5pYmtJc1RVRkJUVFoxUWl4RlFVRlpMRXRCUVUwc1MwRkJUVVVzVDBGQlFVRXNSMEZEYmtONGRrSXNSVUZCVFRCRkxHZENRVUZyUWpsRExHRkJRV2xDTDBjc1IwRkRla052UWl4RlFVRkpkVVlzWVVGQllVa3NTMEZIY2tJelJpeEZRVUZOTEVsQlFVbHdRaXhGUVVGUmFVWXNSMEZEYkVKemRrSXNSVUZCVXk5MlFpeFhRVUZYTEZkQlFXRndSQ3hGUVVGSk1tWXNZVUZCWjBJMFZDeEhRVU5xUkhoMlFpeEZRVUZOTUVVc1owSkJRMDU2U1N4RlFVRkpkVVlzWVVGQllTeEpRVUZKTW5SQ0xFVkJRV05ETEVsQlJYWkRibnBDTEVWQlFVa3dVQ3h6UWtGRlVqRlFMRVZCUVVrMGJFSXNjMEpCUTBjMWJFSXNSMEV5UWxnc1UwRkJVM2Q2UWl4RlFVRmhOM1JDTEVkQlJXeENMRTlCUkVGNWRFSXNZVUZCWVRsNVFpeExRVUZMTm5sQ0xGRkJRMWg0ZEVJc1JVRkhXQ3hUUVVGVE9IUkNMRVZCUVdFdmEwSXNSMEZGYkVJc1RVRkVRVEJyUWl4aFFVRmhPWGxDTEV0QlFVczJlVUlzVVVGRFducHJRaXhGUVM5Q1ZqbFFMRVZCUVZGNVFpeFZRVUZWYVhwQ0xFMUJRVkVzVTBGQlZVTXNSMEZEYUVNc1QwRkJUMFFzUlVGQlRVTXNSVUZCU1dwNlFpeFBRV2xEY2tJeFFpeEZRVUZSZVVJc1ZVRkJWWEY2UWl4UlFVRlZMRk5CUVZWSUxFVkJRVWsxYzBJc1IwRkZkRU1zU1VGQlNUTkhMRVZCUVV0cFNpeEZRVVJVYzNGQ0xFZEJRVTFCTEVWQlIwNHNTVUZCU1Vrc1JVRkJaMElzU1VGQlNWUXNSVUZCWXpsMlFpeFhRVUZYTEZkQlEzcERjRVFzUlVGQlNTdEtMR0ZCYmtOSExGTkJRVlU1U2l4RlFVRlRNRWNzUlVGQlUzTkRMRWRCUXpORExFbEJRVWxwVHl4RlFVZEpRU3hGUVVabExHbENRVUZhZGxFc1JVRkRTRUVzWVVGQmJVSnlTQ3hOUVVOaWNVZ3NSVUZGUVN4SlFVRkpPRlFzUlVGQllTeDFRa0ZIY2tJc1NVRkJTVUVzUlVGQllUbFVMRWRCUlROQ2FFY3NSVUZCUzI5cFFpd3JRa0ZCSzBJM1RDeEhRVU53UTJwWUxFVkJRVkZ6U3l4clFrRkJhMEl5VFN4SFFVTXhRbXBZTEVWQlFWRnJSU3hSUVVGUksxTXNSMEZGUml4TlFVRldhazhzUjBGRFFVRXNSVUZCVDFRc1UwRm9Ra2tzUTBGdlEwMTRTU3hGUVVGTE1rY3NSVUZCVTNORExFbEJSV2hEYzNGQ0xFbEJXVWdzVDBGV1NYaDJRaXhGUVVGTk1FVXNaMEpCUTA1UkxFVkJRVk16U1N4TFFVRkxlV1FzVVVGRFpDOWtMRVZCUVUxcFNpeEZRVUZQZWtVc1RVRkJUV2QyUWl4RlFVRmpReXhQUVVGQlFTeEZRVU5HUlN4UFFVRkJRU3hKUVVNelFuQjFRaXhoUVVGaGIzVkNMRWxCUldwQ00zcENMRVZCUVUxTkxFdEJRVXRyUlN4TlFVRk5aM1pDTEVWQlFXTkRMRTlCUVVGQkxFVkJRMEZGTEU5QlFVRkJMRWRCUnpWQ00zcENMRXRCUzFRc1EwRkJRekpFTEZOQlFWTXNTMEZCUzJsM1FpeEhRVUZITEVOQlFVTXNVMEZCVTNnd1FpeEZRVUZSWml4RlFVRlBSQ3hIUVVNM1F5eGhRVU5CUXl4RlFVRlBSQ3hSUVVGVkxGTkJRVlZSTEVWQlFWTnpTaXhGUVVGamNFVXNSVUZET1VOdlowSXNSVUZCWlhKblFpeEZRVUZWUlN4SFFVTjZRaXhKUVVGSmNFUXNSVUZCVDNaQ0xFVkJRVkVzVlVGRFpqQklMRVZCUVZreFNDeEZRVUZSTEZsQlFWa3dTQ3hWUVVOb1EyMVFMRVZCUVZjM1Z5eEZRVUZSTEZWQlFWVTJWeXhUUVVNM1FqZE9MRVZCUVZkNlNDeEZRVUZMZVVnc1UwRkRhRUpFTEVWQlFWZDRTQ3hGUVVGTGQwZ3NVMEZEYUVJd2NrSXNSVUZCVHl4SFFVVllMRk5CUVZOcVlpeEZRVUZSZW1Fc1IwRkRZbWxHTEZkQlFWY3NWMEZCVnl4TlFVRk5ha1lzUjBGQlN5eEhRWGREY2tNc1UwRkJVekl4UWl4RlFVRlRReXhGUVVGTk9YcENMRVZCUVZOdlJTeEhRVU0zUWk5RUxFdEJRVXN3ZWtJc1RVRkJVVVFzUlVGRFlucDZRaXhMUVVGTE1HVXNVMEZCVnk5bExFVkJRMmhDU3l4TFFVRkxNbnBDTEZOQlFWYzFka0lzUlVGdlEzQkNMRk5CUVZNMmRrSXNSVUZCYVVJemVVSXNSVUZCU1hSQ0xFVkJRVk52UlN4SFFVTnVReTlFTEV0QlFVczRaMElzWVVGQllUZG1MRVZCUVVsMFFpeEZRVUZUYjBVc1IwRlRia01zVTBGQlV6aDJRaXhGUVVGdlFuaDFRaXhIUVVONlFpeFBRVUZKYlhWQ0xFVkJRVk5OTEZkQlFWZDZkVUlzU1VGRGNFSnlSaXhMUVVGTEszcENMRlZCUVZVdmVrSXNTMEZCU3poSExFOUJRVTlyZEVJc1pVRkJaVE4xUWl4SFFVTnVRMEVzUlVGQlRURkdMRmRCUlZZd1JpeEZRVWRZTEZOQlFWTTBkVUlzUlVGQllUY3dRaXhIUVVOc1Fsa3NTMEZCUzFvc1QwRkJVMEVzUlVGRFpGa3NTMEZCUzB3c1VVRkJWU3hMUVVObVN5eExRVUZMV2l4RlFVRlBMRWRCUVVzc1MwRjBSSEpDYnpCQ0xFVkJRVk42ZWtJc1ZVRkJWVEI2UWl4TFFVRlBMRmRCUTNSQ0xFOUJRVTk2ZWtJc1MwRkJTekI2UWl4UFFVZG9Ra1lzUlVGQlUzcDZRaXhWUVVGVlNpeFJRVUZWTEZkQlEzcENMRTlCUVU5TExFdEJRVXN3WlN4VlFVZG9RamhWTEVWQlFWTjZla0lzVlVGQlZXMHdRaXhUUVVGWExGZEJRekZDTEU5QlFVbHNNRUlzUzBGQlMwd3NWVUZCVlhOVUxHTkJRMUpxVkN4TFFVRkxUQ3hWUVVGVk1FWXNVVUZGYmtKcmRVSXNSMEZIV0VNc1JVRkJVM3A2UWl4VlFVRlZiekJDTEZkQlFXRXNVMEZCVXk5RExFZEJRM0pETEVsQlFVazRReXhGUVVGWGJEQkNMRXRCUVV0ck1FSXNWMEZEYUVKdWQwSXNSVUZCVlM5RUxFdEJRVXN5ZWtJc1kwRkJRVUVzU1VGRFpqVjJRaXhIUVVGMVFrRXNSVUZCVVRaSUxHVkJRMjVETEVsQlFVbHNUU3hGUVVGTmR6QkNMRWxCUVdGWUxFVkJRMnBDZG5wQ0xFdEJRVXR2TUVJc1ZVRkJWVVlzUlVGQlZUbERMRWRCUVdNc1MwRkpOME1zV1VGQlFTeEpRVWhKY25SQ0xFZEJRWFZDUVN4RlFVRlJPRWdzWTBGRGJrTTNUQ3hMUVVGTE1HVXNVMEZCVXpKV0xHMUNRVU5rY2pCQ0xFdEJRVXN3ZWtJc1RVRkJVU3hMUVVOT2FEQkNMRWRCUjFnNGVrSXNSVUZCVTAwc1YwRkJZU3hUUVVGVlVTeEhRVU0xUWl4UFFVRmhMRTFCUVV4QkxFZEJRM05DTEcxQ1FVRm1RU3hGUVVGRlNpeFZRVU5sTEcxQ1FVRnFRa2tzUlVGQlJVZ3NXVUZOY2tKNFpTeEZRVUZUYVdVc1JVRkJhMEpLTEVkQlJUTkNTU3hGUVVGcFFqZDZRaXhWUVVGVmNUQkNMRlZCUVZrc1UwRkJWVVlzUlVGQlZUbERMRWRCUlhaRUxFOUJSRk53ZUVJc1MwRkJTM2w2UWl4UFFVTktkREJDTEV0QlFVc3JNRUlzUlVGQlZVRXNSVUZCVlRsRExFbEJhVUoyUXpaRExFVkJRV0ZzTUVJc1ZVRkJWVzFMTEdsQ1FVRnRRaXhYUVVWMFF5eEpRVVJCTEVsQlFVazJWQ3hGUVVGTkwyUXNTMEZCUzFvc1QwRkRUa3dzUlVGQlNTeEZRVUZIUVN4RlFVRkpaMllzU1VGQlQyaG1MRVZCUVVjc1EwRkRNVUlzU1VGQlNUaE1MRVZCUVU4M1N5eExRVUZMYWtJc1IwRkRXamhNTEdGQlFXZENkazBzUjBGRGFFSjFUU3hGUVVGTE0wTXNWMEZMYWtJMVNpeEZRVUZSYVRKQ0xFMUJRVkVzVjBGRFdpeEpRVUZKZUZjc1JVRkJUV3hpTEZWQlFWVjZSQ3hQUVVOd1FpeEhRVUZKTW1Vc1JVRkJUU3hGUVVGSExFOUJRVTl1Vnl4RlFVTktMSFZFUVVOb1FpeEpRVWxKTkhOQ0xFVkJTa0YyZWtJc1JVRkJTelJDTEZWQlFWVnJZaXhGUVVGTkxFZEJRM3BDTEVkQlFXdENMRzFDUVVGUU9XTXNSVUZEVUN4UFFVRlBNa2NzUlVGQllTeG5RMEZCYTBOMlNDeEZRVUZMYVVjc1dVRkJXWEpHTEVsQlJ6TkZMRWxCUVVsM2VrSXNSMEZCUVVFc1JVRkRVU3hKUVVGU01WY3NSMEZCWVhoRUxFMUJRVTEyVVN4UlFVRlJia2dzVlVGQlZTeExRVVZ5UTJ0aUxFZEJSRUY1Vnl4RlFVRlJNM2hDTEZWQlFWVXNTVUZEVG5wRUxFOUJRMXB4TVVJc1IwRkJRVUVzU1VGRlFVUXNSVUZCVVRONFFpeFZRVU5TYTJJc1MwRkhTaXhKUVVSQkxFbEJRVWxuVnl4RlFVRlpMRWxCUVVsRkxFVkJRV0ZzVnl4SFFVTjRRbWhtTEVWQlFVa3NSVUZCUjBFc1JVRkJTV2RtTEVsQlFVOW9aaXhGUVVGSExFTkJRekZDTEVsQlFVbHRNVUlzUlVGQlYwMHNSVUZCVFhveFFpeEhRVU55UWl4SFFVRkplVEJDTEVWQlFWTk5MRmRCUVZkSkxFZEJRVmNzUTBGREwwSXNTVUZCU1ZFc1JVRkJWMUlzUjBGRFprRXNSVUZCVjBFc1JVRkJVM1l3UWl4WFFVTlljVEJDTEdWQlFXVlZMRTlCUTNKQ0xFTkJRMGdzU1VGQlNUVjJRaXhGUVVGbGRFSXNSVUZCYjBJd2QwSXNSMEZEYmtOd2RrSXNZVUZCZDBKNFJ5eEpRVU40UWpReFFpeEZRVU5KY0haQ0xFVkJRV0ZhTEUxQlFVMHlka0lzUlVGQmNVSXNTMEZCVFN4TFFVRk5MRU5CUTJoRVJTeFZRVUZYUVN4RlFVTllhblJDTEUxQlFVOHZTQ3hSUVVGQlFTeEpRVWwyUW1jeFFpeEZRVUZWYURGQ0xFZEJRVXR0TVVJc1JVRkhia0lzU1VGQlNWTXNSVUZCY1VJc1NVRkJTWEJoTEUxQlFVMTNXaXhGUVVGVk16QkNMRkZCUXpkRExFbEJRVk5NTEVWQlFVa3NSVUZCUjBFc1JVRkJTVFF4UWl4RlFVRnRRbll4UWl4VFFVRlZUQ3hGUVVNM1F6UXhRaXhGUVVGdFFqVXhRaXhIUVVGTFZDeEZRVUZSWjBnc1VVRkJVWGwxUWl4RlFVRlZhREZDTEVsQlFVa3diRUlzVlVGSE1VUXNTVUZCU1cxUkxFVkJRV2RDZERKQ0xFVkJRVkU0WVN4SlFVRkpkV0lzUjBGRE0wSnNXQ3hMUVVGTExGTkJRVk52V0N4SFFVTllMRWxCUVVzc1NVRkJTVGt4UWl4RlFVRkpMRVZCUVVkQkxFVkJRVWs0TVVJc1JVRkJXWG94UWl4VFFVRlZUQ3hGUVVGSExFTkJRM3BETEVsQlFVbHhlVUlzUlVGQllYbEVMRVZCUVZrNU1VSXNSMEZETjBJc1IwRkJTWEY1UWl4RlFVRlhPVlFzWVVGRldDeFBRVVJCZUZZc1JVRkJVMnBMTEVWQlFVbDFla0lzUlVGQlYyeGxMRkZCUTJwQ2NFd3NSVUZEU2l4SlFVRkxjM0JDTEVWQlFWZHVaU3hqUVVWdVFpeFpRVVJCTW1oQ0xFVkJRV014YzBJc1UwRkhiRUl5YzBJc1JVRkJXVGt4UWl4SFFVRkxjWGxDTEVWQlFWY3Zja0lzVVVGRmFFTXhSaXhGUVVGUmFVMHNaVUZGVWpOTExFVkJRVXMwUnl4RlFVRlROVWNzUjBGRFpDeEpRVUZKZGtJc1JVRkJUU3N3UWl4RlFVTktlSHBDTEVWQlFVY3dSaXhYUVVGQlFTeEZRVUZwUW10MVFpeEhRVUZsTlhwQ0xFVkJRVWMwZWtJc1IwRkRlRU0zYWtJc1JVRkJhVUp5VWl4RlFVRlJhMDBzWTBGSE4wSXNUMEZHUVhCSkxFVkJRVTExVkN4elFrRkRSblJZTEVWQlFVdHpVaXhGUVVGblFpeG5Ra0ZCYVVKeVVpeEhRVU51UTBRc1NVRkhXRU1zUlVGQlZXa3hRaXhGUVVGamJGZ3NUMEZCVHl4WFFVTXZRaXhKUVVGSk1GUXNSVUZCWVN4SlFVRkpPWGxDTEVWQlFWRnJiRUlzYTBKQlFXdENiMUlzUjBGREwwTXNUMEY2UzFJc1UwRkJhVUppTEVWQlFWY3pReXhIUVVONFFpeEpRVUZKY25sQ0xFVkJRVWtzUlVGRFNtZG1MRVZCUVUxblZ5eEZRVUZWTXpCQ0xFOUJRMmhDVFN4RlFVRk5MRWxCUVVsd1FpeEZRVUZSYVVZc1IwRnhRblJDTEU5QmNFSkJMRk5CUVZOMWVFSXNTVUZEVEN4SFFVRkpMekZDTEVkQlFVdG5aaXhGUVVGTExFOUJRVTl5WlN4RlFVRkpNbVlzVjBGRGVrSXNTVUZCU1haaExFVkJhRUphTEZOQlFXdERhWGRDTEVkQlF6bENMRWxCUVVscWQwSXNSVUZCWlhSQ0xFVkJRVzlDZFhoQ0xFZEJUM1pETEU5QlRrbHFkMElzU1VGQmFVSnBkMElzUjBGRGFVSXNiVUpCUVROQ1FTeEZRVUZUUXl4bFFVTnBRaXh0UWtGQk1VSkVMRVZCUVZORkxHTkJRMmhDUml4RlFVRlRReXhwUWtGRFZHeDNRaXhGUVVGaGEzWkNMR1ZCUVdWbExFVkJRVk5GTEdkQ1FVVnNRMjUzUWl4RlFWSllMRU5CWjBKdlJHbDJRaXhGUVVGVmFERkNMRTFCUTNSRUxFZEJRVWtyUml4aFFVRjNRbmhITEVkQlEzaENkMGNzUlVGQllXdDNRaXhuUWtGQmFVSXNRMEZET1VJc1NVRkRTV3gzUWl4RlFVRmxkRUlzUlVGRFdITkNMRVZCUVdGdGQwSXNaVUZCWldRc1YwRkJWeTlETEVkQlEzWkRNa01zUlVGQlZYQXdRaXhUUVVOb1FpeE5RVUZQT1VJc1IwRkRUQ3hQUVVGUGVXRXNSVUZCVVhwaExFZEJSVzVDTEVkQlFVbHBTQ3hoUVVGM1FuaEhMRVZCUTNoQ0xFOUJRVTkzUnl4RlFVRmhXaXhOUVVGTk5IZENMRVZCUVZWNFl5eEZRVU5XTEV0QlFVMHNTMEZCVFN4TlFVYzVRM2RqTEVsQmFrSktMRWRCYjBKUGNERkNMRVZCYVVwSmR6RkNMRU5CUVZGdVFpeEZRVUZYTTBNc1MwRkpPVUlzVDBGR1FUSkRMRVZCUVZWd01FSXNVVUZCVlVFc1JVRkRjRUpCTEVWQlFWRnpSaXhoUVVGaE9IVkNMRWRCUTJSd01FSXNSMEZIV0hKQ0xFVkJRVkY1UWl4VlFVRlZhVEJDTEdWQlFXbENMRk5CUVZWVkxFZEJRM3BETVRCQ0xFdEJRVXR4UlN4VlFVRTJRaXhQUVVGcVFuSkZMRXRCUVV0eFJTeFZRVU4wUW5KRkxFdEJRVXR0TVVJc1ZVRkJXVlFzUjBGSGNrSndNa0lzUlVGQlVYbENMRlZCUVZWcE1VSXNZMEZCWjBJc1YwRkRPVUlzVDBGQmVVSXNUMEZCYWtKb01VSXNTMEZCUzNGRkxGZEJRWE5DTEVkQlIzWkRMMFlzUlVGQlVYbENMRlZCUVZWck1VSXNZVUZCWlN4WFFVTTNRaXhQUVVGUGFqRkNMRXRCUVV0dE1VSXNWMEZIYUVJM01rSXNSVUZCVVhsQ0xGVkJRVlZ6TUVJc2FVSkJRVzFDTEZkQlEycERjakJDTEV0QlFVdHhSU3hYUVVFMlFpeFBRVUZxUW5KRkxFdEJRVXR4UlN4VlFVTjBRbkpGTEV0QlFVdHRNVUlzWlVGQlFVRXNSMEZIVkRjeVFpeEZRVUZSZVVJc1ZVRkJWVEl3UWl4VFFVRlhMRk5CUVZWNmVrSXNSMEZEYmtNc1IwRkJhMElzYlVKQlFWQkJMRVZCUTFBc1QwRkJUeXhKUVVGSk1ubENMRVZCUVdsQ00zbENMRVZCUVVscVFpeExRVUZOTkdwQ0xFdEJSVEZETEUxQlFVMHNTVUZCU1hCa0xFdEJTMmhDTEVOQlFVTXlVaXhYUVVGWExFZEJRVWM1VlN4VFFVRlRMRXRCUVVzcmVFSXNSMEZCUnl4RFFVRkRMRk5CUVZOME1rSXNSVUZCVVdZc1JVRkJUMFFzUjBGRE0wUXNZVUZEUVN4SlFVbEpkVE5DTEVWQlNrRjBiMElzUlVGQlRXcFBMRVZCUVZFc1UwRkRaRzlJTEVWQlFXdERMRzlDUVVGaWNYRkNMRlZCUlhKQ2VtOUNMRVZCUVZjc1EwRkJRMnBMTEVWQlFVY3NTVUZGWm5relFpeEZRVUVyUWl4dlFrRkJWR296UWl4TFFVRjFRa0VzUzBGRE0wSXNiMEpCUVZoR0xFOUJRWGxDUVN4UFFVTmtMRzlDUVVGWVF5eFBRVUY1UWtFc1dVRkJRVUVzU1VGRGFFTTBRaXhMUVVGeFFrRXNTMEZCVHl4TFFVVm9ReXhUUVVGVGRURkNMRWxCUTB3c1NVRkRTU3hKUVVGSmFIaENMRVZCUVZNNGQwSXNSVUZGWWl4UFFVUkJRU3hGUVVGcFFpeExRVU5XT1hkQ0xFVkJRVTl2UXl4TlFVRk5NMGNzUzBGQlRUWkRMRmRCUXpWQ0xFMUJRVTlvUml4SFFVVk1MRTlCUkVGcFN5eEZRVUZUYWtzc1JVRkJTVUVzUlVGRFRtbExMRWRCTkVKbUxGTkJRVk13ZEVJc1JVRkJXVE5UTEVkQlEycENMRTlCUVdNc1RVRkJVRUVzU1VGQlFVRXNTVUZCWlVFc1NVRkJRVUVzU1VGQlowSkJMRWRCUTI1Q0xHbENRVUZTUVN4SFFVRnRReXhwUWtGQlVrRXNSVUYzUXpGRExGTkJRVk53VUN4RlFVRnJRblpQTEVWQlFVczRTeXhGUVVGTk0wc3NSMEZEYkVNc1IwRkJTVzEzUWl4RlFVRlpkSGRDTEVkQlFVMHNUMEZCVDBFc1JVRkROMElzU1VGQlNUSlhMRVZCUVdFc1EwRkRZbmhYTEUxQlFVOUJMRVZCUTFCdFZpeGpRVUZCUVN4RlFVTkJSU3haUVVGQlFTeEZRVU5CUkN4VlFVRkJRU3hIUVVkS0xFOUJSRUV4VGl4RlFVRkpjVVFzWlVGQlpXeE1MRVZCUVVzNFN5eEZRVUZOTmt3c1IwRkRka0l6Vnl4RlFVOVlMRWxCUVVsbmJrSXNSVUZCYjBJc1YwRkRjRUlzU1VGQlNYVktMRVZCUVhGQ0xFTkJRM0pDYkdJc1RVRkJUWGhoTEZWQlEwNHJSaXhQUVVGUEwwWXNWVUZEVURJeFFpeFRRVUZUTXpGQ0xGZEJSMVEwTVVJc1JVRkJhMElzVTBGQlV6bFRMRWRCUXpOQ0xFbEJRVXNzU1VGQlNUbHFRaXhGUVVGSkxFVkJRVWRCTEVWQlFVa3dNa0lzUlVGQmJVSnlNa0lzVTBGQlZVd3NSVUZETjBNc1IwRkJTVEF5UWl4RlFVRnRRakV5UWl4TFFVRlBPR3BDTEVWQlF6RkNMRTlCUVVFc1JVRkhVaXhQUVVGQkxFZEJSMG9zUjBGQlNUbFdMRVZCUVVselR5eE5RVUZQTEVOQlExZ3NTVUZCU1RsUkxFVkJRVlY2UlN4UFFVRlBNbFlzYjBKQlEzSkNMRTlCUVU4c1UwRkJVM1pYTEVkQlIxb3NTVUZHUVN4SlFVRkplRVlzUlVGQlRTeEhRVU5PYXpKQ0xFVkJRV001ZGtJc1QwRkJUME1zVDBGQlR5eE5RVU5zUWl4TlFVRlFZaXhKUVVGblFubDNRaXhGUVVGblFucDNRaXhKUVVGTkxFTkJRM3BETEVsQlFVbHpSaXhGUVVOS0xFbEJRMGxCTEVWQlFVOUVMRVZCUVZGeVJpeEhRVU5xUWl4TlFVRlBja2dzUjBGRFRDeFBRVUZQTmtJc1JVRkZXQ3hKUVVGTExFbEJRVWxZTEVWQlFVa3NSVUZCUjBFc1JVRkJTWGxNTEVWQlFVdHdUQ3hUUVVGVlRDeEZRVUZITEVOQlEyeERMRWxCUVVsclRTeEZRVUZOVkN4RlFVRkxla3dzUjBGRFppeEpRVUZKTmpKQ0xFVkJRVmt6Y1VJc1IwRkJhRUlzUTBGRFFUSnhRaXhGUVVGWk0zRkNMRWxCUVVGQkxFVkJRMW9zU1VGQlNXdFNMRVZCUVU5eVZ5eFBRVUZQZVZZc2VVSkJRWGxDY2xjc1JVRkJTeXRHTEVkQlEzQkRMRTFCUVZKclVpeEhRVUUwUWl4TlFVRmFRU3hGUVVGTE9WVXNTMEZCTWtJc1RVRkJXamhWTEVWQlFVdE1MRXRCUTNwRGNHTXNSVUZCU1RCQ0xFdEJRVXMyU2l4SlFVZHFRaTlHTEVWQlFVMDJTQ3hGUVVGSk1rOHNaVUZCWlhoWExFZEJSVGRDTEU5QlFVOTRSaXhIUVVkWUxFbEJRVWxuZWtJc1JVRkJWU3hIUVVGSE1WY3NaVUZEYWtJc1QwRkJUeXhUUVVGVE9WY3NSMEZEV2l4SFFVRkplWGRDTEVWQlFXZENlbmRDTEVkQlFVMHNUVUZCVHl4SFFVTnFReXhKUVVGSmVFWXNSVUZCVFN4SFFVZFdiVEpDTEVWQlFXRXNTVUZCU3l4SlFVRkpOWEZDTEV0QlFVOHZSaXhGUVVONlFpeEhRVUZKZDNSQ0xFVkJRVkYyZWtJc1MwRkJTeXRHTEVWQlFVc3JSaXhIUVVOc1FuWk1MRVZCUVVrd1FpeExRVUZMTmtvc1QwRkRUaXhEUVVOSUxFbEJRVXNzU1VGQlNXeE5MRVZCUVVrc1JVRkJSMEVzUlVGQlNUQXlRaXhGUVVGdFFuSXlRaXhUUVVGVlRDeEZRVU0zUXl4SFFVRkpNbnBDTEVWQlFWRjJla0lzUzBGQlMzTXlRaXhGUVVGdFFqRXlRaXhIUVVGSmEwMHNSMEZEY0VNc1UwRkJVelJ4UWl4RlFVZHFRbTR5UWl4RlFVRkpNRUlzUzBGQlN6WktMRWRCUjJwQ0xFOUJRVTkyVEN4SFFUVkVTeXhIUVd0RmNFSnZNa0lzUlVGQmQwSXNjMEpCY1VNMVFpeEpRVUZKUXl4RlFVRlRMSGRDUVdGaUxGTkJRVk5ETEVWQlFXRTVkMElzUjBGRGJFSXNTVUZEU1N4UFFVRlBRU3hGUVVGTkxFZEJRMllzVFVGQlQzSklMRWRCUTB3c1RVRkJUeXc0UWtGSlppeFRRVUZUYnpSQ0xFVkJRVkV2ZDBJc1IwRkRZaXhQUVVGUFFTeGhRVUZsYkVjc1QwRkRWQ3hQUVVGU2EwY3NSMEZEYVVJc2FVSkJRVkpCTEVkQlEyZENMR2xDUVVGb1FrRXNSVUZCU1cxQ0xGTkJRMU1zYVVKQlFXSnVRaXhGUVVGSk9Fc3NTMEZuUW5SQ0xGTkJRVk5vUkN4RlFVRmxPVWdzUjBGRGNFSXNUMEZCVHl0M1FpeEZRVUZSTDNkQ0xFbEJRVkUyU0N4RlFVRkpORThzYlVKQlFXMUNlbGNzUlVGQlN5eFRRVWQyUkN4SlFVRkphMmxDTEVWQlEwMHNWVUZCVnl4SlFVRkpjRzlDTEUxQlQxWXNVMEZCVTNGSExFZEJRMW9zVDBGQlNUSklMRVZCUVdVelNDeEhRVUZsUVN4RlFVTXpRaXhKUVVGSmNrY3NUVUZCVFdjelFpeEZRVUZoTTNkQ0xFdEJVak5DTEZOQlFWTkJMRWRCUTFvc1IwRkJTVEpJTEVWQlFXVXpTQ3hIUVVGUkxFOUJRVTlCTEVWQlEyeERMRWxCUVVzc1RVRkJUU3hKUVVGSmNrY3NUVUZCVFdjelFpeEZRVUZoTTNkQ0xFbEJRMnhETEUxQlFVMTFVaXhIUVVGTkxFOUJRVTlCTEVsQlZTOUNMRk5CUVZOMFVTeEZRVUZaY0VJc1IwRkRha0lzVFVGQlR5eEhRVUZIY1VJc1UwRkJVM0JJTEV0QlFVc3JSaXhIUVdVMVFpeEpRVUZKYld4Q0xFVkJRVlVzVTBGQlUycEhMRWRCUTI1Q0xFOUJRVWx5V0N4RlFVRkpMME1zVVVGQlVXOWhMRWRCUTB4QkxFVkJSVW9zVFVGSFdDeEhRVUZ6UWl4dlFrRkJXREpFTEZGQlFUQkNRU3hQUVVGUEswMHNVMEZCVlN4RFFVTnNSQ3hKUVVGSmIwSXNSVUZCYTBNc2JVSkJRV1l6WWl4TlFVRk5OR0lzUzBGQmMwSXNVMEZCVXk5U0xFZEJRM2hFTEU5QlFVODNTaXhOUVVGTk5HSXNTMEZCU3k5U0xFbEJRMnhDTEZOQlFWTkJMRWRCU1ZRc1NVRklRU3hKUVVWSloxTXNSVUZHUVRFeVFpeEZRVUZOTEVkQlEwNHlNa0lzUlVGQlMycFRMRVZCUVVVeVJDeFBRVUZQSzAwc1kwRkZVbk5DTEVWQlFWZERMRVZCUVVjeFZ5eFJRVUZaU1N4TlFVTm9RM0puUWl4RlFVRkpNRUlzUzBGQlMyY3hRaXhGUVVGVEwzZENMRTlCUlhSQ0xFOUJRVTh6Uml4SFFVZFlNbkZDTEVWQlFWVXNVMEZCVTJwSExFZEJRMllzVDBGQlNYSllMRVZCUVVrdlF5eFJRVUZSYjJFc1IwRkRURUVzUlVGRFN5eE5RVUZNUVN4SFFVRXlReXh0UWtGQmRrSkJMRVZCUVVVeVJDeFBRVUZQSzAwc1ZVRkROMEp2UWl4RlFVRlZPVklzUjBGRlpDeE5RVWxtTEVsQlFVazVhRUlzUlVGQk5FSXNiMEpCUVZwRExGTkJRekpDTEhGQ1FVRjJReXRFTEVWQlFWa3ZSQ3hUUVVGVEswNHNZMEZGZWtKbmJVSXNSVUZCY1VNc2IwSkJRVm92ZWtJc1kwRkJRVUVzU1VGRGJFSkJMRkZCUVZGcFRDeEpRWEZDYmtJc1NVRnhRMUV5WVN4RlFYSkRTbnB2UWl4RlFVRk5MRU5CUTA0cmMwSXNVVUY2UzBvc1UwRkJhVUo0Y2tJc1IwRkRZaXhKUVVOSkxFZEJRV3RDTEcxQ1FVRlFRU3hGUVVGdFFpeERRVU14UWl4SlFVRkpkVW9zUlVGQlQzVkRMRVZCUVVsNVR5eE5RVUZOZG1Fc1JVRkJSMnhDTEZkQlJYQkNkekpDTEVWQlFXRjRjRUlzUlVGQlNYTlBMRTlCUVZNM1VTeEZRVUZMY0V3c1QwRkJVeXhGUVVONFEyOHpRaXhGUVVGcFEyaHpRaXhGUVVGTGNFd3NUMEZCVXl4TFFVTTNRaXhKUVVGb1FtOU1MRVZCUVV0d1RDeFJRVUUwUWl4blFrRkJXbTlNTEVWQlFVc3NTVUZETlVKcGMwSXNSVUZEUVZnc1JVRkJjMEl2YUVJc1MwRkJTemxUTEVWQlFVc3NTMEZCVHpoTUxFVkJRVWw1VHl4TlFVRk5kbUVzUjBGQlNUZENMRTlCUVZNc1JVRkZiRVVzUjBGQlNXMHpRaXhIUVVGalF5eEhRVU5rUXl4RlFVTkJMRTlCUVVFc1JVRkhVaXhQUVVGQkxFVkJRMFlzVFVGQlR6VTBRaXhIUVVOTUxFOUJRVUVzU1VGM1NrcHZTaXhoUVhKSlNpeFRRVUZ6UWpST0xFZEJRMnhDTEU5QlFVOXJhRUlzUlVGQlQyaHBRaXhMUVVGTFl5eEpRWEZKYmtKeFdDeHJRa0ZCYlVKQkxFVkJRMjVDVml4NVFrRTNVVW9zVTBGQmEwTjBiVUlzUlVGQlN5dEdMRVZCUVV0NWNrSXNSMEZEZUVNc1NVRkJTVE53UWl4RlFVRkpjMDhzVFVGVFNpeE5RVUZQTEVkQlFVZFhMR1ZCUVdVM1l5eExRVUZMSzBZc1JVRkJTeXRHTEVkQlFVOHZSaXhGUVVGSkswWXNVVUZCUVVFc1JVRlNPVU1zU1VGQlNXdFNMRVZCUVU5eVZ5eFBRVUZQZVZZc2VVSkJRWGxDY2xjc1JVRkJTeXRHTEVkQlJXaEVMRTlCUVZrc1RVRkJVbXRTTEVWQlEyMUNMRTFCUVZwQkxFVkJRVXM1VlN4TFFVRXlRaXhOUVVGYU9GVXNSVUZCUzB3c1NVRkRkRUpMTEVWQlFVczVWeXhOUVVOTWNYaENMRTlCUVVGQkxFZEJkVkZzUW5CbExGRkJjRkJLTEZOQlFXbENOMW9zUjBGRFlpeE5RVUZOUVN4SFFXOVFUblZNTEZGQlFWTXJReXhGUVVGSkwwTXNVVUZEWW5GblFpeFJRVUZUUVN4RlFVTlVOVmNzYTBKQlFXMUNRU3hGUVVOdVFpdG9RaXhaUVVGaFFTeEZRVU5pZW5GQ0xGTkJlbE5LTEZOQlFXdENNVVlzUjBGRFpDeE5RVUYzUWl4dFFrRkJWa0VzUjBGRFZTeHBRa0ZCVmtFc1IwRkJaME1zVDBGQlZrRXNSMEYzVTNCRE5IZENMRkZCUVZOQkxFVkJRMVF2ZGtJc1dVRkJZVUVzUlVGRFlqUkNMRk5CUVZWQkxFVkJRMVpFTEZOQk5WVktMRk5CUVd0Q05VY3NSMEZGWkN4UFFVUkJiekJDTEVWQlFXbENjREJDTEVWQlExWnpNRUlzUjBFeVZWQTFaaXhUUVhoVlZ5eFRRVUZUWjJoQ0xFVkJRVTlETEVkQlF6TkNMRWxCUVVsc1JTeEZRVUZWTEVkQlFVY3hWeXhsUVVWcVFpeFRRVUZUTm1Fc1NVRkhUQ3hKUVVGTExFbEJRVWwyZGtJc1MwRkdWSFJJTEV0QlFVdHBZU3haUVVGak1HTXNSVUZEYmtJek1rSXNTMEZCU3poblFpeGhRVUZsT0ZZc1JVRkRTMEVzUlVGQlR6Y3lRaXhWUVVONFFqSjVRaXhGUVVGUmRucENMRXRCUVV0NU0wSXNSVUZCVHpjeVFpeFZRVUZYZFVnc1NVRkRaMElzVFVGQkwwTkJMRVZCUVdFMFRTeFBRVUZQTlUwc1JVRkJZV3hKTEU5QlFVOHNTMEZGZUVOWkxFdEJRVXR6U0N4RlFVRmxMRXRCUVU5emRrSXNSVUZCVHpjeVFpeFZRVUZWZFVnc1NVRk5lRVFzVDBGR1FYVjJRaXhGUVVGRk9USkNMRlZCUVZrMk1rSXNSVUZCVHpjeVFpeFZRVU55UWpReVFpeEZRVUZOTlRKQ0xGVkJRVmtzU1VGQlNUZ3lRaXhGUVVObVJpeEZRVUZOTlRKQ0xGZEJlVlJpSzNGQ0xHRkJjRk5LTEZOQlFYTkNkbTFDTEVWQlFWRjFlVUlzUjBGRE1VSXNTVUZGU1M4elFpeEZRVVpCWjJZc1JVRkJUWGhhTEVWQlFVOXVSaXhQUVVOaVRTeEZRVUZOTEVsQlFVazJZU3hOUVVGTmQwUXNSVUZCVFN4SFFVVXhRaXhKUVVGTGFHWXNSVUZCU1N4RlFVRkhRU3hGUVVGSloyWXNTVUZCVDJobUxFVkJRMjVDVnl4RlFVRkpXQ3hIUVVGTGQwWXNSVUZCVDNoR0xFZEJSM0JDTEU5QlJFRlhMRVZCUVVsWUxFZEJRVXNyTTBJc1JVRkRSbkF6UWl4SFFUWlNVREpwUWl4cFFrRXpVMG9zVTBGQk1FSXdWU3hIUVVOMFFpeFBRVUZMZGtJc1JVRkJXWFZDTEVkQlJWWXNTVUZCU1M4elFpeE5RVUZOWnpOQ0xFVkJRV0ZsTEVsQlJrOUJMRWRCTWxOeVF6TlBMR2xDUVhCTFNpeFRRVUV3UW14cVFpeEhRVVYwUWl4VFFVRlRPSGhDTEV0QlExUkJMRVZCUVdkQ2FqTkNMRlZCUVZsdFJpeEZRVU0xUWl4SlFVRkphRVVzUlVGQlZ5eEpRVUZKT0RGQ0xFVkJRMjVDTEZOQlFWTkRMRWxCUTB3c1kwRkJZeTh4UWl4RlFVRlRaekpDTEVsQlNUTkNMRTlCUmtGRUxFbEJRMEZCTEVsQlEwOHZlRUlzUjBFeVNsQnBlVUlzV1VGc1Nrb3NVMEZCY1VKc1JpeEZRVUZQYlVZc1JVRkJVVGRNTEVkQlJXaERMRWxCUkVFc1NVRkJTVGR5UWl4RlFVRk5MRWxCUVVrMllTeE5RVUZOTUZnc1IwRkRXbXg2UWl4RlFVRkpMRVZCUVVkQkxFVkJRVWxyZWtJc1NVRkJVMng2UWl4RlFVTjRRbGNzUlVGQlNWZ3NSMEZCUzNFMFFpeEZRVUZUY2pSQ0xFVkJRVWwzYzBJc1JVRkZNVUlzVDBGQlR6ZHlRaXhIUVRoSlVEWkhMRk5CUVZWNWRrSXNSVUZEVm1od1FpeGxRVUZuUWtFc1JVRkRhRUp2WVN4clFrRkJiVUpCTEVWQlEyNUNjRU1zZDBKQmRraEtMRk5CUVdsRGJtNUNMRWRCUXpkQ0xFOUJRVk1zVFVGQlRFRXNTVUZEUzBFc1lVRkJZVzFDTEUxQlFUaENhMk1zZFVKQlFVVk1MRzFDUVVGQlFTeEpRVU5zUkdoa0xFVkJRV2xDT0dNc1owSkJjVWh5UWpoSUxDdENRUzlJU2l4VFFVRjNRelZyUWl4SFFVTndReXhKUVVOSk5GWXNSVUZCYTBJMVZpeEZRVUZITEdsQ1FVRkJMRWRCUlhwQ0xFMUJRVTEzTlVJc1RVRTBTRTR2ZDBJc1dVRkJZVUVzUlVGRFltdHRRaXhuUWtFM1Jrb3NVMEZCZVVJeVNpeEZRVUZOYlVJc1JVRkJTUzloTEVkQlJTOUNMRWxCUkVFc1NVRkJTUzlTTEVWQlFVOTFReXhGUVVGSmVVOHNUVUZCVFRKaExFZEJRMXB3TTBJc1JVRkJTU3hGUVVGSFFTeEZRVUZKZVV3c1JVRkJTM0JNTEZOQlFWVk1MRVZCUVVjc1EwRkRiRU1zU1VGQlNXdE5MRVZCUVUxVUxFVkJRVXQ2VEN4SFFVTm1MRWRCUVVsM1pDeEZRVUZQZEZJc1IwRkRVQ3hKUVVOSk9FSXNSVUZCU1hGRUxHVkJRV1ZyYmtJc1JVRkJTWEp6UWl4RlFVRkxPRUlzUlVGQlNYVlBMR05CUVdNMllTeEZRVUZOYkhKQ0xFbEJRM1JFTEUxQlFVOXZjMElzVDBGMVJtcENiREZDTEZsQlFTdENMRzlDUVVGWWJ6RkNMRkZCUVRCQ1FTeFJRVU5NTEcxQ1FVRnlRa0VzVDBGQlQwTXNWVUZETTBKc01VSXNUMEZCVVVFc1JVRkRVbWN3UWl4blFrRkJhVUpCTEVWQlEycENPVzlDTEVsQmJFUktMRk5CUVdGMlF5eEhRVU5VTEU5QlFVOXhja0lzUlVGQmEwSXZla0lzVVVGQlVXbE1MRWxCUVVsMlF5eFJRVUZCUVN4SFFXdEVja00zVFN4UFFVRlJhek5DTEVWQlExSjJSaXhwUWtGb1JFb3NWMEZEU1N4SFFVRjFRaXh0UWtGQlducDRRaXhSUVVOUUxFbEJRMGtzU1VGQlNYRkNMRVZCUVZVc1NVRkJTWEpDTEZGQlFWRXNZMEZETVVJc1IwRkJhME1zY1VKQlFUbENMRWRCUVVkcFNTeFRRVUZUY0Vnc1MwRkJTMUVzUjBGRGFrSXNUMEZCVDNKQ0xGRkJSV0lzVFVGQlQxUXNUVUV3UTJKcFVpeFhRWFJEU2l4VFFVRnZRbnBSTEVWQlFVMXhUU3hIUVVOMFFpeFBRVUZQY2swc1JVRkJTMjlITEV0QlFVdHBSeXhMUVhWRGNrSm9UQ3hGUVVGSk1uZENMR0ZCUVdVemQwSXNSVUZCU1RSRExGTkJSV1pETEZGQlFWRnJNVUlzVlVGQldXd3hRaXhSUVVGUmF6RkNMRk5CUVZNemFFSXNTMEZEY2tOeFV5eEZRVUZWTld4Q0xGRkJRVkZyTVVJc1UwRkJVek5vUWl4TFFVRkxNVUlzVFVGQlRTeExRVUZMYTBrc1NVRkJTVzlpTEZGQlEzaERiakZDTEZGQlFWRTBiRUlzVlVGRFprRXNSVUZCVlRWc1FpeFJRVUZSTkd4Q0xGRkJRVkV2VkN4TlFVRk5MRXRCUVV0clNTeEpRVUZKYjJJc1UwRkZkRUlzU1VGQlpuWlFMRVZCUVZFc1NVRkJXVUVzUlVGQlVTeEhRVUZMTEVsQlFWRkJMRVZCUVZFc1IwRkJTeXhIUVVjNVJIcHZRaXhGUVVGSk5FTXNVVUZCVVRWRExFVkJRVWt3YjBJc2FVSkJRV2xDTjJ4Q0xGTkJSWEpETEVsQlFVc3NUVUZCVFN4SlFVRkpka1FzVFVGQlZ5eE5RVUZQYmtJc1IwRkJTVFpDTEVWQlFVa3JXQ3hqUVVGblFqVmFMRVZCUTNwRVJTeEZRVUZQUkN4UlFVRlZORUlzUjBGRlppeERRVUZEZDB3c1VVRkJVU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEhRWEJuVEdkVUxFTkJiMmRNTlZNc1MwRkRjVUlzYjBKQlFWZ3ZUU3hSUVVGeFF5eFBRVUZZUVN4UFFVRnBSRUVzVDBGQlQzYzFRaXhGUVVGSmVEVkNMRTlCUVU5SExGRkJRWGRHTEc5Q1FVRlVSQ3hOUVVGcFF5eFBRVUZVUVN4UFFVRTJRMEVzUzBGQlMzTTFRaXhGUVVGSmREVkNMRXRCUVV0RElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeENiSFZsUW1seVpGeGNhbk5jWEdKeWIzZHpaWEpjWEdKc2RXVmlhWEprTG1wekluMD0iLCJ2YXIgY2FjaGVkU2V0VGltZW91dCxjYWNoZWRDbGVhclRpbWVvdXQscHJvY2Vzcz1tb2R1bGUuZXhwb3J0cz17fTtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYoY2FjaGVkU2V0VGltZW91dD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dClyZXR1cm4gY2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLGUsMCl9fX0hZnVuY3Rpb24oKXt0cnl7Y2FjaGVkU2V0VGltZW91dD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6ZGVmYXVsdFNldFRpbW91dH1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2NhY2hlZENsZWFyVGltZW91dD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OmRlZmF1bHRDbGVhclRpbWVvdXR9Y2F0Y2goZSl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fSgpO3ZhciBjdXJyZW50UXVldWUscXVldWU9W10sZHJhaW5pbmc9ITEscXVldWVJbmRleD0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtkcmFpbmluZyYmY3VycmVudFF1ZXVlJiYoZHJhaW5pbmc9ITEsY3VycmVudFF1ZXVlLmxlbmd0aD9xdWV1ZT1jdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTpxdWV1ZUluZGV4PS0xLHF1ZXVlLmxlbmd0aCYmZHJhaW5RdWV1ZSgpKX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYoIWRyYWluaW5nKXt2YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7ZHJhaW5pbmc9ITA7Zm9yKHZhciB0PXF1ZXVlLmxlbmd0aDt0Oyl7Zm9yKGN1cnJlbnRRdWV1ZT1xdWV1ZSxxdWV1ZT1bXTsrK3F1ZXVlSW5kZXg8dDspY3VycmVudFF1ZXVlJiZjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7cXVldWVJbmRleD0tMSx0PXF1ZXVlLmxlbmd0aH1jdXJyZW50UXVldWU9bnVsbCxkcmFpbmluZz0hMSxmdW5jdGlvbihlKXtpZihjYWNoZWRDbGVhclRpbWVvdXQ9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoY2FjaGVkQ2xlYXJUaW1lb3V0PT09ZGVmYXVsdENsZWFyVGltZW91dHx8IWNhY2hlZENsZWFyVGltZW91dCkmJmNsZWFyVGltZW91dClyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e2NhY2hlZENsZWFyVGltZW91dChlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsZSl9fX0oZSl9fWZ1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiBub29wKCl7fXByb2Nlc3MubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTtxdWV1ZS5wdXNoKG5ldyBJdGVtKGUsdCkpLDEhPT1xdWV1ZS5sZW5ndGh8fGRyYWluaW5nfHxydW5UaW1lb3V0KGRyYWluUXVldWUpfSxJdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxwcm9jZXNzLnRpdGxlPVwiYnJvd3NlclwiLHByb2Nlc3MuYnJvd3Nlcj0hMCxwcm9jZXNzLmVudj17fSxwcm9jZXNzLmFyZ3Y9W10scHJvY2Vzcy52ZXJzaW9uPVwiXCIscHJvY2Vzcy52ZXJzaW9ucz17fSxwcm9jZXNzLm9uPW5vb3AscHJvY2Vzcy5hZGRMaXN0ZW5lcj1ub29wLHByb2Nlc3Mub25jZT1ub29wLHByb2Nlc3Mub2ZmPW5vb3AscHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcj1ub29wLHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzPW5vb3AscHJvY2Vzcy5lbWl0PW5vb3AscHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXI9bm9vcCxwcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXI9bm9vcCxwcm9jZXNzLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX0scHJvY2Vzcy5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxwcm9jZXNzLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxwcm9jZXNzLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0scHJvY2Vzcy51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltSnliM2R6WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0lzSW1OaFkyaGxaRU5zWldGeVZHbHRaVzkxZENJc0luQnliMk5sYzNNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2laR1ZtWVhWc2RGTmxkRlJwYlc5MWRDSXNJa1Z5Y205eUlpd2laR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0lzSW5KMWJsUnBiV1Z2ZFhRaUxDSm1kVzRpTENKelpYUlVhVzFsYjNWMElpd2laU0lzSW1OaGJHd2lMQ0owYUdseklpd2lZMnhsWVhKVWFXMWxiM1YwSWl3aVkzVnljbVZ1ZEZGMVpYVmxJaXdpY1hWbGRXVWlMQ0prY21GcGJtbHVaeUlzSW5GMVpYVmxTVzVrWlhnaUxDSmpiR1ZoYmxWd1RtVjRkRlJwWTJzaUxDSnNaVzVuZEdnaUxDSmpiMjVqWVhRaUxDSmtjbUZwYmxGMVpYVmxJaXdpZEdsdFpXOTFkQ0lzSW14bGJpSXNJbkoxYmlJc0ltMWhjbXRsY2lJc0lrbDBaVzBpTENKaGNuSmhlU0lzSW01dmIzQWlMQ0p1WlhoMFZHbGpheUlzSW1GeVozTWlMQ0pCY25KaGVTSXNJbUZ5WjNWdFpXNTBjeUlzSW1raUxDSndkWE5vSWl3aWNISnZkRzkwZVhCbElpd2lZWEJ3YkhraUxDSjBhWFJzWlNJc0ltSnliM2R6WlhJaUxDSmxibllpTENKaGNtZDJJaXdpZG1WeWMybHZiaUlzSW5abGNuTnBiMjV6SWl3aWIyNGlMQ0poWkdSTWFYTjBaVzVsY2lJc0ltOXVZMlVpTENKdlptWWlMQ0p5WlcxdmRtVk1hWE4wWlc1bGNpSXNJbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeUlzSW1WdGFYUWlMQ0p3Y21Wd1pXNWtUR2x6ZEdWdVpYSWlMQ0p3Y21Wd1pXNWtUMjVqWlV4cGMzUmxibVZ5SWl3aWJHbHpkR1Z1WlhKeklpd2libUZ0WlNJc0ltSnBibVJwYm1jaUxDSmpkMlFpTENKamFHUnBjaUlzSW1ScGNpSXNJblZ0WVhOcklsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVTlKUVN4cFFrRkRRVU1zYlVKQlVrRkRMRkZCUVZWRExFOUJRVTlETEZGQlFWVXNSMEZWTDBJc1UwRkJVME1zYlVKQlEwd3NUVUZCVFN4SlFVRkpReXhOUVVGTkxHMURRVVZ3UWl4VFFVRlRReXh6UWtGRFRDeE5RVUZOTEVsQlFVbEVMRTFCUVUwc2NVTkJjMEp3UWl4VFFVRlRSU3hYUVVGWFF5eEhRVU5vUWl4SFFVRkpWQ3h0UWtGQmNVSlZMRmRCUlhKQ0xFOUJRVTlCTEZkQlFWZEVMRVZCUVVzc1IwRkhNMElzU1VGQlMxUXNiVUpCUVhGQ1N5eHRRa0ZCY1VKTUxHMUNRVUZ4UWxVc1YwRkZhRVVzVDBGRVFWWXNhVUpCUVcxQ1ZTeFhRVU5hUVN4WFFVRlhSQ3hGUVVGTExFZEJSVE5DTEVsQlJVa3NUMEZCVDFRc2FVSkJRV2xDVXl4RlFVRkxMRWRCUXk5Q0xFMUJRVTFGTEVkQlEwb3NTVUZGU1N4UFFVRlBXQ3hwUWtGQmFVSlpMRXRCUVVzc1MwRkJUVWdzUlVGQlN5eEhRVU14UXl4TlFVRk5SU3hIUVVWS0xFOUJRVTlZTEdsQ1FVRnBRbGtzUzBGQlMwTXNTMEZCVFVvc1JVRkJTeXhOUVhaRGJrUXNWMEZEUnl4SlFVVlJWQ3hwUWtGRWMwSXNiVUpCUVdaVkxGZEJRMWxCTEZkQlJVRk1MR2xDUVVWNlFpeE5RVUZQVFN4SFFVTk1XQ3hwUWtGQmJVSkxMR2xDUVVWMlFpeEpRVVZSU2l4dFFrRkVkMElzYlVKQlFXcENZU3hoUVVOalFTeGhRVVZCVUN4dlFrRkZNMElzVFVGQlQwa3NSMEZEVEZZc2JVSkJRWEZDVFN4eFFrRnFRalZDTEVkQmQwVkVMRWxCUlVsUkxHRkJSa0ZETEUxQlFWRXNSMEZEVWtNc1ZVRkJRVUVzUlVGRlFVTXNXVUZCWXl4RlFVVnNRaXhUUVVGVFF5eHJRa0ZEUVVZc1ZVRkJZVVlzWlVGSGJFSkZMRlZCUVVGQkxFVkJRMGxHTEdGQlFXRkxMRTlCUTJKS0xFMUJRVkZFTEdGQlFXRk5MRTlCUVU5TUxFOUJSVFZDUlN4WlFVRmpMRVZCUldSR0xFMUJRVTFKTEZGQlEwNUZMR05CU1ZJc1UwRkJVMEVzWVVGRFRDeEpRVUZKVEN4VFFVRktMRU5CUjBFc1NVRkJTVTBzUlVGQlZXWXNWMEZCVjFjc2FVSkJRM3BDUml4VlFVRkJRU3hGUVVkQkxFbEJSRUVzU1VGQlNVOHNSVUZCVFZJc1RVRkJUVWtzVDBGRFZra3NSMEZCU3l4RFFVZFFMRWxCUmtGVUxHRkJRV1ZETEUxQlEyWkJMRTFCUVZFc1MwRkRRMFVzVjBGQllVMHNSMEZEWkZRc1kwRkRRVUVzWVVGQllVY3NXVUZCV1U4c1RVRkhha05RTEZsQlFXTXNSVUZEWkUwc1JVRkJUVklzVFVGQlRVa3NUMEZGYUVKTUxHRkJRV1VzUzBGRFprVXNWVUZCUVVFc1JVRnVSVW9zVTBGQmVVSlRMRWRCUTNKQ0xFZEJRVWw2UWl4eFFrRkJkVUpoTEdGQlJYWkNMRTlCUVU5QkxHRkJRV0ZaTEVkQlIzaENMRWxCUVV0NlFpeHhRa0ZCZFVKTkxITkNRVUYzUWs0c2NVSkJRWFZDWVN4aFFVVjJSU3hQUVVSQllpeHRRa0ZCY1VKaExHRkJRMlJCTEdGQlFXRlpMRWRCUlhoQ0xFbEJSVmQ2UWl4dFFrRkJiVUo1UWl4SFFVTTFRaXhOUVVGUFppeEhRVU5NTEVsQlJVa3NUMEZCVDFZc2JVSkJRVzFDVnl4TFFVRkxMRXRCUVUxakxFZEJRM1pETEUxQlFVOW1MRWRCUjB3c1QwRkJUMVlzYlVKQlFXMUNWeXhMUVVGTFF5eExRVUZOWVN4TFFYQkNha1FzUTBGdlJXOUNTQ3hKUVdsQ2NFSXNVMEZCVTBrc1MwRkJTMnhDTEVWQlFVdHRRaXhIUVVObVppeExRVUZMU2l4SlFVRk5RU3hGUVVOWVNTeExRVUZMWlN4TlFVRlJRU3hGUVZscVFpeFRRVUZUUXl4UlFUVkNWRE5DTEZGQlFWRTBRaXhUUVVGWExGTkJRVlZ5UWl4SFFVTjZRaXhKUVVGSmMwSXNSVUZCVHl4SlFVRkpReXhOUVVGTlF5eFZRVUZWWWl4UFFVRlRMRWRCUTNoRExFZEJRVWxoTEZWQlFWVmlMRTlCUVZNc1JVRkRia0lzU1VGQlN5eEpRVUZKWXl4RlFVRkpMRVZCUVVkQkxFVkJRVWxFTEZWQlFWVmlMRTlCUVZGakxFbEJRMnhEU0N4RlFVRkxSeXhGUVVGSkxFZEJRVXRFTEZWQlFWVkRMRWRCUjJoRGJFSXNUVUZCVFcxQ0xFdEJRVXNzU1VGQlNWSXNTMEZCUzJ4Q0xFVkJRVXR6UWl4SlFVTktMRWxCUVdwQ1ppeE5RVUZOU1N4UlFVRnBRa2dzVlVGRGRrSlVMRmRCUVZkakxHRkJVMjVDU3l4TFFVRkxVeXhWUVVGVldDeEpRVUZOTEZkQlEycENXaXhMUVVGTFNpeEpRVUZKTkVJc1RVRkJUU3hMUVVGTmVFSXNTMEZCUzJVc1VVRkZPVUl4UWl4UlFVRlJiME1zVFVGQlVTeFZRVU5vUW5CRExGRkJRVkZ4UXl4VFFVRkJRU3hGUVVOU2NrTXNVVUZCVVhORExFbEJRVTBzUjBGRFpIUkRMRkZCUVZGMVF5eExRVUZQTEVkQlEyWjJReXhSUVVGUmQwTXNVVUZCVlN4SFFVTnNRbmhETEZGQlFWRjVReXhUUVVGWExFZEJTVzVDZWtNc1VVRkJVVEJETEVkQlFVdG1MRXRCUTJJelFpeFJRVUZSTWtNc1dVRkJZMmhDTEV0QlEzUkNNMElzVVVGQlVUUkRMRXRCUVU5cVFpeExRVU5tTTBJc1VVRkJVVFpETEVsQlFVMXNRaXhMUVVOa00wSXNVVUZCVVRoRExHVkJRV2xDYmtJc1MwRkRla0l6UWl4UlFVRlJLME1zYlVKQlFYRkNjRUlzUzBGRE4wSXpRaXhSUVVGUlowUXNTMEZCVDNKQ0xFdEJRMll6UWl4UlFVRlJhVVFzWjBKQlFXdENkRUlzUzBGRE1VSXpRaXhSUVVGUmEwUXNiMEpCUVhOQ2RrSXNTMEZGT1VJelFpeFJRVUZSYlVRc1ZVRkJXU3hUUVVGVlF5eEhRVUZSTEUxQlFVOHNTVUZGTjBOd1JDeFJRVUZSY1VRc1VVRkJWU3hUUVVGVlJDeEhRVU40UWl4TlFVRk5MRWxCUVVsb1JDeE5RVUZOTEhGRFFVZHdRa29zVVVGQlVYTkVMRWxCUVUwc1YwRkJZeXhOUVVGUExFdEJRMjVEZEVRc1VVRkJVWFZFTEUxQlFWRXNVMEZCVlVNc1IwRkRkRUlzVFVGQlRTeEpRVUZKY0VRc1RVRkJUU3h0UTBGRmNFSktMRkZCUVZGNVJDeE5RVUZSTEZkQlFXRXNUMEZCVHlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y2NISnZZMlZ6YzF4Y1luSnZkM05sY2k1cWN5SjkiLCJ2YXIgbmV4dFRpY2s9cmVxdWlyZShcInByb2Nlc3MvYnJvd3Nlci5qc1wiKS5uZXh0VGljayxhcHBseT1GdW5jdGlvbi5wcm90b3R5cGUuYXBwbHksc2xpY2U9QXJyYXkucHJvdG90eXBlLnNsaWNlLGltbWVkaWF0ZUlkcz17fSxuZXh0SW1tZWRpYXRlSWQ9MDtmdW5jdGlvbiBUaW1lb3V0KGUsdCl7dGhpcy5faWQ9ZSx0aGlzLl9jbGVhckZuPXR9ZXhwb3J0cy5zZXRUaW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCx3aW5kb3csYXJndW1lbnRzKSxjbGVhclRpbWVvdXQpfSxleHBvcnRzLnNldEludGVydmFsPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsd2luZG93LGFyZ3VtZW50cyksY2xlYXJJbnRlcnZhbCl9LGV4cG9ydHMuY2xlYXJUaW1lb3V0PWV4cG9ydHMuY2xlYXJJbnRlcnZhbD1mdW5jdGlvbihlKXtlLmNsb3NlKCl9LFRpbWVvdXQucHJvdG90eXBlLnVucmVmPVRpbWVvdXQucHJvdG90eXBlLnJlZj1mdW5jdGlvbigpe30sVGltZW91dC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LHRoaXMuX2lkKX0sZXhwb3J0cy5lbnJvbGw9ZnVuY3Rpb24oZSx0KXtjbGVhclRpbWVvdXQoZS5faWRsZVRpbWVvdXRJZCksZS5faWRsZVRpbWVvdXQ9dH0sZXhwb3J0cy51bmVucm9sbD1mdW5jdGlvbihlKXtjbGVhclRpbWVvdXQoZS5faWRsZVRpbWVvdXRJZCksZS5faWRsZVRpbWVvdXQ9LTF9LGV4cG9ydHMuX3VucmVmQWN0aXZlPWV4cG9ydHMuYWN0aXZlPWZ1bmN0aW9uKGUpe2NsZWFyVGltZW91dChlLl9pZGxlVGltZW91dElkKTt2YXIgdD1lLl9pZGxlVGltZW91dDt0Pj0wJiYoZS5faWRsZVRpbWVvdXRJZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5fb25UaW1lb3V0JiZlLl9vblRpbWVvdXQoKX0sdCkpfSxleHBvcnRzLnNldEltbWVkaWF0ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PW5leHRJbW1lZGlhdGVJZCsrLGk9IShhcmd1bWVudHMubGVuZ3RoPDIpJiZzbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gaW1tZWRpYXRlSWRzW3RdPSEwLG5leHRUaWNrKGZ1bmN0aW9uKCl7aW1tZWRpYXRlSWRzW3RdJiYoaT9lLmFwcGx5KG51bGwsaSk6ZS5jYWxsKG51bGwpLGV4cG9ydHMuY2xlYXJJbW1lZGlhdGUodCkpfSksdH0sZXhwb3J0cy5jbGVhckltbWVkaWF0ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjbGVhckltbWVkaWF0ZT9jbGVhckltbWVkaWF0ZTpmdW5jdGlvbihlKXtkZWxldGUgaW1tZWRpYXRlSWRzW2VdfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMWhhVzR1YW5NaVhTd2libUZ0WlhNaU9sc2libVY0ZEZScFkyc2lMQ0p5WlhGMWFYSmxJaXdpWVhCd2JIa2lMQ0pHZFc1amRHbHZiaUlzSW5CeWIzUnZkSGx3WlNJc0luTnNhV05sSWl3aVFYSnlZWGtpTENKcGJXMWxaR2xoZEdWSlpITWlMQ0p1WlhoMFNXMXRaV1JwWVhSbFNXUWlMQ0pVYVcxbGIzVjBJaXdpYVdRaUxDSmpiR1ZoY2tadUlpd2lkR2hwY3lJc0lsOXBaQ0lzSWw5amJHVmhja1p1SWl3aVpYaHdiM0owY3lJc0luTmxkRlJwYldWdmRYUWlMQ0pqWVd4c0lpd2lkMmx1Wkc5M0lpd2lZWEpuZFcxbGJuUnpJaXdpWTJ4bFlYSlVhVzFsYjNWMElpd2ljMlYwU1c1MFpYSjJZV3dpTENKamJHVmhja2x1ZEdWeWRtRnNJaXdpZEdsdFpXOTFkQ0lzSW1Oc2IzTmxJaXdpZFc1eVpXWWlMQ0p5WldZaUxDSmxibkp2Ykd3aUxDSnBkR1Z0SWl3aWJYTmxZM01pTENKZmFXUnNaVlJwYldWdmRYUkpaQ0lzSWw5cFpHeGxWR2x0Wlc5MWRDSXNJblZ1Wlc1eWIyeHNJaXdpWDNWdWNtVm1RV04wYVhabElpd2lZV04wYVhabElpd2lYMjl1VkdsdFpXOTFkQ0lzSW5ObGRFbHRiV1ZrYVdGMFpTSXNJbVp1SWl3aVlYSm5jeUlzSW14bGJtZDBhQ0lzSW1Oc1pXRnlTVzF0WldScFlYUmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMSE5DUVVGelFrUXNVMEZEZWtORkxFMUJRVkZETEZOQlFWTkRMRlZCUVZWR0xFMUJRek5DUnl4TlFVRlJReXhOUVVGTlJpeFZRVUZWUXl4TlFVTjRRa1VzWVVGQlpTeEhRVU5tUXl4blFrRkJhMElzUlVGaGRFSXNVMEZCVTBNc1VVRkJVVU1zUlVGQlNVTXNSMEZEYmtKRExFdEJRVXRETEVsQlFVMUlMRVZCUTFoRkxFdEJRVXRGTEZOQlFWZElMRVZCV0d4Q1NTeFJRVUZSUXl4WFFVRmhMRmRCUTI1Q0xFOUJRVThzU1VGQlNWQXNVVUZCVVZBc1RVRkJUV1VzUzBGQlMwUXNWMEZCV1VVc1QwRkJVVU1zVjBGQldVTXNaVUZGYUVWTUxGRkJRVkZOTEZsQlFXTXNWMEZEY0VJc1QwRkJUeXhKUVVGSldpeFJRVUZSVUN4TlFVRk5aU3hMUVVGTFNTeFpRVUZoU0N4UFFVRlJReXhYUVVGWlJ5eG5Ra0ZGYWtWUUxGRkJRVkZMTEdGQlExSk1MRkZCUVZGUExHTkJRV2RDTEZOQlFWTkRMRWRCUVZkQkxFVkJRVkZETEZOQlRYQkVaaXhSUVVGUlRDeFZRVUZWY1VJc1RVRkJVV2hDTEZGQlFWRk1MRlZCUVZWelFpeEpRVUZOTEdGQlEyeEVha0lzVVVGQlVVd3NWVUZCVlc5Q0xFMUJRVkVzVjBGRGVFSmFMRXRCUVV0RkxGTkJRVk5ITEV0QlFVdERMRTlCUVZGT0xFdEJRVXRETEUxQlNXeERSU3hSUVVGUldTeFBRVUZUTEZOQlFWTkRMRVZCUVUxRExFZEJRemxDVkN4aFFVRmhVU3hGUVVGTFJTeG5Ra0ZEYkVKR0xFVkJRVXRITEdGQlFXVkdMRWRCUjNSQ1pDeFJRVUZSYVVJc1UwRkJWeXhUUVVGVFNpeEhRVU14UWxJc1lVRkJZVkVzUlVGQlMwVXNaMEpCUTJ4Q1JpeEZRVUZMUnl4alFVRm5RaXhIUVVkMlFtaENMRkZCUVZGclFpeGhRVUZsYkVJc1VVRkJVVzFDTEU5QlFWTXNVMEZCVTA0c1IwRkRMME5TTEdGQlFXRlJMRVZCUVV0RkxHZENRVVZzUWl4SlFVRkpSQ3hGUVVGUlJDeEZRVUZMUnl4aFFVTmlSaXhIUVVGVExFbEJRMWhFTEVWQlFVdEZMR1ZCUVdsQ1pDeFhRVUZYTEZkQlF6TkNXU3hGUVVGTFR5eFpRVU5RVUN4RlFVRkxUeXhqUVVOT1RpeExRVXRRWkN4UlFVRlJjVUlzWVVGQmRVTXNiVUpCUVdwQ1FTeGhRVUU0UWtFc1lVRkJaU3hUUVVGVFF5eEhRVU5zUml4SlFVRkpNMElzUlVGQlMwWXNhMEpCUTB3NFFpeEpRVUZQYmtJc1ZVRkJWVzlDTEU5QlFWTXNTVUZCV1d4RExFMUJRVTFaTEV0QlFVdEZMRlZCUVZjc1IwRnJRbWhGTEU5QmFFSkJXaXhoUVVGaFJ5eEpRVUZCUVN4RlFVVmlWaXhUUVVGVExGZEJRMGhQTEdGQlFXRkhMRXRCUjFnMFFpeEZRVU5HUkN4RlFVRkhia01zVFVGQlRTeExRVUZOYjBNc1IwRkZaa1FzUlVGQlIzQkNMRXRCUVVzc1RVRkhWa1lzVVVGQlVYbENMR1ZCUVdVNVFpeE5RVWx3UWtFc1IwRkhWRXNzVVVGQlVYbENMR1ZCUVRKRExHMUNRVUZ1UWtFc1pVRkJaME5CTEdWQlFXbENMRk5CUVZNNVFpeFZRVU5xUmtnc1lVRkJZVWNpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEhScGJXVnljeTFpY205M2MyVnlhV1o1WEZ4dFlXbHVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO2lmKHJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIikscmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKSxyZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpLGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCl0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO2dsb2JhbC5fYmFiZWxQb2x5ZmlsbD0hMDt2YXIgREVGSU5FX1BST1BFUlRZPVwiZGVmaW5lUHJvcGVydHlcIjtmdW5jdGlvbiBkZWZpbmUoZSxpLHIpe2VbaV18fE9iamVjdFtERUZJTkVfUFJPUEVSVFldKGUsaSx7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLHZhbHVlOnJ9KX1kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSxcInBhZExlZnRcIixcIlwiLnBhZFN0YXJ0KSxkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSxcInBhZFJpZ2h0XCIsXCJcIi5wYWRFbmQpLFwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7W11bZV0mJmRlZmluZShBcnJheSxlLEZ1bmN0aW9uLmNhbGwuYmluZChbXVtlXSkpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKbmJHOWlZV3dpTENKZlltRmlaV3hRYjJ4NVptbHNiQ0lzSWtWeWNtOXlJaXdpUkVWR1NVNUZYMUJTVDFCRlVsUlpJaXdpWkdWbWFXNWxJaXdpVHlJc0ltdGxlU0lzSW5aaGJIVmxJaXdpVDJKcVpXTjBJaXdpZDNKcGRHRmliR1VpTENKamIyNW1hV2QxY21GaWJHVWlMQ0pUZEhKcGJtY2lMQ0p3Y205MGIzUjVjR1VpTENKd1lXUlRkR0Z5ZENJc0luQmhaRVZ1WkNJc0luTndiR2wwSWl3aVptOXlSV0ZqYUNJc0lrRnljbUY1SWl3aVJuVnVZM1JwYjI0aUxDSmpZV3hzSWl3aVltbHVaQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGUlFTeEhRVTVCUVN4UlFVRlJMR2RDUVVWU1FTeFJRVUZSTEN0Q1FVVlNRU3hSUVVGUkxEUkNRVVZLUXl4UFFVRlBReXhsUVVOVUxFMUJRVTBzU1VGQlNVTXNUVUZCVFN4clJFRkZiRUpHTEU5QlFVOURMR2RDUVVGQlFTeEZRVVZRTEVsQlFVbEZMR2RDUVVGclFpeHBRa0ZEZEVJc1UwRkJVME1zVDBGQlQwTXNSVUZCUjBNc1JVRkJTME1zUjBGRGRFSkdMRVZCUVVWRExFbEJRVkZGTEU5QlFVOU1MR2xDUVVGcFFrVXNSVUZCUjBNc1JVRkJTeXhEUVVONFEwY3NWVUZCUVVFc1JVRkRRVU1zWTBGQlFVRXNSVUZEUVVnc1RVRkJUMEVzU1VGSldFZ3NUMEZCVDA4c1QwRkJUME1zVlVGQlZ5eFZRVUZYTEVkQlFVZERMRlZCUTNaRFZDeFBRVUZQVHl4UFFVRlBReXhWUVVGWExGZEJRVmtzUjBGQlIwVXNVVUZGZUVNc1owMUJRV2ROUXl4TlFVRk5MRXRCUVV0RExGRkJRVkVzVTBGQlZWWXNSMEZETTA0c1IwRkJSMEVzU1VGQlVVWXNUMEZCVDJFc1RVRkJUMWdzUlVGQlMxa3NVMEZCVTBNc1MwRkJTME1zUzBGQlN5eEhRVUZIWkNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1ltRmlaV3d0Y0c5c2VXWnBiR3hjWEd4cFlseGNhVzVrWlhndWFuTWlmUT09IiwiIWZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByLGU9T2JqZWN0LnByb3RvdHlwZSxuPWUuaGFzT3duUHJvcGVydHksbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGk9by5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsYT1vLmFzeW5jSXRlcmF0b3J8fFwiQEBhc3luY0l0ZXJhdG9yXCIsYz1vLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIix1PVwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUsaD10LnJlZ2VuZXJhdG9yUnVudGltZTtpZihoKXUmJihtb2R1bGUuZXhwb3J0cz1oKTtlbHNleyhoPXQucmVnZW5lcmF0b3JSdW50aW1lPXU/bW9kdWxlLmV4cG9ydHM6e30pLndyYXA9dzt2YXIgcz1cInN1c3BlbmRlZFN0YXJ0XCIsZj1cInN1c3BlbmRlZFlpZWxkXCIsbD1cImV4ZWN1dGluZ1wiLHA9XCJjb21wbGV0ZWRcIix5PXt9LHY9e307dltpXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt2YXIgZD1PYmplY3QuZ2V0UHJvdG90eXBlT2YsZz1kJiZkKGQoUChbXSkpKTtnJiZnIT09ZSYmbi5jYWxsKGcsaSkmJih2PWcpO3ZhciBtPUUucHJvdG90eXBlPXgucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodik7Yi5wcm90b3R5cGU9bS5jb25zdHJ1Y3Rvcj1FLEUuY29uc3RydWN0b3I9YixFW2NdPWIuZGlzcGxheU5hbWU9XCJHZW5lcmF0b3JGdW5jdGlvblwiLGguaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbih0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZ0LmNvbnN0cnVjdG9yO3JldHVybiEhciYmKHI9PT1ifHxcIkdlbmVyYXRvckZ1bmN0aW9uXCI9PT0oci5kaXNwbGF5TmFtZXx8ci5uYW1lKSl9LGgubWFyaz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LEUpOih0Ll9fcHJvdG9fXz1FLGMgaW4gdHx8KHRbY109XCJHZW5lcmF0b3JGdW5jdGlvblwiKSksdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShtKSx0fSxoLmF3cmFwPWZ1bmN0aW9uKHQpe3JldHVybntfX2F3YWl0OnR9fSxqKF8ucHJvdG90eXBlKSxfLnByb3RvdHlwZVthXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxoLkFzeW5jSXRlcmF0b3I9XyxoLmFzeW5jPWZ1bmN0aW9uKHQscixlLG4pe3ZhciBvPW5ldyBfKHcodCxyLGUsbikpO3JldHVybiBoLmlzR2VuZXJhdG9yRnVuY3Rpb24ocik/bzpvLm5leHQoKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRvbmU/dC52YWx1ZTpvLm5leHQoKX0pfSxqKG0pLG1bY109XCJHZW5lcmF0b3JcIixtW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LG0udG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSxoLmtleXM9ZnVuY3Rpb24odCl7dmFyIHI9W107Zm9yKHZhciBlIGluIHQpci5wdXNoKGUpO3JldHVybiByLnJldmVyc2UoKSxmdW5jdGlvbiBlKCl7Zm9yKDtyLmxlbmd0aDspe3ZhciBuPXIucG9wKCk7aWYobiBpbiB0KXJldHVybiBlLnZhbHVlPW4sZS5kb25lPSExLGV9cmV0dXJuIGUuZG9uZT0hMCxlfX0saC52YWx1ZXM9UCxOLnByb3RvdHlwZT17Y29uc3RydWN0b3I6TixyZXNldDpmdW5jdGlvbih0KXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD1yLHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy5tZXRob2Q9XCJuZXh0XCIsdGhpcy5hcmc9cix0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChHKSwhdClmb3IodmFyIGUgaW4gdGhpcylcInRcIj09PWUuY2hhckF0KDApJiZuLmNhbGwodGhpcyxlKSYmIWlzTmFOKCtlLnNsaWNlKDEpKSYmKHRoaXNbZV09cil9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLmRvbmU9ITA7dmFyIHQ9dGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKHQpe2lmKHRoaXMuZG9uZSl0aHJvdyB0O3ZhciBlPXRoaXM7ZnVuY3Rpb24gbyhuLG8pe3JldHVybiBjLnR5cGU9XCJ0aHJvd1wiLGMuYXJnPXQsZS5uZXh0PW4sbyYmKGUubWV0aG9kPVwibmV4dFwiLGUuYXJnPXIpLCEhb31mb3IodmFyIGk9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgYT10aGlzLnRyeUVudHJpZXNbaV0sYz1hLmNvbXBsZXRpb247aWYoXCJyb290XCI9PT1hLnRyeUxvYylyZXR1cm4gbyhcImVuZFwiKTtpZihhLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgdT1uLmNhbGwoYSxcImNhdGNoTG9jXCIpLGg9bi5jYWxsKGEsXCJmaW5hbGx5TG9jXCIpO2lmKHUmJmgpe2lmKHRoaXMucHJldjxhLmNhdGNoTG9jKXJldHVybiBvKGEuY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxhLmZpbmFsbHlMb2MpcmV0dXJuIG8oYS5maW5hbGx5TG9jKX1lbHNlIGlmKHUpe2lmKHRoaXMucHJldjxhLmNhdGNoTG9jKXJldHVybiBvKGEuY2F0Y2hMb2MsITApfWVsc2V7aWYoIWgpdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7aWYodGhpcy5wcmV2PGEuZmluYWxseUxvYylyZXR1cm4gbyhhLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24odCxyKXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbZV07aWYoby50cnlMb2M8PXRoaXMucHJldiYmbi5jYWxsKG8sXCJmaW5hbGx5TG9jXCIpJiZ0aGlzLnByZXY8by5maW5hbGx5TG9jKXt2YXIgaT1vO2JyZWFrfX1pJiYoXCJicmVha1wiPT09dHx8XCJjb250aW51ZVwiPT09dCkmJmkudHJ5TG9jPD1yJiZyPD1pLmZpbmFsbHlMb2MmJihpPW51bGwpO3ZhciBhPWk/aS5jb21wbGV0aW9uOnt9O3JldHVybiBhLnR5cGU9dCxhLmFyZz1yLGk/KHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMubmV4dD1pLmZpbmFsbHlMb2MseSk6dGhpcy5jb21wbGV0ZShhKX0sY29tcGxldGU6ZnVuY3Rpb24odCxyKXtpZihcInRocm93XCI9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuXCJicmVha1wiPT09dC50eXBlfHxcImNvbnRpbnVlXCI9PT10LnR5cGU/dGhpcy5uZXh0PXQuYXJnOlwicmV0dXJuXCI9PT10LnR5cGU/KHRoaXMucnZhbD10aGlzLmFyZz10LmFyZyx0aGlzLm1ldGhvZD1cInJldHVyblwiLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09dC50eXBlJiZyJiYodGhpcy5uZXh0PXIpLHl9LGZpbmlzaDpmdW5jdGlvbih0KXtmb3IodmFyIHI9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3I+PTA7LS1yKXt2YXIgZT10aGlzLnRyeUVudHJpZXNbcl07aWYoZS5maW5hbGx5TG9jPT09dClyZXR1cm4gdGhpcy5jb21wbGV0ZShlLmNvbXBsZXRpb24sZS5hZnRlckxvYyksRyhlKSx5fX0sY2F0Y2g6ZnVuY3Rpb24odCl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIGU9dGhpcy50cnlFbnRyaWVzW3JdO2lmKGUudHJ5TG9jPT09dCl7dmFyIG49ZS5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PW4udHlwZSl7dmFyIG89bi5hcmc7RyhlKX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6UCh0KSxyZXN1bHROYW1lOmUsbmV4dExvYzpufSxcIm5leHRcIj09PXRoaXMubWV0aG9kJiYodGhpcy5hcmc9cikseX19fWZ1bmN0aW9uIHcodCxyLGUsbil7dmFyIG89ciYmci5wcm90b3R5cGUgaW5zdGFuY2VvZiB4P3I6eCxpPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLGE9bmV3IE4obnx8W10pO3JldHVybiBpLl9pbnZva2U9ZnVuY3Rpb24odCxyLGUpe3ZhciBuPXM7cmV0dXJuIGZ1bmN0aW9uKG8saSl7aWYobj09PWwpdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtpZihuPT09cCl7aWYoXCJ0aHJvd1wiPT09byl0aHJvdyBpO3JldHVybiBTKCl9Zm9yKGUubWV0aG9kPW8sZS5hcmc9aTs7KXt2YXIgYT1lLmRlbGVnYXRlO2lmKGEpe3ZhciBjPU8oYSxlKTtpZihjKXtpZihjPT09eSljb250aW51ZTtyZXR1cm4gY319aWYoXCJuZXh0XCI9PT1lLm1ldGhvZCllLnNlbnQ9ZS5fc2VudD1lLmFyZztlbHNlIGlmKFwidGhyb3dcIj09PWUubWV0aG9kKXtpZihuPT09cyl0aHJvdyBuPXAsZS5hcmc7ZS5kaXNwYXRjaEV4Y2VwdGlvbihlLmFyZyl9ZWxzZVwicmV0dXJuXCI9PT1lLm1ldGhvZCYmZS5hYnJ1cHQoXCJyZXR1cm5cIixlLmFyZyk7bj1sO3ZhciB1PUwodCxyLGUpO2lmKFwibm9ybWFsXCI9PT11LnR5cGUpe2lmKG49ZS5kb25lP3A6Zix1LmFyZz09PXkpY29udGludWU7cmV0dXJue3ZhbHVlOnUuYXJnLGRvbmU6ZS5kb25lfX1cInRocm93XCI9PT11LnR5cGUmJihuPXAsZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPXUuYXJnKX19fSh0LGUsYSksaX1mdW5jdGlvbiBMKHQscixlKXt0cnl7cmV0dXJue3R5cGU6XCJub3JtYWxcIixhcmc6dC5jYWxsKHIsZSl9fWNhdGNoKHQpe3JldHVybnt0eXBlOlwidGhyb3dcIixhcmc6dH19fWZ1bmN0aW9uIHgoKXt9ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBFKCl7fWZ1bmN0aW9uIGoodCl7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKHIpe3Rbcl09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2ludm9rZShyLHQpfX0pfWZ1bmN0aW9uIF8ocil7ZnVuY3Rpb24gZSh0LG8saSxhKXt2YXIgYz1MKHJbdF0scixvKTtpZihcInRocm93XCIhPT1jLnR5cGUpe3ZhciB1PWMuYXJnLGg9dS52YWx1ZTtyZXR1cm4gaCYmXCJvYmplY3RcIj09dHlwZW9mIGgmJm4uY2FsbChoLFwiX19hd2FpdFwiKT9Qcm9taXNlLnJlc29sdmUoaC5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHQpe2UoXCJuZXh0XCIsdCxpLGEpfSxmdW5jdGlvbih0KXtlKFwidGhyb3dcIix0LGksYSl9KTpQcm9taXNlLnJlc29sdmUoaCkudGhlbihmdW5jdGlvbih0KXt1LnZhbHVlPXQsaSh1KX0sYSl9YShjLmFyZyl9dmFyIG87XCJvYmplY3RcIj09dHlwZW9mIHQucHJvY2VzcyYmdC5wcm9jZXNzLmRvbWFpbiYmKGU9dC5wcm9jZXNzLmRvbWFpbi5iaW5kKGUpKSx0aGlzLl9pbnZva2U9ZnVuY3Rpb24odCxyKXtmdW5jdGlvbiBuKCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7ZSh0LHIsbixvKX0pfXJldHVybiBvPW8/by50aGVuKG4sbik6bigpfX1mdW5jdGlvbiBPKHQsZSl7dmFyIG49dC5pdGVyYXRvcltlLm1ldGhvZF07aWYobj09PXIpe2lmKGUuZGVsZWdhdGU9bnVsbCxcInRocm93XCI9PT1lLm1ldGhvZCl7aWYodC5pdGVyYXRvci5yZXR1cm4mJihlLm1ldGhvZD1cInJldHVyblwiLGUuYXJnPXIsTyh0LGUpLFwidGhyb3dcIj09PWUubWV0aG9kKSlyZXR1cm4geTtlLm1ldGhvZD1cInRocm93XCIsZS5hcmc9bmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIil9cmV0dXJuIHl9dmFyIG89TChuLHQuaXRlcmF0b3IsZS5hcmcpO2lmKFwidGhyb3dcIj09PW8udHlwZSlyZXR1cm4gZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPW8uYXJnLGUuZGVsZWdhdGU9bnVsbCx5O3ZhciBpPW8uYXJnO3JldHVybiBpP2kuZG9uZT8oZVt0LnJlc3VsdE5hbWVdPWkudmFsdWUsZS5uZXh0PXQubmV4dExvYyxcInJldHVyblwiIT09ZS5tZXRob2QmJihlLm1ldGhvZD1cIm5leHRcIixlLmFyZz1yKSxlLmRlbGVnYXRlPW51bGwseSk6aTooZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPW5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSxlLmRlbGVnYXRlPW51bGwseSl9ZnVuY3Rpb24gayh0KXt2YXIgcj17dHJ5TG9jOnRbMF19OzEgaW4gdCYmKHIuY2F0Y2hMb2M9dFsxXSksMiBpbiB0JiYoci5maW5hbGx5TG9jPXRbMl0sci5hZnRlckxvYz10WzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaChyKX1mdW5jdGlvbiBHKHQpe3ZhciByPXQuY29tcGxldGlvbnx8e307ci50eXBlPVwibm9ybWFsXCIsZGVsZXRlIHIuYXJnLHQuY29tcGxldGlvbj1yfWZ1bmN0aW9uIE4odCl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sdC5mb3JFYWNoKGssdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gUCh0KXtpZih0KXt2YXIgZT10W2ldO2lmKGUpcmV0dXJuIGUuY2FsbCh0KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm5leHQpcmV0dXJuIHQ7aWYoIWlzTmFOKHQubGVuZ3RoKSl7dmFyIG89LTEsYT1mdW5jdGlvbiBlKCl7Zm9yKDsrK288dC5sZW5ndGg7KWlmKG4uY2FsbCh0LG8pKXJldHVybiBlLnZhbHVlPXRbb10sZS5kb25lPSExLGU7cmV0dXJuIGUudmFsdWU9cixlLmRvbmU9ITAsZX07cmV0dXJuIGEubmV4dD1hfX1yZXR1cm57bmV4dDpTfX1mdW5jdGlvbiBTKCl7cmV0dXJue3ZhbHVlOnIsZG9uZTohMH19fShcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5KMWJuUnBiV1V1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2lkVzVrWldacGJtVmtJaXdpVDNBaUxDSlBZbXBsWTNRaUxDSndjbTkwYjNSNWNHVWlMQ0pvWVhOUGQyNGlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJaVJUZVcxaWIyd2lMQ0pUZVcxaWIyd2lMQ0pwZEdWeVlYUnZjbE41YldKdmJDSXNJbWwwWlhKaGRHOXlJaXdpWVhONWJtTkpkR1Z5WVhSdmNsTjViV0p2YkNJc0ltRnplVzVqU1hSbGNtRjBiM0lpTENKMGIxTjBjbWx1WjFSaFoxTjViV0p2YkNJc0luUnZVM1J5YVc1blZHRm5JaXdpYVc1TmIyUjFiR1VpTENKdGIyUjFiR1VpTENKeWRXNTBhVzFsSWl3aWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbElpd2laWGh3YjNKMGN5SXNJbmR5WVhBaUxDSkhaVzVUZEdGMFpWTjFjM0JsYm1SbFpGTjBZWEowSWl3aVIyVnVVM1JoZEdWVGRYTndaVzVrWldSWmFXVnNaQ0lzSWtkbGJsTjBZWFJsUlhobFkzVjBhVzVuSWl3aVIyVnVVM1JoZEdWRGIyMXdiR1YwWldRaUxDSkRiMjUwYVc1MVpWTmxiblJwYm1Wc0lpd2lTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWlMQ0owYUdseklpd2laMlYwVUhKdmRHOGlMQ0puWlhSUWNtOTBiM1I1Y0dWUFppSXNJazVoZEdsMlpVbDBaWEpoZEc5eVVISnZkRzkwZVhCbElpd2lkbUZzZFdWeklpd2lZMkZzYkNJc0lrZHdJaXdpUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVRY205MGIzUjVjR1VpTENKSFpXNWxjbUYwYjNJaUxDSmpjbVZoZEdVaUxDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpSXNJbU52Ym5OMGNuVmpkRzl5SWl3aVpHbHpjR3hoZVU1aGJXVWlMQ0pwYzBkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1SWl3aVoyVnVSblZ1SWl3aVkzUnZjaUlzSW01aGJXVWlMQ0p0WVhKcklpd2ljMlYwVUhKdmRHOTBlWEJsVDJZaUxDSmZYM0J5YjNSdlgxOGlMQ0poZDNKaGNDSXNJbUZ5WnlJc0lsOWZZWGRoYVhRaUxDSmtaV1pwYm1WSmRHVnlZWFJ2Y2sxbGRHaHZaSE1pTENKQmMzbHVZMGwwWlhKaGRHOXlJaXdpWVhONWJtTWlMQ0pwYm01bGNrWnVJaXdpYjNWMFpYSkdiaUlzSW5ObGJHWWlMQ0owY25sTWIyTnpUR2x6ZENJc0ltbDBaWElpTENKdVpYaDBJaXdpZEdobGJpSXNJbkpsYzNWc2RDSXNJbVJ2Ym1VaUxDSjJZV3gxWlNJc0luUnZVM1J5YVc1bklpd2lhMlY1Y3lJc0ltOWlhbVZqZENJc0ltdGxlU0lzSW5CMWMyZ2lMQ0p5WlhabGNuTmxJaXdpYkdWdVozUm9JaXdpY0c5d0lpd2lRMjl1ZEdWNGRDSXNJbkpsYzJWMElpd2ljMnRwY0ZSbGJYQlNaWE5sZENJc0luQnlaWFlpTENKelpXNTBJaXdpWDNObGJuUWlMQ0prWld4bFoyRjBaU0lzSW0xbGRHaHZaQ0lzSW5SeWVVVnVkSEpwWlhNaUxDSm1iM0pGWVdOb0lpd2ljbVZ6WlhSVWNubEZiblJ5ZVNJc0ltTm9ZWEpCZENJc0ltbHpUbUZPSWl3aWMyeHBZMlVpTENKemRHOXdJaXdpY205dmRGSmxZMjl5WkNJc0ltTnZiWEJzWlhScGIyNGlMQ0owZVhCbElpd2ljblpoYkNJc0ltUnBjM0JoZEdOb1JYaGpaWEIwYVc5dUlpd2laWGhqWlhCMGFXOXVJaXdpWTI5dWRHVjRkQ0lzSW1oaGJtUnNaU0lzSW14dll5SXNJbU5oZFdkb2RDSXNJbkpsWTI5eVpDSXNJbWtpTENKbGJuUnllU0lzSW5SeWVVeHZZeUlzSW1oaGMwTmhkR05vSWl3aWFHRnpSbWx1WVd4c2VTSXNJbU5oZEdOb1RHOWpJaXdpWm1sdVlXeHNlVXh2WXlJc0lrVnljbTl5SWl3aVlXSnlkWEIwSWl3aVptbHVZV3hzZVVWdWRISjVJaXdpWTI5dGNHeGxkR1VpTENKaFpuUmxja3h2WXlJc0ltWnBibWx6YUNJc0ltTmhkR05vSWl3aWRHaHliM2R1SWl3aVpHVnNaV2RoZEdWWmFXVnNaQ0lzSW1sMFpYSmhZbXhsSWl3aWNtVnpkV3gwVG1GdFpTSXNJbTVsZUhSTWIyTWlMQ0p3Y205MGIwZGxibVZ5WVhSdmNpSXNJbWRsYm1WeVlYUnZjaUlzSWw5cGJuWnZhMlVpTENKemRHRjBaU0lzSW1SdmJtVlNaWE4xYkhRaUxDSmtaV3hsWjJGMFpWSmxjM1ZzZENJc0ltMWhlV0psU1c1MmIydGxSR1ZzWldkaGRHVWlMQ0owY25sRFlYUmphQ0lzSW1adUlpd2liMkpxSWl3aVpYSnlJaXdpYVc1MmIydGxJaXdpY21WemIyeDJaU0lzSW5KbGFtVmpkQ0lzSWxCeWIyMXBjMlVpTENKMWJuZHlZWEJ3WldRaUxDSndjbVYyYVc5MWMxQnliMjFwYzJVaUxDSndjbTlqWlhOeklpd2laRzl0WVdsdUlpd2lZbWx1WkNJc0ltTmhiR3hKYm5admEyVlhhWFJvVFdWMGFHOWtRVzVrUVhKbklpd2ljbVYwZFhKdUlpd2lWSGx3WlVWeWNtOXlJaXdpYVc1bWJ5SXNJbkIxYzJoVWNubEZiblJ5ZVNJc0lteHZZM01pTENKcGRHVnlZWFJ2Y2sxbGRHaHZaQ0lzSW5kcGJtUnZkeUpkTENKdFlYQndhVzVuY3lJNklrTkJWVU1zVTBGQlZVRXNSMEZEVkN4aFFVVkJMRWxCUlVsRExFVkJSa0ZETEVWQlFVdERMRTlCUVU5RExGVkJRMXBETEVWQlFWTklMRVZCUVVkSkxHVkJSVnBETEVWQlFUUkNMRzFDUVVGWVF5eFBRVUYzUWtFc1QwRkJVeXhIUVVOc1JFTXNSVUZCYVVKR0xFVkJRVkZITEZWQlFWa3NZVUZEY2tORExFVkJRWE5DU2l4RlFVRlJTeXhsUVVGcFFpeHJRa0ZETDBORExFVkJRVzlDVGl4RlFVRlJUeXhoUVVGbExHZENRVVV6UTBNc1JVRkJOa0lzYVVKQlFWaERMRTlCUTJ4Q1F5eEZRVUZWYWtJc1JVRkJUMnRDTEcxQ1FVTnlRaXhIUVVGSlJDeEZRVU5GUml4SlFVZEdReXhQUVVGUFJ5eFJRVUZWUml4UFFVcHlRaXhGUVdGQlFTeEZRVUZWYWtJc1JVRkJUMnRDTEcxQ1FVRnhRa2dzUlVGQlYwTXNUMEZCVDBjc1VVRkJWU3hKUVdNeFJFTXNTMEZCVDBFc1JVRnZRbVlzU1VGQlNVTXNSVUZCZVVJc2FVSkJRM3BDUXl4RlFVRjVRaXhwUWtGRGVrSkRMRVZCUVc5Q0xGbEJRM0JDUXl4RlFVRnZRaXhaUVVsd1FrTXNSVUZCYlVJc1IwRlpia0pETEVWQlFXOUNMRWRCUTNoQ1FTeEZRVUZyUW1wQ0xFZEJRV3RDTEZkQlEyeERMRTlCUVU5clFpeE5RVWRVTEVsQlFVbERMRVZCUVZkNlFpeFBRVUZQTUVJc1pVRkRiRUpETEVWQlFUQkNSaXhIUVVGWlFTeEZRVUZUUVN4RlFVRlRSeXhGUVVGUExFMUJReTlFUkN4SFFVTkJRU3hKUVVFMFFqVkNMRWRCUXpWQ1J5eEZRVUZQTWtJc1MwRkJTMFlzUlVGQmVVSnlRaXhMUVVkMlEybENMRVZCUVc5Q1NTeEhRVWQwUWl4SlFVRkpSeXhGUVVGTFF5eEZRVUV5UWpsQ0xGVkJRMnhESzBJc1JVRkJWUzlDTEZWQlFWbEVMRTlCUVU5cFF5eFBRVUZQVml4SFFVTjBRMWNzUlVGQmEwSnFReXhWUVVGWk5rSXNSVUZCUjBzc1dVRkJZMG9zUlVGREwwTkJMRVZCUVRKQ1NTeFpRVUZqUkN4RlFVTjZRMGdzUlVGQk1rSnlRaXhIUVVONlFuZENMRVZCUVd0Q1JTeFpRVUZqTEc5Q1FWbHNRM1JDTEVWQlFWRjFRaXh2UWtGQmMwSXNVMEZCVTBNc1IwRkRja01zU1VGQlNVTXNSVUZCZVVJc2JVSkJRVmhFTEVkQlFYbENRU3hGUVVGUFNDeFpRVU5zUkN4UlFVRlBTU3hKUVVOSVFTeEpRVUZUVEN4SFFVY3lRaXgxUWtGQmJrTkxMRVZCUVV0SUxHRkJRV1ZITEVWQlFVdERMRkZCU1doRE1VSXNSVUZCVVRKQ0xFdEJRVThzVTBGQlUwZ3NSMEZWZEVJc1QwRlVTWFJETEU5QlFVOHdReXhsUVVOVU1VTXNUMEZCVHpCRExHVkJRV1ZLTEVWQlFWRlFMRWxCUlRsQ1R5eEZRVUZQU3l4VlFVRlpXaXhGUVVOaWNrSXNTMEZCY1VJMFFpeEpRVU42UWtFc1JVRkJUelZDTEVkQlFYRkNMSE5DUVVkb1F6UkNMRVZCUVU5eVF5eFZRVUZaUkN4UFFVRlBhVU1zVDBGQlQwZ3NSMEZETVVKUkxFZEJUMVI0UWl4RlFVRlJPRUlzVFVGQlVTeFRRVUZUUXl4SFFVTjJRaXhOUVVGUExFTkJRVVZETEZGQlFWTkVMRWxCYTBad1FrVXNSVUZCYzBKRExFVkJRV012UXl4WFFVTndReXRETEVWQlFXTXZReXhWUVVGVlR5eEhRVUYxUWl4WFFVTTNReXhQUVVGUFowSXNUVUZGVkZZc1JVRkJVV3RETEdOQlFXZENRU3hGUVV0NFFteERMRVZCUVZGdFF5eE5RVUZSTEZOQlFWTkRMRVZCUVZORExFVkJRVk5ETEVWQlFVMURMRWRCUXk5RExFbEJRVWxETEVWQlFVOHNTVUZCU1U0c1JVRkRZaTlDTEVWQlFVdHBReXhGUVVGVFF5eEZRVUZUUXl4RlFVRk5ReXhKUVVjdlFpeFBRVUZQZGtNc1JVRkJVWFZDTEc5Q1FVRnZRbU1zUjBGREwwSkhMRVZCUTBGQkxFVkJRVXRETEU5QlFVOURMRXRCUVVzc1UwRkJVME1zUjBGRGVFSXNUMEZCVDBFc1JVRkJUME1zUzBGQlQwUXNSVUZCVDBVc1RVRkJVVXdzUlVGQlMwTXNWVUZ6UzJwRVVpeEZRVUZ6UW1wQ0xFZEJSWFJDUVN4RlFVRkhjRUlzUjBGQmNVSXNXVUZQZUVKdlFpeEZRVUZIZUVJc1IwRkJhMElzVjBGRGJrSXNUMEZCVDJ0Q0xFMUJSMVJOTEVWQlFVYzRRaXhUUVVGWExGZEJRMW9zVFVGQlR5eHpRa0ZyUTFRNVF5eEZRVUZSSzBNc1MwRkJUeXhUUVVGVFF5eEhRVU4wUWl4SlFVRkpSQ3hGUVVGUExFZEJRMWdzU1VGQlN5eEpRVUZKUlN4TFFVRlBSQ3hGUVVOa1JDeEZRVUZMUnl4TFFVRkxSQ3hIUVUxYUxFOUJTa0ZHTEVWQlFVdEpMRlZCU1VVc1UwRkJVMVlzU1VGRFpDeExRVUZQVFN4RlFVRkxTeXhSUVVGUkxFTkJRMnhDTEVsQlFVbElMRVZCUVUxR0xFVkJRVXROTEUxQlEyWXNSMEZCU1Vvc1MwRkJUMFFzUlVGSFZDeFBRVVpCVUN4RlFVRkxTU3hOUVVGUlNTeEZRVU5pVWl4RlFVRkxSeXhOUVVGQlFTeEZRVU5GU0N4RlFWRllMRTlCUkVGQkxFVkJRVXRITEUxQlFVRkJMRVZCUTBWSUxFbEJjME5ZZWtNc1JVRkJVV01zVDBGQlUwRXNSVUZOYWtKM1F5eEZRVUZSYmtVc1ZVRkJXU3hEUVVOc1FtdERMRmxCUVdGcFF5eEZRVVZpUXl4TlFVRlBMRk5CUVZORExFZEJZMlFzUjBGaVFUbERMRXRCUVVzclF5eExRVUZQTEVWQlExb3ZReXhMUVVGTEswSXNTMEZCVHl4RlFVZGFMMElzUzBGQlMyZEVMRXRCUVU5b1JDeExRVUZMYVVRc1RVRkJVVE5GTEVWQlEzcENNRUlzUzBGQlMydERMRTFCUVVGQkxFVkJRMHhzUXl4TFFVRkxhMFFzVTBGQlZ5eExRVVZvUW14RUxFdEJRVXR0UkN4UFFVRlRMRTlCUTJSdVJDeExRVUZMY1VJc1NVRkJUUzlETEVWQlJWZ3dRaXhMUVVGTGIwUXNWMEZCVjBNc1VVRkJVVU1zU1VGRmJrSlNMRVZCUTBnc1NVRkJTeXhKUVVGSk9VSXNTMEZCVVdoQ0xFdEJSVkVzVFVGQmJrSm5RaXhGUVVGTGRVTXNUMEZCVHl4SlFVTmFOMFVzUlVGQlR6SkNMRXRCUVV0TUxFdEJRVTFuUWl4TFFVTnFRbmRETEU5QlFVOTRReXhGUVVGTGVVTXNUVUZCVFN4TlFVTnlRbnBFTEV0QlFVdG5RaXhIUVVGUk1VTXNTVUZOY2tKdlJpeExRVUZOTEZkQlEwb3hSQ3hMUVVGTGEwTXNUVUZCUVVFc1JVRkZUQ3hKUVVOSmVVSXNSVUZFV1RORUxFdEJRVXR2UkN4WFFVRlhMRWRCUTB4UkxGZEJRek5DTEVkQlFYZENMRlZCUVhCQ1JDeEZRVUZYUlN4TFFVTmlMRTFCUVUxR0xFVkJRVmQwUXl4SlFVZHVRaXhQUVVGUGNrSXNTMEZCU3poRUxFMUJSMlJETEd0Q1FVRnRRaXhUUVVGVFF5eEhRVU14UWl4SFFVRkphRVVzUzBGQlMydERMRXRCUTFBc1RVRkJUVGhDTEVWQlIxSXNTVUZCU1VNc1JVRkJWV3BGTEV0QlEyUXNVMEZCVTJ0RkxFVkJRVTlETEVWQlFVdERMRWRCV1c1Q0xFOUJXRUZETEVWQlFVOVNMRXRCUVU4c1VVRkRaRkVzUlVGQlQyaEVMRWxCUVUweVF5eEZRVU5pUXl4RlFVRlJiRU1zUzBGQlQyOURMRVZCUlZoRExFbEJSMFpJTEVWQlFWRmtMRTlCUVZNc1QwRkRha0pqTEVWQlFWRTFReXhKUVVGTkwwTXNTMEZIVGpoR0xFVkJSMW9zU1VGQlN5eEpRVUZKUlN4RlFVRkpkRVVzUzBGQlMyOUVMRmRCUVZkV0xFOUJRVk1zUlVGQlJ6UkNMRWRCUVVzc1NVRkJTMEVzUlVGQlJ5eERRVU53UkN4SlFVRkpReXhGUVVGUmRrVXNTMEZCUzI5RUxGZEJRVmRyUWl4SFFVTjRRa1FzUlVGQlUwVXNSVUZCVFZnc1YwRkZia0lzUjBGQmNVSXNVMEZCYWtKWExFVkJRVTFETEU5QlNWSXNUMEZCVDA0c1JVRkJUeXhQUVVkb1FpeEhRVUZKU3l4RlFVRk5ReXhSUVVGVmVFVXNTMEZCU3l0RExFdEJRVTBzUTBGRE4wSXNTVUZCU1RCQ0xFVkJRVmN2Uml4RlFVRlBNa0lzUzBGQlMydEZMRVZCUVU4c1dVRkRPVUpITEVWQlFXRm9SeXhGUVVGUE1rSXNTMEZCUzJ0RkxFVkJRVThzWTBGRmNFTXNSMEZCU1VVc1IwRkJXVU1zUlVGQldTeERRVU14UWl4SFFVRkpNVVVzUzBGQlN5dERMRXRCUVU5M1FpeEZRVUZOU1N4VFFVTndRaXhQUVVGUFZDeEZRVUZQU3l4RlFVRk5TU3hWUVVGQlFTeEhRVU5tTEVkQlFVa3pSU3hMUVVGTEswTXNTMEZCVDNkQ0xFVkJRVTFMTEZkQlF6TkNMRTlCUVU5V0xFVkJRVTlMTEVWQlFVMUxMR2xDUVVkcVFpeEhRVUZKU0N4SFFVTlVMRWRCUVVsNlJTeExRVUZMSzBNc1MwRkJUM2RDTEVWQlFVMUpMRk5CUTNCQ0xFOUJRVTlVTEVWQlFVOUxMRVZCUVUxSkxGVkJRVUZCTEU5QlIycENMRU5CUVVFc1NVRkJTVVFzUlVGTlZDeE5RVUZOTEVsQlFVbEhMRTFCUVUwc01FTkJUR2hDTEVkQlFVazNSU3hMUVVGTEswTXNTMEZCVDNkQ0xFVkJRVTFMTEZkQlEzQkNMRTlCUVU5V0xFVkJRVTlMTEVWQlFVMUxMR2RDUVZVNVFrVXNUMEZCVVN4VFFVRlRha0lzUlVGQlRYaERMRWRCUTNKQ0xFbEJRVXNzU1VGQlNXbEVMRVZCUVVsMFJTeExRVUZMYjBRc1YwRkJWMVlzVDBGQlV5eEZRVUZITkVJc1IwRkJTeXhKUVVGTFFTeEZRVUZITEVOQlEzQkVMRWxCUVVsRExFVkJRVkYyUlN4TFFVRkxiMFFzVjBGQlYydENMRWRCUXpWQ0xFZEJRVWxETEVWQlFVMURMRkZCUVZWNFJTeExRVUZMSzBNc1RVRkRja0p5UlN4RlFVRlBNa0lzUzBGQlMydEZMRVZCUVU4c1pVRkRia0oyUlN4TFFVRkxLME1zUzBGQlQzZENMRVZCUVUxTExGZEJRVmtzUTBGRGFFTXNTVUZCU1Vjc1JVRkJaVklzUlVGRGJrSXNUMEZKUVZFc1NVRkRWU3hWUVVGVWJFSXNSMEZEVXl4aFFVRlVRU3hKUVVORWEwSXNSVUZCWVZBc1VVRkJWVzVFTEVkQlEzWkNRU3hIUVVGUE1FUXNSVUZCWVVnc1lVRkhkRUpITEVWQlFXVXNUVUZIYWtJc1NVRkJTVllzUlVGQlUxVXNSVUZCWlVFc1JVRkJZVzVDTEZkQlFXRXNSMEZKZEVRc1QwRklRVk1zUlVGQlQxSXNTMEZCVDBFc1JVRkRaRkVzUlVGQlQyaEVMRWxCUVUxQkxFVkJSVlF3UkN4SFFVTkdMMFVzUzBGQlMyMUVMRTlCUVZNc1QwRkRaRzVFTEV0QlFVc3JRaXhMUVVGUFowUXNSVUZCWVVnc1YwRkRiRUk1UlN4SFFVZEdSU3hMUVVGTFowWXNVMEZCVTFnc1NVRkhka0pYTEZOQlFWVXNVMEZCVTFnc1JVRkJVVmtzUjBGRGVrSXNSMEZCYjBJc1ZVRkJhRUphTEVWQlFVOVNMRXRCUTFRc1RVRkJUVkVzUlVGQlQyaEVMRWxCWTJZc1RVRlliMElzVlVGQmFFSm5SQ3hGUVVGUFVpeE5RVU5UTEdGQlFXaENVU3hGUVVGUFVpeExRVU5VTjBRc1MwRkJTeXRDTEV0QlFVOXpReXhGUVVGUGFFUXNTVUZEVFN4WFFVRm9RbWRFTEVWQlFVOVNMRTFCUTJoQ04wUXNTMEZCU3poRUxFdEJRVTg1UkN4TFFVRkxjVUlzU1VGQlRXZEVMRVZCUVU5b1JDeEpRVU01UW5KQ0xFdEJRVXR0UkN4UFFVRlRMRk5CUTJSdVJDeExRVUZMSzBJc1MwRkJUeXhQUVVOaExGZEJRV2hDYzBNc1JVRkJUMUlzVFVGQmNVSnZRaXhKUVVOeVEycEdMRXRCUVVzclFpeExRVUZQYTBRc1IwRkhVRzVHTEVkQlIxUnZSaXhQUVVGUkxGTkJRVk5PTEVkQlEyWXNTVUZCU3l4SlFVRkpUaXhGUVVGSmRFVXNTMEZCUzI5RUxGZEJRVmRXTEU5QlFWTXNSVUZCUnpSQ0xFZEJRVXNzU1VGQlMwRXNSVUZCUnl4RFFVTndSQ3hKUVVGSlF5eEZRVUZSZGtVc1MwRkJTMjlFTEZkQlFWZHJRaXhIUVVNMVFpeEhRVUZKUXl4RlFVRk5TeXhoUVVGbFFTeEZRVWQyUWl4UFFVWkJOVVVzUzBGQlMyZEdMRk5CUVZOVUxFVkJRVTFZTEZkQlFWbFhMRVZCUVUxVkxGVkJRM1JETTBJc1JVRkJZMmxDTEVkQlExQjZSU3hKUVV0aWNVWXNUVUZCVXl4VFFVRlRXQ3hIUVVOb1FpeEpRVUZMTEVsQlFVbEdMRVZCUVVsMFJTeExRVUZMYjBRc1YwRkJWMVlzVDBGQlV5eEZRVUZITkVJc1IwRkJTeXhKUVVGTFFTeEZRVUZITEVOQlEzQkVMRWxCUVVsRExFVkJRVkYyUlN4TFFVRkxiMFFzVjBGQlYydENMRWRCUXpWQ0xFZEJRVWxETEVWQlFVMURMRk5CUVZkQkxFVkJRVkVzUTBGRE0wSXNTVUZCU1Vnc1JVRkJVMFVzUlVGQlRWZ3NWMEZEYmtJc1IwRkJiMElzVlVGQmFFSlRMRVZCUVU5U0xFdEJRV3RDTEVOQlF6TkNMRWxCUVVsMVFpeEZRVUZUWml4RlFVRlBhRVFzU1VGRGNFSnBReXhGUVVGamFVSXNSMEZGYUVJc1QwRkJUMkVzUjBGTldDeE5RVUZOTEVsQlFVbFFMRTFCUVUwc01FSkJSMnhDVVN4alFVRmxMRk5CUVZORExFVkJRVlZETEVWQlFWbERMRWRCWVRWRExFOUJXa0Y0Uml4TFFVRkxhMFFzVTBGQlZ5eERRVU5rYmtVc1UwRkJWWEZDTEVWQlFVOXJSaXhIUVVOcVFrTXNWMEZCV1VFc1JVRkRXa01zVVVGQlUwRXNSMEZIVXl4VFFVRm9RbmhHTEV0QlFVdHRSQ3hUUVVkUWJrUXNTMEZCUzNGQ0xFbEJRVTB2UXl4SFFVZE9kMElzU1VFdmNVSllMRk5CUVZOTUxFVkJRVXRwUXl4RlFVRlRReXhGUVVGVFF5eEZRVUZOUXl4SFFVVndReXhKUVVGSk5FUXNSVUZCYVVJNVJDeEhRVUZYUVN4RlFVRlJiRVFzY1VKQlFYRkNLMElzUlVGQldXMUNMRVZCUVZWdVFpeEZRVU12Uld0R0xFVkJRVmxzU0N4UFFVRlBhVU1zVDBGQlQyZEdMRVZCUVdWb1NDeFhRVU42UTNkR0xFVkJRVlVzU1VGQlNYSkNMRVZCUVZGbUxFZEJRV1VzU1VGTmVrTXNUMEZHUVRaRUxFVkJRVlZETEZGQk9FMWFMRk5CUVRCQ2FrVXNSVUZCVTBVc1JVRkJUWEZETEVkQlEzWkRMRWxCUVVreVFpeEZRVUZSYkVjc1JVRkZXaXhQUVVGUExGTkJRV2RDZVVRc1JVRkJVVGxDTEVkQlF6ZENMRWRCUVVsMVJTeEpRVUZWYUVjc1JVRkRXaXhOUVVGTkxFbEJRVWxwUml4TlFVRk5MR2REUVVkc1FpeEhRVUZKWlN4SlFVRlZMMFlzUlVGQmJVSXNRMEZETDBJc1IwRkJaU3hWUVVGWWMwUXNSVUZEUml4TlFVRk5PVUlzUlVGTFVpeFBRVUZQZDBVc1NVRk5WQ3hKUVVoQk5VSXNSVUZCVVdRc1QwRkJVMEVzUlVGRGFrSmpMRVZCUVZFMVF5eEpRVUZOUVN4SlFVVkVMRU5CUTFnc1NVRkJTVFpDTEVWQlFWZGxMRVZCUVZGbUxGTkJRM1pDTEVkQlFVbEJMRVZCUVZVc1EwRkRXaXhKUVVGSk5FTXNSVUZCYVVKRExFVkJRVzlDTjBNc1JVRkJWV1VzUjBGRGJrUXNSMEZCU1RaQ0xFVkJRV2RDTEVOQlEyeENMRWRCUVVsQkxFbEJRVzFDYUVjc1JVRkJhMElzVTBGRGVrTXNUMEZCVDJkSExFZEJTVmdzUjBGQmRVSXNVMEZCYmtJM1FpeEZRVUZSWkN4UFFVZFdZeXhGUVVGUmFrSXNTMEZCVDJsQ0xFVkJRVkZvUWl4TlFVRlJaMElzUlVGQlVUVkRMRk5CUld4RExFZEJRWFZDTEZWQlFXNUNORU1zUlVGQlVXUXNUMEZCYjBJc1EwRkRja01zUjBGQlNYbERMRWxCUVZWc1J5eEZRVVZhTEUxQlJFRnJSeXhGUVVGUkwwWXNSVUZEUm05RkxFVkJRVkUxUXl4SlFVZG9RalJETEVWQlFWRkdMR3RDUVVGclFrVXNSVUZCVVRWRExGTkJSVTRzVjBGQmJrSTBReXhGUVVGUlpDeFJRVU5xUW1Nc1JVRkJVV0VzVDBGQlR5eFRRVUZWWWl4RlFVRlJOVU1zUzBGSGJrTjFSU3hGUVVGUmFFY3NSVUZGVWl4SlFVRkplVVVzUlVGQlV6SkNMRVZCUVZOMFJTeEZRVUZUUlN4RlFVRk5jVU1zUjBGRGNrTXNSMEZCYjBJc1YwRkJhRUpKTEVWQlFVOVNMRXRCUVcxQ0xFTkJUelZDTEVkQlNrRXJRaXhGUVVGUk0wSXNSVUZCVVM5Q0xFdEJRMXB5UXl4RlFVTkJSaXhGUVVWQk1FVXNSVUZCVDJoRUxFMUJRVkYyUWl4RlFVTnFRaXhUUVVkR0xFMUJRVThzUTBGRFRIRkRMRTFCUVU5clF5eEZRVUZQYUVRc1NVRkRaR0VzUzBGQlRTdENMRVZCUVZFdlFpeE5RVWRUTEZWQlFXaENiVU1zUlVGQlQxSXNUMEZEYUVJclFpeEZRVUZSTDBZc1JVRkhVbTlGTEVWQlFWRmtMRTlCUVZNc1VVRkRha0pqTEVWQlFWRTFReXhKUVVGTlowUXNSVUZCVDJoRUxFOUJlRVUzUWl4RFFUbE5kVU5MTEVWQlFWTkZMRVZCUVUxeFF5eEhRVVUzUTNsQ0xFVkJZMVFzVTBGQlUwMHNSVUZCVTBNc1JVRkJTVU1zUlVGQlN6ZEZMRWRCUTNwQ0xFbEJRMFVzVFVGQlR5eERRVUZGZDBNc1MwRkJUU3hUUVVGVmVFTXNTVUZCU3pSRkxFVkJRVWMxUml4TFFVRkxOa1lzUlVGQlN6ZEZMRWxCUXpORExFMUJRVTg0UlN4SFFVTlFMRTFCUVU4c1EwRkJSWFJETEV0QlFVMHNVVUZCVTNoRExFbEJRVXM0UlN4SlFXbENha01zVTBGQlV6TkdMRXRCUTFRc1UwRkJVMFVzUzBGRFZDeFRRVUZUU0N4TFFUUkNWQ3hUUVVGVFowSXNSVUZCYzBJNVF5eEhRVU0zUWl4RFFVRkRMRTlCUVZFc1VVRkJVeXhWUVVGVk5FVXNVVUZCVVN4VFFVRlRSaXhIUVVNelF6RkZMRVZCUVZVd1JTeEhRVUZWTEZOQlFWTTVRaXhIUVVNelFpeFBRVUZQY2tJc1MwRkJTekpHTEZGQlFWRjRReXhGUVVGUk9VSXNUVUZ2UTJ4RExGTkJRVk5ITEVWQlFXTnJSU3hIUVVOeVFpeFRRVUZUVlN4RlFVRlBha1FzUlVGQlVUbENMRVZCUVV0blJpeEZRVUZUUXl4SFFVTndReXhKUVVGSmFrTXNSVUZCVXpKQ0xFVkJRVk5PTEVWQlFWVjJReXhIUVVGVGRVTXNSVUZCVjNKRkxFZEJRM0JFTEVkQlFXOUNMRlZCUVdoQ1owUXNSVUZCVDFJc1MwRkZTaXhEUVVOTUxFbEJRVWsxUWl4RlFVRlRiME1zUlVGQlQyaEVMRWxCUTJoQ1l5eEZRVUZSUml4RlFVRlBSU3hOUVVOdVFpeFBRVUZKUVN4SFFVTnBRaXhwUWtGQlZrRXNSMEZEVUhwRUxFVkJRVTh5UWl4TFFVRkxPRUlzUlVGQlR5eFhRVU5rYjBVc1VVRkJVVVlzVVVGQlVXeEZMRVZCUVUxaUxGTkJRVk5WTEV0QlFVc3NVMEZCVTBjc1IwRkRiRVJwUlN4RlFVRlBMRTlCUVZGcVJTeEZRVUZQYTBVc1JVRkJVME1zU1VGRE9VSXNVMEZCVTBnc1IwRkRWa01zUlVGQlR5eFJRVUZUUkN4RlFVRkxSU3hGUVVGVFF5eExRVWt6UWtNc1VVRkJVVVlzVVVGQlVXeEZMRWRCUVU5SUxFdEJRVXNzVTBGQlUzZEZMRWRCWjBJeFEzWkZMRVZCUVU5RkxFMUJRVkZ4UlN4RlFVTm1TQ3hGUVVGUmNFVXNTVUZEVUhGRkxFZEJhRU5JUVN4RlFVRlBha01zUlVGQlQyaEVMRXRCZDBOc1FpeEpRVUZKYjBZc1JVRktNRUlzYVVKQlFXNUNjRWtzUlVGQlQzRkpMRk5CUVhkQ2Nra3NSVUZCVDNGSkxGRkJRVkZETEZOQlEzWkVVQ3hGUVVGVEwwZ3NSVUZCVDNGSkxGRkJRVkZETEU5QlFVOURMRXRCUVV0U0xFbEJiVU4wUTNCSExFdEJRVXN5Uml4UlFUbENUQ3hUUVVGcFFuaERMRVZCUVZFNVFpeEhRVU4yUWl4VFFVRlRkMFlzU1VGRFVDeFBRVUZQTEVsQlFVbE9MRkZCUVZFc1UwRkJVMFlzUlVGQlUwTXNSMEZEYmtOR0xFVkJRVTlxUkN4RlFVRlJPVUlzUlVGQlMyZEdMRVZCUVZORExFdEJTV3BETEU5QlFVOUhMRVZCWVV4QkxFVkJRV3RDUVN4RlFVRm5RbnBGTEV0QlEyaEROa1VzUlVGSFFVRXNSMEZEUlVFc1MwRXJSMVlzVTBGQlUyUXNSVUZCYjBJM1F5eEZRVUZWWlN4SFFVTnlReXhKUVVGSlpDeEZRVUZUUkN4RlFVRlRia1VzVTBGQlUydEdMRVZCUVZGa0xGRkJRM1pETEVkQlFVbEJMRWxCUVZjM1JTeEZRVUZYTEVOQlMzaENMRWRCUmtFeVJpeEZRVUZSWml4VFFVRlhMRXRCUlVrc1ZVRkJia0psTEVWQlFWRmtMRTlCUVc5Q0xFTkJRemxDTEVkQlFVbEVMRVZCUVZOdVJTeFRRVUZUSzBnc1UwRkhjRUkzUXl4RlFVRlJaQ3hQUVVGVExGTkJRMnBDWXl4RlFVRlJOVU1zU1VGQlRTOURMRVZCUTJSNVNDeEZRVUZ2UWpkRExFVkJRVlZsTEVkQlJWQXNWVUZCYmtKQkxFVkJRVkZrTEZGQlIxWXNUMEZCVDNKRUxFVkJTVmh0UlN4RlFVRlJaQ3hQUVVGVExGRkJRMnBDWXl4RlFVRlJOVU1zU1VGQlRTeEpRVUZKTUVZc1ZVRkRhRUlzYTBSQlIwb3NUMEZCVDJwSUxFVkJSMVFzU1VGQlNYVkZMRVZCUVZNeVFpeEZRVUZUTjBNc1JVRkJVVVFzUlVGQlUyNUZMRk5CUVZWclJpeEZRVUZSTlVNc1MwRkZla1FzUjBGQmIwSXNWVUZCYUVKblJDeEZRVUZQVWl4TFFVbFVMRTlCU0VGSkxFVkJRVkZrTEU5QlFWTXNVVUZEYWtKakxFVkJRVkUxUXl4SlFVRk5aMFFzUlVGQlQyaEVMRWxCUTNKQ05FTXNSVUZCVVdZc1UwRkJWeXhMUVVOYWNFUXNSVUZIVkN4SlFVRkphMGdzUlVGQlR6TkRMRVZCUVU5b1JDeEpRVVZzUWl4UFFVRk5Na1lzUlVGUFJrRXNSVUZCU3psRkxFMUJSMUFyUWl4RlFVRlJaaXhGUVVGVGNVTXNXVUZCWTNsQ0xFVkJRVXMzUlN4TlFVZHdRemhDTEVWQlFWRnNReXhMUVVGUGJVSXNSVUZCVTNORExGRkJVVVFzVjBGQmJrSjJRaXhGUVVGUlpDeFRRVU5XWXl4RlFVRlJaQ3hQUVVGVExFOUJRMnBDWXl4RlFVRlJOVU1zU1VGQlRTOURMRWRCVld4Q01rWXNSVUZCVVdZc1UwRkJWeXhMUVVOYWNFUXNSMEZPUld0SUxFZEJNMEpRTDBNc1JVRkJVV1FzVDBGQlV5eFJRVU5xUW1Nc1JVRkJVVFZETEVsQlFVMHNTVUZCU1RCR0xGVkJRVlVzYjBOQlF6VkNPVU1zUlVGQlVXWXNVMEZCVnl4TFFVTmFjRVFzUjBGdlJGZ3NVMEZCVTIxSUxFVkJRV0ZETEVkQlEzQkNMRWxCUVVrelF5eEZRVUZSTEVOQlFVVkRMRTlCUVZFd1F5eEZRVUZMTEVsQlJYWkNMRXRCUVV0QkxFbEJRMUF6UXl4RlFVRk5TU3hUUVVGWGRVTXNSVUZCU3l4SlFVZHdRaXhMUVVGTFFTeEpRVU5RTTBNc1JVRkJUVXNzVjBGQllYTkRMRVZCUVVzc1IwRkRlRUl6UXl4RlFVRk5WU3hUUVVGWGFVTXNSVUZCU3l4SlFVZDRRbXhJTEV0QlFVdHZSQ3hYUVVGWFdpeExRVUZMSzBJc1IwRkhka0lzVTBGQlUycENMRVZCUVdOcFFpeEhRVU55UWl4SlFVRkpSaXhGUVVGVFJTeEZRVUZOV0N4WlFVRmpMRWRCUTJwRFV5eEZRVUZQVWl4TFFVRlBMR2RDUVVOUVVTeEZRVUZQYUVRc1NVRkRaR3RFTEVWQlFVMVlMRmRCUVdGVExFVkJSM0pDTEZOQlFWTjZRaXhGUVVGUlppeEhRVWxtTjBJc1MwRkJTMjlFTEZkQlFXRXNRMEZCUXl4RFFVRkZiMElzVDBGQlVTeFRRVU0zUWpORExFVkJRVmwzUWl4UlFVRlJORVFzUlVGQlkycElMRTFCUTJ4RFFTeExRVUZMTmtNc1QwRkJRVUVzUjBFNFFsQXNVMEZCVTNwRExFVkJRVTlyUml4SFFVTmtMRWRCUVVsQkxFVkJRVlVzUTBGRFdpeEpRVUZKTmtJc1JVRkJhVUkzUWl4RlFVRlRlRWNzUjBGRE9VSXNSMEZCU1hGSkxFVkJRMFlzVDBGQlQwRXNSVUZCWlRsSExFdEJRVXRwUml4SFFVYzNRaXhIUVVFMlFpeHRRa0ZCYkVKQkxFVkJRVk4yUkN4TFFVTnNRaXhQUVVGUGRVUXNSVUZIVkN4SlFVRkxPVUlzVFVGQlRUaENMRVZCUVZNMVF5eFJRVUZUTEVOQlF6TkNMRWxCUVVrMFFpeEhRVUZMTEVWQlFVZDJReXhGUVVGUExGTkJRVk5CTEVsQlF6RkNMRTlCUVZOMVF5eEZRVUZKWjBJc1JVRkJVelZETEZGQlEzQkNMRWRCUVVsb1JTeEZRVUZQTWtJc1MwRkJTMmxHTEVWQlFWVm9RaXhIUVVkNFFpeFBRVVpCZGtNc1JVRkJTMGtzVFVGQlVXMUVMRVZCUVZOb1FpeEhRVU4wUW5aRExFVkJRVXRITEUxQlFVRkJMRVZCUTBWSUxFVkJUMWdzVDBGSVFVRXNSVUZCUzBrc1RVRkJVVGRFTEVWQlEySjVSQ3hGUVVGTFJ5eE5RVUZCUVN4RlFVVkZTQ3hIUVVkVUxFOUJRVTlCTEVWQlFVdEJMRXRCUVU5QkxFZEJTM1pDTEUxQlFVOHNRMEZCUlVFc1MwRkJUVGhFTEVkQlNXcENMRk5CUVZOQkxFbEJRMUFzVFVGQlR5eERRVUZGTVVRc1RVRkJUemRFTEVWQlFWYzBSQ3hOUVVGQlFTeEpRWEJuUWpsQ0xFTkJhM1JDYlVJc2FVSkJRVmczUkN4UFFVRnpRa0VzVDBGRFdDeHBRa0ZCV0N0SkxFOUJRWE5DUVN4UFFVTmlMR2xDUVVGVWVFWXNTMEZCYjBKQkxFdEJRVTgxUWlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y2NtVm5aVzVsY21GMGIzSXRjblZ1ZEdsdFpWeGNjblZ1ZEdsdFpTNXFjeUo5IiwicmVxdWlyZSgxMzMpLG1vZHVsZS5leHBvcnRzPXJlcXVpcmUoMjYpLlJlZ0V4cC5lc2NhcGU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6WTJGd1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lsSmxaMFY0Y0NJc0ltVnpZMkZ3WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxGRkJRVkVzYjBOQlExSkRMRTlCUVU5RExGRkJRVlZHTEZGQlFWRXNkVUpCUVhWQ1J5eFBRVUZQUXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y1ptNWNYSEpsWjJWNGNGeGNaWE5qWVhCbExtcHpJbjA9IiwicmVxdWlyZSgyNTgpLHJlcXVpcmUoMTk0KSxyZXF1aXJlKDE5NikscmVxdWlyZSgxOTUpLHJlcXVpcmUoMTk4KSxyZXF1aXJlKDIwMCkscmVxdWlyZSgyMDUpLHJlcXVpcmUoMTk5KSxyZXF1aXJlKDE5NykscmVxdWlyZSgyMDcpLHJlcXVpcmUoMjA2KSxyZXF1aXJlKDIwMikscmVxdWlyZSgyMDMpLHJlcXVpcmUoMjAxKSxyZXF1aXJlKDE5MykscmVxdWlyZSgyMDQpLHJlcXVpcmUoMjA4KSxyZXF1aXJlKDIwOSkscmVxdWlyZSgxNjApLHJlcXVpcmUoMTYyKSxyZXF1aXJlKDE2MSkscmVxdWlyZSgyMTEpLHJlcXVpcmUoMjEwKSxyZXF1aXJlKDE4MSkscmVxdWlyZSgxOTEpLHJlcXVpcmUoMTkyKSxyZXF1aXJlKDE4MikscmVxdWlyZSgxODMpLHJlcXVpcmUoMTg0KSxyZXF1aXJlKDE4NSkscmVxdWlyZSgxODYpLHJlcXVpcmUoMTg3KSxyZXF1aXJlKDE4OCkscmVxdWlyZSgxODkpLHJlcXVpcmUoMTkwKSxyZXF1aXJlKDE2NCkscmVxdWlyZSgxNjUpLHJlcXVpcmUoMTY2KSxyZXF1aXJlKDE2NykscmVxdWlyZSgxNjgpLHJlcXVpcmUoMTY5KSxyZXF1aXJlKDE3MCkscmVxdWlyZSgxNzEpLHJlcXVpcmUoMTcyKSxyZXF1aXJlKDE3MykscmVxdWlyZSgxNzQpLHJlcXVpcmUoMTc1KSxyZXF1aXJlKDE3NikscmVxdWlyZSgxNzcpLHJlcXVpcmUoMTc4KSxyZXF1aXJlKDE3OSkscmVxdWlyZSgxODApLHJlcXVpcmUoMjQ1KSxyZXF1aXJlKDI1MCkscmVxdWlyZSgyNTcpLHJlcXVpcmUoMjQ4KSxyZXF1aXJlKDI0MCkscmVxdWlyZSgyNDEpLHJlcXVpcmUoMjQ2KSxyZXF1aXJlKDI1MSkscmVxdWlyZSgyNTMpLHJlcXVpcmUoMjM2KSxyZXF1aXJlKDIzNykscmVxdWlyZSgyMzgpLHJlcXVpcmUoMjM5KSxyZXF1aXJlKDI0MikscmVxdWlyZSgyNDMpLHJlcXVpcmUoMjQ0KSxyZXF1aXJlKDI0NykscmVxdWlyZSgyNDkpLHJlcXVpcmUoMjUyKSxyZXF1aXJlKDI1NCkscmVxdWlyZSgyNTUpLHJlcXVpcmUoMjU2KSxyZXF1aXJlKDE1NSkscmVxdWlyZSgxNTcpLHJlcXVpcmUoMTU2KSxyZXF1aXJlKDE1OSkscmVxdWlyZSgxNTgpLHJlcXVpcmUoMTQzKSxyZXF1aXJlKDE0MSkscmVxdWlyZSgxNDgpLHJlcXVpcmUoMTQ1KSxyZXF1aXJlKDE1MSkscmVxdWlyZSgxNTMpLHJlcXVpcmUoMTQwKSxyZXF1aXJlKDE0NykscmVxdWlyZSgxMzcpLHJlcXVpcmUoMTUyKSxyZXF1aXJlKDEzNSkscmVxdWlyZSgxNTApLHJlcXVpcmUoMTQ5KSxyZXF1aXJlKDE0MikscmVxdWlyZSgxNDYpLHJlcXVpcmUoMTM0KSxyZXF1aXJlKDEzNikscmVxdWlyZSgxMzkpLHJlcXVpcmUoMTM4KSxyZXF1aXJlKDE1NCkscmVxdWlyZSgxNDQpLHJlcXVpcmUoMjI3KSxyZXF1aXJlKDIyOCkscmVxdWlyZSgyMzQpLHJlcXVpcmUoMjI5KSxyZXF1aXJlKDIzMCkscmVxdWlyZSgyMzEpLHJlcXVpcmUoMjMyKSxyZXF1aXJlKDIzMykscmVxdWlyZSgyMTIpLHJlcXVpcmUoMTYzKSxyZXF1aXJlKDIzNSkscmVxdWlyZSgyNzApLHJlcXVpcmUoMjcxKSxyZXF1aXJlKDI1OSkscmVxdWlyZSgyNjApLHJlcXVpcmUoMjY1KSxyZXF1aXJlKDI2OCkscmVxdWlyZSgyNjkpLHJlcXVpcmUoMjYzKSxyZXF1aXJlKDI2NikscmVxdWlyZSgyNjQpLHJlcXVpcmUoMjY3KSxyZXF1aXJlKDI2MSkscmVxdWlyZSgyNjIpLHJlcXVpcmUoMjEzKSxyZXF1aXJlKDIxNCkscmVxdWlyZSgyMTUpLHJlcXVpcmUoMjE2KSxyZXF1aXJlKDIxNykscmVxdWlyZSgyMjApLHJlcXVpcmUoMjE4KSxyZXF1aXJlKDIxOSkscmVxdWlyZSgyMjEpLHJlcXVpcmUoMjIyKSxyZXF1aXJlKDIyMykscmVxdWlyZSgyMjQpLHJlcXVpcmUoMjI2KSxyZXF1aXJlKDIyNSkscmVxdWlyZSgyNzQpLHJlcXVpcmUoMjcyKSxyZXF1aXJlKDI3MykscmVxdWlyZSgzMTUpLHJlcXVpcmUoMzE4KSxyZXF1aXJlKDMxNykscmVxdWlyZSgzMTkpLHJlcXVpcmUoMzIwKSxyZXF1aXJlKDMxNikscmVxdWlyZSgzMjEpLHJlcXVpcmUoMzIyKSxyZXF1aXJlKDI5NikscmVxdWlyZSgyOTkpLHJlcXVpcmUoMjk1KSxyZXF1aXJlKDI5MykscmVxdWlyZSgyOTQpLHJlcXVpcmUoMjk3KSxyZXF1aXJlKDI5OCkscmVxdWlyZSgyODApLHJlcXVpcmUoMzE0KSxyZXF1aXJlKDI3OSkscmVxdWlyZSgzMTMpLHJlcXVpcmUoMzI1KSxyZXF1aXJlKDMyNykscmVxdWlyZSgyNzgpLHJlcXVpcmUoMzEyKSxyZXF1aXJlKDMyNCkscmVxdWlyZSgzMjYpLHJlcXVpcmUoMjc3KSxyZXF1aXJlKDMyMykscmVxdWlyZSgyNzYpLHJlcXVpcmUoMjgxKSxyZXF1aXJlKDI4MikscmVxdWlyZSgyODMpLHJlcXVpcmUoMjg0KSxyZXF1aXJlKDI4NSkscmVxdWlyZSgyODcpLHJlcXVpcmUoMjg2KSxyZXF1aXJlKDI4OCkscmVxdWlyZSgyODkpLHJlcXVpcmUoMjkwKSxyZXF1aXJlKDI5MikscmVxdWlyZSgyOTEpLHJlcXVpcmUoMzAxKSxyZXF1aXJlKDMwMikscmVxdWlyZSgzMDMpLHJlcXVpcmUoMzA0KSxyZXF1aXJlKDMwNikscmVxdWlyZSgzMDUpLHJlcXVpcmUoMzA4KSxyZXF1aXJlKDMwNykscmVxdWlyZSgzMDkpLHJlcXVpcmUoMzEwKSxyZXF1aXJlKDMxMSkscmVxdWlyZSgyNzUpLHJlcXVpcmUoMzAwKSxyZXF1aXJlKDMzMCkscmVxdWlyZSgzMjkpLHJlcXVpcmUoMzI4KSxtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKDI2KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTm9hVzB1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hSUVVGUkxIZENRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTEhkRFFVTlNRU3hSUVVGUkxEQkRRVU5TUVN4UlFVRlJMRzlFUVVOU1FTeFJRVUZSTEhsRFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMQ3REUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMREpEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMSE5EUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMSGxEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTEhWRFFVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHbERRVU5TUVN4UlFVRlJMSEZEUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxIZERRVU5TUVN4UlFVRlJMSGxEUVVOU1FTeFJRVUZSTEhsRFFVTlNRU3hSUVVGUkxHOURRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMREpDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMREpDUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMSGREUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMR2xEUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMR2xEUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxHOURRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERoQ1FVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMR2xEUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERCQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxHMURRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEQkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxIRkRRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTERoQ1FVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTERoQ1FVTlNRU3hSUVVGUkxIbENRVU5TUVN4UlFVRlJMSEZDUVVOU1FTeFJRVUZSTEhGQ1FVTlNRU3hSUVVGUkxEQkNRVU5TUVN4UlFVRlJMREJDUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHbERRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxESkRRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHMURRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTEhGRFFVTlNRU3hSUVVGUkxIRkRRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxIbERRVU5TUVN4UlFVRlJMSGxEUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMSEZFUVVOU1FTeFJRVUZSTERCRFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMSFZEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEUkRRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERCRFFVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxIVkRRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEhGRVFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxITkRRVU5TUVN4UlFVRlJMSE5EUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTEhkQ1FVTlNRU3hSUVVGUkxIZENRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxEQkNRVU5TUVN4UlFVRlJMREJDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMSGRDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMR2xEUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxIbERRVU5TUVN4UlFVRlJMSGxEUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxESkRRVU5TUVN4UlFVRlJMREJEUVVOU1FTeFJRVUZSTEN0RFFVTlNRU3hSUVVGUkxITkRRVU5TUVN4UlFVRlJMREJEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxITkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEhkQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRGhDUVVOU1F5eFBRVUZQUXl4UlFVRlZSaXhSUVVGUklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHphR2x0TG1wekluMD0iLCJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYlhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYlhYMD0iLCJ2YXIgY29yZT1tb2R1bGUuZXhwb3J0cz17dmVyc2lvbjpcIjIuNi4wXCJ9O1wibnVtYmVyXCI9PXR5cGVvZiBfX2UmJihfX2U9Y29yZSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqYjNKbExtcHpJbDBzSW01aGJXVnpJanBiSW1OdmNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpZG1WeWMybHZiaUlzSWw5ZlpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1MwRkJUME1zVDBGQlQwTXNVVUZCVlN4RFFVRkZReXhSUVVGVExGTkJRM0pDTEdsQ1FVRlFReXhOUVVGcFFrRXNTVUZCVFVvaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOWpiM0psTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkcmU9cmVxdWlyZSg5NykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLFwiXFxcXCQmXCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiUmVnRXhwXCIse2VzY2FwZTpmdW5jdGlvbihlKXtyZXR1cm4gJHJlKGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmNtVXVjbVZuWlhod0xtVnpZMkZ3WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlSeVpTSXNJbE1pTENKbGMyTmhjR1VpTENKcGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1NVRkJUVVFzVVVGQlVTeGpRVUZTUVN4RFFVRjFRaXh6UWtGQmRVSXNVVUZGZUVSRUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1UwRkJWU3hEUVVGRlF5eFBRVUZSTEZOQlFXZENReXhIUVVGTkxFOUJRVTlJTEVsQlFVbEhJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhqYjNKbExuSmxaMlY0Y0M1bGMyTmhjR1V1YW5NaWZRPT0iLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBvKXRocm93IFR5cGVFcnJvcihvK1wiIGlzIG5vdCBhIGZ1bmN0aW9uIVwiKTtyZXR1cm4gb307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloTFdaMWJtTjBhVzl1TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwZENJc0lsUjVjR1ZGY25KdmNpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1IwRkJhVUlzYlVKQlFVNUJMRVZCUVd0Q0xFMUJRVTFETEZWQlFWVkVMRVZCUVVzc2RVSkJRMnhFTEU5QlFVOUJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmWVMxbWRXNWpkR2x2Ymk1cWN5SjkiLCJ2YXIgY29mPXJlcXVpcmUoMjEpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHImJlwiTnVtYmVyXCIhPWNvZihyKSl0aHJvdyBUeXBlRXJyb3IoZSk7cmV0dXJuK3J9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aExXNTFiV0psY2kxMllXeDFaUzVxY3lKZExDSnVZVzFsY3lJNld5SmpiMllpTENKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbDBJaXdpYlhObklpd2lWSGx3WlVWeWNtOXlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMRlZCUTJ4Q1F5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFVkJRVWxETEVkQlF6ZENMRWRCUVdsQ0xHbENRVUZPUkN4SFFVRTJRaXhWUVVGWVNpeEpRVUZKU1N4SFFVRnBRaXhOUVVGTlJTeFZRVUZWUkN4SFFVTnNSU3hQUVVGUlJDSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYMkV0Ym5WdFltVnlMWFpoYkhWbExtcHpJbjA9IiwidmFyIHRvU3RyaW5nPXt9LnRvU3RyaW5nO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0b1N0cmluZy5jYWxsKHQpLnNsaWNlKDgsLTEpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpiMll1YW5NaVhTd2libUZ0WlhNaU9sc2lkRzlUZEhKcGJtY2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSmpZV3hzSWl3aWMyeHBZMlVpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRk5CUVZjc1IwRkJSMEVzVTBGRmJFSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1QwRkJUMGdzVTBGQlUwa3NTMEZCUzBRc1IwRkJTVVVzVFVGQlRTeEhRVUZKSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZlkyOW1MbXB6SW4wPSIsInZhciBVTlNDT1BBQkxFUz1yZXF1aXJlKDEzMSkoXCJ1bnNjb3BhYmxlc1wiKSxBcnJheVByb3RvPUFycmF5LnByb3RvdHlwZTtudWxsPT1BcnJheVByb3RvW1VOU0NPUEFCTEVTXSYmcmVxdWlyZSg0NSkoQXJyYXlQcm90byxVTlNDT1BBQkxFUyx7fSksbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7QXJyYXlQcm90b1tVTlNDT1BBQkxFU11bcl09ITB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aFpHUXRkRzh0ZFc1elkyOXdZV0pzWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpVlU1VFEwOVFRVUpNUlZNaUxDSnlaWEYxYVhKbElpd2lRWEp5WVhsUWNtOTBieUlzSWtGeWNtRjVJaXdpY0hKdmRHOTBlWEJsSWl3aWRXNWtaV1pwYm1Wa0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbXRsZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzV1VGQlkwTXNVVUZCVVN4VFFVRlNRU3hEUVVGclFpeGxRVU5vUTBNc1YwRkJZVU1zVFVGQlRVTXNWVUZEVVVNc1RVRkJNMEpJTEZkQlFWZEdMR05CUVRKQ1F5eFJRVUZSTEZWQlFWSkJMRU5CUVcxQ1F5eFhRVUZaUml4WlFVRmhMRWxCUTNSR1RTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDVGl4WFFVRlhSaXhoUVVGaFVTeEpRVUZCUVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyRmtaQzEwYnkxMWJuTmpiM0JoWW14bGN5NXFjeUo5IiwidmFyIHN0b3JlPXJlcXVpcmUoMTA1KShcIndrc1wiKSx1aWQ9cmVxdWlyZSgxMjYpLFN5bWJvbD1yZXF1aXJlKDQzKS5TeW1ib2wsVVNFX1NZTUJPTD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w7KG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8pe3JldHVybiBzdG9yZVtvXXx8KHN0b3JlW29dPVVTRV9TWU1CT0wmJlN5bWJvbFtvXXx8KFVTRV9TWU1CT0w/U3ltYm9sOnVpZCkoXCJTeW1ib2wuXCIrbykpfSkuc3RvcmU9c3RvcmU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkzYTNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNSdmNtVWlMQ0p5WlhGMWFYSmxJaXdpZFdsa0lpd2lVM2x0WW05c0lpd2lWVk5GWDFOWlRVSlBUQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKdVlXMWxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeE5RVUZSUXl4UlFVRlJMRmxCUVZKQkxFTkJRWEZDTEU5QlF6ZENReXhKUVVGTlJDeFJRVUZSTEZWQlEyUkZMRTlCUVZOR0xGRkJRVkVzWVVGQllVVXNUMEZET1VKRExGZEJRVGhDTEcxQ1FVRldSQ3hSUVVWVVJTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM2hETEU5QlFVOVFMRTFCUVUxUExFdEJRVlZRTEUxQlFVMVBMRWRCUXpOQ1NDeFpRVUZqUkN4UFFVRlBTU3hMUVVGVlNDeFhRVUZoUkN4UFFVRlRSQ3hMUVVGTExGVkJRVmxMTEUxQlIycEZVQ3hOUVVGUlFTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYM2RyY3k1cWN5SjkiLCJ2YXIgZFA9cmVxdWlyZSg3NCksY3JlYXRlRGVzYz1yZXF1aXJlKDkyKTttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKDMyKT9mdW5jdGlvbihlLHIsdCl7cmV0dXJuIGRQLmYoZSxyLGNyZWF0ZURlc2MoMSx0KSl9OmZ1bmN0aW9uKGUscix0KXtyZXR1cm4gZVtyXT10LGV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5b2FXUmxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUlFJaXdpY21WeGRXbHlaU0lzSW1OeVpXRjBaVVJsYzJNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2liMkpxWldOMElpd2lhMlY1SWl3aWRtRnNkV1VpTENKbUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4SFFVRkxReXhSUVVGUkxHZENRVU5pUXl4WFFVRmhSQ3hSUVVGUkxHOUNRVU42UWtVc1QwRkJUME1zVVVGQlZVZ3NVVUZCVVN4clFrRkJiMElzVTBGQlZVa3NSVUZCVVVNc1JVRkJTME1zUjBGRGJFVXNUMEZCVDFBc1IwRkJSMUVzUlVGQlJVZ3NSVUZCVVVNc1JVRkJTMG9zVjBGQlZ5eEZRVUZIU3l4TFFVTnlReXhUUVVGVlJpeEZRVUZSUXl4RlFVRkxReXhIUVVWNlFpeFBRVVJCUml4RlFVRlBReXhIUVVGUFF5eEZRVU5RUmlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyaHBaR1V1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYXQ9cmVxdWlyZSgxMDgpKCEwKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIHIrKGU/YXQodCxyKS5sZW5ndGg6MSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aFpIWmhibU5sTFhOMGNtbHVaeTFwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKaGRDSXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpVXlJc0ltbHVaR1Y0SWl3aWRXNXBZMjlrWlNJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeEhRVUZMUXl4UlFVRlJMR1ZCUVZKQkxFVkJRVUZCTEVkQlNWUkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCUjBNc1JVRkJUME1zUjBGRGJrTXNUMEZCVDBRc1IwRkJVME1zUlVGQlZVNHNSMEZCUjBrc1JVRkJSME1zUjBGQlQwVXNUMEZCVXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyRmtkbUZ1WTJVdGMzUnlhVzVuTFdsdVpHVjRMbXB6SW4wPSIsInZhciB0b0ludGVnZXI9cmVxdWlyZSgxMTgpLGRlZmluZWQ9cmVxdWlyZSgzMSk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHIsdCl7dmFyIG4saSxkPVN0cmluZyhkZWZpbmVkKHIpKSxvPXRvSW50ZWdlcih0KSx1PWQubGVuZ3RoO3JldHVybiBvPDB8fG8+PXU/ZT9cIlwiOnZvaWQgMDoobj1kLmNoYXJDb2RlQXQobykpPDU1Mjk2fHxuPjU2MzE5fHxvKzE9PT11fHwoaT1kLmNoYXJDb2RlQXQobysxKSk8NTYzMjB8fGk+NTczNDM/ZT9kLmNoYXJBdChvKTpuOmU/ZC5zbGljZShvLG8rMik6aS01NjMyMCsobi01NTI5Njw8MTApKzY1NTM2fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RZWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lkRzlKYm5SbFoyVnlJaXdpY21WeGRXbHlaU0lzSW1SbFptbHVaV1FpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVZFOWZVMVJTU1U1SElpd2lkR2hoZENJc0luQnZjeUlzSW1FaUxDSmlJaXdpY3lJc0lsTjBjbWx1WnlJc0lta2lMQ0pzSWl3aWJHVnVaM1JvSWl3aVkyaGhja052WkdWQmRDSXNJbU5vWVhKQmRDSXNJbk5zYVdObElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHbENRVU53UWtNc1VVRkJWVVFzVVVGQlVTeGpRVWQwUWtVc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhQUVVGUExGTkJRVlZETEVWQlFVMURMRWRCUTNKQ0xFbEJSMGxETEVWQlFVZERMRVZCU0VoRExFVkJRVWxETEU5QlFVOVVMRkZCUVZGSkxFbEJRMjVDVFN4RlFVRkpXaXhWUVVGVlR5eEhRVU5rVFN4RlFVRkpTQ3hGUVVGRlNTeFBRVVZXTEU5QlFVbEdMRVZCUVVrc1IwRkJTMEVzUjBGQlMwTXNSVUZCVlZJc1JVRkJXU3hSUVVGQkxFZEJRM2hEUnl4RlFVRkpSU3hGUVVGRlN5eFhRVUZYU0N4SlFVTk9MRTlCUVZWS0xFVkJRVWtzVDBGQlZVa3NSVUZCU1N4SlFVRk5ReXhKUVVGTlNpeEZRVUZKUXl4RlFVRkZTeXhYUVVGWFNDeEZRVUZKTEVsQlFVMHNUMEZCVlVnc1JVRkJTU3hOUVVONFJrb3NSVUZCV1Vzc1JVRkJSVTBzVDBGQlQwb3NSMEZCUzBvc1JVRkRNVUpJTEVWQlFWbExMRVZCUVVWUExFMUJRVTFNTEVWQlFVZEJMRVZCUVVrc1IwRkJNa0pJTEVWQlFVa3NUMEZCZWtKRUxFVkJRVWtzVDBGQlZTeEpRVUZ4UWlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzTjBjbWx1WnkxaGRDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyxuLHIsaSl7aWYoIShvIGluc3RhbmNlb2Ygbil8fHZvaWQgMCE9PWkmJmkgaW4gbyl0aHJvdyBUeXBlRXJyb3IocitcIjogaW5jb3JyZWN0IGludm9jYXRpb24hXCIpO3JldHVybiBvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhiaTFwYm5OMFlXNWpaUzVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWFFpTENKRGIyNXpkSEoxWTNSdmNpSXNJbTVoYldVaUxDSm1iM0ppYVdSa1pXNUdhV1ZzWkNJc0lsUjVjR1ZGY25KdmNpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCU1VNc1JVRkJZVU1zUlVGQlRVTXNSMEZEYUVRc1MwRkJUVWdzWVVGQlkwTXNVMEZCUVVFc1NVRkJhVUpGTEVkQlFXZERRU3hMUVVGclFrZ3NSVUZEY2tZc1RVRkJUVWtzVlVGQlZVWXNSVUZCVHl3eVFrRkRka0lzVDBGQlQwWWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjloYmkxcGJuTjBZVzVqWlM1cWN5SjkiLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZSg1NCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIWlzT2JqZWN0KGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiBlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhiaTF2WW1wbFkzUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTlBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWl3aVZIbHdaVVZ5Y205eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxHZENRVU4yUWtNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhKUVVGTFNpeFRRVUZUU1N4SFFVRkxMRTFCUVUxRExGVkJRVlZFTEVWQlFVc3NjMEpCUTNoRExFOUJRVTlCSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZllXNHRiMkpxWldOMExtcHpJbjA9IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG8/bnVsbCE9PW86XCJmdW5jdGlvblwiPT10eXBlb2Ygb307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwY3kxdlltcGxZM1F1YW5NaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhOUVVGeFFpeHBRa0ZCVUVFc1JVRkJlVUlzVDBGQlVFRXNSVUZCTkVJc2JVSkJRVkJCSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZmFYTXRiMkpxWldOMExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHRvT2JqZWN0PXJlcXVpcmUoMTIxKSx0b0Fic29sdXRlSW5kZXg9cmVxdWlyZSgxMTYpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKTttb2R1bGUuZXhwb3J0cz1bXS5jb3B5V2l0aGlufHxmdW5jdGlvbih0LGUpe3ZhciBvPXRvT2JqZWN0KHRoaXMpLG49dG9MZW5ndGgoby5sZW5ndGgpLGk9dG9BYnNvbHV0ZUluZGV4KHQsbikscj10b0Fic29sdXRlSW5kZXgoZSxuKSx1PWFyZ3VtZW50cy5sZW5ndGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwLGw9TWF0aC5taW4oKHZvaWQgMD09PXU/bjp0b0Fic29sdXRlSW5kZXgodSxuKSktcixuLWkpLGQ9MTtmb3IocjxpJiZpPHIrbCYmKGQ9LTEscis9bC0xLGkrPWwtMSk7bC0tID4wOylyIGluIG8/b1tpXT1vW3JdOmRlbGV0ZSBvW2ldLGkrPWQscis9ZDtyZXR1cm4gb307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloY25KaGVTMWpiM0I1TFhkcGRHaHBiaTVxY3lKZExDSnVZVzFsY3lJNld5SjBiMDlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0owYjBGaWMyOXNkWFJsU1c1a1pYZ2lMQ0owYjB4bGJtZDBhQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKamIzQjVWMmwwYUdsdUlpd2lkR0Z5WjJWMElpd2ljM1JoY25RaUxDSlBJaXdpZEdocGN5SXNJbXhsYmlJc0lteGxibWQwYUNJc0luUnZJaXdpWm5KdmJTSXNJbVZ1WkNJc0ltRnlaM1Z0Wlc1MGN5SXNJbU52ZFc1MElpd2lUV0YwYUNJc0ltMXBiaUlzSW1sdVl5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNZVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zWjBKQlFXdENSQ3hSUVVGUkxIZENRVU14UWtVc1UwRkJWMFlzVVVGQlVTeG5Ra0ZGZGtKSExFOUJRVTlETEZGQlFWVXNSMEZCUjBNc1dVRkJZeXhUUVVGdlFrTXNSVUZCYTBKRExFZEJRM1JGTEVsQlFVbERMRVZCUVVsVUxGTkJRVk5WTEUxQlEySkRMRVZCUVUxU0xGTkJRVk5OTEVWQlFVVkhMRkZCUTJwQ1F5eEZRVUZMV0N4blFrRkJaMEpMTEVWQlFWRkpMRWRCUXpkQ1J5eEZRVUZQV2l4blFrRkJaMEpOTEVWQlFVOUhMRWRCUXpsQ1NTeEZRVUZOUXl4VlFVRlZTaXhQUVVGVExFVkJRVWxKTEZWQlFWVXNVVUZCUVN4RlFVTjJRME1zUlVGQlVVTXNTMEZCUzBNc1ZVRkJRVUVzU1VGQlMwb3NSVUZCYjBKS0xFVkJRVTFVTEdkQ1FVRm5RbUVzUlVGQlMwb3NTVUZCVVVjc1JVRkJUVWdzUlVGQlRVVXNSMEZEY2taUExFVkJRVTBzUlVGTlZpeEpRVXhKVGl4RlFVRlBSQ3hIUVVGTlFTeEZRVUZMUXl4RlFVRlBSeXhKUVVNelFrY3NSMEZCVHl4RlFVTlFUaXhIUVVGUlJ5eEZRVUZSTEVWQlEyaENTaXhIUVVGTlNTeEZRVUZSTEVkQlJWUkJMRXRCUVZVc1IwRkRXRWdzUzBGQlVVd3NSVUZCUjBFc1JVRkJSVWtzUjBGQlRVb3NSVUZCUlVzc1ZVRkRZa3dzUlVGQlJVa3NSMEZEWkVFc1IwRkJUVThzUlVGRFRrNHNSMEZCVVUwc1JVRkRVaXhQUVVGUFdDSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYMkZ5Y21GNUxXTnZjSGt0ZDJsMGFHbHVMbXB6SW4wPSIsInZhciBkZWZpbmVkPXJlcXVpcmUoMzEpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QoZGVmaW5lZChlKSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGJ5MXZZbXBsWTNRdWFuTWlYU3dpYm1GdFpYTWlPbHNpWkdWbWFXNWxaQ0lzSW5KbGNYVnBjbVVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pQWW1wbFkzUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZMEZEZEVKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzVDBGQlQwTXNUMEZCVDB3c1VVRkJVVWtpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5MGJ5MXZZbXBsWTNRdWFuTWlmUT09IiwidmFyIHRvSW50ZWdlcj1yZXF1aXJlKDExOCksbWF4PU1hdGgubWF4LG1pbj1NYXRoLm1pbjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybihlPXRvSW50ZWdlcihlKSk8MD9tYXgoZSt0LDApOm1pbihlLHQpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFoWW5OdmJIVjBaUzFwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKMGIwbHVkR1ZuWlhJaUxDSnlaWEYxYVhKbElpd2liV0Y0SWl3aVRXRjBhQ0lzSW0xcGJpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwYm1SbGVDSXNJbXhsYm1kMGFDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1ZVRkJXVU1zVVVGQlVTeHBRa0ZEY0VKRExFbEJRVTFETEV0QlFVdEVMRWxCUTFoRkxFbEJRVTFFTEV0QlFVdERMRWxCUTJaRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJUME1zUjBGRmFFTXNUMEZFUVVRc1JVRkJVVkFzVlVGQlZVOHNTVUZEU0N4RlFVRkpUQ3hKUVVGSlN5eEZRVUZSUXl4RlFVRlJMRWRCUVV0S0xFbEJRVWxITEVWQlFVOURJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmZEc4dFlXSnpiMngxZEdVdGFXNWtaWGd1YW5NaWZRPT0iLCJ2YXIgdG9JbnRlZ2VyPXJlcXVpcmUoMTE4KSxtaW49TWF0aC5taW47bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+MD9taW4odG9JbnRlZ2VyKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGJ5MXNaVzVuZEdndWFuTWlYU3dpYm1GdFpYTWlPbHNpZEc5SmJuUmxaMlZ5SWl3aWNtVnhkV2x5WlNJc0ltMXBiaUlzSWsxaGRHZ2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZWQlFWbERMRkZCUVZFc2FVSkJRM0JDUXl4SlFVRk5ReXhMUVVGTFJDeEpRVU5tUlN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRTlCUVU5QkxFVkJRVXNzUlVGQlNVb3NTVUZCU1VZc1ZVRkJWVTBzUjBGQlN5eHJRa0ZCYjBJaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOTBieTFzWlc1bmRHZ3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciB0b09iamVjdD1yZXF1aXJlKDEyMSksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoMTE2KSx0b0xlbmd0aD1yZXF1aXJlKDEyMCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRvT2JqZWN0KHRoaXMpLG89dG9MZW5ndGgoZS5sZW5ndGgpLHI9YXJndW1lbnRzLmxlbmd0aCxuPXRvQWJzb2x1dGVJbmRleChyPjE/YXJndW1lbnRzWzFdOnZvaWQgMCxvKSx1PXI+Mj9hcmd1bWVudHNbMl06dm9pZCAwLGk9dm9pZCAwPT09dT9vOnRvQWJzb2x1dGVJbmRleCh1LG8pO2k+bjspZVtuKytdPXQ7cmV0dXJuIGV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzFtYVd4c0xtcHpJbDBzSW01aGJXVnpJanBiSW5SdlQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0luUnZRV0p6YjJ4MWRHVkpibVJsZUNJc0luUnZUR1Z1WjNSb0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2lUeUlzSW5Sb2FYTWlMQ0pzWlc1bmRHZ2lMQ0poVEdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpYVc1a1pYZ2lMQ0psYm1RaUxDSmxibVJRYjNNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxHRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMR2RDUVVGclFrUXNVVUZCVVN4M1FrRkRNVUpGTEZOQlFWZEdMRkZCUVZFc1owSkJRM1pDUnl4UFFVRlBReXhSUVVGVkxGTkJRV05ETEVkQlR6ZENMRWxCVGtFc1NVRkJTVU1zUlVGQlNWQXNVMEZCVTFFc1RVRkRZa01zUlVGQlUwNHNVMEZCVTBrc1JVRkJSVVVzVVVGRGNFSkRMRVZCUVU5RExGVkJRVlZHTEU5QlEycENSeXhGUVVGUlZpeG5Ra0ZCWjBKUkxFVkJRVThzUlVGQlNVTXNWVUZCVlN4UlFVRkJMRVZCUVdkQ1JpeEhRVU0zUkVrc1JVRkJUVWdzUlVGQlR5eEZRVUZKUXl4VlFVRlZMRkZCUVVFc1JVRkRNMEpITEU5QlFVRkJMRWxCUVZORUxFVkJRVzlDU2l4RlFVRlRVQ3huUWtGQlowSlhMRVZCUVV0S0xFZEJRM2hFU3l4RlFVRlRSaXhIUVVGUFRDeEZRVUZGU3l4TFFVRlhUaXhGUVVOd1F5eFBRVUZQUXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyRnljbUY1TFdacGJHd3Vhbk1pZlE9PSIsInZhciBmb3JPZj1yZXF1aXJlKDQyKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLGYpe3ZhciBvPVtdO3JldHVybiBmb3JPZihyLCExLG8ucHVzaCxvLGYpLG99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzFtY205dExXbDBaWEpoWW14bExtcHpJbDBzSW01aGJXVnpJanBiSW1admNrOW1JaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRHVnlJaXdpU1ZSRlVrRlVUMUlpTENKeVpYTjFiSFFpTENKd2RYTm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeE5RVUZSUXl4UlFVRlJMR0ZCUlhCQ1F5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFVkJRVTFETEVkQlF5OUNMRWxCUVVsRExFVkJRVk1zUjBGRllpeFBRVVJCVGl4TlFVRk5TU3hIUVVGQlFTeEZRVUZoUlN4RlFVRlBReXhMUVVGTlJDeEZRVUZSUkN4SFFVTnFRME1pTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5aGNuSmhlUzFtY205dExXbDBaWEpoWW14bExtcHpJbjA9IiwidmFyIGN0eD1yZXF1aXJlKDI4KSxjYWxsPXJlcXVpcmUoNTYpLGlzQXJyYXlJdGVyPXJlcXVpcmUoNTEpLGFuT2JqZWN0PXJlcXVpcmUoMTApLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxnZXRJdGVyRm49cmVxdWlyZSgxMzIpLEJSRUFLPXt9LFJFVFVSTj17fSxleHBvcnRzPW1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscix0LG8saSl7dmFyIG4sYSxSLGMsbD1pP2Z1bmN0aW9uKCl7cmV0dXJuIGV9OmdldEl0ZXJGbihlKSx1PWN0eCh0LG8scj8yOjEpLEU9MDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBsKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBpdGVyYWJsZSFcIik7aWYoaXNBcnJheUl0ZXIobCkpe2ZvcihuPXRvTGVuZ3RoKGUubGVuZ3RoKTtuPkU7RSsrKWlmKChjPXI/dShhbk9iamVjdChhPWVbRV0pWzBdLGFbMV0pOnUoZVtFXSkpPT09QlJFQUt8fGM9PT1SRVRVUk4pcmV0dXJuIGN9ZWxzZSBmb3IoUj1sLmNhbGwoZSk7IShhPVIubmV4dCgpKS5kb25lOylpZigoYz1jYWxsKFIsdSxhLnZhbHVlLHIpKT09PUJSRUFLfHxjPT09UkVUVVJOKXJldHVybiBjfTtleHBvcnRzLkJSRUFLPUJSRUFLLGV4cG9ydHMuUkVUVVJOPVJFVFVSTjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOW1iM0l0YjJZdWFuTWlYU3dpYm1GdFpYTWlPbHNpWTNSNElpd2ljbVZ4ZFdseVpTSXNJbU5oYkd3aUxDSnBjMEZ5Y21GNVNYUmxjaUlzSW1GdVQySnFaV04wSWl3aWRHOU1aVzVuZEdnaUxDSm5aWFJKZEdWeVJtNGlMQ0pDVWtWQlN5SXNJbEpGVkZWU1RpSXNJbVY0Y0c5eWRITWlMQ0p0YjJSMWJHVWlMQ0pwZEdWeVlXSnNaU0lzSW1WdWRISnBaWE1pTENKbWJpSXNJblJvWVhRaUxDSkpWRVZTUVZSUFVpSXNJbXhsYm1kMGFDSXNJbk4wWlhBaUxDSnBkR1Z5WVhSdmNpSXNJbkpsYzNWc2RDSXNJbWwwWlhKR2JpSXNJbVlpTENKcGJtUmxlQ0lzSWxSNWNHVkZjbkp2Y2lJc0ltNWxlSFFpTENKa2IyNWxJaXdpZG1Gc2RXVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1MwRkJUMFFzVVVGQlVTeG5Ra0ZEWmtVc1dVRkJZMFlzVVVGQlVTeHZRa0ZEZEVKSExGTkJRVmRJTEZGQlFWRXNaMEpCUTI1Q1NTeFRRVUZYU2l4UlFVRlJMR2RDUVVOdVFrc3NWVUZCV1V3c1VVRkJVU3c0UWtGRGNFSk5MRTFCUVZFc1IwRkRVa01zVDBGQlV5eEhRVU5VUXl4UlFVRlZReXhQUVVGUFJDeFJRVUZWTEZOQlFWVkZMRVZCUVZWRExFVkJRVk5ETEVWQlFVbERMRVZCUVUxRExFZEJRM0JGTEVsQlIwbERMRVZCUVZGRExFVkJRVTFETEVWQlFWVkRMRVZCU0hoQ1F5eEZRVUZUVEN4RlFVRlhMRmRCUVdNc1QwRkJUMG9zUjBGQlkwd3NWVUZCVlVzc1IwRkRha1ZWTEVWQlFVbHlRaXhKUVVGSllTeEZRVUZKUXl4RlFVRk5SaXhGUVVGVkxFVkJRVWtzUjBGRGFFTlZMRVZCUVZFc1JVRkZXaXhIUVVGeFFpeHRRa0ZCVmtZc1JVRkJjMElzVFVGQlRVY3NWVUZCVlZvc1JVRkJWeXh4UWtGRk5VUXNSMEZCU1ZJc1dVRkJXV2xDTEVsQlFWTXNTVUZCUzBvc1JVRkJVMWdzVTBGQlUwMHNSVUZCVTBzc1VVRkJVMEVzUlVGQlUwMHNSVUZCVDBFc1NVRkZhRVlzU1VGRVFVZ3NSVUZCVTFBc1JVRkJWVk1zUlVGQlJXcENMRk5CUVZOaExFVkJRVTlPTEVWQlFWTlhMRWxCUVZFc1IwRkJTVXdzUlVGQlN5eEpRVUZOU1N4RlFVRkZWaXhGUVVGVFZ5eFBRVU5xUldZc1QwRkJVMWtzU1VGQlYxZ3NUMEZCVVN4UFFVRlBWeXhQUVVNM1F5eEpRVUZMUkN4RlFVRlhSU3hGUVVGUGJFSXNTMEZCUzFNc1MwRkJZVTBzUlVGQlQwTXNSVUZCVTAwc1VVRkJVVU1zVFVGRmRFVXNTVUZFUVU0c1JVRkJVMnBDTEV0QlFVdG5RaXhGUVVGVlJ5eEZRVUZIU2l4RlFVRkxVeXhOUVVGUFpDeE5RVU40UWt3c1QwRkJVMWtzU1VGQlYxZ3NUMEZCVVN4UFFVRlBWeXhIUVVkMFJGWXNVVUZCVVVZc1RVRkJVVUVzVFVGRGFFSkZMRkZCUVZGRUxFOUJRVk5CSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZlptOXlMVzltTG1wekluMD0iLCJ2YXIgdG9JT2JqZWN0PXJlcXVpcmUoMTE5KSx0b0xlbmd0aD1yZXF1aXJlKDEyMCksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoMTE2KTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxvLHIpe3ZhciBuLHU9dG9JT2JqZWN0KHQpLGk9dG9MZW5ndGgodS5sZW5ndGgpLGY9dG9BYnNvbHV0ZUluZGV4KHIsaSk7aWYoZSYmbyE9byl7Zm9yKDtpPmY7KWlmKChuPXVbZisrXSkhPW4pcmV0dXJuITB9ZWxzZSBmb3IoO2k+ZjtmKyspaWYoKGV8fGYgaW4gdSkmJnVbZl09PT1vKXJldHVybiBlfHxmfHwwO3JldHVybiFlJiYtMX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzFwYm1Oc2RXUmxjeTVxY3lKZExDSnVZVzFsY3lJNld5SjBiMGxQWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpZEc5TVpXNW5kR2dpTENKMGIwRmljMjlzZFhSbFNXNWtaWGdpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVNWTmZTVTVEVEZWRVJWTWlMQ0lrZEdocGN5SXNJbVZzSWl3aVpuSnZiVWx1WkdWNElpd2lkbUZzZFdVaUxDSlBJaXdpYkdWdVozUm9JaXdpYVc1a1pYZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJMRWxCUVVsQkxGVkJRVmxETEZGQlFWRXNhVUpCUTNCQ1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNaMEpCUVd0Q1JpeFJRVUZSTEhkQ1FVTTVRa2NzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFpeFBRVUZQTEZOQlFWVkRMRVZCUVU5RExFVkJRVWxETEVkQlF6RkNMRWxCUjBsRExFVkJTRUZETEVWQlFVbFlMRlZCUVZWUExFZEJRMlJMTEVWQlFWTldMRk5CUVZOVExFVkJRVVZETEZGQlEzQkNReXhGUVVGUlZpeG5Ra0ZCWjBKTkxFVkJRVmRITEVkQlNYWkRMRWRCUVVsT0xFZEJRV1ZGTEVkQlFVMUJMRWRCUVVrc1MwRkJUMGtzUlVGQlUwTXNSMEZITTBNc1NVRkdRVWdzUlVGQlVVTXNSVUZCUlVVc1QwRkZSMGdzUlVGQlR5eFBRVUZCTEU5QlJXWXNTMEZCVFVVc1JVRkJVME1zUlVGQlQwRXNTVUZCVXl4SlFVRkpVQ3hIUVVGbFR5eExRVUZUUml4SlFVTTFSRUVzUlVGQlJVVXNTMEZCVjB3c1JVRkJTU3hQUVVGUFJpeEhRVUZsVHl4SFFVRlRMRVZCUTNCRUxFOUJRVkZRTEVsQlFXZENJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmWVhKeVlYa3RhVzVqYkhWa1pYTXVhbk1pZlE9PSIsInZhciBJT2JqZWN0PXJlcXVpcmUoNTApLGRlZmluZWQ9cmVxdWlyZSgzMSk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIElPYmplY3QoZGVmaW5lZChlKSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGJ5MXBiMkpxWldOMExtcHpJbDBzSW01aGJXVnpJanBiSWtsUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aVpHVm1hVzVsWkNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnBkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hqUVVOc1FrTXNVVUZCVlVRc1VVRkJVU3hqUVVOMFFrVXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWl4UFFVRlBUQ3hSUVVGUlJTeFJRVUZSUnlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzUnZMV2x2WW1wbFkzUXVhbk1pZlE9PSIsInZhciBjdHg9cmVxdWlyZSgyOCksSU9iamVjdD1yZXF1aXJlKDUwKSx0b09iamVjdD1yZXF1aXJlKDEyMSksdG9MZW5ndGg9cmVxdWlyZSgxMjApLGFzYz1yZXF1aXJlKDE4KTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0PTE9PWUsYz0yPT1lLGk9Mz09ZSxuPTQ9PWUsdT02PT1lLG89NT09ZXx8dSxzPXJ8fGFzYztyZXR1cm4gZnVuY3Rpb24ocixhLGYpe2Zvcih2YXIgYixoLGo9dG9PYmplY3QociksbD1JT2JqZWN0KGopLHE9Y3R4KGEsZiwzKSxfPXRvTGVuZ3RoKGwubGVuZ3RoKSxnPTAsdj10P3MocixfKTpjP3MociwwKTp2b2lkIDA7Xz5nO2crKylpZigob3x8ZyBpbiBsKSYmKGg9cShiPWxbZ10sZyxqKSxlKSlpZih0KXZbZ109aDtlbHNlIGlmKGgpc3dpdGNoKGUpe2Nhc2UgMzpyZXR1cm4hMDtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA2OnJldHVybiBnO2Nhc2UgMjp2LnB1c2goYil9ZWxzZSBpZihuKXJldHVybiExO3JldHVybiB1Py0xOml8fG4/bjp2fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloY25KaGVTMXRaWFJvYjJSekxtcHpJbDBzSW01aGJXVnpJanBiSW1OMGVDSXNJbkpsY1hWcGNtVWlMQ0pKVDJKcVpXTjBJaXdpZEc5UFltcGxZM1FpTENKMGIweGxibWQwYUNJc0ltRnpZeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKVVdWQkZJaXdpSkdOeVpXRjBaU0lzSWtsVFgwMUJVQ0lzSWtsVFgwWkpURlJGVWlJc0lrbFRYMU5QVFVVaUxDSkpVMTlGVmtWU1dTSXNJa2xUWDBaSlRrUmZTVTVFUlZnaUxDSk9UMTlJVDB4RlV5SXNJbU55WldGMFpTSXNJaVIwYUdseklpd2lZMkZzYkdKaFkydG1iaUlzSW5Sb1lYUWlMQ0oyWVd3aUxDSnlaWE1pTENKUElpd2ljMlZzWmlJc0ltWWlMQ0pzWlc1bmRHZ2lMQ0pwYm1SbGVDSXNJbkpsYzNWc2RDSXNJbkIxYzJnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVU5QkxFbEJRVWxCTEVsQlFVMURMRkZCUVZFc1ZVRkRaRU1zVVVGQlZVUXNVVUZCVVN4alFVTnNRa1VzVTBGQlYwWXNVVUZCVVN4blFrRkRia0pITEZOQlFWZElMRkZCUVZFc1owSkJRMjVDU1N4SlFVRk5TaXhSUVVGUkxESkNRVU5zUWtzc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRk5ReXhIUVVNdlFpeEpRVUZKUXl4RlFVRnBRaXhIUVVGU1JpeEZRVU5VUnl4RlFVRnZRaXhIUVVGU1NDeEZRVU5hU1N4RlFVRnJRaXhIUVVGU1NpeEZRVU5XU3l4RlFVRnRRaXhIUVVGU1RDeEZRVU5ZVFN4RlFVRjNRaXhIUVVGU1RpeEZRVU5vUWs4c1JVRkJiVUlzUjBGQlVsQXNSMEZCWVUwc1JVRkRlRUpGTEVWQlFWTlFMRWRCUVZkS0xFbEJRM2hDTEU5QlFVOHNVMEZCVlZrc1JVRkJUME1zUlVGQldVTXNSMEZSYkVNc1NVRlFRU3hKUVUxSlF5eEZRVUZMUXl4RlFVNU1ReXhGUVVGSmJrSXNVMEZCVTJNc1IwRkRZazBzUlVGQlQzSkNMRkZCUVZGdlFpeEhRVU5tUlN4RlFVRkplRUlzU1VGQlNXdENMRVZCUVZsRExFVkJRVTBzUjBGRE1VSk5MRVZCUVZOeVFpeFRRVUZUYlVJc1JVRkJTMFVzVVVGRGRrSkRMRVZCUVZFc1JVRkRVa01zUlVGQlUycENMRVZCUVZOTkxFVkJRVTlETEVWQlFVOVJMRWRCUVZWa0xFVkJRVmxMTEVWQlFVOURMRVZCUVU4c1VVRkJRU3hGUVVWc1JWRXNSVUZCVTBNc1JVRkJUMEVzU1VGQlV5eEpRVUZKV0N4SFFVRlpWeXhMUVVGVFNDeExRVVYwUkVZc1JVRkJUVWNzUlVGRVRrb3NSVUZCVFVjc1JVRkJTMGNzUjBGRFJVRXNSVUZCVDBvc1IwRkRhRUprTEVkQlEwWXNSMEZCU1VVc1JVRkJVV2xDTEVWQlFVOUVMRWRCUVZOTUxFOUJRM1pDTEVkQlFVbEJMRVZCUVVzc1QwRkJVV0lzUjBGRGNFSXNTMEZCU3l4RlFVRkhMRTlCUVVFc1JVRkRVaXhMUVVGTExFVkJRVWNzVDBGQlQxa3NSVUZEWml4TFFVRkxMRVZCUVVjc1QwRkJUMDBzUlVGRFppeExRVUZMTEVWQlFVZERMRVZCUVU5RExFdEJRVXRTTEZGQlEyWXNSMEZCU1ZBc1JVRkJWU3hQUVVGQkxFVkJSM3BDTEU5QlFVOURMRWRCUVdsQ0xFVkJRVWxHTEVkQlFWZERMRVZCUVZkQkxFVkJRVmRqSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZllYSnlZWGt0YldWMGFHOWtjeTVxY3lKOSIsInZhciBjb2Y9cmVxdWlyZSgyMSk7bW9kdWxlLmV4cG9ydHM9T2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJTdHJpbmdcIj09Y29mKGUpP2Uuc3BsaXQoXCJcIik6T2JqZWN0KGUpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBiMkpxWldOMExtcHpJbDBzSW01aGJXVnpJanBiSW1OdlppSXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpVDJKcVpXTjBJaXdpY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVaUxDSnBkQ0lzSW5Od2JHbDBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMRlZCUld4Q1F5eFBRVUZQUXl4UlFVRlZReXhQUVVGUExFdEJRVXRETEhGQ1FVRnhRaXhIUVVGTFJDeFBRVUZUTEZOQlFWVkZMRWRCUTNoRkxFMUJRV3RDTEZWQlFWaE9MRWxCUVVsTkxFZEJRV3RDUVN4RlFVRkhReXhOUVVGTkxFbEJRVTFJTEU5QlFVOUZJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYVc5aWFtVmpkQzVxY3lKOSIsInZhciBzcGVjaWVzQ29uc3RydWN0b3I9cmVxdWlyZSgxNyk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocixlKXtyZXR1cm4gbmV3KHNwZWNpZXNDb25zdHJ1Y3RvcihyKSkoZSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzF6Y0dWamFXVnpMV055WldGMFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJaUxDSnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbTl5YVdkcGJtRnNJaXdpYkdWdVozUm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeHRRa0ZCY1VKRExGRkJRVkVzWjBOQlJXcERReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRVZCUVZWRExFZEJRMjVETEU5QlFVOHNTVUZCUzB3c2JVSkJRVzFDU1N4SFFVRjRRaXhEUVVGdFEwTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjloY25KaGVTMXpjR1ZqYVdWekxXTnlaV0YwWlM1cWN5SjkiLCJ2YXIgYUZ1bmN0aW9uPXJlcXVpcmUoNSk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obixyLHQpe2lmKGFGdW5jdGlvbihuKSx2b2lkIDA9PT1yKXJldHVybiBuO3N3aXRjaCh0KXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuLmNhbGwocix0KX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LHUpe3JldHVybiBuLmNhbGwocix0LHUpfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHQsdSxlKXtyZXR1cm4gbi5jYWxsKHIsdCx1LGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbi5hcHBseShyLGFyZ3VtZW50cyl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpkSGd1YW5NaVhTd2libUZ0WlhNaU9sc2lZVVoxYm1OMGFXOXVJaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKbWJpSXNJblJvWVhRaUxDSnNaVzVuZEdnaUxDSmhJaXdpWTJGc2JDSXNJbUlpTENKaklpd2lZWEJ3YkhraUxDSmhjbWQxYldWdWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGVkJRVmxETEZGQlFWRXNhVUpCUTNoQ1F5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFVkJRVWxETEVWQlFVMURMRWRCUlc1RExFZEJSRUZPTEZWQlFWVkpMRkZCUVVGQkxFbEJRMDVETEVWQlFXOUNMRTlCUVU5RUxFVkJReTlDTEU5QlFWRkZMRWRCUTA0c1MwRkJTeXhGUVVGSExFOUJRVThzVTBGQlZVTXNSMEZEZGtJc1QwRkJUMGdzUlVGQlIwa3NTMEZCUzBnc1JVRkJUVVVzU1VGRmRrSXNTMEZCU3l4RlFVRkhMRTlCUVU4c1UwRkJWVUVzUlVGQlIwVXNSMEZETVVJc1QwRkJUMHdzUlVGQlIwa3NTMEZCUzBnc1JVRkJUVVVzUlVGQlIwVXNTVUZGTVVJc1MwRkJTeXhGUVVGSExFOUJRVThzVTBGQlZVWXNSVUZCUjBVc1JVRkJSME1zUjBGRE4wSXNUMEZCVDA0c1JVRkJSMGtzUzBGQlMwZ3NSVUZCVFVVc1JVRkJSMFVzUlVGQlIwTXNTVUZITDBJc1QwRkJUeXhYUVVOTUxFOUJRVTlPTEVWQlFVZFBMRTFCUVUxT0xFVkJRVTFQSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZlkzUjRMbXB6SW4wPSIsInZhciBhRnVuY3Rpb249cmVxdWlyZSg1KSx0b09iamVjdD1yZXF1aXJlKDEyMSksSU9iamVjdD1yZXF1aXJlKDUwKSx0b0xlbmd0aD1yZXF1aXJlKDEyMCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbyxpKXthRnVuY3Rpb24odCk7dmFyIG49dG9PYmplY3QoZSksdT1JT2JqZWN0KG4pLGM9dG9MZW5ndGgobi5sZW5ndGgpLGE9aT9jLTE6MCxmPWk/LTE6MTtpZihyPDIpZm9yKDs7KXtpZihhIGluIHUpe289dVthXSxhKz1mO2JyZWFrfWlmKGErPWYsaT9hPDA6Yzw9YSl0aHJvdyBUeXBlRXJyb3IoXCJSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpfWZvcig7aT9hPj0wOmM+YTthKz1mKWEgaW4gdSYmKG89dChvLHVbYV0sYSxuKSk7cmV0dXJuIG99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzF5WldSMVkyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVlVWjFibU4wYVc5dUlpd2ljbVZ4ZFdseVpTSXNJblJ2VDJKcVpXTjBJaXdpU1U5aWFtVmpkQ0lzSW5SdlRHVnVaM1JvSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luUm9ZWFFpTENKallXeHNZbUZqYTJadUlpd2lZVXhsYmlJc0ltMWxiVzhpTENKcGMxSnBaMmgwSWl3aVR5SXNJbk5sYkdZaUxDSnNaVzVuZEdnaUxDSnBibVJsZUNJc0lta2lMQ0pVZVhCbFJYSnliM0lpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzYVVKQlEzQkNReXhUUVVGWFJDeFJRVUZSTEdkQ1FVTnVRa1VzVVVGQlZVWXNVVUZCVVN4alFVTnNRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkZka0pKTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlRVTXNSVUZCV1VNc1JVRkJUVU1zUlVGQlRVTXNSMEZEZGtSWUxGVkJRVlZSTEVkQlExWXNTVUZCU1Vrc1JVRkJTVllzVTBGQlUwc3NSMEZEWWswc1JVRkJUMVlzVVVGQlVWTXNSMEZEWmtVc1JVRkJVMVlzVTBGQlUxRXNSVUZCUlVVc1VVRkRjRUpETEVWQlFWRktMRVZCUVZWSExFVkJRVk1zUlVGQlNTeEZRVU12UWtVc1JVRkJTVXdzUjBGQlZ5eEZRVUZKTEVWQlEzWkNMRWRCUVVsR0xFVkJRVThzUlVGQlJ5eFBRVUZUTEVOQlEzSkNMRWRCUVVsTkxFdEJRVk5HTEVWQlFVMHNRMEZEYWtKSUxFVkJRVTlITEVWQlFVdEZMRWRCUTFwQkxFZEJRVk5ETEVWQlExUXNUVUZIUml4SFFVUkJSQ3hIUVVGVFF5eEZRVU5NVEN4RlFVRlZTU3hGUVVGUkxFVkJRVWxFTEVkQlFWVkRMRVZCUTJ4RExFMUJRVTFGTEZWQlFWVXNLME5CUjNCQ0xFdEJRVTFPTEVWQlFWVkpMRWRCUVZNc1JVRkJTVVFzUlVGQlUwTXNSVUZCVDBFc1IwRkJVME1zUlVGQlQwUXNTMEZCVTBZc1NVRkRjRVZJTEVWQlFVOUdMRVZCUVZkRkxFVkJRVTFITEVWQlFVdEZMRWRCUVZGQkxFVkJRVTlJTEVsQlJUbERMRTlCUVU5R0lpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZZWEp5WVhrdGNtVmtkV05sTG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZSg1NCksaXNBcnJheT1yZXF1aXJlKDUyKSxTUEVDSUVTPXJlcXVpcmUoMTMxKShcInNwZWNpZXNcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7dmFyIGU7cmV0dXJuIGlzQXJyYXkocikmJihcImZ1bmN0aW9uXCIhPXR5cGVvZihlPXIuY29uc3RydWN0b3IpfHxlIT09QXJyYXkmJiFpc0FycmF5KGUucHJvdG90eXBlKXx8KGU9dm9pZCAwKSxpc09iamVjdChlKSYmbnVsbD09PShlPWVbU1BFQ0lFU10pJiYoZT12b2lkIDApKSx2b2lkIDA9PT1lP0FycmF5OmV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzF6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5TG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW1selFYSnlZWGtpTENKVFVFVkRTVVZUSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltOXlhV2RwYm1Gc0lpd2lReUlzSW1OdmJuTjBjblZqZEc5eUlpd2lRWEp5WVhraUxDSndjbTkwYjNSNWNHVWlMQ0oxYm1SbFptbHVaV1FpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRk5CUVZkRExGRkJRVkVzWjBKQlEyNUNReXhSUVVGVlJDeFJRVUZSTEdWQlEyeENSU3hSUVVGVlJpeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xGZEJSV2hEUnl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRWxCUVVsRExFVkJVMFlzVDBGU1JVd3NVVUZCVVVrc1MwRkhUU3h0UWtGR2FFSkRMRVZCUVVsRUxFVkJRVk5GTEdOQlJXdENSQ3hKUVVGTlJTeFJRVUZUVUN4UlFVRlJTeXhGUVVGRlJ5eGhRVUZoU0N4UFFVRkJRU3hIUVVOcVJWQXNVMEZCVTA4c1NVRkZSQ3hSUVVSV1FTeEZRVUZKUVN4RlFVRkZTaXhaUVVOVlNTeFBRVUZCUVN4VFFVRkpTU3hKUVVWbVNpeEZRVUZyUWtVc1RVRkJVVVlpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5aGNuSmhlUzF6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5TG1wekluMD0iLCJ2YXIgY29mPXJlcXVpcmUoMjEpO21vZHVsZS5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKHIpe3JldHVyblwiQXJyYXlcIj09Y29mKHIpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBjeTFoY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKamIyWWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1GeVp5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1NVRkJUVU1zVVVGQlVTeFZRVU5zUWtNc1QwRkJUME1zVVVGQlZVTXNUVUZCVFVNc1UwRkJWeXhUUVVGcFFrTXNSMEZEYWtRc1RVRkJiVUlzVTBGQldrNHNTVUZCU1UwaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOXBjeTFoY25KaGVTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFGdW5jdGlvbj1yZXF1aXJlKDUpLGlzT2JqZWN0PXJlcXVpcmUoNTQpLGludm9rZT1yZXF1aXJlKDQ5KSxhcnJheVNsaWNlPVtdLnNsaWNlLGZhY3Rvcmllcz17fTttb2R1bGUuZXhwb3J0cz1GdW5jdGlvbi5iaW5kfHxmdW5jdGlvbihyKXt2YXIgZT1hRnVuY3Rpb24odGhpcyksaT1hcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLHQ9ZnVuY3Rpb24oKXt2YXIgbj1pLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiB0P2Z1bmN0aW9uKHIsZSxpKXtpZighKGUgaW4gZmFjdG9yaWVzKSl7Zm9yKHZhciB0PVtdLG49MDtuPGU7bisrKXRbbl09XCJhW1wiK24rXCJdXCI7ZmFjdG9yaWVzW2VdPUZ1bmN0aW9uKFwiRixhXCIsXCJyZXR1cm4gbmV3IEYoXCIrdC5qb2luKFwiLFwiKStcIilcIil9cmV0dXJuIGZhY3Rvcmllc1tlXShyLGkpfShlLG4ubGVuZ3RoLG4pOmludm9rZShlLG4scil9O3JldHVybiBpc09iamVjdChlLnByb3RvdHlwZSkmJih0LnByb3RvdHlwZT1lLnByb3RvdHlwZSksdH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlpYVc1a0xtcHpJbDBzSW01aGJXVnpJanBiSW1GR2RXNWpkR2x2YmlJc0luSmxjWFZwY21VaUxDSnBjMDlpYW1WamRDSXNJbWx1ZG05clpTSXNJbUZ5Y21GNVUyeHBZMlVpTENKemJHbGpaU0lzSW1aaFkzUnZjbWxsY3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSkdkVzVqZEdsdmJpSXNJbUpwYm1RaUxDSjBhR0YwSWl3aVptNGlMQ0owYUdseklpd2ljR0Z5ZEVGeVozTWlMQ0pqWVd4c0lpd2lZWEpuZFcxbGJuUnpJaXdpWW05MWJtUWlMQ0poY21keklpd2lZMjl1WTJGMElpd2lSaUlzSW14bGJpSXNJbTRpTENKcElpd2lhbTlwYmlJc0lteGxibWQwYUNJc0luQnliM1J2ZEhsd1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hWUVVGWlF5eFJRVUZSTEdsQ1FVTndRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEU5QlFWTkdMRkZCUVZFc1lVRkRha0pITEZkQlFXRXNSMEZCUjBNc1RVRkRhRUpETEZWQlFWa3NSMEZWYUVKRExFOUJRVTlETEZGQlFWVkRMRk5CUVZORExFMUJRVkVzVTBGQlkwTXNSMEZET1VNc1NVRkJTVU1zUlVGQlMxb3NWVUZCVldFc1RVRkRaa01zUlVGQlYxWXNWMEZCVjFjc1MwRkJTME1zVlVGQlZ5eEhRVU4wUTBNc1JVRkJVU3hYUVVOV0xFbEJRVWxETEVWQlFVOUtMRVZCUVZOTExFOUJRVTltTEZkQlFWZFhMRXRCUVV0RExGbEJRek5ETEU5QlFVOUlMR2RDUVVGblFra3NSVUZpV0N4VFFVRlZSeXhGUVVGSFF5eEZRVUZMU0N4SFFVTm9ReXhMUVVGTlJ5eExRVUZQWml4WFFVRlpMRU5CUTNaQ0xFbEJRVXNzU1VGQlNXZENMRVZCUVVrc1IwRkJTVU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpSaXhGUVVGTFJTeEpRVUZMUkN4RlFVRkZReXhIUVVGTExFdEJRVTlCTEVWQlFVa3NTVUZGZUVScVFpeFZRVUZWWlN4SFFVRlBXaXhUUVVGVExFMUJRVThzWjBKQlFXdENZU3hGUVVGRlJTeExRVUZMTEV0QlFVOHNTMEZEYWtVc1QwRkJUMnhDTEZWQlFWVmxMRWRCUVV0RUxFVkJRVWRHTEVkQlRHSXNRMEZoTmtKT0xFVkJRVWxOTEVWQlFVdFBMRTlCUVZGUUxFZEJRVkZtTEU5QlFVOVRMRVZCUVVsTkxFVkJRVTFRTEVsQlIzSkdMRTlCUkVsVUxGTkJRVk5WTEVWQlFVZGpMR0ZCUVZsVUxFVkJRVTFUTEZWQlFWbGtMRVZCUVVkakxGZEJRekZEVkNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gySnBibVF1YW5NaWZRPT0iLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIsbCl7dmFyIGE9dm9pZCAwPT09bDtzd2l0Y2goci5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gYT9lKCk6ZS5jYWxsKGwpO2Nhc2UgMTpyZXR1cm4gYT9lKHJbMF0pOmUuY2FsbChsLHJbMF0pO2Nhc2UgMjpyZXR1cm4gYT9lKHJbMF0sclsxXSk6ZS5jYWxsKGwsclswXSxyWzFdKTtjYXNlIDM6cmV0dXJuIGE/ZShyWzBdLHJbMV0sclsyXSk6ZS5jYWxsKGwsclswXSxyWzFdLHJbMl0pO2Nhc2UgNDpyZXR1cm4gYT9lKHJbMF0sclsxXSxyWzJdLHJbM10pOmUuY2FsbChsLHJbMF0sclsxXSxyWzJdLHJbM10pfXJldHVybiBlLmFwcGx5KGwscil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGJuWnZhMlV1YW5NaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbVp1SWl3aVlYSm5jeUlzSW5Sb1lYUWlMQ0oxYmlJc0lteGxibWQwYUNJc0ltTmhiR3dpTENKaGNIQnNlU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlNVTXNSVUZCVFVNc1IwRkRia01zU1VGQlNVTXNUMEZCUVVFc1NVRkJTMFFzUlVGRFZDeFBRVUZSUkN4RlFVRkxSeXhSUVVOWUxFdEJRVXNzUlVGQlJ5eFBRVUZQUkN4RlFVRkxTQ3hKUVVOQlFTeEZRVUZIU3l4TFFVRkxTQ3hIUVVNMVFpeExRVUZMTEVWQlFVY3NUMEZCVDBNc1JVRkJTMGdzUlVGQlIwTXNSVUZCU3l4SlFVTlNSQ3hGUVVGSFN5eExRVUZMU0N4RlFVRk5SQ3hGUVVGTExFbEJRM1pETEV0QlFVc3NSVUZCUnl4UFFVRlBSU3hGUVVGTFNDeEZRVUZIUXl4RlFVRkxMRWRCUVVsQkxFVkJRVXNzU1VGRGFrSkVMRVZCUVVkTExFdEJRVXRJTEVWQlFVMUVMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEpRVU5vUkN4TFFVRkxMRVZCUVVjc1QwRkJUMFVzUlVGQlMwZ3NSVUZCUjBNc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVkQlFVbEJMRVZCUVVzc1NVRkRNVUpFTEVWQlFVZExMRXRCUVV0SUxFVkJRVTFFTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEzcEVMRXRCUVVzc1JVRkJSeXhQUVVGUFJTeEZRVUZMU0N4RlFVRkhReXhGUVVGTExFZEJRVWxCTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEyNURSQ3hGUVVGSFN5eExRVUZMU0N4RlFVRk5SQ3hGUVVGTExFZEJRVWxCTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEyeEZMRTlCUVU5RUxFVkJRVWROTEUxQlFVMUtMRVZCUVUxRUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZhVzUyYjJ0bExtcHpJbjA9IiwidmFyIGNvZj1yZXF1aXJlKDIxKSxUQUc9cmVxdWlyZSgxMzEpKFwidG9TdHJpbmdUYWdcIiksQVJHPVwiQXJndW1lbnRzXCI9PWNvZihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0LG4scjtyZXR1cm4gdm9pZCAwPT09ZT9cIlVuZGVmaW5lZFwiOm51bGw9PT1lP1wiTnVsbFwiOlwic3RyaW5nXCI9PXR5cGVvZihuPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiBlW3RdfWNhdGNoKGUpe319KHQ9T2JqZWN0KGUpLFRBRykpP246QVJHP2NvZih0KTpcIk9iamVjdFwiPT0ocj1jb2YodCkpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNhbGxlZT9cIkFyZ3VtZW50c1wiOnJ9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amJHRnpjMjltTG1weklsMHNJbTVoYldWeklqcGJJbU52WmlJc0luSmxjWFZwY21VaUxDSlVRVWNpTENKQlVrY2lMQ0poY21kMWJXVnVkSE1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pQSWl3aVZDSXNJa0lpTENKclpYa2lMQ0psSWl3aVQySnFaV04wSWl3aVkyRnNiR1ZsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEZWQlEyUkRMRWxCUVUxRUxGRkJRVkVzVTBGQlVrRXNRMEZCYTBJc1pVRkZlRUpGTEVsQlFXdEVMR0ZCUVRWRFNDeEpRVUZKTEZkQlFXTXNUMEZCVDBrc1ZVRkJja0lzU1VGVFpFTXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWl4SlFVRkpReXhGUVVGSFF5eEZRVUZIUXl4RlFVTldMRmxCUVVFc1NVRkJUMGdzUlVGQmJVSXNXVUZCY1VJc1QwRkJVRUVzUlVGQll5eFBRVVZPTEdsQ1FVRndRMFVzUlVGV1JDeFRRVUZWUml4RlFVRkpTU3hIUVVONlFpeEpRVU5GTEU5QlFVOUtMRVZCUVVkSkxFZEJRMVlzVFVGQlQwTXNTMEZJUlN4RFFWVlpTaXhGUVVGSlN5eFBRVUZQVGl4SFFVRkxUQ3hOUVVGdlFrOHNSVUZGZGtST0xFbEJRVTFJTEVsQlFVbFJMRWRCUlUwc1YwRkJaa1VzUlVGQlNWWXNTVUZCU1ZFc1MwRkJjME1zYlVKQlFWcEJMRVZCUVVWTkxFOUJRWFZDTEZsQlFXTktJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmWTJ4aGMzTnZaaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBkUD1yZXF1aXJlKDc0KS5mLGNyZWF0ZT1yZXF1aXJlKDczKSxyZWRlZmluZUFsbD1yZXF1aXJlKDkzKSxjdHg9cmVxdWlyZSgyOCksYW5JbnN0YW5jZT1yZXF1aXJlKDkpLGZvck9mPXJlcXVpcmUoNDIpLCRpdGVyRGVmaW5lPXJlcXVpcmUoNTgpLHN0ZXA9cmVxdWlyZSg2MCksc2V0U3BlY2llcz1yZXF1aXJlKDEwMiksREVTQ1JJUFRPUlM9cmVxdWlyZSgzMiksZmFzdEtleT1yZXF1aXJlKDY4KS5mYXN0S2V5LHZhbGlkYXRlPXJlcXVpcmUoMTI4KSxTSVpFPURFU0NSSVBUT1JTP1wiX3NcIjpcInNpemVcIixnZXRFbnRyeT1mdW5jdGlvbihlLHQpe3ZhciByLGk9ZmFzdEtleSh0KTtpZihcIkZcIiE9PWkpcmV0dXJuIGUuX2lbaV07Zm9yKHI9ZS5fZjtyO3I9ci5uKWlmKHIuaz09dClyZXR1cm4gcn07bW9kdWxlLmV4cG9ydHM9e2dldENvbnN0cnVjdG9yOmZ1bmN0aW9uKGUsdCxyLGkpe3ZhciBuPWUoZnVuY3Rpb24oZSxmKXthbkluc3RhbmNlKGUsbix0LFwiX2lcIiksZS5fdD10LGUuX2k9Y3JlYXRlKG51bGwpLGUuX2Y9dm9pZCAwLGUuX2w9dm9pZCAwLGVbU0laRV09MCxudWxsIT1mJiZmb3JPZihmLHIsZVtpXSxlKX0pO3JldHVybiByZWRlZmluZUFsbChuLnByb3RvdHlwZSx7Y2xlYXI6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dmFsaWRhdGUodGhpcyx0KSxyPWUuX2ksaT1lLl9mO2k7aT1pLm4paS5yPSEwLGkucCYmKGkucD1pLnAubj12b2lkIDApLGRlbGV0ZSByW2kuaV07ZS5fZj1lLl9sPXZvaWQgMCxlW1NJWkVdPTB9LGRlbGV0ZTpmdW5jdGlvbihlKXt2YXIgcj12YWxpZGF0ZSh0aGlzLHQpLGk9Z2V0RW50cnkocixlKTtpZihpKXt2YXIgbj1pLm4sZj1pLnA7ZGVsZXRlIHIuX2lbaS5pXSxpLnI9ITAsZiYmKGYubj1uKSxuJiYobi5wPWYpLHIuX2Y9PWkmJihyLl9mPW4pLHIuX2w9PWkmJihyLl9sPWYpLHJbU0laRV0tLX1yZXR1cm4hIWl9LGZvckVhY2g6ZnVuY3Rpb24oZSl7dmFsaWRhdGUodGhpcyx0KTtmb3IodmFyIHIsaT1jdHgoZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwzKTtyPXI/ci5uOnRoaXMuX2Y7KWZvcihpKHIudixyLmssdGhpcyk7ciYmci5yOylyPXIucH0saGFzOmZ1bmN0aW9uKGUpe3JldHVybiEhZ2V0RW50cnkodmFsaWRhdGUodGhpcyx0KSxlKX19KSxERVNDUklQVE9SUyYmZFAobi5wcm90b3R5cGUsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB2YWxpZGF0ZSh0aGlzLHQpW1NJWkVdfX0pLG59LGRlZjpmdW5jdGlvbihlLHQscil7dmFyIGksbixmPWdldEVudHJ5KGUsdCk7cmV0dXJuIGY/Zi52PXI6KGUuX2w9Zj17aTpuPWZhc3RLZXkodCwhMCksazp0LHY6cixwOmk9ZS5fbCxuOnZvaWQgMCxyOiExfSxlLl9mfHwoZS5fZj1mKSxpJiYoaS5uPWYpLGVbU0laRV0rKyxcIkZcIiE9PW4mJihlLl9pW25dPWYpKSxlfSxnZXRFbnRyeTpnZXRFbnRyeSxzZXRTdHJvbmc6ZnVuY3Rpb24oZSx0LHIpeyRpdGVyRGVmaW5lKGUsdCxmdW5jdGlvbihlLHIpe3RoaXMuX3Q9dmFsaWRhdGUoZSx0KSx0aGlzLl9rPXIsdGhpcy5fbD12b2lkIDB9LGZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuX2ssdD10aGlzLl9sO3QmJnQucjspdD10LnA7cmV0dXJuIHRoaXMuX3QmJih0aGlzLl9sPXQ9dD90Lm46dGhpcy5fdC5fZik/c3RlcCgwLFwia2V5c1wiPT1lP3QuazpcInZhbHVlc1wiPT1lP3QudjpbdC5rLHQudl0pOih0aGlzLl90PXZvaWQgMCxzdGVwKDEpKX0scj9cImVudHJpZXNcIjpcInZhbHVlc1wiLCFyLCEwKSxzZXRTcGVjaWVzKHQpfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqYjJ4c1pXTjBhVzl1TFhOMGNtOXVaeTVxY3lKZExDSnVZVzFsY3lJNld5SmtVQ0lzSW5KbGNYVnBjbVVpTENKbUlpd2lZM0psWVhSbElpd2ljbVZrWldacGJtVkJiR3dpTENKamRIZ2lMQ0poYmtsdWMzUmhibU5sSWl3aVptOXlUMllpTENJa2FYUmxja1JsWm1sdVpTSXNJbk4wWlhBaUxDSnpaWFJUY0dWamFXVnpJaXdpUkVWVFExSkpVRlJQVWxNaUxDSm1ZWE4wUzJWNUlpd2lkbUZzYVdSaGRHVWlMQ0pUU1ZwRklpd2laMlYwUlc1MGNua2lMQ0owYUdGMElpd2lhMlY1SWl3aVpXNTBjbmtpTENKcGJtUmxlQ0lzSWw5cElpd2lYMllpTENKdUlpd2lheUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKblpYUkRiMjV6ZEhKMVkzUnZjaUlzSW5keVlYQndaWElpTENKT1FVMUZJaXdpU1ZOZlRVRlFJaXdpUVVSRVJWSWlMQ0pESWl3aWFYUmxjbUZpYkdVaUxDSmZkQ0lzSWw5c0lpd2lkVzVrWldacGJtVmtJaXdpY0hKdmRHOTBlWEJsSWl3aVkyeGxZWElpTENKMGFHbHpJaXdpWkdGMFlTSXNJbklpTENKd0lpd2lhU0lzSW1SbGJHVjBaU0lzSW01bGVIUWlMQ0p3Y21WMklpd2labTl5UldGamFDSXNJbU5oYkd4aVlXTnJabTRpTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSjJJaXdpYUdGeklpd2laMlYwSWl3aVpHVm1JaXdpZG1Gc2RXVWlMQ0p6WlhSVGRISnZibWNpTENKcGRHVnlZWFJsWkNJc0ltdHBibVFpTENKZmF5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hIUVVGTFF5eFJRVUZSTEdkQ1FVRm5Ra01zUlVGRE4wSkRMRTlCUVZOR0xGRkJRVkVzYjBKQlEycENSeXhaUVVGalNDeFJRVUZSTEcxQ1FVTjBRa2tzU1VGQlRVb3NVVUZCVVN4VlFVTmtTeXhYUVVGaFRDeFJRVUZSTEd0Q1FVTnlRazBzVFVGQlVVNHNVVUZCVVN4aFFVTm9RazhzV1VGQlkxQXNVVUZCVVN4clFrRkRkRUpSTEV0QlFVOVNMRkZCUVZFc1owSkJRMlpUTEZkQlFXRlVMRkZCUVZFc2EwSkJRM0pDVlN4WlFVRmpWaXhSUVVGUkxHdENRVU4wUWxjc1VVRkJWVmdzVVVGQlVTeFhRVUZYVnl4UlFVTTNRa01zVTBGQlYxb3NVVUZCVVN3d1FrRkRia0poTEV0QlFVOUlMRmxCUVdNc1MwRkJUeXhQUVVVMVFra3NVMEZCVnl4VFFVRlZReXhGUVVGTlF5eEhRVVUzUWl4SlFVTkpReXhGUVVSQlF5eEZRVUZSVUN4UlFVRlJTeXhIUVVWd1FpeEhRVUZqTEUxQlFWWkZMRVZCUVdVc1QwRkJUMGdzUlVGQlMwa3NSMEZCUjBRc1IwRkZiRU1zU1VGQlMwUXNSVUZCVVVZc1JVRkJTMHNzUjBGQlNVZ3NSVUZCVDBFc1JVRkJVVUVzUlVGQlRVa3NSVUZEZWtNc1IwRkJTVW9zUlVGQlRVc3NSMEZCUzA0c1JVRkJTeXhQUVVGUFF5eEhRVWt2UWswc1QwRkJUME1zVVVGQlZTeERRVU5tUXl4bFFVRm5RaXhUUVVGVlF5eEZRVUZUUXl4RlFVRk5ReXhGUVVGUlF5eEhRVU12UXl4SlFVRkpReXhGUVVGSlNpeEZRVUZSTEZOQlFWVllMRVZCUVUxblFpeEhRVU01UWpGQ0xGZEJRVmRWTEVWQlFVMWxMRVZCUVVkSUxFVkJRVTBzVFVGRE1VSmFMRVZCUVV0cFFpeEhRVUZMVEN4RlFVTldXaXhGUVVGTFNTeEhRVUZMYWtJc1QwRkJUeXhOUVVOcVFtRXNSVUZCUzBzc1VVRkJRVUVzUlVGRFRFd3NSVUZCUzJ0Q0xGRkJRVUZCTEVWQlEweHNRaXhGUVVGTFJpeE5RVUZSTEVWQlEwZHhRaXhOUVVGYVNDeEhRVUYxUW5wQ0xFMUJRVTE1UWl4RlFVRlZTQ3hGUVVGUllpeEZRVUZMWXl4SFFVRlJaQ3hMUVhORWJFVXNUMEZ3UkVGYUxGbEJRVmt5UWl4RlFVRkZTeXhWUVVGWExFTkJSM1pDUXl4TlFVRlBMRmRCUTB3c1NVRkJTeXhKUVVGSmNrSXNSVUZCVDBnc1UwRkJVM2xDTEV0QlFVMVdMRWRCUVU5WExFVkJRVTkyUWl4RlFVRkxTU3hIUVVGSlJpeEZRVUZSUml4RlFVRkxTeXhIUVVGSlNDeEZRVUZQUVN4RlFVRlJRU3hGUVVGTlNTeEZRVU14Umtvc1JVRkJUWE5DTEVkQlFVRkJMRVZCUTBaMFFpeEZRVUZOZFVJc1NVRkJSM1pDTEVWQlFVMTFRaXhGUVVGSmRrSXNSVUZCVFhWQ0xFVkJRVVZ1UWl4UFFVRkJRU3hWUVVONFFtbENMRVZCUVV0eVFpeEZRVUZOZDBJc1IwRkZjRUl4UWl4RlFVRkxTeXhIUVVGTFRDeEZRVUZMYTBJc1VVRkJRVUVzUlVGRFpteENMRVZCUVV0R0xFMUJRVkVzUjBGSlpqWkNMRTlCUVZVc1UwRkJWVEZDTEVkQlEyeENMRWxCUVVsRUxFVkJRVTlJTEZOQlFWTjVRaXhMUVVGTlZpeEhRVU4wUWxZc1JVRkJVVWdzVTBGQlUwTXNSVUZCVFVNc1IwRkRNMElzUjBGQlNVTXNSVUZCVHl4RFFVTlVMRWxCUVVrd1FpeEZRVUZQTVVJc1JVRkJUVWtzUlVGRFluVkNMRVZCUVU4elFpeEZRVUZOZFVJc1UwRkRWbnBDTEVWQlFVdEpMRWRCUVVkR0xFVkJRVTEzUWl4SFFVTnlRbmhDTEVWQlFVMXpRaXhIUVVGQlFTeEZRVU5HU3l4SlFVRk5RU3hGUVVGTGRrSXNSVUZCU1hOQ0xFZEJRMlpCTEVsQlFVMUJMRVZCUVV0SUxFVkJRVWxKTEVkQlEyWTNRaXhGUVVGTFN5eEpRVUZOU0N4SlFVRlBSaXhGUVVGTFN5eEhRVUZMZFVJc1IwRkROVUkxUWl4RlFVRkxhMElzU1VGQlRXaENMRWxCUVU5R0xFVkJRVXRyUWl4SFFVRkxWeXhIUVVOb1F6ZENMRVZCUVV0R0xGRkJRMHdzVVVGQlUwa3NSMEZKWWpSQ0xGRkJRVk1zVTBGQmFVSkRMRWRCUTNoQ2JFTXNVMEZCVTNsQ0xFdEJRVTFXTEVkQlIyWXNTVUZHUVN4SlFVTkpWaXhGUVVSQmFFSXNSVUZCU1Vjc1NVRkJTVEJETEVWQlFWbERMRlZCUVZWRExFOUJRVk1zUlVGQlNVUXNWVUZCVlN4UlFVRkJMRVZCUVdkQ0xFZEJSV3hGT1VJc1JVRkJVVUVzUlVGQlVVRXNSVUZCVFVrc1JVRkJTV2RDTEV0QlFVdHFRaXhKUVVkd1F5eEpRVVpCYmtJc1JVRkJSV2RDTEVWQlFVMW5ReXhGUVVGSGFFTXNSVUZCVFVzc1JVRkJSMlVzVFVGRlluQkNMRWRCUVZOQkxFVkJRVTF6UWl4SFFVRkhkRUlzUlVGQlVVRXNSVUZCVFhWQ0xFZEJTek5EVlN4SlFVRkxMRk5CUVdGc1F5eEhRVU5vUWl4UlFVRlRSaXhUUVVGVFJpeFRRVUZUZVVJc1MwRkJUVllzUjBGQlQxZ3NUVUZIZUVOT0xHRkJRV0ZZTEVkQlFVY3JRaXhGUVVGRlN5eFZRVUZYTEU5QlFWRXNRMEZEZGtOblFpeEpRVUZMTEZkQlEwZ3NUMEZCVDNaRExGTkJRVk41UWl4TFFVRk5WaXhIUVVGTlpDeFRRVWQ2UW1sQ0xFZEJSVlJ6UWl4SlFVRkxMRk5CUVZWeVF5eEZRVUZOUXl4RlFVRkxjVU1zUjBGRGVFSXNTVUZEU1ZRc1JVRkJUVEZDTEVWQlJFNUVMRVZCUVZGSUxGTkJRVk5ETEVWQlFVMURMRWRCYjBKNlFpeFBRV3BDUlVNc1JVRkRSa0VzUlVGQlRXZERMRVZCUVVsSkxFZEJSMVowUXl4RlFVRkxhMElzUjBGQlMyaENMRVZCUVZFc1EwRkRhRUozUWl4RlFVRkhka0lzUlVGQlVWQXNVVUZCVVVzc1IwRkJRVUVzUjBGRGJrSk5MRVZCUVVkT0xFVkJRMGhwUXl4RlFVRkhTU3hGUVVOSVlpeEZRVUZIU1N4RlFVRlBOMElzUlVGQlMydENMRWRCUTJaYUxFOUJRVUZCTEVWQlEwRnJRaXhIUVVGQlFTeEhRVVZIZUVJc1JVRkJTMHNzUzBGQlNVd3NSVUZCUzBzc1IwRkJTMGdzUjBGRGNFSXlRaXhKUVVGTlFTeEZRVUZMZGtJc1JVRkJTVW9zUjBGRGJrSkdMRVZCUVV0R0xGRkJSVk1zVFVGQlZrc3NTVUZCWlVnc1JVRkJTMGtzUjBGQlIwUXNSMEZCVTBRc1NVRkROMEpHTEVkQlJWaEVMRk5CUVZWQkxGTkJRMVozUXl4VlFVRlhMRk5CUVZWNFFpeEZRVUZIU0N4RlFVRk5ReXhIUVVjMVFuSkNMRmxCUVZsMVFpeEZRVUZIU0N4RlFVRk5MRk5CUVZVMFFpeEZRVUZWUXl4SFFVTjJRMjVDTEV0QlFVdE1MRWRCUVV0d1FpeFRRVUZUTWtNc1JVRkJWVFZDTEVkQlF6ZENWU3hMUVVGTGIwSXNSMEZCUzBRc1JVRkRWbTVDTEV0QlFVdEtMRkZCUVVGQkxFZEJRMG9zVjBGTFJDeEpRVXBCTEVsQlEwbDFRaXhGUVVSUGJrSXNTMEZEUzI5Q0xFZEJRMXA0UXl4RlFVWlBiMElzUzBGRlRVb3NSMEZGVm1oQ0xFZEJRVk5CTEVWQlFVMXpRaXhIUVVGSGRFSXNSVUZCVVVFc1JVRkJUWFZDTEVWQlJYWkRMRTlCVGxkSUxFdEJUVVJNTEV0QlRrTkxMRXRCVFZsS0xFZEJRVXRvUWl4RlFVRlJRU3hGUVVGUlFTeEZRVUZOU1N4RlFVNTJRMmRDTEV0QlRXZEVUQ3hIUVVGSFdpeEpRVTF1UTFvc1MwRkJTeXhGUVVGd1FpeFJRVUZTWjBRc1JVRkJLMEoyUXl4RlFVRk5TeXhGUVVNM1FpeFZRVUZTYTBNc1JVRkJhVU4yUXl4RlFVRk5aME1zUlVGRE5VSXNRMEZCUTJoRExFVkJRVTFMTEVWQlFVZE1MRVZCUVUxblF5eExRV1J3UWxvc1MwRlJTa3dzVVVGQlFVRXNSVUZEUlhoQ0xFdEJRVXNzUzBGTlltOUNMRVZCUVZNc1ZVRkJXU3hWUVVGWFFTeEhRVUZCUVN4SFFVZHVRMjVDTEZkQlFWZHJRaUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDJOdmJHeGxZM1JwYjI0dGMzUnliMjVuTG1wekluMD0iLCJ2YXIgcmVkZWZpbmU9cmVxdWlyZSg5NCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLG4pe2Zvcih2YXIgaSBpbiByKXJlZGVmaW5lKGUsaSxyW2ldLG4pO3JldHVybiBlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXlaV1JsWm1sdVpTMWhiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZrWldacGJtVWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5SaGNtZGxkQ0lzSW5OeVl5SXNJbk5oWm1VaUxDSnJaWGtpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRk5CUVZkRExGRkJRVkVzWlVGRGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1JVRkJTME1zUjBGRGRFTXNTVUZCU3l4SlFVRkpReXhMUVVGUFJpeEZRVUZMVEN4VFFVRlRTU3hGUVVGUlJ5eEZRVUZMUml4RlFVRkpSU3hIUVVGTlJDeEhRVU55UkN4UFFVRlBSaUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDNKbFpHVm1hVzVsTFdGc2JDNXFjeUo5IiwidmFyIGFuT2JqZWN0PXJlcXVpcmUoMTApLGRQcz1yZXF1aXJlKDc1KSxlbnVtQnVnS2V5cz1yZXF1aXJlKDM0KSxJRV9QUk9UTz1yZXF1aXJlKDEwNCkoXCJJRV9QUk9UT1wiKSxFbXB0eT1mdW5jdGlvbigpe30sY3JlYXRlRGljdD1mdW5jdGlvbigpe3ZhciBlLHQ9cmVxdWlyZSgzMykoXCJpZnJhbWVcIikscj1lbnVtQnVnS2V5cy5sZW5ndGg7Zm9yKHQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixyZXF1aXJlKDQ2KS5hcHBlbmRDaGlsZCh0KSx0LnNyYz1cImphdmFzY3JpcHQ6XCIsKGU9dC5jb250ZW50V2luZG93LmRvY3VtZW50KS5vcGVuKCksZS53cml0ZShcIjxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8XFwvc2NyaXB0PlwiKSxlLmNsb3NlKCksY3JlYXRlRGljdD1lLkY7ci0tOylkZWxldGUgY3JlYXRlRGljdC5wcm90b3R5cGVbZW51bUJ1Z0tleXNbcl1dO3JldHVybiBjcmVhdGVEaWN0KCl9O21vZHVsZS5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIG51bGwhPT1lPyhFbXB0eS5wcm90b3R5cGU9YW5PYmplY3QoZSkscj1uZXcgRW1wdHksRW1wdHkucHJvdG90eXBlPW51bGwscltJRV9QUk9UT109ZSk6cj1jcmVhdGVEaWN0KCksdm9pZCAwPT09dD9yOmRQcyhyLHQpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFkzSmxZWFJsTG1weklsMHNJbTVoYldWeklqcGJJbUZ1VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW1SUWN5SXNJbVZ1ZFcxQ2RXZExaWGx6SWl3aVNVVmZVRkpQVkU4aUxDSkZiWEIwZVNJc0ltTnlaV0YwWlVScFkzUWlMQ0pwWm5KaGJXVkViMk4xYldWdWRDSXNJbWxtY21GdFpTSXNJbWtpTENKc1pXNW5kR2dpTENKemRIbHNaU0lzSW1ScGMzQnNZWGtpTENKaGNIQmxibVJEYUdsc1pDSXNJbk55WXlJc0ltTnZiblJsYm5SWGFXNWtiM2NpTENKa2IyTjFiV1Z1ZENJc0ltOXdaVzRpTENKM2NtbDBaU0lzSW14MElpd2lZMnh2YzJVaUxDSkdJaXdpY0hKdmRHOTBlWEJsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrOWlhbVZqZENJc0ltTnlaV0YwWlNJc0lrOGlMQ0pRY205d1pYSjBhV1Z6SWl3aWNtVnpkV3gwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zU1VGQlRVUXNVVUZCVVN4cFFrRkRaRVVzV1VGQlkwWXNVVUZCVVN4dlFrRkRkRUpITEZOQlFWZElMRkZCUVZFc1owSkJRVkpCTEVOQlFYbENMRmxCUTNCRFNTeE5RVUZSTEdGQlNWSkRMRmRCUVdFc1YwRkZaaXhKUVVsSlF5eEZRVXBCUXl4RlFVRlRVQ3hSUVVGUkxHZENRVUZTUVN4RFFVRjVRaXhWUVVOc1ExRXNSVUZCU1U0c1dVRkJXVThzVDBGamNFSXNTVUZXUVVZc1JVRkJUMGNzVFVGQlRVTXNVVUZCVlN4UFFVTjJRbGdzVVVGQlVTeFhRVUZYV1N4WlFVRlpUQ3hIUVVNdlFrRXNSVUZCVDAwc1NVRkJUU3hsUVVkaVVDeEZRVUZwUWtNc1JVRkJUMDhzWTBGQlkwTXNWVUZEZGtKRExFOUJRMlpXTEVWQlFXVlhMRTFCUVUxRExIVkRRVU55UWxvc1JVRkJaV0VzVVVGRFptUXNWMEZCWVVNc1JVRkJaV01zUlVGRGNrSmFMRmxCUVZsSUxGZEJRVzlDWjBJc1ZVRkJSVzVDTEZsQlFWbE5MRWxCUTNKRUxFOUJRVTlJTEdOQlIxUnBRaXhQUVVGUFF5eFJRVUZWUXl4UFFVRlBReXhSUVVGVkxGTkJRV2RDUXl4RlFVRkhReXhIUVVOdVJDeEpRVUZKUXl4RlFWRktMRTlCVUZVc1QwRkJUa1lzUjBGRFJuUkNMRTFCUVdWcFFpeFZRVUZKZEVJc1UwRkJVekpDTEVkQlF6VkNSU3hGUVVGVExFbEJRVWw0UWl4TlFVTmlRU3hOUVVGbGFVSXNWVUZCU1N4TFFVVnVRazhzUlVGQlQzcENMRlZCUVZsMVFpeEhRVU5rUlN4RlFVRlRka0lzYTBKQlFVRkJMRWxCUTFSelFpeEZRVUV5UWtNc1JVRkJVek5DTEVsQlFVa3lRaXhGUVVGUlJDSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYMjlpYW1WamRDMWpjbVZoZEdVdWFuTWlmUT09IiwidmFyIGFuT2JqZWN0PXJlcXVpcmUoMTApLElFOF9ET01fREVGSU5FPXJlcXVpcmUoNDcpLHRvUHJpbWl0aXZlPXJlcXVpcmUoMTIyKSxkUD1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZXhwb3J0cy5mPXJlcXVpcmUoMzIpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHIsdCl7aWYoYW5PYmplY3QoZSkscj10b1ByaW1pdGl2ZShyLCEwKSxhbk9iamVjdCh0KSxJRThfRE9NX0RFRklORSl0cnl7cmV0dXJuIGRQKGUscix0KX1jYXRjaChlKXt9aWYoXCJnZXRcImluIHR8fFwic2V0XCJpbiB0KXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm5cInZhbHVlXCJpbiB0JiYoZVtyXT10LnZhbHVlKSxlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFpIQXVhbk1pWFN3aWJtRnRaWE1pT2xzaVlXNVBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2lTVVU0WDBSUFRWOUVSVVpKVGtVaUxDSjBiMUJ5YVcxcGRHbDJaU0lzSW1SUUlpd2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2laaUlzSWs4aUxDSlFJaXdpUVhSMGNtbGlkWFJsY3lJc0ltVWlMQ0pVZVhCbFJYSnliM0lpTENKMllXeDFaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMR1ZCUVdsQ1JDeFJRVUZSTEhGQ1FVTjZRa1VzV1VGQlkwWXNVVUZCVVN4dFFrRkRkRUpITEVkQlFVdERMRTlCUVU5RExHVkJSV2hDUXl4UlFVRlJReXhGUVVGSlVDeFJRVUZSTEd0Q1FVRnZRa2tzVDBGQlQwTXNaVUZCYVVJc1UwRkJkMEpITEVWQlFVZERMRVZCUVVkRExFZEJTVFZHTEVkQlNFRllMRk5CUVZOVExFZEJRMVJETEVWQlFVbFFMRmxCUVZsUExFZEJRVUZCTEVkQlEyaENWaXhUUVVGVFZ5eEhRVU5NVkN4bFFVRm5RaXhKUVVOc1FpeFBRVUZQUlN4SFFVRkhTeXhGUVVGSFF5eEZRVUZIUXl4SFFVTm9RaXhOUVVGUFF5eEpRVU5VTEVkQlFVa3NVVUZCVTBRc1IwRkJZeXhSUVVGVFFTeEZRVUZaTEUxQlFVMUZMRlZCUVZVc05FSkJSV2hGTEUxQlJFa3NWVUZCVjBZc1NVRkJXVVlzUlVGQlJVTXNSMEZCUzBNc1JVRkJWMGNzVDBGRGRFTk1JaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYjJKcVpXTjBMV1J3TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgTElCUkFSWT1yZXF1aXJlKDYyKSwkZXhwb3J0PXJlcXVpcmUoMzYpLHJlZGVmaW5lPXJlcXVpcmUoOTQpLGhpZGU9cmVxdWlyZSg0NSksSXRlcmF0b3JzPXJlcXVpcmUoNjEpLCRpdGVyQ3JlYXRlPXJlcXVpcmUoNTcpLHNldFRvU3RyaW5nVGFnPXJlcXVpcmUoMTAzKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKDgxKSxJVEVSQVRPUj1yZXF1aXJlKDEzMSkoXCJpdGVyYXRvclwiKSxCVUdHWT0hKFtdLmtleXMmJlwibmV4dFwiaW5bXS5rZXlzKCkpLHJldHVyblRoaXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsaSxuLG8scyl7JGl0ZXJDcmVhdGUodCxyLGkpO3ZhciB1LGEsVCxSPWZ1bmN0aW9uKGUpe2lmKCFCVUdHWSYmZSBpbiBJKXJldHVybiBJW2VdO3N3aXRjaChlKXtjYXNlXCJrZXlzXCI6Y2FzZVwidmFsdWVzXCI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0KHRoaXMsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgdCh0aGlzLGUpfX0sZj1yK1wiIEl0ZXJhdG9yXCIsYz1cInZhbHVlc1wiPT1uLHA9ITEsST1lLnByb3RvdHlwZSxoPUlbSVRFUkFUT1JdfHxJW1wiQEBpdGVyYXRvclwiXXx8biYmSVtuXSxsPWh8fFIobikseT1uP2M/UihcImVudHJpZXNcIik6bDp2b2lkIDAsQT1cIkFycmF5XCI9PXImJkkuZW50cmllc3x8aDtpZihBJiYoVD1nZXRQcm90b3R5cGVPZihBLmNhbGwobmV3IGUpKSkhPT1PYmplY3QucHJvdG90eXBlJiZULm5leHQmJihzZXRUb1N0cmluZ1RhZyhULGYsITApLExJQlJBUll8fFwiZnVuY3Rpb25cIj09dHlwZW9mIFRbSVRFUkFUT1JdfHxoaWRlKFQsSVRFUkFUT1IscmV0dXJuVGhpcykpLGMmJmgmJlwidmFsdWVzXCIhPT1oLm5hbWUmJihwPSEwLGw9ZnVuY3Rpb24oKXtyZXR1cm4gaC5jYWxsKHRoaXMpfSksTElCUkFSWSYmIXN8fCFCVUdHWSYmIXAmJklbSVRFUkFUT1JdfHxoaWRlKEksSVRFUkFUT1IsbCksSXRlcmF0b3JzW3JdPWwsSXRlcmF0b3JzW2ZdPXJldHVyblRoaXMsbilpZih1PXt2YWx1ZXM6Yz9sOlIoXCJ2YWx1ZXNcIiksa2V5czpvP2w6UihcImtleXNcIiksZW50cmllczp5fSxzKWZvcihhIGluIHUpYSBpbiBJfHxyZWRlZmluZShJLGEsdVthXSk7ZWxzZSAkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKEJVR0dZfHxwKSxyLHUpO3JldHVybiB1fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBkR1Z5TFdSbFptbHVaUzVxY3lKZExDSnVZVzFsY3lJNld5Sk1TVUpTUVZKWklpd2ljbVZ4ZFdseVpTSXNJaVJsZUhCdmNuUWlMQ0p5WldSbFptbHVaU0lzSW1ocFpHVWlMQ0pKZEdWeVlYUnZjbk1pTENJa2FYUmxja055WldGMFpTSXNJbk5sZEZSdlUzUnlhVzVuVkdGbklpd2laMlYwVUhKdmRHOTBlWEJsVDJZaUxDSkpWRVZTUVZSUFVpSXNJa0pWUjBkWklpd2lhMlY1Y3lJc0luSmxkSFZ5YmxSb2FYTWlMQ0owYUdseklpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJa0poYzJVaUxDSk9RVTFGSWl3aVEyOXVjM1J5ZFdOMGIzSWlMQ0p1WlhoMElpd2lSRVZHUVZWTVZDSXNJa2xUWDFORlZDSXNJa1pQVWtORlJDSXNJbTFsZEdodlpITWlMQ0pyWlhraUxDSkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTSXNJbWRsZEUxbGRHaHZaQ0lzSW10cGJtUWlMQ0p3Y205MGJ5SXNJbFJCUnlJc0lrUkZSbDlXUVV4VlJWTWlMQ0pXUVV4VlJWTmZRbFZISWl3aWNISnZkRzkwZVhCbElpd2lKRzVoZEdsMlpTSXNJaVJrWldaaGRXeDBJaXdpSkdWdWRISnBaWE1pTENJa1lXNTVUbUYwYVhabElpd2laVzUwY21sbGN5SXNJbU5oYkd3aUxDSlBZbXBsWTNRaUxDSnVZVzFsSWl3aWRtRnNkV1Z6SWl3aVVDSXNJa1lpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGpRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeGhRVU5zUWtVc1UwRkJWMFlzVVVGQlVTeGxRVU51UWtjc1MwRkJUMGdzVVVGQlVTeFhRVU5tU1N4VlFVRlpTaXhSUVVGUkxHZENRVU53UWtzc1dVRkJZMHdzVVVGQlVTeHJRa0ZEZEVKTkxHVkJRV2xDVGl4UlFVRlJMSGRDUVVONlFrOHNaVUZCYVVKUUxGRkJRVkVzYVVKQlEzcENVU3hUUVVGWFVpeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xGbEJRemRDVXl4UlFVRlZMRWRCUVVkRExFMUJRVkVzVVVGQlZTeEhRVUZIUVN4UlFVdHNRME1zVjBGQllTeFhRVUZqTEU5QlFVOURMRTFCUlhSRFF5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFVkJRVTFETEVWQlFVMURMRVZCUVdGRExFVkJRVTFETEVWQlFWTkRMRVZCUVZGRExFZEJRM3BGYUVJc1dVRkJXVmtzUlVGQllVUXNSVUZCVFVVc1IwRkRMMElzU1VGbFNVa3NSVUZCVTBNc1JVRkJTME1zUlVGbVpFTXNSVUZCV1N4VFFVRlZReXhIUVVONFFpeEpRVUZMYWtJc1QwRkJVMmxDTEV0QlFWRkRMRVZCUVU4c1QwRkJUMEVzUlVGQlRVUXNSMEZETVVNc1QwRkJVVUVzUjBGRFRpeEpRVlpMTEU5QlYwd3NTVUZXVHl4VFFWVk5MRTlCUVU4c1YwRkJiMElzVDBGQlR5eEpRVUZKVkN4RlFVRlpUQ3hMUVVGTll5eEpRVU55UlN4UFFVRlBMRmRCUVhGQ0xFOUJRVThzU1VGQlNWUXNSVUZCV1V3c1MwRkJUV01zUzBGRmVrUkZMRVZCUVUxYUxFVkJRVThzV1VGRFltRXNSVUZrVHl4VlFXTk5WaXhGUVVOaVZ5eEhRVUZCUVN4RlFVTkJTQ3hGUVVGUldpeEZRVUZMWjBJc1ZVRkRZa01zUlVGQlZVd3NSVUZCVFc1Q0xGZEJRV0Z0UWl4RlFXNUNha0lzWlVGdFFuVkRVaXhIUVVGWFVTeEZRVUZOVWl4SFFVTndSV01zUlVGQlYwUXNSMEZCVjFBc1JVRkJWVTRzUjBGRGFFTmxMRVZCUVZkbUxFVkJRVmRWTEVWQlFYZENTaXhGUVVGVkxGZEJRWEpDVVN4UFFVRkJRU3hGUVVOdVEwVXNSVUZCY1VJc1UwRkJVbTVDTEVkQlFXdENWeXhGUVVGTlV5eFRRVUZ4UWtvc1JVRjNRamxFTEVkQmNrSkpSeXhKUVVOR1dDeEZRVUZ2UW1wQ0xHVkJRV1UwUWl4RlFVRlhSU3hMUVVGTExFbEJRVWwwUWl4UFFVTTNRblZDTEU5QlFVOVFMRmRCUVdGUUxFVkJRV3RDVGl4UFFVVTVSRm9zWlVGQlpXdENMRVZCUVcxQ1NTeEhRVUZCUVN4SFFVVTNRamRDTEZOQlFXbEVMRzFDUVVFdlFubENMRVZCUVd0Q2FFSXNWMEZCZVVKTUxFdEJRVXR4UWl4RlFVRnRRbWhDTEZOQlFWVkhMR0ZCU1hCSGEwSXNSMEZCWTBjc1IwRnFRMUFzVjBGcFEydENRU3hGUVVGUlR5eFBRVU51UTFRc1IwRkJRVUVzUlVGRFFVY3NSVUZCVnl4WFFVRnZRaXhQUVVGUFJDeEZRVUZSU3l4TFFVRkxla0lzVVVGSEwwTmlMRlZCUVZkelFpeEpRVUZaV2l4UlFVRlRjVUlzUjBGQlpVZ3NSVUZCVFc1Q0xGZEJRM3BFVEN4TFFVRkxkMElzUlVGQlQyNUNMRk5CUVZWNVFpeEhRVWQ0UWpkQ0xGVkJRVlZaTEVkQlFWRnBRaXhGUVVOc1FqZENMRlZCUVZWM1FpeEhRVUZQYWtJc1YwRkRZbEVzUlVGTlJpeEhRVXhCUnl4RlFVRlZMRU5CUTFKclFpeFBRVUZSV0N4RlFVRmhTU3hGUVVGWFVpeEZRVGxEZWtJc1ZVRXJRMUJtTEV0QlFVMVZMRVZCUVZOaExFVkJRVmRTTEVWQmFFUnlRaXhSUVdsRVRGY3NVVUZCVTBZc1IwRkZVR0lzUlVGQlVTeEpRVUZMUlN4TFFVRlBSQ3hGUVVOb1FrTXNTMEZCVDBrc1IwRkJVWHBDTEZOQlFWTjVRaXhGUVVGUFNpeEZRVUZMUkN4RlFVRlJReXhUUVVNM1EzUkNMRkZCUVZGQkxGRkJRVkYzUXl4RlFVRkplRU1zVVVGQlVYbERMRWRCUVV0cVF5eFBRVUZUY1VJc1IwRkJZV1FzUlVGQlRVMHNSMEZGZEVVc1QwRkJUMEVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5cGRHVnlMV1JsWm1sdVpTNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuKXtyZXR1cm57dmFsdWU6bixkb25lOiEhZX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGRHVnlMWE4wWlhBdWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1SdmJtVWlMQ0oyWVd4MVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVFVNc1IwRkRMMElzVFVGQlR5eERRVUZGUVN4TlFVRlBRU3hGUVVGUFJDeFBRVUZSUVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gybDBaWEl0YzNSbGNDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdsb2JhbD1yZXF1aXJlKDQzKSxkUD1yZXF1aXJlKDc0KSxERVNDUklQVE9SUz1yZXF1aXJlKDMyKSxTUEVDSUVTPXJlcXVpcmUoMTMxKShcInNwZWNpZXNcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI9Z2xvYmFsW2VdO0RFU0NSSVBUT1JTJiZyJiYhcltTUEVDSUVTXSYmZFAuZihyLFNQRUNJRVMse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WlhRdGMzQmxZMmxsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpuYkc5aVlXd2lMQ0p5WlhGMWFYSmxJaXdpWkZBaUxDSkVSVk5EVWtsUVZFOVNVeUlzSWxOUVJVTkpSVk1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVMwVlpJaXdpUXlJc0ltWWlMQ0pqYjI1bWFXZDFjbUZpYkdVaUxDSm5aWFFpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEVkQlFVdEVMRkZCUVZFc1owSkJRMkpGTEZsQlFXTkdMRkZCUVZFc2EwSkJRM1JDUnl4UlFVRlZTQ3hSUVVGUkxGTkJRVkpCTEVOQlFXdENMRmRCUldoRFNTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDTEVsQlFVbERMRVZCUVVsU0xFOUJRVTlQTEVkQlExaEtMR0ZCUVdWTExFbEJRVTFCTEVWQlFVVktMRlZCUVZWR0xFZEJRVWRQTEVWQlFVVkVMRVZCUVVkS0xGRkJRVk1zUTBGRGNFUk5MR05CUVVGQkxFVkJRMEZETEVsQlFVc3NWMEZCWXl4UFFVRlBReUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDNObGRDMXpjR1ZqYVdWekxtcHpJbjA9IiwibW9kdWxlLmV4cG9ydHM9IXJlcXVpcmUoMzgpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a1pYTmpjbWx3ZEc5eWN5NXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVnhkV2x5WlNJc0lrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVoyVjBJaXdpWVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxFOUJRVTlETEZOQlFWZERMRkZCUVZFc1YwRkJVa0VzUTBGQmIwSXNWMEZEY0VNc1QwRkJLMFVzUjBGQmVFVkRMRTlCUVU5RExHVkJRV1VzUjBGQlNTeEpRVUZMTEVOQlFVVkRMRWxCUVVzc1YwRkJZeXhQUVVGUExFdEJRVkZESWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZlpHVnpZM0pwY0hSdmNuTXVhbk1pZlE9PSIsInZhciBpc09iamVjdD1yZXF1aXJlKDU0KTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe2lmKCFpc09iamVjdChlKXx8ZS5fdCE9PXIpdGhyb3cgVHlwZUVycm9yKFwiSW5jb21wYXRpYmxlIHJlY2VpdmVyLCBcIityK1wiIHJlcXVpcmVkIVwiKTtyZXR1cm4gZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkyWVd4cFpHRjBaUzFqYjJ4c1pXTjBhVzl1TG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSXNJbFJaVUVVaUxDSmZkQ0lzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRka0pETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlNVTXNSMEZETjBJc1NVRkJTMHdzVTBGQlUwa3NTVUZCVDBFc1JVRkJSMFVzUzBGQlQwUXNSVUZCVFN4TlFVRk5SU3hWUVVGVkxEQkNRVUUwUWtZc1JVRkJUeXhqUVVONFJpeFBRVUZQUkNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzWmhiR2xrWVhSbExXTnZiR3hsWTNScGIyNHVhbk1pZlE9PSIsInZhciBNRVRBPXJlcXVpcmUoMTI2KShcIm1ldGFcIiksaXNPYmplY3Q9cmVxdWlyZSg1NCksaGFzPXJlcXVpcmUoNDQpLHNldERlc2M9cmVxdWlyZSg3NCkuZixpZD0wLGlzRXh0ZW5zaWJsZT1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxGUkVFWkU9IXJlcXVpcmUoMzgpKGZ1bmN0aW9uKCl7cmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLHNldE1ldGE9ZnVuY3Rpb24oZSl7c2V0RGVzYyhlLE1FVEEse3ZhbHVlOntpOlwiT1wiKyArK2lkLHc6e319fSl9LG1ldGE9bW9kdWxlLmV4cG9ydHM9e0tFWTpNRVRBLE5FRUQ6ITEsZmFzdEtleTpmdW5jdGlvbihlLHQpe2lmKCFpc09iamVjdChlKSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZT9lOihcInN0cmluZ1wiPT10eXBlb2YgZT9cIlNcIjpcIlBcIikrZTtpZighaGFzKGUsTUVUQSkpe2lmKCFpc0V4dGVuc2libGUoZSkpcmV0dXJuXCJGXCI7aWYoIXQpcmV0dXJuXCJFXCI7c2V0TWV0YShlKX1yZXR1cm4gZVtNRVRBXS5pfSxnZXRXZWFrOmZ1bmN0aW9uKGUsdCl7aWYoIWhhcyhlLE1FVEEpKXtpZighaXNFeHRlbnNpYmxlKGUpKXJldHVybiEwO2lmKCF0KXJldHVybiExO3NldE1ldGEoZSl9cmV0dXJuIGVbTUVUQV0ud30sb25GcmVlemU6ZnVuY3Rpb24oZSl7cmV0dXJuIEZSRUVaRSYmbWV0YS5ORUVEJiZpc0V4dGVuc2libGUoZSkmJiFoYXMoZSxNRVRBKSYmc2V0TWV0YShlKSxlfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl0WlhSaExtcHpJbDBzSW01aGJXVnpJanBiSWsxRlZFRWlMQ0p5WlhGMWFYSmxJaXdpYVhOUFltcGxZM1FpTENKb1lYTWlMQ0p6WlhSRVpYTmpJaXdpWmlJc0ltbGtJaXdpYVhORmVIUmxibk5wWW14bElpd2lUMkpxWldOMElpd2lSbEpGUlZwRklpd2ljSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTWlMQ0p6WlhSTlpYUmhJaXdpYVhRaUxDSjJZV3gxWlNJc0lta2lMQ0ozSWl3aWJXVjBZU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKTFJWa2lMQ0pPUlVWRUlpd2labUZ6ZEV0bGVTSXNJbU55WldGMFpTSXNJbWRsZEZkbFlXc2lMQ0p2YmtaeVpXVjZaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNTMEZCVDBNc1VVRkJVU3hUUVVGU1FTeERRVUZyUWl4UlFVTjZRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEVsQlFVMUdMRkZCUVZFc1ZVRkRaRWNzVVVGQlZVZ3NVVUZCVVN4blFrRkJaMEpKTEVWQlEyeERReXhIUVVGTExFVkJRMHhETEdGQlFXVkRMRTlCUVU5RUxHTkJRV2RDTEZkQlEzaERMRTlCUVVFc1IwRkZSVVVzVVVGQlZWSXNVVUZCVVN4WFFVRlNRU3hEUVVGdlFpeFhRVU5vUXl4UFFVRlBUU3hoUVVGaFF5eFBRVUZQUlN4clFrRkJhMElzVDBGRk0wTkRMRkZCUVZVc1UwRkJWVU1zUjBGRGRFSlNMRkZCUVZGUkxFVkJRVWxhTEV0QlFVMHNRMEZCUldFc1RVRkJUeXhEUVVONlFrTXNSVUZCUnl4UFFVRlJVaXhIUVVOWVV5eEZRVUZITEU5QlowTklReXhMUVVGUFF5eFBRVUZQUXl4UlFVRlZMRU5CUXpGQ1F5eEpRVUZMYmtJc1MwRkRURzlDTEUxQlFVRkJMRVZCUTBGRExGRkJhRU5aTEZOQlFWVlVMRVZCUVVsVkxFZEJSVEZDTEVsQlFVdHdRaXhUUVVGVFZTeEhRVUZMTEUxQlFXOUNMR2xDUVVGT1FTeEZRVUZwUWtFc1IwRkJiVUlzYVVKQlFVNUJMRVZCUVdsQ0xFbEJRVTBzUzBGQlQwRXNSVUZETjBZc1NVRkJTMVFzU1VGQlNWTXNSVUZCU1Zvc1RVRkJUeXhEUVVWc1FpeEpRVUZMVHl4aFFVRmhTeXhIUVVGTExFMUJRVThzU1VGRk9VSXNTVUZCUzFVc1JVRkJVU3hOUVVGUExFbEJSWEJDV0N4UlFVRlJReXhIUVVWU0xFOUJRVTlCTEVWQlFVZGFMRTFCUVUxakxFZEJjMEpzUWxNc1VVRndRbGtzVTBGQlZWZ3NSVUZCU1ZVc1IwRkRNVUlzU1VGQlMyNUNMRWxCUVVsVExFVkJRVWxhTEUxQlFVOHNRMEZGYkVJc1NVRkJTMDhzWVVGQllVc3NSMEZCU3l4UFFVRkJMRVZCUlhaQ0xFbEJRVXRWTEVWQlFWRXNUMEZCUVN4RlFVVmlXQ3hSUVVGUlF5eEhRVVZTTEU5QlFVOUJMRVZCUVVkYUxFMUJRVTFsTEVkQldXeENVeXhUUVZSaExGTkJRVlZhTEVkQlJYWkNMRTlCUkVsSUxGRkJRVlZQTEV0QlFVdEpMRTFCUVZGaUxHRkJRV0ZMTEV0QlFWRlVMRWxCUVVsVExFVkJRVWxhTEU5QlFVOVhMRkZCUVZGRExFZEJRMmhGUVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyMWxkR0V1YW5NaWZRPT0iLCJ2YXIgY2xhc3NvZj1yZXF1aXJlKDIwKSxmcm9tPXJlcXVpcmUoMTMpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbigpe2lmKGNsYXNzb2YodGhpcykhPXIpdGhyb3cgVHlwZUVycm9yKHIrXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7cmV0dXJuIGZyb20odGhpcyl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpiMnhzWldOMGFXOXVMWFJ2TFdwemIyNHVhbk1pWFN3aWJtRnRaWE1pT2xzaVkyeGhjM052WmlJc0luSmxjWFZwY21VaUxDSm1jbTl0SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrNUJUVVVpTENKMGFHbHpJaXdpVkhsd1pVVnljbTl5SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdOQlEyeENReXhMUVVGUFJDeFJRVUZSTERCQ1FVTnVRa1VzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFpeFBRVUZQTEZkQlEwd3NSMEZCU1V3c1VVRkJVVTBzVDBGQlUwUXNSVUZCVFN4TlFVRk5SU3hWUVVGVlJpeEZRVUZQTEhsQ1FVTnNSQ3hQUVVGUFNDeExRVUZMU1NJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyTnZiR3hsWTNScGIyNHRkRzh0YW5OdmJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHJlZGVmaW5lQWxsPXJlcXVpcmUoOTMpLGdldFdlYWs9cmVxdWlyZSg2OCkuZ2V0V2Vhayxhbk9iamVjdD1yZXF1aXJlKDEwKSxpc09iamVjdD1yZXF1aXJlKDU0KSxhbkluc3RhbmNlPXJlcXVpcmUoOSksZm9yT2Y9cmVxdWlyZSg0MiksY3JlYXRlQXJyYXlNZXRob2Q9cmVxdWlyZSgxNSksJGhhcz1yZXF1aXJlKDQ0KSx2YWxpZGF0ZT1yZXF1aXJlKDEyOCksYXJyYXlGaW5kPWNyZWF0ZUFycmF5TWV0aG9kKDUpLGFycmF5RmluZEluZGV4PWNyZWF0ZUFycmF5TWV0aG9kKDYpLGlkPTAsdW5jYXVnaHRGcm96ZW5TdG9yZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5fbHx8KGUuX2w9bmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUpfSxVbmNhdWdodEZyb3plblN0b3JlPWZ1bmN0aW9uKCl7dGhpcy5hPVtdfSxmaW5kVW5jYXVnaHRGcm96ZW49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXJyYXlGaW5kKGUuYSxmdW5jdGlvbihlKXtyZXR1cm4gZVswXT09PXR9KX07VW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGU9e2dldDpmdW5jdGlvbihlKXt2YXIgdD1maW5kVW5jYXVnaHRGcm96ZW4odGhpcyxlKTtpZih0KXJldHVybiB0WzFdfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcyxlKX0sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsZSk7cj9yWzFdPXQ6dGhpcy5hLnB1c2goW2UsdF0pfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJyYXlGaW5kSW5kZXgodGhpcy5hLGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT09ZX0pO3JldHVybn50JiZ0aGlzLmEuc3BsaWNlKHQsMSksISF+dH19LG1vZHVsZS5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQscixuKXt2YXIgYT1lKGZ1bmN0aW9uKGUsaSl7YW5JbnN0YW5jZShlLGEsdCxcIl9pXCIpLGUuX3Q9dCxlLl9pPWlkKyssZS5fbD12b2lkIDAsbnVsbCE9aSYmZm9yT2YoaSxyLGVbbl0sZSl9KTtyZXR1cm4gcmVkZWZpbmVBbGwoYS5wcm90b3R5cGUse2RlbGV0ZTpmdW5jdGlvbihlKXtpZighaXNPYmplY3QoZSkpcmV0dXJuITE7dmFyIHI9Z2V0V2VhayhlKTtyZXR1cm4hMD09PXI/dW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLHQpKS5kZWxldGUoZSk6ciYmJGhhcyhyLHRoaXMuX2kpJiZkZWxldGUgclt0aGlzLl9pXX0saGFzOmZ1bmN0aW9uKGUpe2lmKCFpc09iamVjdChlKSlyZXR1cm4hMTt2YXIgcj1nZXRXZWFrKGUpO3JldHVybiEwPT09cj91bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsdCkpLmhhcyhlKTpyJiYkaGFzKHIsdGhpcy5faSl9fSksYX0sZGVmOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1nZXRXZWFrKGFuT2JqZWN0KHQpLCEwKTtyZXR1cm4hMD09PW4/dW5jYXVnaHRGcm96ZW5TdG9yZShlKS5zZXQodCxyKTpuW2UuX2ldPXIsZX0sdWZzdG9yZTp1bmNhdWdodEZyb3plblN0b3JlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpiMnhzWldOMGFXOXVMWGRsWVdzdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21Wa1pXWnBibVZCYkd3aUxDSnlaWEYxYVhKbElpd2laMlYwVjJWaGF5SXNJbUZ1VDJKcVpXTjBJaXdpYVhOUFltcGxZM1FpTENKaGJrbHVjM1JoYm1ObElpd2labTl5VDJZaUxDSmpjbVZoZEdWQmNuSmhlVTFsZEdodlpDSXNJaVJvWVhNaUxDSjJZV3hwWkdGMFpTSXNJbUZ5Y21GNVJtbHVaQ0lzSW1GeWNtRjVSbWx1WkVsdVpHVjRJaXdpYVdRaUxDSjFibU5oZFdkb2RFWnliM3BsYmxOMGIzSmxJaXdpZEdoaGRDSXNJbDlzSWl3aVZXNWpZWFZuYUhSR2NtOTZaVzVUZEc5eVpTSXNJblJvYVhNaUxDSmhJaXdpWm1sdVpGVnVZMkYxWjJoMFJuSnZlbVZ1SWl3aWMzUnZjbVVpTENKclpYa2lMQ0pwZENJc0luQnliM1J2ZEhsd1pTSXNJbWRsZENJc0ltVnVkSEo1SWl3aWFHRnpJaXdpYzJWMElpd2lkbUZzZFdVaUxDSndkWE5vSWl3aVpHVnNaWFJsSWl3aWFXNWtaWGdpTENKemNHeHBZMlVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVoyVjBRMjl1YzNSeWRXTjBiM0lpTENKM2NtRndjR1Z5SWl3aVRrRk5SU0lzSWtsVFgwMUJVQ0lzSWtGRVJFVlNJaXdpUXlJc0ltbDBaWEpoWW14bElpd2lYM1FpTENKZmFTSXNJblZ1WkdWbWFXNWxaQ0lzSW1SaGRHRWlMQ0prWldZaUxDSjFabk4wYjNKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRmxCUVdORExGRkJRVkVzYlVKQlEzUkNReXhSUVVGVlJDeFJRVUZSTEZkQlFWZERMRkZCUXpkQ1F5eFRRVUZYUml4UlFVRlJMR2RDUVVOdVFrY3NVMEZCVjBnc1VVRkJVU3huUWtGRGJrSkpMRmRCUVdGS0xGRkJRVkVzYTBKQlEzSkNTeXhOUVVGUlRDeFJRVUZSTEdGQlEyaENUU3hyUWtGQmIwSk9MRkZCUVZFc2IwSkJRelZDVHl4TFFVRlBVQ3hSUVVGUkxGVkJRMlpSTEZOQlFWZFNMRkZCUVZFc01FSkJRMjVDVXl4VlFVRlpTQ3hyUWtGQmEwSXNSMEZET1VKSkxHVkJRV2xDU2l4clFrRkJhMElzUjBGRGJrTkxMRWRCUVVzc1JVRkhURU1zYjBKQlFYTkNMRk5CUVZWRExFZEJRMnhETEU5QlFVOUJMRVZCUVV0RExFdEJRVTlFTEVWQlFVdERMRWRCUVVzc1NVRkJTVU1zYzBKQlJTOUNRU3h2UWtGQmMwSXNWMEZEZUVKRExFdEJRVXRETEVWQlFVa3NTVUZGVUVNc2JVSkJRWEZDTEZOQlFWVkRMRVZCUVU5RExFZEJRM2hETEU5QlFVOVlMRlZCUVZWVkxFVkJRVTFHTEVWQlFVY3NVMEZCVlVrc1IwRkRiRU1zVDBGQlQwRXNSVUZCUnl4TFFVRlBSQ3hMUVVkeVFrd3NiMEpCUVc5Q1R5eFZRVUZaTEVOQlF6bENReXhKUVVGTExGTkJRVlZJTEVkQlEySXNTVUZCU1Vrc1JVRkJVVTRzYlVKQlFXMUNSaXhMUVVGTlNTeEhRVU55UXl4SFFVRkpTU3hGUVVGUExFOUJRVTlCTEVWQlFVMHNTVUZGTVVKRExFbEJRVXNzVTBGQlZVd3NSMEZEWWl4UlFVRlRSaXh0UWtGQmJVSkdMRXRCUVUxSkxFbEJSWEJEVFN4SlFVRkxMRk5CUVZWT0xFVkJRVXRQTEVkQlEyeENMRWxCUVVsSUxFVkJRVkZPTEcxQ1FVRnRRa1lzUzBGQlRVa3NSMEZEYWtOSkxFVkJRVTlCTEVWQlFVMHNSMEZCUzBjc1JVRkRha0pZTEV0QlFVdERMRVZCUVVWWExFdEJRVXNzUTBGQlExSXNSVUZCUzA4c1MwRkZla0pGTEU5QlFWVXNVMEZCVlZRc1IwRkRiRUlzU1VGQlNWVXNSVUZCVVhCQ0xHVkJRV1ZOTEV0QlFVdERMRVZCUVVjc1UwRkJWVWtzUjBGRE0wTXNUMEZCVDBFc1JVRkJSeXhMUVVGUFJDeEpRVWR1UWl4UFFVUkxWU3hIUVVGUFpDeExRVUZMUXl4RlFVRkZZeXhQUVVGUFJDeEZRVUZQTEUxQlEzWkNRU3hKUVVsa1JTeFBRVUZQUXl4UlFVRlZMRU5CUTJaRExHVkJRV2RDTEZOQlFWVkRMRVZCUVZORExFVkJRVTFETEVWQlFWRkRMRWRCUXk5RExFbEJRVWxETEVWQlFVbEtMRVZCUVZFc1UwRkJWWFJDTEVWQlFVMHlRaXhIUVVNNVFuQkRMRmRCUVZkVExFVkJRVTB3UWl4RlFVRkhTQ3hGUVVGTkxFMUJRekZDZGtJc1JVRkJTelJDTEVkQlFVdE1MRVZCUTFaMlFpeEZRVUZMTmtJc1IwRkJTeTlDTEV0QlExWkZMRVZCUVV0RExGRkJRVUZCTEVWQlExYzJRaXhOUVVGYVNDeEhRVUYxUW01RExFMUJRVTF0UXl4RlFVRlZTQ3hGUVVGUmVFSXNSVUZCUzNsQ0xFZEJRVkY2UWl4TFFXOUNiRVVzVDBGc1FrRmtMRmxCUVZsM1F5eEZRVUZGYWtJc1ZVRkJWeXhEUVVkMlFrOHNUMEZCVlN4VFFVRlZWQ3hIUVVOc1FpeEpRVUZMYWtJc1UwRkJVMmxDTEVkQlFVMHNUMEZCUVN4RlFVTndRaXhKUVVGSmQwSXNSVUZCVHpORExGRkJRVkZ0UWl4SFFVTnVRaXhQUVVGQkxFbEJRVWwzUWl4RlFVRnpRbWhETEc5Q1FVRnZRa29zVTBGQlUxRXNTMEZCVFc5Q0xFbEJRV1ZRTEU5QlFVVlVMRWRCUTNaRmQwSXNSMEZCVVhKRExFdEJRVXR4UXl4RlFVRk5OVUlzUzBGQlN6QkNMRmxCUVdORkxFVkJRVXMxUWl4TFFVRkxNRUlzUzBGSmVrUnFRaXhKUVVGTExGTkJRV0ZNTEVkQlEyaENMRWxCUVV0cVFpeFRRVUZUYVVJc1IwRkJUU3hQUVVGQkxFVkJRM0JDTEVsQlFVbDNRaXhGUVVGUE0wTXNVVUZCVVcxQ0xFZEJRMjVDTEU5QlFVRXNTVUZCU1hkQ0xFVkJRWE5DYUVNc2IwSkJRVzlDU2l4VFFVRlRVU3hMUVVGTmIwSXNTVUZCVDFnc1NVRkJTVXdzUjBGRGFrVjNRaXhIUVVGUmNrTXNTMEZCUzNGRExFVkJRVTAxUWl4TFFVRkxNRUlzVDBGSE5VSklMRWRCUlZSTkxFbEJRVXNzVTBGQlZXaERMRVZCUVUxUExFVkJRVXRQTEVkQlEzaENMRWxCUVVscFFpeEZRVUZQTTBNc1VVRkJVVU1zVTBGQlUydENMRWxCUVVGQkxFZEJSelZDTEU5QlFVRXNTVUZHU1hkQ0xFVkJRV1ZvUXl4dlFrRkJiMEpETEVkQlFVMWhMRWxCUVVsT0xFVkJRVXRQTEVkQlEycEVhVUlzUlVGQlN5OUNMRVZCUVVzMlFpeEpRVUZOWml4RlFVTmtaQ3hIUVVWVWFVTXNVVUZCVTJ4RElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZZMjlzYkdWamRHbHZiaTEzWldGckxtcHpJbjA9IiwidmFyIGhhc093blByb3BlcnR5PXt9Lmhhc093blByb3BlcnR5O21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSl7cmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwocixlKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlvWVhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSnJaWGtpTENKallXeHNJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeGxRVUZwUWl4SFFVRkhRU3hsUVVONFFrTXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZKUXl4SFFVTTNRaXhQUVVGUFNpeGxRVUZsU3l4TFFVRkxSaXhGUVVGSlF5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYMmhoY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgZ2xvYmFsPXJlcXVpcmUoNDMpLCRleHBvcnQ9cmVxdWlyZSgzNikscmVkZWZpbmU9cmVxdWlyZSg5NCkscmVkZWZpbmVBbGw9cmVxdWlyZSg5MyksbWV0YT1yZXF1aXJlKDY4KSxmb3JPZj1yZXF1aXJlKDQyKSxhbkluc3RhbmNlPXJlcXVpcmUoOSksaXNPYmplY3Q9cmVxdWlyZSg1NCksZmFpbHM9cmVxdWlyZSgzOCksJGl0ZXJEZXRlY3Q9cmVxdWlyZSg1OSksc2V0VG9TdHJpbmdUYWc9cmVxdWlyZSgxMDMpLGluaGVyaXRJZlJlcXVpcmVkPXJlcXVpcmUoNDgpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGksbixvKXt2YXIgYT1nbG9iYWxbZV0sdT1hLGY9bj9cInNldFwiOlwiYWRkXCIscz11JiZ1LnByb3RvdHlwZSxjPXt9LGw9ZnVuY3Rpb24oZSl7dmFyIHQ9c1tlXTtyZWRlZmluZShzLGUsXCJkZWxldGVcIj09ZT9mdW5jdGlvbihlKXtyZXR1cm4hKG8mJiFpc09iamVjdChlKSkmJnQuY2FsbCh0aGlzLDA9PT1lPzA6ZSl9OlwiaGFzXCI9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIShvJiYhaXNPYmplY3QoZSkpJiZ0LmNhbGwodGhpcywwPT09ZT8wOmUpfTpcImdldFwiPT1lP2Z1bmN0aW9uKGUpe3JldHVybiBvJiYhaXNPYmplY3QoZSk/dm9pZCAwOnQuY2FsbCh0aGlzLDA9PT1lPzA6ZSl9OlwiYWRkXCI9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2FsbCh0aGlzLDA9PT1lPzA6ZSksdGhpc306ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplLHIpLHRoaXN9KX07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdSYmKG98fHMuZm9yRWFjaCYmIWZhaWxzKGZ1bmN0aW9uKCl7KG5ldyB1KS5lbnRyaWVzKCkubmV4dCgpfSkpKXt2YXIgZD1uZXcgdSxoPWRbZl0obz97fTotMCwxKSE9ZCxxPWZhaWxzKGZ1bmN0aW9uKCl7ZC5oYXMoMSl9KSxwPSRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGUpe25ldyB1KGUpfSksZz0hbyYmZmFpbHMoZnVuY3Rpb24oKXtmb3IodmFyIGU9bmV3IHUsdD01O3QtLTspZVtmXSh0LHQpO3JldHVybiFlLmhhcygtMCl9KTtwfHwoKHU9dChmdW5jdGlvbih0LHIpe2FuSW5zdGFuY2UodCx1LGUpO3ZhciBpPWluaGVyaXRJZlJlcXVpcmVkKG5ldyBhLHQsdSk7cmV0dXJuIG51bGwhPXImJmZvck9mKHIsbixpW2ZdLGkpLGl9KSkucHJvdG90eXBlPXMscy5jb25zdHJ1Y3Rvcj11KSwocXx8ZykmJihsKFwiZGVsZXRlXCIpLGwoXCJoYXNcIiksbiYmbChcImdldFwiKSksKGd8fGgpJiZsKGYpLG8mJnMuY2xlYXImJmRlbGV0ZSBzLmNsZWFyfWVsc2UgdT1pLmdldENvbnN0cnVjdG9yKHQsZSxuLGYpLHJlZGVmaW5lQWxsKHUucHJvdG90eXBlLHIpLG1ldGEuTkVFRD0hMDtyZXR1cm4gc2V0VG9TdHJpbmdUYWcodSxlKSxjW2VdPXUsJGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5XKyRleHBvcnQuRioodSE9YSksYyksb3x8aS5zZXRTdHJvbmcodSxlLG4pLHV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amIyeHNaV04wYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSW1kc2IySmhiQ0lzSW5KbGNYVnBjbVVpTENJa1pYaHdiM0owSWl3aWNtVmtaV1pwYm1VaUxDSnlaV1JsWm1sdVpVRnNiQ0lzSW0xbGRHRWlMQ0ptYjNKUFppSXNJbUZ1U1c1emRHRnVZMlVpTENKcGMwOWlhbVZqZENJc0ltWmhhV3h6SWl3aUpHbDBaWEpFWlhSbFkzUWlMQ0p6WlhSVWIxTjBjbWx1WjFSaFp5SXNJbWx1YUdWeWFYUkpabEpsY1hWcGNtVmtJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWs1QlRVVWlMQ0ozY21Gd2NHVnlJaXdpYldWMGFHOWtjeUlzSW1OdmJXMXZiaUlzSWtsVFgwMUJVQ0lzSWtsVFgxZEZRVXNpTENKQ1lYTmxJaXdpUXlJc0lrRkVSRVZTSWl3aWNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSlBJaXdpWm1sNFRXVjBhRzlrSWl3aVMwVlpJaXdpWm00aUxDSmhJaXdpWTJGc2JDSXNJblJvYVhNaUxDSmlJaXdpWm05eVJXRmphQ0lzSW1WdWRISnBaWE1pTENKdVpYaDBJaXdpYVc1emRHRnVZMlVpTENKSVFWTk9WRjlEU0VGSlRrbE9SeUlzSWxSSVVrOVhVMTlQVGw5UVVrbE5TVlJKVmtWVElpd2lhR0Z6SWl3aVFVTkRSVkJVWDBsVVJWSkJRa3hGVXlJc0ltbDBaWElpTENKQ1ZVZEhXVjlhUlZKUElpd2lKR2x1YzNSaGJtTmxJaXdpYVc1a1pYZ2lMQ0owWVhKblpYUWlMQ0pwZEdWeVlXSnNaU0lzSW5Sb1lYUWlMQ0oxYm1SbFptbHVaV1FpTENKamIyNXpkSEoxWTNSdmNpSXNJbU5zWldGeUlpd2laMlYwUTI5dWMzUnlkV04wYjNJaUxDSk9SVVZFSWl3aVJ5SXNJbGNpTENKR0lpd2ljMlYwVTNSeWIyNW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEZGQlFWVkVMRkZCUVZFc1lVRkRiRUpGTEZOQlFWZEdMRkZCUVZFc1pVRkRia0pITEZsQlFXTklMRkZCUVZFc2JVSkJRM1JDU1N4TFFVRlBTaXhSUVVGUkxGZEJRMlpMTEUxQlFWRk1MRkZCUVZFc1lVRkRhRUpOTEZkQlFXRk9MRkZCUVZFc2EwSkJRM0pDVHl4VFFVRlhVQ3hSUVVGUkxHZENRVU51UWxFc1RVRkJVVklzVVVGQlVTeFpRVU5vUWxNc1dVRkJZMVFzVVVGQlVTeHJRa0ZEZEVKVkxHVkJRV2xDVml4UlFVRlJMSGRDUVVONlFsY3NhMEpCUVc5Q1dDeFJRVUZSTERCQ1FVVm9RMWtzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGTlF5eEZRVUZUUXl4RlFVRlRReXhGUVVGUlF5eEZRVUZSUXl4SFFVTnFSU3hKUVVGSlF5eEZRVUZQY2tJc1QwRkJUMlVzUjBGRFpFOHNSVUZCU1VRc1JVRkRTa1VzUlVGQlVVb3NSVUZCVXl4TlFVRlJMRTFCUTNwQ1N5eEZRVUZSUml4SFFVRkxRU3hGUVVGRlJ5eFZRVU5tUXl4RlFVRkpMRWRCUTBwRExFVkJRVmtzVTBGQlZVTXNSMEZEZUVJc1NVRkJTVU1zUlVGQlMwd3NSVUZCVFVrc1IwRkRabnBDTEZOQlFWTnhRaXhGUVVGUFNTeEZRVU5RTEZWQlFWQkJMRVZCUVd0Q0xGTkJRVlZGTEVkQlF6RkNMRkZCUVU5V0xFbEJRVmxhTEZOQlFWTnpRaXhMUVVGaFJDeEZRVUZIUlN4TFFVRkxReXhMUVVGWkxFbEJRVTVHTEVWQlFWVXNSVUZCU1VFc1NVRkROVVFzVDBGQlVFWXNSVUZCWlN4VFFVRmhSU3hIUVVNNVFpeFJRVUZQVml4SlFVRlpXaXhUUVVGVGMwSXNTMEZCWVVRc1JVRkJSMFVzUzBGQlMwTXNTMEZCV1N4SlFVRk9SaXhGUVVGVkxFVkJRVWxCTEVsQlF6VkVMRTlCUVZCR0xFVkJRV1VzVTBGQllVVXNSMEZET1VJc1QwRkJUMVlzU1VGQldWb3NVMEZCVTNOQ0xGRkJRVUZCTEVWQlFXbENSQ3hGUVVGSFJTeExRVUZMUXl4TFFVRlpMRWxCUVU1R0xFVkJRVlVzUlVGQlNVRXNTVUZEYUVVc1QwRkJVRVlzUlVGQlpTeFRRVUZoUlN4SFFVRnhReXhQUVVGb1EwUXNSVUZCUjBVc1MwRkJTME1zUzBGQldTeEpRVUZPUml4RlFVRlZMRVZCUVVsQkxFZEJRVmRGTEUxQlEzaEZMRk5CUVdGR0xFVkJRVWRITEVkQlFYZERMRTlCUVc1RFNpeEZRVUZIUlN4TFFVRkxReXhMUVVGWkxFbEJRVTVHTEVWQlFWVXNSVUZCU1VFc1JVRkJSMGNzUjBGQlYwUXNVVUZIZGtVc1IwRkJaMElzYlVKQlFVeFdMRWxCUVhGQ1JpeEhRVUZYU1N4RlFVRk5WU3hWUVVGWmVrSXNUVUZCVFN4WlFVRkJMRWxCUXpkRVlTeEhRVUZKWVN4VlFVRlZReXhWUVUxaUxFTkJRMHdzU1VGQlNVTXNSVUZCVnl4SlFVRkpaaXhGUVVWbVowSXNSVUZCYVVKRUxFVkJRVk5rTEVkQlFVOUlMRVZCUVZVc1NVRkJUU3hGUVVGSExFbEJRVTFwUWl4RlFVVXhSRVVzUlVGQmRVSTVRaXhOUVVGTkxGZEJRV00wUWl4RlFVRlRSeXhKUVVGSkxFdEJSWGhFUXl4RlFVRnRRaTlDTEZsQlFWa3NVMEZCVldkRExFZEJRVkVzU1VGQlNYQkNMRVZCUVVWdlFpeExRVVYyUkVNc1IwRkJZM1pDTEVkQlFWZFlMRTFCUVUwc1YwRkpha01zU1VGR1FTeEpRVUZKYlVNc1JVRkJXU3hKUVVGSmRFSXNSVUZEYUVKMVFpeEZRVUZSTEVWQlEweEJMRXRCUVZORUxFVkJRVlZ5UWl4SFFVRlBjMElzUlVGQlQwRXNSMEZEZUVNc1QwRkJVVVFzUlVGQlZVb3NTMEZCU3l4TFFVVndRa01zUzBGRFNHNUNMRVZCUVVsT0xFVkJRVkVzVTBGQlZUaENMRVZCUVZGRExFZEJRelZDZUVNc1YwRkJWM1ZETEVWQlFWRjRRaXhGUVVGSFVDeEhRVU4wUWl4SlFVRkphVU1zUlVGQlQzQkRMR3RDUVVGclFpeEpRVUZKVXl4RlFVRlJlVUlzUlVGQlVYaENMRWRCUldwRUxFOUJSR2RDTWtJc1RVRkJXa1lzUjBGQmRVSjZReXhOUVVGTmVVTXNSVUZCVlRWQ0xFVkJRVkUyUWl4RlFVRkxla0lzUjBGQlVYbENMRWRCUTNwRVFTeExRVVZRZGtJc1ZVRkJXVVFzUlVGRFpFRXNSVUZCVFRCQ0xGbEJRV00xUWl4SlFVVnNRbWxDTEVkQlFYZENTU3hMUVVNeFFtaENMRVZCUVZVc1ZVRkRWa0VzUlVGQlZTeFBRVU5XVWl4SFFVRlZVU3hGUVVGVkxGTkJSV3hDWjBJc1IwRkJZMHdzU1VGQlowSllMRVZCUVZWS0xFZEJSWGhEU0N4SFFVRlhTU3hGUVVGTk1rSXNZMEZCWXpOQ0xFVkJRVTB5UWl4WFFYQkRla00zUWl4RlFVRkpTaXhGUVVGUGEwTXNaVUZCWlhCRExFVkJRVk5FTEVWQlFVMUpMRVZCUVZGSkxFZEJRMnBFYmtJc1dVRkJXV3RDTEVWQlFVVkhMRlZCUVZkU0xFZEJRM3BDV2l4TFFVRkxaMFFzVFVGQlFVRXNSVUUwUTFBc1QwRlFRVEZETEdWQlFXVlhMRVZCUVVkUUxFZEJSV3hDVnl4RlFVRkZXQ3hIUVVGUlR5eEZRVU5XY0VJc1VVRkJVVUVzVVVGQlVXOUVMRVZCUVVsd1JDeFJRVUZSY1VRc1JVRkJTWEpFTEZGQlFWRnpSQ3hIUVVGTGJFTXNSMEZCUzBRc1IwRkJUMHNzUjBGRmNFUk9MRWRCUVZOR0xFVkJRVTkxUXl4VlFVRlZia01zUlVGQlIxQXNSVUZCVFVrc1IwRkZha05ISWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZlkyOXNiR1ZqZEdsdmJpNXFjeUo5IiwidmFyIGdsb2JhbD1tb2R1bGUuZXhwb3J0cz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcIm51bWJlclwiPT10eXBlb2YgX19nJiYoX19nPWdsb2JhbCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDluYkc5aVlXd3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luZHBibVJ2ZHlJc0lrMWhkR2dpTENKelpXeG1JaXdpUm5WdVkzUnBiMjRpTENKZlgyY2lYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxFOUJRVk5ETEU5QlFVOURMRkZCUVRKQ0xHOUNRVUZXUXl4UlFVRjVRa0VzVDBGQlQwTXNUVUZCVVVFc1MwRkRla1ZFTEU5QlFYZENMRzlDUVVGU1JTeE5RVUYxUWtFc1MwRkJTMFFzVFVGQlVVRXNTMEZCVDBNc1MwRkZNMFJETEZOQlFWTXNZMEZCVkVFc1IwRkRZeXhwUWtGQlVFTXNUVUZCYVVKQkxFbEJRVTFRSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZloyeHZZbUZzTG1wekluMD0iLCJ2YXIgZ2xvYmFsPXJlcXVpcmUoNDMpLGNvcmU9cmVxdWlyZSgyNiksaGlkZT1yZXF1aXJlKDQ1KSxyZWRlZmluZT1yZXF1aXJlKDk0KSxjdHg9cmVxdWlyZSgyOCksJGV4cG9ydD1mdW5jdGlvbihlLG8scil7dmFyIHQscCx4LGwsaT1lJiRleHBvcnQuRiwkPWUmJGV4cG9ydC5HLGM9ZSYkZXhwb3J0LlMsYT1lJiRleHBvcnQuUCxuPWUmJGV4cG9ydC5CLHU9JD9nbG9iYWw6Yz9nbG9iYWxbb118fChnbG9iYWxbb109e30pOihnbG9iYWxbb118fHt9KS5wcm90b3R5cGUsYj0kP2NvcmU6Y29yZVtvXXx8KGNvcmVbb109e30pLGQ9Yi5wcm90b3R5cGV8fChiLnByb3RvdHlwZT17fSk7Zm9yKHQgaW4gJCYmKHI9bykscil4PSgocD0haSYmdSYmdm9pZCAwIT09dVt0XSk/dTpyKVt0XSxsPW4mJnA/Y3R4KHgsZ2xvYmFsKTphJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB4P2N0eChGdW5jdGlvbi5jYWxsLHgpOngsdSYmcmVkZWZpbmUodSx0LHgsZSYkZXhwb3J0LlUpLGJbdF0hPXgmJmhpZGUoYix0LGwpLGEmJmRbdF0hPXgmJihkW3RdPXgpfTtnbG9iYWwuY29yZT1jb3JlLCRleHBvcnQuRj0xLCRleHBvcnQuRz0yLCRleHBvcnQuUz00LCRleHBvcnQuUD04LCRleHBvcnQuQj0xNiwkZXhwb3J0Llc9MzIsJGV4cG9ydC5VPTY0LCRleHBvcnQuUj0xMjgsbW9kdWxlLmV4cG9ydHM9JGV4cG9ydDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWxlSEJ2Y25RdWFuTWlYU3dpYm1GdFpYTWlPbHNpWjJ4dlltRnNJaXdpY21WeGRXbHlaU0lzSW1OdmNtVWlMQ0pvYVdSbElpd2ljbVZrWldacGJtVWlMQ0pqZEhnaUxDSWtaWGh3YjNKMElpd2lkSGx3WlNJc0ltNWhiV1VpTENKemIzVnlZMlVpTENKclpYa2lMQ0p2ZDI0aUxDSnZkWFFpTENKbGVIQWlMQ0pKVTE5R1QxSkRSVVFpTENKR0lpd2lTVk5mUjB4UFFrRk1JaXdpUnlJc0lrbFRYMU5VUVZSSlF5SXNJbE1pTENKSlUxOVFVazlVVHlJc0lsQWlMQ0pKVTE5Q1NVNUVJaXdpUWlJc0luUmhjbWRsZENJc0luQnliM1J2ZEhsd1pTSXNJbVY0Y0c5eWRITWlMQ0psZUhCUWNtOTBieUlzSWtaMWJtTjBhVzl1SWl3aVkyRnNiQ0lzSWxVaUxDSlhJaXdpVWlJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVDBGQlUwTXNVVUZCVVN4aFFVTnFRa01zUzBGQlQwUXNVVUZCVVN4WFFVTm1SU3hMUVVGUFJpeFJRVUZSTEZkQlEyWkhMRk5CUVZkSUxGRkJRVkVzWlVGRGJrSkpMRWxCUVUxS0xGRkJRVkVzVlVGSFpFc3NVVUZCVlN4VFFVRlZReXhGUVVGTlF5eEZRVUZOUXl4SFFVTnNReXhKUVZGSlF5eEZRVUZMUXl4RlFVRkxReXhGUVVGTFF5eEZRVkptUXl4RlFVRlpVQ3hGUVVGUFJDeFJRVUZSVXl4RlFVTXpRa01zUlVGQldWUXNSVUZCVDBRc1VVRkJVVmNzUlVGRE0wSkRMRVZCUVZsWUxFVkJRVTlFTEZGQlFWRmhMRVZCUXpOQ1F5eEZRVUZYWWl4RlFVRlBSQ3hSUVVGUlpTeEZRVU14UWtNc1JVRkJWV1lzUlVGQlQwUXNVVUZCVVdsQ0xFVkJRM3BDUXl4RlFVRlRVaXhGUVVGWmFFSXNUMEZCVTJ0Q0xFVkJRVmxzUWl4UFFVRlBVU3hMUVVGVlVpeFBRVUZQVVN4SFFVRlJMRXRCUVU5U0xFOUJRVTlSTEVsQlFWTXNTVUZCWVdsQ0xGVkJRemxIUXl4RlFVRlZWaXhGUVVGWlpDeExRVUZQUVN4TFFVRkxUU3hMUVVGVlRpeExRVUZMVFN4SFFVRlJMRWxCUTNwRWJVSXNSVUZCVjBRc1JVRkJhVUpFTEZsQlFVMURMRVZCUVdsQ1JDeFZRVUZKTEVsQlJ6TkVMRWxCUVV0bUxFdEJSRVJOTEVsQlFWZFFMRVZCUVZORUxFZEJRMXBETEVWQlNWWkhMRWxCUmtGRUxFZEJRVTlITEVkQlFXRlZMRkZCUVVGQkxFbEJRVlZCTEVWQlFVOWtMRWxCUlhoQ1l5eEZRVUZUWml4SFFVRlJReXhIUVVVNVFrY3NSVUZCVFZNc1IwRkJWMWdzUlVGQlRVNHNTVUZCU1U4c1JVRkJTMW9zVVVGQlZXOUNMRWRCUVRCQ0xHMUNRVUZRVWl4RlFVRnZRbEFzU1VGQlNYVkNMRk5CUVZORExFdEJRVTFxUWl4SFFVRlBRU3hGUVVWMlIxa3NSMEZCVVhCQ0xGTkJRVk52UWl4RlFVRlJaQ3hGUVVGTFJTeEZRVUZMVEN4RlFVRlBSQ3hSUVVGUmQwSXNSMEZGYkVSS0xFVkJRVkZvUWl4SlFVRlJSU3hIUVVGTFZDeExRVUZMZFVJc1JVRkJVMmhDTEVWQlFVdEhMRWRCUTNoRFR5eEhRVUZaVHl4RlFVRlRha0lzU1VGQlVVVXNTVUZCUzJVc1JVRkJVMnBDTEVkQlFVOUZMRWxCUnpGRVdpeFBRVUZQUlN4TFFVRlBRU3hMUVVWa1NTeFJRVUZSVXl4RlFVRkpMRVZCUTFwVUxGRkJRVkZYTEVWQlFVa3NSVUZEV2xnc1VVRkJVV0VzUlVGQlNTeEZRVU5hWWl4UlFVRlJaU3hGUVVGSkxFVkJRMXBtTEZGQlFWRnBRaXhGUVVGSkxFZEJRMXBxUWl4UlFVRlJlVUlzUlVGQlNTeEhRVU5hZWtJc1VVRkJVWGRDTEVWQlFVa3NSMEZEV25oQ0xGRkJRVkV3UWl4RlFVRkpMRWxCUTFwRExFOUJRVTlRTEZGQlFWVndRaUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDJWNGNHOXlkQzVxY3lKOSIsInZhciBnbG9iYWw9cmVxdWlyZSg0MyksaGlkZT1yZXF1aXJlKDQ1KSxoYXM9cmVxdWlyZSg0NCksU1JDPXJlcXVpcmUoMTI2KShcInNyY1wiKSwkdG9TdHJpbmc9RnVuY3Rpb24udG9TdHJpbmcsVFBMPShcIlwiKyR0b1N0cmluZykuc3BsaXQoXCJ0b1N0cmluZ1wiKTtyZXF1aXJlKDI2KS5pbnNwZWN0U291cmNlPWZ1bmN0aW9uKHQpe3JldHVybiAkdG9TdHJpbmcuY2FsbCh0KX0sKG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQsaSxlLHIpe3ZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU7biYmKGhhcyhlLFwibmFtZVwiKXx8aGlkZShlLFwibmFtZVwiLGkpKSx0W2ldIT09ZSYmKG4mJihoYXMoZSxTUkMpfHxoaWRlKGUsU1JDLHRbaV0/XCJcIit0W2ldOlRQTC5qb2luKFN0cmluZyhpKSkpKSx0PT09Z2xvYmFsP3RbaV09ZTpyP3RbaV0/dFtpXT1lOmhpZGUodCxpLGUpOihkZWxldGUgdFtpXSxoaWRlKHQsaSxlKSkpfSkoRnVuY3Rpb24ucHJvdG90eXBlLFwidG9TdHJpbmdcIixmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMmJnRoaXNbU1JDXXx8JHRvU3RyaW5nLmNhbGwodGhpcyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXlaV1JsWm1sdVpTNXFjeUpkTENKdVlXMWxjeUk2V3lKbmJHOWlZV3dpTENKeVpYRjFhWEpsSWl3aWFHbGtaU0lzSW1oaGN5SXNJbE5TUXlJc0lpUjBiMU4wY21sdVp5SXNJa1oxYm1OMGFXOXVJaXdpZEc5VGRISnBibWNpTENKVVVFd2lMQ0p6Y0d4cGRDSXNJbWx1YzNCbFkzUlRiM1Z5WTJVaUxDSnBkQ0lzSW1OaGJHd2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpVHlJc0ltdGxlU0lzSW5aaGJDSXNJbk5oWm1VaUxDSnBjMFoxYm1OMGFXOXVJaXdpYW05cGJpSXNJbE4wY21sdVp5SXNJbkJ5YjNSdmRIbHdaU0lzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFOUJRVk5ETEZGQlFWRXNZVUZEYWtKRExFdEJRVTlFTEZGQlFWRXNWMEZEWmtVc1NVRkJUVVlzVVVGQlVTeFZRVU5rUnl4SlFVRk5TQ3hSUVVGUkxGTkJRVkpCTEVOQlFXdENMRTlCUlhoQ1NTeFZRVUZaUXl4VFFVRnJRa01zVTBGRE9VSkRMRXRCUVU4c1IwRkJTMGdzVjBGQlYwa3NUVUZHV0N4WlFVbG9RbElzVVVGQlVTeFhRVUZYVXl4alFVRm5RaXhUUVVGVlF5eEhRVU16UXl4UFFVRlBUaXhWUVVGVlR5eExRVUZMUkN4TFFVZDJRa1VzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGSFF5eEZRVUZMUXl4RlFVRkxReXhIUVVOMlF5eEpRVUZKUXl4RlFVRXlRaXh0UWtGQlVFWXNSVUZEY0VKRkxFbEJRVmxvUWl4SlFVRkpZeXhGUVVGTExGTkJRVmRtTEV0QlFVdGxMRVZCUVVzc1QwRkJVVVFzU1VGRGJFUkVMRVZCUVVWRExFdEJRVk5ETEVsQlExaEZMRWxCUVZsb1FpeEpRVUZKWXl4RlFVRkxZaXhOUVVGUlJpeExRVUZMWlN4RlFVRkxZaXhKUVVGTFZ5eEZRVUZGUXl4SFFVRlBMRWRCUVV0RUxFVkJRVVZETEVkQlFVOVNMRWxCUVVsWkxFdEJRVXRETEU5QlFVOU1MRTFCUTI1R1JDeEpRVUZOWml4UFFVTlNaU3hGUVVGRlF5eEhRVUZQUXl4RlFVTkRReXhGUVVkRVNDeEZRVUZGUXl4SFFVTllSQ3hGUVVGRlF5eEhRVUZQUXl4RlFVVlVaaXhMUVVGTFlTeEZRVUZIUXl4RlFVRkxReXhYUVV4T1JpeEZRVUZGUXl4SFFVTlVaQ3hMUVVGTFlTeEZRVUZIUXl4RlFVRkxReXhQUVU5a1dDeFRRVUZUWjBJc1ZVRjRRa2tzVjBGM1FtdENMRmRCUTJoRExFMUJRWE5DTEcxQ1FVRlNReXhOUVVGelFrRXNTMEZCUzI1Q0xFMUJRVkZETEZWQlFWVlBMRXRCUVV0WElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZjbVZrWldacGJtVXVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpe3RyeXtyZXR1cm4hIXIoKX1jYXRjaChyKXtyZXR1cm4hMH19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bVlXbHNjeTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2laWGhsWXlJc0ltVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFbEJRMFVzVVVGQlUwRXNTVUZEVkN4TlFVRlBReXhIUVVOUUxFOUJRVUVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5bVlXbHNjeTVxY3lKOSIsInZhciBJVEVSQVRPUj1yZXF1aXJlKDEzMSkoXCJpdGVyYXRvclwiKSxTQUZFX0NMT1NJTkc9ITE7dHJ5e3ZhciByaXRlcj1bN11bSVRFUkFUT1JdKCk7cml0ZXIucmV0dXJuPWZ1bmN0aW9uKCl7U0FGRV9DTE9TSU5HPSEwfSxBcnJheS5mcm9tKHJpdGVyLGZ1bmN0aW9uKCl7dGhyb3cgMn0pfWNhdGNoKHIpe31tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLHQpe2lmKCF0JiYhU0FGRV9DTE9TSU5HKXJldHVybiExO3ZhciBuPSExO3RyeXt2YXIgZT1bN10sdT1lW0lURVJBVE9SXSgpO3UubmV4dD1mdW5jdGlvbigpe3JldHVybntkb25lOm49ITB9fSxlW0lURVJBVE9SXT1mdW5jdGlvbigpe3JldHVybiB1fSxyKGUpfWNhdGNoKHIpe31yZXR1cm4gbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwZEdWeUxXUmxkR1ZqZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpKVkVWU1FWUlBVaUlzSW5KbGNYVnBjbVVpTENKVFFVWkZYME5NVDFOSlRrY2lMQ0p5YVhSbGNpSXNJbkpsZEhWeWJpSXNJa0Z5Y21GNUlpd2labkp2YlNJc0ltVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWlhobFl5SXNJbk5yYVhCRGJHOXphVzVuSWl3aWMyRm1aU0lzSW1GeWNpSXNJbWwwWlhJaUxDSnVaWGgwSWl3aVpHOXVaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3hUUVVGU1FTeERRVUZyUWl4WlFVTTNRa01zWTBGQlFVRXNSVUZGU2l4SlFVTkZMRWxCUVVsRExFMUJRVkVzUTBGQlF5eEhRVUZIU0N4WlFVTm9Ra2NzVFVGQlkwTXNUMEZCU1N4WFFVRmpSaXhqUVVGQlFTeEhRVVZvUTBjc1RVRkJUVU1zUzBGQlMwZ3NUVUZCVHl4WFFVRmpMRTFCUVUwc1NVRkRkRU1zVFVGQlQwa3NTVUZGVkVNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRk5ReXhIUVVNdlFpeEpRVUZMUVN4SlFVRm5RbFFzWVVGQll5eFBRVUZCTEVWQlEyNURMRWxCUVVsVkxFZEJRVUZCTEVWQlEwb3NTVUZEUlN4SlFVRkpReXhGUVVGTkxFTkJRVU1zUjBGRFVFTXNSVUZCVDBRc1JVRkJTV0lzV1VGRFptTXNSVUZCUzBNc1MwRkJUeXhYUVVGakxFMUJRVThzUTBGQlJVTXNTMEZCVFVvc1IwRkJRVUVzU1VGRGVrTkRMRVZCUVVsaUxGVkJRVmtzVjBGQll5eFBRVUZQWXl4SFFVTnlRMG9zUlVGQlMwY3NSMEZEVEN4TlFVRlBUaXhKUVVOVUxFOUJRVTlMSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZmFYUmxjaTFrWlhSbFkzUXVhbk1pZlE9PSIsInZhciBkZWY9cmVxdWlyZSg3NCkuZixoYXM9cmVxdWlyZSg0NCksVEFHPXJlcXVpcmUoMTMxKShcInRvU3RyaW5nVGFnXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixvKXtlJiYhaGFzKGU9bz9lOmUucHJvdG90eXBlLFRBRykmJmRlZihlLFRBRyx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnJ9KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeTVxY3lKZExDSnVZVzFsY3lJNld5SmtaV1lpTENKeVpYRjFhWEpsSWl3aVppSXNJbWhoY3lJc0lsUkJSeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSXNJblJoWnlJc0luTjBZWFFpTENKd2NtOTBiM1I1Y0dVaUxDSmpiMjVtYVdkMWNtRmliR1VpTENKMllXeDFaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNTVUZCVFVNc1VVRkJVU3huUWtGQlowSkRMRVZCUXpsQ1F5eEpRVUZOUml4UlFVRlJMRlZCUTJSSExFbEJRVTFJTEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzWlVGRk5VSkpMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCU1VNc1JVRkJTME1zUjBGRE9VSkdMRWxCUVU5S0xFbEJRVWxKTEVWQlFVdEZMRVZCUVU5R0xFVkJRVXRCTEVWQlFVZEhMRlZCUVZkT0xFMUJRVTFLTEVsQlFVbFBMRVZCUVVsSUxFbEJRVXNzUTBGQlJVOHNZMEZCUVVFc1JVRkJiMEpETEUxQlFVOUtJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYzJWMExYUnZMWE4wY21sdVp5MTBZV2N1YW5NaWZRPT0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZSg1NCksc2V0UHJvdG90eXBlT2Y9cmVxdWlyZSgxMDEpLnNldDttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0LGUsbyl7dmFyIHIscD1lLmNvbnN0cnVjdG9yO3JldHVybiBwIT09byYmXCJmdW5jdGlvblwiPT10eXBlb2YgcCYmKHI9cC5wcm90b3R5cGUpIT09by5wcm90b3R5cGUmJmlzT2JqZWN0KHIpJiZzZXRQcm90b3R5cGVPZiYmc2V0UHJvdG90eXBlT2YodCxyKSx0fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBibWhsY21sMExXbG1MWEpsY1hWcGNtVmtMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbk5sZEZCeWIzUnZkSGx3WlU5bUlpd2ljMlYwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luUm9ZWFFpTENKMFlYSm5aWFFpTENKRElpd2lVQ0lzSWxNaUxDSmpiMjV6ZEhKMVkzUnZjaUlzSW5CeWIzUnZkSGx3WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEdWQlFXbENSQ3hSUVVGUkxHZENRVUZuUWtVc1NVRkROME5ETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlRVTXNSVUZCVVVNc1IwRkRka01zU1VGRFNVTXNSVUZFUVVNc1JVRkJTVWdzUlVGQlQwa3NXVUZKWWl4UFFVWkZSQ3hKUVVGTlJpeEhRVUZwUWl4dFFrRkJURVVzU1VGQmIwSkVMRVZCUVVsRExFVkJRVVZGTEdGQlFXVktMRVZCUVVWSkxGZEJRV0ZhTEZOQlFWTlRMRWxCUVUxUUxHZENRVU16UmtFc1pVRkJaVWtzUlVGQlRVY3NSMEZEWkVnaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOXBibWhsY21sMExXbG1MWEpsY1hWcGNtVmtMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZGVmaW5lUHJvcGVydHk9cmVxdWlyZSg3NCksY3JlYXRlRGVzYz1yZXF1aXJlKDkyKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCl7ciBpbiBlPyRkZWZpbmVQcm9wZXJ0eS5mKGUscixjcmVhdGVEZXNjKDAsdCkpOmVbcl09dH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqY21WaGRHVXRjSEp2Y0dWeWRIa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaUpHUmxabWx1WlZCeWIzQmxjblI1SWl3aWNtVnhkV2x5WlNJc0ltTnlaV0YwWlVSbGMyTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYjJKcVpXTjBJaXdpYVc1a1pYZ2lMQ0oyWVd4MVpTSXNJbVlpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1owSkJRV3RDUXl4UlFVRlJMR2RDUVVNeFFrTXNWMEZCWVVRc1VVRkJVU3h2UWtGRmVrSkZMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1JVRkJUME1zUjBGRGNFTkVMRXRCUVZORUxFVkJRVkZNTEdkQ1FVRm5RbEVzUlVGQlJVZ3NSVUZCVVVNc1JVRkJUMG9zVjBGQlZ5eEZRVUZIU3l4SlFVTXZSRVlzUlVGQlQwTXNSMEZCVTBNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOWpjbVZoZEdVdGNISnZjR1Z5ZEhrdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6cn19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5d2NtOXdaWEowZVMxa1pYTmpMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSmlhWFJ0WVhBaUxDSjJZV3gxWlNJc0ltVnVkVzFsY21GaWJHVWlMQ0pqYjI1bWFXZDFjbUZpYkdVaUxDSjNjbWwwWVdKc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1IwRkRha01zVFVGQlR5eERRVU5NUXl4aFFVRjFRaXhGUVVGVVJpeEhRVU5rUnl4bFFVRjVRaXhGUVVGVVNDeEhRVU5vUWtrc1YwRkJjVUlzUlVGQlZFb3NSMEZEV2tNc1RVRkJUMEVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5d2NtOXdaWEowZVMxa1pYTmpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBmYWlscz1yZXF1aXJlKDM4KSxnZXRUaW1lPURhdGUucHJvdG90eXBlLmdldFRpbWUsJHRvSVNPU3RyaW5nPURhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nLGx6PWZ1bmN0aW9uKHQpe3JldHVybiB0Pjk/dDpcIjBcIit0fTttb2R1bGUuZXhwb3J0cz1mYWlscyhmdW5jdGlvbigpe3JldHVyblwiMDM4NS0wNy0yNVQwNzowNjozOS45OTlaXCIhPSR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzLTEpKX0pfHwhZmFpbHMoZnVuY3Rpb24oKXskdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKX0pP2Z1bmN0aW9uKCl7aWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcihcIkludmFsaWQgdGltZSB2YWx1ZVwiKTt2YXIgdD10aGlzLGU9dC5nZXRVVENGdWxsWWVhcigpLGk9dC5nZXRVVENNaWxsaXNlY29uZHMoKSxsPWU8MD9cIi1cIjplPjk5OTk/XCIrXCI6XCJcIjtyZXR1cm4gbCsoXCIwMDAwMFwiK01hdGguYWJzKGUpKS5zbGljZShsPy02Oi00KStcIi1cIitseih0LmdldFVUQ01vbnRoKCkrMSkrXCItXCIrbHoodC5nZXRVVENEYXRlKCkpK1wiVFwiK2x6KHQuZ2V0VVRDSG91cnMoKSkrXCI6XCIrbHoodC5nZXRVVENNaW51dGVzKCkpK1wiOlwiK2x6KHQuZ2V0VVRDU2Vjb25kcygpKStcIi5cIisoaT45OT9pOlwiMFwiK2x6KGkpKStcIlpcIn06JHRvSVNPU3RyaW5nO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a1lYUmxMWFJ2TFdsemJ5MXpkSEpwYm1jdWFuTWlYU3dpYm1GdFpYTWlPbHNpWm1GcGJITWlMQ0p5WlhGMWFYSmxJaXdpWjJWMFZHbHRaU0lzSWtSaGRHVWlMQ0p3Y205MGIzUjVjR1VpTENJa2RHOUpVMDlUZEhKcGJtY2lMQ0owYjBsVFQxTjBjbWx1WnlJc0lteDZJaXdpYm5WdElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbU5oYkd3aUxDSk9ZVTRpTENKcGMwWnBibWwwWlNJc0luUm9hWE1pTENKU1lXNW5aVVZ5Y205eUlpd2laQ0lzSW5raUxDSm5aWFJWVkVOR2RXeHNXV1ZoY2lJc0ltMGlMQ0puWlhSVlZFTk5hV3hzYVhObFkyOXVaSE1pTENKeklpd2lUV0YwYUNJc0ltRmljeUlzSW5Oc2FXTmxJaXdpWjJWMFZWUkRUVzl1ZEdnaUxDSm5aWFJWVkVORVlYUmxJaXdpWjJWMFZWUkRTRzkxY25NaUxDSm5aWFJWVkVOTmFXNTFkR1Z6SWl3aVoyVjBWVlJEVTJWamIyNWtjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4TlFVRlJReXhSUVVGUkxGbEJRMmhDUXl4UlFVRlZReXhMUVVGTFF5eFZRVUZWUml4UlFVTjZRa2NzWVVGQlpVWXNTMEZCUzBNc1ZVRkJWVVVzV1VGRk9VSkRMRWRCUVVzc1UwRkJWVU1zUjBGRGFrSXNUMEZCVDBFc1JVRkJUU3hGUVVGSlFTeEZRVUZOTEVsQlFVMUJMRWRCU1M5Q1F5eFBRVUZQUXl4UlFVRlhWaXhOUVVGTkxGZEJRM1JDTEUxQlFXbEVMRFJDUVVFeFEwc3NZVUZCWVUwc1MwRkJTeXhKUVVGSlVpeE5RVUZOTEV0QlFVOHNVVUZEY2tOSUxFMUJRVTBzVjBGRFdFc3NZVUZCWVUwc1MwRkJTeXhKUVVGSlVpeExRVUZMVXl4UlFVTjJRaXhYUVVOS0xFbEJRVXRETEZOQlFWTllMRkZCUVZGVExFdEJRVXRITEU5QlFWRXNUVUZCVFVNc1YwRkJWeXh6UWtGRGNFUXNTVUZCU1VNc1JVRkJTVVlzUzBGRFNrY3NSVUZCU1VRc1JVRkJSVVVzYVVKQlEwNURMRVZCUVVsSUxFVkJRVVZKTEhGQ1FVTk9ReXhGUVVGSlNpeEZRVUZKTEVWQlFVa3NTVUZCVFVFc1JVRkJTU3hMUVVGUExFbEJRVTBzUjBGRGRrTXNUMEZCVDBrc1IwRkJTeXhSUVVGVlF5eExRVUZMUXl4SlFVRkpUaXhKUVVGSlR5eE5RVUZOU0N4SFFVRkxMRWRCUVVzc1IwRkRha1FzU1VGQlRXUXNSMEZCUjFNc1JVRkJSVk1zWTBGQlowSXNSMEZCU3l4SlFVRk5iRUlzUjBGQlIxTXNSVUZCUlZVc1kwRkRNME1zU1VGQlRXNUNMRWRCUVVkVExFVkJRVVZYTEdWQlFXbENMRWxCUVUxd1FpeEhRVUZIVXl4RlFVRkZXU3hwUWtGRGRrTXNTVUZCVFhKQ0xFZEJRVWRUTEVWQlFVVmhMR2xDUVVGdFFpeExRVUZQVml4RlFVRkpMRWRCUVV0QkxFVkJRVWtzU1VGQlRWb3NSMEZCUjFrc1NVRkJUU3hMUVVOcVJXUWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjlrWVhSbExYUnZMV2x6YnkxemRISnBibWN1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYW5PYmplY3Q9cmVxdWlyZSgxMCksdG9QcmltaXRpdmU9cmVxdWlyZSgxMjIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpe2lmKFwic3RyaW5nXCIhPT1yJiZcIm51bWJlclwiIT09ciYmXCJkZWZhdWx0XCIhPT1yKXRocm93IFR5cGVFcnJvcihcIkluY29ycmVjdCBoaW50XCIpO3JldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSxcIm51bWJlclwiIT1yKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlrWVhSbExYUnZMWEJ5YVcxcGRHbDJaUzVxY3lKZExDSnVZVzFsY3lJNld5SmhiazlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0owYjFCeWFXMXBkR2wyWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSm9hVzUwSWl3aVZIbHdaVVZ5Y205eUlpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOdVFrTXNXVUZCWTBRc1VVRkJVU3h0UWtGSE1VSkZMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1IwRkJZU3hYUVVGVVFTeEhRVWhQTEZkQlIyTkJMRWRCUVRSQ0xGbEJRVlJCTEVWQlFXOUNMRTFCUVUxRExGVkJRVlVzYTBKQlEyaEdMRTlCUVU5S0xGbEJRVmxHTEZOQlFWTlBMRTFCU21wQ0xGVkJTWGRDUmlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyUmhkR1V0ZEc4dGNISnBiV2wwYVhabExtcHpJbjA9IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIWlzT2JqZWN0KHQpKXJldHVybiB0O3ZhciByLGk7aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnRvU3RyaW5nKSYmIWlzT2JqZWN0KGk9ci5jYWxsKHQpKSlyZXR1cm4gaTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudmFsdWVPZikmJiFpc09iamVjdChpPXIuY2FsbCh0KSkpcmV0dXJuIGk7aWYoIWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC50b1N0cmluZykmJiFpc09iamVjdChpPXIuY2FsbCh0KSkpcmV0dXJuIGk7dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTF3Y21sdGFYUnBkbVV1YW5NaVhTd2libUZ0WlhNaU9sc2lhWE5QWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1sMElpd2lVeUlzSW1adUlpd2lkbUZzSWl3aWRHOVRkSEpwYm1jaUxDSmpZV3hzSWl3aWRtRnNkV1ZQWmlJc0lsUjVjR1ZGY25KdmNpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeG5Ra0ZIZGtKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJTVU1zUjBGRE4wSXNTVUZCUzB3c1UwRkJVMGtzUjBGQlN5eFBRVUZQUVN4RlFVTXhRaXhKUVVGSlJTeEZRVUZKUXl4RlFVTlNMRWRCUVVsR0xFZEJRV3RETEcxQ1FVRnlRa01zUlVGQlMwWXNSVUZCUjBrc1dVRkJORUpTTEZOQlFWTlBMRVZCUVUxRUxFVkJRVWRITEV0QlFVdE1MRWxCUVUwc1QwRkJUMGNzUlVGRGVrWXNSMEZCWjBNc2JVSkJRWEJDUkN4RlFVRkxSaXhGUVVGSFRTeFhRVUV5UWxZc1UwRkJVMDhzUlVGQlRVUXNSVUZCUjBjc1MwRkJTMHdzU1VGQlRTeFBRVUZQUnl4RlFVTnVSaXhKUVVGTFJpeEhRVUZyUXl4dFFrRkJja0pETEVWQlFVdEdMRVZCUVVkSkxGbEJRVFJDVWl4VFFVRlRUeXhGUVVGTlJDeEZRVUZIUnl4TFFVRkxUQ3hKUVVGTkxFOUJRVTlITEVWQlF6RkdMRTFCUVUxSkxGVkJRVlVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5MGJ5MXdjbWx0YVhScGRtVXVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8pe2lmKG51bGw9PW8pdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiK28pO3JldHVybiBvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWtaV1pwYm1Wa0xtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSXNJblZ1WkdWbWFXNWxaQ0lzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzUjBGQlZVTXNUVUZCVGtRc1JVRkJhVUlzVFVGQlRVVXNWVUZCVlN4NVFrRkJNa0pHTEVkQlEyaEZMRTlCUVU5Qklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZaR1ZtYVc1bFpDNXFjeUo5IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpLGRvY3VtZW50PXJlcXVpcmUoNDMpLmRvY3VtZW50LGlzPWlzT2JqZWN0KGRvY3VtZW50KSYmaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk6e319O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a2IyMHRZM0psWVhSbExtcHpJbDBzSW01aGJXVnpJanBiSW1selQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltUnZZM1Z0Wlc1MElpd2lhWE1pTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1sMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxHZENRVU51UWtNc1UwRkJWMFFzVVVGQlVTeGhRVUZoUXl4VFFVVm9RME1zUjBGQlMwZ3NVMEZCVTBVc1YwRkJZVVlzVTBGQlUwVXNVMEZCVTBVc1pVRkRha1JETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNUMEZCVDBvc1IwRkJTMFFzVTBGQlUwVXNZMEZCWTBjc1IwRkJUU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDJSdmJTMWpjbVZoZEdVdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9XCJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2ZcIi5zcGxpdChcIixcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlsYm5WdExXSjFaeTFyWlhsekxtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKemNHeHBkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEU5QlFVOURMRkZCUVZVc1owZEJSV1pETEUxQlFVMGlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjlsYm5WdExXSjFaeTFyWlhsekxtcHpJbjA9IiwidmFyIGdldEtleXM9cmVxdWlyZSg4MyksZ09QUz1yZXF1aXJlKDgwKSxwSUU9cmVxdWlyZSg4NCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI9Z2V0S2V5cyhlKSx0PWdPUFMuZjtpZih0KWZvcih2YXIgbyx1PXQoZSksZz1wSUUuZixpPTA7dS5sZW5ndGg+aTspZy5jYWxsKGUsbz11W2krK10pJiZyLnB1c2gobyk7cmV0dXJuIHJ9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bGJuVnRMV3RsZVhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpWjJWMFMyVjVjeUlzSW5KbGNYVnBjbVVpTENKblQxQlRJaXdpY0VsRklpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWl3aWNtVnpkV3gwSWl3aVoyVjBVM2x0WW05c2N5SXNJbVlpTENKclpYa2lMQ0p6ZVcxaWIyeHpJaXdpYVhORmJuVnRJaXdpYVNJc0lteGxibWQwYUNJc0ltTmhiR3dpTENKd2RYTm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR3RDUVVOc1FrTXNTMEZCVDBRc1VVRkJVU3hyUWtGRFprVXNTVUZCVFVZc1VVRkJVU3hwUWtGRGJFSkhMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1NVRkJTVU1zUlVGQlUxQXNVVUZCVVUwc1IwRkRha0pGTEVWQlFXRk9MRXRCUVV0UExFVkJRM1JDTEVkQlFVbEVMRVZCUzBZc1NVRktRU3hKUVVkSlJTeEZRVWhCUXl4RlFVRlZTQ3hGUVVGWFJpeEhRVU55UWswc1JVRkJVMVFzU1VGQlNVMHNSVUZEWWtrc1JVRkJTU3hGUVVWRVJpeEZRVUZSUnl4UFFVRlRSQ3hIUVVGUFJDeEZRVUZQUnl4TFFVRkxWQ3hGUVVGSlNTeEZRVUZOUXl4RlFVRlJSU3hQUVVGUFRpeEZRVUZQVXl4TFFVRkxUaXhIUVVOb1JpeFBRVUZQU0NJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gyVnVkVzB0YTJWNWN5NXFjeUo5IiwiZXhwb3J0cy5mPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRjR2xsTG1weklsMHNJbTVoYldWeklqcGJJbVY0Y0c5eWRITWlMQ0ptSWl3aWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hQUVVGQlFTeERRVUZSUXl4RFFVRkJRU3hEUVVGSkxFVkJRVUVzUTBGQlIwTXNiMEpCUVVGQkxFTkJRVUZCSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYWDA9IiwidmFyICRrZXlzPXJlcXVpcmUoODIpLGVudW1CdWdLZXlzPXJlcXVpcmUoMzQpO21vZHVsZS5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXtyZXR1cm4gJGtleXMoZSxlbnVtQnVnS2V5cyl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0YTJWNWN5NXFjeUpkTENKdVlXMWxjeUk2V3lJa2EyVjVjeUlzSW5KbGNYVnBjbVVpTENKbGJuVnRRblZuUzJWNWN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2lUeUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNUVUZCVVVNc1VVRkJVU3d5UWtGRGFFSkRMRmxCUVdORUxGRkJRVkVzYjBKQlJURkNSU3hQUVVGUFF5eFJRVUZWUXl4UFFVRlBReXhOUVVGUkxGTkJRV05ETEVkQlF6VkRMRTlCUVU5UUxFMUJRVTFQTEVWQlFVZE1JaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYjJKcVpXTjBMV3RsZVhNdWFuTWlmUT09IiwiZXhwb3J0cy5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFoyOXdjeTVxY3lKZExDSnVZVzFsY3lJNld5SmxlSEJ2Y25Seklpd2laaUlzSWs5aWFtVmpkQ0lzSW1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVVGQkxFTkJRVkZETEVOQlFVRkJMRU5CUVVsRExFMUJRVUZCTEVOQlFVOURMSEZDUVVGQlFTeERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwidmFyIE1BVENIPXJlcXVpcmUoMTMxKShcIm1hdGNoXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpe3ZhciB0PS8uLzt0cnl7XCIvLi9cIltyXSh0KX1jYXRjaChjKXt0cnl7cmV0dXJuIHRbTUFUQ0hdPSExLCFcIi8uL1wiW3JdKHQpfWNhdGNoKHIpe319cmV0dXJuITB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bVlXbHNjeTFwY3kxeVpXZGxlSEF1YW5NaVhTd2libUZ0WlhNaU9sc2lUVUZVUTBnaUxDSnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJa3RGV1NJc0luSmxJaXdpWlNJc0ltWWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFMUJRVkZETEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzVTBGRE9VSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1NVRkJTVU1zUlVGQlN5eEpRVU5VTEVsQlEwVXNUVUZCVFVRc1IwRkJTME1zUjBGRFdDeE5RVUZQUXl4SFFVTlFMRWxCUlVVc1QwRkVRVVFzUlVGQlIwd3NVVUZCUVVFc1IwRkRTeXhOUVVGTlNTeEhRVUZMUXl4SFFVTnVRaXhOUVVGUFJTeExRVU5VTEU5QlFVRWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjltWVdsc2N5MXBjeTF5WldkbGVIQXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoMjI4KTt2YXIgcmVkZWZpbmU9cmVxdWlyZSg5NCksaGlkZT1yZXF1aXJlKDQ1KSxmYWlscz1yZXF1aXJlKDM4KSxkZWZpbmVkPXJlcXVpcmUoMzEpLHdrcz1yZXF1aXJlKDEzMSkscmVnZXhwRXhlYz1yZXF1aXJlKDk2KSxTUEVDSUVTPXdrcyhcInNwZWNpZXNcIiksUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFM9IWZhaWxzKGZ1bmN0aW9uKCl7dmFyIGU9Ly4vO3JldHVybiBlLmV4ZWM9ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gZS5ncm91cHM9e2E6XCI3XCJ9LGV9LFwiN1wiIT09XCJcIi5yZXBsYWNlKGUsXCIkPGE+XCIpfSksU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDPWZ1bmN0aW9uKCl7dmFyIGU9Lyg/OikvLHI9ZS5leGVjO2UuZXhlYz1mdW5jdGlvbigpe3JldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dmFyIG49XCJhYlwiLnNwbGl0KGUpO3JldHVybiAyPT09bi5sZW5ndGgmJlwiYVwiPT09blswXSYmXCJiXCI9PT1uWzFdfSgpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixuKXt2YXIgaT13a3MoZSksdD0hZmFpbHMoZnVuY3Rpb24oKXt2YXIgcj17fTtyZXR1cm4gcltpXT1mdW5jdGlvbigpe3JldHVybiA3fSw3IT1cIlwiW2VdKHIpfSksdT10PyFmYWlscyhmdW5jdGlvbigpe3ZhciByPSExLG49L2EvO3JldHVybiBuLmV4ZWM9ZnVuY3Rpb24oKXtyZXR1cm4gcj0hMCxudWxsfSxcInNwbGl0XCI9PT1lJiYobi5jb25zdHJ1Y3Rvcj17fSxuLmNvbnN0cnVjdG9yW1NQRUNJRVNdPWZ1bmN0aW9uKCl7cmV0dXJuIG59KSxuW2ldKFwiXCIpLCFyfSk6dm9pZCAwO2lmKCF0fHwhdXx8XCJyZXBsYWNlXCI9PT1lJiYhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFN8fFwic3BsaXRcIj09PWUmJiFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpe3ZhciBjPS8uL1tpXSxhPW4oZGVmaW5lZCxpLFwiXCJbZV0sZnVuY3Rpb24oZSxyLG4saSx1KXtyZXR1cm4gci5leGVjPT09cmVnZXhwRXhlYz90JiYhdT97ZG9uZTohMCx2YWx1ZTpjLmNhbGwocixuLGkpfTp7ZG9uZTohMCx2YWx1ZTplLmNhbGwobixyLGkpfTp7ZG9uZTohMX19KSxvPWFbMF0sZj1hWzFdO3JlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsZSxvKSxoaWRlKFJlZ0V4cC5wcm90b3R5cGUsaSwyPT1yP2Z1bmN0aW9uKGUscil7cmV0dXJuIGYuY2FsbChlLHRoaXMscil9OmZ1bmN0aW9uKGUpe3JldHVybiBmLmNhbGwoZSx0aGlzKX0pfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltYVhndGNtVXRkMnR6TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0p5WldSbFptbHVaU0lzSW1ocFpHVWlMQ0ptWVdsc2N5SXNJbVJsWm1sdVpXUWlMQ0ozYTNNaUxDSnlaV2RsZUhCRmVHVmpJaXdpVTFCRlEwbEZVeUlzSWxKRlVFeEJRMFZmVTFWUVVFOVNWRk5mVGtGTlJVUmZSMUpQVlZCVElpd2ljbVVpTENKbGVHVmpJaXdpY21WemRXeDBJaXdpWjNKdmRYQnpJaXdpWVNJc0luSmxjR3hoWTJVaUxDSlRVRXhKVkY5WFQxSkxVMTlYU1ZSSVgwOVdSVkpYVWtsVVZFVk9YMFZZUlVNaUxDSnZjbWxuYVc1aGJFVjRaV01pTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKemNHeHBkQ0lzSW14bGJtZDBhQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKTFJWa2lMQ0pUV1UxQ1Qwd2lMQ0pFUlV4RlIwRlVSVk5mVkU5ZlUxbE5RazlNSWl3aVR5SXNJa1JGVEVWSFFWUkZVMTlVVDE5RldFVkRJaXdpWlhobFkwTmhiR3hsWkNJc0ltTnZibk4wY25WamRHOXlJaXdpYm1GMGFYWmxVbVZuUlhod1RXVjBhRzlrSWl3aVptNXpJaXdpYm1GMGFYWmxUV1YwYUc5a0lpd2ljbVZuWlhod0lpd2ljM1J5SWl3aVlYSm5NaUlzSW1admNtTmxVM1J5YVc1blRXVjBhRzlrSWl3aVpHOXVaU0lzSW5aaGJIVmxJaXdpWTJGc2JDSXNJbk4wY21adUlpd2ljbmhtYmlJc0lsTjBjbWx1WnlJc0luQnliM1J2ZEhsd1pTSXNJbEpsWjBWNGNDSXNJbk4wY21sdVp5SXNJbUZ5WnlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRVUVzVVVGQlVTeHhRa0ZEVWl4SlFVRkpReXhUUVVGWFJDeFJRVUZSTEdWQlEyNUNSU3hMUVVGUFJpeFJRVUZSTEZkQlEyWkhMRTFCUVZGSUxGRkJRVkVzV1VGRGFFSkpMRkZCUVZWS0xGRkJRVkVzWTBGRGJFSkxMRWxCUVUxTUxGRkJRVkVzVlVGRFpFMHNWMEZCWVU0c1VVRkJVU3hyUWtGRmNrSlBMRkZCUVZWR0xFbEJRVWtzVjBGRlpFY3NLMEpCUVdsRFRDeE5RVUZOTEZkQlNYcERMRWxCUVVsTkxFVkJRVXNzU1VGTlZDeFBRVXhCUVN4RlFVRkhReXhMUVVGUExGZEJRMUlzU1VGQlNVTXNSVUZCVXl4SFFVVmlMRTlCUkVGQkxFVkJRVTlETEU5QlFWTXNRMEZCUlVNc1JVRkJSeXhMUVVOa1JpeEhRVVY1UWl4TlFVRXpRaXhIUVVGSFJ5eFJRVUZSVEN4RlFVRkpMRlZCUjNCQ1RTeHJRMEZCYjBNc1YwRkZkRU1zU1VGQlNVNHNSVUZCU3l4UFFVTk1UeXhGUVVGbFVDeEZRVUZIUXl4TFFVTjBRa1FzUlVGQlIwTXNTMEZCVHl4WFFVRmpMRTlCUVU5TkxFVkJRV0ZETEUxQlFVMURMRXRCUVUxRExGbEJRM2hFTEVsQlFVbFNMRVZCUVZNc1MwRkJTMU1zVFVGQlRWZ3NSMEZEZUVJc1QwRkJlVUlzU1VGQmJFSkZMRVZCUVU5VkxGRkJRVGhDTEUxQlFXUldMRVZCUVU4c1NVRkJORUlzVFVGQlpFRXNSVUZCVHl4SFFVNXdRaXhIUVZONFExY3NUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZMU0N4RlFVRlJXQ3hIUVVOMFF5eEpRVUZKWlN4RlFVRlRjRUlzU1VGQlNXMUNMRWRCUldKRkxFZEJRWFZDZGtJc1RVRkJUU3hYUVVVdlFpeEpRVUZKZDBJc1JVRkJTU3hIUVVWU0xFOUJSRUZCTEVWQlFVVkdMRWRCUVZVc1YwRkJZeXhQUVVGUExFZEJRMW9zUjBGQlpDeEhRVUZIUkN4SFFVRkxSeXhMUVVkaVF5eEZRVUZ2UWtZc1IwRkJkVUoyUWl4TlFVRk5MRmRCUlc1RUxFbEJRVWt3UWl4SFFVRkJRU3hGUVVOQmNFSXNSVUZCU3l4SlFWTlVMRTlCVWtGQkxFVkJRVWRETEV0QlFVOHNWMEZCYVVNc1QwRkJia0p0UWl4SFFVRkJRU3hGUVVFd1FpeE5RVU4wUXl4VlFVRlNUQ3hKUVVkR1ppeEZRVUZIY1VJc1dVRkJZeXhIUVVOcVFuSkNMRVZCUVVkeFFpeFpRVUZaZGtJc1UwRkJWeXhYUVVGakxFOUJRVTlGTEVsQlJXcEVRU3hGUVVGSFowSXNSMEZCVVN4TFFVTklTU3hUUVVGQlFTeEZRVWRXTEVsQlEwZElMRWxCUTBGRkxFZEJRMUVzV1VGQlVrb3NTVUZCYzBKb1Fpd3JRa0ZEWkN4VlFVRlNaMElzU1VGQmIwSlVMR3REUVVOeVFpeERRVU5CTEVsQlFVbG5RaXhGUVVGeFFpeEpRVUZKVGl4SFFVTjZRazhzUlVGQlRYUkNMRVZCUTFKT0xGRkJRMEZ4UWl4RlFVTkJMRWRCUVVkRUxFZEJRMGdzVTBGQmVVSlRMRVZCUVdORExFVkJRVkZETEVWQlFVdERMRVZCUVUxRExFZEJRM2hFTEU5QlFVbElMRVZCUVU5NFFpeFBRVUZUU2l4WFFVTmtiMElzU1VGQmQwSlhMRVZCU1c1Q0xFTkJRVVZETEUxQlFVRkJMRVZCUVZsRExFMUJRVTlTTEVWQlFXMUNVeXhMUVVGTFRpeEZRVUZSUXl4RlFVRkxReXhKUVVVMVJDeERRVUZGUlN4TlFVRkJRU3hGUVVGWlF5eE5RVUZQVGl4RlFVRmhUeXhMUVVGTFRDeEZRVUZMUkN4RlFVRlJSU3hKUVVWMFJDeERRVUZGUlN4TlFVRkJRU3hMUVVkVVJ5eEZRVUZSVkN4RlFVRkpMRWRCUTFwVkxFVkJRVTlXTEVWQlFVa3NSMEZGWmk5Q0xGTkJRVk13UXl4UFFVRlBReXhWUVVGWGNFSXNSVUZCUzJsQ0xFZEJRMmhEZGtNc1MwRkJTekpETEU5QlFVOUVMRlZCUVZkdVFpeEZRVUZyUWl4SFFVRldTaXhGUVVjelFpeFRRVUZWZVVJc1JVRkJVVU1zUjBGQlR5eFBRVUZQVEN4RlFVRkxSaXhMUVVGTFRTeEZRVUZSTlVJc1MwRkJUVFpDTEVsQlIzaEVMRk5CUVZWRUxFZEJRVlVzVDBGQlQwb3NSVUZCUzBZc1MwRkJTMDBzUlVGQlVUVkNJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmWm1sNExYSmxMWGRyY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgcmVnZXhwRXhlYz1yZXF1aXJlKDk2KTtyZXF1aXJlKDM2KSh7dGFyZ2V0OlwiUmVnRXhwXCIscHJvdG86ITAsZm9yY2VkOnJlZ2V4cEV4ZWMhPT0vLi8uZXhlY30se2V4ZWM6cmVnZXhwRXhlY30pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV2RsZUhBdVpYaGxZeTVxY3lKZExDSnVZVzFsY3lJNld5SnlaV2RsZUhCRmVHVmpJaXdpY21WeGRXbHlaU0lzSW5SaGNtZGxkQ0lzSW5CeWIzUnZJaXdpWm05eVkyVmtJaXdpWlhobFl5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hYUVVGaFF5eFJRVUZSTEd0Q1FVTjZRa0VzVVVGQlVTeFpRVUZTUVN4RFFVRnhRaXhEUVVOdVFrTXNUMEZCVVN4VFFVTlNReXhQUVVGQlFTeEZRVU5CUXl4UFFVRlJTaXhoUVVGbExFbEJRVWxMTEUxQlF6RkNMRU5CUTBSQkxFdEJRVTFNSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVjbVZuWlhod0xtVjRaV011YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgcmUxLHJlMixyZWdleHBGbGFncz1yZXF1aXJlKDQwKSxuYXRpdmVFeGVjPVJlZ0V4cC5wcm90b3R5cGUuZXhlYyxuYXRpdmVSZXBsYWNlPVN0cmluZy5wcm90b3R5cGUucmVwbGFjZSxwYXRjaGVkRXhlYz1uYXRpdmVFeGVjLFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORz0ocmUxPS9hLyxyZTI9L2IqL2csbmF0aXZlRXhlYy5jYWxsKHJlMSxcImFcIiksbmF0aXZlRXhlYy5jYWxsKHJlMixcImFcIiksMCE9PXJlMS5sYXN0SW5kZXh8fDAhPT1yZTIubGFzdEluZGV4KSxOUENHX0lOQ0xVREVEPXZvaWQgMCE9PS8oKT8/Ly5leGVjKFwiXCIpWzFdOyhVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkd8fE5QQ0dfSU5DTFVERUQpJiYocGF0Y2hlZEV4ZWM9ZnVuY3Rpb24oZSl7dmFyIGEsdCxsLGMscj10aGlzO3JldHVybiBOUENHX0lOQ0xVREVEJiYodD1uZXcgUmVnRXhwKFwiXlwiK3Iuc291cmNlK1wiJCg/IVxcXFxzKVwiLHJlZ2V4cEZsYWdzLmNhbGwocikpKSxVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcmJihhPXIubGFzdEluZGV4KSxsPW5hdGl2ZUV4ZWMuY2FsbChyLGUpLFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyYmbCYmKHIubGFzdEluZGV4PXIuZ2xvYmFsP2wuaW5kZXgrbFswXS5sZW5ndGg6YSksTlBDR19JTkNMVURFRCYmbCYmbC5sZW5ndGg+MSYmbmF0aXZlUmVwbGFjZS5jYWxsKGxbMF0sdCxmdW5jdGlvbigpe2ZvcihjPTE7Yzxhcmd1bWVudHMubGVuZ3RoLTI7YysrKXZvaWQgMD09PWFyZ3VtZW50c1tjXSYmKGxbY109dm9pZCAwKX0pLGx9KSxtb2R1bGUuZXhwb3J0cz1wYXRjaGVkRXhlYztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXlaV2RsZUhBdFpYaGxZeTVxY3lKZExDSnVZVzFsY3lJNld5SnlaVEVpTENKeVpUSWlMQ0p5WldkbGVIQkdiR0ZuY3lJc0luSmxjWFZwY21VaUxDSnVZWFJwZG1WRmVHVmpJaXdpVW1WblJYaHdJaXdpY0hKdmRHOTBlWEJsSWl3aVpYaGxZeUlzSW01aGRHbDJaVkpsY0d4aFkyVWlMQ0pUZEhKcGJtY2lMQ0p5WlhCc1lXTmxJaXdpY0dGMFkyaGxaRVY0WldNaUxDSlZVRVJCVkVWVFgweEJVMVJmU1U1RVJWaGZWMUpQVGtjaUxDSmpZV3hzSWl3aWJHRnpkRWx1WkdWNElpd2lUbEJEUjE5SlRrTk1WVVJGUkNJc0luTjBjaUlzSW5KbFEyOXdlU0lzSW0xaGRHTm9JaXdpYVNJc0luSmxJaXdpZEdocGN5SXNJbk52ZFhKalpTSXNJbWRzYjJKaGJDSXNJbWx1WkdWNElpd2liR1Z1WjNSb0lpd2lZWEpuZFcxbGJuUnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRV0ZOUVN4SlFVTkJReXhKUVdSR1F5eFpRVUZqUXl4UlFVRlJMRmxCUlhSQ1F5eFhRVUZoUXl4UFFVRlBReXhWUVVGVlF5eExRVWs1UWtNc1kwRkJaMEpETEU5QlFVOUlMRlZCUVZWSkxGRkJSV3BEUXl4WlFVRmpVQ3hYUVVsa1VTd3dRa0ZEUlZvc1NVRkJUU3hKUVVOT1F5eEpRVUZOTEUxQlExWkhMRmRCUVZkVExFdEJRVXRpTEVsQlFVc3NTMEZEY2tKSkxGZEJRVmRUTEV0QlFVdGFMRWxCUVVzc1MwRkRUU3hKUVVGd1FrUXNTVUZCWTJNc1YwRkJLMElzU1VGQmNFSmlMRWxCUVdOaExGZEJTVFZEUXl4dFFrRkJRVUVzU1VGQlowSXNUMEZCVDFJc1MwRkJTeXhKUVVGSkxFbEJSWGhDU3l3d1FrRkJORUpITEdsQ1FVZDBRMG9zV1VGQll5eFRRVUZqU3l4SFFVTXhRaXhKUVVOSlJpeEZRVUZYUnl4RlFVRlJReXhGUVVGUFF5eEZRVVF4UWtNc1JVRkJTME1zUzBGM1FsUXNUMEZ5UWtsT0xHZENRVU5HUlN4RlFVRlRMRWxCUVVsYUxFOUJRVThzU1VGQlRXVXNSVUZCUjBVc1QwRkJVeXhYUVVGWmNFSXNXVUZCV1Zjc1MwRkJTMDhzUzBGRmFrVlNMREpDUVVFd1FrVXNSVUZCV1Uwc1JVRkJZVTRzVjBGRmRrUkpMRVZCUVZGa0xGZEJRVmRUTEV0QlFVdFBMRVZCUVVsS0xFZEJSWGhDU2l3d1FrRkJORUpOTEVsQlF6bENSU3hGUVVGaFRpeFZRVUZKVFN4RlFVRkhSeXhQUVVGVFRDeEZRVUZOVFN4TlFVRlJUaXhGUVVGTkxFZEJRVWRQTEU5QlFWTllMRWRCUlRORVF5eGxRVUZwUWtjc1IwRkJVMEVzUlVGQlRVOHNUMEZCVXl4SFFVa3pRMnBDTEdOQlFXTkxMRXRCUVV0TExFVkJRVTBzUjBGQlNVUXNSVUZCVVN4WFFVTnVReXhKUVVGTFJTeEZRVUZKTEVWQlFVZEJMRVZCUVVsUExGVkJRVlZFTEU5QlFWTXNSVUZCUjA0c1UwRkJRVUVzU1VGRGFFTlBMRlZCUVZWUUxFdEJRV3RDUkN4RlFVRk5ReXhSUVVGQlFTeExRVXR5UTBRc1NVRkpXRk1zVDBGQlQwTXNVVUZCVldwQ0lpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZjbVZuWlhod0xXVjRaV011YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYW5PYmplY3Q9cmVxdWlyZSgxMCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZT1hbk9iamVjdCh0aGlzKSx0PVwiXCI7cmV0dXJuIGUuZ2xvYmFsJiYodCs9XCJnXCIpLGUuaWdub3JlQ2FzZSYmKHQrPVwiaVwiKSxlLm11bHRpbGluZSYmKHQrPVwibVwiKSxlLnVuaWNvZGUmJih0Kz1cInVcIiksZS5zdGlja3kmJih0Kz1cInlcIiksdH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltYkdGbmN5NXFjeUpkTENKdVlXMWxjeUk2V3lKaGJrOWlhbVZqZENJc0luSmxjWFZwY21VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lkR2hoZENJc0luUm9hWE1pTENKeVpYTjFiSFFpTENKbmJHOWlZV3dpTENKcFoyNXZjbVZEWVhObElpd2liWFZzZEdsc2FXNWxJaXdpZFc1cFkyOWtaU0lzSW5OMGFXTnJlU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxHZENRVU4yUWtNc1QwRkJUME1zVVVGQlZTeFhRVU5tTEVsQlFVbERMRVZCUVU5S0xGTkJRVk5MTEUxQlEyaENReXhGUVVGVExFZEJUV0lzVDBGTVNVWXNSVUZCUzBjc1UwRkJVVVFzUjBGQlZTeExRVU4yUWtZc1JVRkJTMGtzWVVGQldVWXNSMEZCVlN4TFFVTXpRa1lzUlVGQlMwc3NXVUZCVjBnc1IwRkJWU3hMUVVNeFFrWXNSVUZCUzAwc1ZVRkJVMG9zUjBGQlZTeExRVU40UWtZc1JVRkJTMDhzVTBGQlVVd3NSMEZCVlN4TFFVTndRa0VpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5bWJHRm5jeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBpc0FycmF5PXJlcXVpcmUoNTIpLGlzT2JqZWN0PXJlcXVpcmUoNTQpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxjdHg9cmVxdWlyZSgyOCksSVNfQ09OQ0FUX1NQUkVBREFCTEU9cmVxdWlyZSgxMzEpKFwiaXNDb25jYXRTcHJlYWRhYmxlXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHIoZSx0LGksbyxzLGEsYyxuKXtmb3IodmFyIHUsXyxBPXMsZj0wLGg9ISFjJiZjdHgoYyxuLDMpO2Y8bzspe2lmKGYgaW4gaSl7aWYodT1oP2goaVtmXSxmLHQpOmlbZl0sXz0hMSxpc09iamVjdCh1KSYmKF89dm9pZCAwIT09KF89dVtJU19DT05DQVRfU1BSRUFEQUJMRV0pPyEhXzppc0FycmF5KHUpKSxfJiZhPjApQT1yKGUsdCx1LHRvTGVuZ3RoKHUubGVuZ3RoKSxBLGEtMSktMTtlbHNle2lmKEE+PTkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgVHlwZUVycm9yKCk7ZVtBXT11fUErK31mKyt9cmV0dXJuIEF9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bWJHRjBkR1Z1TFdsdWRHOHRZWEp5WVhrdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVhOQmNuSmhlU0lzSW5KbGNYVnBjbVVpTENKcGMwOWlhbVZqZENJc0luUnZUR1Z1WjNSb0lpd2lZM1I0SWl3aVNWTmZRMDlPUTBGVVgxTlFVa1ZCUkVGQ1RFVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWm14aGRIUmxia2x1ZEc5QmNuSmhlU0lzSW5SaGNtZGxkQ0lzSW05eWFXZHBibUZzSWl3aWMyOTFjbU5sSWl3aWMyOTFjbU5sVEdWdUlpd2ljM1JoY25RaUxDSmtaWEIwYUNJc0ltMWhjSEJsY2lJc0luUm9hWE5CY21jaUxDSmxiR1Z0Wlc1MElpd2ljM0J5WldGa1lXSnNaU0lzSW5SaGNtZGxkRWx1WkdWNElpd2ljMjkxY21ObFNXNWtaWGdpTENKdFlYQkdiaUlzSW14bGJtZDBhQ0lzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR1ZCUTJ4Q1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNVMEZCVjBZc1VVRkJVU3huUWtGRGJrSkhMRWxCUVUxSUxGRkJRVkVzVlVGRFpFa3NjVUpCUVhWQ1NpeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xITkNRV2RETjBOTExFOUJRVTlETEZGQk9VSlFMRk5CUVZORExFVkJRV2xDUXl4RlFVRlJReXhGUVVGVlF5eEZRVUZSUXl4RlFVRlhReXhGUVVGUFF5eEZRVUZQUXl4RlFVRlJReXhIUVUxdVJpeEpRVXhCTEVsQlIwbERMRVZCUVZORExFVkJTRlJETEVWQlFXTk9MRVZCUTJSUExFVkJRV01zUlVGRFpFTXNTVUZCVVU0c1IwRkJVMWdzU1VGQlNWY3NSVUZCVVVNc1JVRkJVeXhIUVVkdVEwa3NSVUZCWTFJc1IwRkJWeXhEUVVNNVFpeEhRVUZKVVN4TFFVRmxWQ3hGUVVGUkxFTkJVM3BDTEVkQlVrRk5MRVZCUVZWSkxFVkJRVkZCTEVWQlFVMVdMRVZCUVU5VExFZEJRV05CTEVWQlFXRldMRWRCUVZsRExFVkJRVTlUTEVkQlJUZEZSaXhIUVVGQlFTeEZRVU5KYUVJc1UwRkJVMlVzUzBGRldFTXNUMEZCUVVFc1MwRkVRVUVzUlVGQllVUXNSVUZCVVZvc2VVSkJRM0ZDWVN4RlFVRmhiRUlzVVVGQlVXbENMRWxCUnpkRVF5eEhRVUZqU2l4RlFVRlJMRVZCUTNoQ1N5eEZRVUZqV0N4RlFVRnBRa01zUlVGQlVVTXNSVUZCVlU4c1JVRkJVMlFzVTBGQlUyTXNSVUZCVVVzc1VVRkJVMGdzUlVGQllVd3NSVUZCVVN4SFFVRkxMRTFCUTNwSExFTkJRMHdzUjBGQlNVc3NSMEZCWlN4cFFrRkJhMElzVFVGQlRVa3NXVUZETTBOa0xFVkJRVTlWTEVkQlFXVkdMRVZCUjNoQ1JTeEpRVVZHUXl4SlFVVkdMRTlCUVU5RUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZabXhoZEhSbGJpMXBiblJ2TFdGeWNtRjVMbXB6SW4wPSIsInZhciBhbk9iamVjdD1yZXF1aXJlKDEwKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLHQsZSxhKXt0cnl7cmV0dXJuIGE/dChhbk9iamVjdChlKVswXSxlWzFdKTp0KGUpfWNhdGNoKHQpe3ZhciBjPXIucmV0dXJuO3Rocm93IHZvaWQgMCE9PWMmJmFuT2JqZWN0KGMuY2FsbChyKSksdH19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGRHVnlMV05oYkd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpWVc1UFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbDBaWEpoZEc5eUlpd2labTRpTENKMllXeDFaU0lzSW1WdWRISnBaWE1pTENKbElpd2ljbVYwSWl3aWNtVjBkWEp1SWl3aVkyRnNiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVlVNc1JVRkJTVU1zUlVGQlQwTXNSMEZET1VNc1NVRkRSU3hQUVVGUFFTeEZRVUZWUml4RlFVRkhUQ3hUUVVGVFRTeEhRVUZQTEVkQlFVbEJMRVZCUVUwc1NVRkJUVVFzUlVGQlIwTXNSMEZGZGtRc1RVRkJUMFVzUjBGRFVDeEpRVUZKUXl4RlFVRk5UQ3hGUVVGcFFrMHNUMEZGTTBJc1YwRkJRU3hKUVVSSlJDeEhRVUZ0UWxRc1UwRkJVMU1zUlVGQlNVVXNTMEZCUzFBc1NVRkRia05KSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZmFYUmxjaTFqWVd4c0xtcHpJbjA9IiwidmFyIEl0ZXJhdG9ycz1yZXF1aXJlKDYxKSxJVEVSQVRPUj1yZXF1aXJlKDEzMSkoXCJpdGVyYXRvclwiKSxBcnJheVByb3RvPUFycmF5LnByb3RvdHlwZTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyKXtyZXR1cm4gdm9pZCAwIT09ciYmKEl0ZXJhdG9ycy5BcnJheT09PXJ8fEFycmF5UHJvdG9bSVRFUkFUT1JdPT09cil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGN5MWhjbkpoZVMxcGRHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklrbDBaWEpoZEc5eWN5SXNJbkpsY1hWcGNtVWlMQ0pKVkVWU1FWUlBVaUlzSWtGeWNtRjVVSEp2ZEc4aUxDSkJjbkpoZVNJc0luQnliM1J2ZEhsd1pTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVlVGQldVTXNVVUZCVVN4blFrRkRjRUpETEZOQlFWZEVMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNXVUZETjBKRkxGZEJRV0ZETEUxQlFVMURMRlZCUlhaQ1F5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDTEZsQlFVRXNTVUZCVDBFc1NVRkJjVUpTTEZWQlFWVkpMRkZCUVZWSkxFZEJRVTFNTEZkQlFWZEVMRmxCUVdOTklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZhWE10WVhKeVlYa3RhWFJsY2k1cWN5SjkiLCJ2YXIgY2xhc3NvZj1yZXF1aXJlKDIwKSxJVEVSQVRPUj1yZXF1aXJlKDEzMSkoXCJpdGVyYXRvclwiKSxJdGVyYXRvcnM9cmVxdWlyZSg2MSk7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZSgyNikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24ocil7aWYobnVsbCE9cilyZXR1cm4gcltJVEVSQVRPUl18fHJbXCJAQGl0ZXJhdG9yXCJdfHxJdGVyYXRvcnNbY2xhc3NvZihyKV19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQzVxY3lKZExDSnVZVzFsY3lJNld5SmpiR0Z6YzI5bUlpd2ljbVZ4ZFdseVpTSXNJa2xVUlZKQlZFOVNJaXdpU1hSbGNtRjBiM0p6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltZGxkRWwwWlhKaGRHOXlUV1YwYUc5a0lpd2lhWFFpTENKMWJtUmxabWx1WldRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1kwRkRiRUpETEZOQlFWZEVMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNXVUZETjBKRkxGVkJRVmxHTEZGQlFWRXNaMEpCUTNoQ1J5eFBRVUZQUXl4UlFVRlZTaXhSUVVGUkxGZEJRVmRMTEd0Q1FVRnZRaXhUUVVGVlF5eEhRVU5vUlN4SFFVRlZReXhOUVVGT1JDeEZRVUZwUWl4UFFVRlBRU3hGUVVGSFRDeFhRVU14UWtzc1JVRkJSeXhsUVVOSVNpeFZRVUZWU0N4UlFVRlJUeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWTI5eVpTNW5aWFF0YVhSbGNtRjBiM0l0YldWMGFHOWtMbXB6SW4wPSIsInZhciBkb2N1bWVudD1yZXF1aXJlKDQzKS5kb2N1bWVudDttb2R1bGUuZXhwb3J0cz1kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5b2RHMXNMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUnZZM1Z0Wlc1MElpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0prYjJOMWJXVnVkRVZzWlcxbGJuUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNZVUZCWVVRc1UwRkRjRU5GTEU5QlFVOURMRkZCUVZWSUxGVkJRVmxCTEZOQlFWTkpJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYUhSdGJDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9IXJlcXVpcmUoMzIpJiYhcmVxdWlyZSgzOCkoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoMzMpKFwiZGl2XCIpLFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwWlRndFpHOXRMV1JsWm1sdVpTNXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVnhkV2x5WlNJc0lrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVoyVjBJaXdpWVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZOQlFWZERMRkZCUVZFc2IwSkJRWE5DUVN4UlFVRlJMRmRCUVZKQkxFTkJRVzlDTEZkQlEyeEZMRTlCUVRSSExFZEJRWEpIUXl4UFFVRlBReXhsUVVGbFJpeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFpeFBRVUZSTEVsQlFVc3NRMEZCUlVjc1NVRkJTeXhYUVVGakxFOUJRVThzUzBGQlVVTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjlwWlRndFpHOXRMV1JsWm1sdVpTNXFjeUo5IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpLGFuT2JqZWN0PXJlcXVpcmUoMTApLGNoZWNrPWZ1bmN0aW9uKHQsZSl7aWYoYW5PYmplY3QodCksIWlzT2JqZWN0KGUpJiZudWxsIT09ZSl0aHJvdyBUeXBlRXJyb3IoZStcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIil9O21vZHVsZS5leHBvcnRzPXtzZXQ6T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoXCJfX3Byb3RvX19cImlue30/ZnVuY3Rpb24odCxlLGMpe3RyeXsoYz1yZXF1aXJlKDI4KShGdW5jdGlvbi5jYWxsLHJlcXVpcmUoNzcpLmYoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQsMikpKHQsW10pLGU9ISh0IGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKHQpe2U9ITB9cmV0dXJuIGZ1bmN0aW9uKHQscil7cmV0dXJuIGNoZWNrKHQsciksZT90Ll9fcHJvdG9fXz1yOmModCxyKSx0fX0oe30sITEpOnZvaWQgMCksY2hlY2s6Y2hlY2t9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5elpYUXRjSEp2ZEc4dWFuTWlYU3dpYm1GdFpYTWlPbHNpYVhOUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aVlXNVBZbXBsWTNRaUxDSmphR1ZqYXlJc0lrOGlMQ0p3Y205MGJ5SXNJbFI1Y0dWRmNuSnZjaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKelpYUWlMQ0pQWW1wbFkzUWlMQ0p6WlhSUWNtOTBiM1I1Y0dWUFppSXNJblJsYzNRaUxDSmlkV2RuZVNJc0lrWjFibU4wYVc5dUlpd2lZMkZzYkNJc0ltWWlMQ0p3Y205MGIzUjVjR1VpTENKQmNuSmhlU0lzSW1VaUxDSmZYM0J5YjNSdlgxOGlYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNUVUZCVVN4VFFVRlZReXhGUVVGSFF5eEhRVVYyUWl4SFFVUkJTQ3hUUVVGVFJTeEpRVU5LU2l4VFFVRlRTeXhKUVVGdlFpeFBRVUZXUVN4RlFVRm5RaXhOUVVGTlF5eFZRVUZWUkN4RlFVRlJMRGhDUVVWc1JVVXNUMEZCVDBNc1VVRkJWU3hEUVVObVF5eEpRVUZMUXl4UFFVRlBReXhwUWtGQmJVSXNZVUZCWlN4SFFVTTFReXhUUVVGVlF5eEZRVUZOUXl4RlFVRlBTaXhIUVVOeVFpeExRVU5GUVN4RlFVRk5VaXhSUVVGUkxGTkJRVkpCTEVOQlFXdENZU3hUUVVGVFF5eExRVUZOWkN4UlFVRlJMR3RDUVVGclFtVXNSVUZCUlU0c1QwRkJUMDhzVlVGQlZ5eGhRVUZoVWl4SlFVRkxMRWxCUTI1SFJ5eEZRVUZOTEVsQlExWkRMRWxCUVZWRUxHRkJRV2RDVFN4UFFVTXhRaXhOUVVGUFF5eEhRVUZMVGl4SFFVRkJRU3hGUVVOa0xFOUJRVThzVTBGQmQwSlVMRVZCUVVkRExFZEJTV2hETEU5QlNFRkdMRTFCUVUxRExFVkJRVWRETEVkQlEweFJMRVZCUVU5VUxFVkJRVVZuUWl4VlFVRlpaaXhGUVVOd1Fra3NSVUZCU1V3c1JVRkJSME1zUjBGRFRFUXNSMEZXV0N4RFFWbEZMRWxCUVVFc1VVRkJTU3hIUVVOU1JDeE5RVUZQUVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzTmxkQzF3Y205MGJ5NXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9e307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwZEdWeVlYUnZjbk11YW5NaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5cGRHVnlZWFJ2Y25NdWFuTWlmUT09IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpLGZsb29yPU1hdGguZmxvb3I7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7cmV0dXJuIWlzT2JqZWN0KG8pJiZpc0Zpbml0ZShvKSYmZmxvb3Iobyk9PT1vfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBjeTFwYm5SbFoyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbVpzYjI5eUlpd2lUV0YwYUNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnBkQ0lzSW1selJtbHVhWFJsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVFVGQlVVTXNTMEZCUzBRc1RVRkRha0pGTEU5QlFVOURMRkZCUVZVc1UwRkJiVUpETEVkQlEyeERMRTlCUVZGT0xGTkJRVk5OTEVsQlFVOURMRk5CUVZORUxFbEJRVTlLTEUxQlFVMUpMRXRCUVZGQklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZhWE10YVc1MFpXZGxjaTVxY3lKOSIsInZhciBpc09iamVjdD1yZXF1aXJlKDU0KSxjb2Y9cmVxdWlyZSgyMSksTUFUQ0g9cmVxdWlyZSgxMzEpKFwibWF0Y2hcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI7cmV0dXJuIGlzT2JqZWN0KGUpJiYodm9pZCAwIT09KHI9ZVtNQVRDSF0pPyEhcjpcIlJlZ0V4cFwiPT1jb2YoZSkpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBjeTF5WldkbGVIQXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTlBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2lZMjltSWl3aVRVRlVRMGdpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pwYzFKbFowVjRjQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMRWxCUVUxRUxGRkJRVkVzVlVGRFpFVXNUVUZCVVVZc1VVRkJVU3hUUVVGU1FTeERRVUZyUWl4VFFVTTVRa2NzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFpeEpRVUZKUXl4RlFVTktMRTlCUVU5UUxGTkJRVk5OTEZWQlFVRkJMRXRCUVZORExFVkJRVmRFTEVWQlFVZElMRlZCUVRCQ1NTeEZRVUZ6UWl4VlFVRllUQ3hKUVVGSlNTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYMmx6TFhKbFoyVjRjQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBjcmVhdGU9cmVxdWlyZSg3MyksZGVzY3JpcHRvcj1yZXF1aXJlKDkyKSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKDEwMyksSXRlcmF0b3JQcm90b3R5cGU9e307cmVxdWlyZSg0NSkoSXRlcmF0b3JQcm90b3R5cGUscmVxdWlyZSgxMzEpKFwiaXRlcmF0b3JcIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsdCxlKXtyLnByb3RvdHlwZT1jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUse25leHQ6ZGVzY3JpcHRvcigxLGUpfSksc2V0VG9TdHJpbmdUYWcocix0K1wiIEl0ZXJhdG9yXCIpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBkR1Z5TFdOeVpXRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SmpjbVZoZEdVaUxDSnlaWEYxYVhKbElpd2laR1Z6WTNKcGNIUnZjaUlzSW5ObGRGUnZVM1J5YVc1blZHRm5JaXdpU1hSbGNtRjBiM0pRY205MGIzUjVjR1VpTENKMGFHbHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWtOdmJuTjBjblZqZEc5eUlpd2lUa0ZOUlNJc0ltNWxlSFFpTENKd2NtOTBiM1I1Y0dVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNUMEZCVTBNc1VVRkJVU3h2UWtGRGFrSkRMRmRCUVdGRUxGRkJRVkVzYjBKQlEzSkNSU3hsUVVGcFFrWXNVVUZCVVN4M1FrRkRla0pITEd0Q1FVRnZRaXhIUVVkNFFrZ3NVVUZCVVN4VlFVRlNRU3hEUVVGdFFrY3NhMEpCUVcxQ1NDeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xGbEJRV0VzVjBGQll5eFBRVUZQU1N4UFFVVXhSa01zVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGaFF5eEZRVUZOUXl4SFFVTTFRMFlzUlVGQldVY3NWVUZCV1Znc1QwRkJUMGtzYTBKQlFXMUNMRU5CUVVWTkxFdEJRVTFTTEZkQlFWY3NSVUZCUjFFc1MwRkRlRVZRTEdWQlFXVkxMRVZCUVdGRExFVkJRVThpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5cGRHVnlMV055WldGMFpTNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9ITE7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlzYVdKeVlYSjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFBRVUZQUXl4VFFVRkJRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDJ4cFluSmhjbmt1YW5NaWZRPT0iLCJ2YXIgaGFzPXJlcXVpcmUoNDQpLHRvT2JqZWN0PXJlcXVpcmUoMTIxKSxJRV9QUk9UTz1yZXF1aXJlKDEwNCkoXCJJRV9QUk9UT1wiKSxPYmplY3RQcm90bz1PYmplY3QucHJvdG90eXBlO21vZHVsZS5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dG9PYmplY3QodCksaGFzKHQsSUVfUFJPVE8pP3RbSUVfUFJPVE9dOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/T2JqZWN0UHJvdG86bnVsbH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaM0J2TG1weklsMHNJbTVoYldWeklqcGJJbWhoY3lJc0luSmxjWFZwY21VaUxDSjBiMDlpYW1WamRDSXNJa2xGWDFCU1QxUlBJaXdpVDJKcVpXTjBVSEp2ZEc4aUxDSlBZbXBsWTNRaUxDSndjbTkwYjNSNWNHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0pQSWl3aVkyOXVjM1J5ZFdOMGIzSWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEZsQlEzQkRSeXhaUVVGalF5eFBRVUZQUXl4VlFVVjZRa01zVDBGQlQwTXNVVUZCVlVnc1QwRkJUMGtzWjBKQlFXdENMRk5CUVZWRExFZEJSV3hFTEU5QlJFRkJMRVZCUVVsU0xGTkJRVk5STEVkQlExUldMRWxCUVVsVkxFVkJRVWRRTEZWQlFXdENUeXhGUVVGRlVDeFZRVU5JTEcxQ1FVRnFRazhzUlVGQlJVTXNZVUZCTmtKRUxHRkJRV0ZCTEVWQlFVVkRMRmxCUTJoRVJDeEZRVUZGUXl4WlFVRlpUQ3hWUVVOa1NTeGhRVUZoVEN4UFFVRlRSQ3haUVVGaklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZiMkpxWldOMExXZHdieTVxY3lKOSIsInZhciAkZXhwbTE9TWF0aC5leHBtMTttb2R1bGUuZXhwb3J0cz0hJGV4cG0xfHwkZXhwbTEoMTApPjIyMDI1LjQ2NTc5NDgwNjcxOHx8JGV4cG0xKDEwKTwyMjAyNS40NjU3OTQ4MDY3MTh8fC0yZS0xNyE9JGV4cG0xKC0yZS0xNyk/ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PShlPStlKT9lOmU+LTFlLTYmJmU8MWUtNj9lK2UqZS8yOk1hdGguZXhwKGUpLTF9OiRleHBtMTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXRZWFJvTFdWNGNHMHhMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ0TVNJc0lrMWhkR2dpTENKbGVIQnRNU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKNElpd2laWGh3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hQUVVGVFF5eExRVUZMUXl4TlFVTnNRa01zVDBGQlQwTXNVMEZCV1Vvc1VVRkZaRUVzVDBGQlR5eEpRVUZOTEc5Q1FVRnpRa0VzVDBGQlR5eEpRVUZOTEhGQ1FVVTNRaXhQUVVGdVFrRXNVVUZCVVN4UFFVTlVMRk5CUVdWTExFZEJRMnBDTEU5QlFXMUNMRWxCUVZoQkxFZEJRVXRCTEVkQlFWVkJMRVZCUVVsQkxFZEJRVXNzVFVGQlVVRXNSVUZCU1N4TFFVRlBRU3hGUVVGSlFTeEZRVUZKUVN4RlFVRkpMRVZCUVVsS0xFdEJRVXRMTEVsQlFVbEVMRWRCUVVzc1IwRkRMMFZNSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZmJXRjBhQzFsZUhCdE1TNXFjeUo5IiwidmFyIHNpZ249cmVxdWlyZSg2NykscG93PU1hdGgucG93LEVQU0lMT049cG93KDIsLTUyKSxFUFNJTE9OMzI9cG93KDIsLTIzKSxNQVgzMj1wb3coMiwxMjcpKigyLUVQU0lMT04zMiksTUlOMzI9cG93KDIsLTEyNik7bW9kdWxlLmV4cG9ydHM9TWF0aC5mcm91bmR8fGZ1bmN0aW9uKEkpe3ZhciBOLG8sRT1NYXRoLmFicyhJKSxMPXNpZ24oSSk7cmV0dXJuIEU8TUlOMzI/TCooRS9NSU4zMi9FUFNJTE9OMzIrMS9FUFNJTE9OLTEvRVBTSUxPTikqTUlOMzIqRVBTSUxPTjMyOihvPShOPSgxK0VQU0lMT04zMi9FUFNJTE9OKSpFKS0oTi1FKSk+TUFYMzJ8fG8hPW8/TCooMS8wKTpMKm99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dFlYUm9MV1p5YjNWdVpDNXFjeUpkTENKdVlXMWxjeUk2V3lKemFXZHVJaXdpY21WeGRXbHlaU0lzSW5CdmR5SXNJazFoZEdnaUxDSkZVRk5KVEU5T0lpd2lSVkJUU1V4UFRqTXlJaXdpVFVGWU16SWlMQ0pOU1U0ek1pSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0ptY205MWJtUWlMQ0o0SWl3aVlTSXNJbkpsYzNWc2RDSXNJaVJoWW5NaUxDSmhZbk1pTENJa2MybG5iaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNTMEZCVDBNc1VVRkJVU3huUWtGRFprTXNTVUZCVFVNc1MwRkJTMFFzU1VGRFdFVXNVVUZCVlVZc1NVRkJTU3hIUVVGSkxFbEJRMnhDUnl4VlFVRlpTQ3hKUVVGSkxFZEJRVWtzU1VGRGNFSkpMRTFCUVZGS0xFbEJRVWtzUlVGQlJ5eE5RVUZSTEVWQlFVbEhMRmRCUXpOQ1JTeE5RVUZSVEN4SlFVRkpMRWRCUVVrc1MwRk5jRUpOTEU5QlFVOURMRkZCUVZWT0xFdEJRVXRQTEZGQlFWVXNVMEZCWjBKRExFZEJRemxETEVsQlJVbERMRVZCUVVkRExFVkJSa2hETEVWQlFVOVlMRXRCUVV0WkxFbEJRVWxLTEVkQlEyaENTeXhGUVVGUmFFSXNTMEZCUzFjc1IwRkZha0lzVDBGQlNVY3NSVUZCVDFBc1RVRkJZMU1zUjBGQmQwSkdMRVZCUVU5UUxFMUJRVkZHTEZWQlVISkVMRVZCUVVsRUxGRkJRVlVzUlVGQlNVRXNVMEZQWjBSSExFMUJRVkZHTEZkQlJYSkdVU3hIUVVSQlJDeEhRVUZMTEVWQlFVbFFMRlZCUVZsRUxGTkJRVmRWTEVsQlEyeENSaXhGUVVGSlJTeEpRVVZNVWl4UFFVRlRUeXhIUVVGVlFTeEZRVUZsUnl4SFFVRkJRU3hGUVVGQlFTeEhRVU40UTBFc1JVRkJVVWdpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5dFlYUm9MV1p5YjNWdVpDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9TWF0aC5zaWdufHxmdW5jdGlvbihuKXtyZXR1cm4gMD09KG49K24pfHxuIT1uP246bjwwPy0xOjF9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dFlYUm9MWE5wWjI0dWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWsxaGRHZ2lMQ0p6YVdkdUlpd2llQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEU5QlFVOURMRkZCUVZWRExFdEJRVXRETEUxQlFWRXNVMEZCWTBNc1IwRkZNVU1zVDBGQmJVSXNTVUZCV0VFc1IwRkJTMEVzU1VGQlYwRXNSMEZCUzBFc1JVRkJTVUVzUlVGQlNVRXNSVUZCU1N4SFFVRkxMRVZCUVVraUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOXRZWFJvTFhOcFoyNHVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPU1hdGgubG9nMXB8fGZ1bmN0aW9uKGUpe3JldHVybihlPStlKT4tMWUtOCYmZTwxZS04P2UtZSplLzI6TWF0aC5sb2coMStlKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl0WVhSb0xXeHZaekZ3TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pOWVhSb0lpd2liRzluTVhBaUxDSjRJaXdpYkc5bklsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFVRXNUMEZCVDBNc1VVRkJWVU1zUzBGQlMwTXNUMEZCVXl4VFFVRmxReXhIUVVNMVF5eFBRVUZSUVN4SFFVRkxRU3hKUVVGTkxFMUJRVkZCTEVWQlFVa3NTMEZCVDBFc1JVRkJTVUVzUlVGQlNVRXNSVUZCU1N4RlFVRkpSaXhMUVVGTFJ5eEpRVUZKTEVWQlFVbEVJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYldGMGFDMXNiMmN4Y0M1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1NYXRoLnNjYWxlfHxmdW5jdGlvbihlLHQsbixhLGwpe3JldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aHx8ZSE9ZXx8dCE9dHx8biE9bnx8YSE9YXx8bCE9bD9OYU46ZT09PTEvMHx8ZT09PS0xLzA/ZTooZS10KSoobC1hKS8obi10KSthfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXRZWFJvTFhOallXeGxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSk5ZWFJvSWl3aWMyTmhiR1VpTENKNElpd2lhVzVNYjNjaUxDSnBia2hwWjJnaUxDSnZkWFJNYjNjaUxDSnZkWFJJYVdkb0lpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpVG1GT0lpd2lTVzVtYVc1cGRIa2lYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJRU3hQUVVGUFF5eFJRVUZWUXl4TFFVRkxReXhQUVVGVExGTkJRV1ZETEVWQlFVZERMRVZCUVU5RExFVkJRVkZETEVWQlFWRkRMRWRCUTNSRkxFOUJRM1ZDTEVsQlFYSkNReXhWUVVGVlF5eFJRVVZNVGl4SFFVRkxRU3hIUVVWTVF5eEhRVUZUUVN4SFFVVlVReXhIUVVGVlFTeEhRVVZXUXl4SFFVRlZRU3hIUVVWV1F5eEhRVUZYUVN4RlFVTlVSeXhKUVVOTVVDeEpRVUZOVVN4RlFVRkJRU3hIUVVGWlVpeExRVUZCUVN4RlFVRkJRU3hGUVVGM1FrRXNSMEZEZEVOQkxFVkJRVWxETEVsQlFWVkhMRVZCUVZWRUxFbEJRVmRFTEVWQlFWTkVMRWRCUVZORklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZiV0YwYUMxelkyRnNaUzVxY3lKOSIsInZhciBpZD0wLHB4PU1hdGgucmFuZG9tKCk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7cmV0dXJuXCJTeW1ib2woXCIuY29uY2F0KHZvaWQgMD09PW8/XCJcIjpvLFwiKV9cIiwoKytpZCtweCkudG9TdHJpbmcoMzYpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkxYVdRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVdRaUxDSndlQ0lzSWsxaGRHZ2lMQ0p5WVc1a2IyMGlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYTJWNUlpd2lZMjl1WTJGMElpd2lkRzlUZEhKcGJtY2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFZEJRVXNzUlVGRFRFTXNSMEZCUzBNc1MwRkJTME1zVTBGRFpFTXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWl4TlFVRlBMRlZCUVZWRExGbEJRVUZCTEVsQlFVOUVMRVZCUVc5Q0xFZEJRVXRCTEVWQlFVc3NVVUZCVTA0c1IwRkJTME1zU1VGQlNVOHNVMEZCVXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzVnBaQzVxY3lKOSIsInZhciBNYXA9cmVxdWlyZSgxNjMpLCRleHBvcnQ9cmVxdWlyZSgzNiksc2hhcmVkPXJlcXVpcmUoMTA1KShcIm1ldGFkYXRhXCIpLHN0b3JlPXNoYXJlZC5zdG9yZXx8KHNoYXJlZC5zdG9yZT1uZXcocmVxdWlyZSgyNzApKSksZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcD1mdW5jdGlvbihlLHQscil7dmFyIGE9c3RvcmUuZ2V0KGUpO2lmKCFhKXtpZighcilyZXR1cm47c3RvcmUuc2V0KGUsYT1uZXcgTWFwKX12YXIgbz1hLmdldCh0KTtpZighbyl7aWYoIXIpcmV0dXJuO2Euc2V0KHQsbz1uZXcgTWFwKX1yZXR1cm4gb307bW9kdWxlLmV4cG9ydHM9e3N0b3JlOnN0b3JlLG1hcDpnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLGhhczpmdW5jdGlvbihlLHQscil7dmFyIGE9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0LHIsITEpO3JldHVybiB2b2lkIDAhPT1hJiZhLmhhcyhlKX0sZ2V0OmZ1bmN0aW9uKGUsdCxyKXt2YXIgYT1nZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHQsciwhMSk7cmV0dXJuIHZvaWQgMD09PWE/dm9pZCAwOmEuZ2V0KGUpfSxzZXQ6ZnVuY3Rpb24oZSx0LHIsYSl7Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChyLGEsITApLnNldChlLHQpfSxrZXlzOmZ1bmN0aW9uKGUsdCl7dmFyIHI9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChlLHQsITEpLGE9W107cmV0dXJuIHImJnIuZm9yRWFjaChmdW5jdGlvbihlLHQpe2EucHVzaCh0KX0pLGF9LGtleTpmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZXx8XCJzeW1ib2xcIj09dHlwZW9mIGU/ZTpTdHJpbmcoZSl9LGV4cDpmdW5jdGlvbihlKXskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIixlKX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl0WlhSaFpHRjBZUzVxY3lKZExDSnVZVzFsY3lJNld5Sk5ZWEFpTENKeVpYRjFhWEpsSWl3aUpHVjRjRzl5ZENJc0luTm9ZWEpsWkNJc0luTjBiM0psSWl3aVoyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ0lzSW5SaGNtZGxkQ0lzSW5SaGNtZGxkRXRsZVNJc0ltTnlaV0YwWlNJc0luUmhjbWRsZEUxbGRHRmtZWFJoSWl3aVoyVjBJaXdpYzJWMElpd2lhMlY1VFdWMFlXUmhkR0VpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWJXRndJaXdpYUdGeklpd2lUV1YwWVdSaGRHRkxaWGtpTENKUElpd2lVQ0lzSW0xbGRHRmtZWFJoVFdGd0lpd2lUV1YwWVdSaGRHRldZV3gxWlNJc0ltdGxlWE1pTENKbWIzSkZZV05vSWl3aVh5SXNJbXRsZVNJc0luQjFjMmdpTENKcGRDSXNJbE4wY21sdVp5SXNJbVY0Y0NJc0lsTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFZEJRVUZCTEVOQlFVMURMRTlCUVVGQkxFTkJRVkVzVjBGQlFTeERRVUZCTEVOQlEyUkRMRTlCUVVGQkxFTkJRVlZFTEU5QlFVRkJMRU5CUVZFc1YwRkJRU3hEUVVGQkxFTkJRMnhDUlN4TlFVRkJRU3hEUVVGVFJpeFBRVUZCUVN4RFFVRlJMRmRCUVVFc1EwRkJVa0VzUTBGQmNVSXNWVUZCUVN4RFFVRkJMRU5CUXpsQ1J5eExRVUZCUVN4RFFVRlJSQ3hOUVVGQlFTeERRVUZQUXl4TFFVRkJRU3hIUVVGVlJDeE5RVUZCUVN4RFFVRlBReXhMUVVGQlFTeERRVUZSTEVsQlFVdElMRTlCUVVGQkxFTkJRVkVzWjBKQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkZja1JKTEhOQ1FVRkJRU3hEUVVGNVFpeFRRVUZWUXl4RFFVRkJRU3hEUVVGUlF5eERRVUZCUVN4RFFVRlhReXhEUVVGQlFTeERRVUZCUVN4RFFVTjRSQ3hKUVVGSlF5eERRVUZCUVN4RFFVRnBRa3dzUzBGQlFVRXNRMEZCVFUwc1IwRkJRVUVzUTBGQlNVb3NRMEZCUVVFc1EwRkJRVUVzUTBGREwwSXNSMEZCUVN4RFFVRkxSeXhEUVVGQlFTeERRVUZuUWl4RFFVTnVRaXhIUVVGQkxFTkJRVXRFTEVOQlFVRkJMRU5CUVZFc1QwRkRZa29zUzBGQlFVRXNRMEZCVFU4c1IwRkJRVUVzUTBGQlNVd3NRMEZCUVVFc1EwRkJVVWNzUTBGQlFVRXNRMEZCYVVJc1NVRkJTVlFzUjBGQlFVRXNRMEZCUVVFc1EwRkZla01zU1VGQlNWa3NRMEZCUVVFc1EwRkJZMGdzUTBGQlFVRXNRMEZCWlVNc1IwRkJRVUVzUTBGQlNVZ3NRMEZCUVVFc1EwRkJRVUVzUTBGRGNrTXNSMEZCUVN4RFFVRkxTeXhEUVVGQlFTeERRVUZoTEVOQlEyaENMRWRCUVVFc1EwRkJTMG9zUTBGQlFVRXNRMEZCVVN4UFFVTmlReXhEUVVGQlFTeERRVUZsUlN4SFFVRkJRU3hEUVVGSlNpeERRVUZCUVN4RFFVRlhTeXhEUVVGQlFTeERRVUZqTEVsQlFVbGFMRWRCUVVGQkxFTkJRVUZCTEVOQlEyaEVMRTlCUVU5WkxFTkJRVUZCTEVOQlFVRkJMRU5CTUVKWVF5eE5RVUZCUVN4RFFVRlBReXhQUVVGQlFTeERRVUZWTEVOQlEyWldMRXRCUVVGQkxFTkJRVTlCTEV0QlFVRkJMRU5CUTFCWExFZEJRVUZCTEVOQlFVdFdMSE5DUVVGQlFTeERRVU5NVnl4SFFVRkJRU3hEUVROQ01rSXNVMEZCVlVNc1EwRkJRVUVzUTBGQllVTXNRMEZCUVVFc1EwRkJSME1zUTBGQlFVRXNRMEZCUVVFc1EwRkRja1FzU1VGQlNVTXNRMEZCUVVFc1EwRkJZMllzYzBKQlFVRkJMRU5CUVhWQ1lTeERRVUZCUVN4RFFVRkhReXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVTTFReXhQUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZQUXl4RFFVRkJRU3hGUVVGdlEwRXNRMEZCUVVFc1EwRkJXVW9zUjBGQlFVRXNRMEZCU1VNc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRXdRak5FVUN4SFFVRkJRU3hEUVhoQ01rSXNVMEZCVlU4c1EwRkJRVUVzUTBGQllVTXNRMEZCUVVFc1EwRkJSME1zUTBGQlFVRXNRMEZCUVVFc1EwRkRja1FzU1VGQlNVTXNRMEZCUVVFc1EwRkJZMllzYzBKQlFVRkJMRU5CUVhWQ1lTeERRVUZCUVN4RFFVRkhReXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVTTFReXhQUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZQUXl4RFFVRkJRU3hEUVVGQlFTeExRVUZCUVN4RFFVRkJRU3hEUVVGM1EwRXNRMEZCUVVFc1EwRkJXVllzUjBGQlFVRXNRMEZCU1U4c1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRjFRaTlFVGl4SFFVRkJRU3hEUVhKQ09FSXNVMEZCVlUwc1EwRkJRVUVzUTBGQllVa3NRMEZCUVVFc1EwRkJaVWdzUTBGQlFVRXNRMEZCUjBNc1EwRkJRVUVzUTBGQlFVRXNRMEZEZGtWa0xITkNRVUZCUVN4RFFVRjFRbUVzUTBGQlFVRXNRMEZCUjBNc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCVTFJc1IwRkJRVUVzUTBGQlNVMHNRMEZCUVVFc1EwRkJZVWtzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGeFFuQkVReXhKUVVGQlFTeERRVzVDTkVJc1UwRkJWV2hDTEVOQlFVRkJMRU5CUVZGRExFTkJRVUZCTEVOQlFVRkJMRU5CUXpsRExFbEJRVWxoTEVOQlFVRkJMRU5CUVdObUxITkNRVUZCUVN4RFFVRjFRa01zUTBGQlFVRXNRMEZCVVVNc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZETjBObExFTkJRVUZCTEVOQlFVOHNSVUZCUVN4RFFVVllMRTlCUkVsR0xFTkJRVUZCTEVWQlFXRkJMRU5CUVVGQkxFTkJRVmxITEU5QlFVRkJMRU5CUVZFc1UwRkJWVU1zUTBGQlFVRXNRMEZCUjBNc1EwRkJRVUVzUTBGQlFVRXNRMEZCVDBnc1EwRkJRVUVzUTBGQlMwa3NTVUZCUVVFc1EwRkJTMFFzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZETlVSSUxFTkJRVUZCTEVOQlFVRkJMRU5CWjBKUVJ5eEhRVUZCUVN4RFFXUmpMRk5CUVZWRkxFTkJRVUZCTEVOQlFVRkJMRU5CUTNoQ0xFOUJRVUVzUzBGQlFTeERRVUZCTEVkQlFVOUJMRU5CUVVGQkxFVkJRV2xETEZGQlFVRXNSVUZCUVN4UFFVRk9RU3hEUVVGQlFTeERRVUZwUWtFc1EwRkJRVUVzUTBGQlMwTXNUVUZCUVVFc1EwRkJUMFFzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGakwwUkZMRWRCUVVGQkxFTkJXbEVzVTBGQlZWZ3NRMEZCUVVFc1EwRkJRVUVzUTBGRGJFSm9RaXhQUVVGQlFTeERRVUZSUVN4UFFVRkJRU3hEUVVGUk5FSXNRMEZCUVVFc1EwRkJSeXhUUVVGQkxFTkJRVmRhTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFgwPSIsInZhciBjb3JlPXJlcXVpcmUoMjYpLGdsb2JhbD1yZXF1aXJlKDQzKSxzdG9yZT1nbG9iYWxbXCJfX2NvcmUtanNfc2hhcmVkX19cIl18fChnbG9iYWxbXCJfX2NvcmUtanNfc2hhcmVkX19cIl09e30pOyhtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLGUpe3JldHVybiBzdG9yZVtyXXx8KHN0b3JlW3JdPXZvaWQgMCE9PWU/ZTp7fSl9KShcInZlcnNpb25zXCIsW10pLnB1c2goe3ZlcnNpb246Y29yZS52ZXJzaW9uLG1vZGU6cmVxdWlyZSg2Mik/XCJwdXJlXCI6XCJnbG9iYWxcIixjb3B5cmlnaHQ6XCLCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpXCJ9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXphR0Z5WldRdWFuTWlYU3dpYm1GdFpYTWlPbHNpWTI5eVpTSXNJbkpsY1hWcGNtVWlMQ0puYkc5aVlXd2lMQ0p6ZEc5eVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pyWlhraUxDSjJZV3gxWlNJc0luQjFjMmdpTENKMlpYSnphVzl1SWl3aWJXOWtaU0lzSW1OdmNIbHlhV2RvZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzUzBGQlQwTXNVVUZCVVN4WFFVTm1ReXhQUVVGVFJDeFJRVUZSTEdGQlJXcENSU3hOUVVGUlJDeFBRVVJETEhkQ1FVTnJRa0VzVDBGRWJFSXNjMEpCUTIxRExFdEJSUzlEUlN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVWQlFVdERMRWRCUXk5Q0xFOUJRVTlLTEUxQlFVMUhMRXRCUVZOSUxFMUJRVTFITEZGQlFVRkJMRWxCUVU5RExFVkJRWE5DUVN4RlFVRlJMRTFCUTJoRkxGZEJRVmtzU1VGQlNVTXNTMEZCU3l4RFFVTjBRa01zVVVGQlUxUXNTMEZCUzFNc1VVRkRaRU1zUzBGQlRWUXNVVUZCVVN4alFVRm5RaXhQUVVGVExGTkJRM1pEVlN4VlFVRlhJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYzJoaGNtVmtMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBzdHJvbmc9cmVxdWlyZSgyMiksdmFsaWRhdGU9cmVxdWlyZSgxMjgpO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoMjUpKFwiTWFwXCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyxhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSx7Z2V0OmZ1bmN0aW9uKHQpe3ZhciBlPXN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLFwiTWFwXCIpLHQpO3JldHVybiBlJiZlLnZ9LHNldDpmdW5jdGlvbih0LGUpe3JldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsXCJNYXBcIiksMD09PXQ/MDp0LGUpfX0sc3Ryb25nLCEwKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhBdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNSeWIyNW5JaXdpY21WeGRXbHlaU0lzSW5aaGJHbGtZWFJsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltZGxkQ0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKclpYa2lMQ0psYm5SeWVTSXNJbWRsZEVWdWRISjVJaXdpZGlJc0luTmxkQ0lzSW5aaGJIVmxJaXdpWkdWbUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRTlCUVZORExGRkJRVkVzZDBKQlEycENReXhUUVVGWFJDeFJRVUZSTERCQ1FVbDJRa1VzVDBGQlQwTXNVVUZCVlVnc1VVRkJVU3huUWtGQlVrRXNRMEZJVUN4TlFVZHhReXhUUVVGVlNTeEhRVU4yUkN4UFFVRlBMRmRCUVdsQ0xFOUJRVTlCTEVWQlFVbERMRXRCUVUxRExGVkJRVlZETEU5QlFWTXNSVUZCU1VRc1ZVRkJWU3hSUVVGQkxFdEJRM3BGTEVOQlJVUkdMRWxCUVVzc1UwRkJZVWtzUjBGRGFFSXNTVUZCU1VNc1JVRkJVVllzVDBGQlQxY3NVMEZCVTFRc1UwRkJVMGtzUzBGU0wwSXNUMEZSTWtOSExFZEJRMnBFTEU5QlFVOURMRWRCUVZOQkxFVkJRVTFGTEVkQlIzaENReXhKUVVGTExGTkJRV0ZLTEVWQlFVdExMRWRCUTNKQ0xFOUJRVTlrTEU5QlFVOWxMRWxCUVVsaUxGTkJRVk5KTEV0QlluSkNMRTlCWVhsRExFbEJRVkpITEVWQlFWa3NSVUZCU1VFc1JVRkJTMHNzUzBGRk4wUmtMRkZCUVVGQklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1YldGd0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEludGVybmFsTWFwLGVhY2g9cmVxdWlyZSgxNSkoMCkscmVkZWZpbmU9cmVxdWlyZSg5NCksbWV0YT1yZXF1aXJlKDY4KSxhc3NpZ249cmVxdWlyZSg3Miksd2Vhaz1yZXF1aXJlKDI0KSxpc09iamVjdD1yZXF1aXJlKDU0KSxmYWlscz1yZXF1aXJlKDM4KSx2YWxpZGF0ZT1yZXF1aXJlKDEyOCksZ2V0V2Vhaz1tZXRhLmdldFdlYWssaXNFeHRlbnNpYmxlPU9iamVjdC5pc0V4dGVuc2libGUsdW5jYXVnaHRGcm96ZW5TdG9yZT13ZWFrLnVmc3RvcmUsdG1wPXt9LHdyYXBwZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcyxhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSxtZXRob2RzPXtnZXQ6ZnVuY3Rpb24oZSl7aWYoaXNPYmplY3QoZSkpe3ZhciB0PWdldFdlYWsoZSk7cmV0dXJuITA9PT10P3VuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcyxcIldlYWtNYXBcIikpLmdldChlKTp0P3RbdGhpcy5faV06dm9pZCAwfX0sc2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsXCJXZWFrTWFwXCIpLGUsdCl9fSwkV2Vha01hcD1tb2R1bGUuZXhwb3J0cz1yZXF1aXJlKDI1KShcIldlYWtNYXBcIix3cmFwcGVyLG1ldGhvZHMsd2VhaywhMCwhMCk7ZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9KG5ldyAkV2Vha01hcCkuc2V0KChPYmplY3QuZnJlZXplfHxPYmplY3QpKHRtcCksNykuZ2V0KHRtcCl9KSYmKGFzc2lnbigoSW50ZXJuYWxNYXA9d2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLFwiV2Vha01hcFwiKSkucHJvdG90eXBlLG1ldGhvZHMpLG1ldGEuTkVFRD0hMCxlYWNoKFtcImRlbGV0ZVwiLFwiaGFzXCIsXCJnZXRcIixcInNldFwiXSxmdW5jdGlvbihlKXt2YXIgdD0kV2Vha01hcC5wcm90b3R5cGUsYT10W2VdO3JlZGVmaW5lKHQsZSxmdW5jdGlvbih0LHIpe2lmKGlzT2JqZWN0KHQpJiYhaXNFeHRlbnNpYmxlKHQpKXt0aGlzLl9mfHwodGhpcy5fZj1uZXcgSW50ZXJuYWxNYXApO3ZhciBpPXRoaXMuX2ZbZV0odCxyKTtyZXR1cm5cInNldFwiPT1lP3RoaXM6aX1yZXR1cm4gYS5jYWxsKHRoaXMsdCxyKX0pfSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTNaV0ZyTFcxaGNDNXFjeUpkTENKdVlXMWxjeUk2V3lKSmJuUmxjbTVoYkUxaGNDSXNJbVZoWTJnaUxDSnlaWEYxYVhKbElpd2ljbVZrWldacGJtVWlMQ0p0WlhSaElpd2lZWE56YVdkdUlpd2lkMlZoYXlJc0ltbHpUMkpxWldOMElpd2labUZwYkhNaUxDSjJZV3hwWkdGMFpTSXNJbWRsZEZkbFlXc2lMQ0pwYzBWNGRHVnVjMmxpYkdVaUxDSlBZbXBsWTNRaUxDSjFibU5oZFdkb2RFWnliM3BsYmxOMGIzSmxJaXdpZFdaemRHOXlaU0lzSW5SdGNDSXNJbmR5WVhCd1pYSWlMQ0puWlhRaUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2liV1YwYUc5a2N5SXNJbXRsZVNJc0ltUmhkR0VpTENKZmFTSXNJbk5sZENJc0luWmhiSFZsSWl3aVpHVm1JaXdpSkZkbFlXdE5ZWEFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpuSmxaWHBsSWl3aVoyVjBRMjl1YzNSeWRXTjBiM0lpTENKd2NtOTBiM1I1Y0dVaUxDSk9SVVZFSWl3aWNISnZkRzhpTENKdFpYUm9iMlFpTENKaElpd2lZaUlzSWw5bUlpd2ljbVZ6ZFd4MElpd2lZMkZzYkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVdGSlFTeFpRV0pCUXl4TFFVRlBReXhSUVVGUkxHMUNRVUZTUVN4RFFVRTBRaXhIUVVOdVEwTXNVMEZCVjBRc1VVRkJVU3hsUVVOdVFrVXNTMEZCVDBZc1VVRkJVU3hYUVVObVJ5eFBRVUZUU0N4UlFVRlJMRzlDUVVOcVFra3NTMEZCVDBvc1VVRkJVU3h6UWtGRFprc3NVMEZCVjB3c1VVRkJVU3huUWtGRGJrSk5MRTFCUVZGT0xGRkJRVkVzV1VGRGFFSlBMRk5CUVZkUUxGRkJRVkVzTUVKQlJXNUNVU3hSUVVGVlRpeExRVUZMVFN4UlFVTm1ReXhoUVVGbFF5eFBRVUZQUkN4aFFVTjBRa1VzYjBKQlFYTkNVQ3hMUVVGTFVTeFJRVU16UWtNc1NVRkJUU3hIUVVkT1F5eFJRVUZWTEZOQlFWVkRMRWRCUTNSQ0xFOUJRVThzVjBGRFRDeFBRVUZQUVN4RlFVRkpReXhMUVVGTlF5eFZRVUZWUXl4UFFVRlRMRVZCUVVsRUxGVkJRVlVzVVVGQlFTeExRVWxzUkVVc1VVRkJWU3hEUVVWYVNpeEpRVUZMTEZOQlFXRkxMRWRCUTJoQ0xFZEJRVWxtTEZOQlFWTmxMRWRCUVUwc1EwRkRha0lzU1VGQlNVTXNSVUZCVDJJc1VVRkJVVmtzUjBGRGJrSXNUMEZCUVN4SlFVRkpReXhGUVVGelFsWXNiMEpCUVc5Q1NpeFRRVUZUVXl4TFFXeENPVU1zV1VGclFpdEVSQ3hKUVVGSlN5eEhRVU55UlVNc1JVRkJUMEVzUlVGQlMwd3NTMEZCUzAwc1UwRkJRVUVzU1VGSk5VSkRMRWxCUVVzc1UwRkJZVWdzUlVGQlMwa3NSMEZEY2tJc1QwRkJUM0JDTEV0QlFVdHhRaXhKUVVGSmJFSXNVMEZCVTFNc1MwRjRRbVFzVjBGM1FpdENTU3hGUVVGTFNTeExRVXN2UTBVc1UwRkJWME1zVDBGQlQwTXNVVUZCVlRWQ0xGRkJRVkVzWjBKQlFWSkJMRU5CTjBKcVFpeFZRVFpDYjBSakxGRkJRVk5MTEZGQlFWTm1MRTFCUVVGQkxFZEJRVTBzUjBGSGRrWkZMRTFCUVUwc1YwRkJZeXhQUVVGNVJTeEpRVUZCTEVsQlFUbEViMElzVlVGQlYwZ3NTMEZCUzJJc1QwRkJUMjFDTEZGQlFWVnVRaXhSUVVGUlJ5eExRVUZOTEVkQlFVZEZMRWxCUVVsR0xGTkJSWFpHVml4UlFVUkJUQ3haUVVGalRTeExRVUZMTUVJc1pVRkJaV2hDTEZGQmFrTnlRaXhaUVd0RFRXbENMRlZCUVZkYUxGTkJRemxDYWtJc1MwRkJTemhDTEUxQlFVRkJMRVZCUTB4cVF5eExRVUZMTEVOQlFVTXNVMEZCVlN4TlFVRlBMRTFCUVU4c1QwRkJVU3hUUVVGVmNVSXNSMEZET1VNc1NVRkJTV0VzUlVGQlVWQXNVMEZCVTBzc1ZVRkRha0pITEVWQlFWTkVMRVZCUVUxaUxFZEJRMjVDYmtJc1UwRkJVMmRETEVWQlFVOWlMRVZCUVVzc1UwRkJWV1VzUlVGQlIwTXNSMEZGYUVNc1IwRkJTUzlDTEZOQlFWTTRRaXhMUVVGUE1VSXNZVUZCWVRCQ0xFZEJRVWtzUTBGRE9VSnVRaXhMUVVGTGNVSXNTMEZCU1hKQ0xFdEJRVXR4UWl4SFFVRkxMRWxCUVVsMlF5eGhRVU0xUWl4SlFVRkpkME1zUlVGQlUzUkNMRXRCUVV0eFFpeEhRVUZIYWtJc1IwRkJTMlVzUlVGQlIwTXNSMEZETjBJc1RVRkJZeXhQUVVGUWFFSXNSVUZCWlVvc1MwRkJUM05DTEVWQlJUZENMRTlCUVU5S0xFVkJRVTlMTEV0QlFVdDJRaXhMUVVGTmJVSXNSVUZCUjBNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTUzWldGckxXMWhjQzVxY3lKOSIsInZhciBnbG9iYWw9cmVxdWlyZSg0MyksbWFjcm90YXNrPXJlcXVpcmUoMTE1KS5zZXQsT2JzZXJ2ZXI9Z2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXJ8fGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLHByb2Nlc3M9Z2xvYmFsLnByb2Nlc3MsUHJvbWlzZT1nbG9iYWwuUHJvbWlzZSxpc05vZGU9XCJwcm9jZXNzXCI9PXJlcXVpcmUoMjEpKHByb2Nlc3MpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGUsbyxyLGE9ZnVuY3Rpb24oKXt2YXIgYSxzO2Zvcihpc05vZGUmJihhPXByb2Nlc3MuZG9tYWluKSYmYS5leGl0KCk7ZTspe3M9ZS5mbixlPWUubmV4dDt0cnl7cygpfWNhdGNoKGEpe3Rocm93IGU/cigpOm89dm9pZCAwLGF9fW89dm9pZCAwLGEmJmEuZW50ZXIoKX07aWYoaXNOb2RlKXI9ZnVuY3Rpb24oKXtwcm9jZXNzLm5leHRUaWNrKGEpfTtlbHNlIGlmKCFPYnNlcnZlcnx8Z2xvYmFsLm5hdmlnYXRvciYmZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKWlmKFByb21pc2UmJlByb21pc2UucmVzb2x2ZSl7dmFyIHM9UHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7cj1mdW5jdGlvbigpe3MudGhlbihhKX19ZWxzZSByPWZ1bmN0aW9uKCl7bWFjcm90YXNrLmNhbGwoZ2xvYmFsLGEpfTtlbHNle3ZhciB0PSEwLGk9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7bmV3IE9ic2VydmVyKGEpLm9ic2VydmUoaSx7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXtpLmRhdGE9dD0hdH19cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBzPXtmbjphLG5leHQ6dm9pZCAwfTtvJiYoby5uZXh0PXMpLGV8fChlPXMscigpKSxvPXN9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXRhV055YjNSaGMyc3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWNtVnhkV2x5WlNJc0ltMWhZM0p2ZEdGemF5SXNJbk5sZENJc0lrOWljMlZ5ZG1WeUlpd2lUWFYwWVhScGIyNVBZbk5sY25abGNpSXNJbGRsWWt0cGRFMTFkR0YwYVc5dVQySnpaWEoyWlhJaUxDSndjbTlqWlhOeklpd2lVSEp2YldselpTSXNJbWx6VG05a1pTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pvWldGa0lpd2liR0Z6ZENJc0ltNXZkR2xtZVNJc0ltWnNkWE5vSWl3aWNHRnlaVzUwSWl3aVptNGlMQ0prYjIxaGFXNGlMQ0psZUdsMElpd2libVY0ZENJc0ltVWlMQ0psYm5SbGNpSXNJbTVsZUhSVWFXTnJJaXdpYm1GMmFXZGhkRzl5SWl3aWMzUmhibVJoYkc5dVpTSXNJbkpsYzI5c2RtVWlMQ0p3Y205dGFYTmxJaXdpZEdobGJpSXNJbU5oYkd3aUxDSjBiMmRuYkdVaUxDSnViMlJsSWl3aVpHOWpkVzFsYm5RaUxDSmpjbVZoZEdWVVpYaDBUbTlrWlNJc0ltOWljMlZ5ZG1VaUxDSmphR0Z5WVdOMFpYSkVZWFJoSWl3aVpHRjBZU0lzSW5SaGMyc2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFOUJRVk5ETEZGQlFWRXNZVUZEYWtKRExGVkJRVmxFTEZGQlFWRXNWMEZCVjBVc1NVRkRMMEpETEZOQlFWZEtMRTlCUVU5TExHdENRVUZ2UWt3c1QwRkJUMDBzZFVKQlF6ZERReXhSUVVGVlVDeFBRVUZQVHl4UlFVTnFRa01zVVVGQlZWSXNUMEZCVDFFc1VVRkRha0pETEU5QlFYVkRMRmRCUVRsQ1VpeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q1RTeFRRVVV2UWtjc1QwRkJUME1zVVVGQlZTeFhRVU5tTEVsQlFVbERMRVZCUVUxRExFVkJRVTFETEVWQlJWcERMRVZCUVZFc1YwRkRWaXhKUVVGSlF5eEZRVUZSUXl4RlFVVmFMRWxCUkVsU0xGTkJRVmRQTEVWQlFWTlVMRkZCUVZGWExGTkJRVk5HTEVWQlFVOUhMRTlCUTNwRFVDeEhRVUZOTEVOQlExaExMRVZCUVV0TUxFVkJRVXRMTEVkQlExWk1MRVZCUVU5QkxFVkJRVXRSTEV0QlExb3NTVUZEUlVnc1NVRkRRU3hOUVVGUFNTeEhRVWRRTEUxQlJrbFVMRVZCUVUxRkxFbEJRMHhFTEU5QlFVRkJMRVZCUTBOUkxFZEJSVkpTTEU5QlFVRkJMRVZCUTBWSExFZEJRVkZCTEVWQlFVOU5MRk5CU1hKQ0xFZEJRVWxpTEU5QlEwWkxMRVZCUVZNc1YwRkRVRkFzVVVGQlVXZENMRk5CUVZOU0xGTkJSMlFzU1VGQlNWZ3NWVUZCWTBvc1QwRkJUM2RDTEZkQlFXRjRRaXhQUVVGUGQwSXNWVUZCVlVNc1YwRlJka1FzUjBGQlNXcENMRk5CUVZkQkxGRkJRVkZyUWl4UlFVRlRMRU5CUlhKRExFbEJRVWxETEVWQlFWVnVRaXhSUVVGUmEwSXNZVUZCUVVFc1IwRkRkRUphTEVWQlFWTXNWMEZEVUdFc1JVRkJVVU1zUzBGQlMySXNVMEZUWmtRc1JVRkJVeXhYUVVWUVdpeFZRVUZWTWtJc1MwRkJTemRDTEU5QlFWRmxMRkZCZGtKblJDeERRVU42UlN4SlFVRkpaU3hIUVVGQlFTeEZRVU5CUXl4RlFVRlBReXhUUVVGVFF5eGxRVUZsTEVsQlEyNURMRWxCUVVrM1FpeFRRVUZUVnl4SFFVRlBiVUlzVVVGQlVVZ3NSVUZCVFN4RFFVRkZTU3hsUVVGQlFTeEpRVU53UTNKQ0xFVkJRVk1zVjBGRFVHbENMRVZCUVV0TExFdEJRVTlPTEVkQlFWVkJMRWRCYzBJeFFpeFBRVUZQTEZOQlFWVmlMRWRCUTJZc1NVRkJTVzlDTEVWQlFVOHNRMEZCUlhCQ0xFZEJRVWxCTEVWQlFVbEhMRlZCUVVGQkxFZEJRMnBDVUN4SlFVRk5RU3hGUVVGTFR5eExRVUZQYVVJc1IwRkRha0o2UWl4SlFVTklRU3hGUVVGUGVVSXNSVUZEVUhaQ0xFdEJRMEZFTEVWQlFVOTNRaUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDIxcFkzSnZkR0Z6YXk1cWN5SjkiLCJ2YXIgZGVmZXIsY2hhbm5lbCxwb3J0LGN0eD1yZXF1aXJlKDI4KSxpbnZva2U9cmVxdWlyZSg0OSksaHRtbD1yZXF1aXJlKDQ2KSxjZWw9cmVxdWlyZSgzMyksZ2xvYmFsPXJlcXVpcmUoNDMpLHByb2Nlc3M9Z2xvYmFsLnByb2Nlc3Msc2V0VGFzaz1nbG9iYWwuc2V0SW1tZWRpYXRlLGNsZWFyVGFzaz1nbG9iYWwuY2xlYXJJbW1lZGlhdGUsTWVzc2FnZUNoYW5uZWw9Z2xvYmFsLk1lc3NhZ2VDaGFubmVsLERpc3BhdGNoPWdsb2JhbC5EaXNwYXRjaCxjb3VudGVyPTAscXVldWU9e30scnVuPWZ1bmN0aW9uKCl7dmFyIGU9K3RoaXM7aWYocXVldWUuaGFzT3duUHJvcGVydHkoZSkpe3ZhciB0PXF1ZXVlW2VdO2RlbGV0ZSBxdWV1ZVtlXSx0KCl9fSxsaXN0ZW5lcj1mdW5jdGlvbihlKXtydW4uY2FsbChlLmRhdGEpfTtzZXRUYXNrJiZjbGVhclRhc2t8fChzZXRUYXNrPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTE7YXJndW1lbnRzLmxlbmd0aD5uOyl0LnB1c2goYXJndW1lbnRzW24rK10pO3JldHVybiBxdWV1ZVsrK2NvdW50ZXJdPWZ1bmN0aW9uKCl7aW52b2tlKFwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpGdW5jdGlvbihlKSx0KX0sZGVmZXIoY291bnRlciksY291bnRlcn0sY2xlYXJUYXNrPWZ1bmN0aW9uKGUpe2RlbGV0ZSBxdWV1ZVtlXX0sXCJwcm9jZXNzXCI9PXJlcXVpcmUoMjEpKHByb2Nlc3MpP2RlZmVyPWZ1bmN0aW9uKGUpe3Byb2Nlc3MubmV4dFRpY2soY3R4KHJ1bixlLDEpKX06RGlzcGF0Y2gmJkRpc3BhdGNoLm5vdz9kZWZlcj1mdW5jdGlvbihlKXtEaXNwYXRjaC5ub3coY3R4KHJ1bixlLDEpKX06TWVzc2FnZUNoYW5uZWw/KHBvcnQ9KGNoYW5uZWw9bmV3IE1lc3NhZ2VDaGFubmVsKS5wb3J0MixjaGFubmVsLnBvcnQxLm9ubWVzc2FnZT1saXN0ZW5lcixkZWZlcj1jdHgocG9ydC5wb3N0TWVzc2FnZSxwb3J0LDEpKTpnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciYmXCJmdW5jdGlvblwiPT10eXBlb2YgcG9zdE1lc3NhZ2UmJiFnbG9iYWwuaW1wb3J0U2NyaXB0cz8oZGVmZXI9ZnVuY3Rpb24oZSl7Z2xvYmFsLnBvc3RNZXNzYWdlKGUrXCJcIixcIipcIil9LGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGxpc3RlbmVyLCExKSk6ZGVmZXI9XCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIGNlbChcInNjcmlwdFwiKT9mdW5jdGlvbihlKXtodG1sLmFwcGVuZENoaWxkKGNlbChcInNjcmlwdFwiKSkub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aHRtbC5yZW1vdmVDaGlsZCh0aGlzKSxydW4uY2FsbChlKX19OmZ1bmN0aW9uKGUpe3NldFRpbWVvdXQoY3R4KHJ1bixlLDEpLDApfSksbW9kdWxlLmV4cG9ydHM9e3NldDpzZXRUYXNrLGNsZWFyOmNsZWFyVGFza307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBZWE5yTG1weklsMHNJbTVoYldWeklqcGJJbVJsWm1WeUlpd2lZMmhoYm01bGJDSXNJbkJ2Y25RaUxDSmpkSGdpTENKeVpYRjFhWEpsSWl3aWFXNTJiMnRsSWl3aWFIUnRiQ0lzSW1ObGJDSXNJbWRzYjJKaGJDSXNJbkJ5YjJObGMzTWlMQ0p6WlhSVVlYTnJJaXdpYzJWMFNXMXRaV1JwWVhSbElpd2lZMnhsWVhKVVlYTnJJaXdpWTJ4bFlYSkpiVzFsWkdsaGRHVWlMQ0pOWlhOellXZGxRMmhoYm01bGJDSXNJa1JwYzNCaGRHTm9JaXdpWTI5MWJuUmxjaUlzSW5GMVpYVmxJaXdpY25WdUlpd2lhV1FpTENKMGFHbHpJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0ptYmlJc0lteHBjM1JsYm1WeUlpd2laWFpsYm5RaUxDSmpZV3hzSWl3aVpHRjBZU0lzSW1GeVozTWlMQ0pwSWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2ljSFZ6YUNJc0lrWjFibU4wYVc5dUlpd2libVY0ZEZScFkyc2lMQ0p1YjNjaUxDSndiM0owTWlJc0luQnZjblF4SWl3aWIyNXRaWE56WVdkbElpd2ljRzl6ZEUxbGMzTmhaMlVpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aWFXMXdiM0owVTJOeWFYQjBjeUlzSW1Gd2NHVnVaRU5vYVd4a0lpd2liMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxJaXdpY21WdGIzWmxRMmhwYkdRaUxDSnpaWFJVYVcxbGIzVjBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5ObGRDSXNJbU5zWldGeUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRV0ZKUVN4TFFVRkJRU3hEUVVGUFF5eFBRVUZCUVN4RFFVRlRReXhKUVVGQlFTeERRV0pvUWtNc1IwRkJRVUVzUTBGQlRVTXNUMEZCUVVFc1EwRkJVU3hSUVVGQkxFTkJRVUVzUTBGRFpFTXNUVUZCUVVFc1EwRkJVMFFzVDBGQlFVRXNRMEZCVVN4WFFVRkJMRU5CUVVFc1EwRkRha0pGTEVsQlFVRkJMRU5CUVU5R0xFOUJRVUZCTEVOQlFWRXNVMEZCUVN4RFFVRkJMRU5CUTJaSExFZEJRVUZCTEVOQlFVMUlMRTlCUVVGQkxFTkJRVkVzWlVGQlFTeERRVUZCTEVOQlEyUkpMRTFCUVVGQkxFTkJRVk5LTEU5QlFVRkJMRU5CUVZFc1YwRkJRU3hEUVVGQkxFTkJRMnBDU3l4UFFVRkJRU3hEUVVGVlJDeE5RVUZCUVN4RFFVRlBReXhQUVVGQlFTeERRVU5xUWtNc1QwRkJRVUVzUTBGQlZVWXNUVUZCUVVFc1EwRkJUMGNzV1VGQlFVRXNRMEZEYWtKRExGTkJRVUZCTEVOQlFWbEtMRTFCUVVGQkxFTkJRVTlMTEdOQlFVRkJMRU5CUTI1Q1F5eGpRVUZCUVN4RFFVRnBRazRzVFVGQlFVRXNRMEZCVDAwc1kwRkJRVUVzUTBGRGVFSkRMRkZCUVVGQkxFTkJRVmRRTEUxQlFVRkJMRU5CUVU5UExGRkJRVUZCTEVOQlEyeENReXhQUVVGQlFTeERRVUZWTEVOQlFVRXNRMEZEVmtNc1MwRkJRVUVzUTBGQlVTeEZRVUZCTEVOQlIxSkRMRWRCUVVGQkxFTkJRVTBzVlVGQlFTeERRVU5TTEVsQlFVbERMRU5CUVVGQkxFTkJRVUZCTEVOQlFVMURMRWxCUVVGQkxFTkJSVllzUjBGQlNVZ3NTMEZCUVVFc1EwRkJUVWtzWTBGQlFVRXNRMEZCWlVZc1EwRkJRVUVzUTBGQlFVRXNRMEZCU3l4RFFVTTFRaXhKUVVGSlJ5eERRVUZCUVN4RFFVRkxUQ3hMUVVGQlFTeERRVUZOUlN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4UFFVTlNSaXhMUVVGQlFTeERRVUZOUlN4RFFVRkJRU3hEUVVGQlFTeERRVU5pUnl4RFFVRkJRU3hGUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkQlF5eFJRVUZCUVN4RFFVRlhMRk5CUVZWRExFTkJRVUZCTEVOQlFVRkJMRU5CUTNaQ1RpeEhRVUZCUVN4RFFVRkpUeXhKUVVGQlFTeERRVUZMUkN4RFFVRkJRU3hEUVVGTlJTeEpRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWRhYUVJc1QwRkJRVUVzUlVGQldVVXNVMEZCUVVFc1IwRkRaa1lzVDBGQlFVRXNRMEZCVlN4VFFVRnpRbGtzUTBGQlFVRXNRMEZCUVVFc1EwRkhPVUlzU1VGR1FTeEpRVUZKU3l4RFFVRkJRU3hEUVVGUExFVkJRVUVzUTBGRFVFTXNRMEZCUVVFc1EwRkJTU3hEUVVGQkxFTkJRMFJETEZOQlFVRkJMRU5CUVZWRExFMUJRVUZCTEVOQlFWTkdMRU5CUVVGQkxFVkJRVWRFTEVOQlFVRkJMRU5CUVV0SkxFbEJRVUZCTEVOQlFVdEdMRk5CUVVGQkxFTkJRVlZFTEVOQlFVRkJMRVZCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CVFdwRUxFOUJURUZZTEV0QlFVRkJMRU5CUVVGQkxFVkJRVkZFTEU5QlFVRkJMRU5CUVVGQkxFTkJRVmNzVlVGQlFTeERRVVZxUWxnc1RVRkJRVUVzUTBGQmIwSXNWVUZCUVN4RlFVRkJMRTlCUVU1cFFpeERRVUZCUVN4RFFVRnRRa0VzUTBGQlFVRXNRMEZCUzFVc1VVRkJRVUVzUTBGQlUxWXNRMEZCUVVFc1EwRkJRVUVzUTBGQlMwc3NRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZGZEVRelFpeExRVUZCUVN4RFFVRk5aMElzVDBGQlFVRXNRMEZCUVVFc1EwRkRRMEVzVDBGQlFVRXNRMEZCUVVFc1EwRkZWRW9zVTBGQlFVRXNRMEZCV1N4VFFVRjNRazhzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzVDBGRE0wSkdMRXRCUVVGQkxFTkJRVTFGTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIyMUNMRk5CUVVFc1JVRkJPVUptTEU5QlFVRkJMRU5CUVZFc1VVRkJRU3hEUVVGU1FTeERRVUZyUWtzc1QwRkJRVUVzUTBGQlFVRXNRMEZEY0VKVUxFdEJRVUZCTEVOQlFWRXNVMEZCVlcxQ0xFTkJRVUZCTEVOQlFVRkJMRU5CUTJoQ1ZpeFBRVUZCUVN4RFFVRlJkMElzVVVGQlFVRXNRMEZCVXpsQ0xFZEJRVUZCTEVOQlFVbGxMRWRCUVVGQkxFTkJRVXRETEVOQlFVRkJMRU5CUVVrc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVWQyUWtvc1VVRkJRVUVzUlVGQldVRXNVVUZCUVVFc1EwRkJVMjFDTEVkQlFVRkJMRU5CUXpsQ2JFTXNTMEZCUVVFc1EwRkJVU3hUUVVGVmJVSXNRMEZCUVVFc1EwRkJRVUVzUTBGRGFFSktMRkZCUVVGQkxFTkJRVk50UWl4SFFVRkJRU3hEUVVGSkwwSXNSMEZCUVVFc1EwRkJTV1VzUjBGQlFVRXNRMEZCUzBNc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUjI1Q1RDeGpRVUZCUVN4RlFVVlVXaXhKUVVGQlFTeERRVUZCUVN4RFFVUkJSQ3hQUVVGQlFTeERRVUZWTEVsQlFVbGhMR05CUVVGQkxFVkJRME54UWl4TFFVRkJRU3hEUVVObWJFTXNUMEZCUVVFc1EwRkJVVzFETEV0QlFVRkJMRU5CUVUxRExGTkJRVUZCTEVOQlFWbGtMRkZCUVVGQkxFTkJRekZDZGtJc1MwRkJRVUVzUTBGQlVVY3NSMEZCUVVFc1EwRkJTVVFzU1VGQlFVRXNRMEZCUzI5RExGZEJRVUZCTEVOQlFXRndReXhKUVVGQlFTeERRVUZOTEVOQlFVRXNRMEZCUVN4RlFVY3pRazBzVFVGQlFVRXNRMEZCVHl0Q0xHZENRVUZCUVN4RlFVRXdReXhWUVVGQkxFVkJRVUVzVDBGQlprUXNWMEZCUVVFc1JVRkJRVUVzUTBGQk9FSTVRaXhOUVVGQlFTeERRVUZQWjBNc1lVRkJRVUVzUlVGRGFFWjRReXhMUVVGQlFTeERRVUZSTEZOQlFWVnRRaXhEUVVGQlFTeERRVUZCUVN4RFFVTm9RbGdzVFVGQlFVRXNRMEZCVHpoQ0xGZEJRVUZCTEVOQlFWbHVRaXhEUVVGQlFTeERRVUZMTEVWQlFVRXNRMEZCU1N4SFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVVNVFsZ3NUVUZCUVVFc1EwRkJUeXRDTEdkQ1FVRkJRU3hEUVVGcFFpeFRRVUZCTEVOQlFWZG9RaXhSUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RlFVZHVRM1pDTEV0QlFVRkJMRU5CZGtSeFFpeHZRa0ZCUVN4SFFYTkVWVThzUjBGQlFVRXNRMEZCU1N4UlFVRkJMRU5CUVVFc1EwRkRNMElzVTBGQlZWa3NRMEZCUVVFc1EwRkJRVUVzUTBGRGFFSmlMRWxCUVVGQkxFTkJRVXR0UXl4WFFVRkJRU3hEUVVGWmJFTXNSMEZCUVVFc1EwRkJTU3hSUVVGQkxFTkJRVUVzUTBGQlFTeERRVUUyUW0xRExHdENRVUZCUVN4RFFVRkpMRlZCUVVFc1EwRkRjRVJ3UXl4SlFVRkJRU3hEUVVGTGNVTXNWMEZCUVVFc1EwRkJXWFpDTEVsQlFVRkJMRU5CUVVGQkxFTkJRMnBDUml4SFFVRkJRU3hEUVVGSlR5eEpRVUZCUVN4RFFVRkxUaXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVXRNTEZOQlFWVkJMRU5CUVVGQkxFTkJRVUZCTEVOQlEyaENlVUlzVlVGQlFVRXNRMEZCVjNwRExFZEJRVUZCTEVOQlFVbGxMRWRCUVVGQkxFTkJRVXRETEVOQlFVRkJMRU5CUVVrc1EwRkJRU3hEUVVGQkxFTkJRVWtzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVbHNRekJDTEUxQlFVRkJMRU5CUVU5RExFOUJRVUZCTEVOQlFWVXNRMEZEWmtNc1IwRkJRVUVzUTBGQlMzSkRMRTlCUVVGQkxFTkJRMHh6UXl4TFFVRkJRU3hEUVVGUGNFTXNVMEZCUVVFc1EwRkJRVUVzUTBGQlFVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXMjUxYkd4ZGZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYUZ1bmN0aW9uPXJlcXVpcmUoNSk7ZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoaSl7dmFyIG8scjt0aGlzLnByb21pc2U9bmV3IGkoZnVuY3Rpb24oaSx0KXtpZih2b2lkIDAhPT1vfHx2b2lkIDAhPT1yKXRocm93IFR5cGVFcnJvcihcIkJhZCBQcm9taXNlIGNvbnN0cnVjdG9yXCIpO289aSxyPXR9KSx0aGlzLnJlc29sdmU9YUZ1bmN0aW9uKG8pLHRoaXMucmVqZWN0PWFGdW5jdGlvbihyKX1tb2R1bGUuZXhwb3J0cy5mPWZ1bmN0aW9uKGkpe3JldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoaSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dVpYY3RjSEp2YldselpTMWpZWEJoWW1sc2FYUjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltRkdkVzVqZEdsdmJpSXNJbkpsY1hWcGNtVWlMQ0pRY205dGFYTmxRMkZ3WVdKcGJHbDBlU0lzSWtNaUxDSnlaWE52YkhabElpd2ljbVZxWldOMElpd2lkR2hwY3lJc0luQnliMjFwYzJVaUxDSWtKSEpsYzI5c2RtVWlMQ0lrSkhKbGFtVmpkQ0lzSWxSNWNHVkZjbkp2Y2lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSm1JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZWQlFWbERMRkZCUVZFc2FVSkJSWGhDTEZOQlFWTkRMR3RDUVVGclFrTXNSMEZEZWtJc1NVRkJTVU1zUlVGQlUwTXNSVUZEWWtNc1MwRkJTME1zVVVGQlZTeEpRVUZKU2l4RlFVRkZMRk5CUVZWTExFVkJRVmRETEVkQlEzaERMRkZCUVVFc1NVRkJTVXdzVVVGQlFVRXNTVUZCZVVKRExFVkJRWE5DTEUxQlFVMUxMRlZCUVZVc01rSkJRMjVGVGl4RlFVRlZTU3hGUVVOV1NDeEZRVUZUU1N4SlFVVllTQ3hMUVVGTFJpeFJRVUZWU2l4VlFVRlZTU3hIUVVONlFrVXNTMEZCUzBRc1QwRkJVMHdzVlVGQlZVc3NSMEZITVVKTkxFOUJRVTlETEZGQlFWRkRMRVZCUVVrc1UwRkJWVllzUjBGRE0wSXNUMEZCVHl4SlFVRkpSQ3hyUWtGQmEwSkRJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYm1WM0xYQnliMjFwYzJVdFkyRndZV0pwYkdsMGVTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdldEtleXM9cmVxdWlyZSg4MyksZ09QUz1yZXF1aXJlKDgwKSxwSUU9cmVxdWlyZSg4NCksdG9PYmplY3Q9cmVxdWlyZSgxMjEpLElPYmplY3Q9cmVxdWlyZSg1MCksJGFzc2lnbj1PYmplY3QuYXNzaWduO21vZHVsZS5leHBvcnRzPSEkYXNzaWdufHxyZXF1aXJlKDM4KShmdW5jdGlvbigpe3ZhciBlPXt9LHQ9e30scj1TeW1ib2woKSxzPVwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIjtyZXR1cm4gZVtyXT03LHMuc3BsaXQoXCJcIikuZm9yRWFjaChmdW5jdGlvbihlKXt0W2VdPWV9KSw3IT0kYXNzaWduKHt9LGUpW3JdfHxPYmplY3Qua2V5cygkYXNzaWduKHt9LHQpKS5qb2luKFwiXCIpIT1zfSk/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dG9PYmplY3QoZSkscz1hcmd1bWVudHMubGVuZ3RoLGk9MSxvPWdPUFMuZixjPXBJRS5mO3M+aTspZm9yKHZhciBuLGE9SU9iamVjdChhcmd1bWVudHNbaSsrXSksZz1vP2dldEtleXMoYSkuY29uY2F0KG8oYSkpOmdldEtleXMoYSksYj1nLmxlbmd0aCxqPTA7Yj5qOyljLmNhbGwoYSxuPWdbaisrXSkmJihyW25dPWFbbl0pO3JldHVybiByfTokYXNzaWduO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WVhOemFXZHVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltZGxkRXRsZVhNaUxDSnlaWEYxYVhKbElpd2laMDlRVXlJc0luQkpSU0lzSW5SdlQySnFaV04wSWl3aVNVOWlhbVZqZENJc0lpUmhjM05wWjI0aUxDSlBZbXBsWTNRaUxDSmhjM05wWjI0aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lRU0lzSWtJaUxDSlRJaXdpVTNsdFltOXNJaXdpU3lJc0luTndiR2wwSWl3aVptOXlSV0ZqYUNJc0ltc2lMQ0pyWlhseklpd2lhbTlwYmlJc0luUmhjbWRsZENJc0luTnZkWEpqWlNJc0lsUWlMQ0poVEdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpYVc1a1pYZ2lMQ0puWlhSVGVXMWliMnh6SWl3aVppSXNJbWx6Ulc1MWJTSXNJbXRsZVNJc0ltTnZibU5oZENJc0ltb2lMQ0pqWVd4c0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYTBKQlEyeENReXhMUVVGUFJDeFJRVUZSTEd0Q1FVTm1SU3hKUVVGTlJpeFJRVUZSTEdsQ1FVTmtSeXhUUVVGWFNDeFJRVUZSTEdkQ1FVTnVRa2tzVVVGQlZVb3NVVUZCVVN4alFVTnNRa3NzVVVGQlZVTXNUMEZCVDBNc1QwRkhja0pETEU5QlFVOURMRk5CUVZkS0xGTkJRVmRNTEZGQlFWRXNWMEZCVWtFc1EwRkJiMElzVjBGREwwTXNTVUZCU1ZVc1JVRkJTU3hIUVVOS1F5eEZRVUZKTEVkQlJVcERMRVZCUVVsRExGTkJRMHBETEVWQlFVa3NkVUpCUjFJc1QwRkdRVW9zUlVGQlJVVXNSMEZCU3l4RlFVTlFSU3hGUVVGRlF5eE5RVUZOTEVsQlFVbERMRkZCUVZFc1UwRkJWVU1zUjBGQlMwNHNSVUZCUlUwc1IwRkJTMEVzU1VGRFpDeEhRVUZ5UWxvc1VVRkJVU3hIUVVGSlN5eEhRVUZIUlN4SlFVRlhUaXhQUVVGUFdTeExRVUZMWWl4UlFVRlJMRWRCUVVsTkxFbEJRVWxSTEV0QlFVc3NTMEZCVDB3c1NVRkRkRVVzVTBGQlowSk5MRVZCUVZGRExFZEJUVE5DTEVsQlRFRXNTVUZCU1VNc1JVRkJTVzVDTEZOQlFWTnBRaXhIUVVOaVJ5eEZRVUZQUXl4VlFVRlZReXhQUVVOcVFrTXNSVUZCVVN4RlFVTlNReXhGUVVGaE1VSXNTMEZCU3pKQ0xFVkJRMnhDUXl4RlFVRlRNMElzU1VGQlNUQkNMRVZCUTFaTUxFVkJRVTlITEVkQlRWb3NTVUZNUVN4SlFVbEpTU3hGUVVwQmJFSXNSVUZCU1ZJc1VVRkJVVzlDTEZWQlFWVkZMRTFCUTNSQ1VpeEZRVUZQVXl4RlFVRmhOVUlzVVVGQlVXRXNSMEZCUjIxQ0xFOUJRVTlLTEVWQlFWZG1MRWxCUVUxaUxGRkJRVkZoTEVkQlF5OUVZU3hGUVVGVFVDeEZRVUZMVHl4UFFVTmtUeXhGUVVGSkxFVkJSVVJRTEVWQlFWTlBMRWRCUVU5SUxFVkJRVTlKTEV0QlFVdHlRaXhGUVVGSGEwSXNSVUZCVFZvc1JVRkJTMk1zVVVGQlQxWXNSVUZCUlZFc1IwRkJUMnhDTEVWQlFVVnJRaXhKUVVOdVJTeFBRVUZQVWl4SFFVTlFha0lpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5dlltcGxZM1F0WVhOemFXZHVMbXB6SW4wPSIsInZhciBkUD1yZXF1aXJlKDc0KSxhbk9iamVjdD1yZXF1aXJlKDEwKSxnZXRLZXlzPXJlcXVpcmUoODMpO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoMzIpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUscil7YW5PYmplY3QoZSk7Zm9yKHZhciB0LG89Z2V0S2V5cyhyKSxjPW8ubGVuZ3RoLGk9MDtjPmk7KWRQLmYoZSx0PW9baSsrXSxyW3RdKTtyZXR1cm4gZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaSEJ6TG1weklsMHNJbTVoYldWeklqcGJJbVJRSWl3aWNtVnhkV2x5WlNJc0ltRnVUMkpxWldOMElpd2laMlYwUzJWNWN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGFXVnpJaXdpVHlJc0lsQnliM0JsY25ScFpYTWlMQ0pRSWl3aWEyVjVjeUlzSW14bGJtZDBhQ0lzSW1raUxDSm1JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeEhRVUZMUXl4UlFVRlJMR2RDUVVOaVF5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNVVUZCVlVZc1VVRkJVU3hyUWtGRmRFSkhMRTlCUVU5RExGRkJRVlZLTEZGQlFWRXNhMEpCUVc5Q1N5eFBRVUZQUXl4cFFrRkJiVUlzVTBGQk1FSkRMRVZCUVVkRExFZEJRMnhIVUN4VFFVRlRUU3hIUVV0VUxFbEJTa0VzU1VGSFNVVXNSVUZJUVVNc1JVRkJUMUlzVVVGQlVVMHNSMEZEWmtjc1JVRkJVMFFzUlVGQlMwTXNUMEZEWkVNc1JVRkJTU3hGUVVWRVJDeEZRVUZUUXl4SFFVRkhZaXhIUVVGSFl5eEZRVUZGVGl4RlFVRkhSU3hGUVVGSlF5eEZRVUZMUlN4TFFVRk5TaXhGUVVGWFF5eEpRVU55UkN4UFFVRlBSaUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDI5aWFtVmpkQzFrY0hNdWFuTWlmUT09IiwidmFyIHNoYXJlZD1yZXF1aXJlKDEwNSkoXCJrZXlzXCIpLHVpZD1yZXF1aXJlKDEyNik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHNoYXJlZFtlXXx8KHNoYXJlZFtlXT11aWQoZSkpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXphR0Z5WldRdGEyVjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkluTm9ZWEpsWkNJc0luSmxjWFZwY21VaUxDSjFhV1FpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWEyVjVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFBRVUZUUXl4UlFVRlJMRmxCUVZKQkxFTkJRWEZDTEZGQlF6bENReXhKUVVGTlJDeFJRVUZSTEZWQlEyeENSU3hQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFOUJRVTlNTEU5QlFVOUxMRXRCUVZOTUxFOUJRVTlMTEVkQlFVOUlMRWxCUVVsSElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZjMmhoY21Wa0xXdGxlUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoNjIpfHwhcmVxdWlyZSgzOCkoZnVuY3Rpb24oKXt2YXIgZT1NYXRoLnJhbmRvbSgpO19fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLGUsZnVuY3Rpb24oKXt9KSxkZWxldGUgcmVxdWlyZSg0MylbZV19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFptOXlZMlZrTFhCaGJTNXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVnhkV2x5WlNJc0lrc2lMQ0pOWVhSb0lpd2ljbUZ1Wkc5dElpd2lYMTlrWldacGJtVlRaWFIwWlhKZlh5SXNJbU5oYkd3aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEU5QlFVOURMRkZCUVZWRExGRkJRVkVzWjBKQlFXdENRU3hSUVVGUkxGZEJRVkpCTEVOQlFXOUNMRmRCUXpkRUxFbEJRVWxETEVWQlFVbERMRXRCUVV0RExGTkJSMkpETEdsQ1FVRnBRa01zUzBGQlN5eExRVUZOU2l4RlFVRkhMSEZDUVVONFFrUXNVVUZCVVN4aFFVRmhReUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDI5aWFtVmpkQzFtYjNKalpXUXRjR0Z0TG1wekluMD0iLCJ2YXIgcElFPXJlcXVpcmUoODQpLGNyZWF0ZURlc2M9cmVxdWlyZSg5MiksdG9JT2JqZWN0PXJlcXVpcmUoMTE5KSx0b1ByaW1pdGl2ZT1yZXF1aXJlKDEyMiksaGFzPXJlcXVpcmUoNDQpLElFOF9ET01fREVGSU5FPXJlcXVpcmUoNDcpLGdPUEQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtleHBvcnRzLmY9cmVxdWlyZSgzMik/Z09QRDpmdW5jdGlvbihlLHIpe2lmKGU9dG9JT2JqZWN0KGUpLHI9dG9QcmltaXRpdmUociwhMCksSUU4X0RPTV9ERUZJTkUpdHJ5e3JldHVybiBnT1BEKGUscil9Y2F0Y2goZSl7fWlmKGhhcyhlLHIpKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKGUsciksZVtyXSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WjI5d1pDNXFjeUpkTENKdVlXMWxjeUk2V3lKd1NVVWlMQ0p5WlhGMWFYSmxJaXdpWTNKbFlYUmxSR1Z6WXlJc0luUnZTVTlpYW1WamRDSXNJblJ2VUhKcGJXbDBhWFpsSWl3aWFHRnpJaXdpU1VVNFgwUlBUVjlFUlVaSlRrVWlMQ0puVDFCRUlpd2lUMkpxWldOMElpd2laMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlpd2laWGh3YjNKMGN5SXNJbVlpTENKUElpd2lVQ0lzSW1VaUxDSmpZV3hzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEdsQ1FVTmtReXhYUVVGaFJDeFJRVUZSTEc5Q1FVTnlRa1VzVlVGQldVWXNVVUZCVVN4cFFrRkRjRUpITEZsQlFXTklMRkZCUVZFc2JVSkJRM1JDU1N4SlFVRk5TaXhSUVVGUkxGVkJRMlJMTEdWQlFXbENUQ3hSUVVGUkxIRkNRVU42UWswc1MwRkJUME1zVDBGQlQwTXNlVUpCUld4Q1F5eFJRVUZSUXl4RlFVRkpWaXhSUVVGUkxHdENRVUZ2UWswc1MwRkJUeXhUUVVGclEwc3NSVUZCUjBNc1IwRkhiRVlzUjBGR1FVUXNSVUZCU1ZRc1ZVRkJWVk1zUjBGRFpFTXNSVUZCU1ZRc1dVRkJXVk1zUjBGQlFVRXNSMEZEV2xBc1pVRkJaMElzU1VGRGJFSXNUMEZCVDBNc1MwRkJTMHNzUlVGQlIwTXNSMEZEWml4TlFVRlBReXhKUVVOVUxFZEJRVWxVTEVsQlFVbFBMRVZCUVVkRExFZEJRVWtzVDBGQlQxZ3NXVUZCV1VZc1NVRkJTVmNzUlVGQlJVa3NTMEZCUzBnc1JVRkJSME1zUjBGQlNVUXNSVUZCUlVNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOXZZbXBsWTNRdFoyOXdaQzVxY3lKOSIsInZhciB0b0lPYmplY3Q9cmVxdWlyZSgxMTkpLGdPUE49cmVxdWlyZSg3OSkuZix0b1N0cmluZz17fS50b1N0cmluZyx3aW5kb3dOYW1lcz1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzP09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdyk6W107bW9kdWxlLmV4cG9ydHMuZj1mdW5jdGlvbih0KXtyZXR1cm4gd2luZG93TmFtZXMmJlwiW29iamVjdCBXaW5kb3ddXCI9PXRvU3RyaW5nLmNhbGwodCk/ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBnT1BOKHQpfWNhdGNoKHQpe3JldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpfX0odCk6Z09QTih0b0lPYmplY3QodCkpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFoyOXdiaTFsZUhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpZEc5SlQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltZFBVRTRpTENKbUlpd2lkRzlUZEhKcGJtY2lMQ0ozYVc1a2IzZE9ZVzFsY3lJc0luZHBibVJ2ZHlJc0lrOWlhbVZqZENJc0ltZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSmpZV3hzSWl3aVpTSXNJbk5zYVdObElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHbENRVU53UWtNc1MwRkJUMFFzVVVGQlVTeHJRa0ZCYTBKRkxFVkJRMnBEUXl4VFFVRlhMRWRCUVVkQkxGTkJSV1JETEZsQlFTdENMR2xDUVVGV1F5eFJRVUZ6UWtFc1VVRkJWVU1zVDBGQlQwTXNiMEpCUXpWRVJDeFBRVUZQUXl4dlFrRkJiMEpHTEZGQlFWVXNSMEZWZWtOSExFOUJRVTlETEZGQlFWRlFMRVZCUVVrc1UwRkJOa0pSTEVkQlF6bERMRTlCUVU5T0xHRkJRVzlETEcxQ1FVRnlRa1FzVTBGQlUxRXNTMEZCUzBRc1IwRlVha0lzVTBGQlZVRXNSMEZETjBJc1NVRkRSU3hQUVVGUFZDeExRVUZMVXl4SFFVTmFMRTFCUVU5RkxFZEJRMUFzVDBGQlQxSXNXVUZCV1ZNc1UwRktSaXhEUVZNeVJFZ3NSMEZCVFZRc1MwRkJTMFlzVlVGQlZWY2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjl2WW1wbFkzUXRaMjl3YmkxbGVIUXVhbk1pZlE9PSIsInZhciAka2V5cz1yZXF1aXJlKDgyKSxoaWRkZW5LZXlzPXJlcXVpcmUoMzQpLmNvbmNhdChcImxlbmd0aFwiLFwicHJvdG90eXBlXCIpO2V4cG9ydHMuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc3x8ZnVuY3Rpb24oZSl7cmV0dXJuICRrZXlzKGUsaGlkZGVuS2V5cyl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaMjl3Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrYTJWNWN5SXNJbkpsY1hWcGNtVWlMQ0pvYVdSa1pXNUxaWGx6SWl3aVkyOXVZMkYwSWl3aVpYaHdiM0owY3lJc0ltWWlMQ0pQWW1wbFkzUWlMQ0puWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SWl3aVR5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1MwRkJRVUVzUTBGQlVVTXNUMEZCUVVFc1EwRkJVU3g1UWtGQlFTeERRVUZCTEVOQlEyaENReXhWUVVGQlFTeERRVUZoUkN4UFFVRkJRU3hEUVVGUkxHdENRVUZCTEVOQlFVRXNRMEZCYjBKRkxFMUJRVUZCTEVOQlFVOHNVVUZCUVN4RFFVRlZMRmRCUVVFc1EwRkJRU3hEUVVVNVJFTXNUMEZCUVVFc1EwRkJVVU1zUTBGQlFVRXNRMEZCU1VNc1RVRkJRVUVzUTBGQlQwTXNiVUpCUVVGQkxFVkJRWFZDTEZOQlFUWkNReXhEUVVGQlFTeERRVUZCUVN4RFFVTnlSU3hQUVVGUFVpeExRVUZCUVN4RFFVRk5VU3hEUVVGQlFTeERRVUZIVGl4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMTkiLCJ2YXIgaGFzPXJlcXVpcmUoNDQpLHRvSU9iamVjdD1yZXF1aXJlKDExOSksYXJyYXlJbmRleE9mPXJlcXVpcmUoMTQpKCExKSxJRV9QUk9UTz1yZXF1aXJlKDEwNCkoXCJJRV9QUk9UT1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLGUpe3ZhciBhLHQ9dG9JT2JqZWN0KHIpLHU9MCxPPVtdO2ZvcihhIGluIHQpYSE9SUVfUFJPVE8mJmhhcyh0LGEpJiZPLnB1c2goYSk7Zm9yKDtlLmxlbmd0aD51OyloYXModCxhPWVbdSsrXSkmJih+YXJyYXlJbmRleE9mKE8sYSl8fE8ucHVzaChhKSk7cmV0dXJuIE99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDNXFjeUpkTENKdVlXMWxjeUk2V3lKb1lYTWlMQ0p5WlhGMWFYSmxJaXdpZEc5SlQySnFaV04wSWl3aVlYSnlZWGxKYm1SbGVFOW1JaXdpU1VWZlVGSlBWRThpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWIySnFaV04wSWl3aWJtRnRaWE1pTENKclpYa2lMQ0pQSWl3aWFTSXNJbkpsYzNWc2RDSXNJbkIxYzJnaUxDSnNaVzVuZEdnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEVsQlFVMURMRkZCUVZFc1ZVRkRaRU1zVlVGQldVUXNVVUZCVVN4cFFrRkRjRUpGTEdGQlFXVkdMRkZCUVZFc2IwSkJRVkpCTEVWQlFVRkJMRWRCUTJaSExGTkJRVmRJTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEZsQlJYaERTU3hQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRVZCUVZGRExFZEJRMnBETEVsQlIwbERMRVZCU0VGRExFVkJRVWxTTEZWQlFWVkxMRWRCUTJSSkxFVkJRVWtzUlVGRFNrTXNSVUZCVXl4SFFVVmlMRWxCUVV0SUxFdEJRVTlETEVWQlFVOUVMRWRCUVU5TUxGVkJRVlZLTEVsQlFVbFZMRVZCUVVkRUxFbEJRVkZITEVWQlFVOURMRXRCUVV0S0xFZEJSUzlFTEV0QlFVOUVMRVZCUVUxTkxFOUJRVk5JTEVkQlFVOVlMRWxCUVVsVkxFVkJRVWRFTEVWQlFVMUVMRVZCUVUxSExGTkJRemREVWl4aFFVRmhVeXhGUVVGUlNDeEpRVUZSUnl4RlFVRlBReXhMUVVGTFNpeEpRVVUxUXl4UFFVRlBSeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc0xtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksY29yZT1yZXF1aXJlKDI2KSxmYWlscz1yZXF1aXJlKDM4KTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciBvPShjb3JlLk9iamVjdHx8e30pW2VdfHxPYmplY3RbZV0sdD17fTt0W2VdPXIobyksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKmZhaWxzKGZ1bmN0aW9uKCl7bygxKX0pLFwiT2JqZWN0XCIsdCl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0YzJGd0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVkyOXlaU0lzSW1aaGFXeHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWt0RldTSXNJbVY0WldNaUxDSm1iaUlzSWs5aWFtVmpkQ0lzSW1WNGNDSXNJbE1pTENKR0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4TFFVRlBSQ3hSUVVGUkxGZEJRMlpGTEUxQlFWRkdMRkZCUVZFc1dVRkRjRUpITEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlMwTXNSMEZET1VJc1NVRkJTVU1zUjBGQlRVNHNTMEZCUzA4c1VVRkJWU3hKUVVGSlNDeEpRVUZSUnl4UFFVRlBTQ3hIUVVONFEwa3NSVUZCVFN4SFFVTldRU3hGUVVGSlNpeEhRVUZQUXl4RlFVRkxReXhIUVVOb1FsSXNVVUZCVVVFc1VVRkJVVmNzUlVGQlNWZ3NVVUZCVVZrc1JVRkJTVlFzVFVGQlRTeFhRVUZqU3l4RlFVRkhMRXRCUVZFc1UwRkJWVVVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5dlltcGxZM1F0YzJGd0xtcHpJbjA9IiwidmFyIGdldEtleXM9cmVxdWlyZSg4MyksdG9JT2JqZWN0PXJlcXVpcmUoMTE5KSxpc0VudW09cmVxdWlyZSg4NCkuZjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciByLG89dG9JT2JqZWN0KHQpLHU9Z2V0S2V5cyhvKSxpPXUubGVuZ3RoLG49MCxjPVtdO2k+bjspaXNFbnVtLmNhbGwobyxyPXVbbisrXSkmJmMucHVzaChlP1tyLG9bcl1dOm9bcl0pO3JldHVybiBjfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRkRzh0WVhKeVlYa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVoyVjBTMlY1Y3lJc0luSmxjWFZwY21VaUxDSjBiMGxQWW1wbFkzUWlMQ0pwYzBWdWRXMGlMQ0ptSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbHpSVzUwY21sbGN5SXNJbWwwSWl3aWEyVjVJaXdpVHlJc0ltdGxlWE1pTENKc1pXNW5kR2dpTENKcElpd2ljbVZ6ZFd4MElpd2lZMkZzYkNJc0luQjFjMmdpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYTBKQlEyeENReXhWUVVGWlJDeFJRVUZSTEdsQ1FVTndRa1VzVDBGQlUwWXNVVUZCVVN4cFFrRkJhVUpITEVWQlEzUkRReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFOUJRVThzVTBGQlZVTXNSMEZQWml4SlFVNUJMRWxCUzBsRExFVkJURUZETEVWQlFVbFNMRlZCUVZWTkxFZEJRMlJITEVWQlFVOVlMRkZCUVZGVkxFZEJRMlpGTEVWQlFWTkVMRVZCUVV0RExFOUJRMlJETEVWQlFVa3NSVUZEU2tNc1JVRkJVeXhIUVVWT1JpeEZRVUZUUXl4SFFVRlBWaXhQUVVGUFdTeExRVUZMVEN4RlFVRkhSQ3hGUVVGTlJTeEZRVUZMUlN4UFFVTXZRME1zUlVGQlQwVXNTMEZCUzFRc1JVRkJXU3hEUVVGRFJTeEZRVUZMUXl4RlFVRkZSQ3hKUVVGUlF5eEZRVUZGUkN4SlFVTXhReXhQUVVGUFN5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYMjlpYW1WamRDMTBieTFoY25KaGVTNXFjeUo5IiwidmFyIGdPUE49cmVxdWlyZSg3OSksZ09QUz1yZXF1aXJlKDgwKSxhbk9iamVjdD1yZXF1aXJlKDEwKSxSZWZsZWN0PXJlcXVpcmUoNDMpLlJlZmxlY3Q7bW9kdWxlLmV4cG9ydHM9UmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzfHxmdW5jdGlvbihlKXt2YXIgcj1nT1BOLmYoYW5PYmplY3QoZSkpLHQ9Z09QUy5mO3JldHVybiB0P3IuY29uY2F0KHQoZSkpOnJ9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dmQyNHRhMlY1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpuVDFCT0lpd2ljbVZ4ZFdseVpTSXNJbWRQVUZNaUxDSmhiazlpYW1WamRDSXNJbEpsWm14bFkzUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYjNkdVMyVjVjeUlzSW1sMElpd2lhMlY1Y3lJc0ltWWlMQ0puWlhSVGVXMWliMnh6SWl3aVkyOXVZMkYwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hMUVVGUFF5eFJRVUZSTEd0Q1FVTm1ReXhMUVVGUFJDeFJRVUZSTEd0Q1FVTm1SU3hUUVVGWFJpeFJRVUZSTEdkQ1FVTnVRa2NzVVVGQlZVZ3NVVUZCVVN4aFFVRmhSeXhSUVVOdVEwTXNUMEZCVDBNc1VVRkJWVVlzVTBGQlYwRXNVVUZCVVVjc1UwRkJWeXhUUVVGcFFrTXNSMEZET1VRc1NVRkJTVU1zUlVGQlQxUXNTMEZCUzFVc1JVRkJSVkFzVTBGQlUwc3NTVUZEZGtKSExFVkJRV0ZVTEV0QlFVdFJMRVZCUTNSQ0xFOUJRVTlETEVWQlFXRkdMRVZCUVV0SExFOUJRVTlFTEVWQlFWZElMRWxCUVU5RElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZiM2R1TFd0bGVYTXVhbk1pZlE9PSIsInZhciAkcGFyc2VGbG9hdD1yZXF1aXJlKDQzKS5wYXJzZUZsb2F0LCR0cmltPXJlcXVpcmUoMTEzKS50cmltO21vZHVsZS5leHBvcnRzPTEvJHBhcnNlRmxvYXQocmVxdWlyZSgxMTQpK1wiLTBcIikhPS0xLzA/ZnVuY3Rpb24ocil7dmFyIHQ9JHRyaW0oU3RyaW5nKHIpLDMpLGE9JHBhcnNlRmxvYXQodCk7cmV0dXJuIDA9PT1hJiZcIi1cIj09dC5jaGFyQXQoMCk/LTA6YX06JHBhcnNlRmxvYXQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl3WVhKelpTMW1iRzloZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrY0dGeWMyVkdiRzloZENJc0luSmxjWFZwY21VaUxDSndZWEp6WlVac2IyRjBJaXdpSkhSeWFXMGlMQ0owY21sdElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbk4wY2lJc0luTjBjbWx1WnlJc0lsTjBjbWx1WnlJc0luSmxjM1ZzZENJc0ltTm9ZWEpCZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzV1VGQlkwTXNVVUZCVVN4aFFVRmhReXhYUVVOdVEwTXNUVUZCVVVZc1VVRkJVU3hyUWtGQmEwSkhMRXRCUlhSRFF5eFBRVUZQUXl4UlFVRlZMRVZCUVVsT0xGbEJRVmxETEZGQlFWRXNaMEpCUVd0Q0xGRkJRVUVzUlVGQlFTeEZRVUZ6UWl4VFFVRnZRazBzUjBGRGJrY3NTVUZCU1VNc1JVRkJVMHdzVFVGQlRVMHNUMEZCVDBZc1IwRkJUU3hIUVVNMVFrY3NSVUZCVTFZc1dVRkJXVkVzUjBGRGVrSXNUMEZCYTBJc1NVRkJXRVVzUjBGQmIwTXNTMEZCY0VKR0xFVkJRVTlITEU5QlFVOHNTVUZCWVN4RlFVRkpSQ3hIUVVOd1JGWWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYRjl3WVhKelpTMW1iRzloZEM1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1cIlxcdFxcblxcdlxcZlxcciDCoOGagOGgjuKAgOKAgeKAguKAg+KAhOKAheKAhuKAh+KAiOKAieKAiuKAr+KBn+OAgFxcdTIwMjhcXHUyMDI5XFx1ZmVmZlwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emRISnBibWN0ZDNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZVaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOXpkSEpwYm1jdGQzTXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGRlZmluZWQ9cmVxdWlyZSgzMSksZmFpbHM9cmVxdWlyZSgzOCksc3BhY2VzPXJlcXVpcmUoMTE0KSxzcGFjZT1cIltcIitzcGFjZXMrXCJdXCIsbHRyaW09UmVnRXhwKFwiXlwiK3NwYWNlK3NwYWNlK1wiKlwiKSxydHJpbT1SZWdFeHAoc3BhY2Urc3BhY2UrXCIqJFwiKSxleHBvcnRlcj1mdW5jdGlvbihlLHIsdCl7dmFyIGk9e30scD1mYWlscyhmdW5jdGlvbigpe3JldHVybiEhc3BhY2VzW2VdKCl8fFwi4oCLwoVcIiE9XCLigIvChVwiW2VdKCl9KSxzPWlbZV09cD9yKHRyaW0pOnNwYWNlc1tlXTt0JiYoaVt0XT1zKSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqcCxcIlN0cmluZ1wiLGkpfSx0cmltPWV4cG9ydGVyLnRyaW09ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZT1TdHJpbmcoZGVmaW5lZChlKSksMSZyJiYoZT1lLnJlcGxhY2UobHRyaW0sXCJcIikpLDImciYmKGU9ZS5yZXBsYWNlKHJ0cmltLFwiXCIpKSxlfTttb2R1bGUuZXhwb3J0cz1leHBvcnRlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXpkSEpwYm1jdGRISnBiUzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbVJsWm1sdVpXUWlMQ0ptWVdsc2N5SXNJbk53WVdObGN5SXNJbk53WVdObElpd2liSFJ5YVcwaUxDSlNaV2RGZUhBaUxDSnlkSEpwYlNJc0ltVjRjRzl5ZEdWeUlpd2lTMFZaSWl3aVpYaGxZeUlzSWtGTVNVRlRJaXdpWlhod0lpd2lSazlTUTBVaUxDSm1iaUlzSW5SeWFXMGlMQ0pRSWl3aVJpSXNJbk4wY21sdVp5SXNJbFJaVUVVaUxDSlRkSEpwYm1jaUxDSnlaWEJzWVdObElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeGpRVU5zUWtVc1RVRkJVVVlzVVVGQlVTeFpRVU5vUWtjc1QwRkJVMGdzVVVGQlVTeG5Ra0ZEYWtKSkxFMUJRVkVzU1VGQlRVUXNUMEZCVXl4SlFVVjJRa1VzVFVGQlVVTXNUMEZCVHl4SlFVRk5SaXhOUVVGUlFTeE5RVUZSTEV0QlEzSkRSeXhOUVVGUlJDeFBRVUZQUml4TlFVRlJRU3hOUVVGUkxFMUJSUzlDU1N4VFFVRlhMRk5CUVZWRExFVkJRVXRETEVWQlFVMURMRWRCUTJ4RExFbEJRVWxETEVWQlFVMHNSMEZEVGtNc1JVRkJVVmdzVFVGQlRTeFhRVU5vUWl4UlFVRlRReXhQUVVGUFRTeE5RVkJXTEUxQlFVRXNTMEZQZDBKQkxFOUJSVFZDU3l4RlFVRkxSaXhGUVVGSlNDeEhRVUZQU1N4RlFVRlJTQ3hGUVVGTFN5eE5RVUZSV2l4UFFVRlBUU3hIUVVNMVEwVXNTVUZCVDBNc1JVRkJTVVFzUjBGQlUwY3NSMEZEZUVKbUxGRkJRVkZCTEZGQlFWRnBRaXhGUVVGSmFrSXNVVUZCVVd0Q0xFVkJRVWxLTEVWQlFVOHNVMEZCVlVRc1NVRk5MME5ITEV0QlFVOVFMRk5CUVZOUExFdEJRVThzVTBGQlZVY3NSVUZCVVVNc1IwRkpNME1zVDBGSVFVUXNSVUZCVTBVc1QwRkJUMjVDTEZGQlFWRnBRaXhKUVVOaUxFVkJRVkJETEVsQlFWVkVMRVZCUVZOQkxFVkJRVTlITEZGQlFWRm9RaXhOUVVGUExFdEJRMnhETEVWQlFWQmpMRWxCUVZWRUxFVkJRVk5CTEVWQlFVOUhMRkZCUVZGa0xFMUJRVThzUzBGRGRFTlhMRWRCUjFSSkxFOUJRVTlETEZGQlFWVm1JaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmYzNSeWFXNW5MWFJ5YVcwdWFuTWlmUT09IiwidmFyICRwYXJzZUludD1yZXF1aXJlKDQzKS5wYXJzZUludCwkdHJpbT1yZXF1aXJlKDExMykudHJpbSx3cz1yZXF1aXJlKDExNCksaGV4PS9eWy0rXT8wW3hYXS87bW9kdWxlLmV4cG9ydHM9OCE9PSRwYXJzZUludCh3cytcIjA4XCIpfHwyMiE9PSRwYXJzZUludCh3cytcIjB4MTZcIik/ZnVuY3Rpb24ocixlKXt2YXIgdD0kdHJpbShTdHJpbmcociksMyk7cmV0dXJuICRwYXJzZUludCh0LGU+Pj4wfHwoaGV4LnRlc3QodCk/MTY6MTApKX06JHBhcnNlSW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5d1lYSnpaUzFwYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkhCaGNuTmxTVzUwSWl3aWNtVnhkV2x5WlNJc0luQmhjbk5sU1c1MElpd2lKSFJ5YVcwaUxDSjBjbWx0SWl3aWQzTWlMQ0pvWlhnaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljM1J5SWl3aWNtRmthWGdpTENKemRISnBibWNpTENKVGRISnBibWNpTENKMFpYTjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFZRVUZaUXl4UlFVRlJMR0ZCUVdGRExGTkJRMnBEUXl4TlFVRlJSaXhSUVVGUkxHdENRVUZyUWtjc1MwRkRiRU5ETEVkQlFVdEtMRkZCUVZFc1owSkJRMkpMTEVsQlFVMHNZMEZGVmtNc1QwRkJUME1zVVVGQmJVTXNTVUZCZWtKU0xGVkJRVlZMTEVkQlFVc3NUMEZCTUVNc1MwRkJNMEpNTEZWQlFWVkxMRWRCUVVzc1VVRkJhVUlzVTBGQmEwSkpMRVZCUVV0RExFZEJRM0JITEVsQlFVbERMRVZCUVZOU0xFMUJRVTFUTEU5QlFVOUlMRWRCUVUwc1IwRkRhRU1zVDBGQlQxUXNWVUZCVlZjc1JVRkJVMFFzU1VGQlZTeEpRVUZQU2l4SlFVRkpUeXhMUVVGTFJpeEhRVUZWTEVkQlFVc3NUVUZEYWtWWUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZjR0Z5YzJVdGFXNTBMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm57ZTohMSx2OmUoKX19Y2F0Y2goZSl7cmV0dXJue2U6ITAsdjplfX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5d1pYSm1iM0p0TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0psZUdWaklpd2laU0lzSW5ZaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDTEVsQlEwVXNUVUZCVHl4RFFVRkZReXhIUVVGQlFTeEZRVUZWUXl4RlFVRkhSaXhMUVVOMFFpeE5RVUZQUXl4SFFVTlFMRTFCUVU4c1EwRkJSVUVzUjBGQlFVRXNSVUZCVTBNc1JVRkJSMFFpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5d1pYSm1iM0p0TG1wekluMD0iLCJ2YXIgYW5PYmplY3Q9cmVxdWlyZSgxMCksaXNPYmplY3Q9cmVxdWlyZSg1NCksbmV3UHJvbWlzZUNhcGFiaWxpdHk9cmVxdWlyZSg3MSk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhbk9iamVjdChlKSxpc09iamVjdChyKSYmci5jb25zdHJ1Y3Rvcj09PWUpcmV0dXJuIHI7dmFyIGk9bmV3UHJvbWlzZUNhcGFiaWxpdHkuZihlKTtyZXR1cm4oMCxpLnJlc29sdmUpKHIpLGkucHJvbWlzZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl3Y205dGFYTmxMWEpsYzI5c2RtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVlXNVBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2lhWE5QWW1wbFkzUWlMQ0p1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSkRJaXdpZUNJc0ltTnZibk4wY25WamRHOXlJaXdpY0hKdmJXbHpaVU5oY0dGaWFXeHBkSGtpTENKbUlpd2ljbVZ6YjJ4MlpTSXNJbkJ5YjIxcGMyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNjVUpCUVhWQ1JpeFJRVUZSTERaQ1FVVnVRMGNzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGSFF5eEhRVVUxUWl4SFFVUkJVQ3hUUVVGVFRTeEhRVU5NU2l4VFFVRlRTeXhKUVVGTlFTeEZRVUZGUXl4alFVRm5Ra1lzUlVGQlJ5eFBRVUZQUXl4RlFVTXZReXhKUVVGSlJTeEZRVUZ2UWs0c2NVSkJRWEZDVHl4RlFVRkZTaXhIUVVjdlF5eFBRVUZCTEVWQlJtTkhMRVZCUVd0Q1JTeFRRVU40UWtvc1IwRkRSRVVzUlVGQmEwSkhJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmY0hKdmJXbHpaUzF5WlhOdmJIWmxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBjbGFzc29mPXJlcXVpcmUoMjApLGJ1aWx0aW5FeGVjPVJlZ0V4cC5wcm90b3R5cGUuZXhlYzttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0PWUuZXhlYztpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXt2YXIgbz10LmNhbGwoZSxyKTtpZihcIm9iamVjdFwiIT10eXBlb2Ygbyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsXCIpO3JldHVybiBvfWlmKFwiUmVnRXhwXCIhPT1jbGFzc29mKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyXCIpO3JldHVybiBidWlsdGluRXhlYy5jYWxsKGUscil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5eVpXZGxlSEF0WlhobFl5MWhZbk4wY21GamRDNXFjeUpkTENKdVlXMWxjeUk2V3lKamJHRnpjMjltSWl3aWNtVnhkV2x5WlNJc0ltSjFhV3gwYVc1RmVHVmpJaXdpVW1WblJYaHdJaXdpY0hKdmRHOTBlWEJsSWl3aVpYaGxZeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKU0lpd2lVeUlzSW5KbGMzVnNkQ0lzSW1OaGJHd2lMQ0pVZVhCbFJYSnliM0lpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGpRVU5zUWtNc1dVRkJZME1zVDBGQlQwTXNWVUZCVlVNc1MwRkpia05ETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlIwTXNSMEZETlVJc1NVRkJTVW9zUlVGQlQwY3NSVUZCUlVnc1MwRkRZaXhIUVVGdlFpeHRRa0ZCVkVFc1JVRkJjVUlzUTBGRE9VSXNTVUZCU1Vzc1JVRkJVMHdzUlVGQlMwMHNTMEZCUzBnc1JVRkJSME1zUjBGRE1VSXNSMEZCYzBJc2FVSkJRVmhETEVWQlExUXNUVUZCVFN4SlFVRkpSU3hWUVVGVkxITkZRVVYwUWl4UFFVRlBSaXhGUVVWVUxFZEJRVzFDTEZkQlFXWldMRkZCUVZGUkxFZEJRMVlzVFVGQlRTeEpRVUZKU1N4VlFVRlZMQ3REUVVWMFFpeFBRVUZQVml4WlFVRlpVeXhMUVVGTFNDeEZRVUZIUXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzSmxaMlY0Y0MxbGVHVmpMV0ZpYzNSeVlXTjBMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG4scil7dmFyIHQ9cj09PU9iamVjdChyKT9mdW5jdGlvbihuKXtyZXR1cm4gcltuXX06cjtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIFN0cmluZyhyKS5yZXBsYWNlKG4sdCl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXlaWEJzWVdObGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVm5SWGh3SWl3aWNtVndiR0ZqWlNJc0luSmxjR3hoWTJWeUlpd2lUMkpxWldOMElpd2ljR0Z5ZENJc0ltbDBJaXdpVTNSeWFXNW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGUlF5eEhRVU5xUXl4SlFVRkpReXhGUVVGWFJDeEpRVUZaUlN4UFFVRlBSaXhIUVVGWExGTkJRVlZITEVkQlEzSkVMRTlCUVU5SUxFVkJRVkZITEVsQlEySklMRVZCUTBvc1QwRkJUeXhUUVVGVlNTeEhRVU5tTEU5QlFVOURMRTlCUVU5RUxFZEJRVWxLTEZGQlFWRkVMRVZCUVZGRklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZjbVZ3YkdGalpYSXVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPU9iamVjdC5pc3x8ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXQ/MCE9PWV8fDEvZT09MS90OmUhPWUmJnQhPXR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5ellXMWxMWFpoYkhWbExtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKUFltcGxZM1FpTENKcGN5SXNJbmdpTENKNUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFVRXNUMEZCVDBNc1VVRkJWVU1zVDBGQlQwTXNTVUZCVFN4VFFVRlpReXhGUVVGSFF5eEhRVVV6UXl4UFFVRlBSQ3hKUVVGTlF5eEZRVUZWTEVsQlFVNUVMRWRCUVZjc1JVRkJTVUVzUjBGQlRTeEZRVUZKUXl4RlFVRkpSQ3hIUVVGTFFTeEhRVUZMUXl4SFFVRkxRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDNOaGJXVXRkbUZzZFdVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksYUZ1bmN0aW9uPXJlcXVpcmUoNSksY3R4PXJlcXVpcmUoMjgpLGZvck9mPXJlcXVpcmUoNDIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpeyRleHBvcnQoJGV4cG9ydC5TLHIse2Zyb206ZnVuY3Rpb24ocil7dmFyIHQsbyxlLG4sdT1hcmd1bWVudHNbMV07cmV0dXJuIGFGdW5jdGlvbih0aGlzKSwodD12b2lkIDAhPT11KSYmYUZ1bmN0aW9uKHUpLG51bGw9PXI/bmV3IHRoaXM6KG89W10sdD8oZT0wLG49Y3R4KHUsYXJndW1lbnRzWzJdLDIpLGZvck9mKHIsITEsZnVuY3Rpb24ocil7by5wdXNoKG4ocixlKyspKX0pKTpmb3JPZihyLCExLG8ucHVzaCxvKSxuZXcgdGhpcyhvKSl9fSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5elpYUXRZMjlzYkdWamRHbHZiaTFtY205dExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVlVWjFibU4wYVc5dUlpd2lZM1I0SWl3aVptOXlUMllpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVEwOU1URVZEVkVsUFRpSXNJbE1pTENKbWNtOXRJaXdpYzI5MWNtTmxJaXdpYldGd2NHbHVaeUlzSWtFaUxDSnVJaXdpWTJJaUxDSnRZWEJHYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJblJvYVhNaUxDSjFibVJsWm1sdVpXUWlMQ0p1WlhoMFNYUmxiU0lzSW5CMWMyZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVlVGQldVUXNVVUZCVVN4cFFrRkRjRUpGTEVsQlFVMUdMRkZCUVZFc1ZVRkRaRWNzVFVGQlVVZ3NVVUZCVVN4aFFVVndRa2tzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFsQXNVVUZCVVVFc1VVRkJVVkVzUlVGQlIwUXNSVUZCV1N4RFFVRkZSU3hMUVVGTkxGTkJRV05ETEVkQlEyNUVMRWxCUTBsRExFVkJRVk5ETEVWQlFVZERMRVZCUVVkRExFVkJSR1pETEVWQlFWRkRMRlZCUVZVc1IwRkxkRUlzVDBGSVFXUXNWVUZCVldVc1QwRkRWazRzVDBGQlFVRXNTVUZCVlVrc1NVRkRSMklzVlVGQlZXRXNSMEZEVkVjc1RVRkJWbElzUlVGQk5FSXNTVUZCU1U4c1RVRkRjRU5NTEVWQlFVa3NSMEZEUVVRc1IwRkRSa1VzUlVGQlNTeEZRVU5LUXl4RlFVRkxXQ3hKUVVGSldTeEZRVUZQUXl4VlFVRlZMRWRCUVVrc1IwRkRPVUphTEUxQlFVMU5MRWRCUVVGQkxFVkJRV1VzVTBGQlZWTXNSMEZETjBKUUxFVkJRVVZSTEV0QlFVdE9MRVZCUVVkTExFVkJRVlZPTEZOQlIzUkNWQ3hOUVVGTlRTeEhRVUZCUVN4RlFVRmxSU3hGUVVGRlVTeExRVUZOVWl4SFFVVjRRaXhKUVVGSlN5eExRVUZMVENJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzTmxkQzFqYjJ4c1pXTjBhVzl1TFdaeWIyMHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpeyRleHBvcnQoJGV4cG9ydC5TLHIse29mOmZ1bmN0aW9uKCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkocik7ci0tOyllW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gbmV3IHRoaXMoZSl9fSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5elpYUXRZMjlzYkdWamRHbHZiaTF2Wmk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKRFQweE1SVU5VU1U5T0lpd2lVeUlzSW05bUlpd2liR1Z1WjNSb0lpd2lZWEpuZFcxbGJuUnpJaXdpUVNJc0lrRnljbUY1SWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUXl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENTaXhSUVVGUlFTeFJRVUZSU3l4RlFVRkhSQ3hGUVVGWkxFTkJRVVZGTEVkQlFVa3NWMEZIYmtNc1NVRkdRU3hKUVVGSlF5eEZRVUZUUXl4VlFVRlZSQ3hQUVVOdVFrVXNSVUZCU1N4SlFVRkpReXhOUVVGTlNDeEhRVU5ZUVN4TFFVRlZSU3hGUVVGRlJpeEhRVUZWUXl4VlFVRlZSQ3hIUVVOMlF5eFBRVUZQTEVsQlFVbEpMRXRCUVV0R0lpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZjMlYwTFdOdmJHeGxZM1JwYjI0dGIyWXVhbk1pZlE9PSIsInZhciBhbk9iamVjdD1yZXF1aXJlKDEwKSxhRnVuY3Rpb249cmVxdWlyZSg1KSxTUEVDSUVTPXJlcXVpcmUoMTMxKShcInNwZWNpZXNcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuKXt2YXIgcix0PWFuT2JqZWN0KGUpLmNvbnN0cnVjdG9yO3JldHVybiB2b2lkIDA9PT10fHxudWxsPT0ocj1hbk9iamVjdCh0KVtTUEVDSUVTXSk/bjphRnVuY3Rpb24ocil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUxtcHpJbDBzSW01aGJXVnpJanBiSW1GdVQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltRkdkVzVqZEdsdmJpSXNJbE5RUlVOSlJWTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpVHlJc0lrUWlMQ0pUSWl3aVF5SXNJbU52Ym5OMGNuVmpkRzl5SWl3aWRXNWtaV1pwYm1Wa0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxHZENRVU51UWtNc1ZVRkJXVVFzVVVGQlVTeHBRa0ZEY0VKRkxGRkJRVlZHTEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzVjBGRGFFTkhMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCUjBNc1IwRkROVUlzU1VGRFNVTXNSVUZFUVVNc1JVRkJTVlFzVTBGQlUwMHNSMEZCUjBrc1dVRkZjRUlzV1VGQlFTeEpRVUZQUkN4SFFVRnBSRVVzVDBGQk4wSklMRVZCUVVsU0xGTkJRVk5UTEVkQlFVZE9MRlZCUVhsQ1NTeEZRVUZKVEN4VlFVRlZUU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDNOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGZhaWxzPXJlcXVpcmUoMzgpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGwsbil7cmV0dXJuISFsJiZmYWlscyhmdW5jdGlvbigpe24/bC5jYWxsKG51bGwsZnVuY3Rpb24oKXt9LDEpOmwuY2FsbChudWxsKX0pfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXpkSEpwWTNRdGJXVjBhRzlrTG1weklsMHNJbTVoYldWeklqcGJJbVpoYVd4eklpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p0WlhSb2IyUWlMQ0poY21jaUxDSmpZV3hzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWxCUVVsQkxFMUJRVkZETEZGQlFWRXNXVUZGY0VKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJVVU1zUjBGRGFrTXNVVUZCVTBRc1IwRkJWVW9zVFVGQlRTeFhRVVYyUWtzc1JVRkJUVVFzUlVGQlQwVXNTMEZCU3l4TFFVRk5MR0ZCUVRaQ0xFZEJRVXRHTEVWQlFVOUZMRXRCUVVzaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOXpkSEpwWTNRdGJXVjBhRzlrTG1wekluMD0iLCJ2YXIgY2VpbD1NYXRoLmNlaWwsZmxvb3I9TWF0aC5mbG9vcjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtyZXR1cm4gaXNOYU4obz0rbyk/MDoobz4wP2Zsb29yOmNlaWwpKG8pfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFwYm5SbFoyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTmxhV3dpTENKTllYUm9JaXdpWm14dmIzSWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSnBjMDVoVGlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzUzBGQlQwTXNTMEZCUzBRc1MwRkRXa1VzVFVGQlVVUXNTMEZCUzBNc1RVRkRha0pETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNUMEZCVDBNc1RVRkJUVVFzUjBGQlRVRXNSMEZCVFN4SFFVRkxRU3hGUVVGTExFVkJRVWxJTEUxQlFWRkdMRTFCUVUxTElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZkRzh0YVc1MFpXZGxjaTVxY3lKOSIsInZhciBpc1JlZ0V4cD1yZXF1aXJlKDU1KSxkZWZpbmVkPXJlcXVpcmUoMzEpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixpKXtpZihpc1JlZ0V4cChyKSl0aHJvdyBUeXBlRXJyb3IoXCJTdHJpbmcjXCIraStcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7cmV0dXJuIFN0cmluZyhkZWZpbmVkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RZMjl1ZEdWNGRDNXFjeUpkTENKdVlXMWxjeUk2V3lKcGMxSmxaMFY0Y0NJc0luSmxjWFZwY21VaUxDSmtaV1pwYm1Wa0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJblJvWVhRaUxDSnpaV0Z5WTJoVGRISnBibWNpTENKT1FVMUZJaXdpVkhsd1pVVnljbTl5SWl3aVUzUnlhVzVuSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVVVGQlZVUXNVVUZCVVN4alFVVjBRa1VzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGTlF5eEZRVUZqUXl4SFFVTTNReXhIUVVGSlVDeFRRVUZUVFN4SFFVRmxMRTFCUVUxRkxGVkJRVlVzVlVGQldVUXNSVUZCVHl3d1FrRkRMMFFzVDBGQlQwVXNUMEZCVDFBc1VVRkJVVWNpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5emRISnBibWN0WTI5dWRHVjRkQzVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGZhaWxzPXJlcXVpcmUoMzgpLGRlZmluZWQ9cmVxdWlyZSgzMSkscXVvdD0vXCIvZyxjcmVhdGVIVE1MPWZ1bmN0aW9uKGUscix0LGkpe3ZhciBuPVN0cmluZyhkZWZpbmVkKGUpKSxvPVwiPFwiK3I7cmV0dXJuXCJcIiE9PXQmJihvKz1cIiBcIit0Kyc9XCInK1N0cmluZyhpKS5yZXBsYWNlKHF1b3QsXCImcXVvdDtcIikrJ1wiJyksbytcIj5cIituK1wiPC9cIityK1wiPlwifTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0PXt9O3RbZV09cihjcmVhdGVIVE1MKSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqZmFpbHMoZnVuY3Rpb24oKXt2YXIgcj1cIlwiW2VdKCdcIicpO3JldHVybiByIT09ci50b0xvd2VyQ2FzZSgpfHxyLnNwbGl0KCdcIicpLmxlbmd0aD4zfSksXCJTdHJpbmdcIix0KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RhSFJ0YkM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1aaGFXeHpJaXdpWkdWbWFXNWxaQ0lzSW5GMWIzUWlMQ0pqY21WaGRHVklWRTFNSWl3aWMzUnlhVzVuSWl3aWRHRm5JaXdpWVhSMGNtbGlkWFJsSWl3aWRtRnNkV1VpTENKVElpd2lVM1J5YVc1bklpd2ljREVpTENKeVpYQnNZV05sSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrNUJUVVVpTENKbGVHVmpJaXdpVHlJc0lsQWlMQ0pHSWl3aWRHVnpkQ0lzSW5SdlRHOTNaWEpEWVhObElpd2ljM0JzYVhRaUxDSnNaVzVuZEdnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEUxQlFWRkVMRkZCUVZFc1dVRkRhRUpGTEZGQlFWVkdMRkZCUVZFc1kwRkRiRUpITEV0QlFVOHNTMEZGVUVNc1YwRkJZU3hUUVVGVlF5eEZRVUZSUXl4RlFVRkxReXhGUVVGWFF5eEhRVU5xUkN4SlFVRkpReXhGUVVGSlF5eFBRVUZQVWl4UlFVRlJSeXhKUVVOdVFrMHNSVUZCU3l4SlFVRk5UQ3hGUVVWbUxFMUJSR3RDTEV0QlFXUkRMRWxCUVd0Q1NTeEhRVUZOTEVsQlFVMUtMRVZCUVZrc1MwRkJUMGNzVDBGQlQwWXNSMEZCVDBrc1VVRkJVVlFzUzBGQlRTeFZRVUZaTEV0QlEzUkdVU3hGUVVGTExFbEJRVTFHTEVWQlFVa3NTMEZCVDBnc1JVRkJUU3hMUVVWeVEwOHNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZOUXl4SFFVTXZRaXhKUVVGSlF5eEZRVUZKTEVkQlExSkJMRVZCUVVWR0xFZEJRVkZETEVWQlFVdGFMRmxCUTJaTUxGRkJRVkZCTEZGQlFWRnRRaXhGUVVGSmJrSXNVVUZCVVc5Q0xFVkJRVWxzUWl4TlFVRk5MRmRCUTNCRExFbEJRVWx0UWl4RlFVRlBMRWRCUVVkTUxFZEJRVTBzUzBGRGNFSXNUMEZCVDBzc1NVRkJVMEVzUlVGQlMwTXNaVUZCYVVKRUxFVkJRVXRGTEUxQlFVMHNTMEZCUzBNc1QwRkJVeXhKUVVNM1JDeFRRVUZWVGlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1gzTjBjbWx1Wnkxb2RHMXNMbXB6SW4wPSIsInZhciB0b0xlbmd0aD1yZXF1aXJlKDEyMCkscmVwZWF0PXJlcXVpcmUoMTEyKSxkZWZpbmVkPXJlcXVpcmUoMzEpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscix0LG4pe3ZhciBpPVN0cmluZyhkZWZpbmVkKGUpKSxnPWkubGVuZ3RoLGw9dm9pZCAwPT09dD9cIiBcIjpTdHJpbmcodCksYT10b0xlbmd0aChyKTtpZihhPD1nfHxcIlwiPT1sKXJldHVybiBpO3ZhciBkPWEtZyxoPXJlcGVhdC5jYWxsKGwsTWF0aC5jZWlsKGQvbC5sZW5ndGgpKTtyZXR1cm4gaC5sZW5ndGg+ZCYmKGg9aC5zbGljZSgwLGQpKSxuP2graTppK2h9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emRISnBibWN0Y0dGa0xtcHpJbDBzSW01aGJXVnpJanBiSW5SdlRHVnVaM1JvSWl3aWNtVnhkV2x5WlNJc0luSmxjR1ZoZENJc0ltUmxabWx1WldRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lkR2hoZENJc0ltMWhlRXhsYm1kMGFDSXNJbVpwYkd4VGRISnBibWNpTENKc1pXWjBJaXdpVXlJc0lsTjBjbWx1WnlJc0luTjBjbWx1WjB4bGJtZDBhQ0lzSW14bGJtZDBhQ0lzSW1acGJHeFRkSElpTENKcGJuUk5ZWGhNWlc1bmRHZ2lMQ0ptYVd4c1RHVnVJaXdpYzNSeWFXNW5SbWxzYkdWeUlpd2lZMkZzYkNJc0lrMWhkR2dpTENKalpXbHNJaXdpYzJ4cFkyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFBRVUZUUkN4UlFVRlJMRzlDUVVOcVFrVXNVVUZCVlVZc1VVRkJVU3hqUVVWMFFrY3NUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZOUXl4RlFVRlhReXhGUVVGWlF5eEhRVU4wUkN4SlFVRkpReXhGUVVGSlF5eFBRVUZQVWl4UlFVRlJSeXhKUVVOdVFrMHNSVUZCWlVZc1JVRkJSVWNzVDBGRGFrSkRMRTlCUVVGQkxFbEJRVlZPTEVWQlFUSkNMRWxCUVUxSExFOUJRVTlJTEVkQlEyeEVUeXhGUVVGbFppeFRRVUZUVHl4SFFVTTFRaXhIUVVGSlVTeEhRVUZuUWtnc1IwRkJNa0lzU1VGQldFVXNSVUZCWlN4UFFVRlBTaXhGUVVNeFJDeEpRVUZKVFN4RlFVRlZSQ3hGUVVGbFNDeEZRVU42UWtzc1JVRkJaV1lzVDBGQlQyZENMRXRCUVV0S0xFVkJRVk5MTEV0QlFVdERMRXRCUVV0S0xFVkJRVlZHTEVWQlFWRkVMRk5CUlhCRkxFOUJSRWxKTEVWQlFXRktMRTlCUVZOSExFbEJRVk5ETEVWQlFXVkJMRVZCUVdGSkxFMUJRVTBzUlVGQlIwd3NTVUZEYWtWUUxFVkJRVTlSTEVWQlFXVlFMRVZCUVVsQkxFVkJRVWxQSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4ZmMzUnlhVzVuTFhCaFpDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHRvSW50ZWdlcj1yZXF1aXJlKDExOCksZGVmaW5lZD1yZXF1aXJlKDMxKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcj1TdHJpbmcoZGVmaW5lZCh0aGlzKSksdD1cIlwiLG49dG9JbnRlZ2VyKGUpO2lmKG48MHx8bj09MS8wKXRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtmb3IoO24+MDsobj4+Pj0xKSYmKHIrPXIpKTEmbiYmKHQrPXIpO3JldHVybiB0fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXpkSEpwYm1jdGNtVndaV0YwTG1weklsMHNJbTVoYldWeklqcGJJblJ2U1c1MFpXZGxjaUlzSW5KbGNYVnBjbVVpTENKa1pXWnBibVZrSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltTnZkVzUwSWl3aWMzUnlJaXdpVTNSeWFXNW5JaXdpZEdocGN5SXNJbkpsY3lJc0ltNGlMQ0pKYm1acGJtbDBlU0lzSWxKaGJtZGxSWEp5YjNJaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNWVUZCV1VNc1VVRkJVU3hwUWtGRGNFSkRMRkZCUVZWRUxGRkJRVkVzWTBGRmRFSkZMRTlCUVU5RExGRkJRVlVzVTBGQlowSkRMRWRCUXk5Q0xFbEJRVWxETEVWQlFVMURMRTlCUVU5TUxGRkJRVkZOTEU5QlEzSkNReXhGUVVGTkxFZEJRMDVETEVWQlFVbFdMRlZCUVZWTExFZEJRMnhDTEVkQlFVbExMRVZCUVVrc1IwRkJTMEVzUjBGQlMwTXNSVUZCUVVFc1JVRkJWU3hOUVVGTlF5eFhRVUZYTERKQ1FVTTNReXhMUVVGTlJpeEZRVUZKTEVkQlFVbEJMRXRCUVU4c1MwRkJUMG9zUjBGQlQwRXNSMEZCWXl4RlFVRktTU3hKUVVGUFJDeEhRVUZQU0N4SFFVTXpSQ3hQUVVGUFJ5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNYM04wY21sdVp5MXlaWEJsWVhRdWFuTWlmUT09IiwidmFyIHRvSW50ZWdlcj1yZXF1aXJlKDExOCksdG9MZW5ndGg9cmVxdWlyZSgxMjApO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIDA7dmFyIHI9dG9JbnRlZ2VyKGUpLHQ9dG9MZW5ndGgocik7aWYociE9PXQpdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIGxlbmd0aCFcIik7cmV0dXJuIHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGJ5MXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXeUowYjBsdWRHVm5aWElpTENKeVpYRjFhWEpsSWl3aWRHOU1aVzVuZEdnaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWFFpTENKdWRXMWlaWElpTENKc1pXNW5kR2dpTENKU1lXNW5aVVZ5Y205eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHbENRVU53UWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEZGtKRkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzVVVGQlFTeEpRVUZKUVN4RlFVRnJRaXhQUVVGUExFVkJRemRDTEVsQlFVbERMRVZCUVZOT0xGVkJRVlZMTEVkQlEyNUNSU3hGUVVGVFRDeFRRVUZUU1N4SFFVTjBRaXhIUVVGSlFTeEpRVUZYUXl4RlFVRlJMRTFCUVUxRExGZEJRVmNzYVVKQlEzaERMRTlCUVU5RUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGZkRzh0YVc1a1pYZ3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2lmKHJlcXVpcmUoMzIpKXt2YXIgTElCUkFSWT1yZXF1aXJlKDYyKSxnbG9iYWw9cmVxdWlyZSg0MyksZmFpbHM9cmVxdWlyZSgzOCksJGV4cG9ydD1yZXF1aXJlKDM2KSwkdHlwZWQ9cmVxdWlyZSgxMjUpLCRidWZmZXI9cmVxdWlyZSgxMjQpLGN0eD1yZXF1aXJlKDI4KSxhbkluc3RhbmNlPXJlcXVpcmUoOSkscHJvcGVydHlEZXNjPXJlcXVpcmUoOTIpLGhpZGU9cmVxdWlyZSg0NSkscmVkZWZpbmVBbGw9cmVxdWlyZSg5MyksdG9JbnRlZ2VyPXJlcXVpcmUoMTE4KSx0b0xlbmd0aD1yZXF1aXJlKDEyMCksdG9JbmRleD1yZXF1aXJlKDExNyksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoMTE2KSx0b1ByaW1pdGl2ZT1yZXF1aXJlKDEyMiksaGFzPXJlcXVpcmUoNDQpLGNsYXNzb2Y9cmVxdWlyZSgyMCksaXNPYmplY3Q9cmVxdWlyZSg1NCksdG9PYmplY3Q9cmVxdWlyZSgxMjEpLGlzQXJyYXlJdGVyPXJlcXVpcmUoNTEpLGNyZWF0ZT1yZXF1aXJlKDczKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKDgxKSxnT1BOPXJlcXVpcmUoNzkpLmYsZ2V0SXRlckZuPXJlcXVpcmUoMTMyKSx1aWQ9cmVxdWlyZSgxMjYpLHdrcz1yZXF1aXJlKDEzMSksY3JlYXRlQXJyYXlNZXRob2Q9cmVxdWlyZSgxNSksY3JlYXRlQXJyYXlJbmNsdWRlcz1yZXF1aXJlKDE0KSxzcGVjaWVzQ29uc3RydWN0b3I9cmVxdWlyZSgxMDYpLEFycmF5SXRlcmF0b3JzPXJlcXVpcmUoMTQ0KSxJdGVyYXRvcnM9cmVxdWlyZSg2MSksJGl0ZXJEZXRlY3Q9cmVxdWlyZSg1OSksc2V0U3BlY2llcz1yZXF1aXJlKDEwMiksYXJyYXlGaWxsPXJlcXVpcmUoMTIpLGFycmF5Q29weVdpdGhpbj1yZXF1aXJlKDExKSwkRFA9cmVxdWlyZSg3NCksJEdPUEQ9cmVxdWlyZSg3NyksZFA9JERQLmYsZ09QRD0kR09QRC5mLFJhbmdlRXJyb3I9Z2xvYmFsLlJhbmdlRXJyb3IsVHlwZUVycm9yPWdsb2JhbC5UeXBlRXJyb3IsVWludDhBcnJheT1nbG9iYWwuVWludDhBcnJheSxBcnJheVByb3RvPUFycmF5LnByb3RvdHlwZSwkQXJyYXlCdWZmZXI9JGJ1ZmZlci5BcnJheUJ1ZmZlciwkRGF0YVZpZXc9JGJ1ZmZlci5EYXRhVmlldyxhcnJheUZvckVhY2g9Y3JlYXRlQXJyYXlNZXRob2QoMCksYXJyYXlGaWx0ZXI9Y3JlYXRlQXJyYXlNZXRob2QoMiksYXJyYXlTb21lPWNyZWF0ZUFycmF5TWV0aG9kKDMpLGFycmF5RXZlcnk9Y3JlYXRlQXJyYXlNZXRob2QoNCksYXJyYXlGaW5kPWNyZWF0ZUFycmF5TWV0aG9kKDUpLGFycmF5RmluZEluZGV4PWNyZWF0ZUFycmF5TWV0aG9kKDYpLGFycmF5SW5jbHVkZXM9Y3JlYXRlQXJyYXlJbmNsdWRlcyghMCksYXJyYXlJbmRleE9mPWNyZWF0ZUFycmF5SW5jbHVkZXMoITEpLGFycmF5VmFsdWVzPUFycmF5SXRlcmF0b3JzLnZhbHVlcyxhcnJheUtleXM9QXJyYXlJdGVyYXRvcnMua2V5cyxhcnJheUVudHJpZXM9QXJyYXlJdGVyYXRvcnMuZW50cmllcyxhcnJheUxhc3RJbmRleE9mPUFycmF5UHJvdG8ubGFzdEluZGV4T2YsYXJyYXlSZWR1Y2U9QXJyYXlQcm90by5yZWR1Y2UsYXJyYXlSZWR1Y2VSaWdodD1BcnJheVByb3RvLnJlZHVjZVJpZ2h0LGFycmF5Sm9pbj1BcnJheVByb3RvLmpvaW4sYXJyYXlTb3J0PUFycmF5UHJvdG8uc29ydCxhcnJheVNsaWNlPUFycmF5UHJvdG8uc2xpY2UsYXJyYXlUb1N0cmluZz1BcnJheVByb3RvLnRvU3RyaW5nLGFycmF5VG9Mb2NhbGVTdHJpbmc9QXJyYXlQcm90by50b0xvY2FsZVN0cmluZyxJVEVSQVRPUj13a3MoXCJpdGVyYXRvclwiKSxUQUc9d2tzKFwidG9TdHJpbmdUYWdcIiksVFlQRURfQ09OU1RSVUNUT1I9dWlkKFwidHlwZWRfY29uc3RydWN0b3JcIiksREVGX0NPTlNUUlVDVE9SPXVpZChcImRlZl9jb25zdHJ1Y3RvclwiKSxBTExfQ09OU1RSVUNUT1JTPSR0eXBlZC5DT05TVFIsVFlQRURfQVJSQVk9JHR5cGVkLlRZUEVELFZJRVc9JHR5cGVkLlZJRVcsJG1hcD1jcmVhdGVBcnJheU1ldGhvZCgxLGZ1bmN0aW9uKHIsZSl7cmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihyLHJbREVGX0NPTlNUUlVDVE9SXSksZSl9KSxMSVRUTEVfRU5ESUFOPWZhaWxzKGZ1bmN0aW9uKCl7cmV0dXJuIDE9PT1uZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdfSksRk9SQ0VEX1NFVD0hIVVpbnQ4QXJyYXkmJiEhVWludDhBcnJheS5wcm90b3R5cGUuc2V0JiZmYWlscyhmdW5jdGlvbigpe25ldyBVaW50OEFycmF5KDEpLnNldCh7fSl9KSx0b09mZnNldD1mdW5jdGlvbihyLGUpe3ZhciB0PXRvSW50ZWdlcihyKTtpZih0PDB8fHQlZSl0aHJvdyBSYW5nZUVycm9yKFwiV3Jvbmcgb2Zmc2V0IVwiKTtyZXR1cm4gdH0sdmFsaWRhdGU9ZnVuY3Rpb24ocil7aWYoaXNPYmplY3QocikmJlRZUEVEX0FSUkFZIGluIHIpcmV0dXJuIHI7dGhyb3cgVHlwZUVycm9yKHIrXCIgaXMgbm90IGEgdHlwZWQgYXJyYXkhXCIpfSxhbGxvY2F0ZT1mdW5jdGlvbihyLGUpe2lmKCEoaXNPYmplY3QocikmJlRZUEVEX0NPTlNUUlVDVE9SIGluIHIpKXRocm93IFR5cGVFcnJvcihcIkl0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIVwiKTtyZXR1cm4gbmV3IHIoZSl9LHNwZWNpZXNGcm9tTGlzdD1mdW5jdGlvbihyLGUpe3JldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IocixyW0RFRl9DT05TVFJVQ1RPUl0pLGUpfSxmcm9tTGlzdD1mdW5jdGlvbihyLGUpe2Zvcih2YXIgdD0wLGE9ZS5sZW5ndGgsbz1hbGxvY2F0ZShyLGEpO2E+dDspb1t0XT1lW3QrK107cmV0dXJuIG99LGFkZEdldHRlcj1mdW5jdGlvbihyLGUsdCl7ZFAocixlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZFt0XX19KX0sJGZyb209ZnVuY3Rpb24ocil7dmFyIGUsdCxhLG8saSxuLHM9dG9PYmplY3QociksYz1hcmd1bWVudHMubGVuZ3RoLHU9Yz4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbD12b2lkIDAhPT11LGY9Z2V0SXRlckZuKHMpO2lmKG51bGwhPWYmJiFpc0FycmF5SXRlcihmKSl7Zm9yKG49Zi5jYWxsKHMpLGE9W10sZT0wOyEoaT1uLm5leHQoKSkuZG9uZTtlKyspYS5wdXNoKGkudmFsdWUpO3M9YX1mb3IobCYmYz4yJiYodT1jdHgodSxhcmd1bWVudHNbMl0sMikpLGU9MCx0PXRvTGVuZ3RoKHMubGVuZ3RoKSxvPWFsbG9jYXRlKHRoaXMsdCk7dD5lO2UrKylvW2VdPWw/dShzW2VdLGUpOnNbZV07cmV0dXJuIG99LCRvZj1mdW5jdGlvbigpe2Zvcih2YXIgcj0wLGU9YXJndW1lbnRzLmxlbmd0aCx0PWFsbG9jYXRlKHRoaXMsZSk7ZT5yOyl0W3JdPWFyZ3VtZW50c1tyKytdO3JldHVybiB0fSxUT19MT0NBTEVfQlVHPSEhVWludDhBcnJheSYmZmFpbHMoZnVuY3Rpb24oKXthcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpfSksJHRvTG9jYWxlU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRz9hcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpOnZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LHByb3RvPXtjb3B5V2l0aGluOmZ1bmN0aW9uKHIsZSl7cmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLHIsZSxhcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMCl9LGV2ZXJ5OmZ1bmN0aW9uKHIpe3JldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLHIsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxmaWxsOmZ1bmN0aW9uKHIpe3JldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksYXJndW1lbnRzKX0sZmlsdGVyOmZ1bmN0aW9uKHIpe3JldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcyxhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKSl9LGZpbmQ6ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sZmluZEluZGV4OmZ1bmN0aW9uKHIpe3JldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sZm9yRWFjaDpmdW5jdGlvbihyKXthcnJheUZvckVhY2godmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGluZGV4T2Y6ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0saW5jbHVkZXM6ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGpvaW46ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSxhcmd1bWVudHMpfSxsYXN0SW5kZXhPZjpmdW5jdGlvbihyKXtyZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSxhcmd1bWVudHMpfSxtYXA6ZnVuY3Rpb24ocil7cmV0dXJuICRtYXAodmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LHJlZHVjZTpmdW5jdGlvbihyKXtyZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksYXJndW1lbnRzKX0scmVkdWNlUmlnaHQ6ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksYXJndW1lbnRzKX0scmV2ZXJzZTpmdW5jdGlvbigpe2Zvcih2YXIgcixlPXZhbGlkYXRlKHRoaXMpLmxlbmd0aCx0PU1hdGguZmxvb3IoZS8yKSxhPTA7YTx0OylyPXRoaXNbYV0sdGhpc1thKytdPXRoaXNbLS1lXSx0aGlzW2VdPXI7cmV0dXJuIHRoaXN9LHNvbWU6ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sc29ydDpmdW5jdGlvbihyKXtyZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcykscil9LHN1YmFycmF5OmZ1bmN0aW9uKHIsZSl7dmFyIHQ9dmFsaWRhdGUodGhpcyksYT10Lmxlbmd0aCxvPXRvQWJzb2x1dGVJbmRleChyLGEpO3JldHVybiBuZXcoc3BlY2llc0NvbnN0cnVjdG9yKHQsdFtERUZfQ09OU1RSVUNUT1JdKSkodC5idWZmZXIsdC5ieXRlT2Zmc2V0K28qdC5CWVRFU19QRVJfRUxFTUVOVCx0b0xlbmd0aCgodm9pZCAwPT09ZT9hOnRvQWJzb2x1dGVJbmRleChlLGEpKS1vKSl9fSwkc2xpY2U9ZnVuY3Rpb24ocixlKXtyZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLHIsZSkpfSwkc2V0PWZ1bmN0aW9uKHIpe3ZhbGlkYXRlKHRoaXMpO3ZhciBlPXRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwxKSx0PXRoaXMubGVuZ3RoLGE9dG9PYmplY3Qociksbz10b0xlbmd0aChhLmxlbmd0aCksaT0wO2lmKG8rZT50KXRocm93IFJhbmdlRXJyb3IoXCJXcm9uZyBsZW5ndGghXCIpO2Zvcig7aTxvOyl0aGlzW2UraV09YVtpKytdfSwkaXRlcmF0b3JzPXtlbnRyaWVzOmZ1bmN0aW9uKCl7cmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKX0sa2V5czpmdW5jdGlvbigpe3JldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSl9LHZhbHVlczpmdW5jdGlvbigpe3JldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKX19LGlzVEFJbmRleD1mdW5jdGlvbihyLGUpe3JldHVybiBpc09iamVjdChyKSYmcltUWVBFRF9BUlJBWV0mJlwic3ltYm9sXCIhPXR5cGVvZiBlJiZlIGluIHImJlN0cmluZygrZSk9PVN0cmluZyhlKX0sJGdldERlc2M9ZnVuY3Rpb24ocixlKXtyZXR1cm4gaXNUQUluZGV4KHIsZT10b1ByaW1pdGl2ZShlLCEwKSk/cHJvcGVydHlEZXNjKDIscltlXSk6Z09QRChyLGUpfSwkc2V0RGVzYz1mdW5jdGlvbihyLGUsdCl7cmV0dXJuIShpc1RBSW5kZXgocixlPXRvUHJpbWl0aXZlKGUsITApKSYmaXNPYmplY3QodCkmJmhhcyh0LFwidmFsdWVcIikpfHxoYXModCxcImdldFwiKXx8aGFzKHQsXCJzZXRcIil8fHQuY29uZmlndXJhYmxlfHxoYXModCxcIndyaXRhYmxlXCIpJiYhdC53cml0YWJsZXx8aGFzKHQsXCJlbnVtZXJhYmxlXCIpJiYhdC5lbnVtZXJhYmxlP2RQKHIsZSx0KToocltlXT10LnZhbHVlLHIpfTtBTExfQ09OU1RSVUNUT1JTfHwoJEdPUEQuZj0kZ2V0RGVzYywkRFAuZj0kc2V0RGVzYyksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiFBTExfQ09OU1RSVUNUT1JTLFwiT2JqZWN0XCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcjokZ2V0RGVzYyxkZWZpbmVQcm9wZXJ0eTokc2V0RGVzY30pLGZhaWxzKGZ1bmN0aW9uKCl7YXJyYXlUb1N0cmluZy5jYWxsKHt9KX0pJiYoYXJyYXlUb1N0cmluZz1hcnJheVRvTG9jYWxlU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpfSk7dmFyICRUeXBlZEFycmF5UHJvdG90eXBlJD1yZWRlZmluZUFsbCh7fSxwcm90byk7cmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCRpdGVyYXRvcnMpLGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLElURVJBVE9SLCRpdGVyYXRvcnMudmFsdWVzKSxyZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQse3NsaWNlOiRzbGljZSxzZXQ6JHNldCxjb25zdHJ1Y3RvcjpmdW5jdGlvbigpe30sdG9TdHJpbmc6YXJyYXlUb1N0cmluZyx0b0xvY2FsZVN0cmluZzokdG9Mb2NhbGVTdHJpbmd9KSxhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLFwiYnVmZmVyXCIsXCJiXCIpLGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsXCJieXRlT2Zmc2V0XCIsXCJvXCIpLGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsXCJieXRlTGVuZ3RoXCIsXCJsXCIpLGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsXCJsZW5ndGhcIixcImVcIiksZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLFRBRyx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbVFlQRURfQVJSQVldfX0pLG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSx0LGEpe3ZhciBvPXIrKChhPSEhYSk/XCJDbGFtcGVkXCI6XCJcIikrXCJBcnJheVwiLGk9XCJnZXRcIityLG49XCJzZXRcIityLHM9Z2xvYmFsW29dLGM9c3x8e30sdT1zJiZnZXRQcm90b3R5cGVPZihzKSxsPSFzfHwhJHR5cGVkLkFCVixmPXt9LHk9cyYmcy5wcm90b3R5cGUsZD1mdW5jdGlvbihyLHQpe2RQKHIsdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHIsdCl7dmFyIGE9ci5fZDtyZXR1cm4gYS52W2ldKHQqZSthLm8sTElUVExFX0VORElBTil9KHRoaXMsdCl9LHNldDpmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24ocix0LG8pe3ZhciBpPXIuX2Q7YSYmKG89KG89TWF0aC5yb3VuZChvKSk8MD8wOm8+MjU1PzI1NToyNTUmbyksaS52W25dKHQqZStpLm8sbyxMSVRUTEVfRU5ESUFOKX0odGhpcyx0LHIpfSxlbnVtZXJhYmxlOiEwfSl9O2w/KHM9dChmdW5jdGlvbihyLHQsYSxpKXthbkluc3RhbmNlKHIscyxvLFwiX2RcIik7dmFyIG4sYyx1LGwsZj0wLHk9MDtpZihpc09iamVjdCh0KSl7aWYoISh0IGluc3RhbmNlb2YgJEFycmF5QnVmZmVyfHxcIkFycmF5QnVmZmVyXCI9PShsPWNsYXNzb2YodCkpfHxcIlNoYXJlZEFycmF5QnVmZmVyXCI9PWwpKXJldHVybiBUWVBFRF9BUlJBWSBpbiB0P2Zyb21MaXN0KHMsdCk6JGZyb20uY2FsbChzLHQpO249dCx5PXRvT2Zmc2V0KGEsZSk7dmFyIHA9dC5ieXRlTGVuZ3RoO2lmKHZvaWQgMD09PWkpe2lmKHAlZSl0aHJvdyBSYW5nZUVycm9yKFwiV3JvbmcgbGVuZ3RoIVwiKTtpZigoYz1wLXkpPDApdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIGxlbmd0aCFcIil9ZWxzZSBpZigoYz10b0xlbmd0aChpKSplKSt5PnApdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIGxlbmd0aCFcIik7dT1jL2V9ZWxzZSB1PXRvSW5kZXgodCksbj1uZXcgJEFycmF5QnVmZmVyKGM9dSplKTtmb3IoaGlkZShyLFwiX2RcIix7YjpuLG86eSxsOmMsZTp1LHY6bmV3ICREYXRhVmlldyhuKX0pO2Y8dTspZChyLGYrKyl9KSx5PXMucHJvdG90eXBlPWNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpLGhpZGUoeSxcImNvbnN0cnVjdG9yXCIscykpOmZhaWxzKGZ1bmN0aW9uKCl7cygxKX0pJiZmYWlscyhmdW5jdGlvbigpe25ldyBzKC0xKX0pJiYkaXRlckRldGVjdChmdW5jdGlvbihyKXtuZXcgcyxuZXcgcyhudWxsKSxuZXcgcygxLjUpLG5ldyBzKHIpfSwhMCl8fChzPXQoZnVuY3Rpb24ocix0LGEsaSl7dmFyIG47cmV0dXJuIGFuSW5zdGFuY2UocixzLG8pLGlzT2JqZWN0KHQpP3QgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXJ8fFwiQXJyYXlCdWZmZXJcIj09KG49Y2xhc3NvZih0KSl8fFwiU2hhcmVkQXJyYXlCdWZmZXJcIj09bj92b2lkIDAhPT1pP25ldyBjKHQsdG9PZmZzZXQoYSxlKSxpKTp2b2lkIDAhPT1hP25ldyBjKHQsdG9PZmZzZXQoYSxlKSk6bmV3IGModCk6VFlQRURfQVJSQVkgaW4gdD9mcm9tTGlzdChzLHQpOiRmcm9tLmNhbGwocyx0KTpuZXcgYyh0b0luZGV4KHQpKX0pLGFycmF5Rm9yRWFjaCh1IT09RnVuY3Rpb24ucHJvdG90eXBlP2dPUE4oYykuY29uY2F0KGdPUE4odSkpOmdPUE4oYyksZnVuY3Rpb24ocil7ciBpbiBzfHxoaWRlKHMscixjW3JdKX0pLHMucHJvdG90eXBlPXksTElCUkFSWXx8KHkuY29uc3RydWN0b3I9cykpO3ZhciBwPXlbSVRFUkFUT1JdLGg9ISFwJiYoXCJ2YWx1ZXNcIj09cC5uYW1lfHxudWxsPT1wLm5hbWUpLGc9JGl0ZXJhdG9ycy52YWx1ZXM7aGlkZShzLFRZUEVEX0NPTlNUUlVDVE9SLCEwKSxoaWRlKHksVFlQRURfQVJSQVksbyksaGlkZSh5LFZJRVcsITApLGhpZGUoeSxERUZfQ09OU1RSVUNUT1IscyksKGE/bmV3IHMoMSlbVEFHXT09bzpUQUcgaW4geSl8fGRQKHksVEFHLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KSxmW29dPXMsJGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5XKyRleHBvcnQuRioocyE9YyksZiksJGV4cG9ydCgkZXhwb3J0LlMsbyx7QllURVNfUEVSX0VMRU1FTlQ6ZX0pLCRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRipmYWlscyhmdW5jdGlvbigpe2Mub2YuY2FsbChzLDEpfSksbyx7ZnJvbTokZnJvbSxvZjokb2Z9KSxcIkJZVEVTX1BFUl9FTEVNRU5UXCJpbiB5fHxoaWRlKHksXCJCWVRFU19QRVJfRUxFTUVOVFwiLGUpLCRleHBvcnQoJGV4cG9ydC5QLG8scHJvdG8pLHNldFNwZWNpZXMobyksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKkZPUkNFRF9TRVQsbyx7c2V0OiRzZXR9KSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIWgsbywkaXRlcmF0b3JzKSxMSUJSQVJZfHx5LnRvU3RyaW5nPT1hcnJheVRvU3RyaW5nfHwoeS50b1N0cmluZz1hcnJheVRvU3RyaW5nKSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqZmFpbHMoZnVuY3Rpb24oKXtuZXcgcygxKS5zbGljZSgpfSksbyx7c2xpY2U6JHNsaWNlfSksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKihmYWlscyhmdW5jdGlvbigpe3JldHVyblsxLDJdLnRvTG9jYWxlU3RyaW5nKCkhPW5ldyBzKFsxLDJdKS50b0xvY2FsZVN0cmluZygpfSl8fCFmYWlscyhmdW5jdGlvbigpe3kudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwyXSl9KSksbyx7dG9Mb2NhbGVTdHJpbmc6JHRvTG9jYWxlU3RyaW5nfSksSXRlcmF0b3JzW29dPWg/cDpnLExJQlJBUll8fGh8fGhpZGUoeSxJVEVSQVRPUixnKX19ZWxzZSBtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbigpe307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwZVhCbFpDMWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpVEVsQ1VrRlNXU0lzSW1kc2IySmhiQ0lzSW1aaGFXeHpJaXdpSkdWNGNHOXlkQ0lzSWlSMGVYQmxaQ0lzSWlSaWRXWm1aWElpTENKamRIZ2lMQ0poYmtsdWMzUmhibU5sSWl3aWNISnZjR1Z5ZEhsRVpYTmpJaXdpYUdsa1pTSXNJbkpsWkdWbWFXNWxRV3hzSWl3aWRHOUpiblJsWjJWeUlpd2lkRzlNWlc1bmRHZ2lMQ0owYjBsdVpHVjRJaXdpZEc5QlluTnZiSFYwWlVsdVpHVjRJaXdpZEc5UWNtbHRhWFJwZG1VaUxDSm9ZWE1pTENKamJHRnpjMjltSWl3aWFYTlBZbXBsWTNRaUxDSjBiMDlpYW1WamRDSXNJbWx6UVhKeVlYbEpkR1Z5SWl3aVkzSmxZWFJsSWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKblQxQk9JaXdpWmlJc0ltZGxkRWwwWlhKR2JpSXNJblZwWkNJc0luZHJjeUlzSW1OeVpXRjBaVUZ5Y21GNVRXVjBhRzlrSWl3aVkzSmxZWFJsUVhKeVlYbEpibU5zZFdSbGN5SXNJbk53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaUlzSWtGeWNtRjVTWFJsY21GMGIzSnpJaXdpU1hSbGNtRjBiM0p6SWl3aUpHbDBaWEpFWlhSbFkzUWlMQ0p6WlhSVGNHVmphV1Z6SWl3aVlYSnlZWGxHYVd4c0lpd2lZWEp5WVhsRGIzQjVWMmwwYUdsdUlpd2lKRVJRSWl3aUpFZFBVRVFpTENKa1VDSXNJbWRQVUVRaUxDSlNZVzVuWlVWeWNtOXlJaXdpVkhsd1pVVnljbTl5SWl3aVZXbHVkRGhCY25KaGVTSXNJa0Z5Y21GNVVISnZkRzhpTENKQmNuSmhlU0lzSW5CeWIzUnZkSGx3WlNJc0lpUkJjbkpoZVVKMVptWmxjaUlzSWtGeWNtRjVRblZtWm1WeUlpd2lKRVJoZEdGV2FXVjNJaXdpUkdGMFlWWnBaWGNpTENKaGNuSmhlVVp2Y2tWaFkyZ2lMQ0poY25KaGVVWnBiSFJsY2lJc0ltRnljbUY1VTI5dFpTSXNJbUZ5Y21GNVJYWmxjbmtpTENKaGNuSmhlVVpwYm1RaUxDSmhjbkpoZVVacGJtUkpibVJsZUNJc0ltRnljbUY1U1c1amJIVmtaWE1pTENKaGNuSmhlVWx1WkdWNFQyWWlMQ0poY25KaGVWWmhiSFZsY3lJc0luWmhiSFZsY3lJc0ltRnljbUY1UzJWNWN5SXNJbXRsZVhNaUxDSmhjbkpoZVVWdWRISnBaWE1pTENKbGJuUnlhV1Z6SWl3aVlYSnlZWGxNWVhOMFNXNWtaWGhQWmlJc0lteGhjM1JKYm1SbGVFOW1JaXdpWVhKeVlYbFNaV1IxWTJVaUxDSnlaV1IxWTJVaUxDSmhjbkpoZVZKbFpIVmpaVkpwWjJoMElpd2ljbVZrZFdObFVtbG5hSFFpTENKaGNuSmhlVXB2YVc0aUxDSnFiMmx1SWl3aVlYSnlZWGxUYjNKMElpd2ljMjl5ZENJc0ltRnljbUY1VTJ4cFkyVWlMQ0p6YkdsalpTSXNJbUZ5Y21GNVZHOVRkSEpwYm1jaUxDSjBiMU4wY21sdVp5SXNJbUZ5Y21GNVZHOU1iMk5oYkdWVGRISnBibWNpTENKMGIweHZZMkZzWlZOMGNtbHVaeUlzSWtsVVJWSkJWRTlTSWl3aVZFRkhJaXdpVkZsUVJVUmZRMDlPVTFSU1ZVTlVUMUlpTENKRVJVWmZRMDlPVTFSU1ZVTlVUMUlpTENKQlRFeGZRMDlPVTFSU1ZVTlVUMUpUSWl3aVEwOU9VMVJTSWl3aVZGbFFSVVJmUVZKU1FWa2lMQ0pVV1ZCRlJDSXNJbFpKUlZjaUxDSWtiV0Z3SWl3aVR5SXNJbXhsYm1kMGFDSXNJbUZzYkc5allYUmxJaXdpVEVsVVZFeEZYMFZPUkVsQlRpSXNJbFZwYm5ReE5rRnljbUY1SWl3aVluVm1abVZ5SWl3aVJrOVNRMFZFWDFORlZDSXNJbk5sZENJc0luUnZUMlptYzJWMElpd2lhWFFpTENKQ1dWUkZVeUlzSW05bVpuTmxkQ0lzSW5aaGJHbGtZWFJsSWl3aVF5SXNJbk53WldOcFpYTkdjbTl0VEdsemRDSXNJbXhwYzNRaUxDSm1jbTl0VEdsemRDSXNJbWx1WkdWNElpd2ljbVZ6ZFd4MElpd2lZV1JrUjJWMGRHVnlJaXdpYTJWNUlpd2lhVzUwWlhKdVlXd2lMQ0puWlhRaUxDSjBhR2x6SWl3aVgyUWlMQ0lrWm5KdmJTSXNJbk52ZFhKalpTSXNJbWtpTENKemRHVndJaXdpYVhSbGNtRjBiM0lpTENKaFRHVnVJaXdpWVhKbmRXMWxiblJ6SWl3aWJXRndabTRpTENKdFlYQndhVzVuSWl3aWFYUmxja1p1SWl3aWRXNWtaV1pwYm1Wa0lpd2lZMkZzYkNJc0ltNWxlSFFpTENKa2IyNWxJaXdpY0hWemFDSXNJblpoYkhWbElpd2lKRzltSWl3aVZFOWZURTlEUVV4RlgwSlZSeUlzSWlSMGIweHZZMkZzWlZOMGNtbHVaeUlzSW1Gd2NHeDVJaXdpY0hKdmRHOGlMQ0pqYjNCNVYybDBhR2x1SWl3aWRHRnlaMlYwSWl3aWMzUmhjblFpTENKbGRtVnllU0lzSW1OaGJHeGlZV05yWm00aUxDSm1hV3hzSWl3aVptbHNkR1Z5SWl3aVptbHVaQ0lzSW5CeVpXUnBZMkYwWlNJc0ltWnBibVJKYm1SbGVDSXNJbVp2Y2tWaFkyZ2lMQ0pwYm1SbGVFOW1JaXdpYzJWaGNtTm9SV3hsYldWdWRDSXNJbWx1WTJ4MVpHVnpJaXdpYzJWd1lYSmhkRzl5SWl3aWJXRndJaXdpY21WMlpYSnpaU0lzSW0xcFpHUnNaU0lzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJbk52YldVaUxDSmpiMjF3WVhKbFptNGlMQ0p6ZFdKaGNuSmhlU0lzSW1KbFoybHVJaXdpWlc1a0lpd2lKR0psWjJsdUlpd2lZbmwwWlU5bVpuTmxkQ0lzSWtKWlZFVlRYMUJGVWw5RlRFVk5SVTVVSWl3aUpITnNhV05sSWl3aUpITmxkQ0lzSW1GeWNtRjVUR2xyWlNJc0luTnlZeUlzSW14bGJpSXNJaVJwZEdWeVlYUnZjbk1pTENKcGMxUkJTVzVrWlhnaUxDSlRkSEpwYm1jaUxDSWtaMlYwUkdWell5SXNJaVJ6WlhSRVpYTmpJaXdpWkdWell5SXNJbU52Ym1acFozVnlZV0pzWlNJc0luZHlhWFJoWW14bElpd2laVzUxYldWeVlXSnNaU0lzSWxNaUxDSkdJaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0lrVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNRaUxDSmpiMjV6ZEhKMVkzUnZjaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKTFJWa2lMQ0ozY21Gd2NHVnlJaXdpUTB4QlRWQkZSQ0lzSWs1QlRVVWlMQ0pIUlZSVVJWSWlMQ0pUUlZSVVJWSWlMQ0pVZVhCbFpFRnljbUY1SWl3aVFtRnpaU0lzSWxSQlF5SXNJa1pQVWtORlJDSXNJa0ZDVmlJc0lsUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWlMQ0poWkdSRmJHVnRaVzUwSWl3aWRHaGhkQ0lzSW1SaGRHRWlMQ0oySWl3aWJ5SXNJbkp2ZFc1a0lpd2lKRzltWm5ObGRDSXNJaVJzWlc1bmRHZ2lMQ0ppZVhSbFRHVnVaM1JvSWl3aWEyeGhjM01pTENJa2JHVnVJaXdpWWlJc0ltd2lMQ0psSWl3aWFYUmxjaUlzSWtaMWJtTjBhVzl1SWl3aVkyOXVZMkYwSWl3aUpHNWhkR2wyWlVsMFpYSmhkRzl5SWl3aVEwOVNVa1ZEVkY5SlZFVlNYMDVCVFVVaUxDSnVZVzFsSWl3aUpHbDBaWEpoZEc5eUlpd2lSeUlzSWxjaUxDSnZaaUlzSW1aeWIyMGlMQ0pRSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWRCUVVsQkxGRkJRVkVzYTBKQlFXMUNMRU5CUXpkQ0xFbEJRVWxETEZGQlFWVkVMRkZCUVZFc1kwRkRiRUpGTEU5QlFWTkdMRkZCUVZFc1lVRkRha0pITEUxQlFWRklMRkZCUVZFc1dVRkRhRUpKTEZGQlFWVktMRkZCUVZFc1lVRkRiRUpMTEU5QlFWTk1MRkZCUVZFc1dVRkRha0pOTEZGQlFWVk9MRkZCUVZFc2JVSkJRMnhDVHl4SlFVRk5VQ3hSUVVGUkxGVkJRMlJSTEZkQlFXRlNMRkZCUVZFc2EwSkJRM0pDVXl4aFFVRmxWQ3hSUVVGUkxHOUNRVU4yUWxVc1MwRkJUMVlzVVVGQlVTeFhRVU5tVnl4WlFVRmpXQ3hSUVVGUkxHMUNRVU4wUWxrc1ZVRkJXVm9zVVVGQlVTeHBRa0ZEY0VKaExGTkJRVmRpTEZGQlFWRXNaMEpCUTI1Q1l5eFJRVUZWWkN4UlFVRlJMR1ZCUTJ4Q1pTeG5Ra0ZCYTBKbUxGRkJRVkVzZDBKQlF6RkNaMElzV1VGQlkyaENMRkZCUVZFc2JVSkJRM1JDYVVJc1NVRkJUV3BDTEZGQlFWRXNWVUZEWkd0Q0xGRkJRVlZzUWl4UlFVRlJMR05CUTJ4Q2JVSXNVMEZCVjI1Q0xGRkJRVkVzWjBKQlEyNUNiMElzVTBGQlYzQkNMRkZCUVZFc1owSkJRMjVDY1VJc1dVRkJZM0pDTEZGQlFWRXNiMEpCUTNSQ2MwSXNUMEZCVTNSQ0xGRkJRVkVzYjBKQlEycENkVUlzWlVGQmFVSjJRaXhSUVVGUkxHbENRVU42UW5kQ0xFdEJRVTk0UWl4UlFVRlJMR3RDUVVGclFubENMRVZCUTJwRFF5eFZRVUZaTVVJc1VVRkJVU3c0UWtGRGNFSXlRaXhKUVVGTk0wSXNVVUZCVVN4VlFVTmtORUlzU1VGQlRUVkNMRkZCUVZFc1ZVRkRaRFpDTEd0Q1FVRnZRamRDTEZGQlFWRXNiMEpCUXpWQ09FSXNiMEpCUVhOQ09VSXNVVUZCVVN4eFFrRkRPVUlyUWl4dFFrRkJjVUl2UWl4UlFVRlJMREJDUVVNM1FtZERMR1ZCUVdsQ2FFTXNVVUZCVVN4M1FrRkRla0pwUXl4VlFVRlpha01zVVVGQlVTeG5Ra0ZEY0VKclF5eFpRVUZqYkVNc1VVRkJVU3hyUWtGRGRFSnRReXhYUVVGaGJrTXNVVUZCVVN4clFrRkRja0p2UXl4VlFVRlpjRU1zVVVGQlVTeHBRa0ZEY0VKeFF5eG5Ra0ZCYTBKeVF5eFJRVUZSTEhkQ1FVTXhRbk5ETEVsQlFVMTBReXhSUVVGUkxHZENRVU5rZFVNc1RVRkJVWFpETEZGQlFWRXNhMEpCUTJoQ2QwTXNSMEZCUzBZc1NVRkJTV0lzUlVGRFZHZENMRXRCUVU5R0xFMUJRVTFrTEVWQlEySnBRaXhYUVVGaGVFTXNUMEZCVDNkRExGZEJRM0JDUXl4VlFVRlpla01zVDBGQlQzbERMRlZCUTI1Q1F5eFhRVUZoTVVNc1QwRkJUekJETEZkQlMzQkNReXhYUVVGaFF5eE5RVUZsUXl4VlFVTTFRa01zWVVGQlpURkRMRkZCUVZFeVF5eFpRVU4yUWtNc1ZVRkJXVFZETEZGQlFWRTJReXhUUVVOd1FrTXNZVUZCWlhaQ0xHdENRVUZyUWl4SFFVTnFRM2RDTEZsQlFXTjRRaXhyUWtGQmEwSXNSMEZEYUVONVFpeFZRVUZaZWtJc2EwSkJRV3RDTEVkQlF6bENNRUlzVjBGQllURkNMR3RDUVVGclFpeEhRVU12UWpKQ0xGVkJRVmt6UWl4clFrRkJhMElzUjBGRE9VSTBRaXhsUVVGcFFqVkNMR3RDUVVGclFpeEhRVU51UXpaQ0xHTkJRV2RDTlVJc2NVSkJRVUZCTEVkQlEyaENOa0lzWVVGQlpUZENMSEZDUVVGQlFTeEhRVU5tT0VJc1dVRkJZelZDTEdWQlFXVTJRaXhQUVVNM1FrTXNWVUZCV1RsQ0xHVkJRV1VyUWl4TFFVTXpRa01zWVVGQlpXaERMR1ZCUVdWcFF5eFJRVU01UWtNc2FVSkJRVzFDY2tJc1YwRkJWM05DTEZsQlF6bENReXhaUVVGamRrSXNWMEZCVjNkQ0xFOUJRM3BDUXl4cFFrRkJiVUo2UWl4WFFVRlhNRUlzV1VGRE9VSkRMRlZCUVZrelFpeFhRVUZYTkVJc1MwRkRka0pETEZWQlFWazNRaXhYUVVGWE9FSXNTMEZEZGtKRExGZEJRV0V2UWl4WFFVRlhaME1zVFVGRGVFSkRMR05CUVdkQ2FrTXNWMEZCVjJ0RExGTkJRek5DUXl4dlFrRkJjMEp1UXl4WFFVRlhiME1zWlVGRGFrTkRMRk5CUVZkMFJDeEpRVUZKTEZsQlEyWjFSQ3hKUVVGTmRrUXNTVUZCU1N4bFFVTldkMFFzYTBKQlFXOUNla1FzU1VGQlNTeHhRa0ZEZUVJd1JDeG5Ra0ZCYTBJeFJDeEpRVUZKTEcxQ1FVTjBRakpFTEdsQ1FVRnRRbXBHTEU5QlFVOXJSaXhQUVVNeFFrTXNXVUZCWTI1R0xFOUJRVTl2Uml4TlFVTnlRa01zUzBGQlQzSkdMRTlCUVU5eFJpeExRVWRrUXl4TFFVRlBPVVFzYTBKQlFXdENMRVZCUVVjc1UwRkJWU3RFTEVWQlFVZERMRWRCUXpORExFOUJRVTlETEZOQlFWTXZSQ3h0UWtGQmJVSTJSQ3hGUVVGSFFTeEZRVUZGVUN4clFrRkJiVUpSTEV0QlIzcEVSU3hqUVVGblFqVkdMRTFCUVUwc1YwRkZlRUlzVDBGQk1FUXNTVUZCYmtRc1NVRkJTWGxETEZkQlFWY3NTVUZCU1c5RUxGbEJRVmtzUTBGQlF5eEpRVUZKUXl4UlFVRlJMRXRCUjJwRVF5eGhRVUZsZEVRc1kwRkJaMEpCTEZkQlFXOUNSeXhWUVVGRmIwUXNTMEZCVDJoSExFMUJRVTBzVjBGRGNFVXNTVUZCU1hsRExGZEJRVmNzUjBGQlIzVkVMRWxCUVVrc1RVRkhjRUpETEZOQlFWY3NVMEZCVlVNc1JVRkJTVU1zUjBGRE0wSXNTVUZCU1VNc1JVRkJVek5HTEZWQlFWVjVSaXhIUVVOMlFpeEhRVUZKUlN4RlFVRlRMRWRCUVV0QkxFVkJRVk5FTEVWQlFVOHNUVUZCVFRWRUxGZEJRVmNzYVVKQlEyNUVMRTlCUVU4MlJDeEhRVWRNUXl4VFFVRlhMRk5CUVZWSUxFZEJRM1pDTEVkQlFVbHNSaXhUUVVGVGEwWXNTVUZCVDJJc1pVRkJaV0VzUlVGQlNTeFBRVUZQUVN4RlFVTTVReXhOUVVGTk1VUXNWVUZCVlRCRUxFVkJRVXNzTWtKQlIyNUNVQ3hUUVVGWExGTkJRVlZYTEVWQlFVZGFMRWRCUXpGQ0xFdEJRVTB4UlN4VFFVRlRjMFlzU1VGQlRYSkNMSEZDUVVGeFFuRkNMRWRCUTNoRExFMUJRVTA1UkN4VlFVRlZMSGREUVVOb1FpeFBRVUZQTEVsQlFVazRSQ3hGUVVGRldpeEpRVWRpWVN4blFrRkJhMElzVTBGQlZXUXNSVUZCUjJVc1IwRkRha01zVDBGQlQwTXNVMEZCVXpkRkxHMUNRVUZ0UWpaRUxFVkJRVWRCTEVWQlFVVlFMR3RDUVVGdFFuTkNMRWxCUjNwRVF5eFRRVUZYTEZOQlFWVklMRVZCUVVkRkxFZEJTVEZDTEVsQlNFRXNTVUZCU1VVc1JVRkJVU3hGUVVOU2FFSXNSVUZCVTJNc1JVRkJTMlFzVDBGRFpHbENMRVZCUVZOb1FpeFRRVUZUVnl4RlFVRkhXaXhIUVVOc1FrRXNSVUZCVTJkQ0xFZEJRVTlETEVWQlFVOUVMRWRCUVZOR0xFVkJRVXRGTEV0QlF6VkRMRTlCUVU5RExFZEJSMHhETEZWQlFWa3NVMEZCVlZZc1JVRkJTVmNzUlVGQlMwTXNSMEZEYWtONlJTeEhRVUZITmtRc1JVRkJTVmNzUlVGQlN5eERRVUZGUlN4SlFVRkxMRmRCUVdNc1QwRkJUME1zUzBGQlMwTXNSMEZCUjBnc1QwRkhPVU5KTEUxQlFWRXNVMEZCWTBNc1IwRkRlRUlzU1VGTFNVTXNSVUZCUnpGQ0xFVkJRVkZvUXl4RlFVRlJhVVFzUlVGQlVWVXNSVUZCVFVNc1JVRk1ha00zUWl4RlFVRkplRVVzVTBGQlUydEhMRWRCUTJKSkxFVkJRVTlETEZWQlFWVTVRaXhQUVVOcVFpdENMRVZCUVZGR0xFVkJRVThzUlVGQlNVTXNWVUZCVlN4UlFVRkJMRVZCUXpkQ1JTeFBRVUZCUVN4SlFVRlZSQ3hGUVVOV1JTeEZRVUZUY0Vjc1ZVRkJWV3RGTEVkQlJYWkNMRWRCUVdOdFF5eE5RVUZXUkN4SlFVRjNRbnBITEZsQlFWbDVSeXhIUVVGVExFTkJReTlETEVsQlFVdE1MRVZCUVZkTExFVkJRVTlGTEV0QlFVdHdReXhIUVVGSkwwSXNSVUZCVXl4SFFVRkpNRVFzUlVGQlNTeEpRVUZMUXl4RlFVRlBReXhGUVVGVFVTeFJRVUZSUXl4TFFVRk5XQ3hKUVVOc1JqRkVMRVZCUVU5elJTeExRVUZMV0N4RlFVRkxXU3hQUVVOcVFuaERMRVZCUVVrdlFpeEZRVWRTTEVsQlJFbG5SU3hIUVVGWFNDeEZRVUZQTEVsQlFVZEZMRVZCUVZGeVNDeEpRVUZKY1Vnc1JVRkJUMFFzVlVGQlZTeEhRVUZKTEVsQlEzSkVTaXhGUVVGSkxFVkJRVWN4UWl4RlFVRlRhRVlzVTBGQlV5dEZMRVZCUVVWRExGRkJRVk5wUWl4RlFVRlRhRUlzVTBGQlUzRkNMRXRCUVUxMFFpeEhRVUZUUVN4RlFVRlRNRUlzUlVGQlIwRXNTVUZEY0VaVUxFVkJRVTlUTEVkQlFVdE5MRVZCUVZWRUxFVkJRVTFvUXl4RlFVRkZNa0lzUjBGQlNVRXNSMEZCU3pOQ0xFVkJRVVV5UWl4SFFVVXpReXhQUVVGUFZDeEhRVWRNZFVJc1NVRkJUU3hYUVVsU0xFbEJTRUVzU1VGQlNYaENMRVZCUVZFc1JVRkRVbWhDTEVWQlFWTTRRaXhWUVVGVk9VSXNUMEZEYmtKcFFpeEZRVUZUYUVJc1UwRkJVM0ZDTEV0QlFVMTBRaXhIUVVOeVFrRXNSVUZCVTJkQ0xFZEJRVTlETEVWQlFVOUVMRWRCUVZOakxGVkJRVlZrTEV0QlEycEVMRTlCUVU5RExFZEJTVXgzUWl4blFrRkJhMEl4Uml4WlFVRmpla01zVFVGQlRTeFhRVUZqTmtVc2IwSkJRVzlDWjBRc1MwRkJTeXhKUVVGSmNFWXNWMEZCVnl4TlFVVTFSakpHTEdkQ1FVRnJRaXhYUVVOd1FpeFBRVUZQZGtRc2IwSkJRVzlDZDBRc1RVRkJUVVlzWTBGQlowSXhSQ3hYUVVGWGIwUXNTMEZCUzNoQ0xGTkJRVk5YTEU5QlFWTllMRk5CUVZOWExFMUJRVTlSTEZsQlIycEhZeXhOUVVGUkxFTkJRMVpETEZkQlFWa3NVMEZCYjBKRExFVkJRVkZETEVkQlEzUkRMRTlCUVU5MlJ5eG5Ra0ZCWjBJeVJpeExRVUZMZUVJc1UwRkJVMWNzVFVGQlQzZENMRVZCUVZGRExFVkJRVTlxUWl4VlFVRlZPVUlzVDBGQlV5eEZRVUZKT0VJc1ZVRkJWU3hSUVVGQkxFbEJSVGxHYTBJc1RVRkJUeXhUUVVGbFF5eEhRVU53UWl4UFFVRlBka1lzVjBGQlYybEVMRk5CUVZOWExFMUJRVTh5UWl4RlFVRlpia0lzVlVGQlZUbENMRTlCUVZNc1JVRkJTVGhDTEZWQlFWVXNVVUZCUVN4SlFVVnFSbTlDTEV0QlFVMHNVMEZCWTFnc1IwRkRiRUlzVDBGQlQyaEhMRlZCUVZWdlJ5eE5RVUZOYUVNc1UwRkJVMWNzVFVGQlQxRXNXVUZGZWtOeFFpeFBRVUZSTEZOQlFXZENSaXhIUVVOMFFpeFBRVUZQY0VNc1owSkJRV2RDVXl4TFFVRk5PVVFzV1VGQldXMUVMRk5CUVZOWExFMUJRVTh5UWl4RlFVTjJSRzVDTEZWQlFWVTVRaXhQUVVGVExFVkJRVWs0UWl4VlFVRlZMRkZCUVVFc1MwRkZja056UWl4TFFVRk5MRk5CUVdORExFZEJRMnhDTEU5QlFVOHhSaXhWUVVGVlowUXNVMEZCVTFjc1RVRkJUeXRDTEVWQlFWZDJRaXhWUVVGVk9VSXNUMEZCVXl4RlFVRkpPRUlzVlVGQlZTeFJRVUZCTEVsQlJTOUZkMElzVlVGQlZ5eFRRVUZ0UWtRc1IwRkROVUlzVDBGQlQzcEdMR1ZCUVdVclF5eFRRVUZUVnl4TlFVRlBLMElzUlVGQlYzWkNMRlZCUVZVNVFpeFBRVUZUTEVWQlFVazRRaXhWUVVGVkxGRkJRVUVzU1VGRmNFWjVRaXhSUVVGVExGTkJRV2xDVGl4SFFVTjRRakZHTEdGQlFXRnZSQ3hUUVVGVFZ5eE5RVUZQTWtJc1JVRkJXVzVDTEZWQlFWVTVRaXhQUVVGVExFVkJRVWs0UWl4VlFVRlZMRkZCUVVFc1NVRkZOVVV3UWl4UlFVRlRMRk5CUVdsQ1F5eEhRVU40UWl4UFFVRlBNMFlzWVVGQllUWkRMRk5CUVZOWExFMUJRVTl0UXl4RlFVRmxNMElzVlVGQlZUbENMRTlCUVZNc1JVRkJTVGhDTEZWQlFWVXNVVUZCUVN4SlFVVjBSalJDTEZOQlFWVXNVMEZCYTBKRUxFZEJRekZDTEU5QlFVODFSaXhqUVVGak9FTXNVMEZCVTFjc1RVRkJUMjFETEVWQlFXVXpRaXhWUVVGVk9VSXNUMEZCVXl4RlFVRkpPRUlzVlVGQlZTeFJRVUZCTEVsQlJYWkdiRVFzUzBGQlRTeFRRVUZqSzBVc1IwRkRiRUlzVDBGQlQyaEdMRlZCUVZWblJTeE5RVUZOYUVNc1UwRkJVMWNzVFVGQlQxRXNXVUZGZWtONFJDeFpRVUZoTEZOQlFYRkNiVVlzUjBGRGFFTXNUMEZCVDNCR0xHbENRVUZwUW5ORkxFMUJRVTFvUXl4VFFVRlRWeXhOUVVGUFVTeFpRVVZvUkRoQ0xFbEJRVXNzVTBGQllUZENMRWRCUTJoQ0xFOUJRVTlxUXl4TFFVRkxZU3hUUVVGVFZ5eE5RVUZQVXl4RlFVRlBSQ3hWUVVGVk9VSXNUMEZCVXl4RlFVRkpPRUlzVlVGQlZTeFJRVUZCTEVsQlJYUkZkRVFzVDBGQlVTeFRRVUZuUW5sRkxFZEJRM1JDTEU5QlFVOHhSU3haUVVGWmIwVXNUVUZCVFdoRExGTkJRVk5YTEUxQlFVOVJMRmxCUlRORGNFUXNXVUZCWVN4VFFVRnhRblZGTEVkQlEyaERMRTlCUVU5NFJTeHBRa0ZCYVVKclJTeE5RVUZOYUVNc1UwRkJVMWNzVFVGQlQxRXNXVUZGYUVRclFpeFJRVUZUTEZkQlRWQXNTVUZNUVN4SlFVbEpkRUlzUlVGSVFYWkRMRVZCUVZOWExGTkJSRVpYTEUxQlEybENkRUlzVDBGRGVFSTRSQ3hGUVVGVFF5eExRVUZMUXl4TlFVRk5hRVVzUlVGQlV5eEhRVU0zUW1kQ0xFVkJRVkVzUlVGRlRFRXNSVUZCVVRoRExFZEJRMkoyUWl4RlFVNVRha0lzUzBGTlNVNHNSMEZPU2swc1MwRlBTazRzUzBGUVNVMHNUMEZQWTNSQ0xFZEJVR1J6UWl4TFFWRktkRUlzUjBGQlZYVkRMRVZCUTJZc1QwRlVVMnBDTEUxQlYySXlReXhMUVVGTkxGTkJRV05vUWl4SFFVTnNRaXhQUVVGUGVFWXNWVUZCVld0RUxGTkJRVk5YTEUxQlFVOHlRaXhGUVVGWmJrSXNWVUZCVlRsQ0xFOUJRVk1zUlVGQlNUaENMRlZCUVZVc1VVRkJRU3hKUVVWb1JtaEVMRXRCUVUwc1UwRkJZMjlHTEVkQlEyeENMRTlCUVU5eVJpeFZRVUZWYzBRc1MwRkJTM2hDTEZOQlFWTlhMRTFCUVU4MFF5eEpRVVY0UTBNc1UwRkJWU3hUUVVGclFrTXNSVUZCVDBNc1IwRkRha01zU1VGQlNYUkZMRVZCUVVsWkxGTkJRVk5YTEUxQlEySjBRaXhGUVVGVFJDeEZRVUZGUXl4UFFVTlljMFVzUlVGQlUzQktMR2RDUVVGblFtdEtMRVZCUVU5d1JTeEhRVU53UXl4UFFVRlBMRWxCUVVzNVJDeHRRa0ZCYlVJMlJDeEZRVUZIUVN4RlFVRkZVQ3hyUWtGQk4wSXNRMEZEVEU4c1JVRkJSVXNzVDBGRFJrd3NSVUZCUlhkRkxGZEJRV0ZFTEVWQlFWTjJSU3hGUVVGRmVVVXNhMEpCUXpGQ2VFb3NaVUZCUVVFc1NVRkJWWEZLTEVWQlFXOUNja1VzUlVGQlV6bEZMR2RDUVVGblFtMUtMRVZCUVV0eVJTeEpRVUZYYzBVc1RVRkxla1ZITEU5QlFWTXNVMEZCWlRGQ0xFVkJRVTl6UWl4SFFVTnFReXhQUVVGUGVFUXNaMEpCUVdkQ1V5eExRVUZOZGtNc1YwRkJWMjlFTEV0QlFVdDRRaXhUUVVGVFZ5eE5RVUZQZVVJc1JVRkJUM05DTEV0QlIyeEZTeXhMUVVGUExGTkJRV0ZETEVkQlEzUkNhRVVzVTBGQlUxY3NUVUZEVkN4SlFVRkpXaXhGUVVGVFNDeFRRVUZUZFVJc1ZVRkJWU3hIUVVGSkxFZEJRMmhET1VJc1JVRkJVM05DTEV0QlFVdDBRaXhQUVVOa05FVXNSVUZCVFhKS0xGTkJRVk52U2l4SFFVTm1SU3hGUVVGTk4wb3NVMEZCVXpSS0xFVkJRVWsxUlN4UlFVTnVRbWRDTEVWQlFWRXNSVUZEV2l4SFFVRkpOa1FzUlVGQlRXNUZMRVZCUVZOV0xFVkJRVkVzVFVGQlRXNUVMRmRCZGt0b1FpeHBRa0YzUzJwQ0xFdEJRVTl0UlN4RlFVRlJOa1FzUjBGQlMzWkVMRXRCUVV0YUxFVkJRVk5OTEVkQlFWTTBSQ3hGUVVGSk5VUXNUVUZITjBNNFJDeFhRVUZoTEVOQlEyWXhSeXhSUVVGVExGZEJRMUFzVDBGQlQwUXNZVUZCWVdkRkxFdEJRVXQ0UWl4VFFVRlRWeXhSUVVWd1EzQkVMRXRCUVUwc1YwRkRTaXhQUVVGUFJDeFZRVUZWYTBVc1MwRkJTM2hDTEZOQlFWTlhMRkZCUldwRGRFUXNUMEZCVVN4WFFVTk9MRTlCUVU5RUxGbEJRVmx2UlN4TFFVRkxlRUlzVTBGQlUxY3NVMEZKYWtONVJDeFZRVUZaTEZOQlFWVnFReXhGUVVGUk0wSXNSMEZEYUVNc1QwRkJUemRHTEZOQlFWTjNTQ3hKUVVOWVFTeEZRVUZQYmtRc1kwRkRUeXhwUWtGQlVIZENMRWRCUTFCQkxFdEJRVTh5UWl4SFFVTlFhME1zVVVGQlVUZEVMRWxCUVZFMlJDeFBRVUZQTjBRc1NVRkZNVUk0UkN4VFFVRlhMRk5CUVd0RGJrTXNSVUZCVVROQ0xFZEJRM1pFTEU5QlFVODBSQ3hWUVVGVmFrTXNSVUZCVVROQ0xFVkJRVTFvUnl4WlFVRlpaMGNzUjBGQlFVRXNTVUZEZGtOMlJ5eGhRVUZoTEVWQlFVZHJTU3hGUVVGUE0wSXNTVUZEZGtKMlJTeExRVUZMYTBjc1JVRkJVVE5DTEVsQlJXWXJSQ3hUUVVGWExGTkJRWGRDY0VNc1JVRkJVVE5DTEVWQlFVdG5SU3hIUVVOc1JDeFJRVUZKU2l4VlFVRlZha01zUlVGQlVUTkNMRVZCUVUxb1J5eFpRVUZaWjBjc1IwRkJRVUVzUzBGRGJrTTNSaXhUUVVGVE5rb3NTVUZEVkM5S0xFbEJRVWtyU2l4RlFVRk5MRmRCUTFRdlNpeEpRVUZKSzBvc1JVRkJUU3hSUVVOV0wwb3NTVUZCU1N0S0xFVkJRVTBzVVVGRlZrRXNSVUZCUzBNc1kwRkRTbWhMTEVsQlFVa3JTaXhGUVVGTkxHTkJRV1ZCTEVWQlFVdEZMRlZCUXpsQ2Frc3NTVUZCU1N0S0xFVkJRVTBzWjBKQlFXbENRU3hGUVVGTFJ5eFhRVWs1UWpOSkxFZEJRVWR0Unl4RlFVRlJNMElzUlVGQlMyZEZMRWxCUm5aQ2NrTXNSVUZCVHpOQ0xFZEJRVTluUlN4RlFVRkxOVU1zVFVGRFdrOHNTVUZKVG5KRUxHMUNRVU5JTDBNc1RVRkJUV1FzUlVGQlNYRktMRk5CUTFaNFNTeEpRVUZKWWl4RlFVRkpjMG9zVlVGSFZqTkxMRkZCUVZGQkxGRkJRVkZuVEN4RlFVRkphRXdzVVVGQlVXbE1MRWRCUVVzdlJpeHBRa0ZCYTBJc1UwRkJWU3hEUVVNelJHZEhMSGxDUVVFd1FsSXNVMEZETVVKVExHVkJRV2RDVWl4WFFVZGtOVXNzVFVGQlRTeFhRVUZqTWtVc1kwRkJZMnRFTEV0QlFVc3NVVUZEZWtOc1JDeGpRVUZuUWtVc2IwSkJRWE5DTEZkQlEzQkRMRTlCUVU5U0xGVkJRVlYzUkN4TFFVRkxZaXhSUVVreFFpeEpRVUZKY1VVc2MwSkJRWGRDTjBzc1dVRkJXU3hIUVVGSk9FZ3NUMEZETlVNNVNDeFpRVUZaTmtzc2MwSkJRWFZDWWl4WlFVTnVRMnBMTEV0QlFVczRTeXh6UWtGQmRVSjBSeXhUUVVGVmVVWXNWMEZCVnpsSExGRkJRMnBFYkVRc1dVRkJXVFpMTEhOQ1FVRjFRaXhEUVVOcVF6TkhMRTFCUVU5NVJpeFBRVU5RYmtVc1NVRkJTMjlGTEV0QlEweHJRaXhaUVVGaExHRkJRMkl4Unl4VFFVRlZSQ3hqUVVOV1J5eGxRVUZuUW5ORUxHdENRVVZzUW5oQ0xGVkJRVlY1UlN4elFrRkJkVUlzVTBGQlZTeExRVU16UTNwRkxGVkJRVlY1UlN4elFrRkJkVUlzWVVGQll5eExRVU12UTNwRkxGVkJRVlY1UlN4elFrRkJkVUlzWVVGQll5eExRVU12UTNwRkxGVkJRVlY1UlN4elFrRkJkVUlzVTBGQlZTeExRVU16UTJoS0xFZEJRVWRuU2l4elFrRkJkVUp5Unl4SlFVRkxMRU5CUXpkQ0swSXNTVUZCU3l4WFFVRmpMRTlCUVU5RExFdEJRVXN6UWl4blFrRkpha05yUnl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVWQlFVdDBSaXhGUVVGUGRVWXNSVUZCVTBNc1IwRkZPVU1zU1VGQlNVTXNSVUZCVDBnc1NVRkVXRVVzU1VGQldVRXNSMEZEWjBJc1ZVRkJXU3hKUVVGTkxGRkJRekZEUlN4RlFVRlRMRTFCUVZGS0xFVkJRMnBDU3l4RlFVRlRMRTFCUVZGTUxFVkJRMnBDVFN4RlFVRmhhRTBzVDBGQlR6Wk1MRWRCUTNCQ1NTeEZRVUZQUkN4SFFVRmpMRWRCUTNKQ1JTeEZRVUZOUml4SFFVRmpNMHNzWlVGQlpUSkxMRWRCUTI1RFJ5eEhRVUZWU0N4SlFVRmxOMHdzVDBGQlQybE5MRWxCUTJoRE1VY3NSVUZCU1N4SFFVTktNa2NzUlVGQmMwSk1MRWRCUVdOQkxFVkJRVzlDYmtvc1ZVRlZlRVI1U2l4RlFVRmhMRk5CUVZWRExFVkJRVTAxUml4SFFVTXZRbkpGTEVkQlFVZHBTeXhGUVVGTk5VWXNSVUZCVHl4RFFVTmtTeXhKUVVGTExGZEJRMGdzVDBGYVR5eFRRVUZWZFVZc1JVRkJUVFZHTEVkQlF6TkNMRWxCUVVrMlJpeEZRVUZQUkN4RlFVRkxja1lzUjBGRGFFSXNUMEZCVDNOR0xFVkJRVXRETEVWQlFVVllMRWRCUVZGdVJpeEZRVUZSVUN4RlFVRlJiMGNzUlVGQlMwVXNSVUZCUnpkSExHVkJSbTVETEVOQldVOXZRaXhMUVVGTlRpeEpRVVYwUWxZc1NVRkJTeXhUUVVGVmFVTXNSMEZEWWl4UFFWaFBMRk5CUVZWeFJTeEZRVUZOTlVZc1JVRkJUM1ZDTEVkQlEyeERMRWxCUVVselJTeEZRVUZQUkN4RlFVRkxja1lzUjBGRFdqQkZMRWxCUVZNeFJDeEhRVUZUUVN4RlFVRlJkMElzUzBGQlMybEVMRTFCUVUxNlJTeEpRVUZWTEVWQlFVa3NSVUZCU1VFc1JVRkJVU3hKUVVGUExFbEJRV1VzU1VGQlVrRXNSMEZEYWtaelJTeEZRVUZMUXl4RlFVRkZWaXhIUVVGUmNFWXNSVUZCVVZBc1JVRkJVVzlITEVWQlFVdEZMRVZCUVVkNFJTeEZRVUZQY2tNc1pVRklia01zUTBGWFQyOUNMRXRCUVUxT0xFVkJRVTkxUWl4SlFVVTNRaXRETEZsQlFVRkJMRXRCUjBGclFpeEhRVU5HU0N4RlFVRmhUQ3hGUVVGUkxGTkJRVlZaTEVWQlFVMURMRVZCUVUxSkxFVkJRVk5ETEVkQlEyeEVkazBzVjBGQlYybE5MRVZCUVUxUUxFVkJRVmxJTEVWQlFVMHNUVUZEYmtNc1NVRkZTVGxHTEVWQlFWRXJSeXhGUVVGWmJrZ3NSVUZCVVc5SUxFVkJSalZDY0Vjc1JVRkJVU3hGUVVOU1RpeEZRVUZUTEVWQlJXSXNSMEZCUzNCR0xGTkJRVk4xVEN4SFFVbFFMRU5CUVVFc1MwRkJTVUVzWVVGQlowSXhTaXhqUVdoVlpDeG5Ra0ZuVlN0Q2FVc3NSVUZCVVM5TUxGRkJRVkYzVEN4TFFTOVVPVU1zY1VKQksxUjNSVThzUjBGaEwwVXNUMEZCU1hwSUxHVkJRV1ZyU0N4RlFVTnFRamxHTEZOQlFWTnpSaXhGUVVGWlVTeEhRVVZ5UW5KR0xFMUJRVTFYTEV0QlFVdHJSU3hGUVVGWlVTeEhRV1k1UW5wSExFVkJRVk41Unl4RlFVTlVia2NzUlVGQlUwZ3NVMEZCVXpCSExFVkJRVk40Unl4SFFVTXpRaXhKUVVGSk5FY3NSVUZCVDFJc1JVRkJTMDBzVjBGRGFFSXNVVUZCUVN4SlFVRkpSQ3hGUVVGMVFpeERRVU42UWl4SFFVRkpSeXhGUVVGUE5VY3NSVUZCVHl4TlFVRk5OVVFzVjBGd1UyWXNhVUpCYzFOVUxFbEJSRUZ6U3l4RlFVRmhSU3hGUVVGUE0wY3NSMEZEU0N4RlFVRkhMRTFCUVUwM1JDeFhRWFJUYWtJc2MwSkJlVk5VTEVsQlJFRnpTeXhGUVVGaGJrMHNVMEZCVTJ0TkxFZEJRVmQ2Unl4SFFVTm9Ra01zUlVGQlV6SkhMRVZCUVUwc1RVRkJUWGhMTEZkQmVsTTNRaXhwUWtFeVUxaHRSQ3hGUVVGVGJVZ3NSVUZCWVRGSExFOUJablJDVkN4RlFVRlRMMFVzVVVGQlVUUk1MRWRCUldwQ2VrY3NSVUZCVXl4SlFVRkpha1FzWVVGRVltZExMRVZCUVdGdVNDeEZRVUZUVXl4SFFUSkNlRUlzU1VGUVFUVkdMRXRCUVVzclRDeEZRVUZOTEV0QlFVMHNRMEZEWmxVc1JVRkJSMnhJTEVWQlEwZ3lSeXhGUVVGSGNrY3NSVUZEU0RaSExFVkJRVWRLTEVWQlEwaExMRVZCUVVkNFNDeEZRVU5JT0Vjc1JVRkJSeXhKUVVGSmVrb3NWVUZCVlN0RExFdEJSVnBaTEVWQlFWRm9RaXhIUVVGUk1rY3NSVUZCVjBNc1JVRkJUVFZHTEU5QlJURkRNRVlzUlVGQmMwSk1MRVZCUVc5Q2Jrb3NWVUZCU1hwQ0xFOUJRVTlyU3l4MVFrRkRja1E1U3l4TFFVRkxOa3dzUlVGQmNVSXNZMEZCWlV3c1NVRkRMMEl2VEN4TlFVRk5MRmRCUTJoQ0swd3NSVUZCVnl4TlFVTk9MMHdzVFVGQlRTeFhRVU5ZTEVsQlFVa3JUQ3hIUVVGWkxFMUJRMWhvU3l4WlFVRlpMRk5CUVZWdlRDeEhRVU16UWl4SlFVRkpjRUlzUlVGRFNpeEpRVUZKUVN4RlFVRlhMRTFCUTJZc1NVRkJTVUVzUlVGQlZ5eExRVU5tTEVsQlFVbEJMRVZCUVZkdlFpeExRVUZCUVN4TFFVVm1jRUlzUlVGQllVd3NSVUZCVVN4VFFVRlZXU3hGUVVGTlF5eEZRVUZOU1N4RlFVRlRReXhIUVVWc1JDeEpRVUZKUlN4RlFVZEtMRTlCU2tGNlRTeFhRVUZYYVUwc1JVRkJUVkFzUlVGQldVZ3NSMEZKZUVJMVN5eFRRVUZUZFV3c1IwRkRWa0VzWVVGQlowSXhTaXhqUVRkWFVDeG5Ra0UyVjNkQ2FVc3NSVUZCVVM5TUxGRkJRVkYzVEN4TFFUVlhka01zY1VKQk5GZHBSVThzVDBGQlFVRXNTVUZEZEVWR0xFVkJRMGdzU1VGQlNWb3NSVUZCUzA4c1JVRkJUWFJITEZOQlFWTXdSeXhGUVVGVGVFY3NSMEZCVVhsSExGRkJRVUZCTEVsQlEzcERSQ3hGUVVORkxFbEJRVWxZTEVWQlFVdFBMRVZCUVUxMFJ5eFRRVUZUTUVjc1JVRkJVM2hITEVsQlEycERMRWxCUVVrMlJpeEZRVUZMVHl4SFFVVmliRWdzWlVGQlpXdElMRVZCUVdFNVJpeFRRVUZUYzBZc1JVRkJXVkVzUjBGRE9VTnlSaXhOUVVGTlZ5eExRVUZMYTBVc1JVRkJXVkVzUjBGVVJpeEpRVUZKVUN4RlFVRkxja3dzVVVGQlVUUk1MRTFCVnk5RGRFb3NZVUZCWVdkS0xFbEJRVkZ0UWl4VFFVRlRlRXNzVlVGQldYWkNMRXRCUVVzeVN5eEhRVUZOY1VJc1QwRkJUMmhOTEV0QlFVczBTeXhKUVVGUk5Vc3NTMEZCU3pKTExFZEJRVThzVTBGQlZXNUdMRWRCUTNaR1FTeExRVUZQYTBZc1IwRkJZWGhNTEV0QlFVdDNUQ3hGUVVGWmJFWXNSVUZCUzIxR0xFVkJRVXR1Uml4TlFVVjJSR3RHTEVWQlFXOUNia29zVlVGQlNYZEtMRVZCUTI1Q2RFMHNWVUZCVTNOTkxFVkJRVzlDWkN4WlFVRmpVeXhKUVVWc1JDeEpRVUZKZFVJc1JVRkJhMEpzUWl4RlFVRnZRbkpJTEZWQlEzUkRkMGtzU1VGQmMwSkVMRWxCUTBrc1ZVRkJlRUpCTEVWQlFXZENSU3hOUVVFMFF6VkdMRTFCUVhoQ01FWXNSVUZCWjBKRkxFMUJRM1JFUXl4RlFVRlpha1FzVjBGQlZ6bEhMRTlCUXpOQ2JrUXNTMEZCUzNkTUxFVkJRVms1Unl4dFFrRkJRVUVzUjBGRGFrSXhSU3hMUVVGTE5rd3NSVUZCY1VJdlJ5eFpRVUZoZFVjc1IwRkRka055VEN4TFFVRkxOa3dzUlVGQmNVSTNSeXhOUVVGQlFTeEhRVU14UW1oR0xFdEJRVXMyVEN4RlFVRnhRbXhJTEdkQ1FVRnBRalpITEVsQlJYWkRTaXhGUVVGVkxFbEJRVWxKTEVWQlFWY3NSMEZCUnk5SExFMUJRVkUwUnl4RlFVRlROVWNzVDBGQlQyOUlMRWxCUTNSRUwwb3NSMEZCUnl0S0xFVkJRWEZDY0Vnc1NVRkJTeXhEUVVNelFpdENMRWxCUVVzc1YwRkJZeXhQUVVGUE5rVXNTMEZKT1VKdVJ5eEZRVUZGYlVjc1IwRkJVVWNzUlVGRlZqbE1MRkZCUVZGQkxGRkJRVkY1VGl4RlFVRkplazRzVVVGQlVUQk9MRVZCUVVreFRpeFJRVUZSYVV3c1IwRkJTMkVzUjBGQlkwTXNSMEZCVDNaSExFZEJSV3hGZUVZc1VVRkJVVUVzVVVGQlVXZE1MRVZCUVVkWExFVkJRVTBzUTBGRGRrSXhRaXhyUWtGQmJVSXZSQ3hKUVVkeVFteEhMRkZCUVZGQkxGRkJRVkZuVEN4RlFVRkphRXdzVVVGQlVXbE1MRVZCUVVsc1RDeE5RVUZOTEZkQlFXTm5UU3hGUVVGTE5FSXNSMEZCUnk5R0xFdEJRVXRyUlN4RlFVRlpMRXRCUVZGSUxFVkJRVTBzUTBGRGVrWnBReXhMUVVGTk0wY3NUVUZEVGpCSExFZEJRVWt4Uml4TlFYQmFaMElzYzBKQmRWcExhMFVzUjBGQmMwSTNUQ3hMUVVGTE5rd3NSVUYyV21oRExHOUNRWFZhZDBWcVJ5eEhRVVU1Um14SExGRkJRVkZCTEZGQlFWRTJUaXhGUVVGSGJFTXNSVUZCVFhSRUxFOUJSWHBDZEVjc1YwRkJWelJLTEVkQlJWZ3pUQ3hSUVVGUlFTeFJRVUZSTms0c1JVRkJTVGRPTEZGQlFWRnBUQ3hGUVVGSmJrWXNWMEZCV1RaR0xFVkJRVTBzUTBGQlJUVkdMRWxCUVV0dlJTeFBRVVY2Ukc1TExGRkJRVkZCTEZGQlFWRTJUaXhGUVVGSk4wNHNVVUZCVVdsTUxFZEJRVXR4UXl4RlFVRnRRak5DTEVWQlFVMXdRaXhaUVVWeVJERkxMRk5CUVZkelRTeEZRVUZ2UW5oSUxGVkJRVmxFTEdkQ1FVRmxlVWdzUlVGQmIwSjRTQ3hUUVVGWFJDeGxRVVU1UmpGRkxGRkJRVkZCTEZGQlFWRTJUaXhGUVVGSk4wNHNVVUZCVVdsTUxFVkJRVWxzVEN4TlFVRk5MRmRCUTNCRExFbEJRVWtyVEN4RlFVRlhMRWRCUVVkeVNDeFZRVU5vUW10SUxFVkJRVTBzUTBGQlJXeElMRTFCUVU5NVJpeFRRVVZ1UW14TExGRkJRVkZCTEZGQlFWRTJUaXhGUVVGSk4wNHNVVUZCVVdsTUxFZEJRVXRzVEN4TlFVRk5MRmRCUTNKRExFMUJRVThzUTBGQlF5eEZRVUZITEVkQlFVYzRSU3hyUWtGQmIwSXNTVUZCU1dsSUxFVkJRVmNzUTBGQlF5eEZRVUZITEVsQlFVbHFTQ3h4UWtGRGNFUTVSU3hOUVVGTkxGZEJRMWh2VFN4RlFVRnZRblJJTEdWQlFXVXJReXhMUVVGTExFTkJRVU1zUlVGQlJ5eFBRVU42UXl0RUxFVkJRVTBzUTBGQlJUbEhMR1ZCUVdkQ2MwUXNhMEpCUlRkQ2RFY3NWVUZCVlRoS0xFZEJRVkV5UWl4RlFVRnZRa1FzUlVGQmEwSkhMRVZCUTI1RU0wNHNVMEZCV1hsT0xFZEJRVzFDYUU0c1MwRkJTelpNTEVWQlFYRkNja2dzVTBGQlZUQkpMRk5CUlhKRmJFTXNUMEZCVDBNc1VVRkJWU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWDNSNWNHVmtMV0Z5Y21GNUxtcHpJbjA9IiwiZm9yKHZhciBUeXBlZCxnbG9iYWw9cmVxdWlyZSg0MyksaGlkZT1yZXF1aXJlKDQ1KSx1aWQ9cmVxdWlyZSgxMjYpLFRZUEVEPXVpZChcInR5cGVkX2FycmF5XCIpLFZJRVc9dWlkKFwidmlld1wiKSxBQlY9ISghZ2xvYmFsLkFycmF5QnVmZmVyfHwhZ2xvYmFsLkRhdGFWaWV3KSxDT05TVFI9QUJWLGk9MCxUeXBlZEFycmF5Q29uc3RydWN0b3JzPVwiSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXlcIi5zcGxpdChcIixcIik7aTw5OykoVHlwZWQ9Z2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pPyhoaWRlKFR5cGVkLnByb3RvdHlwZSxUWVBFRCwhMCksaGlkZShUeXBlZC5wcm90b3R5cGUsVklFVywhMCkpOkNPTlNUUj0hMTttb2R1bGUuZXhwb3J0cz17QUJWOkFCVixDT05TVFI6Q09OU1RSLFRZUEVEOlRZUEVELFZJRVc6VklFV307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBlWEJsWkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpVZVhCbFpDSXNJbWRzYjJKaGJDSXNJbkpsY1hWcGNtVWlMQ0pvYVdSbElpd2lkV2xrSWl3aVZGbFFSVVFpTENKV1NVVlhJaXdpUVVKV0lpd2lRWEp5WVhsQ2RXWm1aWElpTENKRVlYUmhWbWxsZHlJc0lrTlBUbE5VVWlJc0lta2lMQ0pVZVhCbFpFRnljbUY1UTI5dWMzUnlkV04wYjNKeklpd2ljM0JzYVhRaUxDSndjbTkwYjNSNWNHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRmxRU3hKUVdaQkxFbEJVMGxCTEV0QlFVRkJMRU5CVkVGRExFMUJRVUZCTEVOQlFWTkRMRTlCUVVGQkxFTkJRVkVzVjBGQlFTeERRVUZCTEVOQlEycENReXhKUVVGQlFTeERRVUZQUkN4UFFVRkJRU3hEUVVGUkxGTkJRVUVzUTBGQlFTeERRVU5tUlN4SFFVRkJRU3hEUVVGTlJpeFBRVUZCUVN4RFFVRlJMRkZCUVVFc1EwRkJRU3hEUVVOa1J5eExRVUZCUVN4RFFVRlJSQ3hIUVVGQlFTeERRVUZKTEdGQlFVRXNRMEZCUVN4RFFVTmFSU3hKUVVGQlFTeERRVUZQUml4SFFVRkJRU3hEUVVGSkxFMUJRVUVzUTBGQlFTeERRVU5ZUnl4SFFVRkJRU3hEUVVGQlFTeEZRVUZCUVN4RFFVRlRUaXhOUVVGQlFTeERRVUZQVHl4WFFVRkJRU3hGUVVGQlFTeERRVUZsVUN4TlFVRkJRU3hEUVVGUFVTeFJRVUZCUVN4RFFVRkJRU3hEUVVOMFEwTXNUVUZCUVVFc1EwRkJVMGdzUjBGQlFVRXNRMEZEVkVrc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlNVcERMSE5DUVVGQlFTeERRVUY1UWl4blNFRkJRU3hEUVVVelFrTXNTMEZCUVVFc1EwRkJUU3hIUVVGQkxFTkJRVUVzUTBGRlJFWXNRMEZCUVVFc1EwRlFReXhEUVVGQkxFVkJRVUVzUTBGUlJsZ3NTMEZCUVVFc1EwRkJVVU1zVFVGQlFVRXNRMEZCVDFjc2MwSkJRVUZCTEVOQlFYVkNSQ3hEUVVGQlFTeEZRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeEhRVU40UTFJc1NVRkJRVUVzUTBGQlMwZ3NTMEZCUVVFc1EwRkJUV01zVTBGQlFVRXNRMEZCVjFRc1MwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZEZEVKR0xFbEJRVUZCTEVOQlFVdElMRXRCUVVGQkxFTkJRVTFqTEZOQlFVRkJMRU5CUVZkU0xFbEJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRVZCUTJwQ1NTeE5RVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZFVTeXhOUVVGQlFTeERRVUZQUXl4UFFVRkJRU3hEUVVGVkxFTkJRMlpVTEVkQlFVRkJMRU5CUVV0QkxFZEJRVUZCTEVOQlEweEhMRTFCUVVGQkxFTkJRVkZCTEUxQlFVRkJMRU5CUTFKTUxFdEJRVUZCTEVOQlFVOUJMRXRCUVVGQkxFTkJRMUJETEVsQlFVRkJMRU5CUVUxQkxFbEJRVUZCTEVOQlFVRkJMRU5CUVVGQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFgwPSIsIlwidXNlIHN0cmljdFwiO3ZhciBnbG9iYWw9cmVxdWlyZSg0MyksREVTQ1JJUFRPUlM9cmVxdWlyZSgzMiksTElCUkFSWT1yZXF1aXJlKDYyKSwkdHlwZWQ9cmVxdWlyZSgxMjUpLGhpZGU9cmVxdWlyZSg0NSkscmVkZWZpbmVBbGw9cmVxdWlyZSg5MyksZmFpbHM9cmVxdWlyZSgzOCksYW5JbnN0YW5jZT1yZXF1aXJlKDkpLHRvSW50ZWdlcj1yZXF1aXJlKDExOCksdG9MZW5ndGg9cmVxdWlyZSgxMjApLHRvSW5kZXg9cmVxdWlyZSgxMTcpLGdPUE49cmVxdWlyZSg3OSkuZixkUD1yZXF1aXJlKDc0KS5mLGFycmF5RmlsbD1yZXF1aXJlKDEyKSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKDEwMyksUFJPVE9UWVBFPVwicHJvdG90eXBlXCIsV1JPTkdfSU5ERVg9XCJXcm9uZyBpbmRleCFcIiwkQXJyYXlCdWZmZXI9Z2xvYmFsLkFycmF5QnVmZmVyLCREYXRhVmlldz1nbG9iYWwuRGF0YVZpZXcsTWF0aD1nbG9iYWwuTWF0aCxSYW5nZUVycm9yPWdsb2JhbC5SYW5nZUVycm9yLEluZmluaXR5PWdsb2JhbC5JbmZpbml0eSxCYXNlQnVmZmVyPSRBcnJheUJ1ZmZlcixhYnM9TWF0aC5hYnMscG93PU1hdGgucG93LGZsb29yPU1hdGguZmxvb3IsbG9nPU1hdGgubG9nLExOMj1NYXRoLkxOMiwkQlVGRkVSPURFU0NSSVBUT1JTP1wiX2JcIjpcImJ1ZmZlclwiLCRMRU5HVEg9REVTQ1JJUFRPUlM/XCJfbFwiOlwiYnl0ZUxlbmd0aFwiLCRPRkZTRVQ9REVTQ1JJUFRPUlM/XCJfb1wiOlwiYnl0ZU9mZnNldFwiO2Z1bmN0aW9uIHBhY2tJRUVFNzU0KGUsdCxyKXt2YXIgbixhLGksZj1uZXcgQXJyYXkociksbz04KnItdC0xLHU9KDE8PG8pLTEscz11Pj4xLGM9MjM9PT10P3BvdygyLC0yNCktcG93KDIsLTc3KTowLGc9MCxJPWU8MHx8MD09PWUmJjEvZTwwPzE6MDtmb3IoKGU9YWJzKGUpKSE9ZXx8ZT09PUluZmluaXR5PyhhPWUhPWU/MTowLG49dSk6KG49Zmxvb3IobG9nKGUpL0xOMiksZSooaT1wb3coMiwtbikpPDEmJihuLS0saSo9MiksKGUrPW4rcz49MT9jL2k6Yypwb3coMiwxLXMpKSppPj0yJiYobisrLGkvPTIpLG4rcz49dT8oYT0wLG49dSk6bitzPj0xPyhhPShlKmktMSkqcG93KDIsdCksbis9cyk6KGE9ZSpwb3coMixzLTEpKnBvdygyLHQpLG49MCkpO3Q+PTg7ZltnKytdPTI1NSZhLGEvPTI1Nix0LT04KTtmb3Iobj1uPDx0fGEsbys9dDtvPjA7ZltnKytdPTI1NSZuLG4vPTI1NixvLT04KTtyZXR1cm4gZlstLWddfD0xMjgqSSxmfWZ1bmN0aW9uIHVucGFja0lFRUU3NTQoZSx0LHIpe3ZhciBuLGE9OCpyLXQtMSxpPSgxPDxhKS0xLGY9aT4+MSxvPWEtNyx1PXItMSxzPWVbdS0tXSxjPTEyNyZzO2ZvcihzPj49NztvPjA7Yz0yNTYqYytlW3VdLHUtLSxvLT04KTtmb3Iobj1jJigxPDwtbyktMSxjPj49LW8sbys9dDtvPjA7bj0yNTYqbitlW3VdLHUtLSxvLT04KTtpZigwPT09YyljPTEtZjtlbHNle2lmKGM9PT1pKXJldHVybiBuP05hTjpzPy1JbmZpbml0eTpJbmZpbml0eTtuKz1wb3coMix0KSxjLT1mfXJldHVybihzPy0xOjEpKm4qcG93KDIsYy10KX1mdW5jdGlvbiB1bnBhY2tJMzIoZSl7cmV0dXJuIGVbM108PDI0fGVbMl08PDE2fGVbMV08PDh8ZVswXX1mdW5jdGlvbiBwYWNrSTgoZSl7cmV0dXJuWzI1NSZlXX1mdW5jdGlvbiBwYWNrSTE2KGUpe3JldHVyblsyNTUmZSxlPj44JjI1NV19ZnVuY3Rpb24gcGFja0kzMihlKXtyZXR1cm5bMjU1JmUsZT4+OCYyNTUsZT4+MTYmMjU1LGU+PjI0JjI1NV19ZnVuY3Rpb24gcGFja0Y2NChlKXtyZXR1cm4gcGFja0lFRUU3NTQoZSw1Miw4KX1mdW5jdGlvbiBwYWNrRjMyKGUpe3JldHVybiBwYWNrSUVFRTc1NChlLDIzLDQpfWZ1bmN0aW9uIGFkZEdldHRlcihlLHQscil7ZFAoZVtQUk9UT1RZUEVdLHQse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzW3JdfX0pfWZ1bmN0aW9uIGdldChlLHQscixuKXt2YXIgYT10b0luZGV4KCtyKTtpZihhK3Q+ZVskTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTt2YXIgaT1lWyRCVUZGRVJdLl9iLGY9YStlWyRPRkZTRVRdLG89aS5zbGljZShmLGYrdCk7cmV0dXJuIG4/bzpvLnJldmVyc2UoKX1mdW5jdGlvbiBzZXQoZSx0LHIsbixhLGkpe3ZhciBmPXRvSW5kZXgoK3IpO2lmKGYrdD5lWyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO2Zvcih2YXIgbz1lWyRCVUZGRVJdLl9iLHU9ZitlWyRPRkZTRVRdLHM9bigrYSksYz0wO2M8dDtjKyspb1t1K2NdPXNbaT9jOnQtYy0xXX1pZigkdHlwZWQuQUJWKXtpZighZmFpbHMoZnVuY3Rpb24oKXskQXJyYXlCdWZmZXIoMSl9KXx8IWZhaWxzKGZ1bmN0aW9uKCl7bmV3ICRBcnJheUJ1ZmZlcigtMSl9KXx8ZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm4gbmV3ICRBcnJheUJ1ZmZlcixuZXcgJEFycmF5QnVmZmVyKDEuNSksbmV3ICRBcnJheUJ1ZmZlcihOYU4pLFwiQXJyYXlCdWZmZXJcIiE9JEFycmF5QnVmZmVyLm5hbWV9KSl7Zm9yKHZhciBrZXksQXJyYXlCdWZmZXJQcm90bz0oJEFycmF5QnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybiBhbkluc3RhbmNlKHRoaXMsJEFycmF5QnVmZmVyKSxuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGUpKX0pW1BST1RPVFlQRV09QmFzZUJ1ZmZlcltQUk9UT1RZUEVdLGtleXM9Z09QTihCYXNlQnVmZmVyKSxqPTA7a2V5cy5sZW5ndGg+ajspKGtleT1rZXlzW2orK10paW4gJEFycmF5QnVmZmVyfHxoaWRlKCRBcnJheUJ1ZmZlcixrZXksQmFzZUJ1ZmZlcltrZXldKTtMSUJSQVJZfHwoQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3Rvcj0kQXJyYXlCdWZmZXIpfXZhciB2aWV3PW5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSksJHNldEludDg9JERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODt2aWV3LnNldEludDgoMCwyMTQ3NDgzNjQ4KSx2aWV3LnNldEludDgoMSwyMTQ3NDgzNjQ5KSwhdmlldy5nZXRJbnQ4KDApJiZ2aWV3LmdldEludDgoMSl8fHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLHtzZXRJbnQ4OmZ1bmN0aW9uKGUsdCl7JHNldEludDguY2FsbCh0aGlzLGUsdDw8MjQ+PjI0KX0sc2V0VWludDg6ZnVuY3Rpb24oZSx0KXskc2V0SW50OC5jYWxsKHRoaXMsZSx0PDwyND4+MjQpfX0sITApfWVsc2UgJEFycmF5QnVmZmVyPWZ1bmN0aW9uKGUpe2FuSW5zdGFuY2UodGhpcywkQXJyYXlCdWZmZXIsXCJBcnJheUJ1ZmZlclwiKTt2YXIgdD10b0luZGV4KGUpO3RoaXMuX2I9YXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KHQpLDApLHRoaXNbJExFTkdUSF09dH0sJERhdGFWaWV3PWZ1bmN0aW9uKGUsdCxyKXthbkluc3RhbmNlKHRoaXMsJERhdGFWaWV3LFwiRGF0YVZpZXdcIiksYW5JbnN0YW5jZShlLCRBcnJheUJ1ZmZlcixcIkRhdGFWaWV3XCIpO3ZhciBuPWVbJExFTkdUSF0sYT10b0ludGVnZXIodCk7aWYoYTwwfHxhPm4pdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIG9mZnNldCFcIik7aWYoYSsocj12b2lkIDA9PT1yP24tYTp0b0xlbmd0aChyKSk+bil0aHJvdyBSYW5nZUVycm9yKFwiV3JvbmcgbGVuZ3RoIVwiKTt0aGlzWyRCVUZGRVJdPWUsdGhpc1skT0ZGU0VUXT1hLHRoaXNbJExFTkdUSF09cn0sREVTQ1JJUFRPUlMmJihhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLFwiYnl0ZUxlbmd0aFwiLFwiX2xcIiksYWRkR2V0dGVyKCREYXRhVmlldyxcImJ1ZmZlclwiLFwiX2JcIiksYWRkR2V0dGVyKCREYXRhVmlldyxcImJ5dGVMZW5ndGhcIixcIl9sXCIpLGFkZEdldHRlcigkRGF0YVZpZXcsXCJieXRlT2Zmc2V0XCIsXCJfb1wiKSkscmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0se2dldEludDg6ZnVuY3Rpb24oZSl7cmV0dXJuIGdldCh0aGlzLDEsZSlbMF08PDI0Pj4yNH0sZ2V0VWludDg6ZnVuY3Rpb24oZSl7cmV0dXJuIGdldCh0aGlzLDEsZSlbMF19LGdldEludDE2OmZ1bmN0aW9uKGUpe3ZhciB0PWdldCh0aGlzLDIsZSxhcmd1bWVudHNbMV0pO3JldHVybih0WzFdPDw4fHRbMF0pPDwxNj4+MTZ9LGdldFVpbnQxNjpmdW5jdGlvbihlKXt2YXIgdD1nZXQodGhpcywyLGUsYXJndW1lbnRzWzFdKTtyZXR1cm4gdFsxXTw8OHx0WzBdfSxnZXRJbnQzMjpmdW5jdGlvbihlKXtyZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLDQsZSxhcmd1bWVudHNbMV0pKX0sZ2V0VWludDMyOmZ1bmN0aW9uKGUpe3JldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsNCxlLGFyZ3VtZW50c1sxXSkpPj4+MH0sZ2V0RmxvYXQzMjpmdW5jdGlvbihlKXtyZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcyw0LGUsYXJndW1lbnRzWzFdKSwyMyw0KX0sZ2V0RmxvYXQ2NDpmdW5jdGlvbihlKXtyZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcyw4LGUsYXJndW1lbnRzWzFdKSw1Miw4KX0sc2V0SW50ODpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDEsZSxwYWNrSTgsdCl9LHNldFVpbnQ4OmZ1bmN0aW9uKGUsdCl7c2V0KHRoaXMsMSxlLHBhY2tJOCx0KX0sc2V0SW50MTY6ZnVuY3Rpb24oZSx0KXtzZXQodGhpcywyLGUscGFja0kxNix0LGFyZ3VtZW50c1syXSl9LHNldFVpbnQxNjpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDIsZSxwYWNrSTE2LHQsYXJndW1lbnRzWzJdKX0sc2V0SW50MzI6ZnVuY3Rpb24oZSx0KXtzZXQodGhpcyw0LGUscGFja0kzMix0LGFyZ3VtZW50c1syXSl9LHNldFVpbnQzMjpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDQsZSxwYWNrSTMyLHQsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQzMjpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDQsZSxwYWNrRjMyLHQsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQ2NDpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDgsZSxwYWNrRjY0LHQsYXJndW1lbnRzWzJdKX19KTtzZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsXCJBcnJheUJ1ZmZlclwiKSxzZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsXCJEYXRhVmlld1wiKSxoaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCR0eXBlZC5WSUVXLCEwKSxleHBvcnRzLkFycmF5QnVmZmVyPSRBcnJheUJ1ZmZlcixleHBvcnRzLkRhdGFWaWV3PSREYXRhVmlldztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGVYQmxaQzFpZFdabVpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWNtVnhkV2x5WlNJc0lrUkZVME5TU1ZCVVQxSlRJaXdpVEVsQ1VrRlNXU0lzSWlSMGVYQmxaQ0lzSW1ocFpHVWlMQ0p5WldSbFptbHVaVUZzYkNJc0ltWmhhV3h6SWl3aVlXNUpibk4wWVc1alpTSXNJblJ2U1c1MFpXZGxjaUlzSW5SdlRHVnVaM1JvSWl3aWRHOUpibVJsZUNJc0ltZFBVRTRpTENKbUlpd2laRkFpTENKaGNuSmhlVVpwYkd3aUxDSnpaWFJVYjFOMGNtbHVaMVJoWnlJc0lsQlNUMVJQVkZsUVJTSXNJbGRTVDA1SFgwbE9SRVZZSWl3aUpFRnljbUY1UW5WbVptVnlJaXdpUVhKeVlYbENkV1ptWlhJaUxDSWtSR0YwWVZacFpYY2lMQ0pFWVhSaFZtbGxkeUlzSWsxaGRHZ2lMQ0pTWVc1blpVVnljbTl5SWl3aVNXNW1hVzVwZEhraUxDSkNZWE5sUW5WbVptVnlJaXdpWVdKeklpd2ljRzkzSWl3aVpteHZiM0lpTENKc2IyY2lMQ0pNVGpJaUxDSWtRbFZHUmtWU0lpd2lKRXhGVGtkVVNDSXNJaVJQUmtaVFJWUWlMQ0p3WVdOclNVVkZSVGMxTkNJc0luWmhiSFZsSWl3aWJVeGxiaUlzSW01Q2VYUmxjeUlzSW1VaUxDSnRJaXdpWXlJc0ltSjFabVpsY2lJc0lrRnljbUY1SWl3aVpVeGxiaUlzSW1WTllYZ2lMQ0psUW1saGN5SXNJbkowSWl3aWFTSXNJbk1pTENKMWJuQmhZMnRKUlVWRk56VTBJaXdpYmtKcGRITWlMQ0pPWVU0aUxDSjFibkJoWTJ0Sk16SWlMQ0ppZVhSbGN5SXNJbkJoWTJ0Sk9DSXNJbWwwSWl3aWNHRmphMGt4TmlJc0luQmhZMnRKTXpJaUxDSndZV05yUmpZMElpd2ljR0ZqYTBZek1pSXNJbUZrWkVkbGRIUmxjaUlzSWtNaUxDSnJaWGtpTENKcGJuUmxjbTVoYkNJc0ltZGxkQ0lzSW5Sb2FYTWlMQ0oyYVdWM0lpd2lhVzVrWlhnaUxDSnBjMHhwZEhSc1pVVnVaR2xoYmlJc0ltbHVkRWx1WkdWNElpd2ljM1J2Y21VaUxDSmZZaUlzSW5OMFlYSjBJaXdpY0dGamF5SXNJbk5zYVdObElpd2ljbVYyWlhKelpTSXNJbk5sZENJc0ltTnZiblpsY25OcGIyNGlMQ0pCUWxZaUxDSnVZVzFsSWl3aVFYSnlZWGxDZFdabVpYSlFjbTkwYnlJc0lteGxibWQwYUNJc0ltdGxlWE1pTENKcUlpd2lZMjl1YzNSeWRXTjBiM0lpTENJa2MyVjBTVzUwT0NJc0luTmxkRWx1ZERnaUxDSm5aWFJKYm5RNElpd2lZbmwwWlU5bVpuTmxkQ0lzSW1OaGJHd2lMQ0p6WlhSVmFXNTBPQ0lzSW1KNWRHVk1aVzVuZEdnaUxDSmlkV1ptWlhKTVpXNW5kR2dpTENKdlptWnpaWFFpTENKblpYUlZhVzUwT0NJc0ltZGxkRWx1ZERFMklpd2lZWEpuZFcxbGJuUnpJaXdpWjJWMFZXbHVkREUySWl3aVoyVjBTVzUwTXpJaUxDSm5aWFJWYVc1ME16SWlMQ0puWlhSR2JHOWhkRE15SWl3aVoyVjBSbXh2WVhRMk5DSXNJbk5sZEVsdWRERTJJaXdpYzJWMFZXbHVkREUySWl3aWMyVjBTVzUwTXpJaUxDSnpaWFJWYVc1ME16SWlMQ0p6WlhSR2JHOWhkRE15SWl3aWMyVjBSbXh2WVhRMk5DSXNJbFpKUlZjaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFpRVUZCTEVOQlEwRXNTVUZCU1VFc1RVRkJRVUVzUTBGQlUwTXNUMEZCUVVFc1EwRkJVU3hYUVVGQkxFTkJRVUVzUTBGRGFrSkRMRmRCUVVGQkxFTkJRV05FTEU5QlFVRkJMRU5CUVZFc1owSkJRVUVzUTBGQlFTeERRVU4wUWtVc1QwRkJRVUVzUTBGQlZVWXNUMEZCUVVFc1EwRkJVU3haUVVGQkxFTkJRVUVzUTBGRGJFSkhMRTFCUVVGQkxFTkJRVk5JTEU5QlFVRkJMRU5CUVZFc1ZVRkJRU3hEUVVGQkxFTkJRMnBDU1N4SlFVRkJRU3hEUVVGUFNpeFBRVUZCUVN4RFFVRlJMRk5CUVVFc1EwRkJRU3hEUVVObVN5eFhRVUZCUVN4RFFVRmpUQ3hQUVVGQlFTeERRVUZSTEdsQ1FVRkJMRU5CUVVFc1EwRkRkRUpOTEV0QlFVRkJMRU5CUVZGT0xFOUJRVUZCTEVOQlFWRXNWVUZCUVN4RFFVRkJMRU5CUTJoQ1R5eFZRVUZCUVN4RFFVRmhVQ3hQUVVGQlFTeERRVUZSTEdkQ1FVRkJMRU5CUVVFc1EwRkRja0pSTEZOQlFVRkJMRU5CUVZsU0xFOUJRVUZCTEVOQlFWRXNaVUZCUVN4RFFVRkJMRU5CUTNCQ1V5eFJRVUZCUVN4RFFVRlhWQ3hQUVVGQlFTeERRVUZSTEdOQlFVRXNRMEZCUVN4RFFVTnVRbFVzVDBGQlFVRXNRMEZCVlZZc1QwRkJRVUVzUTBGQlVTeGhRVUZCTEVOQlFVRXNRMEZEYkVKWExFbEJRVUZCTEVOQlFVOVlMRTlCUVVGQkxFTkJRVkVzWjBKQlFVRXNRMEZCUVN4RFFVRnJRbGtzUTBGQlFVRXNRMEZEYWtORExFVkJRVUZCTEVOQlFVdGlMRTlCUVVGQkxFTkJRVkVzWTBGQlFTeERRVUZCTEVOQlFXZENXU3hEUVVGQlFTeERRVU0zUWtVc1UwRkJRVUVzUTBGQldXUXNUMEZCUVVFc1EwRkJVU3hsUVVGQkxFTkJRVUVzUTBGRGNFSmxMR05CUVVGQkxFTkJRV2xDWml4UFFVRkJRU3hEUVVGUkxITkNRVUZCTEVOQlFVRXNRMEZIZWtKblFpeFRRVUZCUVN4RFFVRlpMRmRCUVVFc1EwRkZXa01zVjBGQlFVRXNRMEZCWXl4alFVRkJMRU5CUTJSRExGbEJRVUZCTEVOQlFXVnVRaXhOUVVGQlFTeERRVUZ0UW05Q0xGZEJRVUZCTEVOQlEyeERReXhUUVVGQlFTeERRVUZaY2tJc1RVRkJRVUVzUTBGQlowSnpRaXhSUVVGQlFTeERRVU0xUWtNc1NVRkJRVUVzUTBGQlQzWkNMRTFCUVVGQkxFTkJRVTkxUWl4SlFVRkJRU3hEUVVOa1F5eFZRVUZCUVN4RFFVRmhlRUlzVFVGQlFVRXNRMEZCVDNkQ0xGVkJRVUZCTEVOQlJYQkNReXhSUVVGQlFTeERRVUZYZWtJc1RVRkJRVUVzUTBGQlQzbENMRkZCUVVGQkxFTkJRMnhDUXl4VlFVRkJRU3hEUVVGaFVDeFpRVUZCUVN4RFFVTmlVU3hIUVVGQlFTeERRVUZOU2l4SlFVRkJRU3hEUVVGTFNTeEhRVUZCUVN4RFFVTllReXhIUVVGQlFTeERRVUZOVEN4SlFVRkJRU3hEUVVGTFN5eEhRVUZCUVN4RFFVTllReXhMUVVGQlFTeERRVUZSVGl4SlFVRkJRU3hEUVVGTFRTeExRVUZCUVN4RFFVTmlReXhIUVVGQlFTeERRVUZOVUN4SlFVRkJRU3hEUVVGTFR5eEhRVUZCUVN4RFFVTllReXhIUVVGQlFTeERRVUZOVWl4SlFVRkJRU3hEUVVGTFVTeEhRVUZCUVN4RFFVbFlReXhQUVVGQlFTeERRVUZWT1VJc1YwRkJRVUVzUTBGQll5eEpRVUZCTEVOQlNHWXNVVUZCUVN4RFFVbFVLMElzVDBGQlFVRXNRMEZCVlM5Q0xGZEJRVUZCTEVOQlFXTXNTVUZCUVN4RFFVaFdMRmxCUVVFc1EwRkpaR2RETEU5QlFVRkJMRU5CUVZWb1F5eFhRVUZCUVN4RFFVRmpMRWxCUVVFc1EwRklWaXhaUVVGQkxFTkJUV3hDTEZOQlFWTnBReXhYUVVGQlFTeERRVUZaUXl4RFFVRkJRU3hEUVVGUFF5eERRVUZCUVN4RFFVRk5ReXhEUVVGQlFTeERRVUZCUVN4RFFVTm9ReXhKUVU5SlF5eERRVUZCUVN4RFFVRkhReXhEUVVGQlFTeERRVUZIUXl4RFFVRkJRU3hEUVZCT1F5eERRVUZCUVN4RFFVRlRMRWxCUVVsRExFdEJRVUZCTEVOQlFVMU1MRU5CUVVGQkxFTkJRVUZCTEVOQlEyNUNUU3hEUVVGQlFTeERRVUZuUWl4RFFVRkJMRU5CUVZST0xFTkJRVUZCTEVOQlFXRkVMRU5CUVVGQkxFTkJRVThzUTBGQlFTeERRVU16UWxFc1EwRkJRVUVzUTBGQlFVRXNRMEZCVVN4RFFVRkJMRVZCUVV0RUxFTkJRVUZCTEVWQlFWRXNRMEZCUVN4RFFVTnlRa1VzUTBGQlFVRXNRMEZCVVVRc1EwRkJRVUVzUlVGQlVTeERRVUZCTEVOQlEyaENSU3hEUVVGQlFTeERRVUZqTEVWQlFVRXNSMEZCVkZZc1EwRkJRVUVzUTBGQlkxUXNSMEZCUVVFc1EwRkJTU3hEUVVGQkxFTkJRVUVzUTBGQlNTeEZRVUZCTEVOQlFVRXNRMEZCVFVFc1IwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVRXNRMEZCU1N4RlFVRkJMRU5CUVVFc1EwRkJUU3hEUVVGQkxFTkJReTlEYjBJc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlEwcERMRU5CUVVGQkxFTkJRVWxpTEVOQlFVRkJMRU5CUVZFc1EwRkJRU3hGUVVGbExFTkJRVUVzUjBGQlZrRXNRMEZCUVVFc1JVRkJaU3hEUVVGQkxFTkJRVWxCTEVOQlFVRkJMRU5CUVZFc1EwRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlNTeERRVUZCTEVOQmEwTjRSQ3hKUVVGQkxFTkJhRU5CUVN4RFFVRkJRU3hEUVVGUlZDeEhRVUZCUVN4RFFVRkpVeXhEUVVGQlFTeERRVUZCUVN4SFFVVkRRU3hEUVVGQlFTeEZRVUZUUVN4RFFVRkJRU3hIUVVGVldDeFJRVUZCUVN4RlFVVTVRbVVzUTBGQlFVRXNRMEZCU1Vvc1EwRkJRVUVzUlVGQlUwRXNRMEZCUVVFc1EwRkJVU3hEUVVGQkxFTkJRVWtzUTBGQlFTeERRVU42UWtjc1EwRkJRVUVzUTBGQlNVMHNRMEZCUVVFc1IwRkZTazRzUTBGQlFVRXNRMEZCU1ZZc1MwRkJRVUVzUTBGQlRVTXNSMEZCUVVFc1EwRkJTVTBzUTBGQlFVRXNRMEZCUVVFc1EwRkJVMHdzUjBGQlFVRXNRMEZCUVVFc1EwRkRia0pMTEVOQlFVRkJMRVZCUVZOTExFTkJRVUZCTEVOQlFVbGlMRWRCUVVGQkxFTkJRVWtzUTBGQlFTeERRVUZCTEVOQlFVbFhMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVUwc1EwRkJRU3hIUVVNM1FrRXNRMEZCUVVFc1JVRkJRVUVzUTBGRFFVVXNRMEZCUVVFc1JVRkJTeXhEUVVGQkxFTkJRVUVzUTBGQlFTeERRVWRNVEN4RFFVRkJRU3hGUVVSRlJ5eERRVUZCUVN4RFFVRkpUeXhEUVVGQlFTeEZRVUZUTEVOQlFVRXNRMEZEVGtNc1EwRkJRVUVzUTBGQlMwNHNRMEZCUVVFc1EwRkZURTBzUTBGQlFVRXNRMEZCUzI1Q0xFZEJRVUZCTEVOQlFVa3NRMEZCUVN4RFFVRkhMRU5CUVVFc1EwRkJTV3RDTEVOQlFVRkJMRU5CUVVGQkxFVkJSV1pNTEVOQlFVRkJMRVZCUVVzc1EwRkJRU3hIUVVObVJpeERRVUZCUVN4RlFVRkJRU3hEUVVOQlJTeERRVUZCUVN4RlFVRkxMRU5CUVVFc1EwRkJRU3hEUVVWSVJpeERRVUZCUVN4RFFVRkpUeXhEUVVGQlFTeEZRVUZUUkN4RFFVRkJRU3hGUVVObVRDeERRVUZCUVN4RFFVRkpMRU5CUVVFc1EwRkRTa1FzUTBGQlFVRXNRMEZCU1Uwc1EwRkJRVUVzUlVGRFMwNHNRMEZCUVVFc1EwRkJTVThzUTBGQlFVRXNSVUZCVXl4RFFVRkJMRVZCUTNSQ1RpeERRVUZCUVN4RFFVRkJRU3hEUVVGTFNpeERRVUZCUVN4RFFVRlJTeXhEUVVGQlFTeERRVUZKTEVOQlFVRXNSVUZCUzJJc1IwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVZFRMRU5CUVVGQkxFTkJRVUZCTEVOQlF6ZENSU3hEUVVGQlFTeEZRVUZSVHl4RFFVRkJRU3hIUVVWU1RpeERRVUZCUVN4RFFVRkpTaXhEUVVGQlFTeERRVUZSVWl4SFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlIydENMRU5CUVVGQkxFTkJRVkVzUTBGQlFTeERRVUZCTEVOQlFVdHNRaXhIUVVGQlFTeERRVUZKTEVOQlFVRXNRMEZCUjFNc1EwRkJRVUVzUTBGQlFVRXNRMEZEZGtORkxFTkJRVUZCTEVOQlFVa3NRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkhSRVlzUTBGQlFVRXNSVUZCVVN4RFFVRkJMRU5CUVVkTExFTkJRVUZCTEVOQlFVOU5MRU5CUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUVZjc1IwRkJRU3hEUVVGS1VpeERRVUZCUVN4RFFVRlRRU3hEUVVGQlFTeEZRVUZMTEVkQlFVRXNRMEZCUzBnc1EwRkJRVUVzUlVGQlVTeERRVUZCTEVOQlFVRXNRMEZITTBRc1NVRkdRVVVzUTBGQlFVRXNRMEZCU1VFc1EwRkJRVUVzUlVGQlMwWXNRMEZCUVVFc1EwRkJUMGNzUTBGQlFVRXNRMEZEYUVKSkxFTkJRVUZCTEVWQlFWRlFMRU5CUVVGQkxFTkJRMFJQTEVOQlFVRkJMRU5CUVU4c1EwRkJRU3hEUVVGSFJpeERRVUZCUVN4RFFVRlBUU3hEUVVGQlFTeEZRVUZCUVN4RFFVRkJRU3hEUVVGWExFZEJRVUVzUTBGQlNsUXNRMEZCUVVFc1EwRkJVMEVzUTBGQlFVRXNSVUZCU3l4SFFVRkJMRU5CUVV0TExFTkJRVUZCTEVWQlFWRXNRMEZCUVN4RFFVRkJMRU5CUlRGRUxFOUJSRUZHTEVOQlFVRkJMRU5CUVVGQkxFVkJRVk5OTEVOQlFVRkJMRU5CUVVGQkxFVkJRVlVzUjBGQlFTeERRVUZLUXl4RFFVRkJRU3hEUVVOU1VDeERRVUZCUVN4RFFVVlVMRk5CUVZOUkxHRkJRVUZCTEVOQlFXTlNMRU5CUVVGQkxFTkJRVkZNTEVOQlFVRkJMRU5CUVUxRExFTkJRVUZCTEVOQlFVRkJMRU5CUTI1RExFbEJUMGxGTEVOQlFVRkJMRU5CVUVGSkxFTkJRVUZCTEVOQlFXZENMRU5CUVVFc1EwRkJWRTRzUTBGQlFVRXNRMEZCWVVRc1EwRkJRVUVzUTBGQlR5eERRVUZCTEVOQlF6TkNVU3hEUVVGQlFTeERRVUZCUVN4RFFVRlJMRU5CUVVFc1JVRkJTMFFzUTBGQlFVRXNSVUZCVVN4RFFVRkJMRU5CUTNKQ1JTeERRVUZCUVN4RFFVRlJSQ3hEUVVGQlFTeEZRVUZSTEVOQlFVRXNRMEZEYUVKTkxFTkJRVUZCTEVOQlFWRlFMRU5CUVVGQkxFTkJRVThzUTBGQlFTeERRVU5tU1N4RFFVRkJRU3hEUVVGSlZpeERRVUZCUVN4RFFVRlRMRU5CUVVFc1EwRkRZbGNzUTBGQlFVRXNRMEZCU1ZBc1EwRkJRVUVzUTBGQlQwMHNRMEZCUVVFc1JVRkJRVUVzUTBGQlFVRXNRMEZEV0ZRc1EwRkJRVUVzUTBGQlVTeEhRVUZCTEVOQlFVcFZMRU5CUVVGQkxFTkJSMUlzU1VGRVFVRXNRMEZCUVVFc1IwRkJUU3hEUVVGQkxFTkJRME5GTEVOQlFVRkJMRU5CUVZFc1EwRkJRU3hEUVVGSFdpeERRVUZCUVN4RFFVRlJMRWRCUVVFc1EwRkJTa0VzUTBGQlFVRXNRMEZCVlVjc1EwRkJRVUVzUTBGQlQwMHNRMEZCUVVFc1EwRkJRVUVzUTBGQlNVRXNRMEZCUVVFc1JVRkJRVUVzUTBGQlMwY3NRMEZCUVVFc1JVRkJVeXhEUVVGQkxFTkJRVUVzUTBGSmVrUXNTVUZJUVZnc1EwRkJRVUVzUTBGQlNVUXNRMEZCUVVFc1EwRkJRVUVzUTBGQlN5eERRVUZCTEVWQlFVRXNRMEZCVFZrc1EwRkJRVUVzUlVGQlV5eERRVUZCTEVOQlEzaENXaXhEUVVGQlFTeEhRVUZCUVN4RFFVRlBXU3hEUVVGQlFTeERRVU5RUVN4RFFVRkJRU3hGUVVGVFpDeERRVUZCUVN4RFFVTkdZeXhEUVVGQlFTeERRVUZSTEVOQlFVRXNRMEZCUjFnc1EwRkJRVUVzUTBGQlVTeEhRVUZCTEVOQlFVcEJMRU5CUVVGQkxFTkJRVlZGTEVOQlFVRkJMRU5CUVU5TkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVsQkxFTkJRVUZCTEVWQlFVRkJMRU5CUVV0SExFTkJRVUZCTEVWQlFWTXNRMEZCUVN4RFFVRkJMRU5CUTNwRUxFZEJRVlVzUTBGQlFTeEhRVUZPV2l4RFFVRkJRU3hEUVVOR1FTeERRVUZCUVN4RFFVRkpMRU5CUVVFc1EwRkJTVThzUTBGQlFVRXNRMEZCUVVFc1NVRkRTQ3hEUVVGQkxFZEJRVWxRTEVOQlFVRkJMRWRCUVUxTkxFTkJRVUZCTEVOQlEyWXNUMEZCVDB3c1EwRkJRVUVzUTBGQlNWa3NSMEZCUVVFc1EwRkJUVWdzUTBGQlFVRXNRMEZCUVVFc1EwRkJTM2hDTEZGQlFVRkJMRU5CUVZkQkxGRkJRVUZCTEVOQlJXcERaU3hEUVVGQlFTeEZRVUZSV2l4SFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlIxTXNRMEZCUVVFc1EwRkJRVUVzUTBGRFprVXNRMEZCUVVFc1JVRkJVVThzUTBGQlFVRXNRMEZEVWl4TlFVRkJMRU5CUVZGSExFTkJRVUZCTEVOQlFVRkJMRU5CUVVzc1EwRkJRU3hEUVVGSkxFTkJRVUVzUlVGQlMxUXNRMEZCUVVFc1EwRkJTVm9zUjBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVkWExFTkJRVUZCTEVOQlFVbEdMRU5CUVVGQkxFTkJRVUZCTEVOQlIzcERMRk5CUVZOblFpeFRRVUZCUVN4RFFVRlZReXhEUVVGQlFTeERRVUZCUVN4RFFVTnFRaXhQUVVGUFFTeERRVUZCUVN4RFFVRk5MRU5CUVVFc1EwRkJRU3hGUVVGTkxFVkJRVUVzUTBGQlMwRXNRMEZCUVVFc1EwRkJUU3hEUVVGQkxFTkJRVUVzUlVGQlRTeEZRVUZCTEVOQlFVdEJMRU5CUVVGQkxFTkJRVTBzUTBGQlFTeERRVUZCTEVWQlFVMHNRMEZCUVN4RFFVRkpRU3hEUVVGQlFTeERRVUZOTEVOQlFVRXNRMEZCUVN4RFFVVnFSU3hUUVVGVFF5eE5RVUZCUVN4RFFVRlBReXhEUVVGQlFTeERRVUZCUVN4RFFVTmtMRTFCUVU4c1EwRkJUU3hIUVVGQkxFTkJRVXhCTEVOQlFVRkJMRU5CUVVGQkxFTkJSVllzVTBGQlUwTXNUMEZCUVVFc1EwRkJVVVFzUTBGQlFVRXNRMEZCUVVFc1EwRkRaaXhOUVVGUExFTkJRVTBzUjBGQlFTeERRVUZNUVN4RFFVRkJRU3hEUVVGWFFTeERRVUZCUVN4RlFVRk5MRU5CUVVFc1EwRkJTU3hIUVVGQkxFTkJRVUVzUTBGRkwwSXNVMEZCVTBVc1QwRkJRVUVzUTBGQlVVWXNRMEZCUVVFc1EwRkJRVUVzUTBGRFppeE5RVUZQTEVOQlFVMHNSMEZCUVN4RFFVRk1RU3hEUVVGQlFTeERRVUZYUVN4RFFVRkJRU3hGUVVGTkxFTkJRVUVzUTBGQlNTeEhRVUZCTEVOQlFVMUJMRU5CUVVGQkxFVkJRVTBzUlVGQlFTeERRVUZMTEVkQlFVRXNRMEZCVFVFc1EwRkJRVUVzUlVGQlRTeEZRVUZCTEVOQlFVc3NSMEZCUVN4RFFVRkJMRU5CUldwRkxGTkJRVk5ITEU5QlFVRkJMRU5CUVZGSUxFTkJRVUZCTEVOQlFVRkJMRU5CUTJZc1QwRkJUM0pDTEZkQlFVRkJMRU5CUVZseFFpeERRVUZCUVN4RFFVRkpMRVZCUVVFc1EwRkJTU3hEUVVGQkxFTkJRVUVzUTBGRk4wSXNVMEZCVTBrc1QwRkJRVUVzUTBGQlVVb3NRMEZCUVVFc1EwRkJRVUVzUTBGRFppeFBRVUZQY2tJc1YwRkJRVUVzUTBGQldYRkNMRU5CUVVGQkxFTkJRVWtzUlVGQlFTeERRVUZKTEVOQlFVRXNRMEZCUVN4RFFVYzNRaXhUUVVGVFN5eFRRVUZCUVN4RFFVRlZReXhEUVVGQlFTeERRVUZIUXl4RFFVRkJRU3hEUVVGTFF5eERRVUZCUVN4RFFVRkJRU3hEUVVONlFteEVMRVZCUVVGQkxFTkJRVWRuUkN4RFFVRkJRU3hEUVVGRk4wTXNVMEZCUVVFc1EwRkJRVUVzUTBGQldUaERMRU5CUVVGQkxFTkJRVXNzUTBGQlJVVXNSMEZCUVVFc1EwRkJTeXhWUVVGQkxFTkJRV01zVDBGQlQwTXNTVUZCUVVFc1EwRkJTMFlzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkhla1FzVTBGQlUwTXNSMEZCUVVFc1EwRkJTVVVzUTBGQlFVRXNRMEZCVFdJc1EwRkJRVUVzUTBGQlQyTXNRMEZCUVVFc1EwRkJUME1zUTBGQlFVRXNRMEZCUVVFc1EwRkRMMElzU1VGRFNVTXNRMEZCUVVFc1EwRkJWek5FTEU5QlFVRkJMRU5CUVVGQkxFTkJSRU41UkN4RFFVRkJRU3hEUVVGQlFTeERRVVZvUWl4SFFVRkpSU3hEUVVGQlFTeERRVUZYYUVJc1EwRkJRVUVzUTBGQlVXRXNRMEZCUVVFc1EwRkJTMnhETEU5QlFVRkJMRU5CUVVGQkxFTkJRVlVzVFVGQlRWUXNWVUZCUVVFc1EwRkJWMDRzVjBGQlFVRXNRMEZCUVVFc1EwRkRka1FzU1VGQlNYRkVMRU5CUVVGQkxFTkJRVkZLTEVOQlFVRkJMRU5CUVV0dVF5eFBRVUZCUVN4RFFVRkJRU3hEUVVGVGQwTXNSVUZCUVVFc1EwRkRkRUpETEVOQlFVRkJMRU5CUVZGSUxFTkJRVUZCTEVOQlFWZElMRU5CUVVGQkxFTkJRVXRxUXl4UFFVRkJRU3hEUVVGQlFTeERRVU40UW5kRExFTkJRVUZCTEVOQlFVOUlMRU5CUVVGQkxFTkJRVTFKTEV0QlFVRkJMRU5CUVUxR0xFTkJRVUZCTEVOQlFVOUJMRU5CUVVGQkxFTkJRVkZ1UWl4RFFVRkJRU3hEUVVGQlFTeERRVU4wUXl4UFFVRlBaU3hEUVVGQlFTeERRVUZwUWtzc1EwRkJRVUVzUTBGQlQwRXNRMEZCUVVFc1EwRkJTMFVzVDBGQlFVRXNSVUZCUVVFc1EwRkZkRU1zVTBGQlUwTXNSMEZCUVVFc1EwRkJTVllzUTBGQlFVRXNRMEZCVFdJc1EwRkJRVUVzUTBGQlQyTXNRMEZCUVVFc1EwRkJUMVVzUTBGQlFVRXNRMEZCV1RGRExFTkJRVUZCTEVOQlFVOXBReXhEUVVGQlFTeERRVUZCUVN4RFFVTnNSQ3hKUVVOSlF5eERRVUZCUVN4RFFVRlhNMFFzVDBGQlFVRXNRMEZCUVVFc1EwRkVRM2xFTEVOQlFVRkJMRU5CUVVGQkxFTkJSV2hDTEVkQlFVbEZMRU5CUVVGQkxFTkJRVmRvUWl4RFFVRkJRU3hEUVVGUllTeERRVUZCUVN4RFFVRkxiRU1zVDBGQlFVRXNRMEZCUVVFc1EwRkJWU3hOUVVGTlZDeFZRVUZCUVN4RFFVRlhUaXhYUVVGQlFTeERRVUZCUVN4RFFVbDJSQ3hKUVVoQkxFbEJRVWx4UkN4RFFVRkJRU3hEUVVGUlNpeERRVUZCUVN4RFFVRkxia01zVDBGQlFVRXNRMEZCUVVFc1EwRkJVM2RETEVWQlFVRkJMRU5CUTNSQ1F5eERRVUZCUVN4RFFVRlJTQ3hEUVVGQlFTeERRVUZYU0N4RFFVRkJRU3hEUVVGTGFrTXNUMEZCUVVFc1EwRkJRVUVzUTBGRGVFSjNReXhEUVVGQlFTeERRVUZQU1N4RFFVRkJRU3hEUVVGQlFTeERRVUZaTVVNc1EwRkJRVUVzUTBGQlFVRXNRMEZEWkZrc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVZEJMRU5CUVVGQkxFTkJRVWxOTEVOQlFVRkJMRU5CUVU5T0xFTkJRVUZCTEVWQlFVRkJMRU5CUVV0MVFpeERRVUZCUVN4RFFVRk5SU3hEUVVGQlFTeERRVUZSZWtJc1EwRkJRVUVzUTBGQlFVRXNRMEZCU3pCQ0xFTkJRVUZCTEVOQlFVdE1MRU5CUVVGQkxFTkJRV2xDY2tJc1EwRkJRVUVzUTBGQlNVMHNRMEZCUVVFc1EwRkJVVTRzUTBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVFc1EwRkhNMFlzUjBGQlN6VkRMRTFCUVVGQkxFTkJRVTh5UlN4SFFVRkJRU3hEUVdkR1RDeERRVU5NTEVkQlFVRXNRMEZCUzNoRkxFdEJRVUZCTEVOQlFVMHNWVUZCUVN4RFFVTlVXU3haUVVGQlFTeERRVUZoTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRU3hEUVVOU1dpeExRVUZCUVN4RFFVRk5MRlZCUVVFc1EwRkRXQ3hKUVVGSldTeFpRVUZCUVN4RFFVRkJRU3hEUVVGakxFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNSVUZEWkZvc1MwRkJRVUVzUTBGQlRTeFZRVUZCTEVOQlNWWXNUMEZJUVN4SlFVRkpXU3haUVVGQlFTeERRVU5LTEVsQlFVbEJMRmxCUVVGQkxFTkJRV0VzUjBGQlFTeERRVUZCTEVOQlEycENMRWxCUVVsQkxGbEJRVUZCTEVOQlFXRnBReXhIUVVGQlFTeERRVUZCUVN4RFFYQlBSaXhoUVVGQkxFVkJjVTlTYWtNc1dVRkJRVUVzUTBGQllUWkVMRWxCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUTJ4Q0xFTkJUVVlzU1VGRVFTeEpRVU41UTJwQ0xFZEJRVUZCTEVOQlJISkRhMElzWjBKQlFVRkJMRU5CUVVGQkxFTkJTa281UkN4WlFVRkJRU3hEUVVGbExGTkJRWEZDSzBRc1EwRkJRVUVzUTBGQlFVRXNRMEZGYkVNc1QwRkVRVEZGTEZWQlFVRkJMRU5CUVZjd1JDeEpRVUZCUVN4RFFVRk5MME1zV1VGQlFVRXNRMEZCUVVFc1EwRkRWaXhKUVVGSlR5eFZRVUZCUVN4RFFVRlhaaXhQUVVGQlFTeERRVUZSZFVVc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUlVGRlNXcEZMRk5CUVVGQkxFTkJRVUZCTEVOQlFXRlRMRlZCUVVGQkxFTkJRVmRVTEZOQlFVRkJMRU5CUVVGQkxFTkJRMjVFYTBVc1NVRkJRVUVzUTBGQlQzWkZMRWxCUVVGQkxFTkJRVXRqTEZWQlFVRkJMRU5CUVVGQkxFTkJRV0V3UkN4RFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlVVUXNTVUZCUVVFc1EwRkJTMFFzVFVGQlFVRXNRMEZCVTBVc1EwRkJRVUVzUlVGQlFVRXNRMEZEYmtSeVFpeEhRVUZCUVN4RFFVRk5iMElzU1VGQlFVRXNRMEZCUzBNc1EwRkJRVUVzUlVGQlFVRXNRMEZCUVVFc1NVRkJVMnBGTEZsQlFVRkJMRVZCUVdWa0xFbEJRVUZCTEVOQlFVdGpMRmxCUVVGQkxFTkJRV00wUXl4SFFVRkJRU3hEUVVGTGNrTXNWVUZCUVVFc1EwRkJWM0ZETEVkQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlJURkZOVVFzVDBGQlFVRXNSMEZCVXpoRkxHZENRVUZCUVN4RFFVRnBRa2tzVjBGQlFVRXNRMEZCWTJ4RkxGbEJRVUZCTEVOQlFVRkJMRU5CUnk5RExFbEJRVWxuUkN4SlFVRkJRU3hEUVVGUExFbEJRVWs1UXl4VFFVRkJRU3hEUVVGVkxFbEJRVWxHTEZsQlFVRkJMRU5CUVdFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGRGRFTnRSU3hSUVVGQlFTeERRVUZYYWtVc1UwRkJRVUVzUTBGQlZVb3NVMEZCUVVFc1EwRkJRVUVzUTBGQlYzTkZMRTlCUVVGQkxFTkJRM0JEY0VJc1NVRkJRVUVzUTBGQlMyOUNMRTlCUVVGQkxFTkJRVkVzUTBGQlFTeERRVUZITEZWQlFVRXNRMEZCUVN4RFFVTm9RbkJDTEVsQlFVRkJMRU5CUVV0dlFpeFBRVUZCUVN4RFFVRlJMRU5CUVVFc1EwRkJSeXhWUVVGQkxFTkJRVUVzUTBGQlFTeERRVU5hY0VJc1NVRkJRVUVzUTBGQlMzRkNMRTlCUVVGQkxFTkJRVkVzUTBGQlFTeERRVUZCTEVWQlFVOXlRaXhKUVVGQlFTeERRVUZMY1VJc1QwRkJRVUVzUTBGQlVTeERRVUZCTEVOQlFVRXNSVUZCU1d4R0xGZEJRVUZCTEVOQlFWbGxMRk5CUVVGQkxFTkJRVlZLTEZOQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGRGVrVnpSU3hQUVVGQlFTeERRVUZUTEZOQlFXbENSU3hEUVVGQlFTeERRVUZaY2tRc1EwRkJRVUVzUTBGQlFVRXNRMEZEY0VOclJDeFJRVUZCUVN4RFFVRlRTU3hKUVVGQlFTeERRVUZMZUVJc1NVRkJRVUVzUTBGQlRYVkNMRU5CUVVGQkxFTkJRVmx5UkN4RFFVRkJRU3hGUVVGVExFVkJRVUVzUlVGQlRTeEZRVUZCTEVOQlFVRXNRMEZCUVN4RFFVVnFSSFZFTEZGQlFVRkJMRU5CUVZVc1UwRkJhMEpHTEVOQlFVRkJMRU5CUVZseVJDeERRVUZCUVN4RFFVRkJRU3hEUVVOMFEydEVMRkZCUVVGQkxFTkJRVk5KTEVsQlFVRkJMRU5CUVV0NFFpeEpRVUZCUVN4RFFVRk5kVUlzUTBGQlFVRXNRMEZCV1hKRUxFTkJRVUZCTEVWQlFWTXNSVUZCUVN4RlFVRk5MRVZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRXRCT1VkdVJHcENMRmxCUVVGQkxFTkJRV1VzVTBGQmNVSXJSQ3hEUVVGQlFTeERRVUZCUVN4RFFVTnNRekZGTEZWQlFVRkJMRU5CUVZjd1JDeEpRVUZCUVN4RFFVRk5MME1zV1VGQlFVRXNRMEU1U1VZc1lVRkJRU3hEUVVGQkxFTkJLMGxtTEVsQlFVbDVSU3hEUVVGQlFTeERRVUZoYWtZc1QwRkJRVUVzUTBGQlVYVkZMRU5CUVVGQkxFTkJRVUZCTEVOQlEzcENhRUlzU1VGQlFVRXNRMEZCUzAwc1JVRkJRVUVzUTBGQlMzcEVMRk5CUVVGQkxFTkJRVlV5UlN4SlFVRkJRU3hEUVVGTExFbEJRVWt2UXl4TFFVRkJRU3hEUVVGTmFVUXNRMEZCUVVFc1EwRkJRVUVzUTBGQllTeERRVUZCTEVOQlFVRXNRMEZEYUVReFFpeEpRVUZCUVN4RFFVRkxha01zVDBGQlFVRXNRMEZCUVVFc1EwRkJWekpFTEVOQlFVRkJMRU5CUVVGQkxFTkJSMnhDZGtVc1UwRkJRVUVzUTBGQldTeFRRVUZyUW5GQ0xFTkJRVUZCTEVOQlFWRXJReXhEUVVGQlFTeERRVUZaUnl4RFFVRkJRU3hEUVVGQlFTeERRVU5vUkhCR0xGVkJRVUZCTEVOQlFWY3dSQ3hKUVVGQlFTeERRVUZOTjBNc1UwRkJRVUVzUTBGd1Nrd3NWVUZCUVN4RFFVRkJMRU5CY1VwYVlpeFZRVUZCUVN4RFFVRlhhME1zUTBGQlFVRXNRMEZCVVhaQ0xGbEJRVUZCTEVOQmNrcFFMRlZCUVVFc1EwRkJRU3hEUVhOS1dpeEpRVUZKTUVVc1EwRkJRVUVzUTBGQlpXNUVMRU5CUVVGQkxFTkJRVTlVTEU5QlFVRkJMRU5CUVVGQkxFTkJRM1JDTmtRc1EwRkJRVUVzUTBGQlUzSkdMRk5CUVVGQkxFTkJRVlZuUml4RFFVRkJRU3hEUVVGQlFTeERRVU4yUWl4SFFVRkpTeXhEUVVGQlFTeERRVUZUTEVOQlFVRXNSVUZCUzBFc1EwRkJRVUVzUTBGQlUwUXNRMEZCUVVFc1EwRkJZeXhOUVVGTmNrVXNWVUZCUVVFc1EwRkJWeXhsUVVGQkxFTkJRVUVzUTBGRk1VUXNSMEZCU1hORkxFTkJRVUZCTEVWQlJFcEdMRU5CUVVGQkxFTkJRVUZCTEV0QlFVRkJMRU5CUVVGQkxFZEJRV0ZCTEVOQlFVRkJMRU5CUVRKQ1F5eERRVUZCUVN4RFFVRmxReXhEUVVGQlFTeERRVUZUY0VZc1VVRkJRVUVzUTBGQlUydEdMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUXk5RFF5eERRVUZCUVN4RFFVRmpMRTFCUVUxeVJTeFZRVUZCUVN4RFFYaEtMMElzWlVGQlFTeERRVUZCTEVOQmVVcG1NRU1zU1VGQlFVRXNRMEZCUzJ4RExFOUJRVUZCTEVOQlFVRkJMRU5CUVZkVkxFTkJRVUZCTEVOQlEyaENkMElzU1VGQlFVRXNRMEZCUzJoRExFOUJRVUZCTEVOQlFVRkJMRU5CUVZjMFJDeERRVUZCUVN4RFFVTm9RalZDTEVsQlFVRkJMRU5CUVV0cVF5eFBRVUZCUVN4RFFVRkJRU3hEUVVGWE1rUXNRMEZCUVVFc1EwRkJRVUVzUTBGSFpERkdMRmRCUVVGQkxFZEJRMFl5UkN4VFFVRkJRU3hEUVVGVk1VTXNXVUZCUVVFc1EwRm9Ta2tzV1VGQlFTeERRV2RLZFVJc1NVRkJRU3hEUVVGQkxFTkJRM0pETUVNc1UwRkJRVUVzUTBGQlZYaERMRk5CUVVGQkxFTkJiRXBFTEZGQlFVRXNRMEZyU205Q0xFbEJRVUVzUTBGQlFTeERRVU0zUW5kRExGTkJRVUZCTEVOQlFWVjRReXhUUVVGQlFTeERRV3hLU1N4WlFVRkJMRU5CYTBwdlFpeEpRVUZCTEVOQlFVRXNRMEZEYkVOM1F5eFRRVUZCUVN4RFFVRlZlRU1zVTBGQlFVRXNRMEZzU2trc1dVRkJRU3hEUVd0S2IwSXNTVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkhjRU5tTEZkQlFVRkJMRU5CUVZsbExGTkJRVUZCTEVOQlFWVktMRk5CUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZEYUVOMVJTeFBRVUZCUVN4RFFVRlRMRk5CUVdsQ1F5eERRVUZCUVN4RFFVRkJRU3hEUVVONFFpeFBRVUZQZUVJc1IwRkJRVUVzUTBGQlNVTXNTVUZCUVVFc1EwRkJUU3hEUVVGQkxFTkJRVWQxUWl4RFFVRkJRU3hEUVVGQlFTeERRVUZaTEVOQlFVRXNRMEZCUVN4RlFVRk5MRVZCUVVFc1JVRkJUU3hGUVVGQkxFTkJRVUVzUTBGRk9VTk5MRkZCUVVGQkxFTkJRVlVzVTBGQmEwSk9MRU5CUVVGQkxFTkJRVUZCTEVOQlF6RkNMRTlCUVU5NFFpeEhRVUZCUVN4RFFVRkpReXhKUVVGQlFTeERRVUZOTEVOQlFVRXNRMEZCUjNWQ0xFTkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGRmJFTlBMRkZCUVVGQkxFTkJRVlVzVTBGQmEwSlFMRU5CUVVGQkxFTkJRVUZCTEVOQlF6RkNMRWxCUVVsdVF5eERRVUZCUVN4RFFVRlJWeXhIUVVGQlFTeERRVUZKUXl4SlFVRkJRU3hEUVVGTkxFTkJRVUVzUTBGQlIzVkNMRU5CUVVGQkxFTkJRVmxSTEZOQlFVRkJMRU5CUVZVc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGREwwTXNUVUZCUVN4RFFVRlJNME1zUTBGQlFVRXNRMEZCVFN4RFFVRkJMRU5CUVVFc1JVRkJUU3hEUVVGQkxFTkJRVWxCTEVOQlFVRkJMRU5CUVUwc1EwRkJRU3hEUVVGQkxFZEJRVThzUlVGQlFTeEZRVUZOTEVWQlFVRXNRMEZCUVN4RFFVVTNRelJETEZOQlFVRkJMRU5CUVZjc1UwRkJiVUpVTEVOQlFVRkJMRU5CUVVGQkxFTkJRelZDTEVsQlFVbHVReXhEUVVGQlFTeERRVUZSVnl4SFFVRkJRU3hEUVVGSlF5eEpRVUZCUVN4RFFVRk5MRU5CUVVFc1EwRkJSM1ZDTEVOQlFVRkJMRU5CUVZsUkxGTkJRVUZCTEVOQlFWVXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkRMME1zVDBGQlR6TkRMRU5CUVVGQkxFTkJRVTBzUTBGQlFTeERRVUZCTEVWQlFVMHNRMEZCUVN4RFFVRkpRU3hEUVVGQlFTeERRVUZOTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUlM5Q05rTXNVVUZCUVVFc1EwRkJWU3hUUVVGclFsWXNRMEZCUVVFc1EwRkJRVUVzUTBGRE1VSXNUMEZCVDNCRExGTkJRVUZCTEVOQlFWVlpMRWRCUVVGQkxFTkJRVWxETEVsQlFVRkJMRU5CUVUwc1EwRkJRU3hEUVVGSGRVSXNRMEZCUVVFc1EwRkJXVkVzVTBGQlFVRXNRMEZCVlN4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGRmRFUkhMRk5CUVVGQkxFTkJRVmNzVTBGQmJVSllMRU5CUVVGQkxFTkJRVUZCTEVOQlF6VkNMRTlCUVU5d1F5eFRRVUZCUVN4RFFVRlZXU3hIUVVGQlFTeERRVUZKUXl4SlFVRkJRU3hEUVVGTkxFTkJRVUVzUTBGQlIzVkNMRU5CUVVGQkxFTkJRVmxSTEZOQlFVRkJMRU5CUVZVc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEhRVUZUTEVOQlFVRXNRMEZCUVN4RFFVVXZSRWtzVlVGQlFVRXNRMEZCV1N4VFFVRnZRbG9zUTBGQlFVRXNRMEZCUVVFc1EwRkRPVUlzVDBGQlQzWkRMR0ZCUVVGQkxFTkJRV05sTEVkQlFVRkJMRU5CUVVsRExFbEJRVUZCTEVOQlFVMHNRMEZCUVN4RFFVRkhkVUlzUTBGQlFVRXNRMEZCV1ZFc1UwRkJRVUVzUTBGQlZTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkxMRVZCUVVFc1EwRkJTU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVVZ1UlVzc1ZVRkJRVUVzUTBGQldTeFRRVUZ2UW1Jc1EwRkJRVUVzUTBGQlFVRXNRMEZET1VJc1QwRkJUM1pETEdGQlFVRkJMRU5CUVdObExFZEJRVUZCTEVOQlFVbERMRWxCUVVGQkxFTkJRVTBzUTBGQlFTeERRVUZIZFVJc1EwRkJRVUVzUTBGQldWRXNVMEZCUVVFc1EwRkJWU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZMTEVWQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVWdVJWWXNUMEZCUVVFc1EwRkJVeXhUUVVGcFFrVXNRMEZCUVVFc1EwRkJXWEpFTEVOQlFVRkJMRU5CUVVGQkxFTkJRM0JEZVVNc1IwRkJRVUVzUTBGQlNWZ3NTVUZCUVVFc1EwRkJUU3hEUVVGQkxFTkJRVWQxUWl4RFFVRkJRU3hEUVVGWmJFTXNUVUZCUVVFc1EwRkJVVzVDTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlJXNURkVVFzVVVGQlFVRXNRMEZCVlN4VFFVRnJRa1lzUTBGQlFVRXNRMEZCV1hKRUxFTkJRVUZCTEVOQlFVRkJMRU5CUTNSRGVVTXNSMEZCUVVFc1EwRkJTVmdzU1VGQlFVRXNRMEZCVFN4RFFVRkJMRU5CUVVkMVFpeERRVUZCUVN4RFFVRlpiRU1zVFVGQlFVRXNRMEZCVVc1Q0xFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSVzVEYlVVc1VVRkJRVUVzUTBGQlZTeFRRVUZyUW1Rc1EwRkJRVUVzUTBGQldYSkVMRU5CUVVGQkxFTkJRVUZCTEVOQlEzUkRlVU1zUjBGQlFVRXNRMEZCU1Znc1NVRkJRVUVzUTBGQlRTeERRVUZCTEVOQlFVZDFRaXhEUVVGQlFTeERRVUZaYUVNc1QwRkJRVUVzUTBGQlUzSkNMRU5CUVVGQkxFTkJRVTgyUkN4VFFVRkJRU3hEUVVGVkxFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZGY2tSUExGTkJRVUZCTEVOQlFWY3NVMEZCYlVKbUxFTkJRVUZCTEVOQlFWbHlSQ3hEUVVGQlFTeERRVUZCUVN4RFFVTjRRM2xETEVkQlFVRkJMRU5CUVVsWUxFbEJRVUZCTEVOQlFVMHNRMEZCUVN4RFFVRkhkVUlzUTBGQlFVRXNRMEZCV1doRExFOUJRVUZCTEVOQlFWTnlRaXhEUVVGQlFTeERRVUZQTmtRc1UwRkJRVUVzUTBGQlZTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUlhKRVVTeFJRVUZCUVN4RFFVRlZMRk5CUVd0Q2FFSXNRMEZCUVVFc1EwRkJXWEpFTEVOQlFVRkJMRU5CUVVGQkxFTkJRM1JEZVVNc1IwRkJRVUVzUTBGQlNWZ3NTVUZCUVVFc1EwRkJUU3hEUVVGQkxFTkJRVWQxUWl4RFFVRkJRU3hEUVVGWkwwSXNUMEZCUVVFc1EwRkJVM1JDTEVOQlFVRkJMRU5CUVU4MlJDeFRRVUZCUVN4RFFVRlZMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGRmNrUlRMRk5CUVVGQkxFTkJRVmNzVTBGQmJVSnFRaXhEUVVGQlFTeERRVUZaY2tRc1EwRkJRVUVzUTBGQlFVRXNRMEZEZUVONVF5eEhRVUZCUVN4RFFVRkpXQ3hKUVVGQlFTeERRVUZOTEVOQlFVRXNRMEZCUjNWQ0xFTkJRVUZCTEVOQlFWa3ZRaXhQUVVGQlFTeERRVUZUZEVJc1EwRkJRVUVzUTBGQlR6WkVMRk5CUVVGQkxFTkJRVlVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVVnlSRlVzVlVGQlFVRXNRMEZCV1N4VFFVRnZRbXhDTEVOQlFVRkJMRU5CUVZseVJDeERRVUZCUVN4RFFVRkJRU3hEUVVNeFEzbERMRWRCUVVGQkxFTkJRVWxZTEVsQlFVRkJMRU5CUVUwc1EwRkJRU3hEUVVGSGRVSXNRMEZCUVVFc1EwRkJXVGRDTEU5QlFVRkJMRU5CUVZONFFpeERRVUZCUVN4RFFVRlBOa1FzVTBGQlFVRXNRMEZCVlN4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJSWEpFVnl4VlFVRkJRU3hEUVVGWkxGTkJRVzlDYmtJc1EwRkJRVUVzUTBGQldYSkVMRU5CUVVGQkxFTkJRVUZCTEVOQlF6RkRlVU1zUjBGQlFVRXNRMEZCU1Znc1NVRkJRVUVzUTBGQlRTeERRVUZCTEVOQlFVZDFRaXhEUVVGQlFTeERRVUZaT1VJc1QwRkJRVUVzUTBGQlUzWkNMRU5CUVVGQkxFTkJRVTgyUkN4VFFVRkJRU3hEUVVGVkxFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CYzBONlJHcEdMR05CUVVGQkxFTkJRV1ZITEZsQlFVRkJMRU5CTDFCSkxHRkJRVUVzUTBGQlFTeERRV2RSYmtKSUxHTkJRVUZCTEVOQlFXVkxMRk5CUVVGQkxFTkJMMUJETEZWQlFVRXNRMEZCUVN4RFFXZFJhRUpvUWl4SlFVRkJRU3hEUVVGTFowSXNVMEZCUVVFc1EwRkJWVW9zVTBGQlFVRXNRMEZCUVVFc1EwRkJXV0lzVFVGQlFVRXNRMEZCVDNsSExFbEJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUTJ4RFF5eFBRVUZCUVN4RFFVRnZRakZHTEZkQlFVRkJMRU5CUVVsRUxGbEJRVUZCTEVOQlEzaENNa1lzVDBGQlFVRXNRMEZCYVVKNFJpeFJRVUZCUVN4RFFVRkpSQ3hUUVVGQlFTeERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFkZFRvVW5zY29wYWJsZXM9cmVxdWlyZSg3KSxzdGVwPXJlcXVpcmUoNjApLEl0ZXJhdG9ycz1yZXF1aXJlKDYxKSx0b0lPYmplY3Q9cmVxdWlyZSgxMTkpO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoNTgpKEFycmF5LFwiQXJyYXlcIixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9dG9JT2JqZWN0KGUpLHRoaXMuX2k9MCx0aGlzLl9rPXR9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdCx0PXRoaXMuX2sscz10aGlzLl9pKys7cmV0dXJuIWV8fHM+PWUubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxzdGVwKDEpKTpzdGVwKDAsXCJrZXlzXCI9PXQ/czpcInZhbHVlc1wiPT10P2Vbc106W3MsZVtzXV0pfSxcInZhbHVlc1wiKSxJdGVyYXRvcnMuQXJndW1lbnRzPUl0ZXJhdG9ycy5BcnJheSxhZGRUb1Vuc2NvcGFibGVzKFwia2V5c1wiKSxhZGRUb1Vuc2NvcGFibGVzKFwidmFsdWVzXCIpLGFkZFRvVW5zY29wYWJsZXMoXCJlbnRyaWVzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cGRHVnlZWFJ2Y2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpoWkdSVWIxVnVjMk52Y0dGaWJHVnpJaXdpY21WeGRXbHlaU0lzSW5OMFpYQWlMQ0pKZEdWeVlYUnZjbk1pTENKMGIwbFBZbXBsWTNRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lRWEp5WVhraUxDSnBkR1Z5WVhSbFpDSXNJbXRwYm1RaUxDSjBhR2x6SWl3aVgzUWlMQ0pmYVNJc0lsOXJJaXdpVHlJc0ltbHVaR1Y0SWl3aWJHVnVaM1JvSWl3aVFYSm5kVzFsYm5SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMR2xDUVVGdFFrTXNVVUZCVVN4NVFrRkRNMEpETEV0QlFVOUVMRkZCUVZFc1owSkJRMlpGTEZWQlFWbEdMRkZCUVZFc1owSkJRM0JDUnl4VlFVRlpTQ3hSUVVGUkxHbENRVTE0UWtrc1QwRkJUME1zVVVGQlZVd3NVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSk5MRTFCUVU4c1VVRkJVeXhUUVVGVlF5eEZRVUZWUXl4SFFVTTNSVU1zUzBGQlMwTXNSMEZCUzFBc1ZVRkJWVWtzUjBGRGNFSkZMRXRCUVV0RkxFZEJRVXNzUlVGRFZrWXNTMEZCUzBjc1IwRkJTMG9zUjBGRlZDeFhRVU5FTEVsQlFVbExMRVZCUVVsS0xFdEJRVXRETEVkQlExUkdMRVZCUVU5RExFdEJRVXRITEVkQlExcEZMRVZCUVZGTUxFdEJRVXRGTEV0QlEycENMRTlCUVV0RkxFZEJRVXRETEVkQlFWTkVMRVZCUVVWRkxGRkJRMjVDVGl4TFFVRkxReXhSUVVGQlFTeEZRVU5GVkN4TFFVRkxMRWxCUldGQkxFdEJRVXNzUlVGQmNFSXNVVUZCVWs4c1JVRkJLMEpOTEVWQlEzWkNMRlZCUVZKT0xFVkJRV2xEU3l4RlFVRkZReXhIUVVONFFpeERRVUZEUVN4RlFVRlBSQ3hGUVVGRlF5eE5RVU40UWl4VlFVZElXaXhWUVVGVll5eFZRVUZaWkN4VlFVRlZTU3hOUVVWb1ExQXNhVUpCUVdsQ0xGRkJRMnBDUVN4cFFrRkJhVUlzVlVGRGFrSkJMR2xDUVVGcFFpSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG1GeWNtRjVMbWwwWlhKaGRHOXlMbXB6SW4wPSIsInZhciBuYXZpZ2F0b3I9cmVxdWlyZSg0MykubmF2aWdhdG9yO21vZHVsZS5leHBvcnRzPW5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudHx8XCJcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTFjMlZ5TFdGblpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYkltNWhkbWxuWVhSdmNpSXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpZFhObGNrRm5aVzUwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVTkpRU3hWUVVSVFF5eFJRVUZSTEdGQlEwVkVMRlZCUlhaQ1JTeFBRVUZQUXl4UlFVRlZTQ3hYUVVGaFFTeFZRVUZWU1N4WFFVRmhJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhmZFhObGNpMWhaMlZ1ZEM1cWN5SjkiLCJ2YXIgZ2xvYmFsPXJlcXVpcmUoNDMpLGNvcmU9cmVxdWlyZSgyNiksTElCUkFSWT1yZXF1aXJlKDYyKSx3a3NFeHQ9cmVxdWlyZSgxMzApLGRlZmluZVByb3BlcnR5PXJlcXVpcmUoNzQpLmY7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI9Y29yZS5TeW1ib2x8fChjb3JlLlN5bWJvbD1MSUJSQVJZP3t9Omdsb2JhbC5TeW1ib2x8fHt9KTtcIl9cIj09ZS5jaGFyQXQoMCl8fGUgaW4gcnx8ZGVmaW5lUHJvcGVydHkocixlLHt2YWx1ZTp3a3NFeHQuZihlKX0pfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTNhM010WkdWbWFXNWxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltZHNiMkpoYkNJc0luSmxjWFZwY21VaUxDSmpiM0psSWl3aVRFbENVa0ZTV1NJc0luZHJjMFY0ZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVppSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p1WVcxbElpd2lKRk41YldKdmJDSXNJbE41YldKdmJDSXNJbU5vWVhKQmRDSXNJblpoYkhWbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4UFFVRlRReXhSUVVGUkxHRkJRMnBDUXl4TFFVRlBSQ3hSUVVGUkxGZEJRMlpGTEZGQlFWVkdMRkZCUVZFc1kwRkRiRUpITEU5QlFWTklMRkZCUVZFc1kwRkRha0pKTEdWQlFXbENTaXhSUVVGUkxHZENRVUZuUWtzc1JVRkROME5ETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNTVUZCU1VNc1JVRkJWVklzUzBGQlMxTXNVMEZCVjFRc1MwRkJTMU1zVDBGQlUxSXNVVUZCVlN4SFFVRkxTQ3hQUVVGUFZ5eFJRVUZWTEVsQlEzUkVMRXRCUVd4Q1JpeEZRVUZMUnl4UFFVRlBMRWxCUVdWSUxFdEJRVkZETEVkQlFWVk1MR1ZCUVdWTExFVkJRVk5FTEVWQlFVMHNRMEZCUlVrc1RVRkJUMVFzVDBGQlQwVXNSVUZCUlVjaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hGOTNhM010WkdWbWFXNWxMbXB6SW4wPSIsImV4cG9ydHMuZj1yZXF1aXJlKDEzMSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkzYTNNdFpYaDBMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVjRjRzl5ZEhNaUxDSm1JaXdpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRkRMRVZCUVVsRExGRkJRVkVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEY5M2EzTXRaWGgwTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUCxcIkFycmF5XCIse2NvcHlXaXRoaW46cmVxdWlyZSgxMSl9KSxyZXF1aXJlKDcpKFwiY29weVdpdGhpblwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNWpiM0I1TFhkcGRHaHBiaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbEFpTENKamIzQjVWMmwwYUdsdUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZGQlFWTXNRMEZCUlVNc1YwRkJXVVlzVVVGQlVTd3dRa0ZGYkVSQkxGRkJRVkVzZDBKQlFWSkJMRU5CUVdsRElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1WVhKeVlYa3VZMjl3ZVMxM2FYUm9hVzR1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkZXZlcnk9cmVxdWlyZSgxNSkoNCk7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKiFyZXF1aXJlKDEwNykoW10uZXZlcnksITApLFwiQXJyYXlcIix7ZXZlcnk6ZnVuY3Rpb24ocil7cmV0dXJuICRldmVyeSh0aGlzLHIsYXJndW1lbnRzWzFdKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNWxkbVZ5ZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlSbGRtVnllU0lzSWxBaUxDSkdJaXdpWlhabGNua2lMQ0pqWVd4c1ltRmphMlp1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFBRVUZUUkN4UlFVRlJMRzFDUVVGU1FTeERRVUUwUWl4SFFVVjZRMFFzVVVGQlVVRXNVVUZCVVVjc1JVRkJTVWdzVVVGQlVVa3NSMEZCUzBnc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkJSMGtzVDBGQlFVRXNSMEZCWXl4UlFVRlRMRU5CUlhKR1FTeE5RVUZQTEZOQlFXVkRMRWRCUTNCQ0xFOUJRVTlLTEU5QlFVOUxMRXRCUVUxRUxFVkJRVmxGTEZWQlFWVWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1aGNuSmhlUzVsZG1WeWVTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlAsXCJBcnJheVwiLHtmaWxsOnJlcXVpcmUoMTIpfSkscmVxdWlyZSg3KShcImZpbGxcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzVtYVd4c0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVVDSXNJbVpwYkd3aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVVVGQlV5eERRVUZGUXl4TFFVRk5SaXhSUVVGUkxHMUNRVVUxUTBFc1VVRkJVU3gzUWtGQlVrRXNRMEZCYVVNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTVoY25KaGVTNW1hV3hzTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkZmlsdGVyPXJlcXVpcmUoMTUpKDIpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiohcmVxdWlyZSgxMDcpKFtdLmZpbHRlciwhMCksXCJBcnJheVwiLHtmaWx0ZXI6ZnVuY3Rpb24ocil7cmV0dXJuICRmaWx0ZXIodGhpcyxyLGFyZ3VtZW50c1sxXSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzVtYVd4MFpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtabWxzZEdWeUlpd2lVQ0lzSWtZaUxDSm1hV3gwWlhJaUxDSmpZV3hzWW1GamEyWnVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4UlFVRlZSQ3hSUVVGUkxHMUNRVUZTUVN4RFFVRTBRaXhIUVVVeFEwUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTMGdzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUlzUjBGQlIwa3NVVUZCUVVFc1IwRkJaU3hSUVVGVExFTkJSWFJHUVN4UFFVRlJMRk5CUVdkQ1F5eEhRVU4wUWl4UFFVRlBTaXhSUVVGUlN5eExRVUZOUkN4RlFVRlpSU3hWUVVGVklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1WVhKeVlYa3VabWxzZEdWeUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGZpbmQ9cmVxdWlyZSgxNSkoNiksS0VZPVwiZmluZEluZGV4XCIsZm9yY2VkPSEwO0tFWSBpbltdJiZBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7Zm9yY2VkPSExfSksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKmZvcmNlZCxcIkFycmF5XCIse2ZpbmRJbmRleDpmdW5jdGlvbihyKXtyZXR1cm4gJGZpbmQodGhpcyxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyZXF1aXJlKDcpKEtFWSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzVtYVc1a0xXbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkdacGJtUWlMQ0pMUlZraUxDSm1iM0pqWldRaUxDSkJjbkpoZVNJc0lsQWlMQ0pHSWl3aVptbHVaRWx1WkdWNElpd2lZMkZzYkdKaFkydG1iaUlzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1RVRkJVVVFzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUlzUjBGRGNFTkZMRWxCUVUwc1dVRkRUa01zVVVGQlFVRXNSVUZGUVVRc1RVRkJUeXhKUVVGSlJTeE5RVUZOTEVkQlFVZEdMRXRCUVVzc1YwRkJZME1zVVVGQlFVRXNTVUZETTBOS0xGRkJRVkZCTEZGQlFWRk5MRVZCUVVsT0xGRkJRVkZQTEVWQlFVbElMRTlCUVZFc1VVRkJVeXhEUVVNdlEwa3NWVUZCVnl4VFFVRnRRa01zUjBGRE5VSXNUMEZCVDFBc1RVRkJUVkVzUzBGQlRVUXNSVUZCV1VVc1ZVRkJWVU1zVDBGQlV5eEZRVUZKUkN4VlFVRlZMRkZCUVVFc1RVRkhjRVZXTEZGQlFWRXNkMEpCUVZKQkxFTkJRV2xEUlNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbUZ5Y21GNUxtWnBibVF0YVc1a1pYZ3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLCRmaW5kPXJlcXVpcmUoMTUpKDUpLGZvcmNlZD0hMDtcImZpbmRcImluW10mJkFycmF5KDEpLmZpbmQoZnVuY3Rpb24oKXtmb3JjZWQ9ITF9KSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqZm9yY2VkLFwiQXJyYXlcIix7ZmluZDpmdW5jdGlvbihyKXtyZXR1cm4gJGZpbmQodGhpcyxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyZXF1aXJlKDcpKFwiZmluZFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNW1hVzVrTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkdacGJtUWlMQ0ptYjNKalpXUWlMQ0pCY25KaGVTSXNJbVpwYm1RaUxDSlFJaXdpUmlJc0ltTmhiR3hpWVdOclptNGlMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEUxQlFWRkVMRkZCUVZFc2JVSkJRVkpCTEVOQlFUUkNMRWRCUlhCRFJTeFJRVUZCUVN4RlFVUk5MRkZCUjBNc1NVRkJTVU1zVFVGQlRTeEhRVUZOUXl4TFFVRkZMRmRCUVdOR0xGRkJRVUZCTEVsQlF6TkRTQ3hSUVVGUlFTeFJRVUZSVFN4RlFVRkpUaXhSUVVGUlR5eEZRVUZKU2l4UFFVRlJMRkZCUVZNc1EwRkRMME5GTEV0QlFVMHNVMEZCWTBjc1IwRkRiRUlzVDBGQlQwNHNUVUZCVFU4c1MwRkJUVVFzUlVGQldVVXNWVUZCVlVNc1QwRkJVeXhGUVVGSlJDeFZRVUZWTEZGQlFVRXNUVUZIY0VWVUxGRkJRVkVzZDBKQlFWSkJMRU5CVkZVaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTVoY25KaGVTNW1hVzVrTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkZm9yRWFjaD1yZXF1aXJlKDE1KSgwKSxTVFJJQ1Q9cmVxdWlyZSgxMDcpKFtdLmZvckVhY2gsITApOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiohU1RSSUNULFwiQXJyYXlcIix7Zm9yRWFjaDpmdW5jdGlvbihyKXtyZXR1cm4gJGZvckVhY2godGhpcyxyLGFyZ3VtZW50c1sxXSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzVtYjNJdFpXRmphQzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJaVJtYjNKRllXTm9JaXdpVTFSU1NVTlVJaXdpWm05eVJXRmphQ0lzSWxBaUxDSkdJaXdpWTJGc2JHSmhZMnRtYmlJc0luUm9hWE1pTENKaGNtZDFiV1Z1ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNVMEZCVjBRc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkRka05GTEU5QlFWTkdMRkZCUVZFc2JVSkJRVkpCTEVOQlFUUkNMRWRCUVVkSExGTkJRVUZCTEVkQlJUVkRTaXhSUVVGUlFTeFJRVUZSU3l4RlFVRkpUQ3hSUVVGUlRTeEhRVUZMU0N4UFFVRlJMRkZCUVZNc1EwRkZhRVJETEZGQlFWTXNVMEZCYVVKSExFZEJRM2hDTEU5QlFVOU1MRk5CUVZOTkxFdEJRVTFFTEVWQlFWbEZMRlZCUVZVaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTVoY25KaGVTNW1iM0l0WldGamFDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGN0eD1yZXF1aXJlKDI4KSwkZXhwb3J0PXJlcXVpcmUoMzYpLHRvT2JqZWN0PXJlcXVpcmUoMTIxKSxjYWxsPXJlcXVpcmUoNTYpLGlzQXJyYXlJdGVyPXJlcXVpcmUoNTEpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxjcmVhdGVQcm9wZXJ0eT1yZXF1aXJlKDI3KSxnZXRJdGVyRm49cmVxdWlyZSgxMzIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiohcmVxdWlyZSg1OSkoZnVuY3Rpb24oZSl7QXJyYXkuZnJvbShlKX0pLFwiQXJyYXlcIix7ZnJvbTpmdW5jdGlvbihlKXt2YXIgcix0LG8saSxhPXRvT2JqZWN0KGUpLGM9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcz90aGlzOkFycmF5LG49YXJndW1lbnRzLmxlbmd0aCxsPW4+MT9hcmd1bWVudHNbMV06dm9pZCAwLHU9dm9pZCAwIT09bCx5PTAscD1nZXRJdGVyRm4oYSk7aWYodSYmKGw9Y3R4KGwsbj4yP2FyZ3VtZW50c1syXTp2b2lkIDAsMikpLG51bGw9PXB8fGM9PUFycmF5JiZpc0FycmF5SXRlcihwKSlmb3IodD1uZXcgYyhyPXRvTGVuZ3RoKGEubGVuZ3RoKSk7cj55O3krKyljcmVhdGVQcm9wZXJ0eSh0LHksdT9sKGFbeV0seSk6YVt5XSk7ZWxzZSBmb3IoaT1wLmNhbGwoYSksdD1uZXcgYzshKG89aS5uZXh0KCkpLmRvbmU7eSsrKWNyZWF0ZVByb3BlcnR5KHQseSx1P2NhbGwoaSxsLFtvLnZhbHVlLHldLCEwKTpvLnZhbHVlKTtyZXR1cm4gdC5sZW5ndGg9eSx0fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1bWNtOXRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTjBlQ0lzSW5KbGNYVnBjbVVpTENJa1pYaHdiM0owSWl3aWRHOVBZbXBsWTNRaUxDSmpZV3hzSWl3aWFYTkJjbkpoZVVsMFpYSWlMQ0owYjB4bGJtZDBhQ0lzSW1OeVpXRjBaVkJ5YjNCbGNuUjVJaXdpWjJWMFNYUmxja1p1SWl3aVV5SXNJa1lpTENKcGRHVnlJaXdpUVhKeVlYa2lMQ0ptY205dElpd2lZWEp5WVhsTWFXdGxJaXdpYkdWdVozUm9JaXdpY21WemRXeDBJaXdpYzNSbGNDSXNJbWwwWlhKaGRHOXlJaXdpVHlJc0lrTWlMQ0owYUdseklpd2lZVXhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbTFoY0dadUlpd2liV0Z3Y0dsdVp5SXNJbWx1WkdWNElpd2lhWFJsY2tadUlpd2lkVzVrWldacGJtVmtJaXdpYm1WNGRDSXNJbVJ2Ym1VaUxDSjJZV3gxWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMRlZCUTJSRExGRkJRVlZFTEZGQlFWRXNZVUZEYkVKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eExRVUZQU0N4UlFVRlJMR2RDUVVObVNTeFpRVUZqU2l4UlFVRlJMRzlDUVVOMFFrc3NVMEZCVjB3c1VVRkJVU3huUWtGRGJrSk5MR1ZCUVdsQ1RpeFJRVUZSTEhOQ1FVTjZRazhzVlVGQldWQXNVVUZCVVN3NFFrRkZlRUpETEZGQlFWRkJMRkZCUVZGUExFVkJRVWxRTEZGQlFWRlJMRWRCUVV0VUxGRkJRVkVzYVVKQlFWSkJMRU5CUVRCQ0xGTkJRVlZWTEVkQlFWRkRMRTFCUVUxRExFdEJRVXRHTEV0QlFWY3NVVUZCVXl4RFFVVXhSMFVzUzBGQlRTeFRRVUZqUXl4SFFVTnNRaXhKUVU5SlF5eEZRVUZSUXl4RlFVRlJReXhGUVVGTlF5eEZRVkIwUWtNc1JVRkJTV2hDTEZOQlFWTlhMRWRCUTJKTkxFVkJRVzFDTEcxQ1FVRlNReXhMUVVGeFFrRXNTMEZCVDFRc1RVRkRka05WTEVWQlFVOURMRlZCUVZWU0xFOUJRMnBDVXl4RlFVRlJSaXhGUVVGUExFVkJRVWxETEZWQlFWVXNVVUZCUVN4RlFVTTNRa1VzVDBGQlFVRXNTVUZCVlVRc1JVRkRWa1VzUlVGQlVTeEZRVU5TUXl4RlFVRlRia0lzVlVGQlZWY3NSMEZKZGtJc1IwRkdTVTBzU1VGQlUwUXNSVUZCVVhoQ0xFbEJRVWwzUWl4RlFVRlBSaXhGUVVGUExFVkJRVWxETEZWQlFWVXNVVUZCUVN4RlFVRm5RaXhKUVVWMlJFc3NUVUZCVmtRc1IwRkJlVUpRTEVkQlFVdFNMRTlCUVZOUUxGbEJRVmx6UWl4SFFVMXlSQ3hKUVVGTFdDeEZRVUZUTEVsQlFVbEpMRVZCUkd4Q1RDeEZRVUZUVkN4VFFVRlRZU3hGUVVGRlNpeFRRVU5UUVN4RlFVRlRWeXhGUVVGUFFTeEpRVU16UTI1Q0xHVkJRV1ZUTEVWQlFWRlZMRVZCUVU5RUxFVkJRVlZFTEVWQlFVMU1MRVZCUVVWUExFZEJRVkZCTEVkQlFWTlFMRVZCUVVWUExGTkJUbkpGTEVsQlFVdFNMRVZCUVZkVExFVkJRVTkyUWl4TFFVRkxaU3hIUVVGSlNDeEZRVUZUTEVsQlFVbEpMRWxCUVU5SUxFVkJRVTlETEVWQlFWTlhMRkZCUVZGRExFdEJRVTFLTEVsQlEyaEdia0lzWlVGQlpWTXNSVUZCVVZVc1JVRkJUMFFzUlVGQlZYSkNMRXRCUVV0akxFVkJRVlZOTEVWQlFVOHNRMEZCUTFBc1JVRkJTMk1zVFVGQlQwd3NTVUZCUVVFc1IwRkJaMEpVTEVWQlFVdGpMRTlCVTNCSExFOUJSRUZtTEVWQlFVOUVMRTlCUVZOWExFVkJRMVJXSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVZWEp5WVhrdVpuSnZiUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLCRpbmRleE9mPXJlcXVpcmUoMTQpKCExKSwkbmF0aXZlPVtdLmluZGV4T2YsTkVHQVRJVkVfWkVSTz0hISRuYXRpdmUmJjEvWzFdLmluZGV4T2YoMSwtMCk8MDskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKE5FR0FUSVZFX1pFUk98fCFyZXF1aXJlKDEwNykoJG5hdGl2ZSkpLFwiQXJyYXlcIix7aW5kZXhPZjpmdW5jdGlvbihlKXtyZXR1cm4gTkVHQVRJVkVfWkVSTz8kbmF0aXZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8MDokaW5kZXhPZih0aGlzLGUsYXJndW1lbnRzWzFdKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXBibVJsZUMxdlppNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lpUnBibVJsZUU5bUlpd2lKRzVoZEdsMlpTSXNJbWx1WkdWNFQyWWlMQ0pPUlVkQlZFbFdSVjlhUlZKUElpd2lVQ0lzSWtZaUxDSnpaV0Z5WTJoRmJHVnRaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExGTkJRVmRFTEZGQlFWRXNiMEpCUVZKQkxFVkJRVUZCTEVkQlExaEZMRkZCUVZVc1IwRkJSME1zVVVGRFlrTXNaMEpCUVd0Q1JpeFRRVUZYTEVWQlFVa3NRMEZCUXl4SFFVRkhReXhSUVVGUkxFZEJRVWtzUjBGQlN5eEZRVVV4UkVvc1VVRkJVVUVzVVVGQlVVMHNSVUZCU1U0c1VVRkJVVThzUjBGQlMwWXNaMEpCUVd0Q1NpeFJRVUZSTEcxQ1FVRlNRU3hEUVVFMFFrVXNWVUZCVnl4UlFVRlRMRU5CUldwSFF5eFJRVUZUTEZOQlFXbENTU3hIUVVONFFpeFBRVUZQU0N4alFVVklSaXhSUVVGUlRTeE5RVUZOUXl4TFFVRk5ReXhaUVVGakxFVkJRMnhEVkN4VFFVRlRVU3hMUVVGTlJpeEZRVUZsUnl4VlFVRlZJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdVlYSnlZWGt1YVc1a1pYZ3RiMll1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIkFycmF5XCIse2lzQXJyYXk6cmVxdWlyZSg1Mil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXBjeTFoY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lsTWlMQ0pwYzBGeWNtRjVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExGRkJRVk1zUTBGQlJVTXNVVUZCVTBZc1VVRkJVU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtRnljbUY1TG1sekxXRnljbUY1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSx0b0lPYmplY3Q9cmVxdWlyZSgxMTkpLGFycmF5Sm9pbj1bXS5qb2luOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRioocmVxdWlyZSg1MCkhPU9iamVjdHx8IXJlcXVpcmUoMTA3KShhcnJheUpvaW4pKSxcIkFycmF5XCIse2pvaW46ZnVuY3Rpb24ocil7cmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSx2b2lkIDA9PT1yP1wiLFwiOnIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cWIybHVMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lkRzlKVDJKcVpXTjBJaXdpWVhKeVlYbEtiMmx1SWl3aWFtOXBiaUlzSWxBaUxDSkdJaXdpVDJKcVpXTjBJaXdpYzJWd1lYSmhkRzl5SWl3aVkyRnNiQ0lzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVlVGQldVUXNVVUZCVVN4cFFrRkRjRUpGTEZWQlFWa3NSMEZCUjBNc1MwRkhia0pLTEZGQlFWRkJMRkZCUVZGTExFVkJRVWxNTEZGQlFWRk5MRWRCUVV0TUxGRkJRVkVzWlVGQmFVSk5MRk5CUVZkT0xGRkJRVkVzYlVKQlFWSkJMRU5CUVRSQ1JTeFpRVUZoTEZGQlFWTXNRMEZEY2toRExFdEJRVTBzVTBGQlkwa3NSMEZEYkVJc1QwRkJUMHdzVlVGQlZVMHNTMEZCUzFBc1ZVRkJWVkVzVjBGQlFVRXNTVUZCVDBZc1JVRkJNRUlzU1VGQlRVRWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1aGNuSmhlUzVxYjJsdUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksdG9JT2JqZWN0PXJlcXVpcmUoMTE5KSx0b0ludGVnZXI9cmVxdWlyZSgxMTgpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSwkbmF0aXZlPVtdLmxhc3RJbmRleE9mLE5FR0FUSVZFX1pFUk89ISEkbmF0aXZlJiYxL1sxXS5sYXN0SW5kZXhPZigxLC0wKTwwOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiooTkVHQVRJVkVfWkVST3x8IXJlcXVpcmUoMTA3KSgkbmF0aXZlKSksXCJBcnJheVwiLHtsYXN0SW5kZXhPZjpmdW5jdGlvbih0KXtpZihORUdBVElWRV9aRVJPKXJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8MDt2YXIgZT10b0lPYmplY3QodGhpcykscj10b0xlbmd0aChlLmxlbmd0aCksbj1yLTE7Zm9yKGFyZ3VtZW50cy5sZW5ndGg+MSYmKG49TWF0aC5taW4obix0b0ludGVnZXIoYXJndW1lbnRzWzFdKSkpLG48MCYmKG49cituKTtuPj0wO24tLSlpZihuIGluIGUmJmVbbl09PT10KXJldHVybiBufHwwO3JldHVybi0xfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1c1lYTjBMV2x1WkdWNExXOW1MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lkRzlKVDJKcVpXTjBJaXdpZEc5SmJuUmxaMlZ5SWl3aWRHOU1aVzVuZEdnaUxDSWtibUYwYVhabElpd2liR0Z6ZEVsdVpHVjRUMllpTENKT1JVZEJWRWxXUlY5YVJWSlBJaXdpVUNJc0lrWWlMQ0p6WldGeVkyaEZiR1Z0Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2lUeUlzSW14bGJtZDBhQ0lzSW1sdVpHVjRJaXdpVFdGMGFDSXNJbTFwYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR2xDUVVOd1FrVXNWVUZCV1VZc1VVRkJVU3hwUWtGRGNFSkhMRk5CUVZkSUxGRkJRVkVzWjBKQlEyNUNTU3hSUVVGVkxFZEJRVWRETEZsQlEySkRMR2RDUVVGclFrWXNVMEZCVnl4RlFVRkpMRU5CUVVNc1IwRkJSME1zV1VGQldTeEhRVUZKTEVkQlFVc3NSVUZGT1VST0xGRkJRVkZCTEZGQlFWRlJMRVZCUVVsU0xGRkJRVkZUTEVkQlFVdEdMR2RDUVVGclFrNHNVVUZCVVN4dFFrRkJVa0VzUTBGQk5FSkpMRlZCUVZjc1VVRkJVeXhEUVVWcVIwTXNXVUZCWVN4VFFVRnhRa2tzUjBGRmFFTXNSMEZCU1Vnc1kwRkJaU3hQUVVGUFJpeFJRVUZSVFN4TlFVRk5ReXhMUVVGTlF5eFpRVUZqTEVWQlF6VkVMRWxCUVVsRExFVkJRVWxhTEZWQlFWVlZMRTFCUTJSSExFVkJRVk5ZTEZOQlFWTlZMRVZCUVVWRExGRkJRM0JDUXl4RlFVRlJSQ3hGUVVGVExFVkJSM0pDTEVsQlJrbEdMRlZCUVZWRkxFOUJRVk1zU1VGQlIwTXNSVUZCVVVNc1MwRkJTME1zU1VGQlNVWXNSVUZCVDJJc1ZVRkJWVlVzVlVGQlZTeE5RVU5zUlVjc1JVRkJVU3hKUVVGSFFTeEZRVUZSUkN4RlFVRlRReXhIUVVNeFFrRXNSMEZCVXl4RlFVRkhRU3hKUVVGVExFZEJRVWxCTEV0QlFWTkdMRWRCUVU5QkxFVkJRVVZGTEV0QlFWZE9MRVZCUVdVc1QwRkJUMDBzUjBGQlV5eEZRVU16Uml4UFFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdVlYSnlZWGt1YkdGemRDMXBibVJsZUMxdlppNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJG1hcD1yZXF1aXJlKDE1KSgxKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoMTA3KShbXS5tYXAsITApLFwiQXJyYXlcIix7bWFwOmZ1bmN0aW9uKHIpe3JldHVybiAkbWFwKHRoaXMscixhcmd1bWVudHNbMV0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1dFlYQXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtiV0Z3SWl3aVVDSXNJa1lpTENKdFlYQWlMQ0pqWVd4c1ltRmphMlp1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eExRVUZQUkN4UlFVRlJMRzFDUVVGU1FTeERRVUUwUWl4SFFVVjJRMFFzVVVGQlVVRXNVVUZCVVVjc1JVRkJTVWdzVVVGQlVVa3NSMEZCUzBnc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkJSMGtzUzBGQlFVRXNSMEZCV1N4UlFVRlRMRU5CUlc1R1FTeEpRVUZMTEZOQlFXRkRMRWRCUTJoQ0xFOUJRVTlLTEV0QlFVdExMRXRCUVUxRUxFVkJRVmxGTEZWQlFWVWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1aGNuSmhlUzV0WVhBdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksY3JlYXRlUHJvcGVydHk9cmVxdWlyZSgyNyk7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKnJlcXVpcmUoMzgpKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcigpe31yZXR1cm4hKEFycmF5Lm9mLmNhbGwocilpbnN0YW5jZW9mIHIpfSksXCJBcnJheVwiLHtvZjpmdW5jdGlvbigpe2Zvcih2YXIgcj0wLGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6QXJyYXkpKGUpO2U+cjspY3JlYXRlUHJvcGVydHkodCxyLGFyZ3VtZW50c1tyKytdKTtyZXR1cm4gdC5sZW5ndGg9ZSx0fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1dlppNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0ltTnlaV0YwWlZCeWIzQmxjblI1SWl3aVV5SXNJa1lpTENKQmNuSmhlU0lzSW05bUlpd2lZMkZzYkNJc0ltbHVaR1Y0SWl3aVlVeGxiaUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luSmxjM1ZzZENJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1pVRkJhVUpFTEZGQlFWRXNjMEpCUnpkQ1JDeFJRVUZSUVN4UlFVRlJSeXhGUVVGSlNDeFJRVUZSU1N4RlFVRkpTQ3hSUVVGUkxGZEJRVkpCTEVOQlFXOUNMRmRCUTJ4RUxGTkJRVk5ITEV0QlExUXNVVUZCVTBNc1RVRkJUVU1zUjBGQlIwTXNTMEZCUzBnc1lVRkJZMEVzUzBGRGJrTXNVVUZCVXl4RFFVVllSU3hIUVVGSkxGZEJTVVlzU1VGSVFTeEpRVUZKUlN4RlFVRlJMRVZCUTFKRExFVkJRVTlETEZWQlFWVkRMRTlCUTJwQ1F5eEZRVUZUTEVsQlFXOUNMRzFDUVVGU1F5eExRVUZ4UWtFc1MwRkJUMUlzVDBGQlQwa3NSMEZEY2tSQkxFVkJRVTlFTEVkQlFVOU9MR1ZCUVdWVkxFVkJRVkZLTEVWQlFVOUZMRlZCUVZWR0xFMUJSVGRFTEU5QlJFRkpMRVZCUVU5RUxFOUJRVk5HTEVWQlExUkhJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdVlYSnlZWGt1YjJZdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJHJlZHVjZT1yZXF1aXJlKDE2KTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoMTA3KShbXS5yZWR1Y2VSaWdodCwhMCksXCJBcnJheVwiLHtyZWR1Y2VSaWdodDpmdW5jdGlvbihlKXtyZXR1cm4gJHJlZHVjZSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aCxhcmd1bWVudHNbMV0sITApfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1eVpXUjFZMlV0Y21sbmFIUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtjbVZrZFdObElpd2lVQ0lzSWtZaUxDSnlaV1IxWTJWU2FXZG9kQ0lzSW1OaGJHeGlZV05yWm00aUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRkZCUVZWRUxGRkJRVkVzYlVKQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUnl4RlFVRkpTQ3hSUVVGUlNTeEhRVUZMU0N4UlFVRlJMRzFDUVVGU1FTeERRVUUwUWl4SFFVRkhTU3hoUVVGQlFTeEhRVUZ2UWl4UlFVRlRMRU5CUlROR1FTeFpRVUZoTEZOQlFYRkNReXhIUVVOb1F5eFBRVUZQU2l4UlFVRlJTeXhMUVVGTlJDeEZRVUZaUlN4VlFVRlZReXhQUVVGUlJDeFZRVUZWTEVsQlFVRWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1aGNuSmhlUzV5WldSMVkyVXRjbWxuYUhRdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJHJlZHVjZT1yZXF1aXJlKDE2KTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoMTA3KShbXS5yZWR1Y2UsITApLFwiQXJyYXlcIix7cmVkdWNlOmZ1bmN0aW9uKGUpe3JldHVybiAkcmVkdWNlKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoLGFyZ3VtZW50c1sxXSwhMSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzV5WldSMVkyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtjbVZrZFdObElpd2lVQ0lzSWtZaUxDSnlaV1IxWTJVaUxDSmpZV3hzWW1GamEyWnVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4UlFVRlZSQ3hSUVVGUkxHMUNRVVYwUWtRc1VVRkJVVUVzVVVGQlVVY3NSVUZCU1Vnc1VVRkJVVWtzUjBGQlMwZ3NVVUZCVVN4dFFrRkJVa0VzUTBGQk5FSXNSMEZCUjBrc1VVRkJRVUVzUjBGQlpTeFJRVUZUTEVOQlJYUkdRU3hQUVVGUkxGTkJRV2RDUXl4SFFVTjBRaXhQUVVGUFNpeFJRVUZSU3l4TFFVRk5SQ3hGUVVGWlJTeFZRVUZWUXl4UFFVRlJSQ3hWUVVGVkxFbEJRVUVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNWhjbkpoZVM1eVpXUjFZMlV1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxodG1sPXJlcXVpcmUoNDYpLGNvZj1yZXF1aXJlKDIxKSx0b0Fic29sdXRlSW5kZXg9cmVxdWlyZSgxMTYpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxhcnJheVNsaWNlPVtdLnNsaWNlOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipyZXF1aXJlKDM4KShmdW5jdGlvbigpe2h0bWwmJmFycmF5U2xpY2UuY2FsbChodG1sKX0pLFwiQXJyYXlcIix7c2xpY2U6ZnVuY3Rpb24ocixlKXt2YXIgdD10b0xlbmd0aCh0aGlzLmxlbmd0aCksaT1jb2YodGhpcyk7aWYoZT12b2lkIDA9PT1lP3Q6ZSxcIkFycmF5XCI9PWkpcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLHIsZSk7Zm9yKHZhciBvPXRvQWJzb2x1dGVJbmRleChyLHQpLGw9dG9BYnNvbHV0ZUluZGV4KGUsdCksYT10b0xlbmd0aChsLW8pLG49bmV3IEFycmF5KGEpLGg9MDtoPGE7aCsrKW5baF09XCJTdHJpbmdcIj09aT90aGlzLmNoYXJBdChvK2gpOnRoaXNbbytoXTtyZXR1cm4gbn19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXpiR2xqWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1oMGJXd2lMQ0pqYjJZaUxDSjBiMEZpYzI5c2RYUmxTVzVrWlhnaUxDSjBiMHhsYm1kMGFDSXNJbUZ5Y21GNVUyeHBZMlVpTENKemJHbGpaU0lzSWxBaUxDSkdJaXdpWTJGc2JDSXNJbUpsWjJsdUlpd2laVzVrSWl3aWJHVnVJaXdpZEdocGN5SXNJbXhsYm1kMGFDSXNJbXRzWVhOeklpd2ljM1JoY25RaUxDSjFjRlJ2SWl3aWMybDZaU0lzSW1Oc2IyNWxaQ0lzSWtGeWNtRjVJaXdpYVNJc0ltTm9ZWEpCZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eExRVUZQUkN4UlFVRlJMRmRCUTJaRkxFbEJRVTFHTEZGQlFWRXNWVUZEWkVjc1owSkJRV3RDU0N4UlFVRlJMSGRDUVVNeFFra3NVMEZCVjBvc1VVRkJVU3huUWtGRGJrSkxMRmRCUVdFc1IwRkJSME1zVFVGSGNFSlFMRkZCUVZGQkxGRkJRVkZSTEVWQlFVbFNMRkZCUVZGVExFVkJRVWxTTEZGQlFWRXNWMEZCVWtFc1EwRkJiMElzVjBGRE9VTkRMRTFCUVUxSkxGZEJRVmRKTEV0QlFVdFNMRkZCUTNoQ0xGRkJRVk1zUTBGRFdFc3NUVUZCVHl4VFFVRmxTU3hGUVVGUFF5eEhRVU16UWl4SlFVRkpReXhGUVVGTlVpeFRRVUZUVXl4TFFVRkxReXhSUVVOd1FrTXNSVUZCVVdJc1NVRkJTVmNzVFVGRmFFSXNSMEZFUVVZc1QwRkJRVUVzU1VGQlRVRXNSVUZCYjBKRExFVkJRVTFFTEVWQlEyNUNMRk5CUVZSSkxFVkJRV3RDTEU5QlFVOVdMRmRCUVZkSkxFdEJRVXRKTEV0QlFVMUlMRVZCUVU5RExFZEJUVEZFTEVsQlRFRXNTVUZCU1Vzc1JVRkJVV0lzWjBKQlFXZENUeXhGUVVGUFJTeEhRVU12UWtzc1JVRkJUMlFzWjBKQlFXZENVU3hGUVVGTFF5eEhRVU0xUWswc1JVRkJUMlFzVTBGQlUyRXNSVUZCVDBRc1IwRkRka0pITEVWQlFWTXNTVUZCU1VNc1RVRkJUVVlzUjBGRGJrSkhMRVZCUVVrc1JVRkRSRUVzUlVGQlNVZ3NSVUZCVFVjc1NVRkJTMFlzUlVGQlQwVXNSMEZCWXl4VlFVRlVUaXhGUVVNNVFrWXNTMEZCUzFNc1QwRkJUMDRzUlVGQlVVc3NSMEZEY0VKU0xFdEJRVXRITEVWQlFWRkxMRWRCUTJwQ0xFOUJRVTlHSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVZWEp5WVhrdWMyeHBZMlV1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkc29tZT1yZXF1aXJlKDE1KSgzKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoMTA3KShbXS5zb21lLCEwKSxcIkFycmF5XCIse3NvbWU6ZnVuY3Rpb24ocil7cmV0dXJuICRzb21lKHRoaXMscixhcmd1bWVudHNbMV0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1emIyMWxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKSE52YldVaUxDSlFJaXdpUmlJc0luTnZiV1VpTENKallXeHNZbUZqYTJadUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhOUVVGUlJDeFJRVUZSTEcxQ1FVRlNRU3hEUVVFMFFpeEhRVVY0UTBRc1VVRkJVVUVzVVVGQlVVY3NSVUZCU1Vnc1VVRkJVVWtzUjBGQlMwZ3NVVUZCVVN4dFFrRkJVa0VzUTBGQk5FSXNSMEZCUjBrc1RVRkJRVUVzUjBGQllTeFJRVUZUTEVOQlJYQkdRU3hMUVVGTkxGTkJRV05ETEVkQlEyeENMRTlCUVU5S0xFMUJRVTFMTEV0QlFVMUVMRVZCUVZsRkxGVkJRVlVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNWhjbkpoZVM1emIyMWxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGFGdW5jdGlvbj1yZXF1aXJlKDUpLHRvT2JqZWN0PXJlcXVpcmUoMTIxKSxmYWlscz1yZXF1aXJlKDM4KSwkc29ydD1bXS5zb3J0LHRlc3Q9WzEsMiwzXTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKGZhaWxzKGZ1bmN0aW9uKCl7dGVzdC5zb3J0KHZvaWQgMCl9KXx8IWZhaWxzKGZ1bmN0aW9uKCl7dGVzdC5zb3J0KG51bGwpfSl8fCFyZXF1aXJlKDEwNykoJHNvcnQpKSxcIkFycmF5XCIse3NvcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQ/JHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSk6JHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSxhRnVuY3Rpb24odCkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1emIzSjBMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lZVVoxYm1OMGFXOXVJaXdpZEc5UFltcGxZM1FpTENKbVlXbHNjeUlzSWlSemIzSjBJaXdpYzI5eWRDSXNJblJsYzNRaUxDSlFJaXdpUmlJc0ltTnZiWEJoY21WbWJpSXNJbU5oYkd3aUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExGVkJRVmxFTEZGQlFWRXNhVUpCUTNCQ1JTeFRRVUZYUml4UlFVRlJMR2RDUVVOdVFrY3NUVUZCVVVnc1VVRkJVU3haUVVOb1Fra3NUVUZCVVN4SFFVRkhReXhMUVVOWVF5eExRVUZQTEVOQlFVTXNSVUZCUnl4RlFVRkhMRWRCUld4Q1VDeFJRVUZSUVN4UlFVRlJVU3hGUVVGSlVpeFJRVUZSVXl4SFFVRkxUQ3hOUVVGTkxGZEJSWEpEUnl4TFFVRkxSQ3hWUVVGQlFTeFBRVU5CUml4TlFVRk5MRmRCUlZoSExFdEJRVXRFTEV0QlFVc3NWVUZGVEV3c1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVKSkxGRkJRVk1zVVVGQlV5eERRVVZ1UkVNc1MwRkJUU3hUUVVGalNTeEhRVU5zUWl4WlFVRkJMRWxCUVU5QkxFVkJRMGhNTEUxQlFVMU5MRXRCUVV0U0xGTkJRVk5UTEU5QlEzQkNVQ3hOUVVGTlRTeExRVUZMVWl4VFFVRlRVeXhOUVVGUFZpeFZRVUZWVVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbUZ5Y21GNUxuTnZjblF1YW5NaWZRPT0iLCJyZXF1aXJlKDEwMikoXCJBcnJheVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXpjR1ZqYVdWekxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbUZ5Y21GNUxuTndaV05wWlhNdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJEYXRlXCIse25vdzpmdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWtZWFJsTG01dmR5NXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lsTWlMQ0p1YjNjaUxDSkVZWFJsSWl3aVoyVjBWR2x0WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVVjBRa1FzVVVGQlVVRXNVVUZCVVVVc1JVRkJSeXhQUVVGUkxFTkJRVVZETEVsQlFVc3NWMEZCWXl4UFFVRkJMRWxCUVZkRExFMUJRVTlESWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVaR0YwWlM1dWIzY3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLHRvSVNPU3RyaW5nPXJlcXVpcmUoMjkpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiooRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmchPT10b0lTT1N0cmluZyksXCJEYXRlXCIse3RvSVNPU3RyaW5nOnRvSVNPU3RyaW5nfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1a1lYUmxMblJ2TFdsemJ5MXpkSEpwYm1jdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKMGIwbFRUMU4wY21sdVp5SXNJbEFpTENKR0lpd2lSR0YwWlNJc0luQnliM1J2ZEhsd1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1dVRkJZMFFzVVVGQlVTeDVRa0ZITVVKRUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVsSUxGRkJRVkZKTEVkQlFVdERMRXRCUVV0RExGVkJRVlZLTEdOQlFXZENRU3hoUVVGakxFOUJRVkVzUTBGRGNFWkJMRmxCUVdGQklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1WkdGMFpTNTBieTFwYzI4dGMzUnlhVzVuTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSx0b09iamVjdD1yZXF1aXJlKDEyMSksdG9QcmltaXRpdmU9cmVxdWlyZSgxMjIpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipyZXF1aXJlKDM4KShmdW5jdGlvbigpe3JldHVybiBudWxsIT09bmV3IERhdGUoTmFOKS50b0pTT04oKXx8MSE9PURhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzpmdW5jdGlvbigpe3JldHVybiAxfX0pfSksXCJEYXRlXCIse3RvSlNPTjpmdW5jdGlvbih0KXt2YXIgZT10b09iamVjdCh0aGlzKSxyPXRvUHJpbWl0aXZlKGUpO3JldHVyblwibnVtYmVyXCIhPXR5cGVvZiByfHxpc0Zpbml0ZShyKT9lLnRvSVNPU3RyaW5nKCk6bnVsbH19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVrWVhSbExuUnZMV3B6YjI0dWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKMGIwOWlhbVZqZENJc0luUnZVSEpwYldsMGFYWmxJaXdpVUNJc0lrWWlMQ0pFWVhSbElpd2lUbUZPSWl3aWRHOUtVMDlPSWl3aWNISnZkRzkwZVhCbElpd2lZMkZzYkNJc0luUnZTVk5QVTNSeWFXNW5JaXdpYTJWNUlpd2lUeUlzSW5Sb2FYTWlMQ0p3ZGlJc0ltbHpSbWx1YVhSbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRk5CUVZkRUxGRkJRVkVzWjBKQlEyNUNSU3haUVVGalJpeFJRVUZSTEcxQ1FVVXhRa1FzVVVGQlVVRXNVVUZCVVVrc1JVRkJTVW9zVVVGQlVVc3NSVUZCU1Vvc1VVRkJVU3hYUVVGU1FTeERRVUZ2UWl4WFFVTnNSQ3hQUVVGclF5eFBRVUV6UWl4SlFVRkpTeXhMUVVGTFF5eExRVUZMUXl4VlFVTXlSQ3hKUVVFelJVWXNTMEZCUzBjc1ZVRkJWVVFzVDBGQlQwVXNTMEZCU3l4RFFVRkZReXhaUVVGaExGZEJRV01zVDBGQlR5eFBRVU5zUlN4UFFVRlJMRU5CUlZaSUxFOUJRVkVzVTBGQlowSkpMRWRCUTNSQ0xFbEJRVWxETEVWQlFVbFlMRk5CUVZOWkxFMUJRMkpETEVWQlFVdGFMRmxCUVZsVkxFZEJRM0pDTEUxQlFXOUNMR2xDUVVGT1JTeEhRVUZ0UWtNc1UwRkJVMFFzUjBGQllVWXNSVUZCUlVZc1kwRkJWQ0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtUmhkR1V1ZEc4dGFuTnZiaTVxY3lKOSIsInZhciBUT19QUklNSVRJVkU9cmVxdWlyZSgxMzEpKFwidG9QcmltaXRpdmVcIikscHJvdG89RGF0ZS5wcm90b3R5cGU7VE9fUFJJTUlUSVZFIGluIHByb3RvfHxyZXF1aXJlKDQ1KShwcm90byxUT19QUklNSVRJVkUscmVxdWlyZSgzMCkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWtZWFJsTG5SdkxYQnlhVzFwZEdsMlpTNXFjeUpkTENKdVlXMWxjeUk2V3lKVVQxOVFVa2xOU1ZSSlZrVWlMQ0p5WlhGMWFYSmxJaXdpY0hKdmRHOGlMQ0pFWVhSbElpd2ljSEp2ZEc5MGVYQmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeGhRVUZsUXl4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEdWQlEycERReXhOUVVGUlF5eExRVUZMUXl4VlFVVllTaXhuUWtGQlowSkZMRTlCUVZGRUxGRkJRVkVzVlVGQlVrRXNRMEZCYlVKRExFMUJRVTlHTEdGQlFXTkRMRkZCUVZFaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTVrWVhSbExuUnZMWEJ5YVcxcGRHbDJaUzVxY3lKOSIsInZhciBEYXRlUHJvdG89RGF0ZS5wcm90b3R5cGUsJHRvU3RyaW5nPURhdGVQcm90by50b1N0cmluZyxnZXRUaW1lPURhdGVQcm90by5nZXRUaW1lO25ldyBEYXRlKE5hTikrXCJcIiE9XCJJbnZhbGlkIERhdGVcIiYmcmVxdWlyZSg5NCkoRGF0ZVByb3RvLFwidG9TdHJpbmdcIixmdW5jdGlvbigpe3ZhciB0PWdldFRpbWUuY2FsbCh0aGlzKTtyZXR1cm4gdD09dD8kdG9TdHJpbmcuY2FsbCh0aGlzKTpcIkludmFsaWQgRGF0ZVwifSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1a1lYUmxMblJ2TFhOMGNtbHVaeTVxY3lKZExDSnVZVzFsY3lJNld5SkVZWFJsVUhKdmRHOGlMQ0pFWVhSbElpd2ljSEp2ZEc5MGVYQmxJaXdpSkhSdlUzUnlhVzVuSWl3aWRHOVRkSEpwYm1jaUxDSm5aWFJVYVcxbElpd2lUbUZPSWl3aWNtVnhkV2x5WlNJc0luWmhiSFZsSWl3aVkyRnNiQ0lzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGVkJRVmxETEV0QlFVdERMRlZCUjJwQ1F5eFZRVUZaU0N4VlFVRnRRa2tzVTBGREwwSkRMRkZCUVZWTUxGVkJRVlZMTEZGQlEzQkNMRWxCUVVsS0xFdEJRVXRMTEV0QlFVOHNTVUZLUkN4blFrRkxha0pETEZGQlFWRXNZMEZCVWtFc1EwRkJkVUpRTEZWQlNsUXNWMEZKSzBJc1YwRkRNME1zU1VGQlNWRXNSVUZCVVVnc1VVRkJVVWtzUzBGQlMwTXNUVUZGZWtJc1QwRkJUMFlzUjBGQlZVRXNSVUZCVVV3c1ZVRkJWVTBzUzBGQlMwTXNUVUZTZWtJaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTVrWVhSbExuUnZMWE4wY21sdVp5NXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlAsXCJGdW5jdGlvblwiLHtiaW5kOnJlcXVpcmUoMTkpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1bWRXNWpkR2x2Ymk1aWFXNWtMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVQ0lzSW1KcGJtUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVjc1YwRkJXU3hEUVVGRlF5eExRVUZOUml4UlFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdVpuVnVZM1JwYjI0dVltbHVaQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBpc09iamVjdD1yZXF1aXJlKDU0KSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKDgxKSxIQVNfSU5TVEFOQ0U9cmVxdWlyZSgxMzEpKFwiaGFzSW5zdGFuY2VcIiksRnVuY3Rpb25Qcm90bz1GdW5jdGlvbi5wcm90b3R5cGU7SEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG98fHJlcXVpcmUoNzQpLmYoRnVuY3Rpb25Qcm90byxIQVNfSU5TVEFOQ0Use3ZhbHVlOmZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXN8fCFpc09iamVjdCh0KSlyZXR1cm4hMTtpZighaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKXJldHVybiB0IGluc3RhbmNlb2YgdGhpcztmb3IoO3Q9Z2V0UHJvdG90eXBlT2YodCk7KWlmKHRoaXMucHJvdG90eXBlPT09dClyZXR1cm4hMDtyZXR1cm4hMX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVtZFc1amRHbHZiaTVvWVhNdGFXNXpkR0Z1WTJVdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVhOUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKSVFWTmZTVTVUVkVGT1EwVWlMQ0pHZFc1amRHbHZibEJ5YjNSdklpd2lSblZ1WTNScGIyNGlMQ0p3Y205MGIzUjVjR1VpTENKbUlpd2lkbUZzZFdVaUxDSlBJaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zWlVGQmFVSkVMRkZCUVZFc2FVSkJRM3BDUlN4aFFVRmxSaXhSUVVGUkxGTkJRVkpCTEVOQlFXdENMR1ZCUTJwRFJ5eGpRVUZuUWtNc1UwRkJVME1zVlVGRmRrSklMR2RDUVVGblFrTXNaVUZCWjBKSUxGRkJRVkVzWjBKQlFXZENUU3hGUVVGRlNDeGpRVUZsUkN4aFFVRmpMRU5CUVVWTExFMUJRVThzVTBGQlZVTXNSMEZET1Vjc1IwRkJiVUlzYlVKQlFWSkRMRTlCUVhWQ1ZpeFRRVUZUVXl4SFFVRkpMRTlCUVVFc1JVRkRMME1zU1VGQlMxUXNVMEZCVTFVc1MwRkJTMG9zVjBGQldTeFBRVUZQUnl4aFFVRmhReXhMUVVWdVJDeExRVUZQUkN4RlFVRkpVQ3hsUVVGbFR5eEpRVUZKTEVkQlFVbERMRXRCUVV0S0xGbEJRV05ITEVWQlFVY3NUMEZCUVN4RlFVTjRSQ3hQUVVGQklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Wm5WdVkzUnBiMjR1YUdGekxXbHVjM1JoYm1ObExtcHpJbjA9IiwidmFyIGRQPXJlcXVpcmUoNzQpLmYsRlByb3RvPUZ1bmN0aW9uLnByb3RvdHlwZSxuYW1lUkU9L15cXHMqZnVuY3Rpb24gKFteIChdKikvO1wibmFtZVwiaW4gRlByb3RvfHxyZXF1aXJlKDMyKSYmZFAoRlByb3RvLFwibmFtZVwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dHJ5e3JldHVybihcIlwiK3RoaXMpLm1hdGNoKG5hbWVSRSlbMV19Y2F0Y2gocil7cmV0dXJuXCJcIn19fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1bWRXNWpkR2x2Ymk1dVlXMWxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUlFJaXdpY21WeGRXbHlaU0lzSW1ZaUxDSkdVSEp2ZEc4aUxDSkdkVzVqZEdsdmJpSXNJbkJ5YjNSdmRIbHdaU0lzSW01aGJXVlNSU0lzSW1OdmJtWnBaM1Z5WVdKc1pTSXNJbWRsZENJc0luUm9hWE1pTENKdFlYUmphQ0lzSW1VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEVkQlFVdERMRkZCUVZFc1owSkJRV2RDUXl4RlFVTTNRa01zVDBGQlUwTXNVMEZCVTBNc1ZVRkRiRUpETEU5QlFWTXNkMEpCUTBZc1UwRkhTRWdzVVVGQlZVWXNVVUZCVVN4dFFrRkJjVUpFTEVkQlFVZEhMRTlCU0haRExFOUJSM0ZFTEVOQlF6bEVTU3hqUVVGQlFTeEZRVU5CUXl4SlFVRkxMRmRCUTBnc1NVRkRSU3hQUVVGUkxFZEJRVXRETEUxQlFVMURMRTFCUVUxS0xGRkJRVkVzUjBGRGFrTXNUVUZCVDBzc1IwRkRVQ3hOUVVGUElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Wm5WdVkzUnBiMjR1Ym1GdFpTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksbG9nMXA9cmVxdWlyZSg2NSksc3FydD1NYXRoLnNxcnQsJGFjb3NoPU1hdGguYWNvc2g7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiEoJGFjb3NoJiY3MTA9PU1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSYmJGFjb3NoKDEvMCk9PTEvMCksXCJNYXRoXCIse2Fjb3NoOmZ1bmN0aW9uKG8pe3JldHVybihvPStvKTwxP05hTjpvPjk0OTA2MjY1LjYyNDI1MTU2P01hdGgubG9nKG8pK01hdGguTE4yOmxvZzFwKG8tMStzcXJ0KG8tMSkqc3FydChvKzEpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xtRmpiM05vTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpYkc5bk1YQWlMQ0p6Y1hKMElpd2lUV0YwYUNJc0lpUmhZMjl6YUNJc0ltRmpiM05vSWl3aVV5SXNJa1lpTENKbWJHOXZjaUlzSWs1MWJXSmxjaUlzSWsxQldGOVdRVXhWUlNJc0lrbHVabWx1YVhSNUlpd2llQ0lzSWs1aFRpSXNJbXh2WnlJc0lreE9NaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNUVUZCVVVRc1VVRkJVU3hwUWtGRGFFSkZMRXRCUVU5RExFdEJRVXRFTEV0QlExcEZMRTlCUVZORUxFdEJRVXRGTEUxQlJXeENUaXhSUVVGUlFTeFJRVUZSVHl4RlFVRkpVQ3hSUVVGUlVTeEpRVUZOU0N4UlFVVlhMRXRCUVhoRFJDeExRVUZMU3l4TlFVRk5TaXhQUVVGUFN5eFBRVUZQUXl4aFFVVjZRazRzVDBGQlQwOHNSVUZCUVVFc1NVRkJZVUVzUlVGQlFVRXNSMEZEZEVJc1QwRkJVU3hEUVVOVVRpeE5RVUZQTEZOQlFXVlBMRWRCUTNCQ0xFOUJRVkZCTEVkQlFVdEJMRWRCUVVzc1JVRkJTVU1zU1VGQlRVUXNSVUZCU1N4clFrRkROVUpVTEV0QlFVdFhMRWxCUVVsR0xFZEJRVXRVTEV0QlFVdFpMRWxCUTI1Q1pDeE5RVUZOVnl4RlFVRkpMRVZCUVVsV0xFdEJRVXRWTEVWQlFVa3NSMEZCUzFZc1MwRkJTMVVzUlVGQlNTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG0xaGRHZ3VZV052YzJndWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGFzaW5oPU1hdGguYXNpbmg7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiEoJGFzaW5oJiYxLyRhc2luaCgwKT4wKSxcIk1hdGhcIix7YXNpbmg6ZnVuY3Rpb24gdChyKXtyZXR1cm4gaXNGaW5pdGUocj0rcikmJjAhPXI/cjwwPy10KC1yKTpNYXRoLmxvZyhyK01hdGguc3FydChyKnIrMSkpOnJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbUZ6YVc1b0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aUpHRnphVzVvSWl3aVRXRjBhQ0lzSW1GemFXNW9JaXdpVXlJc0lrWWlMQ0o0SWl3aWFYTkdhVzVwZEdVaUxDSnNiMmNpTENKemNYSjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFBRVUZUUXl4TFFVRkxReXhOUVU5c1Frb3NVVUZCVVVFc1VVRkJVVXNzUlVGQlNVd3NVVUZCVVUwc1NVRkJUVW9zVVVGQlZTeEZRVUZKUVN4UFFVRlBMRWRCUVVzc1IwRkJTU3hQUVVGUkxFTkJRVVZGTEUxQlRERkZMRk5CUVZOQkxFVkJRVTFITEVkQlEySXNUMEZCVVVNc1UwRkJVMFFzUjBGQlMwRXNTVUZCVnl4SFFVRk1RU3hGUVVGaFFTeEZRVUZKTEVkQlFVdElMRWRCUVU5SExFZEJRVXRLTEV0QlFVdE5MRWxCUVVsR0xFVkJRVWxLTEV0QlFVdFBMRXRCUVV0SUxFVkJRVWxCTEVWQlFVa3NTVUZCZUVSQklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1YldGMGFDNWhjMmx1YUM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkYXRhbmg9TWF0aC5hdGFuaDskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqISgkYXRhbmgmJjEvJGF0YW5oKC0wKTwwKSxcIk1hdGhcIix7YXRhbmg6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PSh0PSt0KT90Ok1hdGgubG9nKCgxK3QpLygxLXQpKS8yfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1GMFlXNW9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKR0YwWVc1b0lpd2lUV0YwYUNJc0ltRjBZVzVvSWl3aVV5SXNJa1lpTENKNElpd2liRzluSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhQUVVGVFF5eExRVUZMUXl4TlFVZHNRa29zVVVGQlVVRXNVVUZCVVVzc1JVRkJTVXdzVVVGQlVVMHNTVUZCVFVvc1VVRkJWU3hGUVVGSlFTeFJRVUZSTEVkQlFVc3NSMEZCU1N4UFFVRlJMRU5CUTNaRlJTeE5RVUZQTEZOQlFXVkhMRWRCUTNCQ0xFOUJRVzFDTEVsQlFWaEJMRWRCUVV0QkxFZEJRVlZCTEVWQlFVbEtMRXRCUVV0TExFdEJRVXNzUlVGQlNVUXNTVUZCVFN4RlFVRkpRU3hKUVVGTklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1YldGMGFDNWhkR0Z1YUM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxzaWduPXJlcXVpcmUoNjcpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtjYnJ0OmZ1bmN0aW9uKHIpe3JldHVybiBzaWduKHI9K3IpKk1hdGgucG93KE1hdGguYWJzKHIpLDEvMyl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbU5pY25RdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKemFXZHVJaXdpVXlJc0ltTmljblFpTENKNElpd2lUV0YwYUNJc0luQnZkeUlzSW1GaWN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1MwRkJUMFFzVVVGQlVTeG5Ra0ZGYmtKRUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1QwRkJVU3hEUVVONlFrTXNTMEZCVFN4VFFVRmpReXhIUVVOc1FpeFBRVUZQU0N4TFFVRkxSeXhIUVVGTFFTeEhRVUZMUXl4TFFVRkxReXhKUVVGSlJDeExRVUZMUlN4SlFVRkpTQ3hIUVVGSkxFVkJRVWtpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXRZWFJvTG1OaWNuUXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtjbHozMjpmdW5jdGlvbihyKXtyZXR1cm4ocj4+Pj0wKT8zMS1NYXRoLmZsb29yKE1hdGgubG9nKHIrLjUpKk1hdGguTE9HMkUpOjMyfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1Oc2VqTXlMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1Oc2VqTXlJaXdpZUNJc0lrMWhkR2dpTENKbWJHOXZjaUlzSW14dlp5SXNJa3hQUnpKRklsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEU5QlFWRXNRMEZEZWtKRExFMUJRVThzVTBGQlpVTXNSMEZEY0VJc1QwRkJVVUVzUzBGQlR5eEhRVUZMTEVkQlFVdERMRXRCUVV0RExFMUJRVTFFTEV0QlFVdEZMRWxCUVVsSUxFVkJRVWtzU1VGQlQwTXNTMEZCUzBjc1QwRkJVeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtMWhkR2d1WTJ4Nk16SXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGV4cD1NYXRoLmV4cDskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7Y29zaDpmdW5jdGlvbihlKXtyZXR1cm4oZXhwKGU9K2UpK2V4cCgtZSkpLzJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbU52YzJndWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQWlMQ0pOWVhSb0lpd2lVeUlzSW1OdmMyZ2lMQ0o0SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhKUVVGTlF5eExRVUZMUkN4SlFVVm1SaXhSUVVGUlFTeFJRVUZSU1N4RlFVRkhMRTlCUVZFc1EwRkRla0pETEV0QlFVMHNVMEZCWTBNc1IwRkRiRUlzVDBGQlVVb3NTVUZCU1Vrc1IwRkJTMEVzUjBGQlMwb3NTMEZCUzBrc1NVRkJUU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtMWhkR2d1WTI5emFDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGV4cG0xPXJlcXVpcmUoNjMpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooJGV4cG0xIT1NYXRoLmV4cG0xKSxcIk1hdGhcIix7ZXhwbTE6JGV4cG0xfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbVY0Y0cweExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aUpHVjRjRzB4SWl3aVV5SXNJa1lpTENKTllYUm9JaXdpWlhod2JURWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExFOUJRVk5FTEZGQlFWRXNhVUpCUlhKQ1JDeFJRVUZSUVN4UlFVRlJSeXhGUVVGSlNDeFJRVUZSU1N4SFFVRkxSaXhSUVVGVlJ5eExRVUZMUXl4UFFVRlJMRTlCUVZFc1EwRkJSVUVzVFVGQlQwb2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1dFlYUm9MbVY0Y0cweExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2Zyb3VuZDpyZXF1aXJlKDY0KX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1aeWIzVnVaQzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKbWNtOTFibVFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVY3NUMEZCVVN4RFFVRkZReXhQUVVGUlJpeFJRVUZSSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXViV0YwYUM1bWNtOTFibVF1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxhYnM9TWF0aC5hYnM7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2h5cG90OmZ1bmN0aW9uKHIsdCl7Zm9yKHZhciBhLGUsbz0wLGg9MCxwPWFyZ3VtZW50cy5sZW5ndGgsbj0wO2g8cDspbjwoYT1hYnMoYXJndW1lbnRzW2grK10pKT8obz1vKihlPW4vYSkqZSsxLG49YSk6bys9YT4wPyhlPWEvbikqZTphO3JldHVybiBuPT09MS8wPzEvMDpuKk1hdGguc3FydChvKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xtaDVjRzkwTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWVdKeklpd2lUV0YwYUNJc0lsTWlMQ0pvZVhCdmRDSXNJblpoYkhWbE1TSXNJblpoYkhWbE1pSXNJbUZ5WnlJc0ltUnBkaUlzSW5OMWJTSXNJbWtpTENKaFRHVnVJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWJHRnlaeUlzSWtsdVptbHVhWFI1SWl3aWMzRnlkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNTVUZCVFVNc1MwRkJTMFFzU1VGRlprWXNVVUZCVVVFc1VVRkJVVWtzUlVGQlJ5eFBRVUZSTEVOQlEzcENReXhOUVVGUExGTkJRV1ZETEVWQlFWRkRMRWRCVFRWQ0xFbEJURUVzU1VGSlNVTXNSVUZCUzBNc1JVRktURU1zUlVGQlRTeEZRVU5PUXl4RlFVRkpMRVZCUTBwRExFVkJRVTlETEZWQlFWVkRMRTlCUTJwQ1F5eEZRVUZQTEVWQlJVcEtMRVZCUVVsRExFZEJSVXhITEVkQlJFcFFMRVZCUVUxT0xFbEJRVWxYTEZWQlFWVkdMRkZCUjJ4Q1JDeEZRVUZOUVN4SFFVUk9SQ3hGUVVGTlRTeEZRVUZQVUN4SFFVTkxReXhGUVVGTkxFVkJRM2hDVFN4RlFVRlBVQ3hIUVVkUVJTeEhRVVpUUml4RlFVRk5MRWRCUTJaRExFVkJRVTFFTEVWQlFVMVBMRWRCUTBOT0xFVkJRMFJFTEVWQlJXaENMRTlCUVU5UExFbEJRVk5ETEVWQlFVRkJMRVZCUVZkQkxFVkJRVUZCTEVWQlFWZEVMRVZCUVU5YUxFdEJRVXRqTEV0QlFVdFFJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWJXRjBhQzVvZVhCdmRDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGltdWw9TWF0aC5pbXVsOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRipyZXF1aXJlKDM4KShmdW5jdGlvbigpe3JldHVybi01IT0kaW11bCg0Mjk0OTY3Mjk1LDUpfHwyIT0kaW11bC5sZW5ndGh9KSxcIk1hdGhcIix7aW11bDpmdW5jdGlvbihyLGUpe3ZhciB0PStyLHU9K2UsaT02NTUzNSZ0LGw9NjU1MzUmdTtyZXR1cm4gMHxpKmwrKCg2NTUzNSZ0Pj4+MTYpKmwraSooNjU1MzUmdT4+PjE2KTw8MTY+Pj4wKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xtbHRkV3d1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0lrYVcxMWJDSXNJazFoZEdnaUxDSnBiWFZzSWl3aVV5SXNJa1lpTENKc1pXNW5kR2dpTENKNElpd2llU0lzSW5odUlpd2llVzRpTENKNGJDSXNJbmxzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhOUVVGUlF5eExRVUZMUXl4TFFVZHFRa29zVVVGQlVVRXNVVUZCVVVzc1JVRkJTVXdzVVVGQlVVMHNSVUZCU1V3c1VVRkJVU3hYUVVGU1FTeERRVUZ2UWl4WFFVTnNSQ3hQUVVGblF5eEhRVUY2UWtNc1RVRkJUU3hYUVVGWkxFbEJRVFJDTEVkQlFXaENRU3hOUVVGTlN5eFRRVU42UXl4UFFVRlJMRU5CUTFaSUxFdEJRVTBzVTBGQlkwa3NSVUZCUjBNc1IwRkRja0lzU1VGRFNVTXNSMEZCVFVZc1JVRkRUa2NzUjBGQlRVWXNSVUZEVGtjc1JVRklVeXhOUVVkTFJpeEZRVU5rUnl4RlFVcFRMRTFCU1V0R0xFVkJRMnhDTEU5QlFVOHNSVUZCU1VNc1JVRkJTME1zU1VGTVNDeE5RVXR0UWtnc1NVRkJUeXhKUVVGTlJ5eEZRVUZMUkN4SFFVeHlReXhOUVV0dlJFUXNTVUZCVHl4TFFVRlBMRXRCUVU4aUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV0WVhSb0xtbHRkV3d1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7bG9nMTA6ZnVuY3Rpb24ocil7cmV0dXJuIE1hdGgubG9nKHIpKk1hdGguTE9HMTBFfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG14dlp6RXdMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW14dlp6RXdJaXdpZUNJc0lrMWhkR2dpTENKc2IyY2lMQ0pNVDBjeE1FVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVjc1QwRkJVU3hEUVVONlFrTXNUVUZCVHl4VFFVRmxReXhIUVVOd1FpeFBRVUZQUXl4TFFVRkxReXhKUVVGSlJpeEhRVUZMUXl4TFFVRkxSU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtMWhkR2d1Ykc5bk1UQXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtsb2cxcDpyZXF1aXJlKDY1KX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG14dlp6RndMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW14dlp6RndJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExFOUJRVkVzUTBGQlJVTXNUVUZCVDBZc1VVRkJVU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtMWhkR2d1Ykc5bk1YQXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtsb2cyOmZ1bmN0aW9uKHIpe3JldHVybiBNYXRoLmxvZyhyKS9NYXRoLkxOMn19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xteHZaekl1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aWJHOW5NaUlzSW5naUxDSk5ZWFJvSWl3aWJHOW5JaXdpVEU0eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEU5QlFWRXNRMEZEZWtKRExFdEJRVTBzVTBGQlkwTXNSMEZEYkVJc1QwRkJUME1zUzBGQlMwTXNTVUZCU1VZc1IwRkJTME1zUzBGQlMwVWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1dFlYUm9MbXh2WnpJdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse3NpZ246cmVxdWlyZSg2Nyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuTnBaMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aWMybG5iaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFBRVUZSTEVOQlFVVkRMRXRCUVUxR0xGRkJRVkVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXRZWFJvTG5OcFoyNHVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGV4cG0xPXJlcXVpcmUoNjMpLGV4cD1NYXRoLmV4cDskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqcmVxdWlyZSgzOCkoZnVuY3Rpb24oKXtyZXR1cm4tMmUtMTchPSFNYXRoLnNpbmgoLTJlLTE3KX0pLFwiTWF0aFwiLHtzaW5oOmZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmFicyhlPStlKTwxPyhleHBtMShlKS1leHBtMSgtZSkpLzI6KGV4cChlLTEpLWV4cCgtZS0xKSkqKE1hdGguRS8yKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuTnBibWd1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdE1TSXNJbVY0Y0NJc0lrMWhkR2dpTENKVElpd2lSaUlzSW5OcGJtZ2lMQ0o0SWl3aVlXSnpJaXdpUlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVFVGQlVVUXNVVUZCVVN4cFFrRkRhRUpGTEVsQlFVMURMRXRCUVV0RUxFbEJSMlpJTEZGQlFWRkJMRkZCUVZGTExFVkJRVWxNTEZGQlFWRk5MRVZCUVVsTUxGRkJRVkVzVjBGQlVrRXNRMEZCYjBJc1YwRkRiRVFzVDBGQk9FSXNVVUZCZEVKSExFdEJRVXRITEUxQlFVMHNVMEZEYWtJc1QwRkJVU3hEUVVOV1FTeExRVUZOTEZOQlFXTkRMRWRCUTJ4Q0xFOUJRVTlLTEV0QlFVdExMRWxCUVVsRUxFZEJRVXRCTEVkQlFVc3NSMEZEY2tKT0xFMUJRVTFOTEVkQlFVdE9MRTlCUVU5TkxFbEJRVTBzUjBGRGVFSk1MRWxCUVVsTExFVkJRVWtzUjBGQlMwd3NTMEZCUzBzc1JVRkJTU3hMUVVGUFNpeExRVUZMVFN4RlFVRkpJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWJXRjBhQzV6YVc1b0xtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksZXhwbTE9cmVxdWlyZSg2MyksZXhwPU1hdGguZXhwOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHt0YW5oOmZ1bmN0aW9uKGUpe3ZhciBwPWV4cG0xKGU9K2UpLHI9ZXhwbTEoLWUpO3JldHVybiBwPT0xLzA/MTpyPT0xLzA/LTE6KHAtcikvKGV4cChlKStleHAoLWUpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuUmhibWd1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdE1TSXNJbVY0Y0NJc0lrMWhkR2dpTENKVElpd2lkR0Z1YUNJc0luZ2lMQ0poSWl3aVlpSXNJa2x1Wm1sdWFYUjVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eE5RVUZSUkN4UlFVRlJMR2xDUVVOb1FrVXNTVUZCVFVNc1MwRkJTMFFzU1VGRlprZ3NVVUZCVVVFc1VVRkJVVXNzUlVGQlJ5eFBRVUZSTEVOQlEzcENReXhMUVVGTkxGTkJRV05ETEVkQlEyeENMRWxCUVVsRExFVkJRVWxPTEUxQlFVMUxMRWRCUVV0QkxFZEJRMlpGTEVWQlFVbFFMRTlCUVU5TExFZEJRMllzVDBGQlQwTXNSMEZCUzBVc1JVRkJRVUVzUlVGQlZ5eEZRVUZKUkN4SFFVRkxReXhGUVVGQlFTeEhRVUZaTEVkQlFVdEdMRVZCUVVsRExFbEJRVTFPTEVsQlFVbEpMRWRCUVV0S0xFdEJRVXRKSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXViV0YwYUM1MFlXNW9MbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHt0cnVuYzpmdW5jdGlvbihyKXtyZXR1cm4ocj4wP01hdGguZmxvb3I6TWF0aC5jZWlsKShyKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuUnlkVzVqTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0luUnlkVzVqSWl3aWFYUWlMQ0pOWVhSb0lpd2labXh2YjNJaUxDSmpaV2xzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEUxQlFVOHNVMEZCWlVNc1IwRkRjRUlzVDBGQlVVRXNSVUZCU3l4RlFVRkpReXhMUVVGTFF5eE5RVUZSUkN4TFFVRkxSU3hOUVVGTlNDSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG0xaGRHZ3VkSEoxYm1NdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdsb2JhbD1yZXF1aXJlKDQzKSxoYXM9cmVxdWlyZSg0NCksY29mPXJlcXVpcmUoMjEpLGluaGVyaXRJZlJlcXVpcmVkPXJlcXVpcmUoNDgpLHRvUHJpbWl0aXZlPXJlcXVpcmUoMTIyKSxmYWlscz1yZXF1aXJlKDM4KSxnT1BOPXJlcXVpcmUoNzkpLmYsZ09QRD1yZXF1aXJlKDc3KS5mLGRQPXJlcXVpcmUoNzQpLmYsJHRyaW09cmVxdWlyZSgxMTMpLnRyaW0sJE51bWJlcj1nbG9iYWwuTnVtYmVyLEJhc2U9JE51bWJlcixwcm90bz0kTnVtYmVyLnByb3RvdHlwZSxCUk9LRU5fQ09GPVwiTnVtYmVyXCI9PWNvZihyZXF1aXJlKDczKShwcm90bykpLFRSSU09XCJ0cmltXCJpbiBTdHJpbmcucHJvdG90eXBlLHRvTnVtYmVyPWZ1bmN0aW9uKGUpe3ZhciByPXRvUHJpbWl0aXZlKGUsITEpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByJiZyLmxlbmd0aD4yKXt2YXIgdCxpLG8sdT0ocj1UUklNP3IudHJpbSgpOiR0cmltKHIsMykpLmNoYXJDb2RlQXQoMCk7aWYoNDM9PT11fHw0NT09PXUpe2lmKDg4PT09KHQ9ci5jaGFyQ29kZUF0KDIpKXx8MTIwPT09dClyZXR1cm4gTmFOfWVsc2UgaWYoNDg9PT11KXtzd2l0Y2goci5jaGFyQ29kZUF0KDEpKXtjYXNlIDY2OmNhc2UgOTg6aT0yLG89NDk7YnJlYWs7Y2FzZSA3OTpjYXNlIDExMTppPTgsbz01NTticmVhaztkZWZhdWx0OnJldHVybityfWZvcih2YXIgYSxOPXIuc2xpY2UoMikscz0wLG49Ti5sZW5ndGg7czxuO3MrKylpZigoYT1OLmNoYXJDb2RlQXQocykpPDQ4fHxhPm8pcmV0dXJuIE5hTjtyZXR1cm4gcGFyc2VJbnQoTixpKX19cmV0dXJuK3J9O2lmKCEkTnVtYmVyKFwiIDBvMVwiKXx8ISROdW1iZXIoXCIwYjFcIil8fCROdW1iZXIoXCIrMHgxXCIpKXskTnVtYmVyPWZ1bmN0aW9uKGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg8MT8wOmUsdD10aGlzO3JldHVybiB0IGluc3RhbmNlb2YgJE51bWJlciYmKEJST0tFTl9DT0Y/ZmFpbHMoZnVuY3Rpb24oKXtwcm90by52YWx1ZU9mLmNhbGwodCl9KTpcIk51bWJlclwiIT1jb2YodCkpP2luaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKHIpKSx0LCROdW1iZXIpOnRvTnVtYmVyKHIpfTtmb3IodmFyIGtleSxrZXlzPXJlcXVpcmUoMzIpP2dPUE4oQmFzZSk6XCJNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSxFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlclwiLnNwbGl0KFwiLFwiKSxqPTA7a2V5cy5sZW5ndGg+ajtqKyspaGFzKEJhc2Usa2V5PWtleXNbal0pJiYhaGFzKCROdW1iZXIsa2V5KSYmZFAoJE51bWJlcixrZXksZ09QRChCYXNlLGtleSkpOyROdW1iZXIucHJvdG90eXBlPXByb3RvLHByb3RvLmNvbnN0cnVjdG9yPSROdW1iZXIscmVxdWlyZSg5NCkoZ2xvYmFsLFwiTnVtYmVyXCIsJE51bWJlcil9XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1WTI5dWMzUnlkV04wYjNJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWjJ4dlltRnNJaXdpY21WeGRXbHlaU0lzSW1oaGN5SXNJbU52WmlJc0ltbHVhR1Z5YVhSSlpsSmxjWFZwY21Wa0lpd2lkRzlRY21sdGFYUnBkbVVpTENKbVlXbHNjeUlzSW1kUFVFNGlMQ0ptSWl3aVowOVFSQ0lzSW1SUUlpd2lKSFJ5YVcwaUxDSjBjbWx0SWl3aUpFNTFiV0psY2lJc0lrNTFiV0psY2lJc0lrSmhjMlVpTENKd2NtOTBieUlzSW5CeWIzUnZkSGx3WlNJc0lrSlNUMHRGVGw5RFQwWWlMQ0pVVWtsTklpd2lVM1J5YVc1bklpd2lkRzlPZFcxaVpYSWlMQ0poY21kMWJXVnVkQ0lzSW1sMElpd2liR1Z1WjNSb0lpd2lkR2hwY21RaUxDSnlZV1JwZUNJc0ltMWhlRU52WkdVaUxDSm1hWEp6ZENJc0ltTm9ZWEpEYjJSbFFYUWlMQ0pPWVU0aUxDSmpiMlJsSWl3aVpHbG5hWFJ6SWl3aWMyeHBZMlVpTENKcElpd2liQ0lzSW5CaGNuTmxTVzUwSWl3aWRtRnNkV1VpTENKaGNtZDFiV1Z1ZEhNaUxDSjBhR0YwSWl3aWRHaHBjeUlzSW5aaGJIVmxUMllpTENKallXeHNJaXdpYTJWNUlpd2lhMlY1Y3lJc0luTndiR2wwSWl3aWFpSXNJbU52Ym5OMGNuVmpkRzl5SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWxCUVVsQkxFOUJRVk5ETEZGQlFWRXNZVUZEYWtKRExFbEJRVTFFTEZGQlFWRXNWVUZEWkVVc1NVRkJUVVlzVVVGQlVTeFZRVU5rUnl4clFrRkJiMEpJTEZGQlFWRXNNRUpCUXpWQ1NTeFpRVUZqU2l4UlFVRlJMRzFDUVVOMFFrc3NUVUZCVVV3c1VVRkJVU3haUVVOb1FrMHNTMEZCVDA0c1VVRkJVU3hyUWtGQmEwSlBMRVZCUTJwRFF5eExRVUZQVWl4UlFVRlJMR3RDUVVGclFrOHNSVUZEYWtORkxFZEJRVXRVTEZGQlFWRXNaMEpCUVdkQ1R5eEZRVU0zUWtjc1RVRkJVVllzVVVGQlVTeHJRa0ZCYTBKWExFdEJSV3hEUXl4UlFVRlZZaXhQUVVGaFl5eFBRVU4yUWtNc1MwRkJUMFlzVVVGRFVFY3NUVUZCVVVnc1VVRkJVVWtzVlVGRmFFSkRMRmRCVEZNc1ZVRkxTV1lzU1VGQlNVWXNVVUZCVVN4dFFrRkJVa0VzUTBGQk5FSmxMRkZCUXpkRFJ5eExRVUZQTEZOQlFWVkRMRTlCUVU5SUxGVkJSM2hDU1N4VFFVRlhMRk5CUVZWRExFZEJRM1pDTEVsQlFVbERMRVZCUVV0c1FpeFpRVUZaYVVJc1IwRkJRVUVzUjBGRGNrSXNSMEZCYVVJc2FVSkJRVTVETEVkQlFXdENRU3hGUVVGSFF5eFBRVUZUTEVWQlFVY3NRMEZGTVVNc1NVRkRTVU1zUlVGQlQwTXNSVUZCVDBNc1JVRkVaRU1zUjBGRVNrd3NSVUZCUzBvc1MwRkJUMGtzUlVGQlIxZ3NUMEZCVTBRc1RVRkJUVmtzUlVGQlNTeEpRVU51UWswc1YwRkJWeXhIUVVVeFFpeEhRVUZqTEV0QlFWWkVMRWRCUVRCQ0xFdEJRVlpCTEVkQlJXeENMRWRCUVdNc1RVRkVaRWdzUlVGQlVVWXNSVUZCUjAwc1YwRkJWeXhMUVVOUkxFMUJRVlpLTEVWQlFXVXNUMEZCVDBzc1UwRkRja01zUjBGQll5eExRVUZXUml4RlFVRmpMRU5CUTNaQ0xFOUJRVkZNTEVWQlFVZE5MRmRCUVZjc1NVRkRjRUlzUzBGQlN5eEhRVUZKTEV0QlFVc3NSMEZCU1Vnc1JVRkJVU3hGUVVGSFF5eEZRVUZWTEVkQlFVa3NUVUZETTBNc1MwRkJTeXhIUVVGSkxFdEJRVXNzU1VGQlMwUXNSVUZCVVN4RlFVRkhReXhGUVVGVkxFZEJRVWtzVFVGRE5VTXNVVUZCVXl4UFFVRlJTaXhGUVVWdVFpeEpRVUZMTEVsQlFXOUVVU3hGUVVGb1JFTXNSVUZCVTFRc1JVRkJSMVVzVFVGQlRTeEhRVUZKUXl4RlFVRkpMRVZCUVVkRExFVkJRVWxJTEVWQlFVOVNMRTlCUVdOVkxFVkJRVWxETEVWQlFVZEVMRWxCU1hCRkxFbEJTRUZJTEVWQlFVOURMRVZCUVU5SUxGZEJRVmRMTEVsQlIyUXNTVUZCVFVnc1JVRkJUMG9zUlVGQlV5eFBRVUZQUnl4SlFVTjRReXhQUVVGUFRTeFRRVUZUU2l4RlFVRlJUaXhKUVVVMVFpeFBRVUZSU0N4SFFVZGFMRWxCUVV0V0xGRkJRVkVzVlVGQldVRXNVVUZCVVN4UlFVRlZRU3hSUVVGUkxGRkJRVk1zUTBGRE1VUkJMRkZCUVZVc1UwRkJaMEozUWl4SFFVTjRRaXhKUVVGSlpDeEZRVUZMWlN4VlFVRlZaQ3hQUVVGVExFVkJRVWtzUlVGQlNXRXNSVUZEYUVORkxFVkJRVTlETEV0QlExZ3NUMEZCVDBRc1lVRkJaMEl4UWl4VlFVVnFRa3NzVjBGQllWb3NUVUZCVFN4WFFVRmpWU3hOUVVGTmVVSXNVVUZCVVVNc1MwRkJTMGdzUzBGNFEycEVMRlZCZDBNMlJIQkRMRWxCUVVsdlF5eEpRVU53Ulc1RExHdENRVUZyUWl4SlFVRkpWeXhMUVVGTFRTeFRRVUZUUlN4SlFVRk5aMElzUlVGQlRURkNMRk5CUVZkUkxGTkJRVk5GTEVsQlJUVkZMRWxCUVVzc1NVRk5aMEp2UWl4SlFVNWFReXhMUVVGUE0wTXNVVUZCVVN4clFrRkJiMEpOTEV0QlFVdFJMRTFCUVZFc05rdEJUWFpFT0VJc1RVRkJUU3hMUVVGTlF5eEZRVUZKTEVWQlFWRkdMRXRCUVV0d1FpeFBRVUZUYzBJc1JVRkJSMEVzU1VGRGNrTTFReXhKUVVGSllTeExRVUZOTkVJc1NVRkJUVU1zUzBGQlMwVXNUVUZCVVRWRExFbEJRVWxYTEZGQlFWTTRRaXhOUVVNMVEycERMRWRCUVVkSExGRkJRVk00UWl4SlFVRkxiRU1zUzBGQlMwMHNTMEZCVFRSQ0xFMUJSMmhET1VJc1VVRkJVVWtzVlVGQldVUXNUVUZEY0VKQkxFMUJRVTByUWl4WlFVRmpiRU1zVVVGRGNFSmFMRkZCUVZFc1kwRkJVa0VzUTBGQmRVSkVMRTlCZUVSYUxGTkJkMFEwUW1FaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV1ZFcxaVpYSXVZMjl1YzNSeWRXTjBiM0l1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk51bWJlclwiLHtFUFNJTE9OOk1hdGgucG93KDIsLTUyKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdVpYQnphV3h2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSkZVRk5KVEU5T0lpd2lUV0YwYUNJc0luQnZkeUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFRRVUZWTEVOQlFVVkRMRkZCUVZORExFdEJRVXRETEVsQlFVa3NSMEZCU1NJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbTUxYldKbGNpNWxjSE5wYkc5dUxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksX2lzRmluaXRlPXJlcXVpcmUoNDMpLmlzRmluaXRlOyRleHBvcnQoJGV4cG9ydC5TLFwiTnVtYmVyXCIse2lzRmluaXRlOmZ1bmN0aW9uKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlJiZfaXNGaW5pdGUoZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1YVhNdFptbHVhWFJsTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWDJselJtbHVhWFJsSWl3aWFYTkdhVzVwZEdVaUxDSlRJaXdpYVhRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZWQlFWbEVMRkZCUVZFc1lVRkJZVVVzVTBGRmNrTklMRkZCUVZGQkxGRkJRVkZKTEVWQlFVY3NVMEZCVlN4RFFVTXpRa1FzVTBGQlZTeFRRVUZyUWtVc1IwRkRNVUlzVFVGQmIwSXNhVUpCUVU1QkxFZEJRV3RDU0N4VlFVRlZSeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtNTFiV0psY2k1cGN5MW1hVzVwZEdVdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJOdW1iZXJcIix7aXNJbnRlZ2VyOnJlcXVpcmUoNTMpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1YVhNdGFXNTBaV2RsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSnBjMGx1ZEdWblpYSWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVjc1UwRkJWU3hEUVVGRlF5eFZRVUZYUml4UlFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWJuVnRZbVZ5TG1sekxXbHVkR1ZuWlhJdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJOdW1iZXJcIix7aXNOYU46ZnVuY3Rpb24ocil7cmV0dXJuIHIhPXJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1YVhNdGJtRnVMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1selRtRk9JaXdpYm5WdFltVnlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExGTkJRVlVzUTBGRE0wSkRMRTFCUVU4c1UwRkJaVU1zUjBGRmNFSXNUMEZCVDBFc1IwRkJWVUVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXVkVzFpWlhJdWFYTXRibUZ1TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxpc0ludGVnZXI9cmVxdWlyZSg1MyksYWJzPU1hdGguYWJzOyRleHBvcnQoJGV4cG9ydC5TLFwiTnVtYmVyXCIse2lzU2FmZUludGVnZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGlzSW50ZWdlcihlKSYmYWJzKGUpPD05MDA3MTk5MjU0NzQwOTkxfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWFYTXRjMkZtWlMxcGJuUmxaMlZ5TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpYVhOSmJuUmxaMlZ5SWl3aVlXSnpJaXdpVFdGMGFDSXNJbE1pTENKcGMxTmhabVZKYm5SbFoyVnlJaXdpYm5WdFltVnlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR2xDUVVOd1FrVXNTVUZCVFVNc1MwRkJTMFFzU1VGRlprZ3NVVUZCVVVFc1VVRkJVVXNzUlVGQlJ5eFRRVUZWTEVOQlF6TkNReXhqUVVGbExGTkJRWFZDUXl4SFFVTndReXhQUVVGUFRDeFZRVUZWU3l4SlFVRlhTaXhKUVVGSlNTeEpRVUZYSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXViblZ0WW1WeUxtbHpMWE5oWm1VdGFXNTBaV2RsY2k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk51bWJlclwiLHtNQVhfU0FGRV9JTlRFR0VSOjkwMDcxOTkyNTQ3NDA5OTF9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV1ZFcxaVpYSXViV0Y0TFhOaFptVXRhVzUwWldkbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lsTWlMQ0pOUVZoZlUwRkdSVjlKVGxSRlIwVlNJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExGTkJRVlVzUTBGQlJVTXNhVUpCUVd0Q0lpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Ym5WdFltVnlMbTFoZUMxellXWmxMV2x1ZEdWblpYSXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTnVtYmVyXCIse01JTl9TQUZFX0lOVEVHRVI6LTkwMDcxOTkyNTQ3NDA5OTF9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV1ZFcxaVpYSXViV2x1TFhOaFptVXRhVzUwWldkbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lsTWlMQ0pOU1U1ZlUwRkdSVjlKVGxSRlIwVlNJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExGTkJRVlVzUTBGQlJVTXNhMEpCUVcxQ0lpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Ym5WdFltVnlMbTFwYmkxellXWmxMV2x1ZEdWblpYSXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLCRwYXJzZUZsb2F0PXJlcXVpcmUoODgpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooTnVtYmVyLnBhcnNlRmxvYXQhPSRwYXJzZUZsb2F0KSxcIk51bWJlclwiLHtwYXJzZUZsb2F0OiRwYXJzZUZsb2F0fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1Y0dGeWMyVXRabXh2WVhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENJa2NHRnljMlZHYkc5aGRDSXNJbE1pTENKR0lpd2lUblZ0WW1WeUlpd2ljR0Z5YzJWR2JHOWhkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNXVUZCWTBRc1VVRkJVU3hyUWtGRk1VSkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVbElMRkZCUVZGSkxFZEJRVXRETEU5QlFVOURMRmxCUVdOS0xHRkJRV01zVTBGQlZTeERRVUZGU1N4WFFVRlpTaUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtNTFiV0psY2k1d1lYSnpaUzFtYkc5aGRDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJHBhcnNlSW50PXJlcXVpcmUoODkpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooTnVtYmVyLnBhcnNlSW50IT0kcGFyc2VJbnQpLFwiTnVtYmVyXCIse3BhcnNlSW50OiRwYXJzZUludH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWNHRnljMlV0YVc1MExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aUpIQmhjbk5sU1c1MElpd2lVeUlzSWtZaUxDSk9kVzFpWlhJaUxDSndZWEp6WlVsdWRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1ZVRkJXVVFzVVVGQlVTeG5Ra0ZGZUVKRUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVsSUxGRkJRVkZKTEVkQlFVdERMRTlCUVU5RExGVkJRVmxLTEZkQlFWa3NVMEZCVlN4RFFVRkZTU3hUUVVGVlNpSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG01MWJXSmxjaTV3WVhKelpTMXBiblF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSx0b0ludGVnZXI9cmVxdWlyZSgxMTgpLGFOdW1iZXJWYWx1ZT1yZXF1aXJlKDYpLHJlcGVhdD1yZXF1aXJlKDExMiksJHRvRml4ZWQ9MS4udG9GaXhlZCxmbG9vcj1NYXRoLmZsb29yLGRhdGE9WzAsMCwwLDAsMCwwXSxFUlJPUj1cIk51bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiFcIixtdWx0aXBseT1mdW5jdGlvbihlLHIpe2Zvcih2YXIgdD0tMSxpPXI7Kyt0PDY7KWkrPWUqZGF0YVt0XSxkYXRhW3RdPWklMWU3LGk9Zmxvb3IoaS8xZTcpfSxkaXZpZGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciByPTYsdD0wOy0tcj49MDspdCs9ZGF0YVtyXSxkYXRhW3JdPWZsb29yKHQvZSksdD10JWUqMWU3fSxudW1Ub1N0cmluZz1mdW5jdGlvbigpe2Zvcih2YXIgZT02LHI9XCJcIjstLWU+PTA7KWlmKFwiXCIhPT1yfHwwPT09ZXx8MCE9PWRhdGFbZV0pe3ZhciB0PVN0cmluZyhkYXRhW2VdKTtyPVwiXCI9PT1yP3Q6cityZXBlYXQuY2FsbChcIjBcIiw3LXQubGVuZ3RoKSt0fXJldHVybiByfSxwb3c9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiAwPT09cj90OnIlMj09MT9wb3coZSxyLTEsdCplKTpwb3coZSplLHIvMix0KX07JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKighISR0b0ZpeGVkJiYoXCIwLjAwMFwiIT09OGUtNS50b0ZpeGVkKDMpfHxcIjFcIiE9PS45LnRvRml4ZWQoMCl8fFwiMS4yNVwiIT09MS4yNTUudG9GaXhlZCgyKXx8XCIxMDAwMDAwMDAwMDAwMDAwMTI4XCIhPT0oMHhkZTBiNmIzYTc2NDAwODApLnRvRml4ZWQoMCkpfHwhcmVxdWlyZSgzOCkoZnVuY3Rpb24oKXskdG9GaXhlZC5jYWxsKHt9KX0pKSxcIk51bWJlclwiLHt0b0ZpeGVkOmZ1bmN0aW9uKGUpe3ZhciByLHQsaSxvLGE9YU51bWJlclZhbHVlKHRoaXMsRVJST1IpLG49dG9JbnRlZ2VyKGUpLHU9XCJcIixsPVwiMFwiO2lmKG48MHx8bj4yMCl0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtpZihhIT1hKXJldHVyblwiTmFOXCI7aWYoYTw9LTFlMjF8fGE+PTFlMjEpcmV0dXJuIFN0cmluZyhhKTtpZihhPDAmJih1PVwiLVwiLGE9LWEpLGE+MWUtMjEpaWYodD0ocj1mdW5jdGlvbihlKXtmb3IodmFyIHI9MCx0PWU7dD49NDA5Njspcis9MTIsdC89NDA5Njtmb3IoO3Q+PTI7KXIrPTEsdC89MjtyZXR1cm4gcn0oYSpwb3coMiw2OSwxKSktNjkpPDA/YSpwb3coMiwtciwxKTphL3BvdygyLHIsMSksdCo9NDUwMzU5OTYyNzM3MDQ5Niwocj01Mi1yKT4wKXtmb3IobXVsdGlwbHkoMCx0KSxpPW47aT49NzspbXVsdGlwbHkoMWU3LDApLGktPTc7Zm9yKG11bHRpcGx5KHBvdygxMCxpLDEpLDApLGk9ci0xO2k+PTIzOylkaXZpZGUoMTw8MjMpLGktPTIzO2RpdmlkZSgxPDxpKSxtdWx0aXBseSgxLDEpLGRpdmlkZSgyKSxsPW51bVRvU3RyaW5nKCl9ZWxzZSBtdWx0aXBseSgwLHQpLG11bHRpcGx5KDE8PC1yLDApLGw9bnVtVG9TdHJpbmcoKStyZXBlYXQuY2FsbChcIjBcIixuKTtyZXR1cm4gbj4wP3UrKChvPWwubGVuZ3RoKTw9bj9cIjAuXCIrcmVwZWF0LmNhbGwoXCIwXCIsbi1vKStsOmwuc2xpY2UoMCxvLW4pK1wiLlwiK2wuc2xpY2Uoby1uKSk6dStsfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWRHOHRabWw0WldRdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKMGIwbHVkR1ZuWlhJaUxDSmhUblZ0WW1WeVZtRnNkV1VpTENKeVpYQmxZWFFpTENJa2RHOUdhWGhsWkNJc0luUnZSbWw0WldRaUxDSm1iRzl2Y2lJc0lrMWhkR2dpTENKa1lYUmhJaXdpUlZKU1QxSWlMQ0p0ZFd4MGFYQnNlU0lzSW00aUxDSmpJaXdpYVNJc0ltTXlJaXdpWkdsMmFXUmxJaXdpYm5WdFZHOVRkSEpwYm1jaUxDSnpJaXdpZENJc0lsTjBjbWx1WnlJc0ltTmhiR3dpTENKc1pXNW5kR2dpTENKd2IzY2lMQ0o0SWl3aVlXTmpJaXdpVUNJc0lrWWlMQ0ptY21GamRHbHZia1JwWjJsMGN5SXNJbVVpTENKNklpd2lhaUlzSW1zaUxDSjBhR2x6SWl3aVppSXNJbTBpTENKU1lXNW5aVVZ5Y205eUlpd2llRElpTENKemJHbGpaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4VlFVRlpSQ3hSUVVGUkxHbENRVU53UWtVc1lVRkJaVVlzVVVGQlVTeHhRa0ZEZGtKSExFOUJRVk5JTEZGQlFWRXNiMEpCUTJwQ1NTeFRRVUZYTEVkQlFVbERMRkZCUTJaRExFMUJRVkZETEV0QlFVdEVMRTFCUTJKRkxFdEJRVThzUTBGQlF5eEZRVUZITEVWQlFVY3NSVUZCUnl4RlFVRkhMRVZCUVVjc1IwRkRka0pETEUxQlFWRXNkME5CUjFKRExGTkJRVmNzVTBGQlZVTXNSVUZCUjBNc1IwRkhNVUlzU1VGR1FTeEpRVUZKUXl4SFFVRkxMRVZCUTB4RExFVkJRVXRHTEVsQlEwRkRMRVZCUVVrc1IwRkRXRU1zUjBGQlRVZ3NSVUZCU1Vnc1MwRkJTMHNzUjBGRFprd3NTMEZCUzBzc1IwRkJTME1zUlVGQlN5eEpRVU5tUVN4RlFVRkxVaXhOUVVGTlVTeEZRVUZMTEUxQlIyaENReXhQUVVGVExGTkJRVlZLTEVkQlIzSkNMRWxCUmtFc1NVRkJTVVVzUlVGQlNTeEZRVU5LUkN4RlFVRkpMRWxCUTBORExFZEJRVXNzUjBGRFdrUXNSMEZCUzBvc1MwRkJTMHNzUjBGRFZrd3NTMEZCUzBzc1IwRkJTMUFzVFVGQlRVMHNSVUZCU1VRc1IwRkRjRUpETEVWQlFVdEJMRVZCUVVsRUxFVkJRVXNzUzBGSFpFc3NXVUZCWXl4WFFVZG9RaXhKUVVaQkxFbEJRVWxJTEVWQlFVa3NSVUZEU2trc1JVRkJTU3hMUVVORFNpeEhRVUZMTEVkQlExb3NSMEZCVlN4TFFVRk9TU3hIUVVGclFpeEpRVUZPU2l4SFFVRjFRaXhKUVVGYVRDeExRVUZMU3l4SFFVRlZMRU5CUTNoRExFbEJRVWxMTEVWQlFVbERMRTlCUVU5WUxFdEJRVXRMTEVsQlEzQkNTU3hGUVVGVkxFdEJRVTVCTEVWQlFWZERMRVZCUVVsRUxFVkJRVWxrTEU5QlFVOXBRaXhMUVRGQ2VrSXNTVUV3UW05RExFVkJRVWxHTEVWQlFVVkhMRkZCUVZWSUxFVkJSVE5FTEU5QlFVOUVMRWRCUlZCTExFbEJRVTBzVTBGQlZVTXNSVUZCUjFvc1JVRkJSMkVzUjBGRGVFSXNUMEZCWVN4SlFVRk9ZaXhGUVVGVllTeEZRVUZOWWl4RlFVRkpMRWRCUVUwc1JVRkJTVmNzU1VGQlNVTXNSVUZCUjFvc1JVRkJTU3hGUVVGSFlTeEZRVUZOUkN4SFFVRkxSQ3hKUVVGSlF5eEZRVUZKUVN4RlFVRkhXaXhGUVVGSkxFVkJRVWRoTEVsQlpXeEdla0lzVVVGQlVVRXNVVUZCVVRCQ0xFVkJRVWt4UWl4UlFVRlJNa0lzUzBGQlQzUkNMRmRCUTFZc1ZVRkJka0lzUzBGQlVVTXNVVUZCVVN4SlFVTkhMRTFCUVc1Q0xFZEJRVWxCTEZGQlFWRXNTVUZEVXl4VFFVRnlRaXhOUVVGTlFTeFJRVUZSTEVsQlEzVkNMSGxDUVVGQkxHMUNRVUZtUVN4UlFVRlJMRTFCUXpGQ1RDeFJRVUZSTEZkQlFWSkJMRU5CUVc5Q0xGZEJSWGhDU1N4VFFVRlRaMElzUzBGQlN5eFBRVU5ZTEZOQlFWVXNRMEZEWW1Zc1VVRkJVeXhUUVVGcFFuTkNMRWRCUTNoQ0xFbEJTVWxETEVWQlFVZERMRVZCUVVkRExFVkJRVWRETEVWQlNsUlNMRVZCUVVseVFpeGhRVUZoT0VJc1MwRkJUWFpDTEU5QlEzWkNkMElzUlVGQlNXaERMRlZCUVZVd1FpeEhRVU5rVml4RlFVRkpMRWRCUTBwcFFpeEZRVE5FUnl4SlFUWkVVQ3hIUVVGSlJDeEZRVUZKTEVkQlFVdEJMRVZCUVVrc1IwRkJTU3hOUVVGTlJTeFhRVUZYTVVJc1QwRkZkRU1zUjBGQlNXTXNSMEZCUzBFc1JVRkJSeXhOUVVGUExFMUJRMjVDTEVkQlFVbEJMRWxCUVUwc1RVRkJVVUVzUjBGQlN5eExRVUZOTEU5QlFVOUtMRTlCUVU5SkxFZEJTek5ETEVkQlNrbEJMRVZCUVVrc1NVRkRUazRzUlVGQlNTeEpRVU5LVFN4SFFVRkxRU3hIUVVWSVFTeEZRVUZKTEUxQlMwNHNSMEZJUVUwc1IwRkVRVVFzUlVGeVEwa3NVMEZCVlV3c1IwRkhiRUlzU1VGR1FTeEpRVUZKV2l4RlFVRkpMRVZCUTBwNVFpeEZRVUZMWWl4RlFVTkdZU3hIUVVGTkxFMUJRMWg2UWl4SFFVRkxMRWRCUTB4NVFpeEhRVUZOTEV0QlJWSXNTMEZCVDBFc1IwRkJUU3hIUVVOWWVrSXNSMEZCU3l4RlFVTk1lVUlzUjBGQlRTeEZRVU5PTEU5QlFVOTZRaXhGUVZaRUxFTkJjVU5KV1N4RlFVRkpSQ3hKUVVGSkxFVkJRVWNzUjBGQlNTeEpRVUZOTEVsQlEzSkNMRVZCUVVsRExFVkJRVWxFTEVsQlFVa3NSMEZCU1Uwc1JVRkJSeXhIUVVGTFRDeEZRVUZKUkN4SlFVRkpMRVZCUVVkTkxFVkJRVWNzUjBGRE9VTkRMRWRCUVVzc2EwSkJRMHhFTEVWQlFVa3NSMEZCUzBFc1IwRkRSQ3hGUVVGSExFTkJSMVFzU1VGR1FXeENMRk5CUVZNc1JVRkJSMjFDTEVkQlExcERMRVZCUVVsSExFVkJRMGRJTEVkQlFVc3NSMEZEVm5CQ0xGTkJRVk1zU1VGQlN5eEhRVU5rYjBJc1IwRkJTeXhGUVVsUUxFbEJSa0Z3UWl4VFFVRlRXU3hKUVVGSkxFZEJRVWxSTEVWQlFVY3NSMEZCU1N4SFFVTjRRa0VzUlVGQlNVWXNSVUZCU1N4RlFVTkVSU3hIUVVGTExFbEJRMVptTEU5QlFVOHNSMEZCU3l4SlFVTmFaU3hIUVVGTExFZEJSVkJtTEU5QlFVOHNSMEZCUzJVc1IwRkRXbkJDTEZOQlFWTXNSVUZCUnl4SFFVTmFTeXhQUVVGUExFZEJRMUJ0UWl4RlFVRkpiRUlzYlVKQlJVcE9MRk5CUVZNc1JVRkJSMjFDTEVkQlExcHVRaXhUUVVGVExFbEJRVTFyUWl4RlFVRkhMRWRCUTJ4Q1RTeEZRVUZKYkVJc1kwRkJaMEppTEU5QlFVOXBRaXhMUVRsR2VFSXNTVUU0Um0xRFlTeEhRVkY0UXl4UFFVeEZRU3hGUVVGSkxFVkJSVVpvUWl4SlFVUktZeXhGUVVGSlJ5eEZRVUZGWWl4VFFVTlJXU3hGUVVGSkxFdEJRVTg1UWl4UFFVRlBhVUlzUzBGdVJ6TkNMRWxCYlVkelEyRXNSVUZCU1VZc1IwRkJTMGNzUlVGQlNVRXNSVUZCUlVjc1RVRkJUU3hGUVVGSFRpeEZRVUZKUlN4SFFVRkxMRWxCUVUxRExFVkJRVVZITEUxQlFVMU9MRVZCUVVsRkxFbEJSVEZHYUVJc1JVRkJTV2xDSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXViblZ0WW1WeUxuUnZMV1pwZUdWa0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGZhaWxzPXJlcXVpcmUoMzgpLGFOdW1iZXJWYWx1ZT1yZXF1aXJlKDYpLCR0b1ByZWNpc2lvbj0xLi50b1ByZWNpc2lvbjskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKCRmYWlscyhmdW5jdGlvbigpe3JldHVyblwiMVwiIT09JHRvUHJlY2lzaW9uLmNhbGwoMSx2b2lkIDApfSl8fCEkZmFpbHMoZnVuY3Rpb24oKXskdG9QcmVjaXNpb24uY2FsbCh7fSl9KSksXCJOdW1iZXJcIix7dG9QcmVjaXNpb246ZnVuY3Rpb24oaSl7dmFyIHI9YU51bWJlclZhbHVlKHRoaXMsXCJOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIVwiKTtyZXR1cm4gdm9pZCAwPT09aT8kdG9QcmVjaXNpb24uY2FsbChyKTokdG9QcmVjaXNpb24uY2FsbChyLGkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWRHOHRjSEpsWTJsemFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKR1poYVd4eklpd2lZVTUxYldKbGNsWmhiSFZsSWl3aUpIUnZVSEpsWTJsemFXOXVJaXdpZEc5UWNtVmphWE5wYjI0aUxDSlFJaXdpUmlJc0ltTmhiR3dpTENKd2NtVmphWE5wYjI0aUxDSjBhR0YwSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4UFFVRlRSQ3hSUVVGUkxGbEJRMnBDUlN4aFFVRmxSaXhSUVVGUkxIRkNRVU4yUWtjc1lVRkJaU3hIUVVGSlF5eFpRVVYyUWt3c1VVRkJVVUVzVVVGQlVVMHNSVUZCU1U0c1VVRkJVVThzUjBGQlMwd3NUMEZCVHl4WFFVVjBReXhOUVVFeVF5eE5RVUZ3UTBVc1lVRkJZVWtzUzBGQlN5eFBRVUZCTEU5QlEzQkNUaXhQUVVGUExGZEJSVnBGTEdGQlFXRkpMRXRCUVVzc1QwRkRaaXhUUVVGVkxFTkJRMkpJTEZsQlFXRXNVMEZCY1VKSkxFZEJRMmhETEVsQlFVbERMRVZCUVU5UUxHRkJRV0ZSTEV0QlFVMHNOa05CUXpsQ0xGbEJRVUVzU1VGQlQwWXNSVUZCTUVKTUxHRkJRV0ZKTEV0QlFVdEZMRWRCUVZGT0xHRkJRV0ZKTEV0QlFVdEZMRVZCUVUxRUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Ym5WdFltVnlMblJ2TFhCeVpXTnBjMmx2Ymk1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYsXCJPYmplY3RcIix7YXNzaWduOnJlcXVpcmUoNzIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1WVhOemFXZHVMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSWtZaUxDSmhjM05wWjI0aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWxHTEZGQlFWRkhMRVZCUVVjc1UwRkJWU3hEUVVGRlF5eFBRVUZSU0N4UlFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWIySnFaV04wTG1GemMybG5iaTVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiT2JqZWN0XCIse2NyZWF0ZTpyZXF1aXJlKDczKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdVkzSmxZWFJsTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0ltTnlaV0YwWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVVjBRa1FzVVVGQlVVRXNVVUZCVVVVc1JVRkJSeXhUUVVGVkxFTkJRVVZETEU5QlFWRkdMRkZCUVZFaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV2WW1wbFkzUXVZM0psWVhSbExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiFyZXF1aXJlKDMyKSxcIk9iamVjdFwiLHtkZWZpbmVQcm9wZXJ0aWVzOnJlcXVpcmUoNzUpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUnBaWE11YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aVJpSXNJbVJsWm1sdVpWQnliM0JsY25ScFpYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVsR0xGRkJRVkZITEVkQlFVdEdMRkZCUVZFc2EwSkJRVzFDTEZOQlFWVXNRMEZCUlVjc2FVSkJRV3RDU0N4UlFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWIySnFaV04wTG1SbFptbHVaUzF3Y205d1pYSjBhV1Z6TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIXJlcXVpcmUoMzIpLFwiT2JqZWN0XCIse2RlZmluZVByb3BlcnR5OnJlcXVpcmUoNzQpLmZ9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1lpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1ZaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWxHTEZGQlFWRkhMRWRCUVV0R0xGRkJRVkVzYTBKQlFXMUNMRk5CUVZVc1EwRkJSVWNzWlVGQlowSklMRkZCUVZFc1owSkJRV2RDU1NJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTWlmUT09IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpLG1ldGE9cmVxdWlyZSg2OCkub25GcmVlemU7cmVxdWlyZSg4NSkoXCJmcmVlemVcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGUmJmlzT2JqZWN0KHIpP2UobWV0YShyKSk6cn19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVabkpsWlhwbExtcHpJbDBzSW01aGJXVnpJanBiSW1selQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltMWxkR0VpTENKdmJrWnlaV1Y2WlNJc0lpUm1jbVZsZW1VaUxDSnBkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMRXRCUVU5RUxGRkJRVkVzVjBGQlYwVXNVMEZGT1VKR0xGRkJRVkVzWjBKQlFWSkJMRU5CUVhsQ0xGTkJRVlVzVTBGQlZVY3NSMEZETTBNc1QwRkJUeXhUUVVGblFrTXNSMEZEY2tJc1QwRkJUMFFzUjBGQlYwb3NVMEZCVTBzc1IwRkJUVVFzUlVGQlVVWXNTMEZCUzBjc1NVRkJUMEVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXZZbXBsWTNRdVpuSmxaWHBsTG1wekluMD0iLCJ2YXIgdG9JT2JqZWN0PXJlcXVpcmUoMTE5KSwkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yPXJlcXVpcmUoNzcpLmY7cmVxdWlyZSg4NSkoXCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihyLGUpe3JldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChyKSxlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlMbXB6SWwwc0ltNWhiV1Z6SWpwYkluUnZTVTlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0lrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpWmlJc0ltbDBJaXdpYTJWNUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHbENRVU53UWtNc01FSkJRVFJDUkN4UlFVRlJMR3RDUVVGclFrVXNSVUZGTVVSR0xGRkJRVkVzWjBKQlFWSkJMRU5CUVhsQ0xESkNRVUUwUWl4WFFVTnVSQ3hQUVVGUExGTkJRV3REUnl4RlFVRkpReXhIUVVNelF5eFBRVUZQU0N3d1FrRkJNRUpHTEZWQlFWVkpMRWRCUVV0RElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1YjJKcVpXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lKOSIsInJlcXVpcmUoODUpKFwiZ2V0T3duUHJvcGVydHlOYW1lc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHJlcXVpcmUoNzgpLmZ9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMXVZVzFsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpWmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxGRkJRVkVzWjBKQlFWSkJMRU5CUVhsQ0xITkNRVUYxUWl4WFFVTTVReXhQUVVGUFFTeFJRVUZSTEhOQ1FVRnpRa01pTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxdVlXMWxjeTVxY3lKOSIsInZhciB0b09iamVjdD1yZXF1aXJlKDEyMSksJGdldFByb3RvdHlwZU9mPXJlcXVpcmUoODEpO3JlcXVpcmUoODUpKFwiZ2V0UHJvdG90eXBlT2ZcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KHQpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlppNXFjeUpkTENKdVlXMWxjeUk2V3lKMGIwOWlhbVZqZENJc0luSmxjWFZwY21VaUxDSWtaMlYwVUhKdmRHOTBlWEJsVDJZaUxDSnBkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMR2RDUVVGclFrUXNVVUZCVVN4cFFrRkZPVUpCTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEdsQ1FVRnJRaXhYUVVONlF5eFBRVUZQTEZOQlFYZENSU3hIUVVNM1FpeFBRVUZQUkN4blFrRkJaMEpHTEZOQlFWTkhJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWIySnFaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaWZRPT0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZSg1NCk7cmVxdWlyZSg4NSkoXCJpc0V4dGVuc2libGVcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oaSl7cmV0dXJuISFpc09iamVjdChpKSYmKCFlfHxlKGkpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVhWE10WlhoMFpXNXphV0pzWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpwYzA5aWFtVmpkQ0lzSW5KbGNYVnBjbVVpTENJa2FYTkZlSFJsYm5OcFlteGxJaXdpYVhRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZOQlFWZERMRkZCUVZFc1owSkJSWFpDUVN4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4bFFVRm5RaXhUUVVGVlF5eEhRVU5xUkN4UFFVRlBMRk5CUVhOQ1F5eEhRVU16UWl4UlFVRlBTQ3hUUVVGVFJ5eE5RVUZOUkN4SFFVRm5Ra0VzUlVGQlkwTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1dlltcGxZM1F1YVhNdFpYaDBaVzV6YVdKc1pTNXFjeUo5IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpO3JlcXVpcmUoODUpKFwiaXNGcm96ZW5cIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIWlzT2JqZWN0KHIpfHwhIWUmJmUocil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1YVhNdFpuSnZlbVZ1TG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSWlScGMwWnliM3BsYmlJc0ltbDBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVWMlFrRXNVVUZCVVN4blFrRkJVa0VzUTBGQmVVSXNWMEZCV1N4VFFVRlZReXhIUVVNM1F5eFBRVUZQTEZOQlFXdENReXhIUVVOMlFpeFBRVUZQU0N4VFFVRlRSeXhOUVVGTlJDeEhRVUZaUVN4RlFVRlZReUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtOWlhbVZqZEM1cGN5MW1jbTk2Wlc0dWFuTWlmUT09IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoNTQpO3JlcXVpcmUoODUpKFwiaXNTZWFsZWRcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIWlzT2JqZWN0KHIpfHwhIWUmJmUocil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1YVhNdGMyVmhiR1ZrTG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSWlScGMxTmxZV3hsWkNJc0ltbDBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVWMlFrRXNVVUZCVVN4blFrRkJVa0VzUTBGQmVVSXNWMEZCV1N4VFFVRlZReXhIUVVNM1F5eFBRVUZQTEZOQlFXdENReXhIUVVOMlFpeFBRVUZQU0N4VFFVRlRSeXhOUVVGTlJDeEhRVUZaUVN4RlFVRlZReUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtOWlhbVZqZEM1cGN5MXpaV0ZzWldRdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJPYmplY3RcIix7aXM6cmVxdWlyZSg5OCl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVhWE11YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aWFYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVjc1UwRkJWU3hEUVVGRlF5eEhRVUZKUml4UlFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWIySnFaV04wTG1sekxtcHpJbjA9IiwidmFyIHRvT2JqZWN0PXJlcXVpcmUoMTIxKSwka2V5cz1yZXF1aXJlKDgzKTtyZXF1aXJlKDg1KShcImtleXNcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gJGtleXModG9PYmplY3QoZSkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdWEyVjVjeTVxY3lKZExDSnVZVzFsY3lJNld5SjBiMDlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0lrYTJWNWN5SXNJbWwwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVFVGQlVVUXNVVUZCVVN4clFrRkZjRUpCTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEU5QlFWRXNWMEZETDBJc1QwRkJUeXhUUVVGalJTeEhRVU51UWl4UFFVRlBSQ3hOUVVGTlJpeFRRVUZUUnlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbTlpYW1WamRDNXJaWGx6TG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZSg1NCksbWV0YT1yZXF1aXJlKDY4KS5vbkZyZWV6ZTtyZXF1aXJlKDg1KShcInByZXZlbnRFeHRlbnNpb25zXCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBlJiZpc09iamVjdChyKT9lKG1ldGEocikpOnJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1Y0hKbGRtVnVkQzFsZUhSbGJuTnBiMjV6TG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW0xbGRHRWlMQ0p2YmtaeVpXVjZaU0lzSWlSd2NtVjJaVzUwUlhoMFpXNXphVzl1Y3lJc0ltbDBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOdVFrTXNTMEZCVDBRc1VVRkJVU3hYUVVGWFJTeFRRVVU1UWtZc1VVRkJVU3huUWtGQlVrRXNRMEZCZVVJc2IwSkJRWEZDTEZOQlFWVkhMRWRCUTNSRUxFOUJRVThzVTBGQk1rSkRMRWRCUTJoRExFOUJRVTlFTEVkQlFYTkNTaXhUUVVGVFN5eEhRVUZOUkN4RlFVRnRRa1lzUzBGQlMwY3NTVUZCVDBFaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV2WW1wbFkzUXVjSEpsZG1WdWRDMWxlSFJsYm5OcGIyNXpMbXB6SW4wPSIsInZhciBpc09iamVjdD1yZXF1aXJlKDU0KSxtZXRhPXJlcXVpcmUoNjgpLm9uRnJlZXplO3JlcXVpcmUoODUpKFwic2VhbFwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZSYmaXNPYmplY3Qocik/ZShtZXRhKHIpKTpyfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdWMyVmhiQzVxY3lKZExDSnVZVzFsY3lJNld5SnBjMDlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0p0WlhSaElpd2liMjVHY21WbGVtVWlMQ0lrYzJWaGJDSXNJbWwwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zUzBGQlQwUXNVVUZCVVN4WFFVRlhSU3hUUVVVNVFrWXNVVUZCVVN4blFrRkJVa0VzUTBGQmVVSXNUMEZCVVN4VFFVRlZSeXhIUVVONlF5eFBRVUZQTEZOQlFXTkRMRWRCUTI1Q0xFOUJRVTlFTEVkQlFWTktMRk5CUVZOTExFZEJRVTFFTEVWQlFVMUdMRXRCUVV0SExFbEJRVTlCSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXViMkpxWldOMExuTmxZV3d1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk9iamVjdFwiLHtzZXRQcm90b3R5cGVPZjpyZXF1aXJlKDEwMSkuc2V0fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1YzJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKelpYUlFjbTkwYjNSNWNHVlBaaUlzSW5ObGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU4wUWtRc1VVRkJVVUVzVVVGQlVVVXNSVUZCUnl4VFFVRlZMRU5CUVVWRExHVkJRV2RDUml4UlFVRlJMR2RDUVVGblFrY2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1dlltcGxZM1F1YzJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBjbGFzc29mPXJlcXVpcmUoMjApLHRlc3Q9e307dGVzdFtyZXF1aXJlKDEzMSkoXCJ0b1N0cmluZ1RhZ1wiKV09XCJ6XCIsdGVzdCtcIlwiIT1cIltvYmplY3Qgel1cIiYmcmVxdWlyZSg5NCkoT2JqZWN0LnByb3RvdHlwZSxcInRvU3RyaW5nXCIsZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgXCIrY2xhc3NvZih0aGlzKStcIl1cIn0sITApO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdWRHOHRjM1J5YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiSW1Oc1lYTnpiMllpTENKeVpYRjFhWEpsSWl3aWRHVnpkQ0lzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGpRVU5zUWtNc1MwRkJUeXhIUVVOWVFTeExRVUZMUkN4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEdkQ1FVRnJRaXhKUVVOeVEwTXNTMEZCVHl4SlFVRk5MR05CUTJaRUxGRkJRVkVzWTBGQlVrRXNRMEZCZFVKRkxFOUJRVTlETEZWQlFWY3NWMEZCV1N4WFFVTnVSQ3hOUVVGUExGZEJRV0ZLTEZGQlFWRkxMRTFCUVZFc1RVRkJRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxtOWlhbVZqZEM1MGJ5MXpkSEpwYm1jdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJHBhcnNlRmxvYXQ9cmVxdWlyZSg4OCk7JGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5GKihwYXJzZUZsb2F0IT0kcGFyc2VGbG9hdCkse3BhcnNlRmxvYXQ6JHBhcnNlRmxvYXR9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV3WVhKelpTMW1iRzloZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlSd1lYSnpaVVpzYjJGMElpd2lSeUlzSWtZaUxDSndZWEp6WlVac2IyRjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFpRVUZqUkN4UlFVRlJMR3RDUVVVeFFrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTME1zV1VGQlkwZ3NZVUZCWXl4RFFVRkZSeXhYUVVGWlNDSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5CaGNuTmxMV1pzYjJGMExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJHBhcnNlSW50PXJlcXVpcmUoODkpOyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuRioocGFyc2VJbnQhPSRwYXJzZUludCkse3BhcnNlSW50OiRwYXJzZUludH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXdZWEp6WlMxcGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtjR0Z5YzJWSmJuUWlMQ0pISWl3aVJpSXNJbkJoY25ObFNXNTBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR2RDUVVWNFFrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTME1zVlVGQldVZ3NWMEZCV1N4RFFVRkZSeXhUUVVGVlNDSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5CaGNuTmxMV2x1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgSW50ZXJuYWwsbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LE93blByb21pc2VDYXBhYmlsaXR5LFdyYXBwZXIsTElCUkFSWT1yZXF1aXJlKDYyKSxnbG9iYWw9cmVxdWlyZSg0MyksY3R4PXJlcXVpcmUoMjgpLGNsYXNzb2Y9cmVxdWlyZSgyMCksJGV4cG9ydD1yZXF1aXJlKDM2KSxpc09iamVjdD1yZXF1aXJlKDU0KSxhRnVuY3Rpb249cmVxdWlyZSg1KSxhbkluc3RhbmNlPXJlcXVpcmUoOSksZm9yT2Y9cmVxdWlyZSg0Miksc3BlY2llc0NvbnN0cnVjdG9yPXJlcXVpcmUoMTA2KSx0YXNrPXJlcXVpcmUoMTE1KS5zZXQsbWljcm90YXNrPXJlcXVpcmUoNzApKCksbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGU9cmVxdWlyZSg3MSkscGVyZm9ybT1yZXF1aXJlKDkwKSx1c2VyQWdlbnQ9cmVxdWlyZSgxMjcpLHByb21pc2VSZXNvbHZlPXJlcXVpcmUoOTEpLFR5cGVFcnJvcj1nbG9iYWwuVHlwZUVycm9yLHByb2Nlc3M9Z2xvYmFsLnByb2Nlc3MsdmVyc2lvbnM9cHJvY2VzcyYmcHJvY2Vzcy52ZXJzaW9ucyx2OD12ZXJzaW9ucyYmdmVyc2lvbnMudjh8fFwiXCIsJFByb21pc2U9Z2xvYmFsLlByb21pc2UsaXNOb2RlPVwicHJvY2Vzc1wiPT1jbGFzc29mKHByb2Nlc3MpLGVtcHR5PWZ1bmN0aW9uKCl7fSxuZXdQcm9taXNlQ2FwYWJpbGl0eT1uZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHk9bmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZixVU0VfTkFUSVZFPSEhZnVuY3Rpb24oKXt0cnl7dmFyIGU9JFByb21pc2UucmVzb2x2ZSgxKSxyPShlLmNvbnN0cnVjdG9yPXt9KVtyZXF1aXJlKDEzMSkoXCJzcGVjaWVzXCIpXT1mdW5jdGlvbihlKXtlKGVtcHR5LGVtcHR5KX07cmV0dXJuKGlzTm9kZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50KSYmZS50aGVuKGVtcHR5KWluc3RhbmNlb2YgciYmMCE9PXY4LmluZGV4T2YoXCI2LjZcIikmJi0xPT09dXNlckFnZW50LmluZGV4T2YoXCJDaHJvbWUvNjZcIil9Y2F0Y2goZSl7fX0oKSxpc1RoZW5hYmxlPWZ1bmN0aW9uKGUpe3ZhciByO3JldHVybiEoIWlzT2JqZWN0KGUpfHxcImZ1bmN0aW9uXCIhPXR5cGVvZihyPWUudGhlbikpJiZyfSxub3RpZnk9ZnVuY3Rpb24oZSxyKXtpZighZS5fbil7ZS5fbj0hMDt2YXIgaT1lLl9jO21pY3JvdGFzayhmdW5jdGlvbigpe2Zvcih2YXIgbz1lLl92LHQ9MT09ZS5fcyxuPTAscz1mdW5jdGlvbihyKXt2YXIgaSxuLHMsYT10P3Iub2s6ci5mYWlsLGM9ci5yZXNvbHZlLGw9ci5yZWplY3QscD1yLmRvbWFpbjt0cnl7YT8odHx8KDI9PWUuX2gmJm9uSGFuZGxlVW5oYW5kbGVkKGUpLGUuX2g9MSksITA9PT1hP2k9bzoocCYmcC5lbnRlcigpLGk9YShvKSxwJiYocC5leGl0KCkscz0hMCkpLGk9PT1yLnByb21pc2U/bChUeXBlRXJyb3IoXCJQcm9taXNlLWNoYWluIGN5Y2xlXCIpKToobj1pc1RoZW5hYmxlKGkpKT9uLmNhbGwoaSxjLGwpOmMoaSkpOmwobyl9Y2F0Y2goZSl7cCYmIXMmJnAuZXhpdCgpLGwoZSl9fTtpLmxlbmd0aD5uOylzKGlbbisrXSk7ZS5fYz1bXSxlLl9uPSExLHImJiFlLl9oJiZvblVuaGFuZGxlZChlKX0pfX0sb25VbmhhbmRsZWQ9ZnVuY3Rpb24oZSl7dGFzay5jYWxsKGdsb2JhbCxmdW5jdGlvbigpe3ZhciByLGksbyx0PWUuX3Ysbj1pc1VuaGFuZGxlZChlKTtpZihuJiYocj1wZXJmb3JtKGZ1bmN0aW9uKCl7aXNOb2RlP3Byb2Nlc3MuZW1pdChcInVuaGFuZGxlZFJlamVjdGlvblwiLHQsZSk6KGk9Z2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKT9pKHtwcm9taXNlOmUscmVhc29uOnR9KToobz1nbG9iYWwuY29uc29sZSkmJm8uZXJyb3ImJm8uZXJyb3IoXCJVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25cIix0KX0pLGUuX2g9aXNOb2RlfHxpc1VuaGFuZGxlZChlKT8yOjEpLGUuX2E9dm9pZCAwLG4mJnIuZSl0aHJvdyByLnZ9KX0saXNVbmhhbmRsZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIDEhPT1lLl9oJiYwPT09KGUuX2F8fGUuX2MpLmxlbmd0aH0sb25IYW5kbGVVbmhhbmRsZWQ9ZnVuY3Rpb24oZSl7dGFzay5jYWxsKGdsb2JhbCxmdW5jdGlvbigpe3ZhciByO2lzTm9kZT9wcm9jZXNzLmVtaXQoXCJyZWplY3Rpb25IYW5kbGVkXCIsZSk6KHI9Z2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkmJnIoe3Byb21pc2U6ZSxyZWFzb246ZS5fdn0pfSl9LCRyZWplY3Q9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcztyLl9kfHwoci5fZD0hMCwocj1yLl93fHxyKS5fdj1lLHIuX3M9MixyLl9hfHwoci5fYT1yLl9jLnNsaWNlKCkpLG5vdGlmeShyLCEwKSl9LCRyZXNvbHZlPWZ1bmN0aW9uKGUpe3ZhciByLGk9dGhpcztpZighaS5fZCl7aS5fZD0hMCxpPWkuX3d8fGk7dHJ5e2lmKGk9PT1lKXRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpOyhyPWlzVGhlbmFibGUoZSkpP21pY3JvdGFzayhmdW5jdGlvbigpe3ZhciBvPXtfdzppLF9kOiExfTt0cnl7ci5jYWxsKGUsY3R4KCRyZXNvbHZlLG8sMSksY3R4KCRyZWplY3QsbywxKSl9Y2F0Y2goZSl7JHJlamVjdC5jYWxsKG8sZSl9fSk6KGkuX3Y9ZSxpLl9zPTEsbm90aWZ5KGksITEpKX1jYXRjaChlKXskcmVqZWN0LmNhbGwoe193OmksX2Q6ITF9LGUpfX19O1VTRV9OQVRJVkV8fCgkUHJvbWlzZT1mdW5jdGlvbihlKXthbkluc3RhbmNlKHRoaXMsJFByb21pc2UsXCJQcm9taXNlXCIsXCJfaFwiKSxhRnVuY3Rpb24oZSksSW50ZXJuYWwuY2FsbCh0aGlzKTt0cnl7ZShjdHgoJHJlc29sdmUsdGhpcywxKSxjdHgoJHJlamVjdCx0aGlzLDEpKX1jYXRjaChlKXskcmVqZWN0LmNhbGwodGhpcyxlKX19LChJbnRlcm5hbD1mdW5jdGlvbihlKXt0aGlzLl9jPVtdLHRoaXMuX2E9dm9pZCAwLHRoaXMuX3M9MCx0aGlzLl9kPSExLHRoaXMuX3Y9dm9pZCAwLHRoaXMuX2g9MCx0aGlzLl9uPSExfSkucHJvdG90eXBlPXJlcXVpcmUoOTMpKCRQcm9taXNlLnByb3RvdHlwZSx7dGhlbjpmdW5jdGlvbihlLHIpe3ZhciBpPW5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCRQcm9taXNlKSk7cmV0dXJuIGkub2s9XCJmdW5jdGlvblwiIT10eXBlb2YgZXx8ZSxpLmZhaWw9XCJmdW5jdGlvblwiPT10eXBlb2YgciYmcixpLmRvbWFpbj1pc05vZGU/cHJvY2Vzcy5kb21haW46dm9pZCAwLHRoaXMuX2MucHVzaChpKSx0aGlzLl9hJiZ0aGlzLl9hLnB1c2goaSksdGhpcy5fcyYmbm90aWZ5KHRoaXMsITEpLGkucHJvbWlzZX0sY2F0Y2g6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsZSl9fSksT3duUHJvbWlzZUNhcGFiaWxpdHk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgSW50ZXJuYWw7dGhpcy5wcm9taXNlPWUsdGhpcy5yZXNvbHZlPWN0eCgkcmVzb2x2ZSxlLDEpLHRoaXMucmVqZWN0PWN0eCgkcmVqZWN0LGUsMSl9LG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY9bmV3UHJvbWlzZUNhcGFiaWxpdHk9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT0kUHJvbWlzZXx8ZT09PVdyYXBwZXI/bmV3IE93blByb21pc2VDYXBhYmlsaXR5KGUpOm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShlKX0pLCRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuVyskZXhwb3J0LkYqIVVTRV9OQVRJVkUse1Byb21pc2U6JFByb21pc2V9KSxyZXF1aXJlKDEwMykoJFByb21pc2UsXCJQcm9taXNlXCIpLHJlcXVpcmUoMTAyKShcIlByb21pc2VcIiksV3JhcHBlcj1yZXF1aXJlKDI2KS5Qcm9taXNlLCRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiohVVNFX05BVElWRSxcIlByb21pc2VcIix7cmVqZWN0OmZ1bmN0aW9uKGUpe3ZhciByPW5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO3JldHVybigwLHIucmVqZWN0KShlKSxyLnByb21pc2V9fSksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKihMSUJSQVJZfHwhVVNFX05BVElWRSksXCJQcm9taXNlXCIse3Jlc29sdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkmJnRoaXM9PT1XcmFwcGVyPyRQcm9taXNlOnRoaXMsZSl9fSksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiEoVVNFX05BVElWRSYmcmVxdWlyZSg1OSkoZnVuY3Rpb24oZSl7JFByb21pc2UuYWxsKGUpLmNhdGNoKGVtcHR5KX0pKSxcIlByb21pc2VcIix7YWxsOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXMsaT1uZXdQcm9taXNlQ2FwYWJpbGl0eShyKSxvPWkucmVzb2x2ZSx0PWkucmVqZWN0LG49cGVyZm9ybShmdW5jdGlvbigpe3ZhciBpPVtdLG49MCxzPTE7Zm9yT2YoZSwhMSxmdW5jdGlvbihlKXt2YXIgYT1uKyssYz0hMTtpLnB1c2godm9pZCAwKSxzKyssci5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7Y3x8KGM9ITAsaVthXT1lLC0tc3x8byhpKSl9LHQpfSksLS1zfHxvKGkpfSk7cmV0dXJuIG4uZSYmdChuLnYpLGkucHJvbWlzZX0scmFjZTpmdW5jdGlvbihlKXt2YXIgcj10aGlzLGk9bmV3UHJvbWlzZUNhcGFiaWxpdHkociksbz1pLnJlamVjdCx0PXBlcmZvcm0oZnVuY3Rpb24oKXtmb3JPZihlLCExLGZ1bmN0aW9uKGUpe3IucmVzb2x2ZShlKS50aGVuKGkucmVzb2x2ZSxvKX0pfSk7cmV0dXJuIHQuZSYmbyh0LnYpLGkucHJvbWlzZX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV3Y205dGFYTmxMbXB6SWwwc0ltNWhiV1Z6SWpwYklrbHVkR1Z5Ym1Gc0lpd2libVYzUjJWdVpYSnBZMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVJaXdpVDNkdVVISnZiV2x6WlVOaGNHRmlhV3hwZEhraUxDSlhjbUZ3Y0dWeUlpd2lURWxDVWtGU1dTSXNJbkpsY1hWcGNtVWlMQ0puYkc5aVlXd2lMQ0pqZEhnaUxDSmpiR0Z6YzI5bUlpd2lKR1Y0Y0c5eWRDSXNJbWx6VDJKcVpXTjBJaXdpWVVaMWJtTjBhVzl1SWl3aVlXNUpibk4wWVc1alpTSXNJbVp2Y2s5bUlpd2ljM0JsWTJsbGMwTnZibk4wY25WamRHOXlJaXdpZEdGemF5SXNJbk5sZENJc0ltMXBZM0p2ZEdGemF5SXNJbTVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1VFc5a2RXeGxJaXdpY0dWeVptOXliU0lzSW5WelpYSkJaMlZ1ZENJc0luQnliMjFwYzJWU1pYTnZiSFpsSWl3aVZIbHdaVVZ5Y205eUlpd2ljSEp2WTJWemN5SXNJblpsY25OcGIyNXpJaXdpZGpnaUxDSWtVSEp2YldselpTSXNJbEJ5YjIxcGMyVWlMQ0pwYzA1dlpHVWlMQ0psYlhCMGVTSXNJbTVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1SWl3aVppSXNJbFZUUlY5T1FWUkpWa1VpTENKd2NtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0lrWmhhMlZRY205dGFYTmxJaXdpWTI5dWMzUnlkV04wYjNJaUxDSmxlR1ZqSWl3aVVISnZiV2x6WlZKbGFtVmpkR2x2YmtWMlpXNTBJaXdpZEdobGJpSXNJbWx1WkdWNFQyWWlMQ0psSWl3aWFYTlVhR1Z1WVdKc1pTSXNJbWwwSWl3aWJtOTBhV1o1SWl3aWFYTlNaV3BsWTNRaUxDSmZiaUlzSW1Ob1lXbHVJaXdpWDJNaUxDSjJZV3gxWlNJc0lsOTJJaXdpYjJzaUxDSmZjeUlzSW1raUxDSnlkVzRpTENKeVpXRmpkR2x2YmlJc0luSmxjM1ZzZENJc0ltVjRhWFJsWkNJc0ltaGhibVJzWlhJaUxDSm1ZV2xzSWl3aWNtVnFaV04wSWl3aVpHOXRZV2x1SWl3aVgyZ2lMQ0p2YmtoaGJtUnNaVlZ1YUdGdVpHeGxaQ0lzSW1WdWRHVnlJaXdpWlhocGRDSXNJbU5oYkd3aUxDSnNaVzVuZEdnaUxDSnZibFZ1YUdGdVpHeGxaQ0lzSW1OdmJuTnZiR1VpTENKMWJtaGhibVJzWldRaUxDSnBjMVZ1YUdGdVpHeGxaQ0lzSW1WdGFYUWlMQ0p2Ym5WdWFHRnVaR3hsWkhKbGFtVmpkR2x2YmlJc0luSmxZWE52YmlJc0ltVnljbTl5SWl3aVgyRWlMQ0oySWl3aWIyNXlaV3BsWTNScGIyNW9ZVzVrYkdWa0lpd2lKSEpsYW1WamRDSXNJblJvYVhNaUxDSmZaQ0lzSWw5M0lpd2ljMnhwWTJVaUxDSWtjbVZ6YjJ4MlpTSXNJbmR5WVhCd1pYSWlMQ0psZUdWamRYUnZjaUlzSW1WeWNpSXNJbkJ5YjNSdmRIbHdaU0lzSW05dVJuVnNabWxzYkdWa0lpd2liMjVTWldwbFkzUmxaQ0lzSW5CMWMyZ2lMQ0pqWVhSamFDSXNJa01pTENKSElpd2lWeUlzSWtZaUxDSlRJaXdpY2lJc0ltTmhjR0ZpYVd4cGRIa2lMQ0o0SWl3aWFYUmxjaUlzSW1Gc2JDSXNJbWwwWlhKaFlteGxJaXdpZG1Gc2RXVnpJaXdpYVc1a1pYZ2lMQ0p5WlcxaGFXNXBibWNpTENJa2FXNWtaWGdpTENKaGJISmxZV1I1UTJGc2JHVmtJaXdpY21GalpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFYZENTVUVzVTBGQlZVTXNORUpCUVRaQ1F5eHhRa0ZCYzBKRExGRkJlRUkzUkVNc1VVRkJWVU1zVVVGQlVTeGpRVU5zUWtNc1QwRkJVMFFzVVVGQlVTeGhRVU5xUWtVc1NVRkJUVVlzVVVGQlVTeFZRVU5rUnl4UlFVRlZTQ3hSUVVGUkxHTkJRMnhDU1N4UlFVRlZTaXhSUVVGUkxHRkJRMnhDU3l4VFFVRlhUQ3hSUVVGUkxHZENRVU51UWswc1ZVRkJXVTRzVVVGQlVTeHBRa0ZEY0VKUExGZEJRV0ZRTEZGQlFWRXNhMEpCUTNKQ1VTeE5RVUZSVWl4UlFVRlJMR0ZCUTJoQ1V5eHRRa0ZCY1VKVUxGRkJRVkVzTUVKQlF6ZENWU3hMUVVGUFZpeFJRVUZSTEZkQlFWZFhMRWxCUXpGQ1F5eFZRVUZaV2l4UlFVRlJMR1ZCUVZKQkxFZEJRMXBoTERKQ1FVRTJRbUlzVVVGQlVTdzJRa0ZEY2tOakxGRkJRVlZrTEZGQlFWRXNZMEZEYkVKbExGVkJRVmxtTEZGQlFWRXNhVUpCUTNCQ1owSXNaVUZCYVVKb1FpeFJRVUZSTEhOQ1FVVjZRbWxDTEZWQlFWbG9RaXhQUVVGUFowSXNWVUZEYmtKRExGRkJRVlZxUWl4UFFVRlBhVUlzVVVGRGFrSkRMRk5CUVZkRUxGTkJRVmRCTEZGQlFWRkRMRk5CUXpsQ1F5eEhRVUZMUkN4VlFVRlpRU3hUUVVGVFF5eEpRVUZOTEVkQlEyaERReXhUUVVGWGNFSXNUMEZCWTNGQ0xGRkJRM3BDUXl4UFFVRTJRaXhYUVVGd1FuQkNMRkZCUVZGbExGTkJRMnBDVFN4TlFVRlJMR0ZCUlZKRExIRkNRVUYxUWpkQ0xEUkNRVUU0UW1sQ0xESkNRVUV5UW1Fc1JVRkZhRVpETEdGQlFXVXNWMEZEYWtJc1NVRkZSU3hKUVVGSlF5eEZRVUZWVUN4VFFVRlRVU3hSUVVGUkxFZEJRek5DUXl4SFFVRmxSaXhGUVVGUlJ5eFpRVUZqTEVsQlFVa3ZRaXhSUVVGUkxGTkJRVkpCTEVOQlFXdENMRmxCUVdNc1UwRkJWV2RETEVkQlEzSkdRU3hGUVVGTFVpeE5RVUZQUVN4UlFVZGtMRTlCUVZGRUxGRkJRVEJETEcxQ1FVRjZRbFVzZDBKQlEzQkNUQ3hGUVVGUlRTeExRVUZMVml4cFFrRkJhMEpOTEVkQlNWUXNTVUZCZEVKV0xFZEJRVWRsTEZGQlFWRXNVMEZEZVVJc1NVRkJjRU53UWl4VlFVRlZiMElzVVVGQlVTeGhRVU4yUWl4TlFVRlBReXhMUVdaUkxFZEJiVUptUXl4WFFVRmhMRk5CUVZWRExFZEJRM3BDTEVsQlFVbEtMRVZCUTBvc1UwRkJUemRDTEZOQlFWTnBReXhKUVVGclF5eHRRa0ZCYmtKS0xFVkJRVTlKTEVWQlFVZEtMRkZCUVhOQ1FTeEhRVVUzUkVzc1QwRkJVeXhUUVVGVldDeEZRVUZUV1N4SFFVTTVRaXhKUVVGSldpeEZRVUZSWVN4SFFVRmFMRU5CUTBGaUxFVkJRVkZoTEVsQlFVRkJMRVZCUTFJc1NVRkJTVU1zUlVGQlVXUXNSVUZCVVdVc1IwRkRjRUl2UWl4VlFVRlZMRmRCYjBOU0xFbEJia05CTEVsQlFVbG5ReXhGUVVGUmFFSXNSVUZCVVdsQ0xFZEJRMmhDUXl4RlFVRnRRaXhIUVVGa2JFSXNSVUZCVVcxQ0xFZEJRMkpETEVWQlFVa3NSVUZEU2tNc1JVRkJUU3hUUVVGVlF5eEhRVU5zUWl4SlFVbEpReXhGUVVGUmFrSXNSVUZCVFd0Q0xFVkJTbVJETEVWQlFWVlFMRVZCUVV0SkxFVkJRVk5LTEVkQlFVdEpMRVZCUVZOSkxFdEJRM1JEZWtJc1JVRkJWWEZDTEVWQlFWTnlRaXhSUVVOdVFqQkNMRVZCUVZOTUxFVkJRVk5MTEU5QlEyeENReXhGUVVGVFRpeEZRVUZUVFN4UFFVVjBRaXhKUVVOTlNDeEhRVU5IVUN4SlFVTmxMRWRCUVdSc1FpeEZRVUZSTmtJc1NVRkJVME1zYTBKQlFXdENPVUlzUjBGRGRrTkJMRVZCUVZFMlFpeEhRVUZMTEVsQlFVRXNTVUZGV0Vvc1JVRkJhMEpHTEVWQlFWTlFMRWRCUlhwQ1dTeEhRVUZSUVN4RlFVRlBSeXhSUVVOdVFsSXNSVUZCVTBVc1JVRkJVVlFzUjBGRFlsa3NTVUZEUmtFc1JVRkJUMGtzVDBGRFVGSXNSMEZCUVVFc1NVRkhRVVFzU1VGQlYwUXNSVUZCVTNSQ0xGRkJRM1JDTWtJc1JVRkJUM1JETEZWQlFWVXNlVUpCUTFKcFFpeEZRVUZQUnl4WFFVRlhZeXhKUVVNelFtcENMRVZCUVVzeVFpeExRVUZMVml4RlFVRlJkRUlzUlVGQlV6QkNMRWRCUTNSQ01VSXNSVUZCVVhOQ0xFbEJRMVpKTEVWQlFVOVlMRWRCUTJRc1RVRkJUMUlzUjBGRFNHOUNMRWxCUVZkS0xFZEJRVkZKTEVWQlFVOUpMRTlCUXpsQ1RDeEZRVUZQYmtJc1MwRkhTazBzUlVGQlRXOUNMRTlCUVZOa0xFZEJRVWRETEVWQlFVbFFMRVZCUVUxTkxFMUJRMjVEY0VJc1JVRkJVV1VzUjBGQlN5eEhRVU5pWml4RlFVRlJZU3hKUVVGQlFTeEZRVU5LUkN4SlFVRmhXaXhGUVVGUk5rSXNTVUZCU1Uwc1dVRkJXVzVETEU5QlIzcERiVU1zV1VGQll5eFRRVUZWYmtNc1IwRkRNVUpzUWl4TFFVRkxiVVFzUzBGQlN6VkVMRTlCUVZFc1YwRkRhRUlzU1VGRlNXdEVMRVZCUVZGRkxFVkJRVk5YTEVWQlJtcENjRUlzUlVGQlVXaENMRVZCUVZGcFFpeEhRVU5vUW05Q0xFVkJRVmxETEZsQlFWbDBReXhIUVdVMVFpeEhRV0pKY1VNc1NVRkRSbVFzUlVGQlUzSkRMRkZCUVZFc1YwRkRXRk1zVDBGRFJrd3NVVUZCVVdsRUxFdEJRVXNzY1VKQlFYTkNka0lzUlVGQlQyaENMRWxCUTJwRGVVSXNSVUZCVlhCRUxFOUJRVTl0UlN4elFrRkRNVUptTEVWQlFWRXNRMEZCUlhwQ0xGRkJRVk5CTEVWQlFWTjVReXhQUVVGUmVrSXNTMEZETVVKdlFpeEZRVUZWTDBRc1QwRkJUeXRFTEZWQlFWbEJMRVZCUVZGTkxFOUJReTlEVGl4RlFVRlJUU3hOUVVGTkxEaENRVUVyUWpGQ0xFdEJTV3BFYUVJc1JVRkJVVFpDTEVkQlFVdHNReXhSUVVGVk1rTXNXVUZCV1hSRExFZEJRVmNzUlVGQlNTeEhRVU5zUkVFc1JVRkJVVEpETEZGQlFVRkJMRVZCUTA1T0xFZEJRV0ZrTEVWQlFVOW1MRVZCUVVjc1RVRkJUV1VzUlVGQlQzRkNMRXRCUjNoRFRpeFpRVUZqTEZOQlFWVjBReXhIUVVNeFFpeFBRVUZ6UWl4SlFVRm1RU3hGUVVGUk5rSXNTVUZCYTBRc1MwRkJja00zUWl4RlFVRlJNa01zU1VGQlRUTkRMRVZCUVZGbExFbEJRVWx0UWl4UlFVVndSRW9zYTBKQlFXOUNMRk5CUVZVNVFpeEhRVU5vUTJ4Q0xFdEJRVXR0UkN4TFFVRkxOVVFzVDBGQlVTeFhRVU5vUWl4SlFVRkpiMFFzUlVGRFFUbENMRTlCUTBaTUxGRkJRVkZwUkN4TFFVRkxMRzFDUVVGdlFuWkRMRWxCUTNoQ2VVSXNSVUZCVlhCRUxFOUJRVTkzUlN4eFFrRkRNVUp3UWl4RlFVRlJMRU5CUVVWNlFpeFJRVUZUUVN4RlFVRlRlVU1zVDBGQlVYcERMRVZCUVZGcFFpeFJRVWs1UXpaQ0xGRkJRVlVzVTBGQlZUbENMRWRCUTNSQ0xFbEJRVWxvUWl4RlFVRlZLME1zUzBGRFZpOURMRVZCUVZGblJDeExRVU5hYUVRc1JVRkJVV2RFTEVsQlFVRkJMRWRCUTFKb1JDeEZRVUZWUVN4RlFVRlJhVVFzU1VGQlRXcEVMRWRCUTJoQ2FVSXNSMEZCUzBRc1JVRkRZbWhDTEVWQlFWRnRRaXhIUVVGTExFVkJRMUp1UWl4RlFVRlJNa01zUzBGQlNUTkRMRVZCUVZFeVF5eEhRVUZMTTBNc1JVRkJVV1VzUjBGQlIyMURMRk5CUTNwRGRrTXNUMEZCVDFnc1IwRkJRVUVzUzBGRlRHMUVMRk5CUVZjc1UwRkJWVzVETEVkQlEzWkNMRWxCUTBsV0xFVkJSRUZPTEVWQlFWVXJReXhMUVVWa0xFbEJRVWt2UXl4RlFVRlJaMFFzUjBGQldpeERRVU5CYUVRc1JVRkJVV2RFTEVsQlFVRkJMRVZCUTFKb1JDeEZRVUZWUVN4RlFVRlJhVVFzU1VGQlRXcEVMRVZCUTNoQ0xFbEJRMFVzUjBGQlNVRXNTVUZCV1dkQ0xFVkJRVThzVFVGQlRUTkNMRlZCUVZVc2NVTkJRMjVEYVVJc1JVRkJUMGNzVjBGQlYwOHNTVUZEY0VKb1F5eFZRVUZWTEZkQlExSXNTVUZCU1c5RkxFVkJRVlVzUTBGQlJVZ3NSMEZCU1dwRUxFVkJRVk5uUkN4SlFVRkJRU3hIUVVNM1FpeEpRVU5GTVVNc1JVRkJTekpDTEV0QlFVdHFRaXhGUVVGUE1VTXNTVUZCU1RaRkxGTkJRVlZETEVWQlFWTXNSMEZCU1RsRkxFbEJRVWwzUlN4UlFVRlRUU3hGUVVGVExFbEJRMnhGTEUxQlFVODFReXhIUVVOUWMwTXNVVUZCVVdJc1MwRkJTMjFDTEVWQlFWTTFReXhQUVVreFFsSXNSVUZCVVdsQ0xFZEJRVXRFTEVWQlEySm9RaXhGUVVGUmJVSXNSMEZCU3l4RlFVTmlVaXhQUVVGUFdDeEhRVUZCUVN4SlFVVlVMRTFCUVU5UkxFZEJRMUJ6UXl4UlFVRlJZaXhMUVVGTExFTkJRVVZuUWl4SFFVRkpha1FzUlVGQlUyZEVMRWxCUVVGQkxFZEJRV0Y0UXl4TlFVdDRRMVFzWVVGRlNFNHNVMEZCVnl4VFFVRnBRalJFTEVkQlF6RkNNVVVzVjBGQlYyOUZMRXRCUVUxMFJDeFRRVE5LVUN4VlFUSktNRUlzVFVGRGNFTm1MRlZCUVZVeVJTeEhRVU5XZEVZc1UwRkJVMnRGTEV0QlFVdGpMRTFCUTJRc1NVRkRSVTBzUlVGQlV5OUZMRWxCUVVrMlJTeFRRVUZWU2l4TFFVRk5MRWRCUVVsNlJTeEpRVUZKZDBVc1VVRkJVME1zUzBGQlRTeEpRVU53UkN4TlFVRlBUeXhIUVVOUVVpeFJRVUZSWWl4TFFVRkxZeXhMUVVGTlR5eE5RVWwyUW5aR0xGTkJRVmNzVTBGQmFVSnpSaXhIUVVNeFFrNHNTMEZCUzJoRExFZEJRVXNzUjBGRFZtZERMRXRCUVV0S0xGRkJRVUZCTEVWQlEweEpMRXRCUVVzMVFpeEhRVUZMTEVWQlExWTBRaXhMUVVGTFF5eEpRVUZCUVN4RlFVTk1SQ3hMUVVGTE9VSXNVVUZCUVVFc1JVRkRURGhDTEV0QlFVdHNRaXhIUVVGTExFVkJRMVpyUWl4TFFVRkxiRU1zU1VGQlFVRXNTVUZGUlRCRExGVkJRVmx1Uml4UlFVRlJMR3RDUVVGU1FTeERRVUV5UW5GQ0xGTkJRVk00UkN4VlFVRlhMRU5CUld4RmFrUXNTMEZCVFN4VFFVRmphMFFzUlVGQllVTXNSMEZETDBJc1NVRkJTVzVETEVWQlFWZDZRaXh4UWtGQmNVSm9RaXh0UWtGQmJVSnJSU3hMUVVGTmRFUXNWMEZQTjBRc1QwRk9RVFpDTEVWQlFWTktMRWRCUVRKQ0xHMUNRVUZtYzBNc1IwRkJORUpCTEVWQlEycEViRU1zUlVGQlUwa3NTMEZCTkVJc2JVSkJRV1FyUWl4SFFVRTBRa0VzUlVGRGJrUnVReXhGUVVGVFRTeFBRVUZUYWtNc1QwRkJVMHdzVVVGQlVYTkRMRmxCUVVGQkxFVkJRMjVEYlVJc1MwRkJTMmhETEVkQlFVY3lReXhMUVVGTGNFTXNSMEZEVkhsQ0xFdEJRVXRLTEVsQlFVbEpMRXRCUVV0S0xFZEJRVWRsTEV0QlFVdHdReXhIUVVOMFFubENMRXRCUVVzMVFpeEpRVUZKVWl4UFFVRlBiME1zVFVGQlFVRXNSMEZEWW5wQ0xFVkJRVk4wUWl4VFFVZHNRakpFTEUxQlFWTXNVMEZCVlVZc1IwRkRha0lzVDBGQlQxWXNTMEZCUzNwRExGVkJRVUZCTEVWQlFXZENiVVFzVFVGSGFFTjRSaXh4UWtGQmRVSXNWMEZEY2tJc1NVRkJTU3RDTEVWQlFWVXNTVUZCU1dwRExGTkJRMnhDWjBZc1MwRkJTeTlETEZGQlFWVkJMRVZCUTJZclF5eExRVUZMT1VNc1VVRkJWVE5DTEVsQlFVazJSU3hUUVVGVmJrUXNSVUZCVXl4SFFVTjBReXRETEV0QlFVdHdRaXhQUVVGVGNrUXNTVUZCU1hkRkxGRkJRVk01UXl4RlFVRlRMRWxCUlhSRFppd3lRa0ZCTWtKaExFVkJRVWxFTEhGQ1FVRjFRaXhUUVVGVkswUXNSMEZET1VRc1QwRkJUMEVzU1VGQlRXNUZMRlZCUVZsdFJTeEpRVUZOTVVZc1VVRkRNMElzU1VGQlNVUXNjVUpCUVhGQ01rWXNSMEZEZWtJMVJpdzBRa0ZCTkVJMFJpeExRVWx3UTNCR0xGRkJRVkZCTEZGQlFWRnhSaXhGUVVGSmNrWXNVVUZCVVhOR0xFVkJRVWwwUml4UlFVRlJkVVlzUjBGQlMyaEZMRmRCUVZrc1EwRkJSVXdzVVVGQlUwUXNWMEZEY0VWeVFpeFJRVUZSTEhWQ1FVRlNRU3hEUVVGblEzRkNMRk5CTjAxc1FpeFhRVGhOWkhKQ0xGRkJRVkVzYVVKQlFWSkJMRU5CT1UxakxGZEJLMDFrUml4UlFVRlZSU3hSUVVGUkxGZEJRV3RDYzBJc1VVRkhjRU5zUWl4UlFVRlJRU3hSUVVGUmQwWXNSVUZCU1hoR0xGRkJRVkYxUml4SFFVRkxhRVVzVjBGc1RtNUNMRlZCYTA1M1F5eERRVVZ3UkRSQ0xFOUJRVkVzVTBGQlowSnpReXhIUVVOMFFpeEpRVUZKUXl4RlFVRmhja1VzY1VKQlFYRkNhMFFzVFVGSGRFTXNUMEZCUVN4RlFVWmxiVUlzUlVGQlYzWkRMRkZCUTJwQ2MwTXNSMEZEUmtNc1JVRkJWMnhGTEZkQlIzUkNlRUlzVVVGQlVVRXNVVUZCVVhkR0xFVkJRVWw0Uml4UlFVRlJkVVlzUjBGQlN6VkdMRlZCUVZrMFFpeFpRVE5PTDBJc1ZVRXlUbkZFTEVOQlJXcEZSU3hSUVVGVExGTkJRV2xDYTBVc1IwRkRlRUlzVDBGQlR5OUZMR1ZCUVdWcVFpeFRRVUZYTkVVc1QwRkJVemRGTEZGQlFWVjFRaXhUUVVGWGMwUXNTMEZCVFc5Q0xFMUJSM3BGTTBZc1VVRkJVVUVzVVVGQlVYZEdMRVZCUVVsNFJpeFJRVUZSZFVZc1NVRkJUV2hGTEZsQlFXTXpRaXhSUVVGUkxHbENRVUZTUVN4RFFVRXdRaXhUUVVGVlowY3NSMEZEYkVZelJTeFRRVUZUTkVVc1NVRkJTVVFzUjBGQllWUXNUVUZCUlM5RUxGVkJiRTlvUWl4VlFXMVBRU3hEUVVWYWVVVXNTVUZCU3l4VFFVRmhReXhIUVVOb1FpeEpRVUZKVml4RlFVRkpZaXhMUVVOS2JVSXNSVUZCWVhKRkxIRkNRVUZ4UWl0RUxFZEJRMnhETTBRc1JVRkJWV2xGTEVWQlFWZHFSU3hSUVVOeVFqQkNMRVZCUVZOMVF5eEZRVUZYZGtNc1QwRkRjRUpLTEVWQlFWTnlReXhSUVVGUkxGZEJRMjVDTEVsQlFVbHhSaXhGUVVGVExFZEJRMVJETEVWQlFWRXNSVUZEVWtNc1JVRkJXU3hGUVVOb1FqZEdMRTFCUVUwd1JpeEhRVUZCUVN4RlFVRnBRaXhUUVVGVmRFVXNSMEZETDBJc1NVRkJTVEJGTEVWQlFWTkdMRWxCUTFSSExFZEJRVUZCTEVWQlEwcEtMRVZCUVU5aUxGVkJRVUZCTEVkQlExQmxMRWxCUTBGaUxFVkJRVVV6UkN4UlFVRlJSQ3hIUVVGVFRTeExRVUZMTEZOQlFWVlZMRWRCUXpWQ01rUXNTVUZEU2tFc1IwRkJRVUVzUlVGRFFVb3NSVUZCVDBjc1IwRkJWVEZFTEVsQlEyWjVSQ3hIUVVGaGVFVXNSVUZCVVhORkxFdEJRM1JDTlVNc1QwRkZTRGhETEVkQlFXRjRSU3hGUVVGUmMwVXNTMEZIZWtJc1QwRkVTV2hFTEVWQlFVOW1MRWRCUVVkdFFpeEZRVUZQU2l4RlFVRlBjVUlzUjBGRGNrSnpRaXhGUVVGWGJFVXNVMEZIY0VJMFJTeExRVUZOTEZOQlFXTk9MRWRCUTJ4Q0xFbEJRVWxXTEVWQlFVbGlMRXRCUTBwdFFpeEZRVUZoY2tVc2NVSkJRWEZDSzBRc1IwRkRiRU5xUXl4RlFVRlRkVU1zUlVGQlYzWkRMRTlCUTNCQ1NpeEZRVUZUY2tNc1VVRkJVU3hYUVVOdVFrNHNUVUZCVFRCR0xFZEJRVUZCTEVWQlFXbENMRk5CUVZWMFJTeEhRVU12UWpSRUxFVkJRVVV6UkN4UlFVRlJSQ3hIUVVGVFRTeExRVUZMTkVRc1JVRkJWMnBGTEZGQlFWTXdRaXhQUVVsb1JDeFBRVVJKU2l4RlFVRlBaaXhIUVVGSGJVSXNSVUZCVDBvc1JVRkJUM0ZDTEVkQlEzSkNjMElzUlVGQlYyeEZJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWNISnZiV2x6WlM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxhRnVuY3Rpb249cmVxdWlyZSg1KSxhbk9iamVjdD1yZXF1aXJlKDEwKSxyQXBwbHk9KHJlcXVpcmUoNDMpLlJlZmxlY3R8fHt9KS5hcHBseSxmQXBwbHk9RnVuY3Rpb24uYXBwbHk7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiFyZXF1aXJlKDM4KShmdW5jdGlvbigpe3JBcHBseShmdW5jdGlvbigpe30pfSksXCJSZWZsZWN0XCIse2FwcGx5OmZ1bmN0aW9uKGUscCxyKXt2YXIgbj1hRnVuY3Rpb24oZSksdD1hbk9iamVjdChyKTtyZXR1cm4gckFwcGx5P3JBcHBseShuLHAsdCk6ZkFwcGx5LmNhbGwobixwLHQpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtRndjR3g1TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWVVaMWJtTjBhVzl1SWl3aVlXNVBZbXBsWTNRaUxDSnlRWEJ3YkhraUxDSlNaV1pzWldOMElpd2lZWEJ3YkhraUxDSm1RWEJ3YkhraUxDSkdkVzVqZEdsdmJpSXNJbE1pTENKR0lpd2lkR0Z5WjJWMElpd2lkR2hwYzBGeVozVnRaVzUwSWl3aVlYSm5kVzFsYm5SelRHbHpkQ0lzSWxRaUxDSk1JaXdpWTJGc2JDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1ZVRkJXVVFzVVVGQlVTeHBRa0ZEY0VKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eFJRVUZWU0N4UlFVRlJMR0ZCUVdGSkxGTkJRVmNzU1VGQlNVTXNUVUZET1VORExFOUJRVk5ETEZOQlFWTkdMRTFCUlhSQ1RpeFJRVUZSUVN4UlFVRlJVeXhGUVVGSlZDeFJRVUZSVlN4SFFVRkxWQ3hSUVVGUkxGZEJRVkpCTEVOQlFXOUNMRmRCUTI1RVJ5eFBRVUZQTEdkQ1FVTk1MRlZCUVZjc1EwRkRZa1VzVFVGQlR5eFRRVUZsU3l4RlFVRlJReXhGUVVGalF5eEhRVU14UXl4SlFVRkpReXhGUVVGSldpeFZRVUZWVXl4SFFVTmtTU3hGUVVGSldpeFRRVUZUVlN4SFFVTnFRaXhQUVVGUFZDeFBRVUZUUVN4UFFVRlBWU3hGUVVGSFJpeEZRVUZqUnl4SFFVRkxVaXhQUVVGUFV5eExRVUZMUml4RlFVRkhSaXhGUVVGalJ5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5KbFpteGxZM1F1WVhCd2JIa3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGNyZWF0ZT1yZXF1aXJlKDczKSxhRnVuY3Rpb249cmVxdWlyZSg1KSxhbk9iamVjdD1yZXF1aXJlKDEwKSxpc09iamVjdD1yZXF1aXJlKDU0KSxmYWlscz1yZXF1aXJlKDM4KSxiaW5kPXJlcXVpcmUoMTkpLHJDb25zdHJ1Y3Q9KHJlcXVpcmUoNDMpLlJlZmxlY3R8fHt9KS5jb25zdHJ1Y3QsTkVXX1RBUkdFVF9CVUc9ZmFpbHMoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiEockNvbnN0cnVjdChmdW5jdGlvbigpe30sW10sZSlpbnN0YW5jZW9mIGUpfSksQVJHU19CVUc9IWZhaWxzKGZ1bmN0aW9uKCl7ckNvbnN0cnVjdChmdW5jdGlvbigpe30pfSk7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKihORVdfVEFSR0VUX0JVR3x8QVJHU19CVUcpLFwiUmVmbGVjdFwiLHtjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSx0KXthRnVuY3Rpb24oZSksYW5PYmplY3QodCk7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDwzP2U6YUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7aWYoQVJHU19CVUcmJiFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChlLHQscik7aWYoZT09cil7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodFswXSk7Y2FzZSAyOnJldHVybiBuZXcgZSh0WzBdLHRbMV0pO2Nhc2UgMzpyZXR1cm4gbmV3IGUodFswXSx0WzFdLHRbMl0pO2Nhc2UgNDpyZXR1cm4gbmV3IGUodFswXSx0WzFdLHRbMl0sdFszXSl9dmFyIG49W251bGxdO3JldHVybiBuLnB1c2guYXBwbHkobix0KSxuZXcoYmluZC5hcHBseShlLG4pKX12YXIgYz1yLnByb3RvdHlwZSx1PWNyZWF0ZShpc09iamVjdChjKT9jOk9iamVjdC5wcm90b3R5cGUpLGk9RnVuY3Rpb24uYXBwbHkuY2FsbChlLHUsdCk7cmV0dXJuIGlzT2JqZWN0KGkpP2k6dX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbU52Ym5OMGNuVmpkQzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbU55WldGMFpTSXNJbUZHZFc1amRHbHZiaUlzSW1GdVQySnFaV04wSWl3aWFYTlBZbXBsWTNRaUxDSm1ZV2xzY3lJc0ltSnBibVFpTENKeVEyOXVjM1J5ZFdOMElpd2lVbVZtYkdWamRDSXNJbU52Ym5OMGNuVmpkQ0lzSWs1RlYxOVVRVkpIUlZSZlFsVkhJaXdpUmlJc0lrRlNSMU5mUWxWSElpd2lVeUlzSWxSaGNtZGxkQ0lzSW1GeVozTWlMQ0p1WlhkVVlYSm5aWFFpTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSWtZWEpuY3lJc0luQjFjMmdpTENKaGNIQnNlU0lzSW5CeWIzUnZJaXdpY0hKdmRHOTBlWEJsSWl3aWFXNXpkR0Z1WTJVaUxDSlBZbXBsWTNRaUxDSnlaWE4xYkhRaUxDSkdkVzVqZEdsdmJpSXNJbU5oYkd3aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEU5QlFWTkVMRkZCUVZFc2IwSkJRMnBDUlN4VlFVRlpSaXhSUVVGUkxHbENRVU53UWtjc1UwRkJWMGdzVVVGQlVTeG5Ra0ZEYmtKSkxGTkJRVmRLTEZGQlFWRXNaMEpCUTI1Q1N5eE5RVUZSVEN4UlFVRlJMRmxCUTJoQ1RTeExRVUZQVGl4UlFVRlJMRmRCUTJaUExGbEJRV05RTEZGQlFWRXNZVUZCWVZFc1UwRkJWeXhKUVVGSlF5eFZRVWxzUkVNc1pVRkJhVUpNTEUxQlFVMHNWMEZEZWtJc1UwRkJVMDBzUzBGRFZDeFJRVUZUU2l4WFFVRlhMR0ZCUVRaQ0xFZEJRVWxKTEdGQlFXTkJMRXRCUldwRlF5eFZRVUZaVUN4TlFVRk5MRmRCUTNCQ1JTeFhRVUZYTEdkQ1FVZGlVaXhSUVVGUlFTeFJRVUZSWXl4RlFVRkpaQ3hSUVVGUldTeEhRVUZMUkN4blFrRkJhMEpGTEZWQlFWY3NWVUZCVnl4RFFVTjJSVWdzVlVGQlZ5eFRRVUZ0UWtzc1JVRkJVVU1zUjBGRGNFTmlMRlZCUVZWWkxFZEJRMVpZTEZOQlFWTlpMRWRCUTFRc1NVRkJTVU1zUlVGQldVTXNWVUZCVlVNc1QwRkJVeXhGUVVGSlNpeEZRVUZUV2l4VlFVRlZaU3hWUVVGVkxFbEJRM0JGTEVkQlFVbE1MRmRCUVdGR0xHVkJRV2RDTEU5QlFVOUlMRmRCUVZkUExFVkJRVkZETEVWQlFVMURMRWRCUTJwRkxFZEJRVWxHTEVkQlFWVkZMRVZCUVZjc1EwRkZka0lzVDBGQlVVUXNSVUZCUzBjc1VVRkRXQ3hMUVVGTExFVkJRVWNzVDBGQlR5eEpRVUZKU2l4RlFVTnVRaXhMUVVGTExFVkJRVWNzVDBGQlR5eEpRVUZKUVN4RlFVRlBReXhGUVVGTExFbEJReTlDTEV0QlFVc3NSVUZCUnl4UFFVRlBMRWxCUVVsRUxFVkJRVTlETEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhKUVVONFF5eExRVUZMTEVWQlFVY3NUMEZCVHl4SlFVRkpSQ3hGUVVGUFF5eEZRVUZMTEVkQlFVbEJMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEpRVU5xUkN4TFFVRkxMRVZCUVVjc1QwRkJUeXhKUVVGSlJDeEZRVUZQUXl4RlFVRkxMRWRCUVVsQkxFVkJRVXNzUjBGQlNVRXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFbEJSelZFTEVsQlFVbEpMRVZCUVZFc1EwRkJReXhOUVVWaUxFOUJSRUZCTEVWQlFVMURMRXRCUVV0RExFMUJRVTFHTEVWQlFVOUtMRWRCUTJwQ0xFbEJRVXRVTEV0QlFVdGxMRTFCUVUxUUxFVkJRVkZMTEVsQlIycERMRWxCUVVsSExFVkJRVkZPTEVWQlFWVlBMRlZCUTJ4Q1F5eEZRVUZYZGtJc1QwRkJUMGNzVTBGQlUydENMRWRCUVZOQkxFVkJRVkZITEU5QlFVOUdMRmRCUTI1RVJ5eEZRVUZUUXl4VFFVRlRUaXhOUVVGTlR5eExRVUZMWkN4RlFVRlJWU3hGUVVGVlZDeEhRVU51UkN4UFFVRlBXQ3hUUVVGVGMwSXNSMEZCVlVFc1JVRkJVMFlpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXlaV1pzWldOMExtTnZibk4wY25WamRDNXFjeUo5IiwidmFyIGRQPXJlcXVpcmUoNzQpLCRleHBvcnQ9cmVxdWlyZSgzNiksYW5PYmplY3Q9cmVxdWlyZSgxMCksdG9QcmltaXRpdmU9cmVxdWlyZSgxMjIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRipyZXF1aXJlKDM4KShmdW5jdGlvbigpe1JlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwxLHt2YWx1ZToxfSksMSx7dmFsdWU6Mn0pfSksXCJSZWZsZWN0XCIse2RlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUscix0KXthbk9iamVjdChlKSxyPXRvUHJpbWl0aXZlKHIsITApLGFuT2JqZWN0KHQpO3RyeXtyZXR1cm4gZFAuZihlLHIsdCksITB9Y2F0Y2goZSl7cmV0dXJuITF9fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtUmxabWx1WlMxd2NtOXdaWEowZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUprVUNJc0luSmxjWFZwY21VaUxDSWtaWGh3YjNKMElpd2lZVzVQWW1wbFkzUWlMQ0owYjFCeWFXMXBkR2wyWlNJc0lsTWlMQ0pHSWl3aVVtVm1iR1ZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVppSXNJblpoYkhWbElpd2lkR0Z5WjJWMElpd2ljSEp2Y0dWeWRIbExaWGtpTENKaGRIUnlhV0oxZEdWeklpd2laU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNSMEZCUzBNc1VVRkJVU3huUWtGRFlrTXNVVUZCVlVRc1VVRkJVU3hoUVVOc1FrVXNVMEZCVjBZc1VVRkJVU3huUWtGRGJrSkhMRmxCUVdOSUxGRkJRVkVzYlVKQlJ6RkNReXhSUVVGUlFTeFJRVUZSUnl4RlFVRkpTQ3hSUVVGUlNTeEZRVUZKVEN4UlFVRlJMRmRCUVZKQkxFTkJRVzlDTEZkQlJXeEVUU3hSUVVGUlF5eGxRVUZsVWl4SFFVRkhVeXhGUVVGRkxFZEJRVWtzUlVGQlJ5eERRVUZGUXl4TlFVRlBMRWxCUVUwc1JVRkJSeXhEUVVGRlFTeE5RVUZQTEUxQlF6VkVMRlZCUVZjc1EwRkRZa1lzWlVGQlowSXNVMEZCZDBKSExFVkJRVkZETEVWQlFXRkRMRWRCUXpORVZpeFRRVUZUVVN4SFFVTlVReXhGUVVGalVpeFpRVUZaVVN4SFFVRkJRU3hIUVVNeFFsUXNVMEZCVTFVc1IwRkRWQ3hKUVVWRkxFOUJSRUZpTEVkQlFVZFRMRVZCUVVWRkxFVkJRVkZETEVWQlFXRkRMRWxCUVVGQkxFVkJSVEZDTEUxQlFVOURMRWRCUTFBc1QwRkJRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuSmxabXhsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblI1TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxnT1BEPXJlcXVpcmUoNzcpLmYsYW5PYmplY3Q9cmVxdWlyZSgxMCk7JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse2RlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKGUscil7dmFyIHQ9Z09QRChhbk9iamVjdChlKSxyKTtyZXR1cm4hKHQmJiF0LmNvbmZpZ3VyYWJsZSkmJmRlbGV0ZSBlW3JdfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtUmxiR1YwWlMxd2NtOXdaWEowZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1kUFVFUWlMQ0ptSWl3aVlXNVBZbXBsWTNRaUxDSlRJaXdpWkdWc1pYUmxVSEp2Y0dWeWRIa2lMQ0owWVhKblpYUWlMQ0p3Y205d1pYSjBlVXRsZVNJc0ltUmxjMk1pTENKamIyNW1hV2QxY21GaWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExFdEJRVTlFTEZGQlFWRXNhMEpCUVd0Q1JTeEZRVU5xUTBNc1UwRkJWMGdzVVVGQlVTeG5Ra0ZGZGtKRUxGRkJRVkZCTEZGQlFWRkxMRVZCUVVjc1ZVRkJWeXhEUVVNMVFrTXNaVUZCWjBJc1UwRkJkMEpETEVWQlFWRkRMRWRCUXpsRExFbEJRVWxETEVWQlFVOVFMRXRCUVV0RkxGTkJRVk5ITEVkQlFWTkRMRWRCUTJ4RExGRkJRVTlETEVsQlFWTkJMRVZCUVV0RExITkNRVUU0UWtnc1JVRkJUME1pTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXlaV1pzWldOMExtUmxiR1YwWlMxd2NtOXdaWEowZVM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxhbk9iamVjdD1yZXF1aXJlKDEwKSxFbnVtZXJhdGU9ZnVuY3Rpb24oZSl7dGhpcy5fdD1hbk9iamVjdChlKSx0aGlzLl9pPTA7dmFyIHQscj10aGlzLl9rPVtdO2Zvcih0IGluIGUpci5wdXNoKHQpfTtyZXF1aXJlKDU3KShFbnVtZXJhdGUsXCJPYmplY3RcIixmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5faztkb3tpZih0aGlzLl9pPj10Lmxlbmd0aClyZXR1cm57dmFsdWU6dm9pZCAwLGRvbmU6ITB9fXdoaWxlKCEoKGU9dFt0aGlzLl9pKytdKWluIHRoaXMuX3QpKTtyZXR1cm57dmFsdWU6ZSxkb25lOiExfX0pLCRleHBvcnQoJGV4cG9ydC5TLFwiUmVmbGVjdFwiLHtlbnVtZXJhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBFbnVtZXJhdGUoZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG1WdWRXMWxjbUYwWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1GdVQySnFaV04wSWl3aVJXNTFiV1Z5WVhSbElpd2lhWFJsY21GMFpXUWlMQ0owYUdseklpd2lYM1FpTENKZmFTSXNJbXRsZVNJc0ltdGxlWE1pTENKZmF5SXNJbkIxYzJnaUxDSnNaVzVuZEdnaUxDSjJZV3gxWlNJc0ltUnZibVVpTENKVElpd2laVzUxYldWeVlYUmxJaXdpZEdGeVoyVjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZOQlFWZEVMRkZCUVZFc1owSkJRMjVDUlN4VlFVRlpMRk5CUVZWRExFZEJRM2hDUXl4TFFVRkxReXhIUVVGTFNpeFRRVUZUUlN4SFFVTnVRa01zUzBGQlMwVXNSMEZCU3l4RlFVTldMRWxCUTBsRExFVkJSRUZETEVWQlFVOUtMRXRCUVV0TExFZEJRVXNzUjBGRmNrSXNTVUZCUzBZc1MwRkJUMG9zUlVGQlZVc3NSVUZCUzBVc1MwRkJTMGdzU1VGRmJFTlFMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNSU3hWUVVGWExGTkJRVlVzVjBGRE4wTXNTVUZGU1Vzc1JVRkVRVU1zUlVGRVQwb3NTMEZEUzBzc1IwRkZhRUlzUjBGRFJTeEhRVXBUVEN4TFFVbEJSU3hKUVVGTlJTeEZRVUZMUnl4UFFVRlJMRTFCUVU4c1EwRkJSVU1zVjBGQlFVRXNSVUZCYTBKRExFMUJRVUZCTEZsQlF6ZERUaXhGUVVGTlF5eEZRVXhRU2l4TFFVdHBRa1VzVTBGTWFrSkdMRXRCUzJkRFF5eExRVU16UXl4TlFVRlBMRU5CUVVWUExFMUJRVTlNTEVWQlFVdE5MRTFCUVVGQkxFdEJSM1pDWkN4UlFVRlJRU3hSUVVGUlpTeEZRVUZITEZWQlFWY3NRMEZETlVKRExGVkJRVmNzVTBGQmJVSkRMRWRCUXpWQ0xFOUJRVThzU1VGQlNXUXNWVUZCVldNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV5Wldac1pXTjBMbVZ1ZFcxbGNtRjBaUzVxY3lKOSIsInZhciBnT1BEPXJlcXVpcmUoNzcpLCRleHBvcnQ9cmVxdWlyZSgzNiksYW5PYmplY3Q9cmVxdWlyZSgxMCk7JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihlLHIpe3JldHVybiBnT1BELmYoYW5PYmplY3QoZSkscil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG1kbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpuVDFCRUlpd2ljbVZ4ZFdseVpTSXNJaVJsZUhCdmNuUWlMQ0poYms5aWFtVmpkQ0lzSWxNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSjBZWEpuWlhRaUxDSndjbTl3WlhKMGVVdGxlU0lzSW1ZaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEV0QlFVOURMRkZCUVZFc2EwSkJRMlpETEZGQlFWVkVMRkZCUVZFc1lVRkRiRUpGTEZOQlFWZEdMRkZCUVZFc1owSkJSWFpDUXl4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZWQlFWY3NRMEZETlVKRExIbENRVUV3UWl4VFFVRnJRME1zUlVGQlVVTXNSMEZEYkVVc1QwRkJUMUFzUzBGQlMxRXNSVUZCUlV3c1UwRkJVMGNzUjBGQlUwTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1eVpXWnNaV04wTG1kbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxnZXRQcm90bz1yZXF1aXJlKDgxKSxhbk9iamVjdD1yZXF1aXJlKDEwKTskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7Z2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KGUpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbWRsZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSm5aWFJRY205MGJ5SXNJbUZ1VDJKcVpXTjBJaXdpVXlJc0ltZGxkRkJ5YjNSdmRIbHdaVTltSWl3aWRHRnlaMlYwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhUUVVGWFJDeFJRVUZSTEdsQ1FVTnVRa1VzVTBGQlYwWXNVVUZCVVN4blFrRkZka0pFTEZGQlFWRkJMRkZCUVZGSkxFVkJRVWNzVlVGQlZ5eERRVU0xUWtNc1pVRkJaMElzVTBGQmQwSkRMRWRCUTNSRExFOUJRVTlLTEZOQlFWTkRMRk5CUVZOSElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Y21WbWJHVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1MbXB6SW4wPSIsInZhciBnT1BEPXJlcXVpcmUoNzcpLGdldFByb3RvdHlwZU9mPXJlcXVpcmUoODEpLGhhcz1yZXF1aXJlKDQ0KSwkZXhwb3J0PXJlcXVpcmUoMzYpLGlzT2JqZWN0PXJlcXVpcmUoNTQpLGFuT2JqZWN0PXJlcXVpcmUoMTApOyRleHBvcnQoJGV4cG9ydC5TLFwiUmVmbGVjdFwiLHtnZXQ6ZnVuY3Rpb24gZSh0LHIpe3ZhciBvLGksYT1hcmd1bWVudHMubGVuZ3RoPDM/dDphcmd1bWVudHNbMl07cmV0dXJuIGFuT2JqZWN0KHQpPT09YT90W3JdOihvPWdPUEQuZih0LHIpKT9oYXMobyxcInZhbHVlXCIpP28udmFsdWU6dm9pZCAwIT09by5nZXQ/by5nZXQuY2FsbChhKTp2b2lkIDA6aXNPYmplY3QoaT1nZXRQcm90b3R5cGVPZih0KSk/ZShpLHIsYSk6dm9pZCAwfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtZGxkQzVxY3lKZExDSnVZVzFsY3lJNld5Sm5UMUJFSWl3aWNtVnhkV2x5WlNJc0ltZGxkRkJ5YjNSdmRIbHdaVTltSWl3aWFHRnpJaXdpSkdWNGNHOXlkQ0lzSW1selQySnFaV04wSWl3aVlXNVBZbXBsWTNRaUxDSlRJaXdpWjJWMElpd2lkR0Z5WjJWMElpd2ljSEp2Y0dWeWRIbExaWGtpTENKa1pYTmpJaXdpY0hKdmRHOGlMQ0p5WldObGFYWmxjaUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0ltWWlMQ0oyWVd4MVpTSXNJbU5oYkd3aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEV0QlFVOURMRkZCUVZFc2EwSkJRMlpETEdWQlFXbENSQ3hSUVVGUkxHbENRVU42UWtVc1NVRkJUVVlzVVVGQlVTeFZRVU5rUnl4UlFVRlZTQ3hSUVVGUkxHRkJRMnhDU1N4VFFVRlhTaXhSUVVGUkxHZENRVU51UWtzc1UwRkJWMHdzVVVGQlVTeG5Ra0ZqZGtKSExGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1ZVRkJWeXhEUVVGRlF5eEpRVnBvUXl4VFFVRlRRU3hGUVVGSlF5eEZRVUZSUXl4SFFVTnVRaXhKUVVOSlF5eEZRVUZOUXl4RlFVUk9ReXhGUVVGWFF5eFZRVUZWUXl4UFFVRlRMRVZCUVVsT0xFVkJRVk5MTEZWQlFWVXNSMEZGZWtRc1QwRkJTVklzVTBGQlUwY3NTMEZCV1Vrc1JVRkJhVUpLTEVWQlFVOURMRWxCUXpkRFF5eEZRVUZQV0N4TFFVRkxaMElzUlVGQlJWQXNSVUZCVVVNc1NVRkJjVUpRTEVsQlFVbFJMRVZCUVUwc1UwRkRja1JCTEVWQlFVdE5MRmRCUVVGQkxFbEJRMHhPTEVWQlFVdElMRWxCUTBoSExFVkJRVXRJTEVsQlFVbFZMRXRCUVV0TUxGRkJRVUZCTEVWQlJXaENVaXhUUVVGVFR5eEZRVUZSVml4bFFVRmxUeXhKUVVGcFFrUXNSVUZCU1Vrc1JVRkJUMFlzUlVGQllVY3NVVUZCUVVFaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV5Wldac1pXTjBMbWRsZEM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7aGFzOmZ1bmN0aW9uKGUscil7cmV0dXJuIHIgaW4gZX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbWhoY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSm9ZWE1pTENKMFlYSm5aWFFpTENKd2NtOXdaWEowZVV0bGVTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVVYwUWtRc1VVRkJVVUVzVVVGQlVVVXNSVUZCUnl4VlFVRlhMRU5CUXpWQ1F5eEpRVUZMTEZOQlFXRkRMRVZCUVZGRExFZEJRM2hDTEU5QlFVOUJMRXRCUVdWRUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Y21WbWJHVmpkQzVvWVhNdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksYW5PYmplY3Q9cmVxdWlyZSgxMCksJGlzRXh0ZW5zaWJsZT1PYmplY3QuaXNFeHRlbnNpYmxlOyRleHBvcnQoJGV4cG9ydC5TLFwiUmVmbGVjdFwiLHtpc0V4dGVuc2libGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGFuT2JqZWN0KGUpLCEkaXNFeHRlbnNpYmxlfHwkaXNFeHRlbnNpYmxlKGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtbHpMV1Y0ZEdWdWMybGliR1V1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0poYms5aWFtVmpkQ0lzSWlScGMwVjRkR1Z1YzJsaWJHVWlMQ0pQWW1wbFkzUWlMQ0pwYzBWNGRHVnVjMmxpYkdVaUxDSlRJaXdpZEdGeVoyVjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNZMEZCWjBKRExFOUJRVTlETEdGQlJUTkNUQ3hSUVVGUlFTeFJRVUZSVFN4RlFVRkhMRlZCUVZjc1EwRkROVUpFTEdGQlFXTXNVMEZCYzBKRkxFZEJSV3hETEU5QlJFRk1MRk5CUVZOTExFbEJRMFpLTEdWQlFXZENRU3hqUVVGalNTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5KbFpteGxZM1F1YVhNdFpYaDBaVzV6YVdKc1pTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse293bktleXM6cmVxdWlyZSg4Nyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbTkzYmkxclpYbHpMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW05M2JrdGxlWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVY3NWVUZCVnl4RFFVRkZReXhSUVVGVFJpeFJRVUZSSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVjbVZtYkdWamRDNXZkMjR0YTJWNWN5NXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksYW5PYmplY3Q9cmVxdWlyZSgxMCksJHByZXZlbnRFeHRlbnNpb25zPU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uczskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7cHJldmVudEV4dGVuc2lvbnM6ZnVuY3Rpb24oZSl7YW5PYmplY3QoZSk7dHJ5e3JldHVybiAkcHJldmVudEV4dGVuc2lvbnMmJiRwcmV2ZW50RXh0ZW5zaW9ucyhlKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG5CeVpYWmxiblF0WlhoMFpXNXphVzl1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1GdVQySnFaV04wSWl3aUpIQnlaWFpsYm5SRmVIUmxibk5wYjI1eklpd2lUMkpxWldOMElpd2ljSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTWlMQ0pUSWl3aWRHRnlaMlYwSWl3aVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxHMUNRVUZ4UWtNc1QwRkJUME1zYTBKQlJXaERUQ3hSUVVGUlFTeFJRVUZSVFN4RlFVRkhMRlZCUVZjc1EwRkROVUpFTEd0Q1FVRnRRaXhUUVVFeVFrVXNSMEZETlVOTUxGTkJRVk5MTEVkQlExUXNTVUZGUlN4UFFVUkpTaXh2UWtGQmIwSkJMRzFDUVVGdFFra3NTVUZCUVVFc1JVRkZNME1zVFVGQlQwTXNSMEZEVUN4UFFVRkJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWNtVm1iR1ZqZEM1d2NtVjJaVzUwTFdWNGRHVnVjMmx2Ym5NdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksc2V0UHJvdG89cmVxdWlyZSgxMDEpO3NldFByb3RvJiYkZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7c2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCxlKXtzZXRQcm90by5jaGVjayh0LGUpO3RyeXtyZXR1cm4gc2V0UHJvdG8uc2V0KHQsZSksITB9Y2F0Y2godCl7cmV0dXJuITF9fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExuTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKelpYUlFjbTkwYnlJc0lsTWlMQ0p6WlhSUWNtOTBiM1I1Y0dWUFppSXNJblJoY21kbGRDSXNJbkJ5YjNSdklpd2lZMmhsWTJzaUxDSnpaWFFpTENKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4VFFVRlhSQ3hSUVVGUkxHZENRVVZ1UWtNc1ZVRkJWVVlzVVVGQlVVRXNVVUZCVVVjc1JVRkJSeXhWUVVGWExFTkJRekZEUXl4bFFVRm5RaXhUUVVGM1FrTXNSVUZCVVVNc1IwRkRPVU5LTEZOQlFWTkxMRTFCUVUxR0xFVkJRVkZETEVkQlEzWkNMRWxCUlVVc1QwRkVRVW9zVTBGQlUwMHNTVUZCU1Vnc1JVRkJVVU1zU1VGQlFVRXNSVUZGY2tJc1RVRkJUMGNzUjBGRFVDeFBRVUZCSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVjbVZtYkdWamRDNXpaWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpJbjA9IiwidmFyIGRQPXJlcXVpcmUoNzQpLGdPUEQ9cmVxdWlyZSg3NyksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZSg4MSksaGFzPXJlcXVpcmUoNDQpLCRleHBvcnQ9cmVxdWlyZSgzNiksY3JlYXRlRGVzYz1yZXF1aXJlKDkyKSxhbk9iamVjdD1yZXF1aXJlKDEwKSxpc09iamVjdD1yZXF1aXJlKDU0KTskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7c2V0OmZ1bmN0aW9uIGUocix0LGkpe3ZhciBjLG8sYT1hcmd1bWVudHMubGVuZ3RoPDQ/cjphcmd1bWVudHNbM10scz1nT1BELmYoYW5PYmplY3QociksdCk7aWYoIXMpe2lmKGlzT2JqZWN0KG89Z2V0UHJvdG90eXBlT2YocikpKXJldHVybiBlKG8sdCxpLGEpO3M9Y3JlYXRlRGVzYygwKX1pZihoYXMocyxcInZhbHVlXCIpKXtpZighMT09PXMud3JpdGFibGV8fCFpc09iamVjdChhKSlyZXR1cm4hMTtpZihjPWdPUEQuZihhLHQpKXtpZihjLmdldHx8Yy5zZXR8fCExPT09Yy53cml0YWJsZSlyZXR1cm4hMTtjLnZhbHVlPWksZFAuZihhLHQsYyl9ZWxzZSBkUC5mKGEsdCxjcmVhdGVEZXNjKDAsaSkpO3JldHVybiEwfXJldHVybiB2b2lkIDAhPT1zLnNldCYmKHMuc2V0LmNhbGwoYSxpKSwhMCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG5ObGRDNXFjeUpkTENKdVlXMWxjeUk2V3lKa1VDSXNJbkpsY1hWcGNtVWlMQ0puVDFCRUlpd2laMlYwVUhKdmRHOTBlWEJsVDJZaUxDSm9ZWE1pTENJa1pYaHdiM0owSWl3aVkzSmxZWFJsUkdWell5SXNJbUZ1VDJKcVpXTjBJaXdpYVhOUFltcGxZM1FpTENKVElpd2ljMlYwSWl3aWRHRnlaMlYwSWl3aWNISnZjR1Z5ZEhsTFpYa2lMQ0pXSWl3aVpYaHBjM1JwYm1kRVpYTmpjbWx3ZEc5eUlpd2ljSEp2ZEc4aUxDSnlaV05sYVhabGNpSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW05M2JrUmxjMk1pTENKbUlpd2lkM0pwZEdGaWJHVWlMQ0puWlhRaUxDSjJZV3gxWlNJc0ltTmhiR3dpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRWRCUVV0RExGRkJRVkVzWjBKQlEySkRMRXRCUVU5RUxGRkJRVkVzYTBKQlEyWkZMR1ZCUVdsQ1JpeFJRVUZSTEdsQ1FVTjZRa2NzU1VGQlRVZ3NVVUZCVVN4VlFVTmtTU3hSUVVGVlNpeFJRVUZSTEdGQlEyeENTeXhYUVVGaFRDeFJRVUZSTEc5Q1FVTnlRazBzVTBGQlYwNHNVVUZCVVN4blFrRkRia0pQTEZOQlFWZFFMRkZCUVZFc1owSkJkMEoyUWtrc1VVRkJVVUVzVVVGQlVVa3NSVUZCUnl4VlFVRlhMRU5CUVVWRExFbEJkRUpvUXl4VFFVRlRRU3hGUVVGSlF5eEZRVUZSUXl4RlFVRmhReXhIUVVOb1F5eEpRVVZKUXl4RlFVRnZRa01zUlVGR2NFSkRMRVZCUVZkRExGVkJRVlZETEU5QlFWTXNSVUZCU1ZBc1JVRkJVMDBzVlVGQlZTeEhRVU55UkVVc1JVRkJWV3BDTEV0QlFVdHJRaXhGUVVGRllpeFRRVUZUU1N4SFFVRlRReXhIUVVWMlF5eEpRVUZMVHl4RlFVRlRMRU5CUTFvc1IwRkJTVmdzVTBGQlUwOHNSVUZCVVZvc1pVRkJaVkVzU1VGRGJFTXNUMEZCVDBRc1JVRkJTVXNzUlVGQlQwZ3NSVUZCWVVNc1JVRkJSMGNzUjBGRmNFTkhMRVZCUVZWaUxGZEJRVmNzUjBGRmRrSXNSMEZCU1VZc1NVRkJTV1VzUlVGQlV5eFRRVUZWTEVOQlEzcENMRWxCUVVFc1NVRkJTVUVzUlVGQlVVVXNWMEZCZFVKaUxGTkJRVk5STEVkQlFWY3NUMEZCUVN4RlFVTjJSQ3hIUVVGSlJpeEZRVUZ4UWxvc1MwRkJTMnRDTEVWQlFVVktMRVZCUVZWS0xFZEJRV01zUTBGRGRFUXNSMEZCU1VVc1JVRkJiVUpSTEV0QlFVOVNMRVZCUVcxQ1NpeE5RVUZCUVN4SlFVRlBTU3hGUVVGdFFrOHNVMEZCYjBJc1QwRkJRU3hGUVVNdlJsQXNSVUZCYlVKVExFMUJRVkZXTEVWQlF6TkNZaXhIUVVGSGIwSXNSVUZCUlVvc1JVRkJWVW9zUlVGQllVVXNVVUZEZGtKa0xFZEJRVWR2UWl4RlFVRkZTaXhGUVVGVlNpeEZRVUZoVGl4WFFVRlhMRVZCUVVkUExFbEJRMnBFTEU5QlFVRXNSVUZGUml4WlFVRkJMRWxCUVU5TkxFVkJRVkZVTEUxQlFUWkNVeXhGUVVGUlZDeEpRVUZKWXl4TFFVRkxVaXhGUVVGVlNDeEpRVUZCUVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbkpsWm14bFkzUXVjMlYwTG1wekluMD0iLCJ2YXIgZ2xvYmFsPXJlcXVpcmUoNDMpLGluaGVyaXRJZlJlcXVpcmVkPXJlcXVpcmUoNDgpLGRQPXJlcXVpcmUoNzQpLmYsZ09QTj1yZXF1aXJlKDc5KS5mLGlzUmVnRXhwPXJlcXVpcmUoNTUpLCRmbGFncz1yZXF1aXJlKDQwKSwkUmVnRXhwPWdsb2JhbC5SZWdFeHAsQmFzZT0kUmVnRXhwLHByb3RvPSRSZWdFeHAucHJvdG90eXBlLHJlMT0vYS9nLHJlMj0vYS9nLENPUlJFQ1RfTkVXPW5ldyAkUmVnRXhwKHJlMSkhPT1yZTE7aWYocmVxdWlyZSgzMikmJighQ09SUkVDVF9ORVd8fHJlcXVpcmUoMzgpKGZ1bmN0aW9uKCl7cmV0dXJuIHJlMltyZXF1aXJlKDEzMSkoXCJtYXRjaFwiKV09ITEsJFJlZ0V4cChyZTEpIT1yZTF8fCRSZWdFeHAocmUyKT09cmUyfHxcIi9hL2lcIiE9JFJlZ0V4cChyZTEsXCJpXCIpfSkpKXskUmVnRXhwPWZ1bmN0aW9uKGUscil7dmFyIGk9dGhpcyBpbnN0YW5jZW9mICRSZWdFeHAsZz1pc1JlZ0V4cChlKSxvPXZvaWQgMD09PXI7cmV0dXJuIWkmJmcmJmUuY29uc3RydWN0b3I9PT0kUmVnRXhwJiZvP2U6aW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVc/bmV3IEJhc2UoZyYmIW8/ZS5zb3VyY2U6ZSxyKTpCYXNlKChnPWUgaW5zdGFuY2VvZiAkUmVnRXhwKT9lLnNvdXJjZTplLGcmJm8/JGZsYWdzLmNhbGwoZSk6ciksaT90aGlzOnByb3RvLCRSZWdFeHApfTtmb3IodmFyIHByb3h5PWZ1bmN0aW9uKGUpe2UgaW4gJFJlZ0V4cHx8ZFAoJFJlZ0V4cCxlLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJhc2VbZV19LHNldDpmdW5jdGlvbihyKXtCYXNlW2VdPXJ9fSl9LGtleXM9Z09QTihCYXNlKSxpPTA7a2V5cy5sZW5ndGg+aTspcHJveHkoa2V5c1tpKytdKTtwcm90by5jb25zdHJ1Y3Rvcj0kUmVnRXhwLCRSZWdFeHAucHJvdG90eXBlPXByb3RvLHJlcXVpcmUoOTQpKGdsb2JhbCxcIlJlZ0V4cFwiLCRSZWdFeHApfXJlcXVpcmUoMTAyKShcIlJlZ0V4cFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVZMjl1YzNSeWRXTjBiM0l1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2ljbVZ4ZFdseVpTSXNJbWx1YUdWeWFYUkpabEpsY1hWcGNtVmtJaXdpWkZBaUxDSm1JaXdpWjA5UVRpSXNJbWx6VW1WblJYaHdJaXdpSkdac1lXZHpJaXdpSkZKbFowVjRjQ0lzSWxKbFowVjRjQ0lzSWtKaGMyVWlMQ0p3Y205MGJ5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbE1TSXNJbkpsTWlJc0lrTlBVbEpGUTFSZlRrVlhJaXdpY0NJc0luUnBVa1VpTENKMGFHbHpJaXdpY0dsU1JTSXNJbVpwVlNJc0ltTnZibk4wY25WamRHOXlJaXdpYzI5MWNtTmxJaXdpWTJGc2JDSXNJbkJ5YjNoNUlpd2lhMlY1SWl3aVkyOXVabWxuZFhKaFlteGxJaXdpWjJWMElpd2ljMlYwSWl3aWFYUWlMQ0pyWlhseklpd2lhU0lzSW14bGJtZDBhQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNUMEZCVTBNc1VVRkJVU3hoUVVOcVFrTXNhMEpCUVc5Q1JDeFJRVUZSTERCQ1FVTTFRa1VzUjBGQlMwWXNVVUZCVVN4blFrRkJaMEpITEVWQlF6ZENReXhMUVVGUFNpeFJRVUZSTEd0Q1FVRnJRa2NzUlVGRGFrTkZMRk5CUVZkTUxGRkJRVkVzWjBKQlEyNUNUU3hQUVVGVFRpeFJRVUZSTEZsQlEycENUeXhSUVVGVlVpeFBRVUZQVXl4UFFVTnFRa01zUzBGQlQwWXNVVUZEVUVjc1RVRkJVVWdzVVVGQlVVa3NWVUZEYUVKRExFbEJRVTBzUzBGRFRrTXNTVUZCVFN4TFFVVk9ReXhaUVVGakxFbEJRVWxRTEZGQlFWRkxMRTlCUVZOQkxFbEJSWFpETEVkQlFVbGFMRkZCUVZFc2NVSkJRWFZDWXl4aFFVRmxaQ3hSUVVGUkxGZEJRVkpCTEVOQlFXOUNMRmRCUjNCRkxFOUJSa0ZoTEVsQlFVbGlMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNWMEZCUVN4RlFVVm1UeXhSUVVGUlN5eE5RVUZSUVN4TFFVRlBUQ3hSUVVGUlRTeE5RVUZSUVN4TFFVRTBRaXhSUVVGeVFrNHNVVUZCVVVzc1NVRkJTeXhSUVVNdlJDeERRVU5JVEN4UlFVRlZMRk5CUVdkQ1VTeEZRVUZIV2l4SFFVTXpRaXhKUVVGSllTeEZRVUZQUXl4blFrRkJaMEpXTEZGQlEzWkNWeXhGUVVGUFlpeFRRVUZUVlN4SFFVTm9Ra2tzVDBGQlFVRXNTVUZCVFdoQ0xFVkJRMVlzVDBGQlVXRXNSMEZCVVVVc1IwRkJVVWdzUlVGQlJVc3NZMEZCWjBKaUxGTkJRVmRaTEVWQlFVMUtMRVZCUTNaRVpDeHJRa0ZCYTBKaExGbEJRMmhDTEVsQlFVbE1MRXRCUVV0VExFbEJRVk5ETEVWQlFVMUtMRVZCUVVWTkxFOUJRVk5PTEVWQlFVZGFMRWRCUTNSRFRTeE5RVUZOVXl4RlFVRlBTQ3hoUVVGaFVpeFRRVUZYVVN4RlFVRkZUU3hQUVVGVFRpeEZRVUZIUnl4SFFVRlJReXhGUVVGTllpeFBRVUZQWjBJc1MwRkJTMUFzUjBGQlMxb3NSMEZEY0VaaExFVkJRVTlETEV0QlFVOVFMRTFCUVU5SUxGVkJVek5DTEVsQlVFRXNTVUZCU1dkQ0xFMUJRVkVzVTBGQlZVTXNSMEZEY0VKQkxFdEJRVTlxUWl4VFFVRlhUQ3hIUVVGSFN5eFJRVUZUYVVJc1JVRkJTeXhEUVVOcVEwTXNZMEZCUVVFc1JVRkRRVU1zU1VGQlN5eFhRVUZqTEU5QlFVOXFRaXhMUVVGTFpTeEpRVU12UWtjc1NVRkJTeXhUUVVGVlF5eEhRVUZOYmtJc1MwRkJTMlVzUjBGQlQwa3NUVUZITlVKRExFdEJRVTk2UWl4TFFVRkxTeXhOUVVGUGNVSXNSVUZCU1N4RlFVRkhSQ3hMUVVGTFJTeFBRVUZUUkN4SFFVRkpVQ3hOUVVGTlRTeExRVUZMUXl4TlFVTm9SWEJDTEUxQlFVMVZMRmxCUVdOaUxGRkJRM0JDUVN4UlFVRlJTU3hWUVVGWlJDeE5RVU53UWxZc1VVRkJVU3hqUVVGU1FTeERRVUYxUWtRc1QwRkJVU3hUUVVGVlVTeFRRVWN6UTFBc1VVRkJVU3hwUWtGQlVrRXNRMEZCTUVJaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV5WldkbGVIQXVZMjl1YzNSeWRXTjBiM0l1YW5NaWZRPT0iLCJyZXF1aXJlKDMyKSYmXCJnXCIhPS8uL2cuZmxhZ3MmJnJlcXVpcmUoNzQpLmYoUmVnRXhwLnByb3RvdHlwZSxcImZsYWdzXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6cmVxdWlyZSg0MCl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVabXhoWjNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW1ac1lXZHpJaXdpWmlJc0lsSmxaMFY0Y0NJc0luQnliM1J2ZEhsd1pTSXNJbU52Ym1acFozVnlZV0pzWlNJc0ltZGxkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMGxCTEZGQlFWRXNiVUpCUVcxRExFdEJRV1FzUzBGQlMwTXNUMEZCWTBRc1VVRkJVU3huUWtGQlowSkZMRVZCUVVWRExFOUJRVTlETEZWQlFWY3NVVUZCVXl4RFFVTjJSME1zWTBGQlFVRXNSVUZEUVVNc1NVRkJTMDRzVVVGQlVTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5KbFoyVjRjQzVtYkdGbmN5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFuT2JqZWN0PXJlcXVpcmUoMTApLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxhZHZhbmNlU3RyaW5nSW5kZXg9cmVxdWlyZSg4KSxyZWdFeHBFeGVjPXJlcXVpcmUoOTUpO3JlcXVpcmUoMzkpKFwibWF0Y2hcIiwxLGZ1bmN0aW9uKGUscixuLHQpe3JldHVybltmdW5jdGlvbihuKXt2YXIgdD1lKHRoaXMpLGE9bnVsbD09bj92b2lkIDA6bltyXTtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobix0KTpuZXcgUmVnRXhwKG4pW3JdKFN0cmluZyh0KSl9LGZ1bmN0aW9uKGUpe3ZhciByPXQobixlLHRoaXMpO2lmKHIuZG9uZSlyZXR1cm4gci52YWx1ZTt2YXIgYT1hbk9iamVjdChlKSxpPVN0cmluZyh0aGlzKTtpZighYS5nbG9iYWwpcmV0dXJuIHJlZ0V4cEV4ZWMoYSxpKTt2YXIgdT1hLnVuaWNvZGU7YS5sYXN0SW5kZXg9MDtmb3IodmFyIGMseD1bXSxnPTA7bnVsbCE9PShjPXJlZ0V4cEV4ZWMoYSxpKSk7KXt2YXIgbD1TdHJpbmcoY1swXSk7eFtnXT1sLFwiXCI9PT1sJiYoYS5sYXN0SW5kZXg9YWR2YW5jZVN0cmluZ0luZGV4KGksdG9MZW5ndGgoYS5sYXN0SW5kZXgpLHUpKSxnKyt9cmV0dXJuIDA9PT1nP251bGw6eH1dfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXZGxlSEF1YldGMFkyZ3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVlXNVBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2lkRzlNWlc1bmRHZ2lMQ0poWkhaaGJtTmxVM1J5YVc1blNXNWtaWGdpTENKeVpXZEZlSEJGZUdWaklpd2laR1ZtYVc1bFpDSXNJazFCVkVOSUlpd2lKRzFoZEdOb0lpd2liV0Y1WW1WRFlXeHNUbUYwYVhabElpd2ljbVZuWlhod0lpd2lUeUlzSW5Sb2FYTWlMQ0ptYmlJc0luVnVaR1ZtYVc1bFpDSXNJbU5oYkd3aUxDSlNaV2RGZUhBaUxDSlRkSEpwYm1jaUxDSnlaWE1pTENKa2IyNWxJaXdpZG1Gc2RXVWlMQ0p5ZUNJc0lsTWlMQ0puYkc5aVlXd2lMQ0ptZFd4c1ZXNXBZMjlrWlNJc0luVnVhV052WkdVaUxDSnNZWE4wU1c1a1pYZ2lMQ0p5WlhOMWJIUWlMQ0pCSWl3aWJpSXNJbTFoZEdOb1UzUnlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZOQlFWZERMRkZCUVZFc1owSkJRMjVDUXl4VFFVRlhSQ3hSUVVGUkxHZENRVU51UWtVc2JVSkJRWEZDUml4UlFVRlJMREpDUVVNM1FrY3NWMEZCWVVnc1VVRkJVU3d5UWtGSGVrSkJMRkZCUVZFc1owSkJRVkpCTEVOQlFYbENMRkZCUVZNc1JVRkJSeXhUUVVGVlNTeEZRVUZUUXl4RlFVRlBReXhGUVVGUlF5eEhRVU55UlN4TlFVRlBMRU5CUjB3c1UwRkJaVU1zUjBGRFlpeEpRVUZKUXl4RlFVRkpUQ3hGUVVGUlRTeE5RVU5hUXl4RlFVRmxReXhOUVVGV1NpeFBRVUZCUVN4RlFVRnJRMEVzUlVGQlQwZ3NSMEZEYkVRc1dVRkJRU3hKUVVGUFRTeEZRVUZ0UWtFc1JVRkJSMFVzUzBGQlMwd3NSVUZCVVVNc1IwRkJTeXhKUVVGSlN5eFBRVUZQVGl4SFFVRlJTQ3hIUVVGUFZTeFBRVUZQVGl4TFFVbHNSaXhUUVVGVlJDeEhRVU5TTEVsQlFVbFJMRVZCUVUxVUxFVkJRV2RDUkN4RlFVRlJSU3hGUVVGUlJTeE5RVU14UXl4SFFVRkpUU3hGUVVGSlF5eExRVUZOTEU5QlFVOUVMRVZCUVVsRkxFMUJRM3BDTEVsQlFVbERMRVZCUVV0d1FpeFRRVUZUVXl4SFFVTmtXU3hGUVVGSlRDeFBRVUZQVEN4TlFVTm1MRWxCUVV0VExFVkJRVWRGTEU5QlFWRXNUMEZCVDJ4Q0xGZEJRVmRuUWl4RlFVRkpReXhIUVVOMFF5eEpRVUZKUlN4RlFVRmpTQ3hGUVVGSFNTeFJRVU55UWtvc1JVRkJSMHNzVlVGQldTeEZRVWxtTEVsQlNFRXNTVUZGU1VNc1JVRkdRVU1zUlVGQlNTeEhRVU5LUXl4RlFVRkpMRVZCUldkRExGRkJRV2hEUml4RlFVRlRkRUlzVjBGQlYyZENMRVZCUVVsRExFdEJRV01zUTBGRE5VTXNTVUZCU1ZFc1JVRkJWMklzVDBGQlQxVXNSVUZCVHl4SlFVTTNRa01zUlVGQlJVTXNSMEZCUzBNc1JVRkRWU3hMUVVGaVFTeEpRVUZwUWxRc1JVRkJSMHNzVlVGQldYUkNMRzFDUVVGdFFtdENMRVZCUVVkdVFpeFRRVUZUYTBJc1JVRkJSMHNzVjBGQldVWXNTVUZEYkVaTExFbEJSVVlzVDBGQllTeEpRVUZPUVN4RlFVRlZMRXRCUVU5RUlpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1Y21WblpYaHdMbTFoZEdOb0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFuT2JqZWN0PXJlcXVpcmUoMTApLHRvT2JqZWN0PXJlcXVpcmUoMTIxKSx0b0xlbmd0aD1yZXF1aXJlKDEyMCksdG9JbnRlZ2VyPXJlcXVpcmUoMTE4KSxhZHZhbmNlU3RyaW5nSW5kZXg9cmVxdWlyZSg4KSxyZWdFeHBFeGVjPXJlcXVpcmUoOTUpLG1heD1NYXRoLm1heCxtaW49TWF0aC5taW4sZmxvb3I9TWF0aC5mbG9vcixTVUJTVElUVVRJT05fU1lNQk9MUz0vXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2csU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ9L1xcJChbJCZgJ118XFxkXFxkPykvZztyZXF1aXJlKDM5KShcInJlcGxhY2VcIiwyLGZ1bmN0aW9uKGUscix0LG4pe3JldHVybltmdW5jdGlvbihuLGEpe3ZhciBpPWUodGhpcyksYz1udWxsPT1uP3ZvaWQgMDpuW3JdO3JldHVybiB2b2lkIDAhPT1jP2MuY2FsbChuLGksYSk6dC5jYWxsKFN0cmluZyhpKSxuLGEpfSxmdW5jdGlvbihlLHIpe3ZhciBpPW4odCxlLHRoaXMscik7aWYoaS5kb25lKXJldHVybiBpLnZhbHVlO3ZhciBjPWFuT2JqZWN0KGUpLG89U3RyaW5nKHRoaXMpLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgcjtsfHwocj1TdHJpbmcocikpO3ZhciB1PWMuZ2xvYmFsO2lmKHUpe3ZhciBnPWMudW5pY29kZTtjLmxhc3RJbmRleD0wfWZvcih2YXIgdj1bXTs7KXt2YXIgcz1yZWdFeHBFeGVjKGMsbyk7aWYobnVsbD09PXMpYnJlYWs7aWYodi5wdXNoKHMpLCF1KWJyZWFrO1wiXCI9PT1TdHJpbmcoc1swXSkmJihjLmxhc3RJbmRleD1hZHZhbmNlU3RyaW5nSW5kZXgobyx0b0xlbmd0aChjLmxhc3RJbmRleCksZykpfWZvcih2YXIgZCxTPVwiXCIsZj0wLGg9MDtoPHYubGVuZ3RoO2grKyl7cz12W2hdO2Zvcih2YXIgeD1TdHJpbmcoc1swXSksST1tYXgobWluKHRvSW50ZWdlcihzLmluZGV4KSxvLmxlbmd0aCksMCksXz1bXSxPPTE7TzxzLmxlbmd0aDtPKyspXy5wdXNoKHZvaWQgMD09PShkPXNbT10pP2Q6U3RyaW5nKGQpKTt2YXIgVD1zLmdyb3VwcztpZihsKXt2YXIgYj1beF0uY29uY2F0KF8sSSxvKTt2b2lkIDAhPT1UJiZiLnB1c2goVCk7dmFyIHA9U3RyaW5nKHIuYXBwbHkodm9pZCAwLGIpKX1lbHNlIHA9YSh4LG8sSSxfLFQscik7ST49ZiYmKFMrPW8uc2xpY2UoZixJKStwLGY9SSt4Lmxlbmd0aCl9cmV0dXJuIFMrby5zbGljZShmKX1dO2Z1bmN0aW9uIGEoZSxyLG4sYSxpLGMpe3ZhciBvPW4rZS5sZW5ndGgsbD1hLmxlbmd0aCx1PVNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO3JldHVybiB2b2lkIDAhPT1pJiYoaT10b09iamVjdChpKSx1PVNVQlNUSVRVVElPTl9TWU1CT0xTKSx0LmNhbGwoYyx1LGZ1bmN0aW9uKHQsYyl7dmFyIHU7c3dpdGNoKGMuY2hhckF0KDApKXtjYXNlXCIkXCI6cmV0dXJuXCIkXCI7Y2FzZVwiJlwiOnJldHVybiBlO2Nhc2VcImBcIjpyZXR1cm4gci5zbGljZSgwLG4pO2Nhc2VcIidcIjpyZXR1cm4gci5zbGljZShvKTtjYXNlXCI8XCI6dT1pW2Muc2xpY2UoMSwtMSldO2JyZWFrO2RlZmF1bHQ6dmFyIGc9K2M7aWYoMD09PWcpcmV0dXJuIGM7aWYoZz5sKXt2YXIgdj1mbG9vcihnLzEwKTtyZXR1cm4gMD09PXY/Yzp2PD1sP3ZvaWQgMD09PWFbdi0xXT9jLmNoYXJBdCgxKTphW3YtMV0rYy5jaGFyQXQoMSk6Y311PWFbZy0xXX1yZXR1cm4gdm9pZCAwPT09dT9cIlwiOnV9KX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVjbVZ3YkdGalpTNXFjeUpkTENKdVlXMWxjeUk2V3lKaGJrOWlhbVZqZENJc0luSmxjWFZwY21VaUxDSjBiMDlpYW1WamRDSXNJblJ2VEdWdVozUm9JaXdpZEc5SmJuUmxaMlZ5SWl3aVlXUjJZVzVqWlZOMGNtbHVaMGx1WkdWNElpd2ljbVZuUlhod1JYaGxZeUlzSW0xaGVDSXNJazFoZEdnaUxDSnRhVzRpTENKbWJHOXZjaUlzSWxOVlFsTlVTVlJWVkVsUFRsOVRXVTFDVDB4VElpd2lVMVZDVTFSSlZGVlVTVTlPWDFOWlRVSlBURk5mVGs5ZlRrRk5SVVFpTENKa1pXWnBibVZrSWl3aVVrVlFURUZEUlNJc0lpUnlaWEJzWVdObElpd2liV0Y1WW1WRFlXeHNUbUYwYVhabElpd2ljMlZoY21Ob1ZtRnNkV1VpTENKeVpYQnNZV05sVm1Gc2RXVWlMQ0pQSWl3aWRHaHBjeUlzSW1adUlpd2lkVzVrWldacGJtVmtJaXdpWTJGc2JDSXNJbE4wY21sdVp5SXNJbkpsWjJWNGNDSXNJbkpsY3lJc0ltUnZibVVpTENKMllXeDFaU0lzSW5KNElpd2lVeUlzSW1aMWJtTjBhVzl1WVd4U1pYQnNZV05sSWl3aVoyeHZZbUZzSWl3aVpuVnNiRlZ1YVdOdlpHVWlMQ0oxYm1samIyUmxJaXdpYkdGemRFbHVaR1Y0SWl3aWNtVnpkV3gwY3lJc0luSmxjM1ZzZENJc0luQjFjMmdpTENKcGRDSXNJbUZqWTNWdGRXeGhkR1ZrVW1WemRXeDBJaXdpYm1WNGRGTnZkWEpqWlZCdmMybDBhVzl1SWl3aWFTSXNJbXhsYm1kMGFDSXNJbTFoZEdOb1pXUWlMQ0p3YjNOcGRHbHZiaUlzSW1sdVpHVjRJaXdpWTJGd2RIVnlaWE1pTENKcUlpd2libUZ0WldSRFlYQjBkWEpsY3lJc0ltZHliM1Z3Y3lJc0luSmxjR3hoWTJWeVFYSm5jeUlzSW1OdmJtTmhkQ0lzSW5KbGNHeGhZMlZ0Wlc1MElpd2lZWEJ3YkhraUxDSm5aWFJUZFdKemRHbDBkWFJwYjI0aUxDSnpiR2xqWlNJc0luTjBjaUlzSW5SaGFXeFFiM01pTENKdElpd2ljM2x0WW05c2N5SXNJbTFoZEdOb0lpd2lZMmdpTENKallYQjBkWEpsSWl3aVkyaGhja0YwSWl3aWJpSXNJbVlpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeG5Ra0ZEYmtKRExGTkJRVmRFTEZGQlFWRXNaMEpCUTI1Q1JTeFRRVUZYUml4UlFVRlJMR2RDUVVOdVFrY3NWVUZCV1Vnc1VVRkJVU3hwUWtGRGNFSkpMRzFDUVVGeFFrb3NVVUZCVVN3eVFrRkROMEpMTEZkQlFXRk1MRkZCUVZFc01rSkJRM0pDVFN4SlFVRk5ReXhMUVVGTFJDeEpRVU5ZUlN4SlFVRk5SQ3hMUVVGTFF5eEpRVU5ZUXl4TlFVRlJSaXhMUVVGTFJTeE5RVU5pUXl4eFFrRkJkVUlzTkVKQlEzWkNReXc0UWtGQlowTXNiMEpCVDNCRFdDeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFpeFZRVUZYTEVWQlFVY3NVMEZCVlZrc1JVRkJVME1zUlVGQlUwTXNSVUZCVlVNc1IwRkRNMFVzVFVGQlR5eERRVWRNTEZOQlFXbENReXhGUVVGaFF5eEhRVU0xUWl4SlFVRkpReXhGUVVGSlRpeEZRVUZSVHl4TlFVTmFReXhGUVVGdlFrTXNUVUZCWmt3c1QwRkJRVUVzUlVGQmRVTkJMRVZCUVZsSUxFZEJRelZFTEZsQlFVRXNTVUZCVDA4c1JVRkRTRUVzUlVGQlIwVXNTMEZCUzA0c1JVRkJZVVVzUlVGQlIwUXNSMEZEZUVKSUxFVkJRVk5STEV0QlFVdERMRTlCUVU5TUxFZEJRVWxHTEVWQlFXRkRMRWxCU1RWRExGTkJRVlZQTEVWQlFWRlFMRWRCUTJoQ0xFbEJRVWxSTEVWQlFVMVdMRVZCUVdkQ1JDeEZRVUZWVlN4RlFVRlJUQ3hMUVVGTlJpeEhRVU5zUkN4SFFVRkpVU3hGUVVGSlF5eExRVUZOTEU5QlFVOUVMRVZCUVVsRkxFMUJSWHBDTEVsQlFVbERMRVZCUVVzM1FpeFRRVUZUZVVJc1IwRkRaRXNzUlVGQlNVNHNUMEZCVDBvc1RVRkRXRmNzUlVGQk5FTXNiVUpCUVdwQ1lpeEZRVU14UW1Fc1NVRkJiVUppTEVWQlFXVk5MRTlCUVU5T0xFbEJRemxETEVsQlFVbGpMRVZCUVZOSUxFVkJRVWRITEU5QlEyaENMRWRCUVVsQkxFVkJRVkVzUTBGRFZpeEpRVUZKUXl4RlFVRmpTaXhGUVVGSFN5eFJRVU55UWt3c1JVRkJSMDBzVlVGQldTeEZRVWRxUWl4SlFVUkJMRWxCUVVsRExFVkJRVlVzUzBGRFJDeERRVU5ZTEVsQlFVbERMRVZCUVZNdlFpeFhRVUZYZFVJc1JVRkJTVU1zUjBGRE5VSXNSMEZCWlN4UFFVRllUeXhGUVVGcFFpeE5RVVZ5UWl4SFFVUkJSQ3hGUVVGUlJTeExRVUZMUkN4SlFVTlNUQ3hGUVVGUkxFMUJSVWtzUzBGRVJsSXNUMEZCVDJFc1JVRkJUeXhOUVVOU1VpeEZRVUZIVFN4VlFVRlpPVUlzYlVKQlFXMUNlVUlzUlVGQlJ6TkNMRk5CUVZNd1FpeEZRVUZIVFN4WFFVRlpSaXhKUVVsd1JpeEpRVVpCTEVsQmVFTjNRazBzUlVGM1EzQkNReXhGUVVGdlFpeEhRVU53UWtNc1JVRkJjVUlzUlVGRGFFSkRMRVZCUVVrc1JVRkJSMEVzUlVGQlNVNHNSVUZCVVU4c1QwRkJVVVFzU1VGQlN5eERRVU4yUTB3c1JVRkJVMFFzUlVGQlVVMHNSMEZUYWtJc1NVRlNRU3hKUVVGSlJTeEZRVUZWY0VJc1QwRkJUMkVzUlVGQlR5eEpRVU40UWxFc1JVRkJWM1JETEVsQlFVbEZMRWxCUVVsTUxGVkJRVlZwUXl4RlFVRlBVeXhQUVVGUmFFSXNSVUZCUldFc1VVRkJVeXhIUVVOMlJFa3NSVUZCVnl4SFFVMU9ReXhGUVVGSkxFVkJRVWRCTEVWQlFVbFlMRVZCUVU5TkxFOUJRVkZMTEVsQlFVdEVMRVZCUVZOVUxGVkJRVUZCTEV0QmNFUXpRa01zUlVGdlJEaERSaXhGUVVGUFZ5eEpRVzVFZGtSVUxFVkJRVXRtTEU5QlFVOWxMRWxCYjBSb1F5eEpRVUZKVlN4RlFVRm5RbG9zUlVGQlQyRXNUMEZETTBJc1IwRkJTVzVDTEVWQlFXMUNMRU5CUTNKQ0xFbEJRVWx2UWl4RlFVRmxMRU5CUVVOUUxFZEJRVk5STEU5QlFVOU1MRVZCUVZWR0xFVkJRVlZtTEZGQlFVRkJMRWxCUTNCRWJVSXNSMEZCTmtKRkxFVkJRV0ZpTEV0QlFVdFhMRWRCUTI1RUxFbEJRVWxKTEVWQlFXTTNRaXhQUVVGUFRpeEZRVUZoYjBNc1YwRkJRVUVzUlVGQmFVSklMRk5CUlhaRVJTeEZRVUZqUlN4RlFVRm5RbGdzUlVGQlUyUXNSVUZCUjJVc1JVRkJWVVVzUlVGQlZVVXNSVUZCWlM5Q0xFZEJSVE5GTWtJc1IwRkJXVW9zU1VGRFpFUXNSMEZCY1VKV0xFVkJRVVV3UWl4TlFVRk5aaXhGUVVGdlFra3NSMEZCV1ZFc1JVRkROMFJhTEVWQlFYRkNTU3hGUVVGWFJDeEZRVUZSUkN4UlFVYzFReXhQUVVGUFNDeEZRVUZ2UWxZc1JVRkJSVEJDTEUxQlFVMW1MRXRCUzNaRExGTkJRVk5qTEVWQlFXZENXQ3hGUVVGVFlTeEZRVUZMV2l4RlFVRlZSU3hGUVVGVlJTeEZRVUZsU1N4SFFVTjRSU3hKUVVGSlN5eEZRVUZWWWl4RlFVRlhSQ3hGUVVGUlJDeFBRVU0zUW1kQ0xFVkJRVWxhTEVWQlFWTktMRTlCUTJKcFFpeEZRVUZWYUVRc09FSkJTMlFzV1VGQlFTeEpRVXBKY1VNc1NVRkRSa0VzUlVGQlowSXZReXhUUVVGVEswTXNSMEZEZWtKWExFVkJRVlZxUkN4elFrRkZURWtzUlVGQlUxRXNTMEZCU3poQ0xFVkJRV0ZQTEVWQlFWTXNVMEZCVlVNc1JVRkJUME1zUjBGRE1VUXNTVUZCU1VNc1JVRkRTaXhQUVVGUlJDeEZRVUZIUlN4UFFVRlBMRWxCUTJoQ0xFbEJRVXNzU1VGQlN5eE5RVUZQTEVsQlEycENMRWxCUVVzc1NVRkJTeXhQUVVGUGNFSXNSVUZEYWtJc1NVRkJTeXhKUVVGTExFOUJRVTloTEVWQlFVbEVMRTFCUVUwc1JVRkJSMWdzUjBGRE9VSXNTVUZCU3l4SlFVRkxMRTlCUVU5WkxFVkJRVWxFTEUxQlFVMUZMRWRCUXpOQ0xFbEJRVXNzU1VGRFNFc3NSVUZCVldRc1JVRkJZMkVzUlVGQlIwNHNUVUZCVFN4SFFVRkpMRWxCUTNKRExFMUJRMFlzVVVGRFJTeEpRVUZKVXl4SFFVRkxTQ3hGUVVOVUxFZEJRVlVzU1VGQlRrY3NSVUZCVXl4UFFVRlBTQ3hGUVVOd1FpeEhRVUZKUnl4RlFVRkpUaXhGUVVGSExFTkJRMVFzU1VGQlNVOHNSVUZCU1hoRUxFMUJRVTExUkN4RlFVRkpMRWxCUTJ4Q0xFOUJRVlVzU1VGQlRrTXNSVUZCWjBKS0xFVkJRMmhDU1N4SFFVRkxVQ3hQUVVGQlFTeEpRVUZWV2l4RlFVRlRiVUlzUlVGQlNTeEhRVUZ0UWtvc1JVRkJSMFVzVDBGQlR5eEhRVUZMYWtJc1JVRkJVMjFDTEVWQlFVa3NSMEZCUzBvc1JVRkJSMFVzVDBGQlR5eEhRVU4yUmtZc1JVRkZWRU1zUlVGQlZXaENMRVZCUVZOclFpeEZRVUZKTEVkQlJUTkNMRmxCUVVFc1NVRkJUMFlzUlVGQmQwSXNSMEZCUzBFaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV5WldkbGVIQXVjbVZ3YkdGalpTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFuT2JqZWN0PXJlcXVpcmUoMTApLHNhbWVWYWx1ZT1yZXF1aXJlKDk4KSxyZWdFeHBFeGVjPXJlcXVpcmUoOTUpO3JlcXVpcmUoMzkpKFwic2VhcmNoXCIsMSxmdW5jdGlvbihlLHIsYSxuKXtyZXR1cm5bZnVuY3Rpb24oYSl7dmFyIG49ZSh0aGlzKSx0PW51bGw9PWE/dm9pZCAwOmFbcl07cmV0dXJuIHZvaWQgMCE9PXQ/dC5jYWxsKGEsbik6bmV3IFJlZ0V4cChhKVtyXShTdHJpbmcobikpfSxmdW5jdGlvbihlKXt2YXIgcj1uKGEsZSx0aGlzKTtpZihyLmRvbmUpcmV0dXJuIHIudmFsdWU7dmFyIHQ9YW5PYmplY3QoZSksdT1TdHJpbmcodGhpcyksaT10Lmxhc3RJbmRleDtzYW1lVmFsdWUoaSwwKXx8KHQubGFzdEluZGV4PTApO3ZhciBzPXJlZ0V4cEV4ZWModCx1KTtyZXR1cm4gc2FtZVZhbHVlKHQubGFzdEluZGV4LGkpfHwodC5sYXN0SW5kZXg9aSksbnVsbD09PXM/LTE6cy5pbmRleH1dfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXZGxlSEF1YzJWaGNtTm9MbXB6SWwwc0ltNWhiV1Z6SWpwYkltRnVUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbk5oYldWV1lXeDFaU0lzSW5KbFowVjRjRVY0WldNaUxDSmtaV1pwYm1Wa0lpd2lVMFZCVWtOSUlpd2lKSE5sWVhKamFDSXNJbTFoZVdKbFEyRnNiRTVoZEdsMlpTSXNJbkpsWjJWNGNDSXNJazhpTENKMGFHbHpJaXdpWm00aUxDSjFibVJsWm1sdVpXUWlMQ0pqWVd4c0lpd2lVbVZuUlhod0lpd2lVM1J5YVc1bklpd2ljbVZ6SWl3aVpHOXVaU0lzSW5aaGJIVmxJaXdpY25naUxDSlRJaXdpY0hKbGRtbHZkWE5NWVhOMFNXNWtaWGdpTENKc1lYTjBTVzVrWlhnaUxDSnlaWE4xYkhRaUxDSnBibVJsZUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOdVFrTXNWVUZCV1VRc1VVRkJVU3hwUWtGRGNFSkZMRmRCUVdGR0xGRkJRVkVzTWtKQlIzcENRU3hSUVVGUkxHZENRVUZTUVN4RFFVRjVRaXhUUVVGVkxFVkJRVWNzVTBGQlZVY3NSVUZCVTBNc1JVRkJVVU1zUlVGQlUwTXNSMEZEZUVVc1RVRkJUeXhEUVVkTUxGTkJRV2RDUXl4SFFVTmtMRWxCUVVsRExFVkJRVWxNTEVWQlFWRk5MRTFCUTFwRExFVkJRV1ZETEUxQlFWWktMRTlCUVVGQkxFVkJRV3REUVN4RlFVRlBTQ3hIUVVOc1JDeFpRVUZCTEVsQlFVOU5MRVZCUVcxQ1FTeEZRVUZIUlN4TFFVRkxUQ3hGUVVGUlF5eEhRVUZMTEVsQlFVbExMRTlCUVU5T0xFZEJRVkZJTEVkQlFWRlZMRTlCUVU5T0xFdEJTVzVHTEZOQlFWVkVMRWRCUTFJc1NVRkJTVkVzUlVGQlRWUXNSVUZCWjBKRUxFVkJRVk5GTEVWQlFWRkZMRTFCUXpORExFZEJRVWxOTEVWQlFVbERMRXRCUVUwc1QwRkJUMFFzUlVGQlNVVXNUVUZEZWtJc1NVRkJTVU1zUlVGQlMyNUNMRk5CUVZOUkxFZEJRMlJaTEVWQlFVbE1MRTlCUVU5TUxFMUJRMWhYTEVWQlFXOUNSaXhGUVVGSFJ5eFZRVU4wUW5CQ0xGVkJRVlZ0UWl4RlFVRnRRaXhMUVVGSlJpeEZRVUZIUnl4VlFVRlpMRWRCUTNKRUxFbEJRVWxETEVWQlFWTndRaXhYUVVGWFowSXNSVUZCU1VNc1IwRkZOVUlzVDBGRVMyeENMRlZCUVZWcFFpeEZRVUZIUnl4VlFVRlhSQ3hMUVVGdlFrWXNSVUZCUjBjc1ZVRkJXVVFzUjBGRE9VTXNUMEZCV0VVc1IwRkJiVUlzUlVGQlNVRXNSVUZCVDBNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV5WldkbGVIQXVjMlZoY21Ob0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGlzUmVnRXhwPXJlcXVpcmUoNTUpLGFuT2JqZWN0PXJlcXVpcmUoMTApLHNwZWNpZXNDb25zdHJ1Y3Rvcj1yZXF1aXJlKDEwNiksYWR2YW5jZVN0cmluZ0luZGV4PXJlcXVpcmUoOCksdG9MZW5ndGg9cmVxdWlyZSgxMjApLGNhbGxSZWdFeHBFeGVjPXJlcXVpcmUoOTUpLHJlZ2V4cEV4ZWM9cmVxdWlyZSg5NiksJG1pbj1NYXRoLm1pbiwkcHVzaD1bXS5wdXNoLFNVUFBPUlRTX1k9ISFmdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IFJlZ0V4cChcInhcIixcInlcIil9Y2F0Y2goZSl7fX0oKTtyZXF1aXJlKDM5KShcInNwbGl0XCIsMixmdW5jdGlvbihlLHQsbixpKXt2YXIgcj1uO3JldHVyblwiY1wiPT1cImFiYmNcIi5zcGxpdCgvKGIpKi8pWzFdfHw0IT1cInRlc3RcIi5zcGxpdCgvKD86KS8sLTEpLmxlbmd0aHx8MiE9XCJhYlwiLnNwbGl0KC8oPzphYikqLykubGVuZ3RofHw0IT1cIi5cIi5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGh8fFwiLlwiLnNwbGl0KC8oKSgpLykubGVuZ3RoPjF8fFwiXCIuc3BsaXQoLy4/LykubGVuZ3RoP3I9ZnVuY3Rpb24oZSx0KXt2YXIgaT1TdHJpbmcodGhpcyk7aWYodm9pZCAwPT09ZSYmMD09PXQpcmV0dXJuW107aWYoIWlzUmVnRXhwKGUpKXJldHVybiBuLmNhbGwoaSxlLHQpO2Zvcih2YXIgcixsLHMsYz1bXSx1PShlLmlnbm9yZUNhc2U/XCJpXCI6XCJcIikrKGUubXVsdGlsaW5lP1wibVwiOlwiXCIpKyhlLnVuaWNvZGU/XCJ1XCI6XCJcIikrKGUuc3RpY2t5P1wieVwiOlwiXCIpLGc9MCxhPXZvaWQgMD09PXQ/NDI5NDk2NzI5NTp0Pj4+MCxoPW5ldyBSZWdFeHAoZS5zb3VyY2UsdStcImdcIik7KHI9cmVnZXhwRXhlYy5jYWxsKGgsaSkpJiYhKChsPWgubGFzdEluZGV4KT5nJiYoYy5wdXNoKGkuc2xpY2UoZyxyLmluZGV4KSksci5sZW5ndGg+MSYmci5pbmRleDxpLmxlbmd0aCYmJHB1c2guYXBwbHkoYyxyLnNsaWNlKDEpKSxzPXJbMF0ubGVuZ3RoLGc9bCxjLmxlbmd0aD49YSkpOyloLmxhc3RJbmRleD09PXIuaW5kZXgmJmgubGFzdEluZGV4Kys7cmV0dXJuIGc9PT1pLmxlbmd0aD8hcyYmaC50ZXN0KFwiXCIpfHxjLnB1c2goXCJcIik6Yy5wdXNoKGkuc2xpY2UoZykpLGMubGVuZ3RoPmE/Yy5zbGljZSgwLGEpOmN9OlwiMFwiLnNwbGl0KHZvaWQgMCwwKS5sZW5ndGgmJihyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PWUmJjA9PT10P1tdOm4uY2FsbCh0aGlzLGUsdCl9KSxbZnVuY3Rpb24obixpKXt2YXIgbD1lKHRoaXMpLHM9bnVsbD09bj92b2lkIDA6blt0XTtyZXR1cm4gdm9pZCAwIT09cz9zLmNhbGwobixsLGkpOnIuY2FsbChTdHJpbmcobCksbixpKX0sZnVuY3Rpb24oZSx0KXt2YXIgbD1pKHIsZSx0aGlzLHQsciE9PW4pO2lmKGwuZG9uZSlyZXR1cm4gbC52YWx1ZTt2YXIgcz1hbk9iamVjdChlKSxjPVN0cmluZyh0aGlzKSx1PXNwZWNpZXNDb25zdHJ1Y3RvcihzLFJlZ0V4cCksZz1zLnVuaWNvZGUsYT0ocy5pZ25vcmVDYXNlP1wiaVwiOlwiXCIpKyhzLm11bHRpbGluZT9cIm1cIjpcIlwiKSsocy51bmljb2RlP1widVwiOlwiXCIpKyhTVVBQT1JUU19ZP1wieVwiOlwiZ1wiKSxoPW5ldyB1KFNVUFBPUlRTX1k/czpcIl4oPzpcIitzLnNvdXJjZStcIilcIixhKSxwPXZvaWQgMD09PXQ/NDI5NDk2NzI5NTp0Pj4+MDtpZigwPT09cClyZXR1cm5bXTtpZigwPT09Yy5sZW5ndGgpcmV0dXJuIG51bGw9PT1jYWxsUmVnRXhwRXhlYyhoLGMpP1tjXTpbXTtmb3IodmFyIG89MCx4PTAsZD1bXTt4PGMubGVuZ3RoOyl7aC5sYXN0SW5kZXg9U1VQUE9SVFNfWT94OjA7dmFyIHYsZj1jYWxsUmVnRXhwRXhlYyhoLFNVUFBPUlRTX1k/YzpjLnNsaWNlKHgpKTtpZihudWxsPT09Znx8KHY9JG1pbih0b0xlbmd0aChoLmxhc3RJbmRleCsoU1VQUE9SVFNfWT8wOngpKSxjLmxlbmd0aCkpPT09byl4PWFkdmFuY2VTdHJpbmdJbmRleChjLHgsZyk7ZWxzZXtpZihkLnB1c2goYy5zbGljZShvLHgpKSxkLmxlbmd0aD09PXApcmV0dXJuIGQ7Zm9yKHZhciBTPTE7Uzw9Zi5sZW5ndGgtMTtTKyspaWYoZC5wdXNoKGZbU10pLGQubGVuZ3RoPT09cClyZXR1cm4gZDt4PW89dn19cmV0dXJuIGQucHVzaChjLnNsaWNlKG8pKSxkfV19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVjM0JzYVhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVhOU1pXZEZlSEFpTENKeVpYRjFhWEpsSWl3aVlXNVBZbXBsWTNRaUxDSnpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSWlMQ0poWkhaaGJtTmxVM1J5YVc1blNXNWtaWGdpTENKMGIweGxibWQwYUNJc0ltTmhiR3hTWldkRmVIQkZlR1ZqSWl3aWNtVm5aWGh3UlhobFl5SXNJaVJ0YVc0aUxDSk5ZWFJvSWl3aWJXbHVJaXdpSkhCMWMyZ2lMQ0p3ZFhOb0lpd2lVMVZRVUU5U1ZGTmZXU0lzSWxKbFowVjRjQ0lzSW1VaUxDSmtaV1pwYm1Wa0lpd2lVMUJNU1ZRaUxDSWtjM0JzYVhRaUxDSnRZWGxpWlVOaGJHeE9ZWFJwZG1VaUxDSnBiblJsY201aGJGTndiR2wwSWl3aWMzQnNhWFFpTENKc1pXNW5kR2dpTENKelpYQmhjbUYwYjNJaUxDSnNhVzFwZENJc0luTjBjbWx1WnlJc0lsTjBjbWx1WnlJc0luUm9hWE1pTENKallXeHNJaXdpYldGMFkyZ2lMQ0pzWVhOMFNXNWtaWGdpTENKc1lYTjBUR1Z1WjNSb0lpd2liM1YwY0hWMElpd2labXhoWjNNaUxDSnBaMjV2Y21WRFlYTmxJaXdpYlhWc2RHbHNhVzVsSWl3aWRXNXBZMjlrWlNJc0luTjBhV05yZVNJc0lteGhjM1JNWVhOMFNXNWtaWGdpTENKemNHeHBkRXhwYldsMElpd2ljMlZ3WVhKaGRHOXlRMjl3ZVNJc0luTnZkWEpqWlNJc0luTnNhV05sSWl3aWFXNWtaWGdpTENKaGNIQnNlU0lzSW5SbGMzUWlMQ0pQSWl3aWMzQnNhWFIwWlhJaUxDSjFibVJsWm1sdVpXUWlMQ0p5WldkbGVIQWlMQ0p5WlhNaUxDSmtiMjVsSWl3aWRtRnNkV1VpTENKeWVDSXNJbE1pTENKRElpd2lkVzVwWTI5a1pVMWhkR05vYVc1bklpd2liR2x0SWl3aWNDSXNJbkVpTENKQklpd2llaUlzSW1raVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMRk5CUVZkRUxGRkJRVkVzWjBKQlEyNUNSU3h0UWtGQmNVSkdMRkZCUVZFc01FSkJRemRDUnl4dFFrRkJjVUpJTEZGQlFWRXNNa0pCUXpkQ1NTeFRRVUZYU2l4UlFVRlJMR2RDUVVOdVFrc3NaVUZCYVVKTUxGRkJRVkVzTWtKQlEzcENUU3hYUVVGaFRpeFJRVUZSTEd0Q1FVTnlRazhzUzBGQlQwTXNTMEZCUzBNc1NVRkRXa01zVFVGQlVTeEhRVUZIUXl4TFFVMVlReXhoUVVGbExGZEJRV1VzU1VGQlRTeFBRVUZQTEVsQlFVbERMRTlCUVU4c1NVRkJTeXhMUVVGUkxFMUJRVTlETEV0QlFUTkVMRWRCUjI1Q1pDeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFpeFJRVUZUTEVWQlFVY3NVMEZCVldVc1JVRkJVME1zUlVGQlQwTXNSVUZCVVVNc1IwRkRja1VzU1VGQlNVTXNSVUZCWjBKR0xFVkJaMFJ3UWl4TlFUbERLMElzUzBGQk4wSXNUMEZCWVVjc1RVRkJSU3hSUVVGUkxFbEJRMlVzUjBGQmRFTXNUMEZCWVVFc1RVRkJSU3hSUVVGVExFZEJRVk5ETEZGQlEwVXNSMEZCYmtNc1MwRkJWMFFzVFVGQlJTeFhRVUZwUWtNc1VVRkRTeXhIUVVGdVF5eEpRVUZWUkN4TlFVRkZMRmxCUVd0Q1F5eFJRVU01UWl4SlFVRlZSQ3hOUVVGRkxGRkJRV05ETEU5QlFVa3NSMEZET1VJc1IwRkJVMFFzVFVGQlJTeE5RVUZaUXl4UFFVZDJRa1lzUlVGQlowSXNVMEZCVlVjc1JVRkJWME1zUjBGRGJrTXNTVUZCU1VNc1JVRkJVME1zVDBGQlQwTXNUVUZEY0VJc1VVRkJRU3hKUVVGSlNpeEhRVUZ4UXl4SlFVRldReXhGUVVGaExFMUJRVThzUjBGRmJrUXNTVUZCUzNoQ0xGTkJRVk4xUWl4SFFVRlpMRTlCUVU5TUxFVkJRVTlWTEV0QlFVdElMRVZCUVZGR0xFVkJRVmRETEVkQlYyaEZMRWxCVmtFc1NVRlRTVXNzUlVGQlQwTXNSVUZCVjBNc1JVRlViRUpETEVWQlFWTXNSMEZEVkVNc1IwRkJVMVlzUlVGQlZWY3NWMEZCWVN4SlFVRk5MRXRCUXpkQ1dDeEZRVUZWV1N4VlFVRlpMRWxCUVUwc1MwRkROVUphTEVWQlFWVmhMRkZCUVZVc1NVRkJUU3hMUVVNeFFtSXNSVUZCVldNc1QwRkJVeXhKUVVGTkxFbEJRMnhEUXl4RlFVRm5RaXhGUVVOb1FrTXNUMEZCUVVFc1NVRkJZV1lzUlVGQmMwSXNWMEZCWVVFc1NVRkJWU3hGUVVVeFJHZENMRVZCUVdkQ0xFbEJRVWt4UWl4UFFVRlBVeXhGUVVGVmEwSXNUMEZCVVZJc1JVRkJVU3hOUVVWc1JFb3NSVUZCVVhSQ0xGZEJRVmR4UWl4TFFVRkxXU3hGUVVGbFppeFJRVU0xUTBzc1JVRkJXVlVzUlVGQmQwSldMRmRCUTNCQ1VTeEpRVU5rVGl4RlFVRlBjRUlzUzBGQlMyRXNSVUZCVDJsQ0xFMUJRVTFLTEVWQlFXVlVMRVZCUVUxakxGRkJRekZEWkN4RlFVRlpVQ3hQUVVGSkxFZEJRVXRQTEVWQlFVMWpMRTFCUVZGc1FpeEZRVUZoU0N4UlFVRkhXQ3hOUVVGTmFVTXNUVUZCVFZvc1JVRkJVVWdzUlVGQlRXRXNUVUZCVFN4SlFVTjJSbGdzUlVGQllVWXNSVUZCVFN4SFFVRlRVQ3hQUVVNMVFtZENMRVZCUVdkQ1VpeEZRVU5hUlN4RlFVRmhWaXhSUVVGTGFVSXNTMEZGY0VKRExFVkJRWGRDVml4WlFVRk5SQ3hGUVVGTll5eFBRVUZQU0N4RlFVRjNRbFlzV1VGTGVrVXNUMEZJU1ZFc1NVRkJhMEppTEVWQlFXRklMRkZCUXpkQ1V5eEhRVUZsVXl4RlFVRmpTeXhMUVVGTExFdEJRVXRpTEVWQlFVOXdRaXhMUVVGTExFbEJRMnhFYjBJc1JVRkJUM0JDTEV0QlFVdGhMRVZCUVU5cFFpeE5RVUZOU2l4SlFVTjZRazRzUlVGQllWWXNUMEZCU1dsQ0xFVkJRV0ZRTEVWQlFVOVZMRTFCUVUwc1JVRkJSMGdzUjBGQlkxQXNSMEZITlVRc1NVRkJWVmdzVjBGQlFTeEZRVUZoTEVkQlFWTkRMRk5CUTNwRFJpeEZRVUZuUWl4VFFVRlZSeXhGUVVGWFF5eEhRVU51UXl4WlFVRkJMRWxCUVU5RUxFZEJRWEZETEVsQlFWWkRMRVZCUVdNc1IwRkJTMDRzUlVGQlQxVXNTMEZCUzBRc1MwRkJUVW9zUlVGQlYwTXNTMEZKTDBVc1EwRkhUQ3hUUVVGbFJDeEZRVUZYUXl4SFFVTjRRaXhKUVVGSmMwSXNSVUZCU1RsQ0xFVkJRVkZYTEUxQlExcHZRaXhGUVVGM1FrTXNUVUZCWW5wQ0xFOUJRVUZCTEVWQlFYRkRRU3hGUVVGVlRpeEhRVU01UkN4WlFVRkJMRWxCUVU4NFFpeEZRVU5JUVN4RlFVRlRia0lzUzBGQlMwd3NSVUZCVjNWQ0xFVkJRVWQwUWl4SFFVTTFRa29zUlVGQlkxRXNTMEZCUzBZc1QwRkJUMjlDTEVkQlFVbDJRaXhGUVVGWFF5eEpRVTh2UXl4VFFVRlZlVUlzUlVGQlVYcENMRWRCUTJoQ0xFbEJRVWt3UWl4RlFVRk5MMElzUlVGQlowSkRMRVZCUVdVMlFpeEZRVUZSZEVJc1MwRkJUVWdzUlVGQlQwb3NTVUZCYTBKR0xFZEJRMmhHTEVkQlFVbG5ReXhGUVVGSlF5eExRVUZOTEU5QlFVOUVMRVZCUVVsRkxFMUJSWHBDTEVsQlFVbERMRVZCUVV0dVJDeFRRVUZUSzBNc1IwRkRaRXNzUlVGQlNUVkNMRTlCUVU5RExFMUJRMWcwUWl4RlFVRkpjRVFzYlVKQlFXMUNhMFFzUlVGQlNYWkRMRkZCUlROQ01FTXNSVUZCYTBKSUxFVkJRVWRxUWl4UlFVTnlRa2dzUjBGQlUyOUNMRVZCUVVkdVFpeFhRVUZoTEVsQlFVMHNTMEZEY0VKdFFpeEZRVUZIYkVJc1ZVRkJXU3hKUVVGTkxFdEJRM0pDYTBJc1JVRkJSMnBDTEZGQlFWVXNTVUZCVFN4TFFVTnVRblpDTEZkQlFXRXNTVUZCVFN4TFFVazVRbXRETEVWQlFWY3NTVUZCU1ZFc1JVRkJSVEZETEZkQlFXRjNReXhGUVVGTExFOUJRVk5CTEVWQlFVZGFMRTlCUVZNc1NVRkJTMUlzUjBGRE4wUjNRaXhQUVVGQlFTeEpRVUZOYWtNc1JVRkJjMElzVjBGQllVRXNTVUZCVlN4RlFVTjJSQ3hIUVVGWkxFbEJRVkpwUXl4RlFVRlhMRTFCUVU4c1IwRkRkRUlzUjBGQmFVSXNTVUZCWWtnc1JVRkJSV2hETEU5QlFXTXNUMEZCZFVNc1QwRkJhRU5vUWl4bFFVRmxlVU1zUlVGQlZVOHNSMEZCWXl4RFFVRkRRU3hIUVVGTExFZEJTWGhGTEVsQlNFRXNTVUZCU1Vrc1JVRkJTU3hGUVVOS1F5eEZRVUZKTEVWQlEwcERMRVZCUVVrc1IwRkRSRVFzUlVGQlNVd3NSVUZCUldoRExGRkJRVkVzUTBGRGJrSjVRaXhGUVVGVGFrSXNWVUZCV1dwQ0xGZEJRV0U0UXl4RlFVRkpMRVZCUTNSRExFbEJRMGsxUXl4RlFVUkJPRU1zUlVGQlNYWkVMR1ZCUVdWNVF5eEZRVUZWYkVNc1YwRkJZWGxETEVWQlFVbEJMRVZCUVVWYUxFMUJRVTFwUWl4SlFVVXhSQ3hIUVVOUkxFOUJRVTVGTEVsQlEwTTVReXhGUVVGSlVDeExRVUZMU0N4VFFVRlRNRU1zUlVGQlUycENMRmRCUVdGcVFpeFhRVUZoTEVWQlFVazRReXhKUVVGTFRDeEZRVUZGYUVNc1YwRkJZVzlETEVWQlJUbEZReXhGUVVGSmRrUXNiVUpCUVcxQ2EwUXNSVUZCUjBzc1JVRkJSMGdzVDBGRGVFSXNRMEZGVEN4SFFVUkJTU3hGUVVGRmFFUXNTMEZCU3pCRExFVkJRVVZhTEUxQlFVMW5RaXhGUVVGSFF5eEpRVU5rUXl4RlFVRkZkRU1zVTBGQlYyMURMRVZCUVVzc1QwRkJUMGNzUlVGRE4wSXNTVUZCU3l4SlFVRkpSU3hGUVVGSkxFVkJRVWRCTEVkQlFVdEVMRVZCUVVWMlF5eFBRVUZUTEVWQlFVZDNReXhKUVVWcVF5eEhRVVJCUml4RlFVRkZhRVFzUzBGQlMybEVMRVZCUVVWRExFbEJRMHhHTEVWQlFVVjBReXhUUVVGWGJVTXNSVUZCU3l4UFFVRlBSeXhGUVVVdlFrUXNSVUZCU1VRc1JVRkJTVE5ETEVkQlNWb3NUMEZFUVRaRExFVkJRVVZvUkN4TFFVRkxNRU1zUlVGQlJWb3NUVUZCVFdkQ0xFbEJRMUpGSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVjbVZuWlhod0xuTndiR2wwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKDIyOSk7dmFyIGFuT2JqZWN0PXJlcXVpcmUoMTApLCRmbGFncz1yZXF1aXJlKDQwKSxERVNDUklQVE9SUz1yZXF1aXJlKDMyKSwkdG9TdHJpbmc9Ly4vLnRvU3RyaW5nLGRlZmluZT1mdW5jdGlvbihlKXtyZXF1aXJlKDk0KShSZWdFeHAucHJvdG90eXBlLFwidG9TdHJpbmdcIixlLCEwKX07cmVxdWlyZSgzOCkoZnVuY3Rpb24oKXtyZXR1cm5cIi9hL2JcIiE9JHRvU3RyaW5nLmNhbGwoe3NvdXJjZTpcImFcIixmbGFnczpcImJcIn0pfSk/ZGVmaW5lKGZ1bmN0aW9uKCl7dmFyIGU9YW5PYmplY3QodGhpcyk7cmV0dXJuXCIvXCIuY29uY2F0KGUuc291cmNlLFwiL1wiLFwiZmxhZ3NcImluIGU/ZS5mbGFnczohREVTQ1JJUFRPUlMmJmUgaW5zdGFuY2VvZiBSZWdFeHA/JGZsYWdzLmNhbGwoZSk6dm9pZCAwKX0pOlwidG9TdHJpbmdcIiE9JHRvU3RyaW5nLm5hbWUmJmRlZmluZShmdW5jdGlvbigpe3JldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV2RsZUhBdWRHOHRjM1J5YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKaGJrOWlhbVZqZENJc0lpUm1iR0ZuY3lJc0lrUkZVME5TU1ZCVVQxSlRJaXdpSkhSdlUzUnlhVzVuSWl3aWRHOVRkSEpwYm1jaUxDSmtaV1pwYm1VaUxDSm1iaUlzSWxKbFowVjRjQ0lzSW5CeWIzUnZkSGx3WlNJc0ltTmhiR3dpTENKemIzVnlZMlVpTENKbWJHRm5jeUlzSWxJaUxDSjBhR2x6SWl3aVkyOXVZMkYwSWl3aWJtRnRaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFVRXNVVUZCVVN4elFrRkRVaXhKUVVGSlF5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNUMEZCVTBZc1VVRkJVU3haUVVOcVFrY3NXVUZCWTBnc1VVRkJVU3hyUWtGRmRFSkpMRlZCUVZrc1NVRkJZVU1zVTBGRmVrSkRMRTlCUVZNc1UwRkJWVU1zUjBGRGNrSlFMRkZCUVZFc1kwRkJVa0VzUTBGQmRVSlJMRTlCUVU5RExGVkJTbWhDTEZkQlNYTkRSaXhIUVVGQlFTeEpRVWxzUkZBc1VVRkJVU3hYUVVGU1FTeERRVUZ2UWl4WFFVRmpMRTFCUVhORUxGRkJRUzlEU1N4VlFVRlZUU3hMUVVGTExFTkJRVVZETEU5QlFWRXNTVUZCUzBNc1RVRkJUeXhSUVVOb1JrNHNUMEZCVHl4WFFVTk1MRWxCUVVsUExFVkJRVWxhTEZOQlFWTmhMRTFCUTJwQ0xFMUJRVThzU1VGQlNVTXNUMEZCVDBZc1JVRkJSVVlzVDBGQlVTeEpRVU14UWl4VlFVRlhSU3hGUVVGSlFTeEZRVUZGUkN4UFFVRlRWQ3hoUVVGbFZTeGhRVUZoVEN4UFFVRlRUaXhQUVVGUFVTeExRVUZMUnl4UlFVRkJRU3hMUVZwcVJTeFpRV1ZNVkN4VlFVRlZXU3hOUVVOdVFsWXNUMEZCVHl4WFFVTk1MRTlCUVU5R0xGVkJRVlZOTEV0QlFVdEpJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWNtVm5aWGh3TG5SdkxYTjBjbWx1Wnk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgc3Ryb25nPXJlcXVpcmUoMjIpLHZhbGlkYXRlPXJlcXVpcmUoMTI4KTttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKDI1KShcIlNldFwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApfX0se2FkZDpmdW5jdGlvbih0KXtyZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLFwiU2V0XCIpLHQ9MD09PXQ/MDp0LHQpfX0sc3Ryb25nKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6WlhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNSeWIyNW5JaXdpY21WeGRXbHlaU0lzSW5aaGJHbGtZWFJsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltZGxkQ0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKaFpHUWlMQ0oyWVd4MVpTSXNJbVJsWmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFBRVUZUUXl4UlFVRlJMSGRDUVVOcVFrTXNVMEZCVjBRc1VVRkJVU3d3UWtGSmRrSkZMRTlCUVU5RExGRkJRVlZJTEZGQlFWRXNaMEpCUVZKQkxFTkJTRkFzVFVGSGNVTXNVMEZCVlVrc1IwRkRka1FzVDBGQlR5eFhRVUZwUWl4UFFVRlBRU3hGUVVGSlF5eExRVUZOUXl4VlFVRlZReXhQUVVGVExFVkJRVWxFTEZWQlFWVXNVVUZCUVN4TFFVTjZSU3hEUVVWRVJTeEpRVUZMTEZOQlFXRkRMRWRCUTJoQ0xFOUJRVTlXTEU5QlFVOVhMRWxCUVVsVUxGTkJRVk5KTEV0QlVuSkNMRTlCVVdsRFNTeEZRVUZyUWl4SlFVRldRU3hGUVVGakxFVkJRVWxCTEVWQlFVOUJMRXRCUlhwRlZpSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5ObGRDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTApKFwiYW5jaG9yXCIsZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBuKHRoaXMsXCJhXCIsXCJuYW1lXCIscil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1WVc1amFHOXlMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSmpjbVZoZEdWSVZFMU1JaXdpYm1GdFpTSXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZOQlFWVXNVMEZCVlVNc1IwRkROVU1zVDBGQlR5eFRRVUZuUWtNc1IwRkRja0lzVDBGQlQwUXNSVUZCVjBVc1MwRkJUU3hKUVVGTExFOUJRVkZFSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVjM1J5YVc1bkxtRnVZMmh2Y2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKDExMCkoXCJiaWdcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLFwiYmlnXCIsXCJcIixcIlwiKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VZbWxuTG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0pqY21WaGRHVklWRTFNSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNUVUZCVHl4VFFVRlZReXhIUVVONlF5eFBRVUZQTEZkQlEwd3NUMEZCVDBFc1JVRkJWME1zUzBGQlRTeE5RVUZQTEVkQlFVa2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1emRISnBibWN1WW1sbkxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTApKFwiYmxpbmtcIixmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLFwiYmxpbmtcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdVlteHBibXN1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbU55WldGMFpVaFVUVXdpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSTEdsQ1FVRlNRU3hEUVVFd1FpeFJRVUZUTEZOQlFWVkRMRWRCUXpORExFOUJRVThzVjBGRFRDeFBRVUZQUVN4RlFVRlhReXhMUVVGTkxGRkJRVk1zUjBGQlNTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5OMGNtbHVaeTVpYkdsdWF5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTApKFwiYm9sZFwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJiXCIsXCJcIixcIlwiKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VZbTlzWkM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpWTNKbFlYUmxTRlJOVENJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNMRTlCUVZFc1UwRkJWVU1zUjBGRE1VTXNUMEZCVHl4WFFVTk1MRTlCUVU5QkxFVkJRVmRETEV0QlFVMHNTVUZCU3l4SFFVRkpJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWMzUnlhVzVuTG1KdmJHUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLCRhdD1yZXF1aXJlKDEwOCkoITEpOyRleHBvcnQoJGV4cG9ydC5QLFwiU3RyaW5nXCIse2NvZGVQb2ludEF0OmZ1bmN0aW9uKHQpe3JldHVybiAkYXQodGhpcyx0KX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VZMjlrWlMxd2IybHVkQzFoZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlSaGRDSXNJbEFpTENKamIyUmxVRzlwYm5SQmRDSXNJbkJ2Y3lJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1NVRkJUVVFzVVVGQlVTeGxRVUZTUVN4RlFVRkJRU3hIUVVOV1JDeFJRVUZSUVN4UlFVRlJSeXhGUVVGSExGTkJRVlVzUTBGRk0wSkRMRmxCUVdFc1UwRkJjVUpETEVkQlEyaERMRTlCUVU5SUxFbEJRVWxKTEV0QlFVMUVJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWMzUnlhVzVuTG1OdlpHVXRjRzlwYm5RdFlYUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxjb250ZXh0PXJlcXVpcmUoMTA5KSwkZW5kc1dpdGg9XCJcIi5lbmRzV2l0aDskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqcmVxdWlyZSgzNykoXCJlbmRzV2l0aFwiKSxcIlN0cmluZ1wiLHtlbmRzV2l0aDpmdW5jdGlvbih0KXt2YXIgZT1jb250ZXh0KHRoaXMsdCxcImVuZHNXaXRoXCIpLG49YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsaT10b0xlbmd0aChlLmxlbmd0aCkscj12b2lkIDA9PT1uP2k6TWF0aC5taW4odG9MZW5ndGgobiksaSksaD1TdHJpbmcodCk7cmV0dXJuICRlbmRzV2l0aD8kZW5kc1dpdGguY2FsbChlLGgscik6ZS5zbGljZShyLWgubGVuZ3RoLHIpPT09aH19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VaVzVrY3kxM2FYUm9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lkRzlNWlc1bmRHZ2lMQ0pqYjI1MFpYaDBJaXdpSkdWdVpITlhhWFJvSWl3aVpXNWtjMWRwZEdnaUxDSlFJaXdpUmlJc0luTmxZWEpqYUZOMGNtbHVaeUlzSW5Sb1lYUWlMQ0owYUdseklpd2laVzVrVUc5emFYUnBiMjRpTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSnNaVzRpTENKbGJtUWlMQ0pOWVhSb0lpd2liV2x1SWl3aWMyVmhjbU5vSWl3aVUzUnlhVzVuSWl3aVkyRnNiQ0lzSW5Oc2FXTmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hoUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZOQlFWZEVMRkZCUVZFc1owSkJRMjVDUlN4UlFVRlZSaXhSUVVGUkxIRkNRVVZzUWtjc1ZVRkJXU3hIUVVGWlF5eFRRVVUxUWt3c1VVRkJVVUVzVVVGQlVVMHNSVUZCU1U0c1VVRkJVVThzUlVGQlNVNHNVVUZCVVN4eFFrRkJVa0VzUTBGSWFFSXNXVUZITUVRc1UwRkJWU3hEUVVOc1Jra3NVMEZCVlN4VFFVRnJRa2NzUjBGRE1VSXNTVUZCU1VNc1JVRkJUMDRzVVVGQlVVOHNTMEZCVFVZc1JVRk1ZaXhaUVUxU1J5eEZRVUZqUXl4VlFVRlZReXhQUVVGVExFVkJRVWxFTEZWQlFWVXNVVUZCUVN4RlFVTXZRMFVzUlVGQlRWb3NVMEZCVTA4c1JVRkJTMGtzVVVGRGNFSkZMRTlCUVVGQkxFbEJRVTFLTEVWQlFUUkNSeXhGUVVGTlJTeExRVUZMUXl4SlFVRkpaaXhUUVVGVFV5eEhRVUZqUnl4SFFVTjRSVWtzUlVGQlUwTXNUMEZCVDFnc1IwRkRjRUlzVDBGQlQwb3NWVUZEU0VFc1ZVRkJWV2RDTEV0QlFVdFlMRVZCUVUxVExFVkJRVkZJTEVkQlF6ZENUaXhGUVVGTFdTeE5RVUZOVGl4RlFVRk5SeXhGUVVGUFRDeFBRVUZSUlN4TFFVRlRSeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuTjBjbWx1Wnk1bGJtUnpMWGRwZEdndWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTApKFwiZml4ZWRcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLFwidHRcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdVptbDRaV1F1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbU55WldGMFpVaFVUVXdpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSTEdsQ1FVRlNRU3hEUVVFd1FpeFJRVUZUTEZOQlFWVkRMRWRCUXpORExFOUJRVThzVjBGRFRDeFBRVUZQUVN4RlFVRlhReXhMUVVGTkxFdEJRVTBzUjBGQlNTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0yTG5OMGNtbHVaeTVtYVhobFpDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTApKFwiZm9udGNvbG9yXCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiB0KHRoaXMsXCJmb250XCIsXCJjb2xvclwiLHIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdVptOXVkR052Ykc5eUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKamNtVmhkR1ZJVkUxTUlpd2lZMjlzYjNJaUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRaXhaUVVGaExGTkJRVlZETEVkQlF5OURMRTlCUVU4c1UwRkJiVUpETEVkQlEzaENMRTlCUVU5RUxFVkJRVmRGTEV0QlFVMHNUMEZCVVN4UlFVRlRSQ0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuTjBjbWx1Wnk1bWIyNTBZMjlzYjNJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTApKFwiZm9udHNpemVcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHQodGhpcyxcImZvbnRcIixcInNpemVcIixuKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VabTl1ZEhOcGVtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNJc0ltTnlaV0YwWlVoVVRVd2lMQ0p6YVhwbElpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVjBGQldTeFRRVUZWUXl4SFFVTTVReXhQUVVGUExGTkJRV3RDUXl4SFFVTjJRaXhQUVVGUFJDeEZRVUZYUlN4TFFVRk5MRTlCUVZFc1QwRkJVVVFpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNXpkSEpwYm1jdVptOXVkSE5wZW1VdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoMTE2KSxmcm9tQ2hhckNvZGU9U3RyaW5nLmZyb21DaGFyQ29kZSwkZnJvbUNvZGVQb2ludD1TdHJpbmcuZnJvbUNvZGVQb2ludDskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqKCEhJGZyb21Db2RlUG9pbnQmJjEhPSRmcm9tQ29kZVBvaW50Lmxlbmd0aCksXCJTdHJpbmdcIix7ZnJvbUNvZGVQb2ludDpmdW5jdGlvbihvKXtmb3IodmFyIHIsZT1bXSx0PWFyZ3VtZW50cy5sZW5ndGgsbj0wO3Q+bjspe2lmKHI9K2FyZ3VtZW50c1tuKytdLHRvQWJzb2x1dGVJbmRleChyLDExMTQxMTEpIT09cil0aHJvdyBSYW5nZUVycm9yKHIrXCIgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludFwiKTtlLnB1c2gocjw2NTUzNj9mcm9tQ2hhckNvZGUocik6ZnJvbUNoYXJDb2RlKDU1Mjk2Kygoci09NjU1MzYpPj4xMCksciUxMDI0KzU2MzIwKSl9cmV0dXJuIGUuam9pbihcIlwiKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3Vabkp2YlMxamIyUmxMWEJ2YVc1MExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aWRHOUJZbk52YkhWMFpVbHVaR1Y0SWl3aVpuSnZiVU5vWVhKRGIyUmxJaXdpVTNSeWFXNW5JaXdpSkdaeWIyMURiMlJsVUc5cGJuUWlMQ0ptY205dFEyOWtaVkJ2YVc1MElpd2lVeUlzSWtZaUxDSnNaVzVuZEdnaUxDSjRJaXdpWTI5a1pTSXNJbkpsY3lJc0ltRk1aVzRpTENKaGNtZDFiV1Z1ZEhNaUxDSnBJaXdpVW1GdVoyVkZjbkp2Y2lJc0luQjFjMmdpTENKcWIybHVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eG5Ra0ZCYTBKRUxGRkJRVkVzZDBKQlF6RkNSU3hoUVVGbFF5eFBRVUZQUkN4aFFVTjBRa1VzWlVGQmFVSkVMRTlCUVU5RkxHTkJSelZDVGl4UlFVRlJRU3hSUVVGUlR5eEZRVUZKVUN4UlFVRlJVU3hMUVVGUFNDeG5Ra0ZCTWtNc1IwRkJla0pCTEdWQlFXVkpMRkZCUVdNc1UwRkJWU3hEUVVVeFJrZ3NZMEZCWlN4VFFVRjFRa2tzUjBGTGNFTXNTVUZLUVN4SlFVZEpReXhGUVVoQlF5eEZRVUZOTEVkQlEwNURMRVZCUVU5RExGVkJRVlZNTEU5QlEycENUU3hGUVVGSkxFVkJSVVJHTEVWQlFVOUZMRWRCUVVjc1EwRkZaaXhIUVVSQlNpeEhRVUZSUnl4VlFVRlZReXhMUVVOa1lpeG5Ra0ZCWjBKVExFVkJRVTBzVjBGQlkwRXNSVUZCVFN4TlFVRk5TeXhYUVVGWFRDeEZRVUZQTERoQ1FVTjBSVU1zUlVGQlNVc3NTMEZCUzA0c1JVRkJUeXhOUVVOYVVpeGhRVUZoVVN4SFFVTmlVaXhoUVVGNVF5eFJRVUV4UWxFc1IwRkJVU3hSUVVGWkxFbEJRV05CTEVWQlFVOHNTMEZCVVN4UlFVVndSU3hQUVVGUFF5eEZRVUZKVFN4TFFVRkxJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWMzUnlhVzVuTG1aeWIyMHRZMjlrWlMxd2IybHVkQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGNvbnRleHQ9cmVxdWlyZSgxMDkpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipyZXF1aXJlKDM3KShcImluY2x1ZGVzXCIpLFwiU3RyaW5nXCIse2luY2x1ZGVzOmZ1bmN0aW9uKGUpe3JldHVybiEhfmNvbnRleHQodGhpcyxlLFwiaW5jbHVkZXNcIikuaW5kZXhPZihlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VhVzVqYkhWa1pYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSmpiMjUwWlhoMElpd2lVQ0lzSWtZaUxDSnBibU5zZFdSbGN5SXNJbk5sWVhKamFGTjBjbWx1WnlJc0luUm9hWE1pTENKcGJtUmxlRTltSWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeGhRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRkZCUVZWRUxGRkJRVkVzY1VKQlIzUkNSQ3hSUVVGUlFTeFJRVUZSUnl4RlFVRkpTQ3hSUVVGUlNTeEZRVUZKU0N4UlFVRlJMSEZDUVVGU1FTeERRVVpxUWl4WlFVVXdSQ3hUUVVGVkxFTkJRMnBHU1N4VFFVRlZMRk5CUVd0Q1F5eEhRVU14UWl4VFFVRlZTaXhSUVVGUlN5eExRVUZOUkN4RlFVcGlMRmxCUzFKRkxGRkJRVkZHTEVWQlFXTkhMRlZCUVZWRExFOUJRVk1zUlVGQlNVUXNWVUZCVlN4UlFVRkJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWMzUnlhVzVuTG1sdVkyeDFaR1Z6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKDExMCkoXCJpdGFsaWNzXCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyxcImlcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdWFYUmhiR2xqY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpWTNKbFlYUmxTRlJOVENJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNMRlZCUVZjc1UwRkJWVU1zUjBGRE4wTXNUMEZCVHl4WFFVTk1MRTlCUVU5QkxFVkJRVmRETEV0QlFVMHNTVUZCU3l4SFFVRkpJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWMzUnlhVzVuTG1sMFlXeHBZM011YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGF0PXJlcXVpcmUoMTA4KSghMCk7cmVxdWlyZSg1OCkoU3RyaW5nLFwiU3RyaW5nXCIsZnVuY3Rpb24odCl7dGhpcy5fdD1TdHJpbmcodCksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciB0LGk9dGhpcy5fdCxlPXRoaXMuX2k7cmV0dXJuIGU+PWkubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9JGF0KGksZSksdGhpcy5faSs9dC5sZW5ndGgse3ZhbHVlOnQsZG9uZTohMX0pfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0l1YW5NaVhTd2libUZ0WlhNaU9sc2lKR0YwSWl3aWNtVnhkV2x5WlNJc0lsTjBjbWx1WnlJc0ltbDBaWEpoZEdWa0lpd2lkR2hwY3lJc0lsOTBJaXdpWDJraUxDSndiMmx1ZENJc0lrOGlMQ0pwYm1SbGVDSXNJbXhsYm1kMGFDSXNJblpoYkhWbElpd2laRzl1WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMR1ZCUVZKQkxFVkJRVUZCTEVkQlIxWkJMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNReXhQUVVGUkxGTkJRVlVzVTBGQlZVTXNSMEZEY0VSRExFdEJRVXRETEVkQlFVdElMRTlCUVU5RExFZEJRMnBDUXl4TFFVRkxSU3hIUVVGTExFZEJSVlFzVjBGRFJDeEpRVVZKUXl4RlFVWkJReXhGUVVGSlNpeExRVUZMUXl4SFFVTlVTU3hGUVVGUlRDeExRVUZMUlN4SFFVVnFRaXhQUVVGSlJ5eEhRVUZUUkN4RlFVRkZSU3hQUVVGbExFTkJRVVZETEZkQlFVRkJMRVZCUVd0Q1F5eE5RVUZCUVN4SlFVTnNSRXdzUlVGQlVWQXNTVUZCU1ZFc1JVRkJSME1zUjBGRFprd3NTMEZCUzBVc1NVRkJUVU1zUlVGQlRVY3NUMEZEVml4RFFVRkZReXhOUVVGUFNpeEZRVUZQU3l4TlFVRkJRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKDExMCkoXCJsaW5rXCIsZnVuY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiByKHRoaXMsXCJhXCIsXCJocmVmXCIsdCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YkdsdWF5NXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aVkzSmxZWFJsU0ZSTlRDSXNJblZ5YkNJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNMRTlCUVZFc1UwRkJWVU1zUjBGRE1VTXNUMEZCVHl4VFFVRmpReXhIUVVOdVFpeFBRVUZQUkN4RlFVRlhSU3hMUVVGTkxFbEJRVXNzVDBGQlVVUWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1emRISnBibWN1YkdsdWF5NXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksdG9JT2JqZWN0PXJlcXVpcmUoMTE5KSx0b0xlbmd0aD1yZXF1aXJlKDEyMCk7JGV4cG9ydCgkZXhwb3J0LlMsXCJTdHJpbmdcIix7cmF3OmZ1bmN0aW9uKHQpe2Zvcih2YXIgcj10b0lPYmplY3QodC5yYXcpLGU9dG9MZW5ndGgoci5sZW5ndGgpLG89YXJndW1lbnRzLmxlbmd0aCxuPVtdLGk9MDtlPmk7KW4ucHVzaChTdHJpbmcocltpKytdKSksaTxvJiZuLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO3JldHVybiBuLmpvaW4oXCJcIil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1Y21GM0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aWRHOUpUMkpxWldOMElpd2lkRzlNWlc1bmRHZ2lMQ0pUSWl3aWNtRjNJaXdpWTJGc2JGTnBkR1VpTENKMGNHd2lMQ0pzWlc0aUxDSnNaVzVuZEdnaUxDSmhUR1Z1SWl3aVlYSm5kVzFsYm5Seklpd2ljbVZ6SWl3aWFTSXNJbkIxYzJnaUxDSlRkSEpwYm1jaUxDSnFiMmx1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhWUVVGWlJDeFJRVUZSTEdsQ1FVTndRa1VzVTBGQlYwWXNVVUZCVVN4blFrRkZka0pFTEZGQlFWRkJMRkZCUVZGSkxFVkJRVWNzVTBGQlZTeERRVVV6UWtNc1NVRkJTeXhUUVVGaFF5eEhRVTFvUWl4SlFVeEJMRWxCUVVsRExFVkJRVTFNTEZWQlFWVkpMRVZCUVZORUxFdEJRM3BDUnl4RlFVRk5UQ3hUUVVGVFNTeEZRVUZKUlN4UlFVTnVRa01zUlVGQlQwTXNWVUZCVlVZc1QwRkRha0pITEVWQlFVMHNSMEZEVGtNc1JVRkJTU3hGUVVORVRDeEZRVUZOU3l4SFFVTllSQ3hGUVVGSlJTeExRVUZMUXl4UFFVRlBVaXhGUVVGSlRTeFBRVU5vUWtFc1JVRkJTVWdzUjBGQlRVVXNSVUZCU1VVc1MwRkJTME1zVDBGQlQwb3NWVUZCVlVVc1MwRkRlRU1zVDBGQlQwUXNSVUZCU1Vrc1MwRkJTeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuTjBjbWx1Wnk1eVlYY3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5QLFwiU3RyaW5nXCIse3JlcGVhdDpyZXF1aXJlKDExMil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VjbVZ3WldGMExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVVDSXNJbkpsY0dWaGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVVYwUWtRc1VVRkJVVUVzVVVGQlVVVXNSVUZCUnl4VFFVRlZMRU5CUlROQ1F5eFBRVUZSUml4UlFVRlJJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWMzUnlhVzVuTG5KbGNHVmhkQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoMTEwKShcInNtYWxsXCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyxcInNtYWxsXCIsXCJcIixcIlwiKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VjMjFoYkd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW1OeVpXRjBaVWhVVFV3aUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRaXhSUVVGVExGTkJRVlZETEVkQlF6TkRMRTlCUVU4c1YwRkRUQ3hQUVVGUFFTeEZRVUZYUXl4TFFVRk5MRkZCUVZNc1IwRkJTU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuTjBjbWx1Wnk1emJXRnNiQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxjb250ZXh0PXJlcXVpcmUoMTA5KSwkc3RhcnRzV2l0aD1cIlwiLnN0YXJ0c1dpdGg7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKnJlcXVpcmUoMzcpKFwic3RhcnRzV2l0aFwiKSxcIlN0cmluZ1wiLHtzdGFydHNXaXRoOmZ1bmN0aW9uKHQpe3ZhciByPWNvbnRleHQodGhpcyx0LFwic3RhcnRzV2l0aFwiKSxlPXRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLHIubGVuZ3RoKSksaT1TdHJpbmcodCk7cmV0dXJuICRzdGFydHNXaXRoPyRzdGFydHNXaXRoLmNhbGwocixpLGUpOnIuc2xpY2UoZSxlK2kubGVuZ3RoKT09PWl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YzNSaGNuUnpMWGRwZEdndWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKMGIweGxibWQwYUNJc0ltTnZiblJsZUhRaUxDSWtjM1JoY25SelYybDBhQ0lzSW5OMFlYSjBjMWRwZEdnaUxDSlFJaXdpUmlJc0luTmxZWEpqYUZOMGNtbHVaeUlzSW5Sb1lYUWlMQ0owYUdseklpd2lhVzVrWlhnaUxDSk5ZWFJvSWl3aWJXbHVJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWMyVmhjbU5vSWl3aVUzUnlhVzVuSWl3aVkyRnNiQ0lzSW5Oc2FXTmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hoUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZOQlFWZEVMRkZCUVZFc1owSkJRMjVDUlN4UlFVRlZSaXhSUVVGUkxIRkNRVVZzUWtjc1dVRkJZeXhIUVVGalF5eFhRVVZvUTB3c1VVRkJVVUVzVVVGQlVVMHNSVUZCU1U0c1VVRkJVVThzUlVGQlNVNHNVVUZCVVN4eFFrRkJVa0VzUTBGSVpDeGpRVWN3UkN4VFFVRlZMRU5CUTNCR1NTeFhRVUZaTEZOQlFXOUNSeXhIUVVNNVFpeEpRVUZKUXl4RlFVRlBUaXhSUVVGUlR5eExRVUZOUml4RlFVeFlMR05CVFZaSExFVkJRVkZVTEZOQlFWTlZMRXRCUVV0RExFbEJRVWxETEZWQlFWVkRMRTlCUVZNc1JVRkJTVVFzVlVGQlZTeFJRVUZCTEVWQlFXZENUQ3hGUVVGTFRTeFRRVU5vUmtNc1JVRkJVME1zVDBGQlQxUXNSMEZEY0VJc1QwRkJUMG9zV1VGRFNFRXNXVUZCV1dNc1MwRkJTMVFzUlVGQlRVOHNSVUZCVVV3c1IwRkRMMEpHTEVWQlFVdFZMRTFCUVUxU0xFVkJRVTlCTEVWQlFWRkxMRVZCUVU5RUxGVkJRVmxESWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVjM1J5YVc1bkxuTjBZWEowY3kxM2FYUm9MbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoMTEwKShcInN0cmlrZVwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJzdHJpa2VcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdWMzUnlhV3RsTG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0pqY21WaGRHVklWRTFNSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNVMEZCVlN4VFFVRlZReXhIUVVNMVF5eFBRVUZQTEZkQlEwd3NUMEZCVDBFc1JVRkJWME1zUzBGQlRTeFRRVUZWTEVkQlFVa2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1emRISnBibWN1YzNSeWFXdGxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoMTEwKShcInN1YlwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJzdWJcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdWMzVmlMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSmpjbVZoZEdWSVZFMU1JaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVU3hwUWtGQlVrRXNRMEZCTUVJc1RVRkJUeXhUUVVGVlF5eEhRVU42UXl4UFFVRlBMRmRCUTB3c1QwRkJUMEVzUlVGQlYwTXNTMEZCVFN4TlFVRlBMRWRCUVVraUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTV6ZEhKcGJtY3VjM1ZpTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKDExMCkoXCJzdXBcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLFwic3VwXCIsXCJcIixcIlwiKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VjM1Z3TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0pqY21WaGRHVklWRTFNSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNUVUZCVHl4VFFVRlZReXhIUVVONlF5eFBRVUZQTEZkQlEwd3NUMEZCVDBFc1JVRkJWME1zUzBGQlRTeE5RVUZQTEVkQlFVa2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1emRISnBibWN1YzNWd0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTMpKFwidHJpbVwiLGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiByKHRoaXMsMyl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1ZEhKcGJTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aUpIUnlhVzBpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSTEdsQ1FVRlNRU3hEUVVFd1FpeFBRVUZSTEZOQlFWVkRMRWRCUXpGRExFOUJRVThzVjBGRFRDeFBRVUZQUVN4RlFVRk5ReXhMUVVGTklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1YzNSeWFXNW5MblJ5YVcwdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdsb2JhbD1yZXF1aXJlKDQzKSxoYXM9cmVxdWlyZSg0NCksREVTQ1JJUFRPUlM9cmVxdWlyZSgzMiksJGV4cG9ydD1yZXF1aXJlKDM2KSxyZWRlZmluZT1yZXF1aXJlKDk0KSxNRVRBPXJlcXVpcmUoNjgpLktFWSwkZmFpbHM9cmVxdWlyZSgzOCksc2hhcmVkPXJlcXVpcmUoMTA1KSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKDEwMyksdWlkPXJlcXVpcmUoMTI2KSx3a3M9cmVxdWlyZSgxMzEpLHdrc0V4dD1yZXF1aXJlKDEzMCksd2tzRGVmaW5lPXJlcXVpcmUoMTI5KSxlbnVtS2V5cz1yZXF1aXJlKDM1KSxpc0FycmF5PXJlcXVpcmUoNTIpLGFuT2JqZWN0PXJlcXVpcmUoMTApLGlzT2JqZWN0PXJlcXVpcmUoNTQpLHRvSU9iamVjdD1yZXF1aXJlKDExOSksdG9QcmltaXRpdmU9cmVxdWlyZSgxMjIpLGNyZWF0ZURlc2M9cmVxdWlyZSg5MiksX2NyZWF0ZT1yZXF1aXJlKDczKSxnT1BORXh0PXJlcXVpcmUoNzgpLCRHT1BEPXJlcXVpcmUoNzcpLCREUD1yZXF1aXJlKDc0KSwka2V5cz1yZXF1aXJlKDgzKSxnT1BEPSRHT1BELmYsZFA9JERQLmYsZ09QTj1nT1BORXh0LmYsJFN5bWJvbD1nbG9iYWwuU3ltYm9sLCRKU09OPWdsb2JhbC5KU09OLF9zdHJpbmdpZnk9JEpTT04mJiRKU09OLnN0cmluZ2lmeSxISURERU49d2tzKFwiX2hpZGRlblwiKSxUT19QUklNSVRJVkU9d2tzKFwidG9QcmltaXRpdmVcIiksaXNFbnVtPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFN5bWJvbFJlZ2lzdHJ5PXNoYXJlZChcInN5bWJvbC1yZWdpc3RyeVwiKSxBbGxTeW1ib2xzPXNoYXJlZChcInN5bWJvbHNcIiksT1BTeW1ib2xzPXNoYXJlZChcIm9wLXN5bWJvbHNcIiksT2JqZWN0UHJvdG89T2JqZWN0LnByb3RvdHlwZSxVU0VfTkFUSVZFPVwiZnVuY3Rpb25cIj09dHlwZW9mICRTeW1ib2wsUU9iamVjdD1nbG9iYWwuUU9iamVjdCxzZXR0ZXI9IVFPYmplY3R8fCFRT2JqZWN0LnByb3RvdHlwZXx8IVFPYmplY3QucHJvdG90eXBlLmZpbmRDaGlsZCxzZXRTeW1ib2xEZXNjPURFU0NSSVBUT1JTJiYkZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9X2NyZWF0ZShkUCh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGRQKHRoaXMsXCJhXCIse3ZhbHVlOjd9KS5hfX0pKS5hfSk/ZnVuY3Rpb24oZSxyLHQpe3ZhciBvPWdPUEQoT2JqZWN0UHJvdG8scik7byYmZGVsZXRlIE9iamVjdFByb3RvW3JdLGRQKGUscix0KSxvJiZlIT09T2JqZWN0UHJvdG8mJmRQKE9iamVjdFByb3RvLHIsbyl9OmRQLHdyYXA9ZnVuY3Rpb24oZSl7dmFyIHI9QWxsU3ltYm9sc1tlXT1fY3JlYXRlKCRTeW1ib2wucHJvdG90eXBlKTtyZXR1cm4gci5faz1lLHJ9LGlzU3ltYm9sPVVTRV9OQVRJVkUmJlwic3ltYm9sXCI9PXR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mICRTeW1ib2x9LCRkZWZpbmVQcm9wZXJ0eT1mdW5jdGlvbihlLHIsdCl7cmV0dXJuIGU9PT1PYmplY3RQcm90byYmJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scyxyLHQpLGFuT2JqZWN0KGUpLHI9dG9QcmltaXRpdmUociwhMCksYW5PYmplY3QodCksaGFzKEFsbFN5bWJvbHMscik/KHQuZW51bWVyYWJsZT8oaGFzKGUsSElEREVOKSYmZVtISURERU5dW3JdJiYoZVtISURERU5dW3JdPSExKSx0PV9jcmVhdGUodCx7ZW51bWVyYWJsZTpjcmVhdGVEZXNjKDAsITEpfSkpOihoYXMoZSxISURERU4pfHxkUChlLEhJRERFTixjcmVhdGVEZXNjKDEse30pKSxlW0hJRERFTl1bcl09ITApLHNldFN5bWJvbERlc2MoZSxyLHQpKTpkUChlLHIsdCl9LCRkZWZpbmVQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUscil7YW5PYmplY3QoZSk7Zm9yKHZhciB0LG89ZW51bUtleXMocj10b0lPYmplY3QocikpLGk9MCxzPW8ubGVuZ3RoO3M+aTspJGRlZmluZVByb3BlcnR5KGUsdD1vW2krK10sclt0XSk7cmV0dXJuIGV9LCRwcm9wZXJ0eUlzRW51bWVyYWJsZT1mdW5jdGlvbihlKXt2YXIgcj1pc0VudW0uY2FsbCh0aGlzLGU9dG9QcmltaXRpdmUoZSwhMCkpO3JldHVybiEodGhpcz09PU9iamVjdFByb3RvJiZoYXMoQWxsU3ltYm9scyxlKSYmIWhhcyhPUFN5bWJvbHMsZSkpJiYoIShyfHwhaGFzKHRoaXMsZSl8fCFoYXMoQWxsU3ltYm9scyxlKXx8aGFzKHRoaXMsSElEREVOKSYmdGhpc1tISURERU5dW2VdKXx8cil9LCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I9ZnVuY3Rpb24oZSxyKXtpZihlPXRvSU9iamVjdChlKSxyPXRvUHJpbWl0aXZlKHIsITApLGUhPT1PYmplY3RQcm90b3x8IWhhcyhBbGxTeW1ib2xzLHIpfHxoYXMoT1BTeW1ib2xzLHIpKXt2YXIgdD1nT1BEKGUscik7cmV0dXJuIXR8fCFoYXMoQWxsU3ltYm9scyxyKXx8aGFzKGUsSElEREVOKSYmZVtISURERU5dW3JdfHwodC5lbnVtZXJhYmxlPSEwKSx0fX0sJGdldE93blByb3BlcnR5TmFtZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciByLHQ9Z09QTih0b0lPYmplY3QoZSkpLG89W10saT0wO3QubGVuZ3RoPmk7KWhhcyhBbGxTeW1ib2xzLHI9dFtpKytdKXx8cj09SElEREVOfHxyPT1NRVRBfHxvLnB1c2gocik7cmV0dXJuIG99LCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciByLHQ9ZT09PU9iamVjdFByb3RvLG89Z09QTih0P09QU3ltYm9sczp0b0lPYmplY3QoZSkpLGk9W10scz0wO28ubGVuZ3RoPnM7KSFoYXMoQWxsU3ltYm9scyxyPW9bcysrXSl8fHQmJiFoYXMoT2JqZWN0UHJvdG8scil8fGkucHVzaChBbGxTeW1ib2xzW3JdKTtyZXR1cm4gaX07VVNFX05BVElWRXx8KHJlZGVmaW5lKCgkU3ltYm9sPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIVwiKTt2YXIgZT11aWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLHI9ZnVuY3Rpb24odCl7dGhpcz09PU9iamVjdFByb3RvJiZyLmNhbGwoT1BTeW1ib2xzLHQpLGhhcyh0aGlzLEhJRERFTikmJmhhcyh0aGlzW0hJRERFTl0sZSkmJih0aGlzW0hJRERFTl1bZV09ITEpLHNldFN5bWJvbERlc2ModGhpcyxlLGNyZWF0ZURlc2MoMSx0KSl9O3JldHVybiBERVNDUklQVE9SUyYmc2V0dGVyJiZzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLGUse2NvbmZpZ3VyYWJsZTohMCxzZXQ6cn0pLHdyYXAoZSl9KS5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSwkR09QRC5mPSRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsJERQLmY9JGRlZmluZVByb3BlcnR5LHJlcXVpcmUoNzkpLmY9Z09QTkV4dC5mPSRnZXRPd25Qcm9wZXJ0eU5hbWVzLHJlcXVpcmUoODQpLmY9JHByb3BlcnR5SXNFbnVtZXJhYmxlLHJlcXVpcmUoODApLmY9JGdldE93blByb3BlcnR5U3ltYm9scyxERVNDUklQVE9SUyYmIXJlcXVpcmUoNjIpJiZyZWRlZmluZShPYmplY3RQcm90byxcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsJHByb3BlcnR5SXNFbnVtZXJhYmxlLCEwKSx3a3NFeHQuZj1mdW5jdGlvbihlKXtyZXR1cm4gd3JhcCh3a3MoZSkpfSksJGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5XKyRleHBvcnQuRiohVVNFX05BVElWRSx7U3ltYm9sOiRTeW1ib2x9KTtmb3IodmFyIGVzNlN5bWJvbHM9XCJoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlc1wiLnNwbGl0KFwiLFwiKSxqPTA7ZXM2U3ltYm9scy5sZW5ndGg+ajspd2tzKGVzNlN5bWJvbHNbaisrXSk7Zm9yKHZhciB3ZWxsS25vd25TeW1ib2xzPSRrZXlzKHdrcy5zdG9yZSksaz0wO3dlbGxLbm93blN5bWJvbHMubGVuZ3RoPms7KXdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiohVVNFX05BVElWRSxcIlN5bWJvbFwiLHtmb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSxlKz1cIlwiKT9TeW1ib2xSZWdpc3RyeVtlXTpTeW1ib2xSZWdpc3RyeVtlXT0kU3ltYm9sKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoIWlzU3ltYm9sKGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIHN5bWJvbCFcIik7Zm9yKHZhciByIGluIFN5bWJvbFJlZ2lzdHJ5KWlmKFN5bWJvbFJlZ2lzdHJ5W3JdPT09ZSlyZXR1cm4gcn0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7c2V0dGVyPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtzZXR0ZXI9ITF9fSksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiFVU0VfTkFUSVZFLFwiT2JqZWN0XCIse2NyZWF0ZTpmdW5jdGlvbihlLHIpe3JldHVybiB2b2lkIDA9PT1yP19jcmVhdGUoZSk6JGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShlKSxyKX0sZGVmaW5lUHJvcGVydHk6JGRlZmluZVByb3BlcnR5LGRlZmluZVByb3BlcnRpZXM6JGRlZmluZVByb3BlcnRpZXMsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsZ2V0T3duUHJvcGVydHlOYW1lczokZ2V0T3duUHJvcGVydHlOYW1lcyxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6JGdldE93blByb3BlcnR5U3ltYm9sc30pLCRKU09OJiYkZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqKCFVU0VfTkFUSVZFfHwkZmFpbHMoZnVuY3Rpb24oKXt2YXIgZT0kU3ltYm9sKCk7cmV0dXJuXCJbbnVsbF1cIiE9X3N0cmluZ2lmeShbZV0pfHxcInt9XCIhPV9zdHJpbmdpZnkoe2E6ZX0pfHxcInt9XCIhPV9zdHJpbmdpZnkoT2JqZWN0KGUpKX0pKSxcIkpTT05cIix7c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2Zvcih2YXIgcix0LG89W2VdLGk9MTthcmd1bWVudHMubGVuZ3RoPmk7KW8ucHVzaChhcmd1bWVudHNbaSsrXSk7aWYodD1yPW9bMV0sKGlzT2JqZWN0KHIpfHx2b2lkIDAhPT1lKSYmIWlzU3ltYm9sKGUpKXJldHVybiBpc0FycmF5KHIpfHwocj1mdW5jdGlvbihlLHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihyPXQuY2FsbCh0aGlzLGUscikpLCFpc1N5bWJvbChyKSlyZXR1cm4gcn0pLG9bMV09cixfc3RyaW5naWZ5LmFwcGx5KCRKU09OLG8pfX0pLCRTeW1ib2wucHJvdG90eXBlW1RPX1BSSU1JVElWRV18fHJlcXVpcmUoNDUpKCRTeW1ib2wucHJvdG90eXBlLFRPX1BSSU1JVElWRSwkU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mKSxzZXRUb1N0cmluZ1RhZygkU3ltYm9sLFwiU3ltYm9sXCIpLHNldFRvU3RyaW5nVGFnKE1hdGgsXCJNYXRoXCIsITApLHNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLFwiSlNPTlwiLCEwKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZVcxaWIyd3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWNtVnhkV2x5WlNJc0ltaGhjeUlzSWtSRlUwTlNTVkJVVDFKVElpd2lKR1Y0Y0c5eWRDSXNJbkpsWkdWbWFXNWxJaXdpVFVWVVFTSXNJa3RGV1NJc0lpUm1ZV2xzY3lJc0luTm9ZWEpsWkNJc0luTmxkRlJ2VTNSeWFXNW5WR0ZuSWl3aWRXbGtJaXdpZDJ0eklpd2lkMnR6UlhoMElpd2lkMnR6UkdWbWFXNWxJaXdpWlc1MWJVdGxlWE1pTENKcGMwRnljbUY1SWl3aVlXNVBZbXBsWTNRaUxDSnBjMDlpYW1WamRDSXNJblJ2U1U5aWFtVmpkQ0lzSW5SdlVISnBiV2wwYVhabElpd2lZM0psWVhSbFJHVnpZeUlzSWw5amNtVmhkR1VpTENKblQxQk9SWGgwSWl3aUpFZFBVRVFpTENJa1JGQWlMQ0lrYTJWNWN5SXNJbWRQVUVRaUxDSm1JaXdpWkZBaUxDSm5UMUJPSWl3aUpGTjViV0p2YkNJc0lsTjViV0p2YkNJc0lpUktVMDlPSWl3aVNsTlBUaUlzSWw5emRISnBibWRwWm5raUxDSnpkSEpwYm1kcFpua2lMQ0pJU1VSRVJVNGlMQ0pVVDE5UVVrbE5TVlJKVmtVaUxDSnBjMFZ1ZFcwaUxDSndjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU0lzSWxONWJXSnZiRkpsWjJsemRISjVJaXdpUVd4c1UzbHRZbTlzY3lJc0lrOVFVM2x0WW05c2N5SXNJazlpYW1WamRGQnliM1J2SWl3aVQySnFaV04wSWl3aWNISnZkRzkwZVhCbElpd2lWVk5GWDA1QlZFbFdSU0lzSWxGUFltcGxZM1FpTENKelpYUjBaWElpTENKbWFXNWtRMmhwYkdRaUxDSnpaWFJUZVcxaWIyeEVaWE5qSWl3aVoyVjBJaXdpZEdocGN5SXNJblpoYkhWbElpd2lZU0lzSW1sMElpd2lhMlY1SWl3aVJDSXNJbkJ5YjNSdlJHVnpZeUlzSW5keVlYQWlMQ0owWVdjaUxDSnplVzBpTENKZmF5SXNJbWx6VTNsdFltOXNJaXdpYVhSbGNtRjBiM0lpTENJa1pHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGJuVnRaWEpoWW14bElpd2lKR1JsWm1sdVpWQnliM0JsY25ScFpYTWlMQ0pRSWl3aWEyVjVjeUlzSW1raUxDSnNJaXdpYkdWdVozUm9JaXdpSkhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bElpd2lSU0lzSW1OaGJHd2lMQ0lrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpSkdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNaUxDSnVZVzFsY3lJc0luSmxjM1ZzZENJc0luQjFjMmdpTENJa1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpJaXdpU1ZOZlQxQWlMQ0pVZVhCbFJYSnliM0lpTENKaGNtZDFiV1Z1ZEhNaUxDSWtjMlYwSWl3aVkyOXVabWxuZFhKaFlteGxJaXdpYzJWMElpd2libUZ0WlNJc0lrY2lMQ0pYSWl3aVJpSXNJbVZ6TmxONWJXSnZiSE1pTENKemNHeHBkQ0lzSW1vaUxDSjNaV3hzUzI1dmQyNVRlVzFpYjJ4eklpd2ljM1J2Y21VaUxDSnJJaXdpVXlJc0ltWnZjaUlzSW10bGVVWnZjaUlzSW5WelpWTmxkSFJsY2lJc0luVnpaVk5wYlhCc1pTSXNJbU55WldGMFpTSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5SXNJbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpSXNJbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1pTENKblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITWlMQ0p5WlhCc1lXTmxjaUlzSWlSeVpYQnNZV05sY2lJc0ltRnlaM01pTENKaGNIQnNlU0lzSW5aaGJIVmxUMllpTENKTllYUm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEVsQlFVMUVMRkZCUVZFc1ZVRkRaRVVzV1VGQlkwWXNVVUZCVVN4clFrRkRkRUpITEZGQlFWVklMRkZCUVZFc1lVRkRiRUpKTEZOQlFWZEtMRkZCUVZFc1pVRkRia0pMTEV0QlFVOU1MRkZCUVZFc1YwRkJWMDBzU1VGRE1VSkRMRTlCUVZOUUxGRkJRVkVzV1VGRGFrSlJMRTlCUVZOU0xGRkJRVkVzWVVGRGFrSlRMR1ZCUVdsQ1ZDeFJRVUZSTEhkQ1FVTjZRbFVzU1VGQlRWWXNVVUZCVVN4VlFVTmtWeXhKUVVGTldDeFJRVUZSTEZWQlEyUlpMRTlCUVZOYUxGRkJRVkVzWTBGRGFrSmhMRlZCUVZsaUxGRkJRVkVzYVVKQlEzQkNZeXhUUVVGWFpDeFJRVUZSTEdkQ1FVTnVRbVVzVVVGQlZXWXNVVUZCVVN4bFFVTnNRbWRDTEZOQlFWZG9RaXhSUVVGUkxHZENRVU51UW1sQ0xGTkJRVmRxUWl4UlFVRlJMR2RDUVVOdVFtdENMRlZCUVZsc1FpeFJRVUZSTEdsQ1FVTndRbTFDTEZsQlFXTnVRaXhSUVVGUkxHMUNRVU4wUW05Q0xGZEJRV0Z3UWl4UlFVRlJMRzlDUVVOeVFuRkNMRkZCUVZWeVFpeFJRVUZSTEc5Q1FVTnNRbk5DTEZGQlFWVjBRaXhSUVVGUkxITkNRVU5zUW5WQ0xFMUJRVkYyUWl4UlFVRlJMR3RDUVVOb1FuZENMRWxCUVUxNFFpeFJRVUZSTEdkQ1FVTmtlVUlzVFVGQlVYcENMRkZCUVZFc2EwSkJRMmhDTUVJc1MwRkJUMGdzVFVGQlRVa3NSVUZEWWtNc1IwRkJTMG9zU1VGQlNVY3NSVUZEVkVVc1MwRkJUMUFzVVVGQlVVc3NSVUZEWmtjc1VVRkJWUzlDTEU5QlFVOW5ReXhQUVVOcVFrTXNUVUZCVVdwRExFOUJRVTlyUXl4TFFVTm1ReXhYUVVGaFJpeFBRVUZUUVN4TlFVRk5SeXhWUVVVMVFrTXNUMEZCVTNwQ0xFbEJRVWtzVjBGRFlqQkNMR0ZCUVdVeFFpeEpRVUZKTEdWQlEyNUNNa0lzVDBGQlV5eEhRVUZIUXl4eFFrRkRXa01zWlVGQmFVSm9ReXhQUVVGUExHMUNRVU40UW1sRExGZEJRV0ZxUXl4UFFVRlBMRmRCUTNCQ2EwTXNWVUZCV1d4RExFOUJRVThzWTBGRGJrSnRReXhaUVVGalF5eFBRVUZuUWtNc1ZVRkRPVUpETEZkQlFTdENMRzFDUVVGWWFFSXNVVUZEY0VKcFFpeFJRVUZWYUVRc1QwRkJUMmRFTEZGQlJXcENReXhSUVVGVlJDeFZRVUZaUVN4UlFVRnBRa1lzV1VGQlRVVXNVVUZCYVVKR0xGVkJRVVZKTEZWQlIyaEZReXhqUVVGblFtaEVMR0ZCUVdWTExFOUJRVThzVjBGRGVFTXNUMEZGVXl4SFFVWkdZeXhSUVVGUlR5eEhRVUZITEVkQlFVa3NTVUZCU3l4RFFVTjZRblZDTEVsQlFVc3NWMEZCWXl4UFFVRlBka0lzUjBGQlIzZENMRXRCUVUwc1NVRkJTeXhEUVVGRlF5eE5RVUZQTEVsQlFVdERMRTFCUTNCRVFTeEpRVU5FTEZOQlFWVkRMRVZCUVVsRExFVkJRVXRETEVkQlEzUkNMRWxCUVVsRExFVkJRVmxvUXl4TFFVRkxhVUlzV1VGQllXRXNSMEZET1VKRkxGVkJRV3RDWml4WlFVRlpZU3hIUVVOc1F6VkNMRWRCUVVjeVFpeEZRVUZKUXl4RlFVRkxReXhIUVVOU1F5eEhRVUZoU0N4SlFVRlBXaXhoUVVGaFppeEhRVUZIWlN4WlFVRmhZU3hGUVVGTFJTeEpRVU40UkRsQ0xFZEJSVUVyUWl4TFFVRlBMRk5CUVZWRExFZEJRMjVDTEVsQlFVbERMRVZCUVUxd1FpeFhRVUZYYlVJc1IwRkJUM1pETEZGQlFWRlRMRkZCUVdsQ1pTeFhRVVZ5UkN4UFFVUkJaMElzUlVGQlNVTXNSMEZCUzBZc1JVRkRSa01zUjBGSFRFVXNVMEZCVjJwQ0xGbEJRWGxETEdsQ1FVRndRbWhDTEZGQlFWRnJReXhUUVVGMVFpeFRRVUZWVkN4SFFVTXpSU3hOUVVGdlFpeHBRa0ZCVGtFc1IwRkRXaXhUUVVGVlFTeEhRVU5hTEU5QlFVOUJMR0ZCUVdONlFpeFRRVWR1UW0xRExHZENRVUZyUWl4VFFVRjNRbFlzUlVGQlNVTXNSVUZCUzBNc1IwRkxja1FzVDBGS1NVWXNTVUZCVDFvc1lVRkJZWE5DTEdkQ1FVRm5RblpDTEZWQlFWZGpMRVZCUVV0RExFZEJRM2hFZWtNc1UwRkJVM1ZETEVkQlExUkRMRVZCUVUxeVF5eFpRVUZaY1VNc1IwRkJRVUVzUjBGRGJFSjRReXhUUVVGVGVVTXNSMEZEVEhoRUxFbEJRVWwzUXl4WFFVRlpaU3hKUVVOaVF5eEZRVUZGVXl4WlFVbEVha1VzU1VGQlNYTkVMRVZCUVVsdVFpeFRRVUZYYlVJc1JVRkJSMjVDTEZGQlFWRnZRaXhMUVVGTlJDeEZRVUZIYmtJc1VVRkJVVzlDTEVsQlFVRkJMRWRCUTI1RVF5eEZRVUZKY0VNc1VVRkJVVzlETEVWQlFVY3NRMEZCUlZNc1YwRkJXVGxETEZkQlFWY3NSMEZCUVN4UFFVcHVRMjVDTEVsQlFVbHpSQ3hGUVVGSmJrSXNVMEZCVTFJc1IwRkJSekpDTEVWQlFVbHVRaXhQUVVGUmFFSXNWMEZCVnl4RlFVRkhMRXRCUTI1RWJVTXNSVUZCUjI1Q0xGRkJRVkZ2UWl4SlFVRkJRU3hIUVVsS1RpeGpRVUZqU3l4RlFVRkpReXhGUVVGTFF5eEpRVU42UWpkQ0xFZEJRVWN5UWl4RlFVRkpReXhGUVVGTFF5eEpRVVZ1UWxVc2EwSkJRVzlDTEZOQlFUQkNXaXhGUVVGSllTeEhRVU53UkhCRUxGTkJRVk4xUXl4SFFVdFVMRWxCU2tFc1NVRkhTVU1zUlVGSVFXRXNSVUZCVDNaRUxGTkJRVk56UkN4RlFVRkpiRVFzVlVGQlZXdEVMRWxCUXpsQ1JTeEZRVUZKTEVWQlEwcERMRVZCUVVsR0xFVkJRVXRITEU5QlJVNUVMRVZCUVVsRUxFZEJRVWRNTEdkQ1FVRm5RbFlzUlVGQlNVTXNSVUZCVFdFc1JVRkJTME1zUzBGQlRVWXNSVUZCUlZvc1NVRkRja1FzVDBGQlQwUXNSMEZMVEd0Q0xITkNRVUYzUWl4VFFVRTRRbXBDTEVkQlEzaEVMRWxCUVVsclFpeEZRVUZKY0VNc1QwRkJUM0ZETEV0QlFVdDJRaXhMUVVGTlNTeEZRVUZOY2tNc1dVRkJXWEZETEVkQlFVRkJMRWxCUXpWRExGRkJRVWxLTEU5QlFWTlVMR0ZCUVdVeFF5eEpRVUZKZDBNc1YwRkJXV1VzUzBGQlUzWkVMRWxCUVVsNVF5eFZRVUZYWXl4UlFVTTNSR3RDTEVsQlFVMTZSU3hKUVVGSmJVUXNTMEZCVFVrc1MwRkJVM1pFTEVsQlFVbDNReXhYUVVGWlpTeEpRVUZSZGtRc1NVRkJTVzFFTEV0QlFVMW9RaXhUUVVGWFowSXNTMEZCUzJoQ0xGRkJRVkZ2UWl4TFFVRlBhMElzU1VGRkwwWkZMREJDUVVFMFFpeFRRVUZyUTNKQ0xFVkJRVWxETEVkQlIzQkZMRWRCUmtGRUxFVkJRVXR5UXl4VlFVRlZjVU1zUjBGRFprTXNSVUZCVFhKRExGbEJRVmx4UXl4SFFVRkJRU3hIUVVOa1JDeEpRVUZQV2l4alFVRmxNVU1zU1VGQlNYZERMRmRCUVZsbExFbEJRVk4yUkN4SlFVRkplVU1zVlVGQlYyTXNSMEZCYkVVc1EwRkRRU3hKUVVGSlF5eEZRVUZKTDBJc1MwRkJTelpDTEVWQlFVbERMRWRCUldwQ0xFOUJSRWxETEVsQlFVdDRSQ3hKUVVGSmQwTXNWMEZCV1dVc1NVRkJWWFpFTEVsQlFVbHpSQ3hGUVVGSmJrSXNVMEZCVjIxQ0xFVkJRVWR1UWl4UlFVRlJiMElzUzBGQlQwTXNSVUZCUlZNc1dVRkJRVUVzUjBGRGJrVlVMRWxCUlV4dlFpeHhRa0ZCZFVJc1UwRkJOa0owUWl4SFFVdDBSQ3hKUVVwQkxFbEJSMGxETEVWQlNFRnpRaXhGUVVGUmFrUXNTMEZCUzFnc1ZVRkJWWEZETEVsQlEzWkNkMElzUlVGQlV5eEhRVU5VVkN4RlFVRkpMRVZCUlVSUkxFVkJRVTFPTEU5QlFWTkdMRWRCUTJaeVJTeEpRVUZKZDBNc1YwRkJXV1VzUlVGQlRYTkNMRVZCUVUxU0xFOUJRVk5rTEVkQlFVOXdRaXhSUVVGVmIwSXNSMEZCVDI1RUxFMUJRVTB3UlN4RlFVRlBReXhMUVVGTGVFSXNSMEZEY0VZc1QwRkJUM1ZDTEVkQlJWQkZMSFZDUVVGNVFpeFRRVUVyUWpGQ0xFZEJUVEZFTEVsQlRFRXNTVUZKU1VNc1JVRktRVEJDTEVWQlFWRXpRaXhKUVVGUFdpeFpRVU5tYlVNc1JVRkJVV3BFTEV0QlFVdHhSQ3hGUVVGUmVFTXNWVUZCV1hoQ0xGVkJRVlZ4UXl4SlFVTXpRM2RDTEVWQlFWTXNSMEZEVkZRc1JVRkJTU3hGUVVWRVVTeEZRVUZOVGl4UFFVRlRSaXhKUVVOb1FuSkZMRWxCUVVsM1F5eFhRVUZaWlN4RlFVRk5jMElzUlVGQlRWSXNUMEZCVlZrc1NVRkJVV3BHTEVsQlFVa3dReXhaUVVGaFlTeEpRVUZqZFVJc1JVRkJUME1zUzBGQlMzWkRMRmRCUVZkbExFbEJRM2hITEU5QlFVOTFRaXhIUVVsT2FrTXNZVUZaU0RGRExGVkJXRUV3UWl4UlFVRlZMRmRCUTFJc1IwRkJTWE5DTEdkQ1FVRm5RblJDTEZGQlFWTXNUVUZCVFhGRUxGVkJRVlVzWjBOQlF6ZERMRWxCUVVsMlFpeEZRVUZOYkVRc1NVRkJTVEJGTEZWQlFWVmFMRTlCUVZNc1JVRkJTVmtzVlVGQlZTeFJRVUZCTEVkQlF6TkRReXhGUVVGUExGTkJRVlZvUXl4SFFVTm1SQ3hQUVVGVFZDeGhRVUZoTUVNc1JVRkJTMVlzUzBGQlMycERMRlZCUVZkWExFZEJRek5EY0VRc1NVRkJTVzFFTEV0QlFVMW9RaXhUUVVGWGJrTXNTVUZCU1cxRUxFdEJRVXRvUWl4UlFVRlRkMElzUzBGQlRWSXNTMEZCUzJoQ0xGRkJRVkYzUWl4SlFVRkJRU3hIUVVNNVJGWXNZMEZCWTBVc1MwRkJUVkVzUlVGQlMzaERMRmRCUVZjc1JVRkJSMmxETEV0QlIzcERMRTlCUkVsdVJDeGhRVUZsT0VNc1VVRkJVVVVzWTBGQlkxQXNXVUZCWVdsQ0xFVkJRVXNzUTBGQlJUQkNMR05CUVVGQkxFVkJRVzlDUXl4SlFVRkxSaXhKUVVNdlJURkNMRXRCUVV0RExFdEJSVmxtTEZWQlFVY3NWMEZCV1N4WFFVTjJReXhQUVVGUFR5eExRVUZMVlN4TFFVZGtka01zVFVGQlRVa3NSVUZCU1dsRUxEQkNRVU5XY0VRc1NVRkJTVWNzUlVGQlNYTkRMR2RDUVVOU2FrVXNVVUZCVVN4clFrRkJhMEl5UWl4RlFVRkpUQ3hSUVVGUlN5eEZRVUZKYTBRc2NVSkJRekZETjBVc1VVRkJVU3hwUWtGQmFVSXlRaXhGUVVGSk9FTXNjMEpCUXpkQ2VrVXNVVUZCVVN4clFrRkJhMEl5UWl4RlFVRkpjMFFzZFVKQlJURkNMMFVzWTBGQlowSkdMRkZCUVZFc1pVRkRNVUpKTEZOQlFWTjFReXhaUVVGaExIVkNRVUYzUWpoQ0xIVkNRVUZCUVN4SFFVZG9SRGRFTEU5QlFVOWxMRVZCUVVrc1UwRkJWVFpFTEVkQlEyNUNMRTlCUVU4M1FpeExRVUZMYUVRc1NVRkJTVFpGTEUxQlNYQkNja1lzVVVGQlVVRXNVVUZCVVhOR0xFVkJRVWwwUml4UlFVRlJkVVlzUlVGQlNYWkdMRkZCUVZGM1JpeEhRVUZMTjBNc1YwRkJXU3hEUVVGRlppeFBRVUZSUkN4VlFVVnVSU3hKUVVGTExFbEJRVWs0UkN4WFFVRmhMR2xJUVVkd1FrTXNUVUZCVFN4TFFVRk5ReXhGUVVGSkxFVkJRVWRHTEZkQlFWZHdRaXhQUVVGVGMwSXNSMEZCUjI1R0xFbEJRVWxwUml4WFFVRlhSU3hOUVVVelJDeEpRVUZMTEVsQlFVbERMR2xDUVVGdFFuUkZMRTFCUVUxa0xFbEJRVWx4Uml4UFFVRlJReXhGUVVGSkxFVkJRVWRHTEdsQ1FVRnBRblpDTEU5QlFWTjVRaXhIUVVGSmNFWXNWVUZCVld0R0xHbENRVUZwUWtVc1RVRkZPVWM1Uml4UlFVRlJRU3hSUVVGUkswWXNSVUZCU1M5R0xGRkJRVkYzUml4SFFVRkxOME1zVjBGQldTeFRRVUZWTEVOQlJYSkVjVVFzU1VGQlR5eFRRVUZWTTBNc1IwRkRaaXhQUVVGUGRrUXNTVUZCU1hWRExHVkJRV2RDWjBJc1IwRkJUeXhKUVVNNVFtaENMR1ZCUVdWblFpeEhRVU5tYUVJc1pVRkJaV2RDTEVkQlFVOHhRaXhSUVVGUk1FSXNTVUZIY0VNMFF5eFBRVUZSTEZOQlFXZENka01zUjBGRGRFSXNTVUZCUzBVc1UwRkJVMFlzUjBGQlRTeE5RVUZOYzBJc1ZVRkJWWFJDTEVWQlFVMHNjVUpCUXpGRExFbEJRVXNzU1VGQlNVd3NTMEZCVDJoQ0xHVkJRV2RDTEVkQlFVbEJMR1ZCUVdWblFpeExRVUZUU3l4RlFVRkxMRTlCUVU5TUxFZEJSVEZGTmtNc1ZVRkJWeXhYUVVGamNrUXNVVUZCUVVFc1IwRkRla0p6UkN4VlFVRlhMRmRCUVdOMFJDeFJRVUZCUVN4TFFVY3pRamRETEZGQlFWRkJMRkZCUVZFclJpeEZRVUZKTDBZc1VVRkJVWGRHTEVkQlFVczNReXhYUVVGWkxGTkJRVlVzUTBGRmNrUjVSQ3hQUVM5R1dTeFRRVUZuUW1oRUxFVkJRVWxoTEVkQlEyaERMRmxCUVVFc1NVRkJUMEVzUlVGQmEwSXZReXhSUVVGUmEwTXNSMEZCVFZrc2EwSkJRV3RDT1VNc1VVRkJVV3RETEVkQlFVdGhMRWxCWjBkMFJXOURMR1ZCUVdkQ2RrTXNaMEpCUldoQ2QwTXNhVUpCUVd0Q2RFTXNhMEpCUld4Q2RVTXNlVUpCUVRCQ09VSXNNRUpCUlRGQ0swSXNiMEpCUVhGQ09VSXNjVUpCUlhKQ0swSXNjMEpCUVhWQ00wSXNlVUpCU1hwQ2FrUXNUMEZCVXpkQ0xGRkJRVkZCTEZGQlFWRXJSaXhGUVVGSkwwWXNVVUZCVVhkR0xFbEJRVTAzUXl4WlFVRmpka01zVDBGQlR5eFhRVU01UkN4SlFVRkpNa1lzUlVGQlNYQkZMRlZCU1ZJc1RVRkJNRUlzVlVGQmJrSkpMRmRCUVZjc1EwRkJRMmRGTEV0QlFUSkRMRTFCUVhoQ2FFVXNWMEZCVnl4RFFVRkZiMElzUlVGQlJ6UkRMRXRCUVhsRExFMUJRWHBDYUVVc1YwRkJWMVVzVDBGQlQzTkVMRTlCUTNKR0xFOUJRVkVzUTBGRFdDOUVMRlZCUVZjc1UwRkJiVUp2UWl4SFFVazFRaXhKUVVoQkxFbEJSVWx6UkN4RlFVRlZReXhGUVVaV1F5eEZRVUZQTEVOQlFVTjRSQ3hIUVVOU1pTeEZRVUZKTEVWQlJVUmpMRlZCUVZWYUxFOUJRVk5HTEVkQlFVZDVReXhGUVVGTEwwSXNTMEZCUzBrc1ZVRkJWV1FzVFVGRmFrUXNSMEZFUVhkRExFVkJRVmxFTEVWQlFWZEZMRVZCUVVzc1NVRkRka0k1Uml4VFFVRlRORVlzVTBGQlFVRXNTVUZCWVhSRUxFdEJRVzlDVVN4VFFVRlRVaXhIUVUxNFJDeFBRVXhMZUVNc1VVRkJVVGhHTEV0QlFWZEJMRVZCUVZjc1UwRkJWWEpFTEVWQlFVdElMRWRCUldoRUxFZEJSSGRDTEcxQ1FVRmllVVFzU1VGQmVVSjZSQ3hGUVVGUmVVUXNSVUZCVlc1RExFdEJRVXQyUWl4TFFVRk5TU3hGUVVGTFNDeExRVU5xUlZVc1UwRkJVMVlzUjBGQlVTeFBRVUZQUVN4SlFVVXZRakJFTEVWQlFVc3NSMEZCUzBZc1JVRkRTRE5GTEZkQlFWYzRSU3hOUVVGTmFFWXNUVUZCVHl0RkxFMUJTMjVEYWtZc1VVRkJhVUpsTEZWQlFVVlNMR1ZCUVdsQ2NrTXNVVUZCVVN4VlFVRlNRU3hEUVVGdFFqaENMRkZCUVdsQ1pTeFZRVUZIVWl4aFFVRmpVQ3hSUVVGcFFtVXNWVUZCUlc5RkxGTkJSVFZIZUVjc1pVRkJaWEZDTEZGQlFWTXNWVUZGZUVKeVFpeGxRVUZsZVVjc1MwRkJUU3hSUVVGQkxFZEJSWEpDZWtjc1pVRkJaVllzVDBGQlQydERMRXRCUVUwc1VVRkJRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuTjViV0p2YkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkdHlwZWQ9cmVxdWlyZSgxMjUpLGJ1ZmZlcj1yZXF1aXJlKDEyNCksYW5PYmplY3Q9cmVxdWlyZSgxMCksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoMTE2KSx0b0xlbmd0aD1yZXF1aXJlKDEyMCksaXNPYmplY3Q9cmVxdWlyZSg1NCksQXJyYXlCdWZmZXI9cmVxdWlyZSg0MykuQXJyYXlCdWZmZXIsc3BlY2llc0NvbnN0cnVjdG9yPXJlcXVpcmUoMTA2KSwkQXJyYXlCdWZmZXI9YnVmZmVyLkFycmF5QnVmZmVyLCREYXRhVmlldz1idWZmZXIuRGF0YVZpZXcsJGlzVmlldz0kdHlwZWQuQUJWJiZBcnJheUJ1ZmZlci5pc1ZpZXcsJHNsaWNlPSRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UsVklFVz0kdHlwZWQuVklFVzskZXhwb3J0KCRleHBvcnQuRyskZXhwb3J0LlcrJGV4cG9ydC5GKihBcnJheUJ1ZmZlciE9PSRBcnJheUJ1ZmZlcikse0FycmF5QnVmZmVyOiRBcnJheUJ1ZmZlcn0pLCRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiohJHR5cGVkLkNPTlNUUixcIkFycmF5QnVmZmVyXCIse2lzVmlldzpmdW5jdGlvbihlKXtyZXR1cm4gJGlzVmlldyYmJGlzVmlldyhlKXx8aXNPYmplY3QoZSkmJlZJRVcgaW4gZX19KSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LlUrJGV4cG9ydC5GKnJlcXVpcmUoMzgpKGZ1bmN0aW9uKCl7cmV0dXJuIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSx2b2lkIDApLmJ5dGVMZW5ndGh9KSxcIkFycmF5QnVmZmVyXCIse3NsaWNlOmZ1bmN0aW9uKGUscil7aWYodm9pZCAwIT09JHNsaWNlJiZ2b2lkIDA9PT1yKXJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSxlKTtmb3IodmFyIHQ9YW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aCxpPXRvQWJzb2x1dGVJbmRleChlLHQpLHU9dG9BYnNvbHV0ZUluZGV4KHZvaWQgMD09PXI/dDpyLHQpLGY9bmV3KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKHUtaSkpLG89bmV3ICREYXRhVmlldyh0aGlzKSxzPW5ldyAkRGF0YVZpZXcoZiksYT0wO2k8dTspcy5zZXRVaW50OChhKyssby5nZXRVaW50OChpKyspKTtyZXR1cm4gZn19KSxyZXF1aXJlKDEwMikoXCJBcnJheUJ1ZmZlclwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTUwZVhCbFpDNWhjbkpoZVMxaWRXWm1aWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0lrZEhsd1pXUWlMQ0ppZFdabVpYSWlMQ0poYms5aWFtVmpkQ0lzSW5SdlFXSnpiMngxZEdWSmJtUmxlQ0lzSW5SdlRHVnVaM1JvSWl3aWFYTlBZbXBsWTNRaUxDSkJjbkpoZVVKMVptWmxjaUlzSW5Od1pXTnBaWE5EYjI1emRISjFZM1J2Y2lJc0lpUkJjbkpoZVVKMVptWmxjaUlzSWlSRVlYUmhWbWxsZHlJc0lrUmhkR0ZXYVdWM0lpd2lKR2x6Vm1sbGR5SXNJa0ZDVmlJc0ltbHpWbWxsZHlJc0lpUnpiR2xqWlNJc0luQnliM1J2ZEhsd1pTSXNJbk5zYVdObElpd2lWa2xGVnlJc0lrY2lMQ0pYSWl3aVJpSXNJbE1pTENKRFQwNVRWRklpTENKcGRDSXNJbEFpTENKVklpd2lZbmwwWlV4bGJtZDBhQ0lzSW5OMFlYSjBJaXdpWlc1a0lpd2lZMkZzYkNJc0luUm9hWE1pTENKc1pXNGlMQ0ptYVhKemRDSXNJbVpwYmlJc0luSmxjM1ZzZENJc0luWnBaWGRUSWl3aWRtbGxkMVFpTENKcGJtUmxlQ0lzSW5ObGRGVnBiblE0SWl3aVoyVjBWV2x1ZERnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNUMEZCVTBRc1VVRkJVU3haUVVOcVFrVXNUMEZCVTBZc1VVRkJVU3h0UWtGRGFrSkhMRk5CUVZkSUxGRkJRVkVzWjBKQlEyNUNTU3huUWtGQmEwSktMRkZCUVZFc2QwSkJRekZDU3l4VFFVRlhUQ3hSUVVGUkxHZENRVU51UWswc1UwRkJWMDRzVVVGQlVTeG5Ra0ZEYmtKUExGbEJRV05RTEZGQlFWRXNZVUZCWVU4c1dVRkRia05ETEcxQ1FVRnhRbElzVVVGQlVTd3dRa0ZETjBKVExHRkJRV1ZRTEU5QlFVOUxMRmxCUTNSQ1J5eFZRVUZaVWl4UFFVRlBVeXhUUVVOdVFrTXNVVUZCVlZnc1QwRkJUMWtzUzBGQlQwNHNXVUZCV1U4c1QwRkRjRU5ETEU5QlFWTk9MR0ZCUVdGUExGVkJRVlZETEUxQlEyaERReXhMUVVGUGFrSXNUMEZCVDJsQ0xFdEJSMnhDYmtJc1VVRkJVVUVzVVVGQlVXOUNMRVZCUVVsd1FpeFJRVUZSY1VJc1JVRkJTWEpDTEZGQlFWRnpRaXhIUVVGTFpDeGpRVUZuUWtVc1kwRkJaU3hEUVVGRlJpeFpRVUZoUlN4bFFVVXpSbFlzVVVGQlVVRXNVVUZCVVhWQ0xFVkJRVWwyUWl4UlFVRlJjMElzUjBGQlMzQkNMRTlCUVU5elFpeFBRVXB5UWl4alFVa3lReXhEUVVVMVJGUXNUMEZCVVN4VFFVRm5RbFVzUjBGRGRFSXNUMEZCVDFvc1UwRkJWMEVzVVVGQlVWa3NTVUZCVDJ4Q0xGTkJRVk5yUWl4SlFVRlBUaXhSUVVGUlRTeExRVWszUkhwQ0xGRkJRVkZCTEZGQlFWRXdRaXhGUVVGSk1VSXNVVUZCVVRKQ0xFVkJRVWt6UWl4UlFVRlJjMElzUlVGQlNYSkNMRkZCUVZFc1YwRkJVa0VzUTBGQmIwSXNWMEZET1VRc1QwRkJVU3hKUVVGSlV5eGhRVUZoTEVkQlFVZFJMRTFCUVUwc1QwRkJRU3hIUVVGalZTeGhRVm92UWl4alFXRkVMRU5CUldoQ1ZpeE5RVUZQTEZOQlFXVlhMRVZCUVU5RExFZEJRek5DTEZGQlFVRXNTVUZCU1dRc1lVRkJRVUVzU1VGQmQwSmpMRVZCUVcxQ0xFOUJRVTlrTEU5QlFVOWxMRXRCUVVzelFpeFRRVUZUTkVJc1RVRkJUMGdzUjBGUmJFWXNTVUZRUVN4SlFVRkpTU3hGUVVGTk4wSXNVMEZCVXpSQ0xFMUJRVTFLTEZkQlEzSkNUU3hGUVVGUk4wSXNaMEpCUVdkQ2QwSXNSVUZCVDBrc1IwRkRMMEpGTEVWQlFVMDVRaXh4UWtGQlFVRXNTVUZCWjBKNVFpeEZRVUZ2UWtjc1JVRkJUVWdzUlVGQlMwY3NSMEZEY2tSSExFVkJRVk1zU1VGQlN6TkNMRzFDUVVGdFFuVkNMRXRCUVUxMFFpeGpRVUU1UWl4RFFVRTJRMG9zVTBGQlV6WkNMRVZCUVUxRUxFbEJRM0pGUnl4RlFVRlJMRWxCUVVreFFpeFZRVUZWY1VJc1RVRkRkRUpOTEVWQlFWRXNTVUZCU1ROQ0xGVkJRVlY1UWl4SFFVTjBRa2NzUlVGQlVTeEZRVU5NVEN4RlFVRlJReXhIUVVOaVJ5eEZRVUZOUlN4VFFVRlRSQ3hKUVVGVFJpeEZRVUZOU1N4VFFVRlRVQ3hOUVVOMlF5eFBRVUZQUlN4TFFVbGlia01zVVVGQlVTeHBRa0ZCVWtFc1EwRTVRbTFDSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVkSGx3WldRdVlYSnlZWGt0WW5WbVptVnlMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuVyskZXhwb3J0LkYqIXJlcXVpcmUoMTI1KS5BQlYse0RhdGFWaWV3OnJlcXVpcmUoMTI0KS5EYXRhVmlld30pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1a1lYUmhMWFpwWlhjdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKSElpd2lWeUlzSWtZaUxDSkJRbFlpTENKRVlYUmhWbWxsZHlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTjBRa1FzVVVGQlVVRXNVVUZCVVVVc1JVRkJTVVlzVVVGQlVVY3NSVUZCU1Vnc1VVRkJVVWtzUjBGQlMwZ3NVVUZCVVN4WlFVRlpTU3hKUVVGTExFTkJRM0JGUXl4VFFVRlZUQ3hSUVVGUkxHMUNRVUZ0UWtzaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOaTUwZVhCbFpDNWtZWFJoTFhacFpYY3Vhbk1pZlE9PSIsInJlcXVpcmUoMTIzKShcIkZsb2F0MzJcIiw0LGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbih0LG4sZSl7cmV0dXJuIHIodGhpcyx0LG4sZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVtYkc5aGRETXlMV0Z5Y21GNUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKcGJtbDBJaXdpWkdGMFlTSXNJbUo1ZEdWUFptWnpaWFFpTENKc1pXNW5kR2dpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVlVGQlZ5eEZRVUZITEZOQlFWVkRMRWRCUTJoRUxFOUJRVThzVTBGQmMwSkRMRVZCUVUxRExFVkJRVmxETEVkQlF6ZERMRTlCUVU5SUxFVkJRVXRKTEV0QlFVMUlMRVZCUVUxRExFVkJRVmxESWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVkSGx3WldRdVpteHZZWFF6TWkxaGNuSmhlUzVxY3lKOSIsInJlcXVpcmUoMTIzKShcIkZsb2F0NjRcIiw4LGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbih0LG4sZSl7cmV0dXJuIHIodGhpcyx0LG4sZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVtYkc5aGREWTBMV0Z5Y21GNUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKcGJtbDBJaXdpWkdGMFlTSXNJbUo1ZEdWUFptWnpaWFFpTENKc1pXNW5kR2dpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVlVGQlZ5eEZRVUZITEZOQlFWVkRMRWRCUTJoRUxFOUJRVThzVTBGQmMwSkRMRVZCUVUxRExFVkJRVmxETEVkQlF6ZERMRTlCUVU5SUxFVkJRVXRKTEV0QlFVMUlMRVZCUVUxRExFVkJRVmxESWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6WXVkSGx3WldRdVpteHZZWFEyTkMxaGNuSmhlUzVxY3lKOSIsInJlcXVpcmUoMTIzKShcIkludDE2XCIsMixmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24obix0LGUpe3JldHVybiByKHRoaXMsbix0LGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1cGJuUXhOaTFoY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aWFXNXBkQ0lzSW1SaGRHRWlMQ0ppZVhSbFQyWm1jMlYwSWl3aWJHVnVaM1JvSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZGQlFWTXNSVUZCUnl4VFFVRlZReXhIUVVNNVF5eFBRVUZQTEZOQlFXOUNReXhGUVVGTlF5eEZRVUZaUXl4SFFVTXpReXhQUVVGUFNDeEZRVUZMU1N4TFFVRk5TQ3hGUVVGTlF5eEZRVUZaUXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMblI1Y0dWa0xtbHVkREUyTFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoMTIzKShcIkludDMyXCIsNCxmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24obix0LGUpe3JldHVybiByKHRoaXMsbix0LGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1cGJuUXpNaTFoY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aWFXNXBkQ0lzSW1SaGRHRWlMQ0ppZVhSbFQyWm1jMlYwSWl3aWJHVnVaM1JvSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZGQlFWTXNSVUZCUnl4VFFVRlZReXhIUVVNNVF5eFBRVUZQTEZOQlFXOUNReXhGUVVGTlF5eEZRVUZaUXl4SFFVTXpReXhQUVVGUFNDeEZRVUZMU1N4TFFVRk5TQ3hGUVVGTlF5eEZRVUZaUXlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMblI1Y0dWa0xtbHVkRE15TFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoMTIzKShcIkludDhcIiwxLGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihuLHQsZSl7cmV0dXJuIHIodGhpcyxuLHQsZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVwYm5RNExXRnljbUY1TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0pwYm1sMElpd2laR0YwWVNJc0ltSjVkR1ZQWm1aelpYUWlMQ0pzWlc1bmRHZ2lMQ0owYUdseklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNUMEZCVVN4RlFVRkhMRk5CUVZWRExFZEJRemRETEU5QlFVOHNVMEZCYlVKRExFVkJRVTFETEVWQlFWbERMRWRCUXpGRExFOUJRVTlJTEVWQlFVdEpMRXRCUVUxSUxFVkJRVTFETEVWQlFWbERJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pZdWRIbHdaV1F1YVc1ME9DMWhjbkpoZVM1cWN5SjkiLCJyZXF1aXJlKDEyMykoXCJVaW50MTZcIiwyLGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihuLHQsZSl7cmV0dXJuIHIodGhpcyxuLHQsZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzUxYVc1ME1UWXRZWEp5WVhrdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW1sdWFYUWlMQ0prWVhSaElpd2lZbmwwWlU5bVpuTmxkQ0lzSW14bGJtZDBhQ0lzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRaXhUUVVGVkxFVkJRVWNzVTBGQlZVTXNSMEZETDBNc1QwRkJUeXhUUVVGeFFrTXNSVUZCVFVNc1JVRkJXVU1zUjBGRE5VTXNUMEZCVDBnc1JVRkJTMGtzUzBGQlRVZ3NSVUZCVFVNc1JVRkJXVU1pTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek5pNTBlWEJsWkM1MWFXNTBNVFl0WVhKeVlYa3Vhbk1pZlE9PSIsInJlcXVpcmUoMTIzKShcIlVpbnQzMlwiLDQsZnVuY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uKG4sdCxlKXtyZXR1cm4gcih0aGlzLG4sdCxlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTUwZVhCbFpDNTFhVzUwTXpJdFlYSnlZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbWx1YVhRaUxDSmtZWFJoSWl3aVlubDBaVTltWm5ObGRDSXNJbXhsYm1kMGFDSXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFJRVUZSTEdsQ1FVRlNRU3hEUVVFd1FpeFRRVUZWTEVWQlFVY3NVMEZCVlVNc1IwRkRMME1zVDBGQlR5eFRRVUZ4UWtNc1JVRkJUVU1zUlVGQldVTXNSMEZETlVNc1QwRkJUMGdzUlVGQlMwa3NTMEZCVFVnc1JVRkJUVU1zUlVGQldVTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tmk1MGVYQmxaQzUxYVc1ME16SXRZWEp5WVhrdWFuTWlmUT09IiwicmVxdWlyZSgxMjMpKFwiVWludDhcIiwxLGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihuLHQsZSl7cmV0dXJuIHIodGhpcyxuLHQsZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzUxYVc1ME9DMWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpYVc1cGRDSXNJbVJoZEdFaUxDSmllWFJsVDJabWMyVjBJaXdpYkdWdVozUm9JaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNMRkZCUVZNc1JVRkJSeXhUUVVGVlF5eEhRVU01UXl4UFFVRlBMRk5CUVc5Q1F5eEZRVUZOUXl4RlFVRlpReXhIUVVNelF5eFBRVUZQU0N4RlFVRkxTU3hMUVVGTlNDeEZRVUZOUXl4RlFVRlpReUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNMkxuUjVjR1ZrTG5WcGJuUTRMV0Z5Y21GNUxtcHpJbjA9IiwicmVxdWlyZSgxMjMpKFwiVWludDhcIiwxLGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihuLHQsZSl7cmV0dXJuIHIodGhpcyxuLHQsZSl9fSwhMCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzUxYVc1ME9DMWpiR0Z0Y0dWa0xXRnljbUY1TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0pwYm1sMElpd2laR0YwWVNJc0ltSjVkR1ZQWm1aelpYUWlMQ0pzWlc1bmRHZ2lMQ0owYUdseklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNVVUZCVXl4RlFVRkhMRk5CUVZWRExFZEJRemxETEU5QlFVOHNVMEZCTWtKRExFVkJRVTFETEVWQlFWbERMRWRCUTJ4RUxFOUJRVTlJTEVWQlFVdEpMRXRCUVUxSUxFVkJRVTFETEVWQlFWbERMRTFCUVVGQklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjell1ZEhsd1pXUXVkV2x1ZERndFkyeGhiWEJsWkMxaGNuSmhlUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciB3ZWFrPXJlcXVpcmUoMjQpLHZhbGlkYXRlPXJlcXVpcmUoMTI4KTtyZXF1aXJlKDI1KShcIldlYWtTZXRcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKX19LHthZGQ6ZnVuY3Rpb24oZSl7cmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsXCJXZWFrU2V0XCIpLGUsITApfX0sd2VhaywhMSwhMCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1M1pXRnJMWE5sZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUozWldGcklpd2ljbVZ4ZFdseVpTSXNJblpoYkdsa1lYUmxJaXdpWjJWMElpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbUZrWkNJc0luWmhiSFZsSWl3aVpHVm1JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEV0QlFVOURMRkZCUVZFc2MwSkJRMlpETEZOQlFWZEVMRkZCUVZFc01FSkJTWFpDUVN4UlFVRlJMR2RDUVVGU1FTeERRVWhsTEZWQlIyOUNMRk5CUVZWRkxFZEJRek5ETEU5QlFVOHNWMEZCY1VJc1QwRkJUMEVzUlVGQlNVTXNTMEZCVFVNc1ZVRkJWVU1zVDBGQlV5eEZRVUZKUkN4VlFVRlZMRkZCUVVFc1MwRkROMFVzUTBGRlJFVXNTVUZCU3l4VFFVRmhReXhIUVVOb1FpeFBRVUZQVWl4TFFVRkxVeXhKUVVGSlVDeFRRVUZUUlN4TFFWSmtMRmRCVVN0Q1NTeEhRVUZCUVN4TFFVVXpRMUlzVFVGQlFVRXNSMEZCVFNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTJMbmRsWVdzdGMyVjBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGZsYXR0ZW5JbnRvQXJyYXk9cmVxdWlyZSg0MSksdG9PYmplY3Q9cmVxdWlyZSgxMjEpLHRvTGVuZ3RoPXJlcXVpcmUoMTIwKSxhRnVuY3Rpb249cmVxdWlyZSg1KSxhcnJheVNwZWNpZXNDcmVhdGU9cmVxdWlyZSgxOCk7JGV4cG9ydCgkZXhwb3J0LlAsXCJBcnJheVwiLHtmbGF0TWFwOmZ1bmN0aW9uKGUpe3ZhciByLHQsYT10b09iamVjdCh0aGlzKTtyZXR1cm4gYUZ1bmN0aW9uKGUpLHI9dG9MZW5ndGgoYS5sZW5ndGgpLHQ9YXJyYXlTcGVjaWVzQ3JlYXRlKGEsMCksZmxhdHRlbkludG9BcnJheSh0LGEsYSxyLDAsMSxlLGFyZ3VtZW50c1sxXSksdH19KSxyZXF1aXJlKDcpKFwiZmxhdE1hcFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTVoY25KaGVTNW1iR0YwTFcxaGNDNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0ltWnNZWFIwWlc1SmJuUnZRWEp5WVhraUxDSjBiMDlpYW1WamRDSXNJblJ2VEdWdVozUm9JaXdpWVVaMWJtTjBhVzl1SWl3aVlYSnlZWGxUY0dWamFXVnpRM0psWVhSbElpd2lVQ0lzSW1ac1lYUk5ZWEFpTENKallXeHNZbUZqYTJadUlpd2ljMjkxY21ObFRHVnVJaXdpUVNJc0lrOGlMQ0owYUdseklpd2liR1Z1WjNSb0lpd2lZWEpuZFcxbGJuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEdsQ1FVRnRRa1FzVVVGQlVTeDVRa0ZETTBKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eFRRVUZYU0N4UlFVRlJMR2RDUVVOdVFra3NWVUZCV1Vvc1VVRkJVU3hwUWtGRGNFSkxMRzFDUVVGeFFrd3NVVUZCVVN3eVFrRkZha05FTEZGQlFWRkJMRkZCUVZGUExFVkJRVWNzVVVGQlV5eERRVU14UWtNc1VVRkJVeXhUUVVGcFFrTXNSMEZEZUVJc1NVRkRTVU1zUlVGQlYwTXNSVUZFV0VNc1JVRkJTVlFzVTBGQlUxVXNUVUZOYWtJc1QwRktRVklzVlVGQlZVa3NSMEZEVmtNc1JVRkJXVTRzVTBGQlUxRXNSVUZCUlVVc1VVRkRka0pJTEVWQlFVbE1MRzFDUVVGdFFrMHNSVUZCUnl4SFFVTXhRbFlzYVVKQlFXbENVeXhGUVVGSFF5eEZRVUZIUVN4RlFVRkhSaXhGUVVGWExFVkJRVWNzUlVGQlIwUXNSVUZCV1Uwc1ZVRkJWU3hKUVVNeFJFb3NTMEZKV0ZZc1VVRkJVU3gzUWtGQlVrRXNRMEZCYVVNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTVoY25KaGVTNW1iR0YwTFcxaGNDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksZmxhdHRlbkludG9BcnJheT1yZXF1aXJlKDQxKSx0b09iamVjdD1yZXF1aXJlKDEyMSksdG9MZW5ndGg9cmVxdWlyZSgxMjApLHRvSW50ZWdlcj1yZXF1aXJlKDExOCksYXJyYXlTcGVjaWVzQ3JlYXRlPXJlcXVpcmUoMTgpOyRleHBvcnQoJGV4cG9ydC5QLFwiQXJyYXlcIix7ZmxhdHRlbjpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50c1swXSx0PXRvT2JqZWN0KHRoaXMpLHI9dG9MZW5ndGgodC5sZW5ndGgpLGE9YXJyYXlTcGVjaWVzQ3JlYXRlKHQsMCk7cmV0dXJuIGZsYXR0ZW5JbnRvQXJyYXkoYSx0LHQsciwwLHZvaWQgMD09PWU/MTp0b0ludGVnZXIoZSkpLGF9fSkscmVxdWlyZSg3KShcImZsYXR0ZW5cIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1aGNuSmhlUzVtYkdGMGRHVnVMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2labXhoZEhSbGJrbHVkRzlCY25KaGVTSXNJblJ2VDJKcVpXTjBJaXdpZEc5TVpXNW5kR2dpTENKMGIwbHVkR1ZuWlhJaUxDSmhjbkpoZVZOd1pXTnBaWE5EY21WaGRHVWlMQ0pRSWl3aVpteGhkSFJsYmlJc0ltUmxjSFJvUVhKbklpd2lZWEpuZFcxbGJuUnpJaXdpVHlJc0luUm9hWE1pTENKemIzVnlZMlZNWlc0aUxDSnNaVzVuZEdnaUxDSkJJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEdsQ1FVRnRRa1FzVVVGQlVTeDVRa0ZETTBKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eFRRVUZYU0N4UlFVRlJMR2RDUVVOdVFra3NWVUZCV1Vvc1VVRkJVU3hwUWtGRGNFSkxMRzFDUVVGeFFrd3NVVUZCVVN3eVFrRkZha05FTEZGQlFWRkJMRkZCUVZGUExFVkJRVWNzVVVGQlV5eERRVU14UWtNc1VVRkJVeXhYUVVOUUxFbEJRVWxETEVWQlFWZERMRlZCUVZVc1IwRkRja0pETEVWQlFVbFNMRk5CUVZOVExFMUJRMkpETEVWQlFWbFVMRk5CUVZOUExFVkJRVVZITEZGQlEzWkNReXhGUVVGSlZDeHRRa0ZCYlVKTExFVkJRVWNzUjBGRk9VSXNUMEZFUVZRc2FVSkJRV2xDWVN4RlFVRkhTaXhGUVVGSFFTeEZRVUZIUlN4RlFVRlhMRTlCUVVFc1NVRkJSMG9zUlVGQmVVSXNSVUZCU1Vvc1ZVRkJWVWtzU1VGRGVFVk5MRXRCU1Zoa0xGRkJRVkVzZDBKQlFWSkJMRU5CUVdsRElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjemN1WVhKeVlYa3VabXhoZEhSbGJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGluY2x1ZGVzPXJlcXVpcmUoMTQpKCEwKTskZXhwb3J0KCRleHBvcnQuUCxcIkFycmF5XCIse2luY2x1ZGVzOmZ1bmN0aW9uKGUpe3JldHVybiAkaW5jbHVkZXModGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyZXF1aXJlKDcpKFwiaW5jbHVkZXNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1aGNuSmhlUzVwYm1Oc2RXUmxjeTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJaVJwYm1Oc2RXUmxjeUlzSWxBaUxDSnBibU5zZFdSbGN5SXNJbVZzSWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMRzlDUVVGU1FTeEZRVUZCUVN4SFFVVm9Ra1FzVVVGQlVVRXNVVUZCVVVjc1JVRkJSeXhSUVVGVExFTkJRekZDUXl4VFFVRlZMRk5CUVd0Q1F5eEhRVU14UWl4UFFVRlBTQ3hWUVVGVlNTeExRVUZOUkN4RlFVRkpSU3hWUVVGVlF5eFBRVUZUTEVWQlFVbEVMRlZCUVZVc1VVRkJRU3hOUVVsb1JVNHNVVUZCVVN4M1FrRkJVa0VzUTBGQmFVTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tnk1aGNuSmhlUzVwYm1Oc2RXUmxjeTVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLG1pY3JvdGFzaz1yZXF1aXJlKDcwKSgpLHByb2Nlc3M9cmVxdWlyZSg0MykucHJvY2Vzcyxpc05vZGU9XCJwcm9jZXNzXCI9PXJlcXVpcmUoMjEpKHByb2Nlc3MpOyRleHBvcnQoJGV4cG9ydC5HLHthc2FwOmZ1bmN0aW9uKHIpe3ZhciBlPWlzTm9kZSYmcHJvY2Vzcy5kb21haW47bWljcm90YXNrKGU/ZS5iaW5kKHIpOnIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NWhjMkZ3TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpYldsamNtOTBZWE5ySWl3aWNISnZZMlZ6Y3lJc0ltbHpUbTlrWlNJc0lrY2lMQ0poYzJGd0lpd2labTRpTENKa2IyMWhhVzRpTENKaWFXNWtJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR1ZCUVZKQkxFZEJRMXBGTEZGQlFWVkdMRkZCUVZFc1lVRkJZVVVzVVVGREwwSkRMRTlCUVhWRExGZEJRVGxDU0N4UlFVRlJMRk5CUVZKQkxFTkJRV3RDUlN4VFFVVXZRa2dzVVVGQlVVRXNVVUZCVVVzc1JVRkJSeXhEUVVOcVFrTXNTMEZCVFN4VFFVRmpReXhIUVVOc1FpeEpRVUZKUXl4RlFVRlRTaXhSUVVGVlJDeFJRVUZSU3l4UFFVTXZRazRzVlVGQlZVMHNSVUZCVTBFc1JVRkJUME1zUzBGQlMwWXNSMEZCVFVFaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTVoYzJGd0xtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksY29mPXJlcXVpcmUoMjEpOyRleHBvcnQoJGV4cG9ydC5TLFwiRXJyb3JcIix7aXNFcnJvcjpmdW5jdGlvbihyKXtyZXR1cm5cIkVycm9yXCI9PT1jb2Yocil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1bGNuSnZjaTVwY3kxbGNuSnZjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbU52WmlJc0lsTWlMQ0pwYzBWeWNtOXlJaXdpYVhRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEVsQlFVMUVMRkZCUVZFc1ZVRkZiRUpFTEZGQlFWRkJMRkZCUVZGSExFVkJRVWNzVVVGQlV5eERRVU14UWtNc1VVRkJVeXhUUVVGcFFrTXNSMEZEZUVJc1RVRkJiVUlzVlVGQldrZ3NTVUZCU1VjaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTVsY25KdmNpNXBjeTFsY25KdmNpNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0Lkcse2dsb2JhbDpyZXF1aXJlKDQzKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NW5iRzlpWVd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKSElpd2laMnh2WW1Gc0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEVOQlFVVkRMRTlCUVZGR0xGRkJRVkVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NW5iRzlpWVd3dWFuTWlmUT09IiwicmVxdWlyZSg5OSkoXCJNYXBcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYQXVabkp2YlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRVUVzVVVGQlVTeDVRa0ZCVWtFc1EwRkJhME1pTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXRZWEF1Wm5KdmJTNXFjeUo5IiwicmVxdWlyZSgxMDApKFwiTWFwXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWEF1YjJZdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEZGQlFWRXNkVUpCUVZKQkxFTkJRV2RESWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6Y3ViV0Z3TG05bUxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5SLFwiTWFwXCIse3RvSlNPTjpyZXF1aXJlKDIzKShcIk1hcFwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWEF1ZEc4dGFuTnZiaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbEFpTENKU0lpd2lkRzlLVTA5T0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZKUml4UlFVRlJSeXhGUVVGSExFMUJRVThzUTBGQlJVTXNUMEZCVVVnc1VVRkJVU3gzUWtGQlVrRXNRMEZCYVVNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTV0WVhBdWRHOHRhbk52Ymk1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7Y2xhbXA6ZnVuY3Rpb24ocix0LGUpe3JldHVybiBNYXRoLm1pbihlLE1hdGgubWF4KHQscikpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1Oc1lXMXdMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1Oc1lXMXdJaXdpZUNJc0lteHZkMlZ5SWl3aWRYQndaWElpTENKTllYUm9JaXdpYldsdUlpd2liV0Y0SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEUxQlFVOHNVMEZCWlVNc1JVRkJSME1zUlVGQlQwTXNSMEZET1VJc1QwRkJUME1zUzBGQlMwTXNTVUZCU1VZc1JVRkJUME1zUzBGQlMwVXNTVUZCU1Vvc1JVRkJUMFFpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXRZWFJvTG1Oc1lXMXdMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtERUdfUEVSX1JBRDpNYXRoLlBJLzE4MH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1SbFp5MXdaWEl0Y21Ga0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1JGUjE5UVJWSmZVa0ZFSWl3aVRXRjBhQ0lzSWxCSklsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEU5QlFWRXNRMEZCUlVNc1dVRkJZVU1zUzBGQlMwTXNSMEZCU3lJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbTFoZEdndVpHVm5MWEJsY2kxeVlXUXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLFJBRF9QRVJfREVHPTE4MC9NYXRoLlBJOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtkZWdyZWVzOmZ1bmN0aW9uKGUpe3JldHVybiBlKlJBRF9QRVJfREVHfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1SbFozSmxaWE11YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pTUVVSZlVFVlNYMFJGUnlJc0lrMWhkR2dpTENKUVNTSXNJbE1pTENKa1pXZHlaV1Z6SWl3aWNtRmthV0Z1Y3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zV1VGQll5eEpRVUZOUXl4TFFVRkxReXhIUVVVM1Frb3NVVUZCVVVFc1VVRkJVVXNzUlVGQlJ5eFBRVUZSTEVOQlEzcENReXhSUVVGVExGTkJRV2xDUXl4SFFVTjRRaXhQUVVGUFFTeEZRVUZWVENJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbTFoZEdndVpHVm5jbVZsY3k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxzY2FsZT1yZXF1aXJlKDY2KSxmcm91bmQ9cmVxdWlyZSg2NCk7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2ZzY2FsZTpmdW5jdGlvbihyLGUsdCxhLG8pe3JldHVybiBmcm91bmQoc2NhbGUocixlLHQsYSxvKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbVp6WTJGc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0luTmpZV3hsSWl3aVpuSnZkVzVrSWl3aVV5SXNJbVp6WTJGc1pTSXNJbmdpTENKcGJreHZkeUlzSW1sdVNHbG5hQ0lzSW05MWRFeHZkeUlzSW05MWRFaHBaMmdpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRTFCUVZGRUxGRkJRVkVzYVVKQlEyaENSU3hQUVVGVFJpeFJRVUZSTEd0Q1FVVnlRa1FzVVVGQlVVRXNVVUZCVVVrc1JVRkJSeXhQUVVGUkxFTkJRM3BDUXl4UFFVRlJMRk5CUVdkQ1F5eEZRVUZIUXl4RlFVRlBReXhGUVVGUlF5eEZRVUZSUXl4SFFVTm9SQ3hQUVVGUFVDeFBRVUZQUkN4TlFVRk5TU3hGUVVGSFF5eEZRVUZQUXl4RlFVRlJReXhGUVVGUlF5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG0xaGRHZ3Vabk5qWVd4bExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2lhZGRoOmZ1bmN0aW9uKHIsZSx0LG8pe3ZhciBhPXI+Pj4wLHA9dD4+PjA7cmV0dXJuKGU+Pj4wKSsobz4+PjApKygoYSZwfChhfHApJn4oYStwPj4+MCkpPj4+MzEpfDB9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbWxoWkdSb0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJbWxoWkdSb0lpd2llREFpTENKNE1TSXNJbmt3SWl3aWVURWlMQ0lrZURBaUxDSWtlVEFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVY3NUMEZCVVN4RFFVTjZRa01zVFVGQlR5eFRRVUZsUXl4RlFVRkpReXhGUVVGSlF5eEZRVUZKUXl4SFFVTm9ReXhKUVVGSlF5eEZRVUZOU2l4SlFVRlBMRVZCUldKTExFVkJRVTFJTEVsQlFVOHNSVUZEYWtJc1QwRkdWVVFzU1VGQlR5eEpRVVZJUlN4SlFVRlBMRXRCUVU5RExFVkJRVTFETEVkQlFVOUVMRVZCUVUxRExFdEJRVk5FTEVWQlFVMURMRWxCUVZFc1RVRkJVU3hKUVVGTklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjemN1YldGMGFDNXBZV1JrYUM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7aW11bGg6ZnVuY3Rpb24ocixlKXt2YXIgdD0rcixvPStlLHA9NjU1MzUmdCx1PTY1NTM1Jm8seD10Pj4xNixhPW8+PjE2LGk9KHgqdT4+PjApKyhwKnU+Pj4xNik7cmV0dXJuIHgqYSsoaT4+MTYpKygocCphPj4+MCkrKDY1NTM1JmkpPj4xNil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbWx0ZFd4b0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJbWx0ZFd4b0lpd2lkU0lzSW5ZaUxDSWtkU0lzSWlSMklpd2lkVEFpTENKMk1DSXNJblV4SWl3aWRqRWlMQ0owSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEUxQlFVOHNVMEZCWlVNc1JVRkJSME1zUjBGRGRrSXNTVUZEU1VNc1IwRkJUVVlzUlVGRFRrY3NSMEZCVFVZc1JVRkRUa2NzUlVGSVV5eE5RVWRLUml4RlFVTk1SeXhGUVVwVExFMUJTVXBHTEVWQlEweEhMRVZCUVV0S0xFZEJRVTBzUjBGRFdFc3NSVUZCUzBvc1IwRkJUU3hIUVVOWVN5eEhRVUZMUml4RlFVRkxSQ3hKUVVGUExFbEJRVTFFTEVWQlFVdERMRWxCUVU4c1NVRkRka01zVDBGQlQwTXNSVUZCUzBNc1IwRkJUVU1zUjBGQlN5eE5RVUZSU2l4RlFVRkxSeXhKUVVGUExFbEJVamxDTEUxQlVXOURReXhKUVVGbElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjemN1YldGMGFDNXBiWFZzYUM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7aXN1Ymg6ZnVuY3Rpb24ocixlLHQsbyl7dmFyIHA9cj4+PjAsdT10Pj4+MDtyZXR1cm4oZT4+PjApLShvPj4+MCktKCh+cCZ1fH4ocF51KSZwLXU+Pj4wKT4+PjMxKXwwfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1semRXSm9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1semRXSm9JaXdpZURBaUxDSjRNU0lzSW5rd0lpd2llVEVpTENJa2VEQWlMQ0lrZVRBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVDBGQlVTeERRVU42UWtNc1RVRkJUeXhUUVVGbFF5eEZRVUZKUXl4RlFVRkpReXhGUVVGSlF5eEhRVU5vUXl4SlFVRkpReXhGUVVGTlNpeEpRVUZQTEVWQlJXSkxMRVZCUVUxSUxFbEJRVThzUlVGRGFrSXNUMEZHVlVRc1NVRkJUeXhKUVVWSVJTeEpRVUZQTEUxQlFWRkRMRVZCUVUxRExFbEJRVkZFTEVWQlFVMURMRWRCUVU5RUxFVkJRVTFETEVsQlFWRXNTMEZCVHl4SlFVRk5JaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pjdWJXRjBhQzVwYzNWaWFDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse1JBRF9QRVJfREVHOjE4MC9NYXRoLlBJfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbkpoWkMxd1pYSXRaR1ZuTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0lsSkJSRjlRUlZKZlJFVkhJaXdpVFdGMGFDSXNJbEJKSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkJSVU1zV1VGQllTeEpRVUZOUXl4TFFVRkxReUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNM0xtMWhkR2d1Y21Ga0xYQmxjaTFrWldjdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksREVHX1BFUl9SQUQ9TWF0aC5QSS8xODA7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse3JhZGlhbnM6ZnVuY3Rpb24ocil7cmV0dXJuIHIqREVHX1BFUl9SQUR9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbkpoWkdsaGJuTXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSkVSVWRmVUVWU1gxSkJSQ0lzSWsxaGRHZ2lMQ0pRU1NJc0lsTWlMQ0p5WVdScFlXNXpJaXdpWkdWbmNtVmxjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNXVUZCWTBNc1MwRkJTME1zUjBGQlN5eEpRVVUxUWtvc1VVRkJVVUVzVVVGQlVVc3NSVUZCUnl4UFFVRlJMRU5CUTNwQ1F5eFJRVUZUTEZOQlFXbENReXhIUVVONFFpeFBRVUZQUVN4RlFVRlZUQ0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNM0xtMWhkR2d1Y21Ga2FXRnVjeTVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtzY2FsZTpyZXF1aXJlKDY2KX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG5OallXeGxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW5OallXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExFOUJRVkVzUTBGQlJVTXNUVUZCVDBZc1VVRkJVU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNM0xtMWhkR2d1YzJOaGJHVXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtzaWduYml0OmZ1bmN0aW9uKHIpe3JldHVybihyPStyKSE9cj9yOjA9PXI/MS9yPT0xLzA6cj4wfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG5OcFoyNWlhWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aWMybG5ibUpwZENJc0luZ2lMQ0pKYm1acGJtbDBlU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFBRVUZSTEVOQlFVVkRMRkZCUVZNc1UwRkJhVUpETEVkQlJYSkVMRTlCUVZGQkxFZEJRVXRCTEVsQlFVMUJMRVZCUVVsQkxFVkJRVk1zUjBGQlRFRXNSVUZCVXl4RlFVRkpRU3hIUVVGTFF5eEZRVUZCUVN4RlFVRlhSQ3hGUVVGSklpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjemN1YldGMGFDNXphV2R1WW1sMExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse3VtdWxoOmZ1bmN0aW9uKHIsZSl7dmFyIHQ9K3Isbz0rZSx1PTY1NTM1JnQscD02NTUzNSZvLHg9dD4+PjE2LGE9bz4+PjE2LG49KHgqcD4+PjApKyh1KnA+Pj4xNik7cmV0dXJuIHgqYSsobj4+PjE2KSsoKHUqYT4+PjApKyg2NTUzNSZuKT4+PjE2KX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV0WVhSb0xuVnRkV3hvTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0luVnRkV3hvSWl3aWRTSXNJbllpTENJa2RTSXNJaVIySWl3aWRUQWlMQ0oyTUNJc0luVXhJaXdpZGpFaUxDSjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExFOUJRVkVzUTBGRGVrSkRMRTFCUVU4c1UwRkJaVU1zUlVGQlIwTXNSMEZEZGtJc1NVRkRTVU1zUjBGQlRVWXNSVUZEVGtjc1IwRkJUVVlzUlVGRFRrY3NSVUZJVXl4TlFVZEtSaXhGUVVOTVJ5eEZRVXBUTEUxQlNVcEdMRVZCUTB4SExFVkJRVXRLTEVsQlFVOHNSMEZEV2tzc1JVRkJTMG9zU1VGQlR5eEhRVU5hU3l4SFFVRkxSaXhGUVVGTFJDeEpRVUZQTEVsQlFVMUVMRVZCUVV0RExFbEJRVThzU1VGRGRrTXNUMEZCVDBNc1JVRkJTME1zUjBGQlRVTXNTVUZCVFN4TlFVRlJTaXhGUVVGTFJ5eEpRVUZQTEVsQlVpOUNMRTFCVVhGRFF5eExRVUZuUWlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbTFoZEdndWRXMTFiR2d1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSx0b09iamVjdD1yZXF1aXJlKDEyMSksYUZ1bmN0aW9uPXJlcXVpcmUoNSksJGRlZmluZVByb3BlcnR5PXJlcXVpcmUoNzQpO3JlcXVpcmUoMzIpJiYkZXhwb3J0KCRleHBvcnQuUCtyZXF1aXJlKDc2KSxcIk9iamVjdFwiLHtfX2RlZmluZUdldHRlcl9fOmZ1bmN0aW9uKGUscil7JGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksZSx7Z2V0OmFGdW5jdGlvbihyKSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbXBsWTNRdVpHVm1hVzVsTFdkbGRIUmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJblJ2VDJKcVpXTjBJaXdpWVVaMWJtTjBhVzl1SWl3aUpHUmxabWx1WlZCeWIzQmxjblI1SWl3aVVDSXNJbDlmWkdWbWFXNWxSMlYwZEdWeVgxOGlMQ0puWlhSMFpYSWlMQ0ptSWl3aWRHaHBjeUlzSW1kbGRDSXNJbVZ1ZFcxbGNtRmliR1VpTENKamIyNW1hV2QxY21GaWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEZWQlFWbEdMRkZCUVZFc2FVSkJRM0JDUnl4blFrRkJhMEpJTEZGQlFWRXNaMEpCUnpsQ1FTeFJRVUZSTEcxQ1FVRnhRa1FzVVVGQlVVRXNVVUZCVVVzc1JVRkJTVW9zVVVGQlVTeDNRa0ZCZVVJc1UwRkJWU3hEUVVNeFJrc3NhVUpCUVd0Q0xGTkJRVEJDUkN4RlFVRkhSU3hIUVVNM1EwZ3NaMEpCUVdkQ1NTeEZRVUZGVGl4VFFVRlRUeXhOUVVGUFNpeEZRVUZITEVOQlFVVkxMRWxCUVV0UUxGVkJRVlZKTEVkQlFWTkpMRmxCUVVGQkxFVkJRV3RDUXl4alFVRkJRU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNM0xtOWlhbVZqZEM1a1pXWnBibVV0WjJWMGRHVnlMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLHRvT2JqZWN0PXJlcXVpcmUoMTIxKSxhRnVuY3Rpb249cmVxdWlyZSg1KSwkZGVmaW5lUHJvcGVydHk9cmVxdWlyZSg3NCk7cmVxdWlyZSgzMikmJiRleHBvcnQoJGV4cG9ydC5QK3JlcXVpcmUoNzYpLFwiT2JqZWN0XCIse19fZGVmaW5lU2V0dGVyX186ZnVuY3Rpb24oZSxyKXskZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSxlLHtzZXQ6YUZ1bmN0aW9uKHIpLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dlltcGxZM1F1WkdWbWFXNWxMWE5sZEhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0luUnZUMkpxWldOMElpd2lZVVoxYm1OMGFXOXVJaXdpSkdSbFptbHVaVkJ5YjNCbGNuUjVJaXdpVUNJc0lsOWZaR1ZtYVc1bFUyVjBkR1Z5WDE4aUxDSnpaWFIwWlhJaUxDSm1JaXdpZEdocGN5SXNJbk5sZENJc0ltVnVkVzFsY21GaWJHVWlMQ0pqYjI1bWFXZDFjbUZpYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRlZCUVZsR0xGRkJRVkVzYVVKQlEzQkNSeXhuUWtGQmEwSklMRkZCUVZFc1owSkJSemxDUVN4UlFVRlJMRzFDUVVGeFFrUXNVVUZCVVVFc1VVRkJVVXNzUlVGQlNVb3NVVUZCVVN4M1FrRkJlVUlzVTBGQlZTeERRVU14Umtzc2FVSkJRV3RDTEZOQlFUQkNSQ3hGUVVGSFJTeEhRVU0zUTBnc1owSkJRV2RDU1N4RlFVRkZUaXhUUVVGVFR5eE5RVUZQU2l4RlFVRkhMRU5CUVVWTExFbEJRVXRRTEZWQlFWVkpMRWRCUVZOSkxGbEJRVUZCTEVWQlFXdENReXhqUVVGQlFTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG05aWFtVmpkQzVrWldacGJtVXRjMlYwZEdWeUxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGVudHJpZXM9cmVxdWlyZSg4NikoITApOyRleHBvcnQoJGV4cG9ydC5TLFwiT2JqZWN0XCIse2VudHJpZXM6ZnVuY3Rpb24oZSl7cmV0dXJuICRlbnRyaWVzKGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbXBsWTNRdVpXNTBjbWxsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlSbGJuUnlhV1Z6SWl3aVV5SXNJbVZ1ZEhKcFpYTWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVTBGQlYwUXNVVUZCVVN4eFFrRkJVa0VzUlVGQlFVRXNSMEZGWmtRc1VVRkJVVUVzVVVGQlVVY3NSVUZCUnl4VFFVRlZMRU5CUXpOQ1F5eFJRVUZUTEZOQlFXbENReXhIUVVONFFpeFBRVUZQU0N4VFFVRlRSeUlzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjWTI5eVpTMXFjMXhjYlc5a2RXeGxjMXhjWlhNM0xtOWlhbVZqZEM1bGJuUnlhV1Z6TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSxvd25LZXlzPXJlcXVpcmUoODcpLHRvSU9iamVjdD1yZXF1aXJlKDExOSksZ09QRD1yZXF1aXJlKDc3KSxjcmVhdGVQcm9wZXJ0eT1yZXF1aXJlKDI3KTskZXhwb3J0KCRleHBvcnQuUyxcIk9iamVjdFwiLHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgcix0LG89dG9JT2JqZWN0KGUpLHA9Z09QRC5mLGM9b3duS2V5cyhvKSxpPXt9LG49MDtjLmxlbmd0aD5uOyl2b2lkIDAhPT0odD1wKG8scj1jW24rK10pKSYmY3JlYXRlUHJvcGVydHkoaSxyLHQpO3JldHVybiBpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eWN5NXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0ltOTNia3RsZVhNaUxDSjBiMGxQWW1wbFkzUWlMQ0puVDFCRUlpd2lZM0psWVhSbFVISnZjR1Z5ZEhraUxDSlRJaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXljeUlzSW05aWFtVmpkQ0lzSW10bGVTSXNJbVJsYzJNaUxDSlBJaXdpWjJWMFJHVnpZeUlzSW1ZaUxDSnJaWGx6SWl3aWNtVnpkV3gwSWl3aWFTSXNJbXhsYm1kMGFDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeGxRVU5zUWtVc1ZVRkJXVVlzVVVGQlVTeHBRa0ZEY0VKSExFdEJRVTlJTEZGQlFWRXNhMEpCUTJaSkxHVkJRV2xDU2l4UlFVRlJMSE5DUVVVM1FrUXNVVUZCVVVFc1VVRkJVVTBzUlVGQlJ5eFRRVUZWTEVOQlF6TkNReXd3UWtGQk1rSXNVMEZCYlVORExFZEJUelZFTEVsQlRrRXNTVUZMU1VNc1JVRkJTME1zUlVGTVRFTXNSVUZCU1ZJc1ZVRkJWVXNzUjBGRFpFa3NSVUZCVlZJc1MwRkJTMU1zUlVGRFprTXNSVUZCVDFvc1VVRkJVVk1zUjBGRFpra3NSVUZCVXl4SFFVTlVReXhGUVVGSkxFVkJSVVJHTEVWQlFVdEhMRTlCUVZORUxGRkJRVUZCTEV0QlEyNUNUaXhGUVVGUFJTeEZRVUZSUkN4RlFVRkhSaXhGUVVGTlN5eEZRVUZMUlN4UlFVTk1XQ3hsUVVGbFZTeEZRVUZSVGl4RlFVRkxReXhIUVVWMFJDeFBRVUZQU3lJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbTlpYW1WamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLHRvT2JqZWN0PXJlcXVpcmUoMTIxKSx0b1ByaW1pdGl2ZT1yZXF1aXJlKDEyMiksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZSg4MSksZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yPXJlcXVpcmUoNzcpLmY7cmVxdWlyZSgzMikmJiRleHBvcnQoJGV4cG9ydC5QK3JlcXVpcmUoNzYpLFwiT2JqZWN0XCIse19fbG9va3VwR2V0dGVyX186ZnVuY3Rpb24oZSl7dmFyIHQscj10b09iamVjdCh0aGlzKSxvPXRvUHJpbWl0aXZlKGUsITApO2Rve2lmKHQ9Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsbykpcmV0dXJuIHQuZ2V0fXdoaWxlKHI9Z2V0UHJvdG90eXBlT2YocikpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbXBsWTNRdWJHOXZhM1Z3TFdkbGRIUmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJblJ2VDJKcVpXTjBJaXdpZEc5UWNtbHRhWFJwZG1VaUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0ltZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lJc0ltWWlMQ0pRSWl3aVgxOXNiMjlyZFhCSFpYUjBaWEpmWHlJc0lrUWlMQ0pQSWl3aWRHaHBjeUlzSWtzaUxDSm5aWFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGbEJRV05HTEZGQlFWRXNiVUpCUTNSQ1J5eGxRVUZwUWtnc1VVRkJVU3hwUWtGRGVrSkpMSGxDUVVFeVFrb3NVVUZCVVN4clFrRkJhMEpMTEVWQlIzcEVUQ3hSUVVGUkxHMUNRVUZ4UWtRc1VVRkJVVUVzVVVGQlVVOHNSVUZCU1U0c1VVRkJVU3gzUWtGQmVVSXNVMEZCVlN4RFFVTXhSazhzYVVKQlFXdENMRk5CUVRCQ1JDeEhRVU14UXl4SlFVVkpSU3hGUVVaQlF5eEZRVUZKVWl4VFFVRlRVeXhOUVVOaVF5eEZRVUZKVkN4WlFVRlpTU3hIUVVGQlFTeEhRVVZ3UWl4SFFVTkZMRWRCUVVsRkxFVkJRVWxLTEhsQ1FVRjVRa3NzUlVGQlIwVXNSMEZCU1N4UFFVRlBTQ3hGUVVGRlNTeFZRVU14UTBnc1JVRkJTVTRzWlVGQlpVMGlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tnk1dlltcGxZM1F1Ykc5dmEzVndMV2RsZEhSbGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksdG9PYmplY3Q9cmVxdWlyZSgxMjEpLHRvUHJpbWl0aXZlPXJlcXVpcmUoMTIyKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKDgxKSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I9cmVxdWlyZSg3NykuZjtyZXF1aXJlKDMyKSYmJGV4cG9ydCgkZXhwb3J0LlArcmVxdWlyZSg3NiksXCJPYmplY3RcIix7X19sb29rdXBTZXR0ZXJfXzpmdW5jdGlvbihlKXt2YXIgdCxyPXRvT2JqZWN0KHRoaXMpLG89dG9QcmltaXRpdmUoZSwhMCk7ZG97aWYodD1nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixvKSlyZXR1cm4gdC5zZXR9d2hpbGUocj1nZXRQcm90b3R5cGVPZihyKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dlltcGxZM1F1Ykc5dmEzVndMWE5sZEhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0luUnZUMkpxWldOMElpd2lkRzlRY21sdGFYUnBkbVVpTENKblpYUlFjbTkwYjNSNWNHVlBaaUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1ZaUxDSlFJaXdpWDE5c2IyOXJkWEJUWlhSMFpYSmZYeUlzSWtRaUxDSlBJaXdpZEdocGN5SXNJa3NpTENKelpYUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEZsQlFXTkdMRkZCUVZFc2JVSkJRM1JDUnl4bFFVRnBRa2dzVVVGQlVTeHBRa0ZEZWtKSkxIbENRVUV5UWtvc1VVRkJVU3hyUWtGQmEwSkxMRVZCUjNwRVRDeFJRVUZSTEcxQ1FVRnhRa1FzVVVGQlVVRXNVVUZCVVU4c1JVRkJTVTRzVVVGQlVTeDNRa0ZCZVVJc1UwRkJWU3hEUVVNeFJrOHNhVUpCUVd0Q0xGTkJRVEJDUkN4SFFVTXhReXhKUVVWSlJTeEZRVVpCUXl4RlFVRkpVaXhUUVVGVFV5eE5RVU5pUXl4RlFVRkpWQ3haUVVGWlNTeEhRVUZCUVN4SFFVVndRaXhIUVVORkxFZEJRVWxGTEVWQlFVbEtMSGxDUVVGNVFrc3NSVUZCUjBVc1IwRkJTU3hQUVVGUFNDeEZRVUZGU1N4VlFVTXhRMGdzUlVGQlNVNHNaVUZCWlUwaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTV2WW1wbFkzUXViRzl2YTNWd0xYTmxkSFJsY2k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkdmFsdWVzPXJlcXVpcmUoODYpKCExKTskZXhwb3J0KCRleHBvcnQuUyxcIk9iamVjdFwiLHt2YWx1ZXM6ZnVuY3Rpb24oZSl7cmV0dXJuICR2YWx1ZXMoZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dlltcGxZM1F1ZG1Gc2RXVnpMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKSFpoYkhWbGN5SXNJbE1pTENKMllXeDFaWE1pTENKcGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeHhRa0ZCVWtFc1JVRkJRVUVzUjBGRlpFUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlJ5eFRRVUZWTEVOQlF6TkNReXhQUVVGUkxGTkJRV2RDUXl4SFFVTjBRaXhQUVVGUFNDeFJRVUZSUnlJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbTlpYW1WamRDNTJZV3gxWlhNdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksZ2xvYmFsPXJlcXVpcmUoNDMpLGNvcmU9cmVxdWlyZSgyNiksbWljcm90YXNrPXJlcXVpcmUoNzApKCksT0JTRVJWQUJMRT1yZXF1aXJlKDEzMSkoXCJvYnNlcnZhYmxlXCIpLGFGdW5jdGlvbj1yZXF1aXJlKDUpLGFuT2JqZWN0PXJlcXVpcmUoMTApLGFuSW5zdGFuY2U9cmVxdWlyZSg5KSxyZWRlZmluZUFsbD1yZXF1aXJlKDkzKSxoaWRlPXJlcXVpcmUoNDUpLGZvck9mPXJlcXVpcmUoNDIpLFJFVFVSTj1mb3JPZi5SRVRVUk4sZ2V0TWV0aG9kPWZ1bmN0aW9uKHIpe3JldHVybiBudWxsPT1yP3ZvaWQgMDphRnVuY3Rpb24ocil9LGNsZWFudXBTdWJzY3JpcHRpb249ZnVuY3Rpb24ocil7dmFyIGU9ci5fYztlJiYoci5fYz12b2lkIDAsZSgpKX0sc3Vic2NyaXB0aW9uQ2xvc2VkPWZ1bmN0aW9uKHIpe3JldHVybiB2b2lkIDA9PT1yLl9vfSxjbG9zZVN1YnNjcmlwdGlvbj1mdW5jdGlvbihyKXtzdWJzY3JpcHRpb25DbG9zZWQocil8fChyLl9vPXZvaWQgMCxjbGVhbnVwU3Vic2NyaXB0aW9uKHIpKX0sU3Vic2NyaXB0aW9uPWZ1bmN0aW9uKHIsZSl7YW5PYmplY3QociksdGhpcy5fYz12b2lkIDAsdGhpcy5fbz1yLHI9bmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO3RyeXt2YXIgdD1lKHIpLG49dDtudWxsIT10JiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC51bnN1YnNjcmliZT90PWZ1bmN0aW9uKCl7bi51bnN1YnNjcmliZSgpfTphRnVuY3Rpb24odCksdGhpcy5fYz10KX1jYXRjaChlKXtyZXR1cm4gdm9pZCByLmVycm9yKGUpfXN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSYmY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKX07U3Vic2NyaXB0aW9uLnByb3RvdHlwZT1yZWRlZmluZUFsbCh7fSx7dW5zdWJzY3JpYmU6ZnVuY3Rpb24oKXtjbG9zZVN1YnNjcmlwdGlvbih0aGlzKX19KTt2YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXI9ZnVuY3Rpb24ocil7dGhpcy5fcz1yfTtTdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGU9cmVkZWZpbmVBbGwoe30se25leHQ6ZnVuY3Rpb24ocil7dmFyIGU9dGhpcy5fcztpZighc3Vic2NyaXB0aW9uQ2xvc2VkKGUpKXt2YXIgdD1lLl9vO3RyeXt2YXIgbj1nZXRNZXRob2QodC5uZXh0KTtpZihuKXJldHVybiBuLmNhbGwodCxyKX1jYXRjaChyKXt0cnl7Y2xvc2VTdWJzY3JpcHRpb24oZSl9ZmluYWxseXt0aHJvdyByfX19fSxlcnJvcjpmdW5jdGlvbihyKXt2YXIgZT10aGlzLl9zO2lmKHN1YnNjcmlwdGlvbkNsb3NlZChlKSl0aHJvdyByO3ZhciB0PWUuX287ZS5fbz12b2lkIDA7dHJ5e3ZhciBuPWdldE1ldGhvZCh0LmVycm9yKTtpZighbil0aHJvdyByO3I9bi5jYWxsKHQscil9Y2F0Y2gocil7dHJ5e2NsZWFudXBTdWJzY3JpcHRpb24oZSl9ZmluYWxseXt0aHJvdyByfX1yZXR1cm4gY2xlYW51cFN1YnNjcmlwdGlvbihlKSxyfSxjb21wbGV0ZTpmdW5jdGlvbihyKXt2YXIgZT10aGlzLl9zO2lmKCFzdWJzY3JpcHRpb25DbG9zZWQoZSkpe3ZhciB0PWUuX287ZS5fbz12b2lkIDA7dHJ5e3ZhciBuPWdldE1ldGhvZCh0LmNvbXBsZXRlKTtyPW4/bi5jYWxsKHQscik6dm9pZCAwfWNhdGNoKHIpe3RyeXtjbGVhbnVwU3Vic2NyaXB0aW9uKGUpfWZpbmFsbHl7dGhyb3cgcn19cmV0dXJuIGNsZWFudXBTdWJzY3JpcHRpb24oZSkscn19fSk7dmFyICRPYnNlcnZhYmxlPWZ1bmN0aW9uKHIpe2FuSW5zdGFuY2UodGhpcywkT2JzZXJ2YWJsZSxcIk9ic2VydmFibGVcIixcIl9mXCIpLl9mPWFGdW5jdGlvbihyKX07cmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLHtzdWJzY3JpYmU6ZnVuY3Rpb24ocil7cmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ocix0aGlzLl9mKX0sZm9yRWFjaDpmdW5jdGlvbihyKXt2YXIgZT10aGlzO3JldHVybiBuZXcoY29yZS5Qcm9taXNlfHxnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24odCxuKXthRnVuY3Rpb24ocik7dmFyIGk9ZS5zdWJzY3JpYmUoe25leHQ6ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiByKGUpfWNhdGNoKHIpe24ociksaS51bnN1YnNjcmliZSgpfX0sZXJyb3I6bixjb21wbGV0ZTp0fSl9KX19KSxyZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSx7ZnJvbTpmdW5jdGlvbihyKXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6JE9ic2VydmFibGUsdD1nZXRNZXRob2QoYW5PYmplY3QocilbT0JTRVJWQUJMRV0pO2lmKHQpe3ZhciBuPWFuT2JqZWN0KHQuY2FsbChyKSk7cmV0dXJuIG4uY29uc3RydWN0b3I9PT1lP246bmV3IGUoZnVuY3Rpb24ocil7cmV0dXJuIG4uc3Vic2NyaWJlKHIpfSl9cmV0dXJuIG5ldyBlKGZ1bmN0aW9uKGUpe3ZhciB0PSExO3JldHVybiBtaWNyb3Rhc2soZnVuY3Rpb24oKXtpZighdCl7dHJ5e2lmKGZvck9mKHIsITEsZnVuY3Rpb24ocil7aWYoZS5uZXh0KHIpLHQpcmV0dXJuIFJFVFVSTn0pPT09UkVUVVJOKXJldHVybn1jYXRjaChyKXtpZih0KXRocm93IHI7cmV0dXJuIHZvaWQgZS5lcnJvcihyKX1lLmNvbXBsZXRlKCl9fSksZnVuY3Rpb24oKXt0PSEwfX0pfSxvZjpmdW5jdGlvbigpe2Zvcih2YXIgcj0wLGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKTtyPGU7KXRbcl09YXJndW1lbnRzW3IrK107cmV0dXJuIG5ldyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6JE9ic2VydmFibGUpKGZ1bmN0aW9uKHIpe3ZhciBlPSExO3JldHVybiBtaWNyb3Rhc2soZnVuY3Rpb24oKXtpZighZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDsrK24paWYoci5uZXh0KHRbbl0pLGUpcmV0dXJuO3IuY29tcGxldGUoKX19KSxmdW5jdGlvbigpe2U9ITB9fSl9fSksaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsT0JTRVJWQUJMRSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksJGV4cG9ydCgkZXhwb3J0Lkcse09ic2VydmFibGU6JE9ic2VydmFibGV9KSxyZXF1aXJlKDEwMikoXCJPYnNlcnZhYmxlXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbk5sY25aaFlteGxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2laMnh2WW1Gc0lpd2lZMjl5WlNJc0ltMXBZM0p2ZEdGemF5SXNJazlDVTBWU1ZrRkNURVVpTENKaFJuVnVZM1JwYjI0aUxDSmhiazlpYW1WamRDSXNJbUZ1U1c1emRHRnVZMlVpTENKeVpXUmxabWx1WlVGc2JDSXNJbWhwWkdVaUxDSm1iM0pQWmlJc0lsSkZWRlZTVGlJc0ltZGxkRTFsZEdodlpDSXNJbVp1SWl3aVkyeGxZVzUxY0ZOMVluTmpjbWx3ZEdsdmJpSXNJbk4xWW5OamNtbHdkR2x2YmlJc0ltTnNaV0Z1ZFhBaUxDSmZZeUlzSW5OMVluTmpjbWx3ZEdsdmJrTnNiM05sWkNJc0lsOXZJaXdpWTJ4dmMyVlRkV0p6WTNKcGNIUnBiMjRpTENKVGRXSnpZM0pwY0hScGIyNGlMQ0p2WW5ObGNuWmxjaUlzSW5OMVluTmpjbWxpWlhJaUxDSjBhR2x6SWl3aVUzVmljMk55YVhCMGFXOXVUMkp6WlhKMlpYSWlMQ0oxYm5OMVluTmpjbWxpWlNJc0ltVWlMQ0psY25KdmNpSXNJbkJ5YjNSdmRIbHdaU0lzSWw5eklpd2libVY0ZENJc0luWmhiSFZsSWl3aWJTSXNJbU5oYkd3aUxDSmpiMjF3YkdWMFpTSXNJaVJQWW5ObGNuWmhZbXhsSWl3aVgyWWlMQ0p6ZFdKelkzSnBZbVVpTENKbWIzSkZZV05vSWl3aWRHaGhkQ0lzSWxCeWIyMXBjMlVpTENKeVpYTnZiSFpsSWl3aWNtVnFaV04wSWl3aVpuSnZiU0lzSW5naUxDSkRJaXdpYldWMGFHOWtJaXdpYjJKelpYSjJZV0pzWlNJc0ltTnZibk4wY25WamRHOXlJaXdpWkc5dVpTSXNJbWwwSWl3aWIyWWlMQ0pwSWl3aWJDSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1sMFpXMXpJaXdpUVhKeVlYa2lMQ0pxSWl3aVJ5SXNJazlpYzJWeWRtRmliR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1QwRkJVMFFzVVVGQlVTeGhRVU5xUWtVc1MwRkJUMFlzVVVGQlVTeFhRVU5tUnl4VlFVRlpTQ3hSUVVGUkxHVkJRVkpCTEVkQlExcEpMRmRCUVdGS0xGRkJRVkVzVTBGQlVrRXNRMEZCYTBJc1kwRkRMMEpMTEZWQlFWbE1MRkZCUVZFc2FVSkJRM0JDVFN4VFFVRlhUaXhSUVVGUkxHZENRVU51UWs4c1YwRkJZVkFzVVVGQlVTeHJRa0ZEY2tKUkxGbEJRV05TTEZGQlFWRXNiVUpCUTNSQ1V5eExRVUZQVkN4UlFVRlJMRmRCUTJaVkxFMUJRVkZXTEZGQlFWRXNZVUZEYUVKWExFOUJRVk5FTEUxQlFVMURMRTlCUldaRExGVkJRVmtzVTBGQlZVTXNSMEZEZUVJc1QwRkJZU3hOUVVGT1FTeFBRVUZCUVN4RlFVRjVRbElzVlVGQlZWRXNTVUZIZUVORExHOUNRVUZ6UWl4VFFVRlZReXhIUVVOc1F5eEpRVUZKUXl4RlFVRlZSQ3hGUVVGaFJTeEhRVU4yUWtRc1NVRkRSa1FzUlVGQllVVXNVVUZCUVVFc1JVRkRZa1FzVFVGSlFVVXNiVUpCUVhGQ0xGTkJRVlZJTEVkQlEycERMRmxCUVVFc1NVRkJUMEVzUlVGQllVa3NTVUZIYkVKRExHdENRVUZ2UWl4VFFVRlZUQ3hIUVVNelFrY3NiVUpCUVcxQ1NDeExRVU4wUWtFc1JVRkJZVWtzVVVGQlFVRXNSVUZEWWt3c2IwSkJRVzlDUXl4TFFVbHdRazBzWVVGQlpTeFRRVUZWUXl4RlFVRlZReXhIUVVOeVEycENMRk5CUVZOblFpeEhRVU5VUlN4TFFVRkxVQ3hSUVVGQlFTeEZRVU5NVHl4TFFVRkxUQ3hIUVVGTFJ5eEZRVU5XUVN4RlFVRlhMRWxCUVVsSExIRkNRVUZ4UWtRc1RVRkRjRU1zU1VGRFJTeEpRVUZKVWl4RlFVRlZUeXhGUVVGWFJDeEhRVU55UWxBc1JVRkJaVU1zUlVGRFNpeE5RVUZZUVN4SlFVTnBReXh0UWtGQmVFSkJMRVZCUVZGVkxGbEJRVFJDVml4RlFVRlZMRmRCUVdORUxFVkJRV0ZYTEdWQlF5OUZja0lzVlVGQlZWY3NSMEZEWmxFc1MwRkJTMUFzUjBGQlMwUXNSMEZGV2l4TlFVRlBWeXhIUVVWUUxGbEJSRUZNTEVWQlFWTk5MRTFCUVUxRUxFZEJSVmhVTEcxQ1FVRnRRazBzVDBGQlQxWXNiMEpCUVc5Q1ZTeFBRVWQwUkVnc1lVRkJZVkVzVlVGQldYSkNMRmxCUVZrc1IwRkJTU3hEUVVOMlEydENMRmxCUVdFc1YwRkJlVUpPTEd0Q1FVRnJRa2tzVTBGSE1VUXNTVUZCU1VNc2NVSkJRWFZDTEZOQlFWVldMRWRCUTI1RFV5eExRVUZMVFN4SFFVRkxaaXhIUVVkYVZTeHhRa0ZCY1VKSkxGVkJRVmx5UWl4WlFVRlpMRWRCUVVrc1EwRkRMME4xUWl4TFFVRk5MRk5CUVdORExFZEJRMnhDTEVsQlFVbHFRaXhGUVVGbFV5eExRVUZMVFN4SFFVTjRRaXhKUVVGTFdpeHRRa0ZCYlVKSUxFZEJRV1VzUTBGRGNrTXNTVUZCU1U4c1JVRkJWMUFzUlVGQllVa3NSMEZETlVJc1NVRkRSU3hKUVVGSll5eEZRVUZKY2tJc1ZVRkJWVlVzUlVGQlUxTXNUVUZETTBJc1IwRkJTVVVzUlVGQlJ5eFBRVUZQUVN4RlFVRkZReXhMUVVGTFdpeEZRVUZWVlN4SFFVTXZRaXhOUVVGUFRDeEhRVU5RTEVsQlEwVlFMR3RDUVVGclFrd3NSMEZEYkVJc1VVRkRRU3hOUVVGTldTeE5RVXRrUXl4TlFVRlBMRk5CUVdWSkxFZEJRM0JDTEVsQlFVbHFRaXhGUVVGbFV5eExRVUZMVFN4SFFVTjRRaXhIUVVGSldpeHRRa0ZCYlVKSUxFZEJRV1VzVFVGQlRXbENMRVZCUXpWRExFbEJRVWxXTEVWQlFWZFFMRVZCUVdGSkxFZEJRelZDU2l4RlFVRmhTU3hSUVVGQlFTeEZRVU5pTEVsQlEwVXNTVUZCU1dNc1JVRkJTWEpDTEZWQlFWVlZMRVZCUVZOTkxFOUJRek5DTEVsQlFVdExMRVZCUVVjc1RVRkJUVVFzUlVGRFpFRXNSVUZCVVVNc1JVRkJSVU1zUzBGQlMxb3NSVUZCVlZVc1IwRkRla0lzVFVGQlQwd3NSMEZEVUN4SlFVTkZZaXh2UWtGQmIwSkRMRWRCUTNCQ0xGRkJRMEVzVFVGQlRWa3NSMEZIVml4UFFVUkZZaXh2UWtGQmIwSkRMRWRCUTJacFFpeEhRVVZVUnl4VFFVRlZMRk5CUVd0Q1NDeEhRVU14UWl4SlFVRkpha0lzUlVGQlpWTXNTMEZCUzAwc1IwRkRlRUlzU1VGQlMxb3NiVUpCUVcxQ1NDeEhRVUZsTEVOQlEzSkRMRWxCUVVsUExFVkJRVmRRTEVWQlFXRkpMRWRCUXpWQ1NpeEZRVUZoU1N4UlFVRkJRU3hGUVVOaUxFbEJRMFVzU1VGQlNXTXNSVUZCU1hKQ0xGVkJRVlZWTEVWQlFWTmhMRlZCUXpOQ1NDeEZRVUZSUXl4RlFVRkpRU3hGUVVGRlF5eExRVUZMV2l4RlFVRlZWU3hSUVVGQlFTeEZRVU0zUWl4TlFVRlBUQ3hIUVVOUUxFbEJRMFZpTEc5Q1FVRnZRa01zUjBGRGNFSXNVVUZEUVN4TlFVRk5XU3hIUVVkV0xFOUJSRVZpTEc5Q1FVRnZRa01zUjBGRFptbENMRTFCUzJJc1NVRkJTVWtzV1VGQll5eFRRVUZ2UW1Jc1IwRkRjRU5vUWl4WFFVRlhhVUlzUzBGQlRWa3NXVUZCWVN4aFFVRmpMRTFCUVUxRExFZEJRVXRvUXl4VlFVRlZhMElzU1VGSGJrVm1MRmxCUVZrMFFpeFpRVUZaVUN4VlFVRlhMRU5CUTJwRFV5eFZRVUZYTEZOQlFXMUNhRUlzUjBGRE5VSXNUMEZCVHl4SlFVRkpSQ3hoUVVGaFF5eEZRVUZWUlN4TFFVRkxZU3hMUVVWNlEwVXNVVUZCVXl4VFFVRnBRakZDTEVkQlEzaENMRWxCUVVreVFpeEZRVUZQYUVJc1MwRkRXQ3hQUVVGUExFbEJRVXQwUWl4TFFVRkxkVU1zVTBGQlYzaERMRTlCUVU5M1F5eFRRVUZUTEZOQlFWVkRMRVZCUVZORExFZEJRemRFZEVNc1ZVRkJWVkVzUjBGRFZpeEpRVUZKUlN4RlFVRmxlVUlzUlVGQlMwWXNWVUZCVlN4RFFVTm9RMUFzUzBGQlRTeFRRVUZWUXl4SFFVTmtMRWxCUTBVc1QwRkJUMjVDTEVWQlFVZHRRaXhIUVVOV0xFMUJRVTlNTEVkQlExQm5RaXhGUVVGUGFFSXNSMEZEVUZvc1JVRkJZVmNzWjBKQlIycENSU3hOUVVGUFpTeEZRVU5RVWl4VFFVRlZUeXhUUVUxc1FteERMRmxCUVZrMFFpeFpRVUZoTEVOQlEzWkNVU3hMUVVGTkxGTkJRV05ETEVkQlEyeENMRWxCUVVsRExFVkJRVzlDTEcxQ1FVRlVkRUlzUzBGQmMwSkJMRXRCUVU5WkxGbEJRM2hEVnl4RlFVRlRia01zVlVGQlZVNHNVMEZCVTNWRExFZEJRVWQ2UXl4aFFVTnVReXhIUVVGSk1rTXNSVUZCVVN4RFFVTldMRWxCUVVsRExFVkJRV0V4UXl4VFFVRlRlVU1zUlVGQlQySXNTMEZCUzFjc1NVRkRkRU1zVDBGQlQwY3NSVUZCVjBNc1kwRkJaMEpJTEVWQlFVbEZMRVZCUVdFc1NVRkJTVVlzUlVGQlJTeFRRVUZWZUVJc1IwRkRha1VzVDBGQlR6QkNMRVZCUVZkV0xGVkJRVlZvUWl4TFFVZG9ReXhQUVVGUExFbEJRVWwzUWl4RlFVRkZMRk5CUVZWNFFpeEhRVU55UWl4SlFVRkpORUlzUjBGQlFVRXNSVUZsU2l4UFFXUkJMME1zVlVGQlZTeFhRVU5TTEVsQlFVc3JReXhGUVVGTkxFTkJRMVFzU1VGRFJTeEhRVUZKZUVNc1RVRkJUVzFETEVkQlFVRkJMRVZCUVZVc1UwRkJWVTBzUjBGRk5VSXNSMEZFUVRkQ0xFVkJRVk5UTEV0QlFVdHZRaXhIUVVOV1JDeEZRVUZOTEU5QlFVOTJReXhYUVVOYVFTeFBRVUZSTEU5QlEyWXNUVUZCVDJkQ0xFZEJRMUFzUjBGQlNYVkNMRVZCUVUwc1RVRkJUWFpDTEVWQlJXaENMRmxCUkVGTUxFVkJRVk5OTEUxQlFVMUVMRWRCUldaTUxFVkJRVk5oTEdOQlIxSXNWMEZCWTJVc1IwRkJRVUVzVFVGSGVrSkZMRWRCUVVrc1YwRkRSaXhKUVVGTExFbEJRVWxETEVWQlFVa3NSVUZCUjBNc1JVRkJTVU1zVlVGQlZVTXNUMEZCVVVNc1JVRkJVU3hKUVVGSlF5eE5RVUZOU2l4SFFVRkpSQ3hGUVVGSlF5eEhRVUZKUnl4RlFVRk5TaXhIUVVGTFJTeFZRVUZWUml4TFFVTjZSaXhQUVVGUExFbEJRWEZDTEcxQ1FVRlVOMElzUzBGQmMwSkJMRXRCUVU5WkxHRkJRV0VzVTBGQlZXUXNSMEZEY2tVc1NVRkJTVFJDTEVkQlFVRkJMRVZCVTBvc1QwRlNRUzlETEZWQlFWVXNWMEZEVWl4SlFVRkxLME1zUlVGQlRTeERRVU5VTEVsQlFVc3NTVUZCU1ZNc1JVRkJTU3hGUVVGSFFTeEZRVUZKUml4RlFVRk5SQ3hUUVVGVlJ5eEZRVVZzUXl4SFFVUkJja01zUlVGQlUxTXNTMEZCU3pCQ0xFVkJRVTFGTEVsQlEyaENWQ3hGUVVGTkxFOUJRMVkxUWl4RlFVRlRZU3hqUVVkU0xGZEJRV05sTEVkQlFVRkJMRkZCU3pOQ2VrTXNTMEZCU3pKQ0xGbEJRVmxRTEZWQlFWZDZRaXhYUVVGWkxGZEJRV01zVDBGQlQyOUNMRTlCUlRkRWVrSXNVVUZCVVVFc1VVRkJVVFpFTEVWQlFVY3NRMEZCUlVNc1YwRkJXWHBDTEdOQlJXcERjRU1zVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXZZbk5sY25aaFlteGxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGNvcmU9cmVxdWlyZSgyNiksZ2xvYmFsPXJlcXVpcmUoNDMpLHNwZWNpZXNDb25zdHJ1Y3Rvcj1yZXF1aXJlKDEwNikscHJvbWlzZVJlc29sdmU9cmVxdWlyZSg5MSk7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5SLFwiUHJvbWlzZVwiLHtmaW5hbGx5OmZ1bmN0aW9uKGUpe3ZhciByPXNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLGNvcmUuUHJvbWlzZXx8Z2xvYmFsLlByb21pc2UpLG89XCJmdW5jdGlvblwiPT10eXBlb2YgZTtyZXR1cm4gdGhpcy50aGVuKG8/ZnVuY3Rpb24obyl7cmV0dXJuIHByb21pc2VSZXNvbHZlKHIsZSgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG99KX06ZSxvP2Z1bmN0aW9uKG8pe3JldHVybiBwcm9taXNlUmVzb2x2ZShyLGUoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IG99KX06ZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1d2NtOXRhWE5sTG1acGJtRnNiSGt1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pqYjNKbElpd2laMnh2WW1Gc0lpd2ljM0JsWTJsbGMwTnZibk4wY25WamRHOXlJaXdpY0hKdmJXbHpaVkpsYzI5c2RtVWlMQ0pRSWl3aVVpSXNJbVpwYm1Gc2JIa2lMQ0p2YmtacGJtRnNiSGtpTENKRElpd2lkR2hwY3lJc0lsQnliMjFwYzJVaUxDSnBjMFoxYm1OMGFXOXVJaXdpZEdobGJpSXNJbmdpTENKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeGhRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRXRCUVU5RUxGRkJRVkVzVjBGRFprVXNUMEZCVTBZc1VVRkJVU3hoUVVOcVFrY3NiVUpCUVhGQ1NDeFJRVUZSTERCQ1FVTTNRa2tzWlVGQmFVSktMRkZCUVZFc2MwSkJSVGRDUkN4UlFVRlJRU3hSUVVGUlRTeEZRVUZKVGl4UlFVRlJUeXhGUVVGSExGVkJRVmNzUTBGQlJVTXNVVUZCVnl4VFFVRlZReXhIUVVNdlJDeEpRVUZKUXl4RlFVRkpUaXh0UWtGQmJVSlBMRXRCUVUxVUxFdEJRVXRWTEZOQlFWZFVMRTlCUVU5VExGTkJRM0JFUXl4RlFVRnBReXh0UWtGQllrb3NSVUZEZUVJc1QwRkJUMFVzUzBGQlMwY3NTMEZEVmtRc1JVRkJZU3hUUVVGVlJTeEhRVU55UWl4UFFVRlBWaXhsUVVGbFN5eEZRVUZIUkN4TFFVRmhTeXhMUVVGTExGZEJRV01zVDBGQlQwTXNTMEZET1VST0xFVkJRMHBKTEVWQlFXRXNVMEZCVlVjc1IwRkRja0lzVDBGQlQxZ3NaVUZCWlVzc1JVRkJSMFFzUzBGQllVc3NTMEZCU3l4WFFVRmpMRTFCUVUxRkxFdEJRemRFVUNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbkJ5YjIxcGMyVXVabWx1WVd4c2VTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksbmV3UHJvbWlzZUNhcGFiaWxpdHk9cmVxdWlyZSg3MSkscGVyZm9ybT1yZXF1aXJlKDkwKTskZXhwb3J0KCRleHBvcnQuUyxcIlByb21pc2VcIix7dHJ5OmZ1bmN0aW9uKHIpe3ZhciBlPW5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyksaT1wZXJmb3JtKHIpO3JldHVybihpLmU/ZS5yZWplY3Q6ZS5yZXNvbHZlKShpLnYpLGUucHJvbWlzZX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV3Y205dGFYTmxMblJ5ZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW01bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlpd2ljR1Z5Wm05eWJTSXNJbE1pTENKMGNua2lMQ0pqWVd4c1ltRmphMlp1SWl3aWNISnZiV2x6WlVOaGNHRmlhV3hwZEhraUxDSm1JaXdpZEdocGN5SXNJbkpsYzNWc2RDSXNJbVVpTENKeVpXcGxZM1FpTENKeVpYTnZiSFpsSWl3aWRpSXNJbkJ5YjIxcGMyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zY1VKQlFYVkNSQ3hSUVVGUkxEWkNRVU12UWtVc1VVRkJWVVlzVVVGQlVTeGpRVVYwUWtRc1VVRkJVVUVzVVVGQlVVa3NSVUZCUnl4VlFVRlhMRU5CUVVWRExFbEJRVThzVTBGQlZVTXNSMEZETDBNc1NVRkJTVU1zUlVGQmIwSk1MSEZDUVVGeFFrMHNSVUZCUlVNc1RVRkRNME5ETEVWQlFWTlFMRkZCUVZGSExFZEJSWEpDTEU5QlJFTkpMRVZCUVU5RExFVkJRVWxLTEVWQlFXdENTeXhQUVVGVFRDeEZRVUZyUWswc1UwRkJVMGdzUlVGQlQwa3NSMEZEYkVWUUxFVkJRV3RDVVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbkJ5YjIxcGMyVXVkSEo1TG1wekluMD0iLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZSg2OSksYW5PYmplY3Q9cmVxdWlyZSgxMCksdG9NZXRhS2V5PW1ldGFkYXRhLmtleSxvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhPW1ldGFkYXRhLnNldDttZXRhZGF0YS5leHAoe2RlZmluZU1ldGFkYXRhOmZ1bmN0aW9uKGEsZSx0LG4pe29yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoYSxlLGFuT2JqZWN0KHQpLHRvTWV0YUtleShuKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1SbFptbHVaUzF0WlhSaFpHRjBZUzVxY3lKZExDSnVZVzFsY3lJNld5SnRaWFJoWkdGMFlTSXNJbkpsY1hWcGNtVWlMQ0poYms5aWFtVmpkQ0lzSW5SdlRXVjBZVXRsZVNJc0ltdGxlU0lzSW05eVpHbHVZWEo1UkdWbWFXNWxUM2R1VFdWMFlXUmhkR0VpTENKelpYUWlMQ0psZUhBaUxDSmtaV1pwYm1WTlpYUmhaR0YwWVNJc0ltMWxkR0ZrWVhSaFMyVjVJaXdpYldWMFlXUmhkR0ZXWVd4MVpTSXNJblJoY21kbGRDSXNJblJoY21kbGRFdGxlU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3hsUVVOdVFrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRlZCUVZsSUxGTkJRVk5KTEVsQlEzSkNReXd3UWtGQk5FSk1MRk5CUVZOTkxFbEJSWHBEVGl4VFFVRlRUeXhKUVVGSkxFTkJRVVZETEdWQlFXZENMRk5CUVhkQ1F5eEZRVUZoUXl4RlFVRmxReXhGUVVGUlF5eEhRVU42UmxBc01FSkJRVEJDU1N4RlFVRmhReXhGUVVGbFVpeFRRVUZUVXl4SFFVRlRVaXhWUVVGVlV5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG5KbFpteGxZM1F1WkdWbWFXNWxMVzFsZEdGa1lYUmhMbXB6SW4wPSIsInZhciBtZXRhZGF0YT1yZXF1aXJlKDY5KSxhbk9iamVjdD1yZXF1aXJlKDEwKSx0b01ldGFLZXk9bWV0YWRhdGEua2V5LGdldE9yQ3JlYXRlTWV0YWRhdGFNYXA9bWV0YWRhdGEubWFwLHN0b3JlPW1ldGFkYXRhLnN0b3JlO21ldGFkYXRhLmV4cCh7ZGVsZXRlTWV0YWRhdGE6ZnVuY3Rpb24oZSx0KXt2YXIgYT1hcmd1bWVudHMubGVuZ3RoPDM/dm9pZCAwOnRvTWV0YUtleShhcmd1bWVudHNbMl0pLHI9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0KSxhLCExKTtpZih2b2lkIDA9PT1yfHwhci5kZWxldGUoZSkpcmV0dXJuITE7aWYoci5zaXplKXJldHVybiEwO3ZhciBkPXN0b3JlLmdldCh0KTtyZXR1cm4gZC5kZWxldGUoYSksISFkLnNpemV8fHN0b3JlLmRlbGV0ZSh0KX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbVJsYkdWMFpTMXRaWFJoWkdGMFlTNXFjeUpkTENKdVlXMWxjeUk2V3lKdFpYUmhaR0YwWVNJc0luSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJblJ2VFdWMFlVdGxlU0lzSW10bGVTSXNJbWRsZEU5eVEzSmxZWFJsVFdWMFlXUmhkR0ZOWVhBaUxDSnRZWEFpTENKemRHOXlaU0lzSW1WNGNDSXNJbVJsYkdWMFpVMWxkR0ZrWVhSaElpd2liV1YwWVdSaGRHRkxaWGtpTENKMFlYSm5aWFFpTENKMFlYSm5aWFJMWlhraUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0p0WlhSaFpHRjBZVTFoY0NJc0ltUmxiR1YwWlNJc0luTnBlbVVpTENKMFlYSm5aWFJOWlhSaFpHRjBZU0lzSW1kbGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeGxRVU51UWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGVkJRVmxJTEZOQlFWTkpMRWxCUTNKQ1F5eDFRa0ZCZVVKTUxGTkJRVk5OTEVsQlEyeERReXhOUVVGUlVDeFRRVUZUVHl4TlFVVnlRbEFzVTBGQlUxRXNTVUZCU1N4RFFVRkZReXhsUVVGblFpeFRRVUYzUWtNc1JVRkJZVU1zUjBGRGJFVXNTVUZCU1VNc1JVRkJXVU1zVlVGQlZVTXNUMEZCVXl4UFFVRkJMRVZCUVdkQ1dDeFZRVUZWVlN4VlFVRlZMRWxCUTI1RlJTeEZRVUZqVml4MVFrRkJkVUpJTEZOQlFWTlRMRWRCUVZORExFZEJRVUZCTEVkQlF6TkVMRkZCUVVFc1NVRkJTVWNzU1VGQk9FSkJMRVZCUVc5Q1F5eFBRVUZGVGl4SFFVRmpMRTlCUVVFc1JVRkRkRVVzUjBGQlNVc3NSVUZCV1VVc1MwRkJUU3hQUVVGQkxFVkJRM1JDTEVsQlFVbERMRVZCUVdsQ1dDeE5RVUZOV1N4SlFVRkpVaXhIUVVVdlFpeFBRVVJCVHl4RlFVRjFRa1lzVDBGQlJVb3NTMEZEYUVKTkxFVkJRV1ZFTEUxQlFWRldMRTFCUVdOVExFOUJRVVZNSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4amIzSmxMV3B6WEZ4dGIyUjFiR1Z6WEZ4bGN6Y3VjbVZtYkdWamRDNWtaV3hsZEdVdGJXVjBZV1JoZEdFdWFuTWlmUT09IiwidmFyIFNldD1yZXF1aXJlKDIzNSksZnJvbT1yZXF1aXJlKDEzKSxtZXRhZGF0YT1yZXF1aXJlKDY5KSxhbk9iamVjdD1yZXF1aXJlKDEwKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKDgxKSxvcmRpbmFyeU93bk1ldGFkYXRhS2V5cz1tZXRhZGF0YS5rZXlzLHRvTWV0YUtleT1tZXRhZGF0YS5rZXksb3JkaW5hcnlNZXRhZGF0YUtleXM9ZnVuY3Rpb24oZSxhKXt2YXIgdD1vcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhlLGEpLHI9Z2V0UHJvdG90eXBlT2YoZSk7aWYobnVsbD09PXIpcmV0dXJuIHQ7dmFyIG49b3JkaW5hcnlNZXRhZGF0YUtleXMocixhKTtyZXR1cm4gbi5sZW5ndGg/dC5sZW5ndGg/ZnJvbShuZXcgU2V0KHQuY29uY2F0KG4pKSk6bjp0fTttZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhS2V5czpmdW5jdGlvbihlKXtyZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QoZSksYXJndW1lbnRzLmxlbmd0aDwyP3ZvaWQgMDp0b01ldGFLZXkoYXJndW1lbnRzWzFdKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1kbGRDMXRaWFJoWkdGMFlTMXJaWGx6TG1weklsMHNJbTVoYldWeklqcGJJbE5sZENJc0luSmxjWFZwY21VaUxDSm1jbTl0SWl3aWJXVjBZV1JoZEdFaUxDSmhiazlpYW1WamRDSXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2liM0prYVc1aGNubFBkMjVOWlhSaFpHRjBZVXRsZVhNaUxDSnJaWGx6SWl3aWRHOU5aWFJoUzJWNUlpd2lhMlY1SWl3aWIzSmthVzVoY25sTlpYUmhaR0YwWVV0bGVYTWlMQ0pQSWl3aVVDSXNJbTlMWlhseklpd2ljR0Z5Wlc1MElpd2ljRXRsZVhNaUxDSnNaVzVuZEdnaUxDSmpiMjVqWVhRaUxDSmxlSEFpTENKblpYUk5aWFJoWkdGMFlVdGxlWE1pTENKMFlYSm5aWFFpTENKaGNtZDFiV1Z1ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEVsQlFVMURMRkZCUVZFc1lVRkRaRU1zUzBGQlQwUXNVVUZCVVN3d1FrRkRaa1VzVTBGQlYwWXNVVUZCVVN4bFFVTnVRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkRia0pKTEdWQlFXbENTaXhSUVVGUkxHbENRVU42UWtzc2QwSkJRVEJDU0N4VFFVRlRTU3hMUVVOdVEwTXNWVUZCV1V3c1UwRkJVMDBzU1VGRmNrSkRMSEZDUVVGMVFpeFRRVUZWUXl4RlFVRkhReXhIUVVOMFF5eEpRVUZKUXl4RlFVRlJVQ3gzUWtGQmQwSkxMRVZCUVVkRExFZEJRMjVEUlN4RlFVRlRWQ3hsUVVGbFRTeEhRVU0xUWl4SFFVRmxMRTlCUVZoSExFVkJRV2xDTEU5QlFVOUVMRVZCUXpWQ0xFbEJRVWxGTEVWQlFWRk1MSEZDUVVGeFFra3NSVUZCVVVZc1IwRkRla01zVDBGQlQwY3NSVUZCVFVNc1QwRkJVMGdzUlVGQlRVY3NUMEZCVTJRc1MwRkJTeXhKUVVGSlJpeEpRVUZKWVN4RlFVRk5TU3hQUVVGUFJpeExRVUZYUVN4RlFVRlJSaXhIUVVkd1JsWXNVMEZCVTJVc1NVRkJTU3hEUVVGRlF5eG5Ra0ZCYVVJc1UwRkJlVUpETEVkQlEzWkVMRTlCUVU5V0xIRkNRVUZ4UWs0c1UwRkJVMmRDTEVkQlFWTkRMRlZCUVZWTUxFOUJRVk1zVDBGQlFTeEZRVUZuUWxJc1ZVRkJWV0VzVlVGQlZTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG5KbFpteGxZM1F1WjJWMExXMWxkR0ZrWVhSaExXdGxlWE11YW5NaWZRPT0iLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZSg2OSksYW5PYmplY3Q9cmVxdWlyZSgxMCksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZSg4MSksb3JkaW5hcnlIYXNPd25NZXRhZGF0YT1tZXRhZGF0YS5oYXMsb3JkaW5hcnlHZXRPd25NZXRhZGF0YT1tZXRhZGF0YS5nZXQsdG9NZXRhS2V5PW1ldGFkYXRhLmtleSxvcmRpbmFyeUdldE1ldGFkYXRhPWZ1bmN0aW9uKGEsdCxlKXtpZihvcmRpbmFyeUhhc093bk1ldGFkYXRhKGEsdCxlKSlyZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShhLHQsZSk7dmFyIHI9Z2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGwhPT1yP29yZGluYXJ5R2V0TWV0YWRhdGEoYSxyLGUpOnZvaWQgMH07bWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YTpmdW5jdGlvbihhLHQpe3JldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKGEsYW5PYmplY3QodCksYXJndW1lbnRzLmxlbmd0aDwzP3ZvaWQgMDp0b01ldGFLZXkoYXJndW1lbnRzWzJdKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1kbGRDMXRaWFJoWkdGMFlTNXFjeUpkTENKdVlXMWxjeUk2V3lKdFpYUmhaR0YwWVNJc0luSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2liM0prYVc1aGNubElZWE5QZDI1TlpYUmhaR0YwWVNJc0ltaGhjeUlzSW05eVpHbHVZWEo1UjJWMFQzZHVUV1YwWVdSaGRHRWlMQ0puWlhRaUxDSjBiMDFsZEdGTFpYa2lMQ0pyWlhraUxDSnZjbVJwYm1GeWVVZGxkRTFsZEdGa1lYUmhJaXdpVFdWMFlXUmhkR0ZMWlhraUxDSlBJaXdpVUNJc0luQmhjbVZ1ZENJc0ltVjRjQ0lzSW1kbGRFMWxkR0ZrWVhSaElpd2liV1YwWVdSaGRHRkxaWGtpTENKMFlYSm5aWFFpTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZOQlFWZERMRkZCUVZFc1pVRkRia0pETEZOQlFWZEVMRkZCUVZFc1owSkJRMjVDUlN4bFFVRnBRa1lzVVVGQlVTeHBRa0ZEZWtKSExIVkNRVUY1UWtvc1UwRkJVMHNzU1VGRGJFTkRMSFZDUVVGNVFrNHNVMEZCVTA4c1NVRkRiRU5ETEZWQlFWbFNMRk5CUVZOVExFbEJSWEpDUXl4dlFrRkJjMElzVTBGQlZVTXNSVUZCWVVNc1JVRkJSME1zUjBGRmJFUXNSMEZFWVZRc2RVSkJRWFZDVHl4RlFVRmhReXhGUVVGSFF5eEhRVU40UXl4UFFVRlBVQ3gxUWtGQmRVSkxMRVZCUVdGRExFVkJRVWRETEVkQlF6RkVMRWxCUVVsRExFVkJRVk5ZTEdWQlFXVlRMRWRCUXpWQ0xFOUJRV3RDTEU5QlFWaEZMRVZCUVd0Q1NpeHZRa0ZCYjBKRExFVkJRV0ZITEVWQlFWRkVMRkZCUVVGQkxFZEJSM0JGWWl4VFFVRlRaU3hKUVVGSkxFTkJRVVZETEZsQlFXRXNVMEZCY1VKRExFVkJRV0ZETEVkQlF6VkVMRTlCUVU5U0xHOUNRVUZ2UWs4c1JVRkJZV1lzVTBGQlUyZENMRWRCUVZORExGVkJRVlZETEU5QlFWTXNUMEZCUVN4RlFVRm5RbG9zVlVGQlZWY3NWVUZCVlNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbkpsWm14bFkzUXVaMlYwTFcxbGRHRmtZWFJoTG1wekluMD0iLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZSg2OSksYW5PYmplY3Q9cmVxdWlyZSgxMCksb3JkaW5hcnlPd25NZXRhZGF0YUtleXM9bWV0YWRhdGEua2V5cyx0b01ldGFLZXk9bWV0YWRhdGEua2V5O21ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGFLZXlzOmZ1bmN0aW9uKGEpe3JldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdChhKSxhcmd1bWVudHMubGVuZ3RoPDI/dm9pZCAwOnRvTWV0YUtleShhcmd1bWVudHNbMV0pKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbWRsZEMxdmQyNHRiV1YwWVdSaGRHRXRhMlY1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUp0WlhSaFpHRjBZU0lzSW5KbGNYVnBjbVVpTENKaGJrOWlhbVZqZENJc0ltOXlaR2x1WVhKNVQzZHVUV1YwWVdSaGRHRkxaWGx6SWl3aWEyVjVjeUlzSW5SdlRXVjBZVXRsZVNJc0ltdGxlU0lzSW1WNGNDSXNJbWRsZEU5M2JrMWxkR0ZrWVhSaFMyVjVjeUlzSW5SaGNtZGxkQ0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4bFFVTnVRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEhkQ1FVRXdRa2dzVTBGQlUwa3NTMEZEYmtORExGVkJRVmxNTEZOQlFWTk5MRWxCUlhwQ1RpeFRRVUZUVHl4SlFVRkpMRU5CUVVWRExHMUNRVUZ2UWl4VFFVRTBRa01zUjBGRE4wUXNUMEZCVDA0c2QwSkJRWGRDUkN4VFFVRlRUeXhIUVVGVFF5eFZRVUZWUXl4UFFVRlRMRTlCUVVFc1JVRkJaMEpPTEZWQlFWVkxMRlZCUVZVaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTV5Wldac1pXTjBMbWRsZEMxdmQyNHRiV1YwWVdSaGRHRXRhMlY1Y3k1cWN5SjkiLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZSg2OSksYW5PYmplY3Q9cmVxdWlyZSgxMCksb3JkaW5hcnlHZXRPd25NZXRhZGF0YT1tZXRhZGF0YS5nZXQsdG9NZXRhS2V5PW1ldGFkYXRhLmtleTttZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhOmZ1bmN0aW9uKGEsdCl7cmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoYSxhbk9iamVjdCh0KSxhcmd1bWVudHMubGVuZ3RoPDM/dm9pZCAwOnRvTWV0YUtleShhcmd1bWVudHNbMl0pKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbWRsZEMxdmQyNHRiV1YwWVdSaGRHRXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXVjBZV1JoZEdFaUxDSnlaWEYxYVhKbElpd2lZVzVQWW1wbFkzUWlMQ0p2Y21ScGJtRnllVWRsZEU5M2JrMWxkR0ZrWVhSaElpd2laMlYwSWl3aWRHOU5aWFJoUzJWNUlpd2lhMlY1SWl3aVpYaHdJaXdpWjJWMFQzZHVUV1YwWVdSaGRHRWlMQ0p0WlhSaFpHRjBZVXRsZVNJc0luUmhjbWRsZENJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeGxRVU51UWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxIVkNRVUY1UWtnc1UwRkJVMGtzU1VGRGJFTkRMRlZCUVZsTUxGTkJRVk5OTEVsQlJYcENUaXhUUVVGVFR5eEpRVUZKTEVOQlFVVkRMR1ZCUVdkQ0xGTkJRWGRDUXl4RlFVRmhReXhIUVVOc1JTeFBRVUZQVUN4MVFrRkJkVUpOTEVWQlFXRlFMRk5CUVZOUkxFZEJRMmhFUXl4VlFVRlZReXhQUVVGVExFOUJRVUVzUlVGQlowSlFMRlZCUVZWTkxGVkJRVlVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXlaV1pzWldOMExtZGxkQzF2ZDI0dGJXVjBZV1JoZEdFdWFuTWlmUT09IiwidmFyIG1ldGFkYXRhPXJlcXVpcmUoNjkpLGFuT2JqZWN0PXJlcXVpcmUoMTApLGdldFByb3RvdHlwZU9mPXJlcXVpcmUoODEpLG9yZGluYXJ5SGFzT3duTWV0YWRhdGE9bWV0YWRhdGEuaGFzLHRvTWV0YUtleT1tZXRhZGF0YS5rZXksb3JkaW5hcnlIYXNNZXRhZGF0YT1mdW5jdGlvbihhLHQsZSl7aWYob3JkaW5hcnlIYXNPd25NZXRhZGF0YShhLHQsZSkpcmV0dXJuITA7dmFyIHI9Z2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGwhPT1yJiZvcmRpbmFyeUhhc01ldGFkYXRhKGEscixlKX07bWV0YWRhdGEuZXhwKHtoYXNNZXRhZGF0YTpmdW5jdGlvbihhLHQpe3JldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKGEsYW5PYmplY3QodCksYXJndW1lbnRzLmxlbmd0aDwzP3ZvaWQgMDp0b01ldGFLZXkoYXJndW1lbnRzWzJdKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1oaGN5MXRaWFJoWkdGMFlTNXFjeUpkTENKdVlXMWxjeUk2V3lKdFpYUmhaR0YwWVNJc0luSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2liM0prYVc1aGNubElZWE5QZDI1TlpYUmhaR0YwWVNJc0ltaGhjeUlzSW5SdlRXVjBZVXRsZVNJc0ltdGxlU0lzSW05eVpHbHVZWEo1U0dGelRXVjBZV1JoZEdFaUxDSk5aWFJoWkdGMFlVdGxlU0lzSWs4aUxDSlFJaXdpY0dGeVpXNTBJaXdpWlhod0lpd2lhR0Z6VFdWMFlXUmhkR0VpTENKdFpYUmhaR0YwWVV0bGVTSXNJblJoY21kbGRDSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3hsUVVOdVFrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMR1ZCUVdsQ1JpeFJRVUZSTEdsQ1FVTjZRa2NzZFVKQlFYbENTaXhUUVVGVFN5eEpRVU5zUTBNc1ZVRkJXVTRzVTBGQlUwOHNTVUZGY2tKRExHOUNRVUZ6UWl4VFFVRlZReXhGUVVGaFF5eEZRVUZIUXl4SFFVVnNSQ3hIUVVSaFVDeDFRa0ZCZFVKTExFVkJRV0ZETEVWQlFVZERMRWRCUTNoRExFOUJRVUVzUlVGRFdpeEpRVUZKUXl4RlFVRlRWQ3hsUVVGbFR5eEhRVU0xUWl4UFFVRnJRaXhQUVVGWVJTeEhRVUZyUWtvc2IwSkJRVzlDUXl4RlFVRmhSeXhGUVVGUlJDeEpRVWR3UlZnc1UwRkJVMkVzU1VGQlNTeERRVUZGUXl4WlFVRmhMRk5CUVhGQ1F5eEZRVUZoUXl4SFFVTTFSQ3hQUVVGUFVpeHZRa0ZCYjBKUExFVkJRV0ZpTEZOQlFWTmpMRWRCUVZORExGVkJRVlZETEU5QlFWTXNUMEZCUVN4RlFVRm5RbG9zVlVGQlZWY3NWVUZCVlNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y1pYTTNMbkpsWm14bFkzUXVhR0Z6TFcxbGRHRmtZWFJoTG1wekluMD0iLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZSg2OSksYW5PYmplY3Q9cmVxdWlyZSgxMCksb3JkaW5hcnlIYXNPd25NZXRhZGF0YT1tZXRhZGF0YS5oYXMsdG9NZXRhS2V5PW1ldGFkYXRhLmtleTttZXRhZGF0YS5leHAoe2hhc093bk1ldGFkYXRhOmZ1bmN0aW9uKGEsdCl7cmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoYSxhbk9iamVjdCh0KSxhcmd1bWVudHMubGVuZ3RoPDM/dm9pZCAwOnRvTWV0YUtleShhcmd1bWVudHNbMl0pKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbWhoY3kxdmQyNHRiV1YwWVdSaGRHRXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXVjBZV1JoZEdFaUxDSnlaWEYxYVhKbElpd2lZVzVQWW1wbFkzUWlMQ0p2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaElpd2lhR0Z6SWl3aWRHOU5aWFJoUzJWNUlpd2lhMlY1SWl3aVpYaHdJaXdpYUdGelQzZHVUV1YwWVdSaGRHRWlMQ0p0WlhSaFpHRjBZVXRsZVNJc0luUmhjbWRsZENJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeGxRVU51UWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxIVkNRVUY1UWtnc1UwRkJVMGtzU1VGRGJFTkRMRlZCUVZsTUxGTkJRVk5OTEVsQlJYcENUaXhUUVVGVFR5eEpRVUZKTEVOQlFVVkRMR1ZCUVdkQ0xGTkJRWGRDUXl4RlFVRmhReXhIUVVOc1JTeFBRVUZQVUN4MVFrRkJkVUpOTEVWQlFXRlFMRk5CUVZOUkxFZEJRMmhFUXl4VlFVRlZReXhQUVVGVExFOUJRVUVzUlVGQlowSlFMRlZCUVZWTkxGVkJRVlVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXlaV1pzWldOMExtaGhjeTF2ZDI0dGJXVjBZV1JoZEdFdWFuTWlmUT09IiwidmFyICRtZXRhZGF0YT1yZXF1aXJlKDY5KSxhbk9iamVjdD1yZXF1aXJlKDEwKSxhRnVuY3Rpb249cmVxdWlyZSg1KSx0b01ldGFLZXk9JG1ldGFkYXRhLmtleSxvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhPSRtZXRhZGF0YS5zZXQ7JG1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6ZnVuY3Rpb24oYSx0KXtyZXR1cm4gZnVuY3Rpb24oZSxuKXtvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKGEsdCwodm9pZCAwIT09bj9hbk9iamVjdDphRnVuY3Rpb24pKGUpLHRvTWV0YUtleShuKSl9fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXlaV1pzWldOMExtMWxkR0ZrWVhSaExtcHpJbDBzSW01aGJXVnpJanBiSWlSdFpYUmhaR0YwWVNJc0luSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJbUZHZFc1amRHbHZiaUlzSW5SdlRXVjBZVXRsZVNJc0ltdGxlU0lzSW05eVpHbHVZWEo1UkdWbWFXNWxUM2R1VFdWMFlXUmhkR0VpTENKelpYUWlMQ0psZUhBaUxDSnRaWFJoWkdGMFlTSXNJbTFsZEdGa1lYUmhTMlY1SWl3aWJXVjBZV1JoZEdGV1lXeDFaU0lzSW5SaGNtZGxkQ0lzSW5SaGNtZGxkRXRsZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVlVGQldVTXNVVUZCVVN4bFFVTndRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEZWQlFWbEdMRkZCUVZFc2FVSkJRM0JDUnl4VlFVRlpTaXhWUVVGVlN5eEpRVU4wUWtNc01FSkJRVFJDVGl4VlFVRlZUeXhKUVVVeFExQXNWVUZCVlZFc1NVRkJTU3hEUVVGRlF5eFRRVUZWTEZOQlFXdENReXhGUVVGaFF5eEhRVU4yUkN4UFFVRlBMRk5CUVcxQ1F5eEZRVUZSUXl4SFFVTm9RMUFzTUVKQlEwVkpMRVZCUVdGRExGRkJRVUZCTEVsQlExcEZMRVZCUVRCQ1dDeFRRVUZYUXl4WFFVRlhVeXhIUVVOcVJGSXNWVUZCVlZNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTV5Wldac1pXTjBMbTFsZEdGa1lYUmhMbXB6SW4wPSIsInJlcXVpcmUoOTkpKFwiU2V0XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXpaWFF1Wm5KdmJTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVVFc1VVRkJVU3g1UWtGQlVrRXNRMEZCYTBNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTV6WlhRdVpuSnZiUzVxY3lKOSIsInJlcXVpcmUoMTAwKShcIlNldFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6WlhRdWIyWXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxGRkJRVkVzZFVKQlFWSkJMRU5CUVdkRElpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjemN1YzJWMExtOW1MbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoMzYpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuUixcIlNldFwiLHt0b0pTT046cmVxdWlyZSgyMykoXCJTZXRcIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6WlhRdWRHOHRhbk52Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxBaUxDSlNJaXdpZEc5S1UwOU9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSlJpeFJRVUZSUnl4RlFVRkhMRTFCUVU4c1EwRkJSVU1zVDBGQlVVZ3NVVUZCVVN4M1FrRkJVa0VzUTBGQmFVTWlMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tnk1elpYUXVkRzh0YW5OdmJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZSgzNiksJGF0PXJlcXVpcmUoMTA4KSghMCk7JGV4cG9ydCgkZXhwb3J0LlAsXCJTdHJpbmdcIix7YXQ6ZnVuY3Rpb24odCl7cmV0dXJuICRhdCh0aGlzLHQpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXpkSEpwYm1jdVlYUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtZWFFpTENKUUlpd2lZWFFpTENKd2IzTWlMQ0owYUdseklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRWxCUVUxRUxGRkJRVkVzWlVGQlVrRXNSVUZCUVVFc1IwRkZWa1FzVVVGQlVVRXNVVUZCVVVjc1JVRkJSeXhUUVVGVkxFTkJRek5DUXl4SFFVRkpMRk5CUVZsRExFZEJRMlFzVDBGQlQwZ3NTVUZCU1Vrc1MwRkJUVVFpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXpkSEpwYm1jdVlYUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLGRlZmluZWQ9cmVxdWlyZSgzMSksdG9MZW5ndGg9cmVxdWlyZSgxMjApLGlzUmVnRXhwPXJlcXVpcmUoNTUpLGdldEZsYWdzPXJlcXVpcmUoNDApLFJlZ0V4cFByb3RvPVJlZ0V4cC5wcm90b3R5cGUsJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yPWZ1bmN0aW9uKGUscil7dGhpcy5fcj1lLHRoaXMuX3M9cn07cmVxdWlyZSg1NykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLFwiUmVnRXhwIFN0cmluZ1wiLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fci5leGVjKHRoaXMuX3MpO3JldHVybnt2YWx1ZTplLGRvbmU6bnVsbD09PWV9fSksJGV4cG9ydCgkZXhwb3J0LlAsXCJTdHJpbmdcIix7bWF0Y2hBbGw6ZnVuY3Rpb24oZSl7aWYoZGVmaW5lZCh0aGlzKSwhaXNSZWdFeHAoZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgcmVnZXhwIVwiKTt2YXIgcj1TdHJpbmcodGhpcyksdD1cImZsYWdzXCJpbiBSZWdFeHBQcm90bz9TdHJpbmcoZS5mbGFncyk6Z2V0RmxhZ3MuY2FsbChlKSxpPW5ldyBSZWdFeHAoZS5zb3VyY2UsfnQuaW5kZXhPZihcImdcIik/dDpcImdcIit0KTtyZXR1cm4gaS5sYXN0SW5kZXg9dG9MZW5ndGgoZS5sYXN0SW5kZXgpLG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IoaSxyKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6ZEhKcGJtY3ViV0YwWTJndFlXeHNMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2laR1ZtYVc1bFpDSXNJblJ2VEdWdVozUm9JaXdpYVhOU1pXZEZlSEFpTENKblpYUkdiR0ZuY3lJc0lsSmxaMFY0Y0ZCeWIzUnZJaXdpVW1WblJYaHdJaXdpY0hKdmRHOTBlWEJsSWl3aUpGSmxaMFY0Y0ZOMGNtbHVaMGwwWlhKaGRHOXlJaXdpY21WblpYaHdJaXdpYzNSeWFXNW5JaXdpZEdocGN5SXNJbDl5SWl3aVgzTWlMQ0p0WVhSamFDSXNJbVY0WldNaUxDSjJZV3gxWlNJc0ltUnZibVVpTENKUUlpd2liV0YwWTJoQmJHd2lMQ0pVZVhCbFJYSnliM0lpTENKVElpd2lVM1J5YVc1bklpd2labXhoWjNNaUxDSmpZV3hzSWl3aWNuZ2lMQ0p6YjNWeVkyVWlMQ0pwYm1SbGVFOW1JaXdpYkdGemRFbHVaR1Y0SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExGRkJRVlZFTEZGQlFWRXNZMEZEYkVKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eFRRVUZYU0N4UlFVRlJMR2RDUVVOdVFra3NVMEZCVjBvc1VVRkJVU3haUVVOdVFrc3NXVUZCWTBNc1QwRkJUME1zVlVGRmNrSkRMSE5DUVVGM1FpeFRRVUZWUXl4RlFVRlJReXhIUVVNMVEwTXNTMEZCUzBNc1IwRkJTMGdzUlVGRFZrVXNTMEZCUzBVc1IwRkJTMGdzUjBGSFdsWXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSlJMSE5DUVVGMVFpeG5Ra0ZCYVVJc1YwRkRhRVVzU1VGQlNVMHNSVUZCVVVnc1MwRkJTME1zUjBGQlIwY3NTMEZCUzBvc1MwRkJTMFVzU1VGRE9VSXNUVUZCVHl4RFFVRkZSeXhOUVVGUFJpeEZRVUZQUnl4TFFVRm5RaXhQUVVGV1NDeExRVWN2UW1Zc1VVRkJVVUVzVVVGQlVXMUNMRVZCUVVjc1UwRkJWU3hEUVVNelFrTXNVMEZCVlN4VFFVRnJRbFlzUjBGRk1VSXNSMEZFUVZJc1VVRkJVVlVzVDBGRFNGSXNVMEZCVTAwc1IwRkJVeXhOUVVGTlZ5eFZRVUZWV0N4RlFVRlRMSEZDUVVOb1JDeEpRVUZKV1N4RlFVRkpReXhQUVVGUFdDeE5RVU5ZV1N4RlFVRlJMRlZCUVZkc1FpeFpRVUZqYVVJc1QwRkJUMklzUlVGQlQyTXNUMEZCVTI1Q0xGTkJRVk52UWl4TFFVRkxaaXhIUVVOMFJXZENMRVZCUVVzc1NVRkJTVzVDTEU5QlFVOUhMRVZCUVU5cFFpeFJRVUZUU0N4RlFVRk5TU3hSUVVGUkxFdEJRVTlLTEVWQlFWRXNTVUZCVFVFc1IwRkZka1VzVDBGRVFVVXNSVUZCUjBjc1ZVRkJXVEZDTEZOQlFWTlBMRVZCUVU5dFFpeFhRVU40UWl4SlFVRkpjRUlzYzBKQlFYTkNhVUlzUlVGQlNVb2lMQ0ptYVd4bElqb2lSVHBjWEdScFoybDBhR2x1YTJsMFhGeEJkMlZ6YjIxbFEyRnlkRXBUWEZ4dWIyUmxYMjF2WkhWc1pYTmNYR052Y21VdGFuTmNYRzF2WkhWc1pYTmNYR1Z6Tnk1emRISnBibWN1YldGMFkyZ3RZV3hzTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkcGFkPXJlcXVpcmUoMTExKSx1c2VyQWdlbnQ9cmVxdWlyZSgxMjcpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiovVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksXCJTdHJpbmdcIix7cGFkRW5kOmZ1bmN0aW9uKGUpe3JldHVybiAkcGFkKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwhMSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emRISnBibWN1Y0dGa0xXVnVaQzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJaVJ3WVdRaUxDSjFjMlZ5UVdkbGJuUWlMQ0pRSWl3aVJpSXNJblJsYzNRaUxDSndZV1JGYm1RaUxDSnRZWGhNWlc1bmRHZ2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpZFc1a1pXWnBibVZrSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExFdEJRVTlFTEZGQlFWRXNhVUpCUTJaRkxGVkJRVmxHTEZGQlFWRXNhVUpCUjNoQ1JDeFJRVUZSUVN4UlFVRlJTU3hGUVVGSlNpeFJRVUZSU3l4RlFVRkpMRzlEUVVGdlEwTXNTMEZCUzBnc1YwRkJXU3hUUVVGVkxFTkJRemRHU1N4UFFVRlJMRk5CUVdkQ1F5eEhRVU4wUWl4UFFVRlBUaXhMUVVGTFR5eExRVUZOUkN4RlFVRlhSU3hWUVVGVlF5eFBRVUZUTEVWQlFVbEVMRlZCUVZVc1VVRkJRU3hIUVVGTFJTSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG5OMGNtbHVaeTV3WVdRdFpXNWtMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoMzYpLCRwYWQ9cmVxdWlyZSgxMTEpLHVzZXJBZ2VudD1yZXF1aXJlKDEyNyk7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKi9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSxcIlN0cmluZ1wiLHtwYWRTdGFydDpmdW5jdGlvbihyKXtyZXR1cm4gJHBhZCh0aGlzLHIsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsITApfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXpkSEpwYm1jdWNHRmtMWE4wWVhKMExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aUpIQmhaQ0lzSW5WelpYSkJaMlZ1ZENJc0lsQWlMQ0pHSWl3aWRHVnpkQ0lzSW5CaFpGTjBZWEowSWl3aWJXRjRUR1Z1WjNSb0lpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJblZ1WkdWbWFXNWxaQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4TFFVRlBSQ3hSUVVGUkxHbENRVU5tUlN4VlFVRlpSaXhSUVVGUkxHbENRVWQ0UWtRc1VVRkJVVUVzVVVGQlVVa3NSVUZCU1Vvc1VVRkJVVXNzUlVGQlNTeHZRMEZCYjBORExFdEJRVXRJTEZkQlFWa3NVMEZCVlN4RFFVTTNSa2tzVTBGQlZTeFRRVUZyUWtNc1IwRkRNVUlzVDBGQlQwNHNTMEZCUzA4c1MwRkJUVVFzUlVGQlYwVXNWVUZCVlVNc1QwRkJVeXhGUVVGSlJDeFZRVUZWTEZGQlFVRXNSMEZCUzBVaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTV6ZEhKcGJtY3VjR0ZrTFhOMFlYSjBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoMTEzKShcInRyaW1MZWZ0XCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcywxKX19LFwidHJpbVN0YXJ0XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXpkSEpwYm1jdWRISnBiUzFzWldaMExtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENJa2RISnBiU0lzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxGRkJRVkVzYVVKQlFWSkJMRU5CUVRCQ0xGZEJRVmtzVTBGQlZVTXNSMEZET1VNc1QwRkJUeXhYUVVOTUxFOUJRVTlCTEVWQlFVMURMRXRCUVUwc1MwRkZjRUlpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXpkSEpwYm1jdWRISnBiUzFzWldaMExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZSgxMTMpKFwidHJpbVJpZ2h0XCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcywyKX19LFwidHJpbUVuZFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6ZEhKcGJtY3VkSEpwYlMxeWFXZG9kQzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2lKSFJ5YVcwaUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRaXhaUVVGaExGTkJRVlZETEVkQlF5OURMRTlCUVU4c1YwRkRUQ3hQUVVGUFFTeEZRVUZOUXl4TFFVRk5MRXRCUlhCQ0lpd2labWxzWlNJNklrVTZYRnhrYVdkcGRHaHBibXRwZEZ4Y1FYZGxjMjl0WlVOaGNuUktVMXhjYm05a1pWOXRiMlIxYkdWelhGeGpiM0psTFdwelhGeHRiMlIxYkdWelhGeGxjemN1YzNSeWFXNW5MblJ5YVcwdGNtbG5hSFF1YW5NaWZRPT0iLCJyZXF1aXJlKDEyOSkoXCJhc3luY0l0ZXJhdG9yXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXplVzFpYjJ3dVlYTjVibU10YVhSbGNtRjBiM0l1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZFc1owSkJRVkpCTEVOQlFYbENJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRnhsY3pjdWMzbHRZbTlzTG1GemVXNWpMV2wwWlhKaGRHOXlMbXB6SW4wPSIsInJlcXVpcmUoMTI5KShcIm9ic2VydmFibGVcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emVXMWliMnd1YjJKelpYSjJZV0pzWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVVVGQlVTeG5Ra0ZCVWtFc1EwRkJlVUlpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZSgzNik7JGV4cG9ydCgkZXhwb3J0LlMsXCJTeXN0ZW1cIix7Z2xvYmFsOnJlcXVpcmUoNDMpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emVYTjBaVzB1WjJ4dlltRnNMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1kc2IySmhiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFRRVUZWTEVOQlFVVkRMRTlCUVZGR0xGRkJRVkVpTENKbWFXeGxJam9pUlRwY1hHUnBaMmwwYUdsdWEybDBYRnhCZDJWemIyMWxRMkZ5ZEVwVFhGeHViMlJsWDIxdlpIVnNaWE5jWEdOdmNtVXRhbk5jWEcxdlpIVnNaWE5jWEdWek55NXplWE4wWlcwdVoyeHZZbUZzTG1wekluMD0iLCJyZXF1aXJlKDk5KShcIldlYWtNYXBcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1M1pXRnJMVzFoY0M1bWNtOXRMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQlFTeFJRVUZSTEhsQ1FVRlNRU3hEUVVGclF5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG5kbFlXc3RiV0Z3TG1aeWIyMHVhbk1pZlE9PSIsInJlcXVpcmUoMTAwKShcIldlYWtNYXBcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1M1pXRnJMVzFoY0M1dlppNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVVFc1VVRkJVU3gxUWtGQlVrRXNRMEZCWjBNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTUzWldGckxXMWhjQzV2Wmk1cWN5SjkiLCJyZXF1aXJlKDk5KShcIldlYWtTZXRcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1M1pXRnJMWE5sZEM1bWNtOXRMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQlFTeFJRVUZSTEhsQ1FVRlNRU3hEUVVGclF5SXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNZMjl5WlMxcWMxeGNiVzlrZFd4bGMxeGNaWE0zTG5kbFlXc3RjMlYwTG1aeWIyMHVhbk1pZlE9PSIsInJlcXVpcmUoMTAwKShcIldlYWtTZXRcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1M1pXRnJMWE5sZEM1dlppNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVVFc1VVRkJVU3gxUWtGQlVrRXNRMEZCWjBNaUxDSm1hV3hsSWpvaVJUcGNYR1JwWjJsMGFHbHVhMmwwWEZ4QmQyVnpiMjFsUTJGeWRFcFRYRnh1YjJSbFgyMXZaSFZzWlhOY1hHTnZjbVV0YW5OY1hHMXZaSFZzWlhOY1hHVnpOeTUzWldGckxYTmxkQzV2Wmk1cWN5SjkiLCJmb3IodmFyICRpdGVyYXRvcnM9cmVxdWlyZSgxNDQpLGdldEtleXM9cmVxdWlyZSg4MykscmVkZWZpbmU9cmVxdWlyZSg5NCksZ2xvYmFsPXJlcXVpcmUoNDMpLGhpZGU9cmVxdWlyZSg0NSksSXRlcmF0b3JzPXJlcXVpcmUoNjEpLHdrcz1yZXF1aXJlKDEzMSksSVRFUkFUT1I9d2tzKFwiaXRlcmF0b3JcIiksVE9fU1RSSU5HX1RBRz13a3MoXCJ0b1N0cmluZ1RhZ1wiKSxBcnJheVZhbHVlcz1JdGVyYXRvcnMuQXJyYXksRE9NSXRlcmFibGVzPXtDU1NSdWxlTGlzdDohMCxDU1NTdHlsZURlY2xhcmF0aW9uOiExLENTU1ZhbHVlTGlzdDohMSxDbGllbnRSZWN0TGlzdDohMSxET01SZWN0TGlzdDohMSxET01TdHJpbmdMaXN0OiExLERPTVRva2VuTGlzdDohMCxEYXRhVHJhbnNmZXJJdGVtTGlzdDohMSxGaWxlTGlzdDohMSxIVE1MQWxsQ29sbGVjdGlvbjohMSxIVE1MQ29sbGVjdGlvbjohMSxIVE1MRm9ybUVsZW1lbnQ6ITEsSFRNTFNlbGVjdEVsZW1lbnQ6ITEsTWVkaWFMaXN0OiEwLE1pbWVUeXBlQXJyYXk6ITEsTmFtZWROb2RlTWFwOiExLE5vZGVMaXN0OiEwLFBhaW50UmVxdWVzdExpc3Q6ITEsUGx1Z2luOiExLFBsdWdpbkFycmF5OiExLFNWR0xlbmd0aExpc3Q6ITEsU1ZHTnVtYmVyTGlzdDohMSxTVkdQYXRoU2VnTGlzdDohMSxTVkdQb2ludExpc3Q6ITEsU1ZHU3RyaW5nTGlzdDohMSxTVkdUcmFuc2Zvcm1MaXN0OiExLFNvdXJjZUJ1ZmZlckxpc3Q6ITEsU3R5bGVTaGVldExpc3Q6ITAsVGV4dFRyYWNrQ3VlTGlzdDohMSxUZXh0VHJhY2tMaXN0OiExLFRvdWNoTGlzdDohMX0sY29sbGVjdGlvbnM9Z2V0S2V5cyhET01JdGVyYWJsZXMpLGk9MDtpPGNvbGxlY3Rpb25zLmxlbmd0aDtpKyspe3ZhciBrZXksTkFNRT1jb2xsZWN0aW9uc1tpXSxleHBsaWNpdD1ET01JdGVyYWJsZXNbTkFNRV0sQ29sbGVjdGlvbj1nbG9iYWxbTkFNRV0scHJvdG89Q29sbGVjdGlvbiYmQ29sbGVjdGlvbi5wcm90b3R5cGU7aWYocHJvdG8mJihwcm90b1tJVEVSQVRPUl18fGhpZGUocHJvdG8sSVRFUkFUT1IsQXJyYXlWYWx1ZXMpLHByb3RvW1RPX1NUUklOR19UQUddfHxoaWRlKHByb3RvLFRPX1NUUklOR19UQUcsTkFNRSksSXRlcmF0b3JzW05BTUVdPUFycmF5VmFsdWVzLGV4cGxpY2l0KSlmb3Ioa2V5IGluICRpdGVyYXRvcnMpcHJvdG9ba2V5XXx8cmVkZWZpbmUocHJvdG8sa2V5LCRpdGVyYXRvcnNba2V5XSwhMCl9XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWWk1a2IyMHVhWFJsY21GaWJHVXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHbDBaWEpoZEc5eWN5SXNJbkpsY1hWcGNtVWlMQ0puWlhSTFpYbHpJaXdpY21Wa1pXWnBibVVpTENKbmJHOWlZV3dpTENKb2FXUmxJaXdpU1hSbGNtRjBiM0p6SWl3aWQydHpJaXdpU1ZSRlVrRlVUMUlpTENKVVQxOVRWRkpKVGtkZlZFRkhJaXdpUVhKeVlYbFdZV3gxWlhNaUxDSkJjbkpoZVNJc0lrUlBUVWwwWlhKaFlteGxjeUlzSWtOVFUxSjFiR1ZNYVhOMElpd2lRMU5UVTNSNWJHVkVaV05zWVhKaGRHbHZiaUlzSWtOVFUxWmhiSFZsVEdsemRDSXNJa05zYVdWdWRGSmxZM1JNYVhOMElpd2lSRTlOVW1WamRFeHBjM1FpTENKRVQwMVRkSEpwYm1kTWFYTjBJaXdpUkU5TlZHOXJaVzVNYVhOMElpd2lSR0YwWVZSeVlXNXpabVZ5U1hSbGJVeHBjM1FpTENKR2FXeGxUR2x6ZENJc0lraFVUVXhCYkd4RGIyeHNaV04wYVc5dUlpd2lTRlJOVEVOdmJHeGxZM1JwYjI0aUxDSklWRTFNUm05eWJVVnNaVzFsYm5RaUxDSklWRTFNVTJWc1pXTjBSV3hsYldWdWRDSXNJazFsWkdsaFRHbHpkQ0lzSWsxcGJXVlVlWEJsUVhKeVlYa2lMQ0pPWVcxbFpFNXZaR1ZOWVhBaUxDSk9iMlJsVEdsemRDSXNJbEJoYVc1MFVtVnhkV1Z6ZEV4cGMzUWlMQ0pRYkhWbmFXNGlMQ0pRYkhWbmFXNUJjbkpoZVNJc0lsTldSMHhsYm1kMGFFeHBjM1FpTENKVFZrZE9kVzFpWlhKTWFYTjBJaXdpVTFaSFVHRjBhRk5sWjB4cGMzUWlMQ0pUVmtkUWIybHVkRXhwYzNRaUxDSlRWa2RUZEhKcGJtZE1hWE4wSWl3aVUxWkhWSEpoYm5ObWIzSnRUR2x6ZENJc0lsTnZkWEpqWlVKMVptWmxja3hwYzNRaUxDSlRkSGxzWlZOb1pXVjBUR2x6ZENJc0lsUmxlSFJVY21GamEwTjFaVXhwYzNRaUxDSlVaWGgwVkhKaFkydE1hWE4wSWl3aVZHOTFZMmhNYVhOMElpd2lZMjlzYkdWamRHbHZibk1pTENKcElpd2liR1Z1WjNSb0lpd2lhMlY1SWl3aVRrRk5SU0lzSW1WNGNHeHBZMmwwSWl3aVEyOXNiR1ZqZEdsdmJpSXNJbkJ5YjNSdklpd2ljSEp2ZEc5MGVYQmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRTJRMEVzU1VFM1EwRXNTVUZCU1VFc1YwRkJZVU1zVVVGQlVTeDNRa0ZEY2tKRExGRkJRVlZFTEZGQlFWRXNhMEpCUTJ4Q1JTeFRRVUZYUml4UlFVRlJMR1ZCUTI1Q1J5eFBRVUZUU0N4UlFVRlJMR0ZCUTJwQ1NTeExRVUZQU2l4UlFVRlJMRmRCUTJaTExGVkJRVmxNTEZGQlFWRXNaMEpCUTNCQ1RTeEpRVUZOVGl4UlFVRlJMRlZCUTJSUExGTkJRVmRFTEVsQlFVa3NXVUZEWmtVc1kwRkJaMEpHTEVsQlFVa3NaVUZEY0VKSExGbEJRV05LTEZWQlFWVkxMRTFCUlhoQ1F5eGhRVUZsTEVOQlEycENReXhoUVVGQlFTeEZRVU5CUXl4eFFrRkJRVUVzUlVGRFFVTXNZMEZCUVVFc1JVRkRRVU1zWjBKQlFVRkJMRVZCUTBGRExHRkJRVUZCTEVWQlEwRkRMR1ZCUVVGQkxFVkJRMEZETEdOQlFVRkJMRVZCUTBGRExITkNRVUZCUVN4RlFVTkJReXhWUVVGQlFTeEZRVU5CUXl4dFFrRkJRVUVzUlVGRFFVTXNaMEpCUVVGQkxFVkJRMEZETEdsQ1FVRkJRU3hGUVVOQlF5eHRRa0ZCUVVFc1JVRkRRVU1zVjBGQlFVRXNSVUZEUVVNc1pVRkJRVUVzUlVGRFFVTXNZMEZCUVVFc1JVRkRRVU1zVlVGQlFVRXNSVUZEUVVNc2EwSkJRVUZCTEVWQlEwRkRMRkZCUVVGQkxFVkJRMEZETEdGQlFVRkJMRVZCUTBGRExHVkJRVUZCTEVWQlEwRkRMR1ZCUVVGQkxFVkJRMEZETEdkQ1FVRkJRU3hGUVVOQlF5eGpRVUZCUVN4RlFVTkJReXhsUVVGQlFTeEZRVU5CUXl4clFrRkJRVUVzUlVGRFFVTXNhMEpCUVVGQkxFVkJRMEZETEdkQ1FVRkJRU3hGUVVOQlF5eHJRa0ZCUVVFc1JVRkRRVU1zWlVGQlFVRXNSVUZEUVVNc1YwRkJRVUVzUjBGSFQwTXNXVUZCWXpGRExGRkJRVkZWTEdOQlFXVnBReXhGUVVGSkxFVkJRVWRCTEVWQlFVbEVMRmxCUVZsRkxFOUJRVkZFTEVsQlFVc3NRMEZEYUVZc1NVRkpTVVVzU1VGS1FVTXNTMEZCVDBvc1dVRkJXVU1zUjBGRGJrSkpMRk5CUVZkeVF5eGhRVUZoYjBNc1RVRkRlRUpGTEZkQlFXRTVReXhQUVVGUE5FTXNUVUZEY0VKSExFMUJRVkZFTEZsQlFXTkJMRmRCUVZkRkxGVkJSWEpETEVkQlFVbEVMRkZCUTBkQkxFMUJRVTB6UXl4WFFVRlhTQ3hMUVVGTE9FTXNUVUZCVHpORExGTkJRVlZGTEdGQlEzWkRlVU1zVFVGQlRURkRMR2RDUVVGblFrb3NTMEZCU3poRExFMUJRVTh4UXl4alFVRmxkVU1zVFVGRGRFUXhReXhWUVVGVk1FTXNUVUZCVVhSRExGbEJRMlIxUXl4VlFVRlZMRWxCUVV0R0xFOUJRVTh2UXl4WFFVRnBRbTFFTEUxQlFVMUtMRTFCUVUwMVF5eFRRVUZUWjBRc1RVRkJUMG9zU1VGQlN5OURMRmRCUVZjclF5eE5RVUZCUVNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y2QyVmlMbVJ2YlM1cGRHVnlZV0pzWlM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKDM2KSwkdGFzaz1yZXF1aXJlKDExNSk7JGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5CLHtzZXRJbW1lZGlhdGU6JHRhc2suc2V0LGNsZWFySW1tZWRpYXRlOiR0YXNrLmNsZWFyfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWWk1cGJXMWxaR2xoZEdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENJa2RHRnpheUlzSWtjaUxDSkNJaXdpYzJWMFNXMXRaV1JwWVhSbElpd2ljMlYwSWl3aVkyeGxZWEpKYlcxbFpHbGhkR1VpTENKamJHVmhjaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNUVUZCVVVRc1VVRkJVU3hYUVVOd1FrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1JVRkJSeXhEUVVNM1FrTXNZVUZCWTBnc1RVRkJUVWtzU1VGRGNFSkRMR1ZCUVdkQ1RDeE5RVUZOVFNJc0ltWnBiR1VpT2lKRk9seGNaR2xuYVhSb2FXNXJhWFJjWEVGM1pYTnZiV1ZEWVhKMFNsTmNYRzV2WkdWZmJXOWtkV3hsYzF4Y1kyOXlaUzFxYzF4Y2JXOWtkV3hsYzF4Y2QyVmlMbWx0YldWa2FXRjBaUzVxY3lKOSIsInZhciBnbG9iYWw9cmVxdWlyZSg0MyksJGV4cG9ydD1yZXF1aXJlKDM2KSx1c2VyQWdlbnQ9cmVxdWlyZSgxMjcpLHNsaWNlPVtdLnNsaWNlLE1TSUU9L01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpLHdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yLG89ISFuJiZzbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZShuP2Z1bmN0aW9uKCl7KFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDpGdW5jdGlvbih0KSkuYXBwbHkodGhpcyxvKX06dCxyKX19OyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuQiskZXhwb3J0LkYqTVNJRSx7c2V0VGltZW91dDp3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxzZXRJbnRlcnZhbDp3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbCl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZaTUwYVcxbGNuTXVhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWNtVnhkV2x5WlNJc0lpUmxlSEJ2Y25RaUxDSjFjMlZ5UVdkbGJuUWlMQ0p6YkdsalpTSXNJazFUU1VVaUxDSjBaWE4wSWl3aWQzSmhjQ0lzSW5ObGRDSXNJbVp1SWl3aWRHbHRaU0lzSW1KdmRXNWtRWEpuY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbUZ5WjNNaUxDSmpZV3hzSWl3aVJuVnVZM1JwYjI0aUxDSmhjSEJzZVNJc0luUm9hWE1pTENKSElpd2lRaUlzSWtZaUxDSnpaWFJVYVcxbGIzVjBJaXdpYzJWMFNXNTBaWEoyWVd3aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEZGQlFWVkVMRkZCUVZFc1lVRkRiRUpGTEZWQlFWbEdMRkZCUVZFc2FVSkJRM0JDUnl4TlFVRlJMRWRCUVVkQkxFMUJRMWhETEV0QlFVOHNWMEZCVjBNc1MwRkJTMGdzVjBGRGRrSkpMRXRCUVU4c1UwRkJWVU1zUjBGRGJrSXNUMEZCVHl4VFFVRlZReXhGUVVGSlF5eEhRVU51UWl4SlFVRkpReXhGUVVGWlF5eFZRVUZWUXl4UFFVRlRMRVZCUXk5Q1F5eEpRVUZQU0N4SFFVRlpVQ3hOUVVGTlZ5eExRVUZMU0N4VlFVRlhMRWRCUXpkRExFOUJRVTlLTEVWQlFVbEhMRVZCUVZrc1dVRkZVQ3h0UWtGQlRrWXNSVUZCYlVKQkxFVkJRVXRQTEZOQlFWTlFMRWxCUVV0UkxFMUJRVTFETEV0QlFVMUtMRWxCUTNoRVRDeEZRVUZKUXl4TFFVZGFVaXhSUVVGUlFTeFJRVUZSYVVJc1JVRkJTV3BDTEZGQlFWRnJRaXhGUVVGSmJFSXNVVUZCVVcxQ0xFVkJRVWxvUWl4TFFVRk5MRU5CUTJoRWFVSXNWMEZCV1dZc1MwRkJTMUFzVDBGQlQzTkNMRmxCUTNoQ1F5eFpRVUZoYUVJc1MwRkJTMUFzVDBGQlQzVkNJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhqYjNKbExXcHpYRnh0YjJSMWJHVnpYRngzWldJdWRHbHRaWEp6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgc2luZ2xlTWF0Y2hlcj1uZXcgUmVnRXhwKFwiJVthLWYwLTldezJ9XCIsXCJnaVwiKSxtdWx0aU1hdGNoZXI9bmV3IFJlZ0V4cChcIiglW2EtZjAtOV17Mn0pK1wiLFwiZ2lcIik7ZnVuY3Rpb24gZGVjb2RlQ29tcG9uZW50cyhlLHQpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGUuam9pbihcIlwiKSl9Y2F0Y2goZSl7fWlmKDE9PT1lLmxlbmd0aClyZXR1cm4gZTt0PXR8fDE7dmFyIHI9ZS5zbGljZSgwLHQpLG49ZS5zbGljZSh0KTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLGRlY29kZUNvbXBvbmVudHMociksZGVjb2RlQ29tcG9uZW50cyhuKSl9ZnVuY3Rpb24gZGVjb2RlKGUpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGUpfWNhdGNoKG4pe2Zvcih2YXIgdD1lLm1hdGNoKHNpbmdsZU1hdGNoZXIpLHI9MTtyPHQubGVuZ3RoO3IrKyl0PShlPWRlY29kZUNvbXBvbmVudHModCxyKS5qb2luKFwiXCIpKS5tYXRjaChzaW5nbGVNYXRjaGVyKTtyZXR1cm4gZX19bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGBlbmNvZGVkVVJJYCB0byBiZSBvZiB0eXBlIGBzdHJpbmdgLCBnb3QgYFwiK3R5cGVvZiBlK1wiYFwiKTt0cnl7cmV0dXJuIGU9ZS5yZXBsYWNlKC9cXCsvZyxcIiBcIiksZGVjb2RlVVJJQ29tcG9uZW50KGUpfWNhdGNoKHQpe3JldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9e1wiJUZFJUZGXCI6XCLvv73vv71cIixcIiVGRiVGRVwiOlwi77+977+9XCJ9LHI9bXVsdGlNYXRjaGVyLmV4ZWMoZSk7cjspe3RyeXt0W3JbMF1dPWRlY29kZVVSSUNvbXBvbmVudChyWzBdKX1jYXRjaChlKXt2YXIgbj1kZWNvZGUoclswXSk7biE9PXJbMF0mJih0W3JbMF1dPW4pfXI9bXVsdGlNYXRjaGVyLmV4ZWMoZSl9dFtcIiVDMlwiXT1cIu+/vVwiO2Zvcih2YXIgbz1PYmplY3Qua2V5cyh0KSxjPTA7YzxvLmxlbmd0aDtjKyspe3ZhciBhPW9bY107ZT1lLnJlcGxhY2UobmV3IFJlZ0V4cChhLFwiZ1wiKSx0W2FdKX1yZXR1cm4gZX0oZSl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbk5wYm1kc1pVMWhkR05vWlhJaUxDSlNaV2RGZUhBaUxDSnRkV3gwYVUxaGRHTm9aWElpTENKa1pXTnZaR1ZEYjIxd2IyNWxiblJ6SWl3aVkyOXRjRzl1Wlc1MGN5SXNJbk53YkdsMElpd2laR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBJaXdpYW05cGJpSXNJbVZ5Y2lJc0lteGxibWQwYUNJc0lteGxablFpTENKemJHbGpaU0lzSW5KcFoyaDBJaXdpUVhKeVlYa2lMQ0p3Y205MGIzUjVjR1VpTENKamIyNWpZWFFpTENKallXeHNJaXdpWkdWamIyUmxJaXdpYVc1d2RYUWlMQ0owYjJ0bGJuTWlMQ0p0WVhSamFDSXNJbWtpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpXNWpiMlJsWkZWU1NTSXNJbFI1Y0dWRmNuSnZjaUlzSW5KbGNHeGhZMlVpTENKeVpYQnNZV05sVFdGd0lpd2lKVVpGSlVaR0lpd2lKVVpHSlVaRklpd2laWGhsWXlJc0luSmxjM1ZzZENJc0ltVnVkSEpwWlhNaUxDSlBZbXBsWTNRaUxDSnJaWGx6SWl3aWEyVjVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRMGxCTEdOQlFXZENMRWxCUVVsRExFOUJSRm9zWlVGRE1FSXNUVUZEYkVORExHRkJRV1VzU1VGQlNVUXNUMEZCVHl4clFrRkJiMElzVFVGRmJFUXNVMEZCVTBVc2FVSkJRV2xDUXl4RlFVRlpReXhIUVVOeVF5eEpRVVZETEU5QlFVOURMRzFDUVVGdFFrWXNSVUZCVjBjc1MwRkJTeXhMUVVONlF5eE5RVUZQUXl4SlFVbFVMRWRCUVRCQ0xFbEJRWFJDU2l4RlFVRlhTeXhQUVVOa0xFOUJRVTlNTEVWQlIxSkRMRVZCUVZGQkxFZEJRVk1zUlVGSGFrSXNTVUZCU1Vzc1JVRkJUMDRzUlVGQlYwOHNUVUZCVFN4RlFVRkhUaXhIUVVNelFrOHNSVUZCVVZJc1JVRkJWMDhzVFVGQlRVNHNSMEZGTjBJc1QwRkJUMUVzVFVGQlRVTXNWVUZCVlVNc1QwRkJUME1zUzBGQlN5eEhRVUZKWWl4cFFrRkJhVUpQTEVkQlFVOVFMR2xDUVVGcFFsTXNTVUZIYWtZc1UwRkJVMHNzVDBGQlQwTXNSMEZEWml4SlFVTkRMRTlCUVU5YUxHMUNRVUZ0UWxrc1IwRkRla0lzVFVGQlQxWXNSMEZIVWl4SlFVWkJMRWxCUVVsWExFVkJRVk5FTEVWQlFVMUZMRTFCUVUxd1FpeGxRVVZvUW5GQ0xFVkJRVWtzUlVGQlIwRXNSVUZCU1VZc1JVRkJUMVlzVDBGQlVWa3NTVUZIYkVOR0xFZEJSa0ZFTEVWQlFWRm1MR2xDUVVGcFFtZENMRVZCUVZGRkxFZEJRVWRrTEV0QlFVc3NTMEZGTVVKaExFMUJRVTF3UWl4bFFVZDBRaXhQUVVGUGEwSXNSMEY1UTFSSkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRNVUlzUjBGQk1FSXNhVUpCUVdaQkxFVkJRMVlzVFVGQlRTeEpRVUZKUXl4VlFVRlZMRFpFUVVFclJFUXNSVUZCWVN4TFFVZHFSeXhKUVVsRExFOUJTRUZCTEVWQlFXRkJMRVZCUVZkRkxGRkJRVkVzVFVGQlR5eExRVWRvUTNCQ0xHMUNRVUZ0UW10Q0xFZEJRM3BDTEUxQlFVOW9RaXhIUVVWU0xFOUJha1JHTEZOQlFXdERWU3hIUVZGcVF5eEpRVTVCTEVsQlFVbFRMRVZCUVdFc1EwRkRhRUpETEZOQlFWVXNTMEZEVmtNc1UwRkJWU3hOUVVkUVZDeEZRVUZSYkVJc1lVRkJZVFJDTEV0QlFVdGFMRWRCUTNaQ1JTeEhRVUZQTEVOQlEySXNTVUZGUTA4c1JVRkJWMUFzUlVGQlRTeEpRVUZOWkN4dFFrRkJiVUpqTEVWQlFVMHNTVUZETDBNc1RVRkJUMW9zUjBGRFVpeEpRVUZKZFVJc1JVRkJVMlFzVDBGQlQwY3NSVUZCVFN4SlFVVjBRbGNzU1VGQlYxZ3NSVUZCVFN4TFFVTndRazhzUlVGQlYxQXNSVUZCVFN4SlFVRk5WeXhIUVVsNlFsZ3NSVUZCVVd4Q0xHRkJRV0UwUWl4TFFVRkxXaXhIUVVrelFsTXNSVUZCVnl4UFFVRlRMRWxCU1hCQ0xFbEJSa0VzU1VGQlNVc3NSVUZCVlVNc1QwRkJUME1zUzBGQlMxQXNSMEZGYWtKT0xFVkJRVWtzUlVGQlIwRXNSVUZCU1Zjc1JVRkJVWFpDTEU5QlFWRlpMRWxCUVVzc1EwRkZlRU1zU1VGQlNXTXNSVUZCVFVnc1JVRkJVVmdzUjBGRGJFSklMRVZCUVZGQkxFVkJRVTFSTEZGQlFWRXNTVUZCU1hwQ0xFOUJRVTlyUXl4RlFVRkxMRXRCUVUxU0xFVkJRVmRSTEVsQlIzaEVMRTlCUVU5cVFpeEZRV3hEVWl4RFFXbEVhME5OSWl3aVptbHNaU0k2SWtVNlhGeGthV2RwZEdocGJtdHBkRnhjUVhkbGMyOXRaVU5oY25SS1UxeGNibTlrWlY5dGIyUjFiR1Z6WEZ4a1pXTnZaR1V0ZFhKcExXTnZiWEJ2Ym1WdWRGeGNhVzVrWlhndWFuTWlmUT09IiwiIWZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LmlzQXJyYXk/QXJyYXkuaXNBcnJheTpmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LGk9MTA7ZnVuY3Rpb24gcygpe3RoaXMuX2V2ZW50cz17fSx0aGlzLl9jb25mJiZuLmNhbGwodGhpcyx0aGlzLl9jb25mKX1mdW5jdGlvbiBuKHQpe3Q/KHRoaXMuX2NvbmY9dCx0LmRlbGltaXRlciYmKHRoaXMuZGVsaW1pdGVyPXQuZGVsaW1pdGVyKSx0aGlzLl9tYXhMaXN0ZW5lcnM9dC5tYXhMaXN0ZW5lcnMhPT1lP3QubWF4TGlzdGVuZXJzOmksdC53aWxkY2FyZCYmKHRoaXMud2lsZGNhcmQ9dC53aWxkY2FyZCksdC5uZXdMaXN0ZW5lciYmKHRoaXMuX25ld0xpc3RlbmVyPXQubmV3TGlzdGVuZXIpLHQucmVtb3ZlTGlzdGVuZXImJih0aGlzLl9yZW1vdmVMaXN0ZW5lcj10LnJlbW92ZUxpc3RlbmVyKSx0LnZlcmJvc2VNZW1vcnlMZWFrJiYodGhpcy52ZXJib3NlTWVtb3J5TGVhaz10LnZlcmJvc2VNZW1vcnlMZWFrKSx0aGlzLndpbGRjYXJkJiYodGhpcy5saXN0ZW5lclRyZWU9e30pKTp0aGlzLl9tYXhMaXN0ZW5lcnM9aX1mdW5jdGlvbiByKGUsdCl7dmFyIGk9XCIobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIitlK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuXCI7aWYodGhpcy52ZXJib3NlTWVtb3J5TGVhayYmKGkrPVwiIEV2ZW50IG5hbWU6IFwiK3QrXCIuXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZwcm9jZXNzLmVtaXRXYXJuaW5nKXt2YXIgcz1uZXcgRXJyb3IoaSk7cy5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIscy5lbWl0dGVyPXRoaXMscy5jb3VudD1lLHByb2Nlc3MuZW1pdFdhcm5pbmcocyl9ZWxzZSBjb25zb2xlLmVycm9yKGkpLGNvbnNvbGUudHJhY2UmJmNvbnNvbGUudHJhY2UoKX1mdW5jdGlvbiBsKGUpe3RoaXMuX2V2ZW50cz17fSx0aGlzLl9uZXdMaXN0ZW5lcj0hMSx0aGlzLl9yZW1vdmVMaXN0ZW5lcj0hMSx0aGlzLnZlcmJvc2VNZW1vcnlMZWFrPSExLG4uY2FsbCh0aGlzLGUpfWZ1bmN0aW9uIG8oZSx0LGkscyl7aWYoIWkpcmV0dXJuW107dmFyIG4scixsLGgsYSxjLGYscD1bXSx1PXQubGVuZ3RoLF89dFtzXSx5PXRbcysxXTtpZihzPT09dSYmaS5fbGlzdGVuZXJzKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLl9saXN0ZW5lcnMpcmV0dXJuIGUmJmUucHVzaChpLl9saXN0ZW5lcnMpLFtpXTtmb3Iobj0wLHI9aS5fbGlzdGVuZXJzLmxlbmd0aDtuPHI7bisrKWUmJmUucHVzaChpLl9saXN0ZW5lcnNbbl0pO3JldHVybltpXX1pZihcIipcIj09PV98fFwiKipcIj09PV98fGlbX10pe2lmKFwiKlwiPT09Xyl7Zm9yKGwgaW4gaSlcIl9saXN0ZW5lcnNcIiE9PWwmJmkuaGFzT3duUHJvcGVydHkobCkmJihwPXAuY29uY2F0KG8oZSx0LGlbbF0scysxKSkpO3JldHVybiBwfWlmKFwiKipcIj09PV8pe2ZvcihsIGluKGY9cysxPT09dXx8cysyPT09dSYmXCIqXCI9PT15KSYmaS5fbGlzdGVuZXJzJiYocD1wLmNvbmNhdChvKGUsdCxpLHUpKSksaSlcIl9saXN0ZW5lcnNcIiE9PWwmJmkuaGFzT3duUHJvcGVydHkobCkmJihcIipcIj09PWx8fFwiKipcIj09PWw/KGlbbF0uX2xpc3RlbmVycyYmIWYmJihwPXAuY29uY2F0KG8oZSx0LGlbbF0sdSkpKSxwPXAuY29uY2F0KG8oZSx0LGlbbF0scykpKTpwPWw9PT15P3AuY29uY2F0KG8oZSx0LGlbbF0scysyKSk6cC5jb25jYXQobyhlLHQsaVtsXSxzKSkpO3JldHVybiBwfXA9cC5jb25jYXQobyhlLHQsaVtfXSxzKzEpKX1pZigoaD1pW1wiKlwiXSkmJm8oZSx0LGgscysxKSxhPWlbXCIqKlwiXSlpZihzPHUpZm9yKGwgaW4gYS5fbGlzdGVuZXJzJiZvKGUsdCxhLHUpLGEpXCJfbGlzdGVuZXJzXCIhPT1sJiZhLmhhc093blByb3BlcnR5KGwpJiYobD09PXk/byhlLHQsYVtsXSxzKzIpOmw9PT1fP28oZSx0LGFbbF0scysxKTooKGM9e30pW2xdPWFbbF0sbyhlLHQse1wiKipcIjpjfSxzKzEpKSk7ZWxzZSBhLl9saXN0ZW5lcnM/byhlLHQsYSx1KTphW1wiKlwiXSYmYVtcIipcIl0uX2xpc3RlbmVycyYmbyhlLHQsYVtcIipcIl0sdSk7cmV0dXJuIHB9bC5FdmVudEVtaXR0ZXIyPWwsbC5wcm90b3R5cGUuZGVsaW1pdGVyPVwiLlwiLGwucHJvdG90eXBlLnNldE1heExpc3RlbmVycz1mdW5jdGlvbih0KXt0IT09ZSYmKHRoaXMuX21heExpc3RlbmVycz10LHRoaXMuX2NvbmZ8fCh0aGlzLl9jb25mPXt9KSx0aGlzLl9jb25mLm1heExpc3RlbmVycz10KX0sbC5wcm90b3R5cGUuZXZlbnQ9XCJcIixsLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX29uY2UoZSx0LCExKX0sbC5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9vbmNlKGUsdCwhMCl9LGwucHJvdG90eXBlLl9vbmNlPWZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gdGhpcy5fbWFueShlLDEsdCxpKSx0aGlzfSxsLnByb3RvdHlwZS5tYW55PWZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gdGhpcy5fbWFueShlLHQsaSwhMSl9LGwucHJvdG90eXBlLnByZXBlbmRNYW55PWZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gdGhpcy5fbWFueShlLHQsaSwhMCl9LGwucHJvdG90eXBlLl9tYW55PWZ1bmN0aW9uKGUsdCxpLHMpe3ZhciBuPXRoaXM7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl0aHJvdyBuZXcgRXJyb3IoXCJtYW55IG9ubHkgYWNjZXB0cyBpbnN0YW5jZXMgb2YgRnVuY3Rpb25cIik7ZnVuY3Rpb24gcigpe3JldHVybiAwPT0tLXQmJm4ub2ZmKGUsciksaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHIuX29yaWdpbj1pLHRoaXMuX29uKGUscixzKSxufSxsLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKCl7dGhpcy5fZXZlbnRzfHxzLmNhbGwodGhpcyk7dmFyIGU9YXJndW1lbnRzWzBdO2lmKFwibmV3TGlzdGVuZXJcIj09PWUmJiF0aGlzLl9uZXdMaXN0ZW5lciYmIXRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilyZXR1cm4hMTt2YXIgdCxpLG4scixsLGg9YXJndW1lbnRzLmxlbmd0aDtpZih0aGlzLl9hbGwmJnRoaXMuX2FsbC5sZW5ndGgpe2lmKGw9dGhpcy5fYWxsLnNsaWNlKCksaD4zKWZvcih0PW5ldyBBcnJheShoKSxyPTA7cjxoO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtmb3Iobj0wLGk9bC5sZW5ndGg7bjxpO24rKylzd2l0Y2godGhpcy5ldmVudD1lLGgpe2Nhc2UgMTpsW25dLmNhbGwodGhpcyxlKTticmVhaztjYXNlIDI6bFtuXS5jYWxsKHRoaXMsZSxhcmd1bWVudHNbMV0pO2JyZWFrO2Nhc2UgMzpsW25dLmNhbGwodGhpcyxlLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pO2JyZWFrO2RlZmF1bHQ6bFtuXS5hcHBseSh0aGlzLHQpfX1pZih0aGlzLndpbGRjYXJkKXtsPVtdO3ZhciBhPVwic3RyaW5nXCI9PXR5cGVvZiBlP2Uuc3BsaXQodGhpcy5kZWxpbWl0ZXIpOmUuc2xpY2UoKTtvLmNhbGwodGhpcyxsLGEsdGhpcy5saXN0ZW5lclRyZWUsMCl9ZWxzZXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZihsPXRoaXMuX2V2ZW50c1tlXSkpe3N3aXRjaCh0aGlzLmV2ZW50PWUsaCl7Y2FzZSAxOmwuY2FsbCh0aGlzKTticmVhaztjYXNlIDI6bC5jYWxsKHRoaXMsYXJndW1lbnRzWzFdKTticmVhaztjYXNlIDM6bC5jYWxsKHRoaXMsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSk7YnJlYWs7ZGVmYXVsdDpmb3IodD1uZXcgQXJyYXkoaC0xKSxyPTE7cjxoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO2wuYXBwbHkodGhpcyx0KX1yZXR1cm4hMH1sJiYobD1sLnNsaWNlKCkpfWlmKGwmJmwubGVuZ3RoKXtpZihoPjMpZm9yKHQ9bmV3IEFycmF5KGgtMSkscj0xO3I8aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTtmb3Iobj0wLGk9bC5sZW5ndGg7bjxpO24rKylzd2l0Y2godGhpcy5ldmVudD1lLGgpe2Nhc2UgMTpsW25dLmNhbGwodGhpcyk7YnJlYWs7Y2FzZSAyOmxbbl0uY2FsbCh0aGlzLGFyZ3VtZW50c1sxXSk7YnJlYWs7Y2FzZSAzOmxbbl0uY2FsbCh0aGlzLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pO2JyZWFrO2RlZmF1bHQ6bFtuXS5hcHBseSh0aGlzLHQpfXJldHVybiEwfWlmKCF0aGlzLl9hbGwmJlwiZXJyb3JcIj09PWUpdGhyb3cgYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBFcnJvcj9hcmd1bWVudHNbMV06bmV3IEVycm9yKFwiVW5jYXVnaHQsIHVuc3BlY2lmaWVkICdlcnJvcicgZXZlbnQuXCIpO3JldHVybiEhdGhpcy5fYWxsfSxsLnByb3RvdHlwZS5lbWl0QXN5bmM9ZnVuY3Rpb24oKXt0aGlzLl9ldmVudHN8fHMuY2FsbCh0aGlzKTt2YXIgZT1hcmd1bWVudHNbMF07aWYoXCJuZXdMaXN0ZW5lclwiPT09ZSYmIXRoaXMuX25ld0xpc3RlbmVyJiYhdGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKXJldHVybiBQcm9taXNlLnJlc29sdmUoWyExXSk7dmFyIHQsaSxuLHIsbCxoPVtdLGE9YXJndW1lbnRzLmxlbmd0aDtpZih0aGlzLl9hbGwpe2lmKGE+Mylmb3IodD1uZXcgQXJyYXkoYSkscj0xO3I8YTtyKyspdFtyXT1hcmd1bWVudHNbcl07Zm9yKG49MCxpPXRoaXMuX2FsbC5sZW5ndGg7bjxpO24rKylzd2l0Y2godGhpcy5ldmVudD1lLGEpe2Nhc2UgMTpoLnB1c2godGhpcy5fYWxsW25dLmNhbGwodGhpcyxlKSk7YnJlYWs7Y2FzZSAyOmgucHVzaCh0aGlzLl9hbGxbbl0uY2FsbCh0aGlzLGUsYXJndW1lbnRzWzFdKSk7YnJlYWs7Y2FzZSAzOmgucHVzaCh0aGlzLl9hbGxbbl0uY2FsbCh0aGlzLGUsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSkpO2JyZWFrO2RlZmF1bHQ6aC5wdXNoKHRoaXMuX2FsbFtuXS5hcHBseSh0aGlzLHQpKX19aWYodGhpcy53aWxkY2FyZCl7bD1bXTt2YXIgYz1cInN0cmluZ1wiPT10eXBlb2YgZT9lLnNwbGl0KHRoaXMuZGVsaW1pdGVyKTplLnNsaWNlKCk7by5jYWxsKHRoaXMsbCxjLHRoaXMubGlzdGVuZXJUcmVlLDApfWVsc2UgbD10aGlzLl9ldmVudHNbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbClzd2l0Y2godGhpcy5ldmVudD1lLGEpe2Nhc2UgMTpoLnB1c2gobC5jYWxsKHRoaXMpKTticmVhaztjYXNlIDI6aC5wdXNoKGwuY2FsbCh0aGlzLGFyZ3VtZW50c1sxXSkpO2JyZWFrO2Nhc2UgMzpoLnB1c2gobC5jYWxsKHRoaXMsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSkpO2JyZWFrO2RlZmF1bHQ6Zm9yKHQ9bmV3IEFycmF5KGEtMSkscj0xO3I8YTtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTtoLnB1c2gobC5hcHBseSh0aGlzLHQpKX1lbHNlIGlmKGwmJmwubGVuZ3RoKXtpZihsPWwuc2xpY2UoKSxhPjMpZm9yKHQ9bmV3IEFycmF5KGEtMSkscj0xO3I8YTtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTtmb3Iobj0wLGk9bC5sZW5ndGg7bjxpO24rKylzd2l0Y2godGhpcy5ldmVudD1lLGEpe2Nhc2UgMTpoLnB1c2gobFtuXS5jYWxsKHRoaXMpKTticmVhaztjYXNlIDI6aC5wdXNoKGxbbl0uY2FsbCh0aGlzLGFyZ3VtZW50c1sxXSkpO2JyZWFrO2Nhc2UgMzpoLnB1c2gobFtuXS5jYWxsKHRoaXMsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSkpO2JyZWFrO2RlZmF1bHQ6aC5wdXNoKGxbbl0uYXBwbHkodGhpcyx0KSl9fWVsc2UgaWYoIXRoaXMuX2FsbCYmXCJlcnJvclwiPT09ZSlyZXR1cm4gYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBFcnJvcj9Qcm9taXNlLnJlamVjdChhcmd1bWVudHNbMV0pOlByb21pc2UucmVqZWN0KFwiVW5jYXVnaHQsIHVuc3BlY2lmaWVkICdlcnJvcicgZXZlbnQuXCIpO3JldHVybiBQcm9taXNlLmFsbChoKX0sbC5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fb24oZSx0LCExKX0sbC5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX29uKGUsdCwhMCl9LGwucHJvdG90eXBlLm9uQW55PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9vbkFueShlLCExKX0sbC5wcm90b3R5cGUucHJlcGVuZEFueT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fb25BbnkoZSwhMCl9LGwucHJvdG90eXBlLmFkZExpc3RlbmVyPWwucHJvdG90eXBlLm9uLGwucHJvdG90eXBlLl9vbkFueT1mdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwib25Bbnkgb25seSBhY2NlcHRzIGluc3RhbmNlcyBvZiBGdW5jdGlvblwiKTtyZXR1cm4gdGhpcy5fYWxsfHwodGhpcy5fYWxsPVtdKSx0P3RoaXMuX2FsbC51bnNoaWZ0KGUpOnRoaXMuX2FsbC5wdXNoKGUpLHRoaXN9LGwucHJvdG90eXBlLl9vbj1mdW5jdGlvbih0LGksbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gdGhpcy5fb25BbnkodCxpKSx0aGlzO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpdGhyb3cgbmV3IEVycm9yKFwib24gb25seSBhY2NlcHRzIGluc3RhbmNlcyBvZiBGdW5jdGlvblwiKTtyZXR1cm4gdGhpcy5fZXZlbnRzfHxzLmNhbGwodGhpcyksdGhpcy5fbmV3TGlzdGVuZXImJnRoaXMuZW1pdChcIm5ld0xpc3RlbmVyXCIsdCxpKSx0aGlzLndpbGRjYXJkPyhmdW5jdGlvbih0LGkpe2Zvcih2YXIgcz0wLG49KHQ9XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC5zcGxpdCh0aGlzLmRlbGltaXRlcik6dC5zbGljZSgpKS5sZW5ndGg7cysxPG47cysrKWlmKFwiKipcIj09PXRbc10mJlwiKipcIj09PXRbcysxXSlyZXR1cm47Zm9yKHZhciBsPXRoaXMubGlzdGVuZXJUcmVlLG89dC5zaGlmdCgpO28hPT1lOyl7aWYobFtvXXx8KGxbb109e30pLGw9bFtvXSwwPT09dC5sZW5ndGgpcmV0dXJuIGwuX2xpc3RlbmVycz8oXCJmdW5jdGlvblwiPT10eXBlb2YgbC5fbGlzdGVuZXJzJiYobC5fbGlzdGVuZXJzPVtsLl9saXN0ZW5lcnNdKSxsLl9saXN0ZW5lcnMucHVzaChpKSwhbC5fbGlzdGVuZXJzLndhcm5lZCYmdGhpcy5fbWF4TGlzdGVuZXJzPjAmJmwuX2xpc3RlbmVycy5sZW5ndGg+dGhpcy5fbWF4TGlzdGVuZXJzJiYobC5fbGlzdGVuZXJzLndhcm5lZD0hMCxyLmNhbGwodGhpcyxsLl9saXN0ZW5lcnMubGVuZ3RoLG8pKSk6bC5fbGlzdGVuZXJzPWksITA7bz10LnNoaWZ0KCl9cmV0dXJuITB9LmNhbGwodGhpcyx0LGkpLHRoaXMpOih0aGlzLl9ldmVudHNbdF0/KFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2V2ZW50c1t0XSYmKHRoaXMuX2V2ZW50c1t0XT1bdGhpcy5fZXZlbnRzW3RdXSksbj90aGlzLl9ldmVudHNbdF0udW5zaGlmdChpKTp0aGlzLl9ldmVudHNbdF0ucHVzaChpKSwhdGhpcy5fZXZlbnRzW3RdLndhcm5lZCYmdGhpcy5fbWF4TGlzdGVuZXJzPjAmJnRoaXMuX2V2ZW50c1t0XS5sZW5ndGg+dGhpcy5fbWF4TGlzdGVuZXJzJiYodGhpcy5fZXZlbnRzW3RdLndhcm5lZD0hMCxyLmNhbGwodGhpcyx0aGlzLl9ldmVudHNbdF0ubGVuZ3RoLHQpKSk6dGhpcy5fZXZlbnRzW3RdPWksdGhpcyl9LGwucHJvdG90eXBlLm9mZj1mdW5jdGlvbihpLHMpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHMpdGhyb3cgbmV3IEVycm9yKFwicmVtb3ZlTGlzdGVuZXIgb25seSB0YWtlcyBpbnN0YW5jZXMgb2YgRnVuY3Rpb25cIik7dmFyIG4scj1bXTtpZih0aGlzLndpbGRjYXJkKXt2YXIgbD1cInN0cmluZ1wiPT10eXBlb2YgaT9pLnNwbGl0KHRoaXMuZGVsaW1pdGVyKTppLnNsaWNlKCk7cj1vLmNhbGwodGhpcyxudWxsLGwsdGhpcy5saXN0ZW5lclRyZWUsMCl9ZWxzZXtpZighdGhpcy5fZXZlbnRzW2ldKXJldHVybiB0aGlzO249dGhpcy5fZXZlbnRzW2ldLHIucHVzaCh7X2xpc3RlbmVyczpufSl9Zm9yKHZhciBoPTA7aDxyLmxlbmd0aDtoKyspe3ZhciBhPXJbaF07aWYobj1hLl9saXN0ZW5lcnMsdChuKSl7Zm9yKHZhciBjPS0xLGY9MCxwPW4ubGVuZ3RoO2Y8cDtmKyspaWYobltmXT09PXN8fG5bZl0ubGlzdGVuZXImJm5bZl0ubGlzdGVuZXI9PT1zfHxuW2ZdLl9vcmlnaW4mJm5bZl0uX29yaWdpbj09PXMpe2M9ZjticmVha31pZihjPDApY29udGludWU7cmV0dXJuIHRoaXMud2lsZGNhcmQ/YS5fbGlzdGVuZXJzLnNwbGljZShjLDEpOnRoaXMuX2V2ZW50c1tpXS5zcGxpY2UoYywxKSwwPT09bi5sZW5ndGgmJih0aGlzLndpbGRjYXJkP2RlbGV0ZSBhLl9saXN0ZW5lcnM6ZGVsZXRlIHRoaXMuX2V2ZW50c1tpXSksdGhpcy5fcmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsaSxzKSx0aGlzfShuPT09c3x8bi5saXN0ZW5lciYmbi5saXN0ZW5lcj09PXN8fG4uX29yaWdpbiYmbi5fb3JpZ2luPT09cykmJih0aGlzLndpbGRjYXJkP2RlbGV0ZSBhLl9saXN0ZW5lcnM6ZGVsZXRlIHRoaXMuX2V2ZW50c1tpXSx0aGlzLl9yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixpLHMpKX1yZXR1cm4gZnVuY3Rpb24gdChpKXtpZihpIT09ZSl7dmFyIHM9T2JqZWN0LmtleXMoaSk7Zm9yKHZhciBuIGluIHMpe3ZhciByPXNbbl0sbD1pW3JdO2wgaW5zdGFuY2VvZiBGdW5jdGlvbnx8XCJvYmplY3RcIiE9dHlwZW9mIGx8fG51bGw9PT1sfHwoT2JqZWN0LmtleXMobCkubGVuZ3RoPjAmJnQoaVtyXSksMD09PU9iamVjdC5rZXlzKGwpLmxlbmd0aCYmZGVsZXRlIGlbcl0pfX19KHRoaXMubGlzdGVuZXJUcmVlKSx0aGlzfSxsLnByb3RvdHlwZS5vZmZBbnk9ZnVuY3Rpb24oZSl7dmFyIHQsaT0wLHM9MDtpZihlJiZ0aGlzLl9hbGwmJnRoaXMuX2FsbC5sZW5ndGg+MCl7Zm9yKGk9MCxzPSh0PXRoaXMuX2FsbCkubGVuZ3RoO2k8cztpKyspaWYoZT09PXRbaV0pcmV0dXJuIHQuc3BsaWNlKGksMSksdGhpcy5fcmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyQW55XCIsZSksdGhpc31lbHNle2lmKHQ9dGhpcy5fYWxsLHRoaXMuX3JlbW92ZUxpc3RlbmVyKWZvcihpPTAscz10Lmxlbmd0aDtpPHM7aSsrKXRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyQW55XCIsdFtpXSk7dGhpcy5fYWxsPVtdfXJldHVybiB0aGlzfSxsLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1sLnByb3RvdHlwZS5vZmYsbC5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKHQpe2lmKHQ9PT1lKXJldHVybiF0aGlzLl9ldmVudHN8fHMuY2FsbCh0aGlzKSx0aGlzO2lmKHRoaXMud2lsZGNhcmQpZm9yKHZhciBpPVwic3RyaW5nXCI9PXR5cGVvZiB0P3Quc3BsaXQodGhpcy5kZWxpbWl0ZXIpOnQuc2xpY2UoKSxuPW8uY2FsbCh0aGlzLG51bGwsaSx0aGlzLmxpc3RlbmVyVHJlZSwwKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXS5fbGlzdGVuZXJzPW51bGw7ZWxzZSB0aGlzLl9ldmVudHMmJih0aGlzLl9ldmVudHNbdF09bnVsbCk7cmV0dXJuIHRoaXN9LGwucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtpZih0aGlzLndpbGRjYXJkKXt2YXIgaT1bXSxuPVwic3RyaW5nXCI9PXR5cGVvZiBlP2Uuc3BsaXQodGhpcy5kZWxpbWl0ZXIpOmUuc2xpY2UoKTtyZXR1cm4gby5jYWxsKHRoaXMsaSxuLHRoaXMubGlzdGVuZXJUcmVlLDApLGl9cmV0dXJuIHRoaXMuX2V2ZW50c3x8cy5jYWxsKHRoaXMpLHRoaXMuX2V2ZW50c1tlXXx8KHRoaXMuX2V2ZW50c1tlXT1bXSksdCh0aGlzLl9ldmVudHNbZV0pfHwodGhpcy5fZXZlbnRzW2VdPVt0aGlzLl9ldmVudHNbZV1dKSx0aGlzLl9ldmVudHNbZV19LGwucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5fZXZlbnRzKX0sbC5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5saXN0ZW5lcnMoZSkubGVuZ3RofSxsLnByb3RvdHlwZS5saXN0ZW5lcnNBbnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWxsP3RoaXMuX2FsbDpbXX0sXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShmdW5jdGlvbigpe3JldHVybiBsfSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9bDp3aW5kb3cuRXZlbnRFbWl0dGVyMj1sfSgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WMlpXNTBaVzFwZEhSbGNqSXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRXNWtaV1pwYm1Wa0lpd2lhWE5CY25KaGVTSXNJa0Z5Y21GNUlpd2liMkpxSWl3aVQySnFaV04wSWl3aWNISnZkRzkwZVhCbElpd2lkRzlUZEhKcGJtY2lMQ0pqWVd4c0lpd2laR1ZtWVhWc2RFMWhlRXhwYzNSbGJtVnljeUlzSW1sdWFYUWlMQ0owYUdseklpd2lYMlYyWlc1MGN5SXNJbDlqYjI1bUlpd2lZMjl1Wm1sbmRYSmxJaXdpWTI5dVppSXNJbVJsYkdsdGFYUmxjaUlzSWw5dFlYaE1hWE4wWlc1bGNuTWlMQ0p0WVhoTWFYTjBaVzVsY25NaUxDSjNhV3hrWTJGeVpDSXNJbTVsZDB4cGMzUmxibVZ5SWl3aVgyNWxkMHhwYzNSbGJtVnlJaXdpY21WdGIzWmxUR2x6ZEdWdVpYSWlMQ0pmY21WdGIzWmxUR2x6ZEdWdVpYSWlMQ0oyWlhKaWIzTmxUV1Z0YjNKNVRHVmhheUlzSW14cGMzUmxibVZ5VkhKbFpTSXNJbXh2WjFCdmMzTnBZbXhsVFdWdGIzSjVUR1ZoYXlJc0ltTnZkVzUwSWl3aVpYWmxiblJPWVcxbElpd2laWEp5YjNKTmMyY2lMQ0p3Y205alpYTnpJaXdpWlcxcGRGZGhjbTVwYm1jaUxDSmxJaXdpUlhKeWIzSWlMQ0p1WVcxbElpd2laVzFwZEhSbGNpSXNJbU52Ym5OdmJHVWlMQ0psY25KdmNpSXNJblJ5WVdObElpd2lSWFpsYm5SRmJXbDBkR1Z5SWl3aWMyVmhjbU5vVEdsemRHVnVaWEpVY21WbElpd2lhR0Z1Wkd4bGNuTWlMQ0owZVhCbElpd2lkSEpsWlNJc0lta2lMQ0pzWldGbUlpd2liR1Z1SWl3aVluSmhibU5vSWl3aWVGUnlaV1VpTENKNGVGUnlaV1VpTENKcGMyOXNZWFJsWkVKeVlXNWphQ0lzSW1WdVpGSmxZV05vWldRaUxDSnNhWE4wWlc1bGNuTWlMQ0owZVhCbFRHVnVaM1JvSWl3aWJHVnVaM1JvSWl3aVkzVnljbVZ1ZEZSNWNHVWlMQ0p1WlhoMFZIbHdaU0lzSWw5c2FYTjBaVzVsY25NaUxDSndkWE5vSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKamIyNWpZWFFpTENJcUtpSXNJa1YyWlc1MFJXMXBkSFJsY2pJaUxDSnpaWFJOWVhoTWFYTjBaVzVsY25NaUxDSnVJaXdpWlhabGJuUWlMQ0p2Ym1ObElpd2labTRpTENKZmIyNWpaU0lzSW5CeVpYQmxibVJQYm1ObFRHbHpkR1Z1WlhJaUxDSndjbVZ3Wlc1a0lpd2lYMjFoYm5raUxDSnRZVzU1SWl3aWRIUnNJaXdpY0hKbGNHVnVaRTFoYm5raUxDSnpaV3htSWl3aWJHbHpkR1Z1WlhJaUxDSnZabVlpTENKaGNIQnNlU0lzSW1GeVozVnRaVzUwY3lJc0lsOXZjbWxuYVc0aUxDSmZiMjRpTENKbGJXbDBJaXdpWVhKbmN5SXNJbXdpTENKcUlpd2lhR0Z1Wkd4bGNpSXNJbUZzSWl3aVgyRnNiQ0lzSW5Oc2FXTmxJaXdpYm5NaUxDSnpjR3hwZENJc0ltVnRhWFJCYzNsdVl5SXNJbEJ5YjIxcGMyVWlMQ0p5WlhOdmJIWmxJaXdpY0hKdmJXbHpaWE1pTENKeVpXcGxZM1FpTENKaGJHd2lMQ0p2YmlJc0luQnlaWEJsYm1STWFYTjBaVzVsY2lJc0ltOXVRVzU1SWl3aVgyOXVRVzU1SWl3aWNISmxjR1Z1WkVGdWVTSXNJbUZrWkV4cGMzUmxibVZ5SWl3aWRXNXphR2xtZENJc0luTm9hV1owSWl3aWQyRnlibVZrSWl3aWJHVmhabk1pTENKcFRHVmhaaUlzSW5CdmMybDBhVzl1SWl3aWMzQnNhV05sSWl3aWNtVmpkWEp6YVhabGJIbEhZWEppWVdkbFEyOXNiR1ZqZENJc0luSnZiM1FpTENKclpYbHpJaXdpYTJWNUlpd2lSblZ1WTNScGIyNGlMQ0p2Wm1aQmJua2lMQ0ptYm5NaUxDSnlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTWlMQ0psZG1WdWRFNWhiV1Z6SWl3aWJHbHpkR1Z1WlhKRGIzVnVkQ0lzSW14cGMzUmxibVZ5YzBGdWVTSXNJbVJsWm1sdVpTSXNJbUZ0WkNJc0ltVjRjRzl5ZEhNaUxDSnRiMlIxYkdVaUxDSjNhVzVrYjNjaVhTd2liV0Z3Y0dsdVozTWlPaUpEUVU5RkxGTkJRVk5CTEVkQlJWUXNTVUZCU1VNc1JVRkJWVU1zVFVGQlRVUXNVVUZCVlVNc1RVRkJUVVFzVVVGQlZTeFRRVUZyUWtVc1IwRkRPVVFzVFVGQkswTXNiVUpCUVhoRFF5eFBRVUZQUXl4VlFVRlZReXhUUVVGVFF5eExRVUZMU2l4SlFVVndRMHNzUlVGQmMwSXNSMEZGTVVJc1UwRkJVME1zU1VGRFVFTXNTMEZCUzBNc1VVRkJWU3hIUVVOWVJDeExRVUZMUlN4UFFVTlFReXhGUVVGVlRpeExRVUZMUnl4TFFVRk5RU3hMUVVGTFJTeFBRVWs1UWl4VFFVRlRReXhGUVVGVlF5eEhRVU5pUVN4SFFVTkdTaXhMUVVGTFJTeE5RVUZSUlN4RlFVVmlRU3hGUVVGTFF5eFpRVUZqVEN4TFFVRkxTeXhWUVVGWlJDeEZRVUZMUXl4WFFVTjZRMHdzUzBGQlMwMHNZMEZCWjBKR0xFVkJRVXRITEdWQlFXbENha0lzUlVGQldXTXNSVUZCUzBjc1lVRkJaVlFzUlVGRk0wVk5MRVZCUVV0SkxGZEJRV0ZTTEV0QlFVdFJMRk5CUVZkS0xFVkJRVXRKTEZWQlEzWkRTaXhGUVVGTFN5eGpRVUZuUWxRc1MwRkJTMVVzWVVGQlpVNHNSVUZCUzBzc1lVRkRPVU5NTEVWQlFVdFBMR2xDUVVGdFFsZ3NTMEZCUzFrc1owSkJRV3RDVWl4RlFVRkxUeXhuUWtGRGNFUlFMRVZCUVV0VExHOUNRVUZ6UW1Jc1MwRkJTMkVzYTBKQlFXOUNWQ3hGUVVGTFV5eHRRa0ZGY2tSaUxFdEJRVXRSTEZkQlExQlNMRXRCUVV0akxHRkJRV1VzUzBGSGRFSmtMRXRCUVV0TkxHTkJRV2RDVWl4RlFVbDZRaXhUUVVGVGFVSXNSVUZCYzBKRExFVkJRVTlETEVkQlEzQkRMRWxCUVVsRExFVkJRVmNzSzBSQlExTkdMRVZCUVZFc2NVVkJUMmhETEVkQlNrZG9RaXhMUVVGTFlTeHZRa0ZEVGtzc1IwRkJXU3huUWtGQmEwSkVMRVZCUVZrc1MwRkhkRUlzYjBKQlFWcEZMRk5CUVRKQ1FTeFJRVUZSUXl4WlFVRlpMRU5CUTNaRUxFbEJRVWxETEVWQlFVa3NTVUZCU1VNc1RVRkJUVW9zUjBGRGJFSkhMRVZCUVVWRkxFdEJRVThzT0VKQlExUkdMRVZCUVVWSExGRkJRVlY0UWl4TFFVTmFjVUlzUlVGQlJVd3NUVUZCVVVFc1JVRkRWa2NzVVVGQlVVTXNXVUZCV1VNc1VVRkZjRUpKTEZGQlFWRkRMRTFCUVUxU0xFZEJSVlpQTEZGQlFWRkZMRTlCUTFaR0xGRkJRVkZGTEZGQlMyUXNVMEZCVTBNc1JVRkJZWGhDTEVkQlEzQkNTaXhMUVVGTFF5eFJRVUZWTEVkQlEyWkVMRXRCUVV0VkxHTkJRVUZCTEVWQlEweFdMRXRCUVV0WkxHbENRVUZCUVN4RlFVTk1XaXhMUVVGTFlTeHRRa0ZCUVVFc1JVRkRURllzUlVGQlZVNHNTMEZCUzBjc1MwRkJUVWtzUjBGVGRrSXNVMEZCVTNsQ0xFVkJRVzFDUXl4RlFVRlZReXhGUVVGTlF5eEZRVUZOUXl4SFFVTm9SQ3hKUVVGTFJDeEZRVU5JTEUxQlFVOHNSMEZGVkN4SlFVRnJRa1VzUlVGQlRVTXNSVUZCUzBNc1JVRkJVVU1zUlVGQlQwTXNSVUZCVVVNc1JVRkJaMEpETEVWQlFXaEZReXhGUVVGVkxFZEJRMVpETEVWQlFXRllMRVZCUVV0WkxFOUJRVkZETEVWQlFXTmlMRVZCUVV0RkxFZEJRVWxaTEVWQlFWZGtMRVZCUVV0RkxFVkJRVVVzUjBGRGRrVXNSMEZCU1VFc1NVRkJUVk1zUjBGQlkxWXNSVUZCUzJNc1YwRkJXU3hEUVV0MlF5eEhRVUVyUWl4dFFrRkJjRUprTEVWQlFVdGpMRmRCUldRc1QwRkVRV2hDTEVkQlFWbEJMRVZCUVZOcFFpeExRVUZMWml4RlFVRkxZeXhaUVVONFFpeERRVUZEWkN4SFFVVlNMRWxCUVV0RkxFVkJRVThzUlVGQlIwTXNSVUZCVFVnc1JVRkJTMk1zVjBGQlYwZ3NUMEZCVVZRc1JVRkJUME1zUlVGQlMwUXNTVUZEZGtSS0xFZEJRVmxCTEVWQlFWTnBRaXhMUVVGTFppeEZRVUZMWXl4WFFVRlhXaXhKUVVVMVF5eE5RVUZQTEVOQlFVTkdMRWRCU1Zvc1IwRkJjVUlzVFVGQmFFSlpMRWRCUVhWRExFOUJRV2hDUVN4SFFVRjVRbG9zUlVGQlMxa3NSMEZCWXl4RFFVdDBSU3hIUVVGdlFpeE5RVUZvUWtFc1JVRkJjVUlzUTBGRGRrSXNTVUZCUzFJc1MwRkJWVW9zUlVGRFJTeGxRVUZZU1N4SFFVRXlRa29zUlVGQlMyZENMR1ZCUVdWYUxFdEJRMnBFU3l4RlFVRlpRU3hGUVVGVlVTeFBRVUZQY0VJc1JVRkJiVUpETEVWQlFWVkRMRVZCUVUxRExFVkJRVXRKTEVkQlFWTklMRVZCUVVVc1MwRkhjRVlzVDBGQlQxRXNSVUZEUml4SFFVRnRRaXhQUVVGb1FrY3NSVUZCYzBJc1EwRlBPVUlzU1VGQlMxSXNTMEZPVEVrc1JVRkJZMUFzUlVGQlJTeEpRVUZOVXl4SFFVRmxWQ3hGUVVGRkxFbEJRVTFUTEVkQlFUSkNMRTFCUVdKSExFbEJRekZEWWl4RlFVRkxZeXhoUVVWd1Frd3NSVUZCV1VFc1JVRkJWVkVzVDBGQlQzQkNMRVZCUVcxQ1F5eEZRVUZWUXl4RlFVRk5ReXhGUVVGTlZTeExRVWQ2UkZZc1JVRkRSU3hsUVVGWVNTeEhRVUV5UWtvc1JVRkJTMmRDTEdWQlFXVmFMRXRCUTI1RExFMUJRVmhCTEVkQlFUWkNMRTlCUVZoQkxFZEJRMmhDU2l4RlFVRkxTU3hIUVVGUlZTeGhRVUZsVGl4SlFVTTNRa01zUlVGQldVRXNSVUZCVlZFc1QwRkJUM0JDTEVWQlFXMUNReXhGUVVGVlF5eEZRVUZOUXl4RlFVRkxTU3hIUVVGVFRTeExRVVZvUmtRc1JVRkJXVUVzUlVGQlZWRXNUMEZCVDNCQ0xFVkJRVzFDUXl4RlFVRlZReXhGUVVGTlF5eEZRVUZMU1N4SFFVRlRTQ3hMUVVVNVJWRXNSVUZFVVV3c1NVRkJWMU1zUlVGRFVFb3NSVUZCVlZFc1QwRkJUM0JDTEVWQlFXMUNReXhGUVVGVlF5eEZRVUZOUXl4RlFVRkxTU3hIUVVGVFNDeEZRVUZGTEVsQlIzQkZVU3hGUVVGVlVTeFBRVUZQY0VJc1JVRkJiVUpETEVWQlFWVkRMRVZCUVUxRExFVkJRVXRKTEVkQlFWTklMRXRCU1hCR0xFOUJRVTlSTEVWQlIxUkJMRVZCUVZsQkxFVkJRVlZSTEU5QlFVOXdRaXhGUVVGdFFrTXNSVUZCVlVNc1JVRkJUVU1zUlVGQlMxa3NSMEZCWTFnc1JVRkJSU3hKUVdGMlJpeEpRVlpCU1N4RlFVRlJUQ3hGUVVGTExFOUJUVmhJTEVWQlFXMUNReXhGUVVGVlF5eEZRVUZOVFN4RlFVRlBTaXhGUVVGRkxFZEJSemxEU3l4RlFVRlRUaXhGUVVGTExFMUJSVm9zUjBGQlIwTXNSVUZCU1ZNc1JVRlBUQ3hKUVVGSlRpeExRVTVFUlN4RlFVRlBVU3haUVVWU2FrSXNSVUZCYlVKRExFVkJRVlZETEVWQlFVMVBMRVZCUVZGSkxFZEJTUzlDU2l4RlFVTkZMR1ZCUVZoR0xFZEJRVEpDUlN4RlFVRlBWU3hsUVVGbFdpeExRVU12UTBFc1NVRkJWMU1zUlVGRldtaENMRVZCUVcxQ1F5eEZRVUZWUXl4RlFVRk5UeXhGUVVGUFJpeEhRVUZUU0N4RlFVRkZMRWRCUXpkRFJ5eEpRVUZYVVN4RlFVVnVRbVlzUlVGQmJVSkRMRVZCUVZWRExFVkJRVTFQTEVWQlFVOUdMRWRCUVZOSUxFVkJRVVVzUzBGRmNrUk5MRVZCUVdsQ0xFbEJRMFpJTEVkQlFWVkZMRVZCUVU5R0xFZEJRMmhEVUN4RlFVRnRRa01zUlVGQlZVTXNSVUZCVFN4RFFVRkZiVUlzUzBGQlRWZ3NSMEZCYTBKT0xFVkJRVVVzVlVGSk4wUkxMRVZCUVU5UkxGZEJSV1pxUWl4RlFVRnRRa01zUlVGQlZVTXNSVUZCVFU4c1JVRkJVVWtzUjBGRGJrTktMRVZCUVU4c1RVRkJVVUVzUlVGQlR5eExRVUZMVVN4WlFVTnVRMnBDTEVWQlFXMUNReXhGUVVGVlF5eEZRVUZOVHl4RlFVRlBMRXRCUVUxSkxFZEJTWEJFTEU5QlFVOUVMRVZCT1VkVVlpeEZRVUZoZFVJc1kwRkJaMEoyUWl4RlFUUkxOMEpCTEVWQlFXRnFReXhWUVVGVlZTeFZRVUZaTEVsQlJXNURkVUlzUlVGQllXcERMRlZCUVZWNVJDeG5Ra0ZCYTBJc1UwRkJVME1zUjBGRE5VTkJMRWxCUVUwdlJDeEpRVU5TVlN4TFFVRkxUU3hqUVVGblFpdERMRVZCUTJoQ2NrUXNTMEZCUzBVc1VVRkJUMFlzUzBGQlMwVXNUVUZCVVN4SlFVTTVRa1lzUzBGQlMwVXNUVUZCVFVzc1lVRkJaVGhETEVsQlNUbENla0lzUlVGQllXcERMRlZCUVZVeVJDeE5RVUZSTEVkQlJ5OUNNVUlzUlVGQllXcERMRlZCUVZVMFJDeExRVUZQTEZOQlFWTkVMRVZCUVU5RkxFZEJRelZETEU5QlFVOTRSQ3hMUVVGTGVVUXNUVUZCVFVnc1JVRkJUMFVzUjBGQlFVRXNTVUZITTBJMVFpeEZRVUZoYWtNc1ZVRkJWU3RFTEc5Q1FVRnpRaXhUUVVGVFNpeEZRVUZQUlN4SFFVTXpSQ3hQUVVGUGVFUXNTMEZCUzNsRUxFMUJRVTFJTEVWQlFVOUZMRWRCUVVGQkxFbEJSek5DTlVJc1JVRkJZV3BETEZWQlFWVTRSQ3hOUVVGUkxGTkJRVk5JTEVWQlFVOUZMRVZCUVVsSExFZEJSV3BFTEU5QlJFRXpSQ3hMUVVGTE5FUXNUVUZCVFU0c1JVRkJUeXhGUVVGSFJTeEZRVUZKUnl4SFFVTnNRak5FTEUxQlIxUTBRaXhGUVVGaGFrTXNWVUZCVld0RkxFdEJRVThzVTBGQlUxQXNSVUZCVDFFc1JVRkJTMDRzUjBGRGFrUXNUMEZCVDNoRUxFdEJRVXMwUkN4TlFVRk5UaXhGUVVGUFVTeEZRVUZMVGl4SFFVRkJRU3hKUVVkb1F6VkNMRVZCUVdGcVF5eFZRVUZWYjBVc1dVRkJZeXhUUVVGVFZDeEZRVUZQVVN4RlFVRkxUaXhIUVVONFJDeFBRVUZQZUVRc1MwRkJTelJFTEUxQlFVMU9MRVZCUVU5UkxFVkJRVXRPTEVkQlFVRkJMRWxCUjJoRE5VSXNSVUZCWVdwRExGVkJRVlZwUlN4TlFVRlJMRk5CUVZOT0xFVkJRVTlSTEVWQlFVdE9MRVZCUVVsSExFZEJRM1JFTEVsQlFVbExMRVZCUVU5b1JTeExRVVZZTEVkQlFXdENMRzFDUVVGUWQwUXNSVUZEVkN4TlFVRk5MRWxCUVVsc1F5eE5RVUZOTERKRFFVZHNRaXhUUVVGVE1rTXNTVUZKVUN4UFFVaGpMRXRCUVZKSUxFZEJRMHBGTEVWQlFVdEZMRWxCUVVsYUxFVkJRVTlYTEVkQlJWaFVMRVZCUVVkWExFMUJRVTF1UlN4TFFVRk5iMFVzVjBGUGVFSXNUMEZLUVVnc1JVRkJVMGtzVVVGQlZXSXNSVUZGYmtKNFJDeExRVUZMYzBVc1NVRkJTV2hDTEVWQlFVOVhMRVZCUVZWT0xFZEJSVzVDU3l4SFFVZFVjRU1zUlVGQllXcERMRlZCUVZVMFJTeExRVUZQTEZkQlJUVkNka1VzUzBGQlMwTXNVMEZCVjBZc1JVRkJTMFlzUzBGQlMwY3NUVUZGTVVJc1NVRkJTU3RDTEVWQlFVOXhReXhWUVVGVkxFZEJSWEpDTEVkQlFXRXNaMEpCUVZSeVF5eEpRVUV5UWk5Q0xFdEJRVXRWTEdWQlF6ZENWaXhMUVVGTFF5eFJRVUZSVVN4WlFVTm9RaXhQUVVGQkxFVkJTVW9zU1VGRFNTdEVMRVZCUVV0RExFVkJRVVY0UXl4RlFVRkZlVU1zUlVGRFZFTXNSVUZHUVVNc1JVRkJTMUlzVlVGQlZYcENMRTlCU1c1Q0xFZEJRVWt6UXl4TFFVRkxOa1VzVFVGQlVUZEZMRXRCUVVzMlJTeExRVUZMYkVNc1QwRkJVU3hEUVVWcVF5eEhRVVJCWjBNc1JVRkJWVE5GTEV0QlFVczJSU3hMUVVGTFF5eFJRVU5vUWtZc1JVRkJTeXhGUVVWUUxFbEJSRUZLTEVWQlFVOHNTVUZCU1doR0xFMUJRVTF2Uml4SFFVTmFSaXhGUVVGSkxFVkJRVWRCTEVWQlFVbEZMRVZCUVVsR0xFbEJRVXRHTEVWQlFVdEZMRWRCUVV0T0xGVkJRVlZOTEVkQlJ5OURMRWxCUVV0NlF5eEZRVUZKTEVWQlFVZDNReXhGUVVGSlJTeEZRVUZSYUVNc1QwRkJVVllzUlVGQlNYZERMRVZCUVVkNFF5eEpRVVZ5UXl4UFFVUkJha01zUzBGQlMzTkVMRTFCUVZGMlFpeEZRVU5NTmtNc1IwRkRVaXhMUVVGTExFVkJRMGhFTEVWQlFWRXhReXhIUVVGSGNFTXNTMEZCUzBjc1MwRkJUU3RDTEVkQlEzUkNMRTFCUTBZc1MwRkJTeXhGUVVOSU5FTXNSVUZCVVRGRExFZEJRVWR3UXl4TFFVRkxSeXhMUVVGTkswSXNSVUZCVFhGRExGVkJRVlVzU1VGRGRFTXNUVUZEUml4TFFVRkxMRVZCUTBoUExFVkJRVkV4UXl4SFFVRkhjRU1zUzBGQlMwY3NTMEZCVFN0Q0xFVkJRVTF4UXl4VlFVRlZMRWRCUVVsQkxGVkJRVlVzU1VGRGNFUXNUVUZEUml4UlFVTkZUeXhGUVVGUk1VTXNSMEZCUjJ0RExFMUJRVTF1UlN4TFFVRk5kMFVzU1VGTE4wSXNSMEZCU1hoRkxFdEJRVXRSTEZOQlFWVXNRMEZEYWtKdFJTeEZRVUZWTEVkQlExWXNTVUZCU1Vrc1JVRkJjVUlzYVVKQlFWUm9SQ3hGUVVGdlFrRXNSVUZCUzJsRUxFMUJRVTFvUml4TFFVRkxTeXhYUVVGaE1FSXNSVUZCU3l0RExGRkJRM1JGYWtRc1JVRkJiVUpvUXl4TFFVRkxSeXhMUVVGTk1rVXNSVUZCVTBrc1JVRkJTUzlGTEV0QlFVdGpMR0ZCUVdNc1QwRkRla1FzUTBGRlRDeEhRVUYxUWl4dFFrRkVka0kyUkN4RlFVRlZNMFVzUzBGQlMwTXNVVUZCVVRoQ0xFbEJRMWtzUTBGRmFrTXNUMEZFUVM5Q0xFdEJRVXR6UkN4TlFVRlJka0lzUlVGRFREWkRMRWRCUTFJc1MwRkJTeXhGUVVOSVJDeEZRVUZST1VVc1MwRkJTMGNzVFVGRFlpeE5RVU5HTEV0QlFVc3NSVUZEU0RKRkxFVkJRVkU1UlN4TFFVRkxSeXhMUVVGTmIwVXNWVUZCVlN4SlFVTTNRaXhOUVVOR0xFdEJRVXNzUlVGRFNFOHNSVUZCVVRsRkxFdEJRVXRITEV0QlFVMXZSU3hWUVVGVkxFZEJRVWxCTEZWQlFWVXNTVUZETTBNc1RVRkRSaXhSUVVWRkxFbEJSRUZKTEVWQlFVOHNTVUZCU1doR0xFMUJRVTF2Uml4RlFVRkxMRWRCUTJwQ1JpeEZRVUZKTEVWQlFVZEJMRVZCUVVsRkxFVkJRVWxHTEVsQlFVdEdMRVZCUVV0RkxFVkJRVWtzUjBGQlMwNHNWVUZCVlUwc1IwRkRha1JETEVWQlFWRlNMRTFCUVUxdVJTeExRVUZOZDBVc1IwRkZkRUlzVDBGQlFTeEZRVU5UUnl4SlFVZFVRU3hGUVVGVlFTeEZRVUZSUnl4VFFVbDBRaXhIUVVGSlNDeEhRVUZYUVN4RlFVRlJhRU1zVDBGQlVTeERRVU0zUWl4SFFVRkphVU1zUlVGQlN5eEZRVVZRTEVsQlJFRktMRVZCUVU4c1NVRkJTV2hHTEUxQlFVMXZSaXhGUVVGTExFZEJRMnBDUml4RlFVRkpMRVZCUVVkQkxFVkJRVWxGTEVWQlFVbEdMRWxCUVV0R0xFVkJRVXRGTEVWQlFVa3NSMEZCUzA0c1ZVRkJWVTBzUjBGRmJrUXNTVUZCUzNwRExFVkJRVWtzUlVGQlIzZERMRVZCUVVsRkxFVkJRVkZvUXl4UFFVRlJWaXhGUVVGSmQwTXNSVUZCUjNoRExFbEJSWEpETEU5QlJFRnFReXhMUVVGTGMwUXNUVUZCVVhaQ0xFVkJRMHcyUXl4SFFVTlNMRXRCUVVzc1JVRkRTRVFzUlVGQlVURkRMRWRCUVVkd1F5eExRVUZMUnl4TlFVTm9RaXhOUVVOR0xFdEJRVXNzUlVGRFNESkZMRVZCUVZFeFF5eEhRVUZIY0VNc1MwRkJTMGNzUzBGQlRXOUZMRlZCUVZVc1NVRkRhRU1zVFVGRFJpeExRVUZMTEVWQlEwaFBMRVZCUVZFeFF5eEhRVUZIY0VNc1MwRkJTMGNzUzBGQlRXOUZMRlZCUVZVc1IwRkJTVUVzVlVGQlZTeEpRVU01UXl4TlFVTkdMRkZCUTBWUExFVkJRVkV4UXl4SFFVRkhhME1zVFVGQlRXNUZMRXRCUVUxM1JTeEhRVWN6UWl4UFFVRkJMRVZCUTBzc1NVRkJTM2hGTEV0QlFVczJSU3hOUVVGcFFpeFZRVUZVT1VNc1JVRkRka0lzVFVGQlNYRkRMRlZCUVZVc1lVRkJZemxETEUxQlEzQkNPRU1zVlVGQlZTeEhRVVZXTEVsQlFVazVReXhOUVVGTkxIZERRVXR3UWl4UlFVRlRkRUlzUzBGQlN6WkZMRTFCUjJoQ2FrUXNSVUZCWVdwRExGVkJRVlZ6Uml4VlFVRlpMRmRCUldwRGFrWXNTMEZCUzBNc1UwRkJWMFlzUlVGQlMwWXNTMEZCUzBjc1RVRkZNVUlzU1VGQlNTdENMRVZCUVU5eFF5eFZRVUZWTEVkQlJYSkNMRWRCUVdFc1owSkJRVlJ5UXl4SlFVRXlRaTlDTEV0QlFVdFZMR1ZCUXpOQ1ZpeExRVUZMUXl4UlFVRlJVU3haUVVGbExFOUJRVTk1UlN4UlFVRlJReXhSUVVGUkxFVkJRVUVzU1VGSE5VUXNTVUZIU1Znc1JVRkJTME1zUlVGQlJYaERMRVZCUVVWNVF5eEZRVU5VUXl4RlFVcEJVeXhGUVVGVkxFZEJSVlpTTEVWQlFVdFNMRlZCUVZWNlFpeFBRVWx1UWl4SFFVRkpNME1zUzBGQlN6WkZMRXRCUVUwc1EwRkRZaXhIUVVGSlJDeEZRVUZMTEVWQlJWQXNTVUZFUVVvc1JVRkJUeXhKUVVGSmFFWXNUVUZCVFc5R0xFZEJRMXBHTEVWQlFVa3NSVUZCUjBFc1JVRkJTVVVzUlVGQlNVWXNTVUZCUzBZc1JVRkJTMFVzUjBGQlMwNHNWVUZCVlUwc1IwRkZMME1zU1VGQlMzcERMRVZCUVVrc1JVRkJSM2RETEVWQlFVbDZSU3hMUVVGTE5rVXNTMEZCUzJ4RExFOUJRVkZXTEVWQlFVbDNReXhGUVVGSGVFTXNTVUZGZGtNc1QwRkVRV3BETEV0QlFVdHpSQ3hOUVVGUmRrSXNSVUZEVERaRExFZEJRMUlzUzBGQlN5eEZRVU5JVVN4RlFVRlRja01zUzBGQlN5OURMRXRCUVVzMlJTeExRVUZMTlVNc1IwRkJSM0JETEV0QlFVdEhMRXRCUVUwclFpeEpRVU4wUXl4TlFVTkdMRXRCUVVzc1JVRkRTSEZFTEVWQlFWTnlReXhMUVVGTEwwTXNTMEZCU3paRkxFdEJRVXMxUXl4SFFVRkhjRU1zUzBGQlMwY3NTMEZCVFN0Q0xFVkJRVTF4UXl4VlFVRlZMRXRCUTNSRUxFMUJRMFlzUzBGQlN5eEZRVU5JWjBJc1JVRkJVM0pETEV0QlFVc3ZReXhMUVVGTE5rVXNTMEZCU3pWRExFZEJRVWR3UXl4TFFVRkxSeXhMUVVGTkswSXNSVUZCVFhGRExGVkJRVlVzUjBGQlNVRXNWVUZCVlN4TFFVTndSU3hOUVVOR0xGRkJRMFZuUWl4RlFVRlRja01zUzBGQlN5OURMRXRCUVVzMlJTeExRVUZMTlVNc1IwRkJSMnRETEUxQlFVMXVSU3hMUVVGTmQwVXNTMEZMTjBNc1IwRkJTWGhGTEV0QlFVdFJMRk5CUVZVc1EwRkRha0p0UlN4RlFVRlZMRWRCUTFZc1NVRkJTVWtzUlVGQmNVSXNhVUpCUVZSb1JDeEZRVUZ2UWtFc1JVRkJTMmxFTEUxQlFVMW9SaXhMUVVGTFN5eFhRVUZoTUVJc1JVRkJTeXRETEZGQlEzUkZha1FzUlVGQmJVSm9ReXhMUVVGTFJ5eExRVUZOTWtVc1JVRkJVMGtzUlVGQlNTOUZMRXRCUVV0akxHRkJRV01zVVVGRk9VUTJSQ3hGUVVGVk0wVXNTMEZCUzBNc1VVRkJVVGhDTEVkQlIzcENMRWRCUVhWQ0xHMUNRVUZhTkVNc1JVRkZWQ3hQUVVSQk0wVXNTMEZCUzNORUxFMUJRVkYyUWl4RlFVTk1Oa01zUjBGRFVpeExRVUZMTEVWQlEwaFJMRVZCUVZOeVF5eExRVUZMTkVJc1JVRkJVVGxGTEV0QlFVdEhMRTlCUXpOQ0xFMUJRMFlzUzBGQlN5eEZRVU5JYjBZc1JVRkJVM0pETEV0QlFVczBRaXhGUVVGUk9VVXNTMEZCUzBjc1MwRkJUVzlGTEZWQlFWVXNTMEZETTBNc1RVRkRSaXhMUVVGTExFVkJRMGhuUWl4RlFVRlRja01zUzBGQlN6UkNMRVZCUVZFNVJTeExRVUZMUnl4TFFVRk5iMFVzVlVGQlZTeEhRVUZKUVN4VlFVRlZMRXRCUTNwRUxFMUJRMFlzVVVGRlJTeEpRVVJCU1N4RlFVRlBMRWxCUVVsb1JpeE5RVUZOYjBZc1JVRkJTeXhIUVVOcVFrWXNSVUZCU1N4RlFVRkhRU3hGUVVGSlJTeEZRVUZKUml4SlFVRkxSaXhGUVVGTFJTeEZRVUZKTEVkQlFVdE9MRlZCUVZWTkxFZEJRMnBFVlN4RlFVRlRja01zUzBGQlN6UkNMRVZCUVZGU0xFMUJRVTF1UlN4TFFVRk5kMFVzVTBGRkwwSXNSMEZCU1Vjc1IwRkJWMEVzUlVGQlVXaERMRTlCUVZFc1EwRkZjRU1zUjBGRVFXZERMRVZCUVZWQkxFVkJRVkZITEZGQlEyUkdMRVZCUVVzc1JVRkZVQ3hKUVVSQlNpeEZRVUZQTEVsQlFVbG9SaXhOUVVGTmIwWXNSVUZCU3l4SFFVTnFRa1lzUlVGQlNTeEZRVUZIUVN4RlFVRkpSU3hGUVVGSlJpeEpRVUZMUml4RlFVRkxSU3hGUVVGSkxFZEJRVXRPTEZWQlFWVk5MRWRCUlc1RUxFbEJRVXQ2UXl4RlFVRkpMRVZCUVVkM1F5eEZRVUZKUlN4RlFVRlJhRU1zVDBGQlVWWXNSVUZCU1hkRExFVkJRVWQ0UXl4SlFVVnlReXhQUVVSQmFrTXNTMEZCUzNORUxFMUJRVkYyUWl4RlFVTk1Oa01zUjBGRFVpeExRVUZMTEVWQlEwaFJMRVZCUVZOeVF5eExRVUZMTkVJc1JVRkJVVEZETEVkQlFVZHdReXhMUVVGTFJ5eFBRVU01UWl4TlFVTkdMRXRCUVVzc1JVRkRTRzlHTEVWQlFWTnlReXhMUVVGTE5FSXNSVUZCVVRGRExFZEJRVWR3UXl4TFFVRkxSeXhMUVVGTmIwVXNWVUZCVlN4TFFVTTVReXhOUVVOR0xFdEJRVXNzUlVGRFNHZENMRVZCUVZOeVF5eExRVUZMTkVJc1JVRkJVVEZETEVkQlFVZHdReXhMUVVGTFJ5eExRVUZOYjBVc1ZVRkJWU3hIUVVGSlFTeFZRVUZWTEV0QlF6VkVMRTFCUTBZc1VVRkRSV2RDTEVWQlFWTnlReXhMUVVGTE5FSXNSVUZCVVRGRExFZEJRVWRyUXl4TlFVRk5ia1VzUzBGQlRYZEZMRlZCUjNCRExFbEJRVXQ0UlN4TFFVRkxOa1VzVFVGQmFVSXNWVUZCVkRsRExFVkJRM1pDTEU5QlFVbHhReXhWUVVGVkxHRkJRV001UXl4TlFVTnVRalJFTEZGQlFWRkhMRTlCUVU5cVFpeFZRVUZWTEVsQlJYcENZeXhSUVVGUlJ5eFBRVUZQTEhkRFFVa3hRaXhQUVVGUFNDeFJRVUZSU1N4SlFVRkpSaXhKUVVkeVFuaEVMRVZCUVdGcVF5eFZRVUZWTkVZc1IwRkJTeXhUUVVGVGVFUXNSVUZCVFd0RExFZEJRM3BETEU5QlFVOXFSU3hMUVVGTGMwVXNTVUZCU1haRExFVkJRVTFyUXl4SFFVRkJRU3hKUVVkNFFuSkRMRVZCUVdGcVF5eFZRVUZWTmtZc1owSkJRV3RDTEZOQlFWTjZSQ3hGUVVGTmEwTXNSMEZEZEVRc1QwRkJUMnBGTEV0QlFVdHpSU3hKUVVGSmRrTXNSVUZCVFd0RExFZEJRVUZCTEVsQlIzaENja01zUlVGQllXcERMRlZCUVZVNFJpeE5RVUZSTEZOQlFWTnFReXhIUVVOMFF5eFBRVUZQZUVRc1MwRkJTekJHTEU5QlFVOXNReXhIUVVGQlFTeEpRVWR5UWpWQ0xFVkJRV0ZxUXl4VlFVRlZaMGNzVjBGQllTeFRRVUZUYmtNc1IwRkRNME1zVDBGQlQzaEVMRXRCUVVzd1JpeFBRVUZQYkVNc1IwRkJRVUVzU1VGSGNrSTFRaXhGUVVGaGFrTXNWVUZCVldsSExGbEJRV05vUlN4RlFVRmhha01zVlVGQlZUUkdMRWRCUlRWRU0wUXNSVUZCWVdwRExGVkJRVlVyUml4UFFVRlRMRk5CUVZOc1F5eEZRVUZKUnl4SFFVTXpReXhIUVVGclFpeHRRa0ZCVUVnc1JVRkRWQ3hOUVVGTkxFbEJRVWxzUXl4TlFVRk5MRFJEUVdOc1FpeFBRVmhMZEVJc1MwRkJTelpGTEU5QlExSTNSU3hMUVVGTE5rVXNTMEZCVHl4SlFVbFliRUlzUlVGRFJETkVMRXRCUVVzMlJTeExRVUZMWjBJc1VVRkJVWEpETEVkQlJXeENlRVFzUzBGQlN6WkZMRXRCUVVzNVFpeExRVUZMVXl4SFFVZFdlRVFzVFVGSFZEUkNMRVZCUVdGcVF5eFZRVUZWTWtVc1NVRkJUU3hUUVVGVGRrTXNSVUZCVFd0RExFVkJRVlZPTEVkQlEzQkVMRWRCUVc5Q0xHMUNRVUZVTlVJc1JVRkZWQ3hQUVVSQkwwSXNTMEZCU3pCR0xFOUJRVTh6UkN4RlFVRk5hME1zUjBGRFdHcEZMRXRCUjFRc1IwRkJkMElzYlVKQlFXSnBSU3hGUVVOVUxFMUJRVTBzU1VGQlNUTkRMRTFCUVUwc2VVTkJVMnhDTEU5QlVFRjBRaXhMUVVGTFF5eFRRVUZYUml4RlFVRkxSaXhMUVVGTFJ5eE5RVWwwUWtFc1MwRkJTMVVzWTBGRFRsWXNTMEZCUzNWRkxFdEJRVXNzWTBGQlpYaERMRVZCUVUxclF5eEhRVVU1UW1wRkxFdEJRVXRSTEZWQmJGaFlMRk5CUVRCQ2RVSXNSVUZCVFd0RExFZEJUemxDTEVsQlFVa3NTVUZCU1doRExFVkJRVWtzUlVGQlIwVXNSMEZNWmtvc1JVRkJkVUlzYVVKQlFWUkJMRVZCUVc5Q1FTeEZRVUZMYVVRc1RVRkJUV2hHTEV0QlFVdExMRmRCUVdFd1FpeEZRVUZMSzBNc1UwRkxNVU51UXl4UFFVRlJWaXhGUVVGRkxFVkJRVWxGTEVWQlFVdEdMRWxCUXpORExFZEJRV1VzVDBGQldrWXNSVUZCUzBVc1NVRkJOa0lzVDBGQlpFWXNSVUZCUzBVc1JVRkJSU3hIUVVNMVFpeFBRVTlLTEVsQlNFRXNTVUZCU1VRc1JVRkJUMmhETEV0QlFVdGpMR0ZCUTFwVExFVkJRVTlSTEVWQlFVc3JSQ3hSUVVWVWRrVXNTVUZCVTJwRExFZEJRVmNzUTBGUmVrSXNSMEZPU3pCRExFVkJRVXRVTEV0QlExSlRMRVZCUVV0VUxFZEJRVkVzU1VGSFpsTXNSVUZCVDBFc1JVRkJTMVFzUjBGRlVTeEpRVUZvUWxFc1JVRkJTMWtzVDBGeFFsQXNUMEZ1UWt0WUxFVkJRVXRqTEZsQlNYVkNMRzFDUVVGd1FtUXNSVUZCUzJNc1lVRkRaR1FzUlVGQlMyTXNWMEZCWVN4RFFVRkRaQ3hGUVVGTFl5eGhRVWN4UW1Rc1JVRkJTMk1zVjBGQlYwTXNTMEZCUzJ0Q0xFbEJSMnhDYWtNc1JVRkJTMk1zVjBGQlYybEVMRkZCUTJwQ0wwWXNTMEZCUzAwc1kwRkJaMElzUjBGRGNrSXdRaXhGUVVGTFl5eFhRVUZYU0N4UFFVRlRNME1zUzBGQlMwMHNaMEpCUlRsQ01FSXNSVUZCUzJNc1YwRkJWMmxFTEZGQlFVRkJMRVZCUTJoQ2FFWXNSVUZCYzBKc1FpeExRVUZMUnl4TFFVRk5aME1zUlVGQlMyTXNWMEZCVjBnc1QwRkJVWEJDTEV0QlpqTkVVeXhGUVVGTFl5eFhRVUZoYlVJc1IwRkJRVUVzUlVGdlFuUkNNVU1zUlVGQlQxRXNSVUZCU3l0RUxGRkJSV1FzVDBGQlFTeEhRV3RWYlVKcVJ5eExRVUZMUnl4TFFVRk5LMElzUlVGQlRXdERMRWRCUXpOQ2FrVXNUMEZIU2tFc1MwRkJTME1zVVVGQlVUaENMRWxCUzJ0Q0xHMUNRVUYyUWk5Q0xFdEJRVXRETEZGQlFWRTRRaXhMUVVWMFFpOUNMRXRCUVV0RExGRkJRVkU0UWl4SFFVRlJMRU5CUVVNdlFpeExRVUZMUXl4UlFVRlJPRUlzUzBGSmJFTTBRaXhGUVVORU0wUXNTMEZCUzBNc1VVRkJVVGhDTEVkQlFVMDRSQ3hSUVVGUk5VSXNSMEZGTTBKcVJTeExRVUZMUXl4UlFVRlJPRUlzUjBGQlRXZENMRXRCUVV0clFpeEpRVXQyUW1wRkxFdEJRVXRETEZGQlFWRTRRaXhIUVVGTlowVXNVVUZEY0VJdlJpeExRVUZMVFN4alFVRm5RaXhIUVVOeVFrNHNTMEZCUzBNc1VVRkJVVGhDTEVkQlFVMVpMRTlCUVZNelF5eExRVUZMVFN4blFrRkZha05PTEV0QlFVdERMRkZCUVZFNFFpeEhRVUZOWjBVc1VVRkJRVUVzUlVGRGJrSm9SaXhGUVVGelFteENMRXRCUVV0SExFdEJRVTFCTEV0QlFVdERMRkZCUVZFNFFpeEhRVUZOV1N4UFFVRlJXaXhMUVhSQ09VUXZRaXhMUVVGTFF5eFJRVUZST0VJc1IwRkJVV3RETEVWQk1FSm9RbXBGTEU5QlIxUTBRaXhGUVVGaGFrTXNWVUZCVlhWRkxFbEJRVTBzVTBGQlUyNURMRVZCUVUxclF5eEhRVU14UXl4SFFVRjNRaXh0UWtGQllrRXNSVUZEVkN4TlFVRk5MRWxCUVVrelF5eE5RVUZOTEcxRVFVZHNRaXhKUVVGSlVTeEZRVUZUYTBVc1JVRkJUU3hIUVVWdVFpeEhRVUZIYUVjc1MwRkJTMUVzVTBGQlZTeERRVU5vUWl4SlFVRkpkVVVzUlVGQmNVSXNhVUpCUVZSb1JDeEZRVUZ2UWtFc1JVRkJTMmxFTEUxQlFVMW9SaXhMUVVGTFN5eFhRVUZoTUVJc1JVRkJTeXRETEZGQlEzUkZhMElzUlVGQlVXNUZMRVZCUVcxQ2FFTXNTMEZCUzBjc1MwRkJUU3hMUVVGTkswVXNSVUZCU1M5RkxFdEJRVXRqTEdGQlFXTXNUMEZGYUVVc1EwRkZTQ3hKUVVGTFpDeExRVUZMUXl4UlFVRlJPRUlzUjBGQlR5eFBRVUZQTDBJc1MwRkRhRU00UWl4RlFVRlhPVUlzUzBGQlMwTXNVVUZCVVRoQ0xFZEJRM2hDYVVVc1JVRkJUV3BFTEV0QlFVc3NRMEZCUTBRc1YwRkJWMmhDTEVsQlIzcENMRWxCUVVzc1NVRkJTVzFGTEVWQlFVMHNSVUZCUjBFc1JVRkJUVVFzUlVGQlRYSkVMRTlCUVZGelJDeEpRVUZUTEVOQlF6ZERMRWxCUVVrdlJDeEZRVUZQT0VRc1JVRkJUVU1zUjBGRmFrSXNSMEZFUVc1RkxFVkJRVmRKTEVWQlFVdFpMRmRCUTFwMlJDeEZRVUZSZFVNc1IwRkJWeXhEUVVseVFpeEpRVVpCTEVsQlFVbHZSU3hIUVVGWkxFVkJSVkJxUlN4RlFVRkpMRVZCUVVkVkxFVkJRVk5pTEVWQlFWTmhMRTlCUVZGV0xFVkJRVWxWTEVWQlFWRldMRWxCUTNCRUxFZEJRVWxJTEVWQlFWTkhMRXRCUVU5blF5eEhRVU5xUW01RExFVkJRVk5ITEVkQlFVZG5ReXhWUVVGWmJrTXNSVUZCVTBjc1IwRkJSMmRETEZkQlFXRkJMRWRCUTJwRWJrTXNSVUZCVTBjc1IwRkJSMjlETEZOQlFWZDJReXhGUVVGVFJ5eEhRVUZIYjBNc1ZVRkJXVW9zUlVGQlZ5eERRVU16UkdsRExFVkJRVmRxUlN4RlFVTllMRTFCU1Vvc1IwRkJTV2xGTEVWQlFWY3NSVUZEWWl4VFFYRkNSaXhQUVd4Q1IyeEhMRXRCUVV0UkxGTkJRMDR3UWl4RlFVRkxXU3hYUVVGWGNVUXNUMEZCVDBRc1JVRkJWU3hIUVVkcVEyeEhMRXRCUVV0RExGRkJRVkU0UWl4SFFVRk5iMFVzVDBGQlQwUXNSVUZCVlN4SFFVZGtMRWxCUVhCQ2NFVXNSVUZCVTJFc1UwRkRVak5ETEV0QlFVdFJMR2RDUVVORE1FSXNSVUZCUzFrc2EwSkJSMHc1UXl4TFFVRkxReXhSUVVGUk9FSXNTVUZIY0VJdlFpeExRVUZMV1N4cFFrRkRVRm9zUzBGQlMzVkZMRXRCUVVzc2FVSkJRV3RDZUVNc1JVRkJUV3RETEVkQlJUZENha1VzVFVGRlFUaENMRWxCUVdGdFF5eEhRVU51UW01RExFVkJRVk50UXl4VlFVRlpia01zUlVGQlUyMURMRmRCUVdGQkxFZEJRek5EYmtNc1JVRkJVM1ZETEZOQlFWZDJReXhGUVVGVGRVTXNWVUZCV1Vvc1MwRkRka05xUlN4TFFVRkxVU3huUWtGRFF6QkNMRVZCUVV0WkxHdENRVWRNT1VNc1MwRkJTME1zVVVGQlVUaENMRWRCUld4Q0wwSXNTMEZCUzFrc2FVSkJRMUJhTEV0QlFVdDFSU3hMUVVGTExHbENRVUZyUW5oRExFVkJRVTFyUXl4SlFYZENlRU1zVDBGd1FrRXNVMEZCVTIxRExFVkJRVEJDUXl4SFFVTnFReXhIUVVGSlFTeEpRVUZUTDBjc1JVRkJZaXhEUVVkQkxFbEJRVWxuU0N4RlFVRlBOVWNzVDBGQlR6UkhMRXRCUVV0RUxFZEJRM1pDTEVsQlFVc3NTVUZCU1hCRkxFdEJRVXR4UlN4RlFVRk5MRU5CUTJ4Q0xFbEJRVWxETEVWQlFVMUVMRVZCUVV0eVJTeEhRVU5ZZUVNc1JVRkJUVFJITEVWQlFVdEZMRWRCUTFZNVJ5eGhRVUZsSzBjc1ZVRkJOa0lzYVVKQlFWSXZSeXhIUVVFNFFpeFBRVUZTUVN4SlFVVXpSRU1zVDBGQlR6UkhMRXRCUVVzM1J5eEhRVUZMYTBRc1QwRkJVeXhIUVVNMVFubEVMRVZCUVRCQ1F5eEZRVUZMUlN4SlFVVkVMRWxCUVRWQ04wY3NUMEZCVHpSSExFdEJRVXMzUnl4SFFVRkxhMFFzWlVGRFdqQkVMRVZCUVV0RkxFMUJaR3hDTEVOQmEwSXdRblpITEV0QlFVdGpMR05CUlhoQ1pDeE5RVWRVTkVJc1JVRkJZV3BETEZWQlFWVTRSeXhQUVVGVExGTkJRVk5xUkN4SFFVTjJReXhKUVVGclFtdEVMRVZCUVdSNlJTeEZRVUZKTEVWQlFVZDNReXhGUVVGSkxFVkJRMllzUjBGQlNXcENMRWRCUVUxNFJDeExRVUZMTmtVc1RVRkJVVGRGTEV0QlFVczJSU3hMUVVGTGJFTXNUMEZCVXl4SFFVVjRReXhKUVVGSlZpeEZRVUZKTEVWQlFVZDNReXhIUVVSWWFVTXNSVUZCVFRGSExFdEJRVXMyUlN4TlFVTlJiRU1zVDBGQlVWWXNSVUZCU1hkRExFVkJRVWQ0UXl4SlFVTm9ReXhIUVVGSGRVSXNTVUZCVDJ0RUxFVkJRVWw2UlN4SFFVbGFMRTlCU0VGNVJTeEZRVUZKVUN4UFFVRlBiRVVzUlVGQlJ5eEhRVU5XYWtNc1MwRkJTMWtzYVVKQlExQmFMRXRCUVV0MVJTeExRVUZMTEc5Q1FVRnhRbVlzUjBGRE1VSjRSQ3hUUVVkT0xFTkJSVXdzUjBGRVFUQkhMRVZCUVUweFJ5eExRVUZMTmtVc1MwRkRVRGRGTEV0QlFVdFpMR2RDUVVOUUxFbEJRVWx4UWl4RlFVRkpMRVZCUVVkM1F5eEZRVUZKYVVNc1JVRkJTUzlFTEU5QlFWRldMRVZCUVVsM1F5eEZRVUZIZUVNc1NVRkRhRU5xUXl4TFFVRkxkVVVzUzBGQlN5eHZRa0ZCY1VKdFF5eEZRVUZKZWtVc1NVRkZka05xUXl4TFFVRkxOa1VzUzBGQlR5eEhRVVZrTEU5QlFVODNSU3hOUVVkVU5FSXNSVUZCWVdwRExGVkJRVlZuUWl4bFFVRnBRbWxDTEVWQlFXRnFReXhWUVVGVmRVVXNTVUZGTDBSMFF5eEZRVUZoYWtNc1ZVRkJWV2RJTEcxQ1FVRnhRaXhUUVVGVE5VVXNSMEZEYmtRc1IwRkJTVUVzU1VGQlUzcERMRVZCUlZnc1QwRkVRMVVzUzBGQlMwTXNVMEZCVjBZc1JVRkJTMFlzUzBGQlMwY3NUVUZEY0VKQkxFdEJSMVFzUjBGQlNVRXNTMEZCUzFFc1UwRkpVQ3hKUVVoQkxFbEJRVWwxUlN4RlFVRnhRaXhwUWtGQlZHaEVMRVZCUVc5Q1FTeEZRVUZMYVVRc1RVRkJUV2hHTEV0QlFVdExMRmRCUVdFd1FpeEZRVUZMSzBNc1VVRkRiRVZyUWl4RlFVRlJia1VzUlVGQmJVSm9ReXhMUVVGTFJ5eExRVUZOTEV0QlFVMHJSU3hGUVVGSkwwVXNTMEZCUzJNc1lVRkJZeXhIUVVVNVJHMUdMRVZCUVUwc1JVRkJSMEVzUlVGQlRVUXNSVUZCVFhKRUxFOUJRVkZ6UkN4SlFVTjZRa1FzUlVGQlRVTXNSMEZEV201RUxGZEJRV0VzVlVGSFlqbERMRXRCUVV0RExGVkJRMXBFTEV0QlFVdERMRkZCUVZFNFFpeEhRVUZSTEUxQlJYWkNMRTlCUVU4dlFpeE5RVWRVTkVJc1JVRkJZV3BETEZWQlFWVTRReXhWUVVGWkxGTkJRVk5XTEVkQlF6RkRMRWRCUVVrdlFpeExRVUZMVVN4VFFVRlZMRU5CUTJwQ0xFbEJRVWx6UWl4RlFVRlhMRWRCUTFocFJDeEZRVUZ4UWl4cFFrRkJWR2hFTEVWQlFXOUNRU3hGUVVGTGFVUXNUVUZCVFdoR0xFdEJRVXRMTEZkQlFXRXdRaXhGUVVGTEswTXNVVUZGZEVVc1QwRkVRV3BFTEVWQlFXMUNhRU1zUzBGQlMwY3NTMEZCVFRoQ0xFVkJRVlZwUkN4RlFVRkpMMFVzUzBGQlMyTXNZVUZCWXl4SFFVTjRSR2RDTEVWQlUxUXNUMEZPUVRsQ0xFdEJRVXRETEZOQlFWZEdMRVZCUVV0R0xFdEJRVXRITEUxQlJYSkNRU3hMUVVGTFF5eFJRVUZST0VJc1MwRkJUeTlDTEV0QlFVdERMRkZCUVZFNFFpeEhRVUZSTEVsQlEzcERlRU1zUlVGQlVWTXNTMEZCUzBNc1VVRkJVVGhDTEUxQlEzaENMMElzUzBGQlMwTXNVVUZCVVRoQ0xFZEJRVkVzUTBGQlF5OUNMRXRCUVV0RExGRkJRVkU0UWl4TFFVVTVRaTlDTEV0QlFVdERMRkZCUVZFNFFpeEpRVWQwUWtnc1JVRkJZV3BETEZWQlFWVnBTQ3hYUVVGaExGZEJRMnhETEU5QlFVOXNTQ3hQUVVGUE5FY3NTMEZCUzNSSExFdEJRVXRETEZWQlJ6RkNNa0lzUlVGQllXcERMRlZCUVZWclNDeGpRVUZuUWl4VFFVRlRPVVVzUjBGRE9VTXNUMEZCVHk5Q0xFdEJRVXQ1UXl4VlFVRlZWaXhIUVVGTldTeFJRVWM1UW1Zc1JVRkJZV3BETEZWQlFWVnRTQ3hoUVVGbExGZEJSWEJETEU5QlFVYzVSeXhMUVVGTE5rVXNTMEZEUXpkRkxFdEJRVXMyUlN4TFFVZE1MRWxCUzFjc2JVSkJRVmhyUXl4UlFVRjVRa0VzVDBGQlQwTXNTVUZGZWtORUxFOUJRVThzVjBGRFRDeFBRVUZQYmtZc1NVRkZiVUlzYVVKQlFWcHhSaXhSUVVWb1FrTXNUMEZCVDBRc1VVRkJWWEpHTEVWQlNXcENkVVlzVDBGQlQyaEZMR05CUVdkQ2RrSXNSVUZ3ZDBKNlFpSXNJbVpwYkdVaU9pSkZPbHhjWkdsbmFYUm9hVzVyYVhSY1hFRjNaWE52YldWRFlYSjBTbE5jWEc1dlpHVmZiVzlrZFd4bGMxeGNaWFpsYm5SbGJXbDBkR1Z5TWx4Y2JHbGlYRnhsZG1WdWRHVnRhWFIwWlhJeUxtcHpJbjA9IiwiaW1wb3J0IHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzLnJ1bnRpbWUnO1xuXG4vLyBDb21waWxlciBpbXBvcnRzXG5pbXBvcnQgQVNUIGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9hc3QnO1xuaW1wb3J0IHsgcGFyc2VyIGFzIFBhcnNlciwgcGFyc2UgfSBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYmFzZSc7XG5pbXBvcnQgeyBDb21waWxlciwgY29tcGlsZSwgcHJlY29tcGlsZSB9IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9jb21waWxlcic7XG5pbXBvcnQgSmF2YVNjcmlwdENvbXBpbGVyIGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9qYXZhc2NyaXB0LWNvbXBpbGVyJztcbmltcG9ydCBWaXNpdG9yIGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci92aXNpdG9yJztcblxuaW1wb3J0IG5vQ29uZmxpY3QgZnJvbSAnLi9oYW5kbGViYXJzL25vLWNvbmZsaWN0JztcblxubGV0IF9jcmVhdGUgPSBydW50aW1lLmNyZWF0ZTtcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gX2NyZWF0ZSgpO1xuXG4gIGhiLmNvbXBpbGUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG4gIH07XG4gIGhiLnByZWNvbXBpbGUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBwcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG4gIH07XG5cbiAgaGIuQVNUID0gQVNUO1xuICBoYi5Db21waWxlciA9IENvbXBpbGVyO1xuICBoYi5KYXZhU2NyaXB0Q29tcGlsZXIgPSBKYXZhU2NyaXB0Q29tcGlsZXI7XG4gIGhiLlBhcnNlciA9IFBhcnNlcjtcbiAgaGIucGFyc2UgPSBwYXJzZTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbGV0IHJvb3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdyxcbiAgICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBIYW5kbGViYXJzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocm9vdC5IYW5kbGViYXJzID09PSBIYW5kbGViYXJzKSB7XG4gICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWJhcnM7XG4gIH07XG59XG4iLCJsZXQgQVNUID0ge1xuICAvLyBQdWJsaWMgQVBJIHVzZWQgdG8gZXZhbHVhdGUgZGVyaXZlZCBhdHRyaWJ1dGVzIHJlZ2FyZGluZyBBU1Qgbm9kZXNcbiAgaGVscGVyczoge1xuICAgIC8vIGEgbXVzdGFjaGUgaXMgZGVmaW5pdGVseSBhIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0IGlzIGFuIGVsaWdpYmxlIGhlbHBlciwgYW5kXG4gICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcbiAgICBoZWxwZXJFeHByZXNzaW9uOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gKG5vZGUudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKVxuICAgICAgICAgIHx8ICgobm9kZS50eXBlID09PSAnTXVzdGFjaGVTdGF0ZW1lbnQnIHx8IG5vZGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50JylcbiAgICAgICAgICAgICYmICEhKChub2RlLnBhcmFtcyAmJiBub2RlLnBhcmFtcy5sZW5ndGgpIHx8IG5vZGUuaGFzaCkpO1xuICAgIH0sXG5cbiAgICBzY29wZWRJZDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuICgvXlxcLnx0aGlzXFxiLykudGVzdChwYXRoLm9yaWdpbmFsKTtcbiAgICB9LFxuXG4gICAgLy8gYW4gSUQgaXMgc2ltcGxlIGlmIGl0IG9ubHkgaGFzIG9uZSBwYXJ0LCBhbmQgdGhhdCBwYXJ0IGlzIG5vdFxuICAgIC8vIGAuLmAgb3IgYHRoaXNgLlxuICAgIHNpbXBsZUlkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5wYXJ0cy5sZW5ndGggPT09IDEgJiYgIUFTVC5oZWxwZXJzLnNjb3BlZElkKHBhdGgpICYmICFwYXRoLmRlcHRoO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBNdXN0IGJlIGV4cG9ydGVkIGFzIGFuIG9iamVjdCByYXRoZXIgdGhhbiB0aGUgcm9vdCBvZiB0aGUgbW9kdWxlIGFzIHRoZSBqaXNvbiBsZXhlclxuLy8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxuZXhwb3J0IGRlZmF1bHQgQVNUO1xuIiwiaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5mdW5jdGlvbiBWaXNpdG9yKCkge1xuICB0aGlzLnBhcmVudHMgPSBbXTtcbn1cblxuVmlzaXRvci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBWaXNpdG9yLFxuICBtdXRhdGluZzogZmFsc2UsXG5cbiAgLy8gVmlzaXRzIGEgZ2l2ZW4gdmFsdWUuIElmIG11dGF0aW5nLCB3aWxsIHJlcGxhY2UgdGhlIHZhbHVlIGlmIG5lY2Vzc2FyeS5cbiAgYWNjZXB0S2V5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5hY2NlcHQobm9kZVtuYW1lXSk7XG4gICAgaWYgKHRoaXMubXV0YXRpbmcpIHtcbiAgICAgIC8vIEhhY2t5IHNhbml0eSBjaGVjazogVGhpcyBtYXkgaGF2ZSBhIGZldyBmYWxzZSBwb3NpdGl2ZXMgZm9yIHR5cGUgZm9yIHRoZSBoZWxwZXJcbiAgICAgIC8vIG1ldGhvZHMgYnV0IHdpbGwgZ2VuZXJhbGx5IGRvIHRoZSByaWdodCB0aGluZyB3aXRob3V0IGEgbG90IG9mIG92ZXJoZWFkLlxuICAgICAgaWYgKHZhbHVlICYmICFWaXNpdG9yLnByb3RvdHlwZVt2YWx1ZS50eXBlXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmV4cGVjdGVkIG5vZGUgdHlwZSBcIicgKyB2YWx1ZS50eXBlICsgJ1wiIGZvdW5kIHdoZW4gYWNjZXB0aW5nICcgKyBuYW1lICsgJyBvbiAnICsgbm9kZS50eXBlKTtcbiAgICAgIH1cbiAgICAgIG5vZGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gUGVyZm9ybXMgYW4gYWNjZXB0IG9wZXJhdGlvbiB3aXRoIGFkZGVkIHNhbml0eSBjaGVjayB0byBlbnN1cmVcbiAgLy8gcmVxdWlyZWQga2V5cyBhcmUgbm90IHJlbW92ZWQuXG4gIGFjY2VwdFJlcXVpcmVkOiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgdGhpcy5hY2NlcHRLZXkobm9kZSwgbmFtZSk7XG5cbiAgICBpZiAoIW5vZGVbbmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24obm9kZS50eXBlICsgJyByZXF1aXJlcyAnICsgbmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRyYXZlcnNlcyBhIGdpdmVuIGFycmF5LiBJZiBtdXRhdGluZywgZW1wdHkgcmVzcG5zZXMgd2lsbCBiZSByZW1vdmVkXG4gIC8vIGZvciBjaGlsZCBlbGVtZW50cy5cbiAgYWNjZXB0QXJyYXk6IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMuYWNjZXB0S2V5KGFycmF5LCBpKTtcblxuICAgICAgaWYgKCFhcnJheVtpXSkge1xuICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgbC0tO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhY2NlcHQ6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmICghb2JqZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG4gICAgaWYgKCF0aGlzW29iamVjdC50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0eXBlOiAnICsgb2JqZWN0LnR5cGUsIG9iamVjdCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY3VycmVudCkge1xuICAgICAgdGhpcy5wYXJlbnRzLnVuc2hpZnQodGhpcy5jdXJyZW50KTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50ID0gb2JqZWN0O1xuXG4gICAgbGV0IHJldCA9IHRoaXNbb2JqZWN0LnR5cGVdKG9iamVjdCk7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnBhcmVudHMuc2hpZnQoKTtcblxuICAgIGlmICghdGhpcy5tdXRhdGluZyB8fCByZXQpIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSBlbHNlIGlmIChyZXQgIT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgfSxcblxuICBQcm9ncmFtOiBmdW5jdGlvbihwcm9ncmFtKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShwcm9ncmFtLmJvZHkpO1xuICB9LFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiB2aXNpdFN1YkV4cHJlc3Npb24sXG4gIERlY29yYXRvcjogdmlzaXRTdWJFeHByZXNzaW9uLFxuXG4gIEJsb2NrU3RhdGVtZW50OiB2aXNpdEJsb2NrLFxuICBEZWNvcmF0b3JCbG9jazogdmlzaXRCbG9jayxcblxuICBQYXJ0aWFsU3RhdGVtZW50OiB2aXNpdFBhcnRpYWwsXG4gIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24ocGFydGlhbCkge1xuICAgIHZpc2l0UGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwpO1xuXG4gICAgdGhpcy5hY2NlcHRLZXkocGFydGlhbCwgJ3Byb2dyYW0nKTtcbiAgfSxcblxuICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbigvKiBjb250ZW50ICovKSB7fSxcbiAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24oLyogY29tbWVudCAqLykge30sXG5cbiAgU3ViRXhwcmVzc2lvbjogdmlzaXRTdWJFeHByZXNzaW9uLFxuXG4gIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbigvKiBwYXRoICovKSB7fSxcblxuICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbigvKiBzdHJpbmcgKi8pIHt9LFxuICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbigvKiBudW1iZXIgKi8pIHt9LFxuICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24oLyogYm9vbCAqLykge30sXG4gIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uKC8qIGxpdGVyYWwgKi8pIHt9LFxuICBOdWxsTGl0ZXJhbDogZnVuY3Rpb24oLyogbGl0ZXJhbCAqLykge30sXG5cbiAgSGFzaDogZnVuY3Rpb24oaGFzaCkge1xuICAgIHRoaXMuYWNjZXB0QXJyYXkoaGFzaC5wYWlycyk7XG4gIH0sXG4gIEhhc2hQYWlyOiBmdW5jdGlvbihwYWlyKSB7XG4gICAgdGhpcy5hY2NlcHRSZXF1aXJlZChwYWlyLCAndmFsdWUnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdmlzaXRTdWJFeHByZXNzaW9uKG11c3RhY2hlKSB7XG4gIHRoaXMuYWNjZXB0UmVxdWlyZWQobXVzdGFjaGUsICdwYXRoJyk7XG4gIHRoaXMuYWNjZXB0QXJyYXkobXVzdGFjaGUucGFyYW1zKTtcbiAgdGhpcy5hY2NlcHRLZXkobXVzdGFjaGUsICdoYXNoJyk7XG59XG5mdW5jdGlvbiB2aXNpdEJsb2NrKGJsb2NrKSB7XG4gIHZpc2l0U3ViRXhwcmVzc2lvbi5jYWxsKHRoaXMsIGJsb2NrKTtcblxuICB0aGlzLmFjY2VwdEtleShibG9jaywgJ3Byb2dyYW0nKTtcbiAgdGhpcy5hY2NlcHRLZXkoYmxvY2ssICdpbnZlcnNlJyk7XG59XG5mdW5jdGlvbiB2aXNpdFBhcnRpYWwocGFydGlhbCkge1xuICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhcnRpYWwsICduYW1lJyk7XG4gIHRoaXMuYWNjZXB0QXJyYXkocGFydGlhbC5wYXJhbXMpO1xuICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAnaGFzaCcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWaXNpdG9yO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuXG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5pbXBvcnQge2lzQXJyYXksIGluZGV4T2YsIGV4dGVuZH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEFTVCBmcm9tICcuL2FzdCc7XG5cbmNvbnN0IHNsaWNlID0gW10uc2xpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlcigpIHt9XG5cbi8vIHRoZSBmb3VuZEhlbHBlciByZWdpc3RlciB3aWxsIGRpc2FtYmlndWF0ZSBoZWxwZXIgbG9va3VwIGZyb20gZmluZGluZyBhXG4vLyBmdW5jdGlvbiBpbiBhIGNvbnRleHQuIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBtdXN0YWNoZSBjb21wYXRpYmlsaXR5LCB3aGljaFxuLy8gcmVxdWlyZXMgdGhhdCBjb250ZXh0IGZ1bmN0aW9ucyBpbiBibG9ja3MgYXJlIGV2YWx1YXRlZCBieSBibG9ja0hlbHBlck1pc3NpbmcsXG4vLyBhbmQgdGhlbiBwcm9jZWVkIGFzIGlmIHRoZSByZXN1bHRpbmcgdmFsdWUgd2FzIHByb3ZpZGVkIHRvIGJsb2NrSGVscGVyTWlzc2luZy5cblxuQ29tcGlsZXIucHJvdG90eXBlID0ge1xuICBjb21waWxlcjogQ29tcGlsZXIsXG5cbiAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgIGxldCBsZW4gPSB0aGlzLm9wY29kZXMubGVuZ3RoO1xuICAgIGlmIChvdGhlci5vcGNvZGVzLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IG9wY29kZSA9IHRoaXMub3Bjb2Rlc1tpXSxcbiAgICAgICAgICBvdGhlck9wY29kZSA9IG90aGVyLm9wY29kZXNbaV07XG4gICAgICBpZiAob3Bjb2RlLm9wY29kZSAhPT0gb3RoZXJPcGNvZGUub3Bjb2RlIHx8ICFhcmdFcXVhbHMob3Bjb2RlLmFyZ3MsIG90aGVyT3Bjb2RlLmFyZ3MpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBrbm93IHRoYXQgbGVuZ3RoIGlzIHRoZSBzYW1lIGJldHdlZW4gdGhlIHR3byBhcnJheXMgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSB0aWVkXG4gICAgLy8gdG8gdGhlIG9wY29kZSBiZWhhdmlvciBhYm92ZS5cbiAgICBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMuY2hpbGRyZW5baV0uZXF1YWxzKG90aGVyLmNoaWxkcmVuW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgZ3VpZDogMCxcblxuICBjb21waWxlOiBmdW5jdGlvbihwcm9ncmFtLCBvcHRpb25zKSB7XG4gICAgdGhpcy5zb3VyY2VOb2RlID0gW107XG4gICAgdGhpcy5vcGNvZGVzID0gW107XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHJpbmdQYXJhbXMgPSBvcHRpb25zLnN0cmluZ1BhcmFtcztcbiAgICB0aGlzLnRyYWNrSWRzID0gb3B0aW9ucy50cmFja0lkcztcblxuICAgIG9wdGlvbnMuYmxvY2tQYXJhbXMgPSBvcHRpb25zLmJsb2NrUGFyYW1zIHx8IFtdO1xuXG4gICAgLy8gVGhlc2UgY2hhbmdlcyB3aWxsIHByb3BhZ2F0ZSB0byB0aGUgb3RoZXIgY29tcGlsZXIgY29tcG9uZW50c1xuICAgIGxldCBrbm93bkhlbHBlcnMgPSBvcHRpb25zLmtub3duSGVscGVycztcbiAgICBvcHRpb25zLmtub3duSGVscGVycyA9IHtcbiAgICAgICdoZWxwZXJNaXNzaW5nJzogdHJ1ZSxcbiAgICAgICdibG9ja0hlbHBlck1pc3NpbmcnOiB0cnVlLFxuICAgICAgJ2VhY2gnOiB0cnVlLFxuICAgICAgJ2lmJzogdHJ1ZSxcbiAgICAgICd1bmxlc3MnOiB0cnVlLFxuICAgICAgJ3dpdGgnOiB0cnVlLFxuICAgICAgJ2xvZyc6IHRydWUsXG4gICAgICAnbG9va3VwJzogdHJ1ZVxuICAgIH07XG4gICAgaWYgKGtub3duSGVscGVycykge1xuICAgICAgLy8gdGhlIG5leHQgbGluZSBzaG91bGQgdXNlIFwiT2JqZWN0LmtleXNcIiwgYnV0IHRoZSBjb2RlIGhhcyBiZWVuIGxpa2UgdGhpcyBhIGxvbmcgdGltZSBhbmQgY2hhbmdpbmcgaXQsIG1pZ2h0XG4gICAgICAvLyBjYXVzZSBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBpc3N1ZXMuLi4gSXQncyBhbiBvbGQgbGlicmFyeS4uLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgICAgZm9yIChsZXQgbmFtZSBpbiBrbm93bkhlbHBlcnMpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdID0ga25vd25IZWxwZXJzW25hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmFjY2VwdChwcm9ncmFtKTtcbiAgfSxcblxuICBjb21waWxlUHJvZ3JhbTogZnVuY3Rpb24ocHJvZ3JhbSkge1xuICAgIGxldCBjaGlsZENvbXBpbGVyID0gbmV3IHRoaXMuY29tcGlsZXIoKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gICAgICAgIHJlc3VsdCA9IGNoaWxkQ29tcGlsZXIuY29tcGlsZShwcm9ncmFtLCB0aGlzLm9wdGlvbnMpLFxuICAgICAgICBndWlkID0gdGhpcy5ndWlkKys7XG5cbiAgICB0aGlzLnVzZVBhcnRpYWwgPSB0aGlzLnVzZVBhcnRpYWwgfHwgcmVzdWx0LnVzZVBhcnRpYWw7XG5cbiAgICB0aGlzLmNoaWxkcmVuW2d1aWRdID0gcmVzdWx0O1xuICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgcmVzdWx0LnVzZURlcHRocztcblxuICAgIHJldHVybiBndWlkO1xuICB9LFxuXG4gIGFjY2VwdDogZnVuY3Rpb24obm9kZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBTYW5pdHkgY29kZSAqL1xuICAgIGlmICghdGhpc1tub2RlLnR5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHR5cGU6ICcgKyBub2RlLnR5cGUsIG5vZGUpO1xuICAgIH1cblxuICAgIHRoaXMuc291cmNlTm9kZS51bnNoaWZ0KG5vZGUpO1xuICAgIGxldCByZXQgPSB0aGlzW25vZGUudHlwZV0obm9kZSk7XG4gICAgdGhpcy5zb3VyY2VOb2RlLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBQcm9ncmFtOiBmdW5jdGlvbihwcm9ncmFtKSB7XG4gICAgdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLnVuc2hpZnQocHJvZ3JhbS5ibG9ja1BhcmFtcyk7XG5cbiAgICBsZXQgYm9keSA9IHByb2dyYW0uYm9keSxcbiAgICAgICAgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keUxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFjY2VwdChib2R5W2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMuc2hpZnQoKTtcblxuICAgIHRoaXMuaXNTaW1wbGUgPSBib2R5TGVuZ3RoID09PSAxO1xuICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBwcm9ncmFtLmJsb2NrUGFyYW1zID8gcHJvZ3JhbS5ibG9ja1BhcmFtcy5sZW5ndGggOiAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChibG9jayk7XG5cbiAgICBsZXQgcHJvZ3JhbSA9IGJsb2NrLnByb2dyYW0sXG4gICAgICAgIGludmVyc2UgPSBibG9jay5pbnZlcnNlO1xuXG4gICAgcHJvZ3JhbSA9IHByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICBpbnZlcnNlID0gaW52ZXJzZSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGludmVyc2UpO1xuXG4gICAgbGV0IHR5cGUgPSB0aGlzLmNsYXNzaWZ5U2V4cHIoYmxvY2spO1xuXG4gICAgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XG4gICAgICB0aGlzLmhlbHBlclNleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XG4gICAgICB0aGlzLnNpbXBsZVNleHByKGJsb2NrKTtcblxuICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xuICAgICAgLy8gZXZhbHVhdGUgaXQgYnkgZXhlY3V0aW5nIGBibG9ja0hlbHBlck1pc3NpbmdgXG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2Jsb2NrVmFsdWUnLCBibG9jay5wYXRoLm9yaWdpbmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihibG9jaywgcHJvZ3JhbSwgaW52ZXJzZSk7XG5cbiAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cbiAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdhbWJpZ3VvdXNCbG9ja1ZhbHVlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICB9LFxuXG4gIERlY29yYXRvckJsb2NrKGRlY29yYXRvcikge1xuICAgIGxldCBwcm9ncmFtID0gZGVjb3JhdG9yLnByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShkZWNvcmF0b3IucHJvZ3JhbSk7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLFxuICAgICAgICBwYXRoID0gZGVjb3JhdG9yLnBhdGg7XG5cbiAgICB0aGlzLnVzZURlY29yYXRvcnMgPSB0cnVlO1xuICAgIHRoaXMub3Bjb2RlKCdyZWdpc3RlckRlY29yYXRvcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwpO1xuICB9LFxuXG4gIFBhcnRpYWxTdGF0ZW1lbnQ6IGZ1bmN0aW9uKHBhcnRpYWwpIHtcbiAgICB0aGlzLnVzZVBhcnRpYWwgPSB0cnVlO1xuXG4gICAgbGV0IHByb2dyYW0gPSBwYXJ0aWFsLnByb2dyYW07XG4gICAgaWYgKHByb2dyYW0pIHtcbiAgICAgIHByb2dyYW0gPSB0aGlzLmNvbXBpbGVQcm9ncmFtKHBhcnRpYWwucHJvZ3JhbSk7XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtcyA9IHBhcnRpYWwucGFyYW1zO1xuICAgIGlmIChwYXJhbXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIHBhcnRpYWwgYXJndW1lbnRzOiAnICsgcGFyYW1zLmxlbmd0aCwgcGFydGlhbCk7XG4gICAgfSBlbHNlIGlmICghcGFyYW1zLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHBsaWNpdFBhcnRpYWxDb250ZXh0KSB7XG4gICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHt0eXBlOiAnUGF0aEV4cHJlc3Npb24nLCBwYXJ0czogW10sIGRlcHRoOiAwfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhcnRpYWxOYW1lID0gcGFydGlhbC5uYW1lLm9yaWdpbmFsLFxuICAgICAgICBpc0R5bmFtaWMgPSBwYXJ0aWFsLm5hbWUudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nO1xuICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgIHRoaXMuYWNjZXB0KHBhcnRpYWwubmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhwYXJ0aWFsLCBwcm9ncmFtLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgbGV0IGluZGVudCA9IHBhcnRpYWwuaW5kZW50IHx8ICcnO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucHJldmVudEluZGVudCAmJiBpbmRlbnQpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgaW5kZW50KTtcbiAgICAgIGluZGVudCA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMub3Bjb2RlKCdpbnZva2VQYXJ0aWFsJywgaXNEeW5hbWljLCBwYXJ0aWFsTmFtZSwgaW5kZW50KTtcbiAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XG4gIH0sXG4gIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24ocGFydGlhbEJsb2NrKSB7XG4gICAgdGhpcy5QYXJ0aWFsU3RhdGVtZW50KHBhcnRpYWxCbG9jayk7XG4gIH0sXG5cbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IGZ1bmN0aW9uKG11c3RhY2hlKSB7XG4gICAgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKTtcblxuICAgIGlmIChtdXN0YWNoZS5lc2NhcGVkICYmICF0aGlzLm9wdGlvbnMubm9Fc2NhcGUpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRFc2NhcGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgICB9XG4gIH0sXG4gIERlY29yYXRvcihkZWNvcmF0b3IpIHtcbiAgICB0aGlzLkRlY29yYXRvckJsb2NrKGRlY29yYXRvcik7XG4gIH0sXG5cblxuICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgaWYgKGNvbnRlbnQudmFsdWUpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgY29udGVudC52YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIENvbW1lbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKCkge30sXG5cbiAgU3ViRXhwcmVzc2lvbjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKTtcbiAgICBsZXQgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihzZXhwcik7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHRoaXMuc2ltcGxlU2V4cHIoc2V4cHIpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcbiAgICAgIHRoaXMuaGVscGVyU2V4cHIoc2V4cHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFtYmlndW91c1NleHByKHNleHByKTtcbiAgICB9XG4gIH0sXG4gIGFtYmlndW91c1NleHByOiBmdW5jdGlvbihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuICAgIGxldCBwYXRoID0gc2V4cHIucGF0aCxcbiAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF0sXG4gICAgICAgIGlzQmxvY2sgPSBwcm9ncmFtICE9IG51bGwgfHwgaW52ZXJzZSAhPSBudWxsO1xuXG4gICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG4gICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuXG4gICAgdGhpcy5vcGNvZGUoJ2ludm9rZUFtYmlndW91cycsIG5hbWUsIGlzQmxvY2spO1xuICB9LFxuXG4gIHNpbXBsZVNleHByOiBmdW5jdGlvbihzZXhwcikge1xuICAgIGxldCBwYXRoID0gc2V4cHIucGF0aDtcbiAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgdGhpcy5hY2NlcHQocGF0aCk7XG4gICAgdGhpcy5vcGNvZGUoJ3Jlc29sdmVQb3NzaWJsZUxhbWJkYScpO1xuICB9LFxuXG4gIGhlbHBlclNleHByOiBmdW5jdGlvbihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSxcbiAgICAgICAgcGF0aCA9IHNleHByLnBhdGgsXG4gICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdpbnZva2VLbm93bkhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmtub3duSGVscGVyc09ubHkpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1lvdSBzcGVjaWZpZWQga25vd25IZWxwZXJzT25seSwgYnV0IHVzZWQgdGhlIHVua25vd24gaGVscGVyICcgKyBuYW1lLCBzZXhwcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICAgIHBhdGguZmFsc3kgPSB0cnVlO1xuXG4gICAgICB0aGlzLmFjY2VwdChwYXRoKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdpbnZva2VIZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBwYXRoLm9yaWdpbmFsLCBBU1QuaGVscGVycy5zaW1wbGVJZChwYXRoKSk7XG4gICAgfVxuICB9LFxuXG4gIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgdGhpcy5hZGREZXB0aChwYXRoLmRlcHRoKTtcbiAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHBhdGguZGVwdGgpO1xuXG4gICAgbGV0IG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuICAgICAgICBzY29wZWQgPSBBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSxcbiAgICAgICAgYmxvY2tQYXJhbUlkID0gIXBhdGguZGVwdGggJiYgIXNjb3BlZCAmJiB0aGlzLmJsb2NrUGFyYW1JbmRleChuYW1lKTtcblxuICAgIGlmIChibG9ja1BhcmFtSWQpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUlkLCBwYXRoLnBhcnRzKTtcbiAgICB9IGVsc2UgaWYgKCFuYW1lKSB7XG4gICAgICAvLyBDb250ZXh0IHJlZmVyZW5jZSwgaS5lLiBge3tmb28gLn19YCBvciBge3tmb28gLi59fWBcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoQ29udGV4dCcpO1xuICAgIH0gZWxzZSBpZiAocGF0aC5kYXRhKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGF0YSA9IHRydWU7XG4gICAgICB0aGlzLm9wY29kZSgnbG9va3VwRGF0YScsIHBhdGguZGVwdGgsIHBhdGgucGFydHMsIHBhdGguc3RyaWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cE9uQ29udGV4dCcsIHBhdGgucGFydHMsIHBhdGguZmFsc3ksIHBhdGguc3RyaWN0LCBzY29wZWQpO1xuICAgIH1cbiAgfSxcblxuICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZycsIHN0cmluZy52YWx1ZSk7XG4gIH0sXG5cbiAgTnVtYmVyTGl0ZXJhbDogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgbnVtYmVyLnZhbHVlKTtcbiAgfSxcblxuICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24oYm9vbCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIGJvb2wudmFsdWUpO1xuICB9LFxuXG4gIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcbiAgfSxcblxuICBOdWxsTGl0ZXJhbDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTtcbiAgfSxcblxuICBIYXNoOiBmdW5jdGlvbihoYXNoKSB7XG4gICAgbGV0IHBhaXJzID0gaGFzaC5wYWlycyxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGwgPSBwYWlycy5sZW5ndGg7XG5cbiAgICB0aGlzLm9wY29kZSgncHVzaEhhc2gnKTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLnB1c2hQYXJhbShwYWlyc1tpXS52YWx1ZSk7XG4gICAgfVxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhc3NpZ25Ub0hhc2gnLCBwYWlyc1tpXS5rZXkpO1xuICAgIH1cbiAgICB0aGlzLm9wY29kZSgncG9wSGFzaCcpO1xuICB9LFxuXG4gIC8vIEhFTFBFUlNcbiAgb3Bjb2RlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdGhpcy5vcGNvZGVzLnB1c2goeyBvcGNvZGU6IG5hbWUsIGFyZ3M6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgbG9jOiB0aGlzLnNvdXJjZU5vZGVbMF0ubG9jIH0pO1xuICB9LFxuXG4gIGFkZERlcHRoOiBmdW5jdGlvbihkZXB0aCkge1xuICAgIGlmICghZGVwdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnVzZURlcHRocyA9IHRydWU7XG4gIH0sXG5cbiAgY2xhc3NpZnlTZXhwcjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICBsZXQgaXNTaW1wbGUgPSBBU1QuaGVscGVycy5zaW1wbGVJZChzZXhwci5wYXRoKTtcblxuICAgIGxldCBpc0Jsb2NrUGFyYW0gPSBpc1NpbXBsZSAmJiAhIXRoaXMuYmxvY2tQYXJhbUluZGV4KHNleHByLnBhdGgucGFydHNbMF0pO1xuXG4gICAgLy8gYSBtdXN0YWNoZSBpcyBhbiBlbGlnaWJsZSBoZWxwZXIgaWY6XG4gICAgLy8gKiBpdHMgaWQgaXMgc2ltcGxlIChhIHNpbmdsZSBwYXJ0LCBub3QgYHRoaXNgIG9yIGAuLmApXG4gICAgbGV0IGlzSGVscGVyID0gIWlzQmxvY2tQYXJhbSAmJiBBU1QuaGVscGVycy5oZWxwZXJFeHByZXNzaW9uKHNleHByKTtcblxuICAgIC8vIGlmIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGJ1dCBub3QgYSBkZWZpbml0ZVxuICAgIC8vIGhlbHBlciwgaXQgaXMgYW1iaWd1b3VzLCBhbmQgd2lsbCBiZSByZXNvbHZlZCBpbiBhIGxhdGVyXG4gICAgLy8gcGFzcyBvciBhdCBydW50aW1lLlxuICAgIGxldCBpc0VsaWdpYmxlID0gIWlzQmxvY2tQYXJhbSAmJiAoaXNIZWxwZXIgfHwgaXNTaW1wbGUpO1xuXG4gICAgLy8gaWYgYW1iaWd1b3VzLCB3ZSBjYW4gcG9zc2libHkgcmVzb2x2ZSB0aGUgYW1iaWd1aXR5IG5vd1xuICAgIC8vIEFuIGVsaWdpYmxlIGhlbHBlciBpcyBvbmUgdGhhdCBkb2VzIG5vdCBoYXZlIGEgY29tcGxleCBwYXRoLCBpLmUuIGB0aGlzLmZvb2AsIGAuLi9mb29gIGV0Yy5cbiAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHtcbiAgICAgIGxldCBuYW1lID0gc2V4cHIucGF0aC5wYXJ0c1swXSxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAob3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcbiAgICAgICAgaXNIZWxwZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmtub3duSGVscGVyc09ubHkpIHtcbiAgICAgICAgaXNFbGlnaWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0hlbHBlcikge1xuICAgICAgcmV0dXJuICdoZWxwZXInO1xuICAgIH0gZWxzZSBpZiAoaXNFbGlnaWJsZSkge1xuICAgICAgcmV0dXJuICdhbWJpZ3VvdXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3NpbXBsZSc7XG4gICAgfVxuICB9LFxuXG4gIHB1c2hQYXJhbXM6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wdXNoUGFyYW0ocGFyYW1zW2ldKTtcbiAgICB9XG4gIH0sXG5cbiAgcHVzaFBhcmFtOiBmdW5jdGlvbih2YWwpIHtcbiAgICBsZXQgdmFsdWUgPSB2YWwudmFsdWUgIT0gbnVsbCA/IHZhbC52YWx1ZSA6IHZhbC5vcmlnaW5hbCB8fCAnJztcblxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UoL14oXFwuP1xcLlxcLykqL2csICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsLmRlcHRoKSB7XG4gICAgICAgIHRoaXMuYWRkRGVwdGgodmFsLmRlcHRoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgdmFsLmRlcHRoIHx8IDApO1xuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hTdHJpbmdQYXJhbScsIHZhbHVlLCB2YWwudHlwZSk7XG5cbiAgICAgIGlmICh2YWwudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICAgIC8vIFN1YkV4cHJlc3Npb25zIGdldCBldmFsdWF0ZWQgYW5kIHBhc3NlZCBpblxuICAgICAgICAvLyBpbiBzdHJpbmcgcGFyYW1zIG1vZGUuXG4gICAgICAgIHRoaXMuYWNjZXB0KHZhbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICAgIGxldCBibG9ja1BhcmFtSW5kZXg7XG4gICAgICAgIGlmICh2YWwucGFydHMgJiYgIUFTVC5oZWxwZXJzLnNjb3BlZElkKHZhbCkgJiYgIXZhbC5kZXB0aCkge1xuICAgICAgICAgICBibG9ja1BhcmFtSW5kZXggPSB0aGlzLmJsb2NrUGFyYW1JbmRleCh2YWwucGFydHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChibG9ja1BhcmFtSW5kZXgpIHtcbiAgICAgICAgICBsZXQgYmxvY2tQYXJhbUNoaWxkID0gdmFsLnBhcnRzLnNsaWNlKDEpLmpvaW4oJy4nKTtcbiAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgJ0Jsb2NrUGFyYW0nLCBibG9ja1BhcmFtSW5kZXgsIGJsb2NrUGFyYW1DaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWwub3JpZ2luYWwgfHwgdmFsdWU7XG4gICAgICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXnRoaXMoPzpcXC58JCkvLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXlxcLlxcLy8sICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFwuJC8sICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgdmFsLnR5cGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hY2NlcHQodmFsKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXM6IGZ1bmN0aW9uKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlLCBvbWl0RW1wdHkpIHtcbiAgICBsZXQgcGFyYW1zID0gc2V4cHIucGFyYW1zO1xuICAgIHRoaXMucHVzaFBhcmFtcyhwYXJhbXMpO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cbiAgICBpZiAoc2V4cHIuaGFzaCkge1xuICAgICAgdGhpcy5hY2NlcHQoc2V4cHIuaGFzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnLCBvbWl0RW1wdHkpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH0sXG5cbiAgYmxvY2tQYXJhbUluZGV4OiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZm9yIChsZXQgZGVwdGggPSAwLCBsZW4gPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMubGVuZ3RoOyBkZXB0aCA8IGxlbjsgZGVwdGgrKykge1xuICAgICAgbGV0IGJsb2NrUGFyYW1zID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zW2RlcHRoXSxcbiAgICAgICAgICBwYXJhbSA9IGJsb2NrUGFyYW1zICYmIGluZGV4T2YoYmxvY2tQYXJhbXMsIG5hbWUpO1xuICAgICAgaWYgKGJsb2NrUGFyYW1zICYmIHBhcmFtID49IDApIHtcbiAgICAgICAgcmV0dXJuIFtkZXB0aCwgcGFyYW1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGVudikge1xuICBpZiAoaW5wdXQgPT0gbnVsbCB8fCAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLnByZWNvbXBpbGUuIFlvdSBwYXNzZWQgJyArIGlucHV0KTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmRhdGEgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRpb25zLmNvbXBhdCkge1xuICAgIG9wdGlvbnMudXNlRGVwdGhzID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxuICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMgPSB7fSwgZW52KSB7XG4gIGlmIChpbnB1dCA9PSBudWxsIHx8ICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICYmIGlucHV0LnR5cGUgIT09ICdQcm9ncmFtJykpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMuY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpO1xuICB9XG5cbiAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcGF0KSB7XG4gICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xuICB9XG5cbiAgbGV0IGNvbXBpbGVkO1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVJbnB1dCgpIHtcbiAgICBsZXQgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSxcbiAgICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpLFxuICAgICAgICB0ZW1wbGF0ZVNwZWMgPSBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGVudi50ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgLy8gVGVtcGxhdGUgaXMgb25seSBjb21waWxlZCBvbiBmaXJzdCB1c2UgYW5kIGNhY2hlZCBhZnRlciB0aGF0IHBvaW50LlxuICBmdW5jdGlvbiByZXQoY29udGV4dCwgZXhlY09wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuY2FsbCh0aGlzLCBjb250ZXh0LCBleGVjT3B0aW9ucyk7XG4gIH1cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uKHNldHVwT3B0aW9ucykge1xuICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlZC5fc2V0dXAoc2V0dXBPcHRpb25zKTtcbiAgfTtcbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuX2NoaWxkKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBhcmdFcXVhbHMoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkoYSkgJiYgaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghYXJnRXF1YWxzKGFbaV0sIGJbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcikge1xuICBpZiAoIXNleHByLnBhdGgucGFydHMpIHtcbiAgICBsZXQgbGl0ZXJhbCA9IHNleHByLnBhdGg7XG4gICAgLy8gQ2FzdGluZyB0byBzdHJpbmcgaGVyZSB0byBtYWtlIGZhbHNlIGFuZCAwIGxpdGVyYWwgdmFsdWVzIHBsYXkgbmljZWx5IHdpdGggdGhlIHJlc3RcbiAgICAvLyBvZiB0aGUgc3lzdGVtLlxuICAgIHNleHByLnBhdGggPSB7XG4gICAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuICAgICAgZGF0YTogZmFsc2UsXG4gICAgICBkZXB0aDogMCxcbiAgICAgIHBhcnRzOiBbbGl0ZXJhbC5vcmlnaW5hbCArICcnXSxcbiAgICAgIG9yaWdpbmFsOiBsaXRlcmFsLm9yaWdpbmFsICsgJycsXG4gICAgICBsb2M6IGxpdGVyYWwubG9jXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV2hpdGVzcGFjZUNvbnRyb2wgZnJvbSAnLi93aGl0ZXNwYWNlLWNvbnRyb2wnO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgeyBwYXJzZXIgfTtcblxubGV0IHl5ID0ge307XG5leHRlbmQoeXksIEhlbHBlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgLy8gSnVzdCByZXR1cm4gaWYgYW4gYWxyZWFkeS1jb21waWxlZCBBU1Qgd2FzIHBhc3NlZCBpbi5cbiAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykgeyByZXR1cm4gaW5wdXQ7IH1cblxuICBwYXJzZXIueXkgPSB5eTtcblxuICAvLyBBbHRlcmluZyB0aGUgc2hhcmVkIG9iamVjdCBoZXJlLCBidXQgdGhpcyBpcyBvayBhcyBwYXJzZXIgaXMgYSBzeW5jIG9wZXJhdGlvblxuICB5eS5sb2NJbmZvID0gZnVuY3Rpb24obG9jSW5mbykge1xuICAgIHJldHVybiBuZXcgeXkuU291cmNlTG9jYXRpb24ob3B0aW9ucyAmJiBvcHRpb25zLnNyY05hbWUsIGxvY0luZm8pO1xuICB9O1xuXG4gIGxldCBzdHJpcCA9IG5ldyBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zKTtcbiAgcmV0dXJuIHN0cmlwLmFjY2VwdChwYXJzZXIucGFyc2UoaW5wdXQpKTtcbn1cbiIsImltcG9ydCAqIGFzIGJhc2UgZnJvbSAnLi9oYW5kbGViYXJzL2Jhc2UnO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuaW1wb3J0IFNhZmVTdHJpbmcgZnJvbSAnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbic7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL2hhbmRsZWJhcnMvdXRpbHMnO1xuaW1wb3J0ICogYXMgcnVudGltZSBmcm9tICcuL2hhbmRsZWJhcnMvcnVudGltZSc7XG5cbmltcG9ydCBub0NvbmZsaWN0IGZyb20gJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCc7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gU2FmZVN0cmluZztcbiAgaGIuRXhjZXB0aW9uID0gRXhjZXB0aW9uO1xuICBoYi5VdGlscyA9IFV0aWxzO1xuICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcblxuICBoYi5WTSA9IHJ1bnRpbWU7XG4gIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24oc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsImltcG9ydCB7IENPTVBJTEVSX1JFVklTSU9OLCBSRVZJU0lPTl9DSEFOR0VTIH0gZnJvbSAnLi4vYmFzZSc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5pbXBvcnQge2lzQXJyYXl9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBDb2RlR2VuIGZyb20gJy4vY29kZS1nZW4nO1xuXG5mdW5jdGlvbiBMaXRlcmFsKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gSmF2YVNjcmlwdENvbXBpbGVyKCkge31cblxuSmF2YVNjcmlwdENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgLy8gUFVCTElDIEFQSTogWW91IGNhbiBvdmVycmlkZSB0aGVzZSBtZXRob2RzIGluIGEgc3ViY2xhc3MgdG8gcHJvdmlkZVxuICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3NcbiAgbmFtZUxvb2t1cDogZnVuY3Rpb24ocGFyZW50LCBuYW1lLyogLCB0eXBlKi8pIHtcbiAgICBpZiAobmFtZSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmV0dXJuIFsnKCcsIHBhcmVudCwgJy5wcm9wZXJ0eUlzRW51bWVyYWJsZShcXCdjb25zdHJ1Y3RvclxcJykgPyAnLCBwYXJlbnQsICcuY29uc3RydWN0b3IgOiB1bmRlZmluZWQnLCAnKSddO1xuICAgIH1cbiAgICBpZiAoSmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lKG5hbWUpKSB7XG4gICAgICByZXR1cm4gW3BhcmVudCwgJy4nLCBuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwYXJlbnQsICdbJywgSlNPTi5zdHJpbmdpZnkobmFtZSksICddJ107XG4gICAgfVxuICB9LFxuICBkZXB0aGVkTG9va3VwOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxvb2t1cCcpLCAnKGRlcHRocywgXCInLCBuYW1lLCAnXCIpJ107XG4gIH0sXG5cbiAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCByZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OLFxuICAgICAgICAgIHZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tyZXZpc2lvbl07XG4gICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdO1xuICB9LFxuXG4gIGFwcGVuZFRvQnVmZmVyOiBmdW5jdGlvbihzb3VyY2UsIGxvY2F0aW9uLCBleHBsaWNpdCkge1xuICAgIC8vIEZvcmNlIGEgc291cmNlIGFzIHRoaXMgc2ltcGxpZmllcyB0aGUgbWVyZ2UgbG9naWMuXG4gICAgaWYgKCFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHNvdXJjZSA9IFtzb3VyY2VdO1xuICAgIH1cbiAgICBzb3VyY2UgPSB0aGlzLnNvdXJjZS53cmFwKHNvdXJjZSwgbG9jYXRpb24pO1xuXG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUpIHtcbiAgICAgIHJldHVybiBbJ3JldHVybiAnLCBzb3VyY2UsICc7J107XG4gICAgfSBlbHNlIGlmIChleHBsaWNpdCkge1xuICAgICAgLy8gVGhpcyBpcyBhIGNhc2Ugd2hlcmUgdGhlIGJ1ZmZlciBvcGVyYXRpb24gb2NjdXJzIGFzIGEgY2hpbGQgb2YgYW5vdGhlclxuICAgICAgLy8gY29uc3RydWN0LCBnZW5lcmFsbHkgYnJhY2VzLiBXZSBoYXZlIHRvIGV4cGxpY2l0bHkgb3V0cHV0IHRoZXNlIGJ1ZmZlclxuICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG4gICAgICByZXR1cm4gWydidWZmZXIgKz0gJywgc291cmNlLCAnOyddO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZUJ1ZmZlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTtcbiAgfSxcbiAgLy8gRU5EIFBVQkxJQyBBUElcblxuICBjb21waWxlOiBmdW5jdGlvbihlbnZpcm9ubWVudCwgb3B0aW9ucywgY29udGV4dCwgYXNPYmplY3QpIHtcbiAgICB0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0cmluZ1BhcmFtcyA9IHRoaXMub3B0aW9ucy5zdHJpbmdQYXJhbXM7XG4gICAgdGhpcy50cmFja0lkcyA9IHRoaXMub3B0aW9ucy50cmFja0lkcztcbiAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7XG5cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmVudmlyb25tZW50Lm5hbWU7XG4gICAgdGhpcy5pc0NoaWxkID0gISFjb250ZXh0O1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwge1xuICAgICAgZGVjb3JhdG9yczogW10sXG4gICAgICBwcm9ncmFtczogW10sXG4gICAgICBlbnZpcm9ubWVudHM6IFtdXG4gICAgfTtcblxuICAgIHRoaXMucHJlYW1ibGUoKTtcblxuICAgIHRoaXMuc3RhY2tTbG90ID0gMDtcbiAgICB0aGlzLnN0YWNrVmFycyA9IFtdO1xuICAgIHRoaXMuYWxpYXNlcyA9IHt9O1xuICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9O1xuICAgIHRoaXMuaGFzaGVzID0gW107XG4gICAgdGhpcy5jb21waWxlU3RhY2sgPSBbXTtcbiAgICB0aGlzLmlubGluZVN0YWNrID0gW107XG4gICAgdGhpcy5ibG9ja1BhcmFtcyA9IFtdO1xuXG4gICAgdGhpcy5jb21waWxlQ2hpbGRyZW4oZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBlbnZpcm9ubWVudC51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVjb3JhdG9ycyB8fCB0aGlzLm9wdGlvbnMuY29tcGF0O1xuICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGVudmlyb25tZW50LnVzZUJsb2NrUGFyYW1zO1xuXG4gICAgbGV0IG9wY29kZXMgPSBlbnZpcm9ubWVudC5vcGNvZGVzLFxuICAgICAgICBvcGNvZGUsXG4gICAgICAgIGZpcnN0TG9jLFxuICAgICAgICBpLFxuICAgICAgICBsO1xuXG4gICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBvcGNvZGUgPSBvcGNvZGVzW2ldO1xuXG4gICAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBvcGNvZGUubG9jO1xuICAgICAgZmlyc3RMb2MgPSBmaXJzdExvYyB8fCBvcGNvZGUubG9jO1xuICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggYW55IHRyYWlsaW5nIGNvbnRlbnQgdGhhdCBtaWdodCBiZSBwZW5kaW5nLlxuICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IGZpcnN0TG9jO1xuICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLnN0YWNrU2xvdCB8fCB0aGlzLmlubGluZVN0YWNrLmxlbmd0aCB8fCB0aGlzLmNvbXBpbGVTdGFjay5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRlY29yYXRvcnMuaXNFbXB0eSgpKSB7XG4gICAgICB0aGlzLnVzZURlY29yYXRvcnMgPSB0cnVlO1xuXG4gICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZCgndmFyIGRlY29yYXRvcnMgPSBjb250YWluZXIuZGVjb3JhdG9ycztcXG4nKTtcbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCdyZXR1cm4gZm47Jyk7XG5cbiAgICAgIGlmIChhc09iamVjdCkge1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSBGdW5jdGlvbi5hcHBseSh0aGlzLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsICdkZXB0aDAnLCAnZGF0YScsICdibG9ja1BhcmFtcycsICdkZXB0aHMnLCB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoJ2Z1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aDAsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcXG4nKTtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ31cXG4nKTtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XG4gICAgaWYgKCF0aGlzLmlzQ2hpbGQpIHtcbiAgICAgIGxldCByZXQgPSB7XG4gICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxuICAgICAgICBtYWluOiBmblxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuZGVjb3JhdG9ycykge1xuICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB7cHJvZ3JhbXMsIGRlY29yYXRvcnN9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAocHJvZ3JhbXNbaV0pIHtcbiAgICAgICAgICByZXRbaV0gPSBwcm9ncmFtc1tpXTtcbiAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xuICAgICAgICAgICAgcmV0W2kgKyAnX2QnXSA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LnVzZVBhcnRpYWwpIHtcbiAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhc09iamVjdCkge1xuICAgICAgICByZXQuY29tcGlsZXIgPSBKU09OLnN0cmluZ2lmeShyZXQuY29tcGlsZXIpO1xuXG4gICAgICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IHtzdGFydDoge2xpbmU6IDEsIGNvbHVtbjogMH19O1xuICAgICAgICByZXQgPSB0aGlzLm9iamVjdExpdGVyYWwocmV0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zcmNOYW1lKSB7XG4gICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nV2l0aFNvdXJjZU1hcCh7ZmlsZTogb3B0aW9ucy5kZXN0TmFtZX0pO1xuICAgICAgICAgIHJldC5tYXAgPSByZXQubWFwICYmIHJldC5tYXAudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmNvbXBpbGVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfSxcblxuICBwcmVhbWJsZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gdHJhY2sgdGhlIGxhc3QgY29udGV4dCBwdXNoZWQgaW50byBwbGFjZSB0byBhbGxvdyBza2lwcGluZyB0aGVcbiAgICAvLyBnZXRDb250ZXh0IG9wY29kZSB3aGVuIGl0IHdvdWxkIGJlIGEgbm9vcFxuICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xuICAgIHRoaXMuc291cmNlID0gbmV3IENvZGVHZW4odGhpcy5vcHRpb25zLnNyY05hbWUpO1xuICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBDb2RlR2VuKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcbiAgfSxcblxuICBjcmVhdGVGdW5jdGlvbkNvbnRleHQ6IGZ1bmN0aW9uKGFzT2JqZWN0KSB7XG4gICAgbGV0IHZhckRlY2xhcmF0aW9ucyA9ICcnO1xuXG4gICAgbGV0IGxvY2FscyA9IHRoaXMuc3RhY2tWYXJzLmNvbmNhdCh0aGlzLnJlZ2lzdGVycy5saXN0KTtcbiAgICBpZiAobG9jYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbWluaW1pemVyIGFsaWFzIG1hcHBpbmdzXG4gICAgLy9cbiAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXG4gICAgLy8gYXMgdGhlIHNvdXJjZSBub2RlcyBhcmUgcmV1c2VkIGluIHNpdHUuIEZvciB0aGUgbm9uLXNvdXJjZSBub2RlIGNvbXBpbGF0aW9uIG1vZGUsXG4gICAgLy8gYWxpYXNlcyB3aWxsIG5vdCBiZSB1c2VkLCBidXQgdGhpcyBjYXNlIGlzIGFscmVhZHkgYmVpbmcgcnVuIG9uIHRoZSBjbGllbnQgYW5kXG4gICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cbiAgICBsZXQgYWxpYXNDb3VudCA9IDA7XG4gICAgZm9yIChsZXQgYWxpYXMgaW4gdGhpcy5hbGlhc2VzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICBsZXQgbm9kZSA9IHRoaXMuYWxpYXNlc1thbGlhc107XG5cbiAgICAgIGlmICh0aGlzLmFsaWFzZXMuaGFzT3duUHJvcGVydHkoYWxpYXMpICYmIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5yZWZlcmVuY2VDb3VudCA+IDEpIHtcbiAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICgrK2FsaWFzQ291bnQpICsgJz0nICsgYWxpYXM7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5bMF0gPSAnYWxpYXMnICsgYWxpYXNDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gWydjb250YWluZXInLCAnZGVwdGgwJywgJ2hlbHBlcnMnLCAncGFydGlhbHMnLCAnZGF0YSddO1xuXG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKCdkZXB0aHMnKTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZVxuICAgIGxldCBzb3VyY2UgPSB0aGlzLm1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucyk7XG5cbiAgICBpZiAoYXNPYmplY3QpIHtcbiAgICAgIHBhcmFtcy5wdXNoKHNvdXJjZSk7XG5cbiAgICAgIHJldHVybiBGdW5jdGlvbi5hcHBseSh0aGlzLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2Uud3JhcChbJ2Z1bmN0aW9uKCcsIHBhcmFtcy5qb2luKCcsJyksICcpIHtcXG4gICcsIHNvdXJjZSwgJ30nXSk7XG4gICAgfVxuICB9LFxuICBtZXJnZVNvdXJjZTogZnVuY3Rpb24odmFyRGVjbGFyYXRpb25zKSB7XG4gICAgbGV0IGlzU2ltcGxlID0gdGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSxcbiAgICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxuICAgICAgICBhcHBlbmRGaXJzdCxcblxuICAgICAgICBzb3VyY2VTZWVuLFxuICAgICAgICBidWZmZXJTdGFydCxcbiAgICAgICAgYnVmZmVyRW5kO1xuICAgIHRoaXMuc291cmNlLmVhY2goKGxpbmUpID0+IHtcbiAgICAgIGlmIChsaW5lLmFwcGVuZFRvQnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJFbmQgPSBsaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG4gICAgICAgICAgaWYgKCFzb3VyY2VTZWVuKSB7XG4gICAgICAgICAgICBhcHBlbmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ2J1ZmZlciArPSAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyRW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc291cmNlU2VlbiA9IHRydWU7XG4gICAgICAgIGlmICghaXNTaW1wbGUpIHtcbiAgICAgICAgICBhcHBlbmRPbmx5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgaWYgKGFwcGVuZE9ubHkpIHtcbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIFwiXCI7Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBidWZmZXIgPSAnICsgKGFwcGVuZEZpcnN0ID8gJycgOiB0aGlzLmluaXRpYWxpemVCdWZmZXIoKSk7XG5cbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gYnVmZmVyICsgJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBidWZmZXI7Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhckRlY2xhcmF0aW9ucykge1xuICAgICAgdGhpcy5zb3VyY2UucHJlcGVuZCgndmFyICcgKyB2YXJEZWNsYXJhdGlvbnMuc3Vic3RyaW5nKDIpICsgKGFwcGVuZEZpcnN0ID8gJycgOiAnO1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcbiAgfSxcblxuICAvLyBbYmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXR1cm4gdmFsdWUgb2YgYmxvY2tIZWxwZXJNaXNzaW5nXG4gIC8vXG4gIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxuICAvLyBge3sjdGhpcy5mb299fS4uLnt7L3RoaXMuZm9vfX1gLCByZXNvbHZlIHRoZSB2YWx1ZSBvZiBgZm9vYCwgYW5kXG4gIC8vIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIHdpdGggdGhlIHJlc3VsdCBvZiBwcm9wZXJseVxuICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXG4gIGJsb2NrVmFsdWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBsZXQgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nJyksXG4gICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcbiAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xuXG4gICAgbGV0IGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGJsb2NrTmFtZSk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbYW1iaWd1b3VzQmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gQ29tcGlsZXIgdmFsdWUsIGJlZm9yZTogbGFzdEhlbHBlcj12YWx1ZSBvZiBsYXN0IGZvdW5kIGhlbHBlciwgaWYgYW55XG4gIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cbiAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBsYXN0SGVscGVyOiB2YWx1ZVxuICBhbWJpZ3VvdXNCbG9ja1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBXZSdyZSBiZWluZyBhIGJpdCBjaGVla3kgYW5kIHJldXNpbmcgdGhlIG9wdGlvbnMgdmFsdWUgZnJvbSB0aGUgcHJpb3IgZXhlY1xuICAgIGxldCBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcbiAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKCcnLCAwLCBwYXJhbXMsIHRydWUpO1xuXG4gICAgdGhpcy5mbHVzaElubGluZSgpO1xuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblxuICAgIHRoaXMucHVzaFNvdXJjZShbXG4gICAgICAgICdpZiAoIScsIHRoaXMubGFzdEhlbHBlciwgJykgeyAnLFxuICAgICAgICAgIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksXG4gICAgICAgICd9J10pO1xuICB9LFxuXG4gIC8vIFthcHBlbmRDb250ZW50XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcbiAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24oY29udGVudCkge1xuICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5wZW5kaW5nQ29udGVudCArIGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGVuZGluZ0xvY2F0aW9uID0gdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSBjb250ZW50O1xuICB9LFxuXG4gIC8vIFthcHBlbmRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQ29lcmNlcyBgdmFsdWVgIHRvIGEgU3RyaW5nIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSBjdXJyZW50IGJ1ZmZlci5cbiAgLy9cbiAgLy8gSWYgYHZhbHVlYCBpcyB0cnV0aHksIG9yIDAsIGl0IGlzIGNvZXJjZWQgaW50byBhIHN0cmluZyBhbmQgYXBwZW5kZWRcbiAgLy8gT3RoZXJ3aXNlLCB0aGUgZW1wdHkgc3RyaW5nIGlzIGFwcGVuZGVkXG4gIGFwcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNJbmxpbmUoKSkge1xuICAgICAgdGhpcy5yZXBsYWNlU3RhY2soKGN1cnJlbnQpID0+IFsnICE9IG51bGwgPyAnLCBjdXJyZW50LCAnIDogXCJcIiddKTtcblxuICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBsb2NhbCA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG4gICAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2Vsc2UgeyAnLCB0aGlzLmFwcGVuZFRvQnVmZmVyKFwiJydcIiwgdW5kZWZpbmVkLCB0cnVlKSwgJyB9J10pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyBbYXBwZW5kRXNjYXBlZF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBFc2NhcGUgYHZhbHVlYCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBidWZmZXJcbiAgYXBwZW5kRXNjYXBlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIoXG4gICAgICAgIFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24nKSwgJygnLCB0aGlzLnBvcFN0YWNrKCksICcpJ10pKTtcbiAgfSxcblxuICAvLyBbZ2V0Q29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcbiAgLy9cbiAgLy8gU2V0IHRoZSB2YWx1ZSBvZiB0aGUgYGxhc3RDb250ZXh0YCBjb21waWxlciB2YWx1ZSB0byB0aGUgZGVwdGhcbiAgZ2V0Q29udGV4dDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XG4gIH0sXG5cbiAgLy8gW3B1c2hDb250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cbiAgcHVzaENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLmNvbnRleHROYW1lKHRoaXMubGFzdENvbnRleHQpKTtcbiAgfSxcblxuICAvLyBbbG9va3VwT25Db250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgbmFtZWAgb24gdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBPbkNvbnRleHQ6IGZ1bmN0aW9uKHBhcnRzLCBmYWxzeSwgc3RyaWN0LCBzY29wZWQpIHtcbiAgICBsZXQgaSA9IDA7XG5cbiAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XG4gICAgICAvLyBUaGUgZGVwdGhlZCBxdWVyeSBpcyBleHBlY3RlZCB0byBoYW5kbGUgdGhlIHVuZGVmaW5lZCBsb2dpYyBmb3IgdGhlIHJvb3QgbGV2ZWwgdGhhdFxuICAgICAgLy8gaXMgaW1wbGVtZW50ZWQgYmVsb3csIHNvIHdlIGV2YWx1YXRlIHRoYXQgZGlyZWN0bHkgaW4gY29tcGF0IG1vZGVcbiAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcbiAgfSxcblxuICAvLyBbbG9va3VwQmxvY2tQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogYmxvY2tQYXJhbVtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBCbG9ja1BhcmFtOiBmdW5jdGlvbihibG9ja1BhcmFtSWQsIHBhcnRzKSB7XG4gICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cbiAgICB0aGlzLnB1c2goWydibG9ja1BhcmFtc1snLCBibG9ja1BhcmFtSWRbMF0sICddWycsIGJsb2NrUGFyYW1JZFsxXSwgJ10nXSk7XG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcbiAgfSxcblxuICAvLyBbbG9va3VwRGF0YV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogZGF0YSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXG4gIGxvb2t1cERhdGE6IGZ1bmN0aW9uKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdkYXRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnY29udGFpbmVyLmRhdGEoZGF0YSwgJyArIGRlcHRoICsgJyknKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdkYXRhJywgcGFydHMsIDAsIHRydWUsIHN0cmljdCk7XG4gIH0sXG5cbiAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcbiAgICAgIHRoaXMucHVzaChzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCB0eXBlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKChjdXJyZW50KSA9PiB7XG4gICAgICAgIGxldCBsb29rdXAgPSB0aGlzLm5hbWVMb29rdXAoY3VycmVudCwgcGFydHNbaV0sIHR5cGUpO1xuICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxuICAgICAgICAvLyBuZWVkcyB0byBoYXZlIHRoZSBzcGVjaWFsIGhhbmRsaW5nIGZvciB0aGVzZSB2YWx1ZXMuXG4gICAgICAgIGlmICghZmFsc3kpIHtcbiAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gdXNlIGdlbmVyaWMgZmFsc3kgaGFuZGxpbmdcbiAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgIH1cbiAgfSxcblxuICAvLyBbcmVzb2x2ZVBvc3NpYmxlTGFtYmRhXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzb2x2ZWQgdmFsdWUsIC4uLlxuICAvL1xuICAvLyBJZiB0aGUgYHZhbHVlYCBpcyBhIGxhbWJkYSwgcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgYnlcbiAgLy8gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFtYmRhXG4gIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoKFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxhbWJkYScpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJywgJywgdGhpcy5jb250ZXh0TmFtZSgwKSwgJyknXSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFRoaXMgb3Bjb2RlIGlzIGRlc2lnbmVkIGZvciB1c2UgaW4gc3RyaW5nIG1vZGUsIHdoaWNoXG4gIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcbiAgLy8gZGVwdGggcmF0aGVyIHRoYW4gcmVzb2x2aW5nIGl0IGltbWVkaWF0ZWx5LlxuICBwdXNoU3RyaW5nUGFyYW06IGZ1bmN0aW9uKHN0cmluZywgdHlwZSkge1xuICAgIHRoaXMucHVzaENvbnRleHQoKTtcbiAgICB0aGlzLnB1c2hTdHJpbmcodHlwZSk7XG5cbiAgICAvLyBJZiBpdCdzIGEgc3ViZXhwcmVzc2lvbiwgdGhlIHN0cmluZyByZXN1bHRcbiAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cbiAgICBpZiAodHlwZSAhPT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZW1wdHlIYXNoOiBmdW5jdGlvbihvbWl0RW1wdHkpIHtcbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoSWRzXG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoQ29udGV4dHNcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaFR5cGVzXG4gICAgfVxuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChvbWl0RW1wdHkgPyAndW5kZWZpbmVkJyA6ICd7fScpO1xuICB9LFxuICBwdXNoSGFzaDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaGFzaCkge1xuICAgICAgdGhpcy5oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xuICAgIH1cbiAgICB0aGlzLmhhc2ggPSB7dmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW119O1xuICB9LFxuICBwb3BIYXNoOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICB0aGlzLmhhc2ggPSB0aGlzLmhhc2hlcy5wb3AoKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudmFsdWVzKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmddXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHF1b3RlZFN0cmluZyhzdHJpbmcpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHF1b3RlZCB2ZXJzaW9uIG9mIGBzdHJpbmdgIG9udG8gdGhlIHN0YWNrXG4gIHB1c2hTdHJpbmc6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnF1b3RlZFN0cmluZyhzdHJpbmcpKTtcbiAgfSxcblxuICAvLyBbcHVzaExpdGVyYWxdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cbiAgLy9cbiAgLy8gUHVzaGVzIGEgdmFsdWUgb250byB0aGUgc3RhY2suIFRoaXMgb3BlcmF0aW9uIHByZXZlbnRzXG4gIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcbiAgLy8gaXQuXG4gIHB1c2hMaXRlcmFsOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hQcm9ncmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBwcm9ncmFtKGd1aWQpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xuICAvLyBhIGNvbXBpbGUtdGltZSBndWlkIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgcnVudGltZS1hY2Nlc3NpYmxlXG4gIC8vIGV4cHJlc3Npb24uXG4gIHB1c2hQcm9ncmFtOiBmdW5jdGlvbihndWlkKSB7XG4gICAgaWYgKGd1aWQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwobnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGRlY29yYXRvcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGRlY29yYXRvcixcbiAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSk7XG5cbiAgICB0aGlzLmRlY29yYXRvcnMucHVzaChbXG4gICAgICAnZm4gPSAnLFxuICAgICAgdGhpcy5kZWNvcmF0b3JzLmZ1bmN0aW9uQ2FsbChmb3VuZERlY29yYXRvciwgJycsIFsnZm4nLCAncHJvcHMnLCAnY29udGFpbmVyJywgb3B0aW9uc10pLFxuICAgICAgJyB8fCBmbjsnXG4gICAgXSk7XG4gIH0sXG5cbiAgLy8gW2ludm9rZUhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGhlbHBlcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGhlbHBlcixcbiAgLy8gYW5kIHB1c2hlcyB0aGUgaGVscGVyJ3MgcmV0dXJuIHZhbHVlIG9udG8gdGhlIHN0YWNrLlxuICAvL1xuICAvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCBmb3VuZCwgYGhlbHBlck1pc3NpbmdgIGlzIGNhbGxlZC5cbiAgaW52b2tlSGVscGVyOiBmdW5jdGlvbihwYXJhbVNpemUsIG5hbWUsIGlzU2ltcGxlKSB7XG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpLFxuICAgICAgICBzaW1wbGUgPSBpc1NpbXBsZSA/IFtoZWxwZXIubmFtZSwgJyB8fCAnXSA6ICcnO1xuXG4gICAgbGV0IGxvb2t1cCA9IFsnKCddLmNvbmNhdChzaW1wbGUsIG5vbkhlbHBlcik7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICBsb29rdXAucHVzaCgnIHx8ICcsIHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmhlbHBlck1pc3NpbmcnKSk7XG4gICAgfVxuICAgIGxvb2t1cC5wdXNoKCcpJyk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGxvb2t1cCwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VLbm93bkhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXG4gIC8vIHNvIGEgYGhlbHBlck1pc3NpbmdgIGZhbGxiYWNrIGlzIG5vdCByZXF1aXJlZC5cbiAgaW52b2tlS25vd25IZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChoZWxwZXIubmFtZSwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VBbWJpZ3VvdXNdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGRpc2FtYmlndWF0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiBhbiBleHByZXNzaW9uIGxpa2UgYHt7Zm9vfX1gXG4gIC8vIGlzIHByb3ZpZGVkLCBidXQgd2UgZG9uJ3Qga25vdyBhdCBjb21waWxlLXRpbWUgd2hldGhlciBpdFxuICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGVtaXRzIG1vcmUgY29kZSB0aGFuIHRoZSBvdGhlciBvcHRpb25zLFxuICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXG4gIC8vIGBrbm93bkhlbHBlcnNPbmx5YCBmbGFncyBhdCBjb21waWxlLXRpbWUuXG4gIGludm9rZUFtYmlndW91czogZnVuY3Rpb24obmFtZSwgaGVscGVyQ2FsbCkge1xuICAgIHRoaXMudXNlUmVnaXN0ZXIoJ2hlbHBlcicpO1xuXG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIHRoaXMuZW1wdHlIYXNoKCk7XG4gICAgbGV0IGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIoMCwgbmFtZSwgaGVscGVyQ2FsbCk7XG5cbiAgICBsZXQgaGVscGVyTmFtZSA9IHRoaXMubGFzdEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKTtcblxuICAgIGxldCBsb29rdXAgPSBbJygnLCAnKGhlbHBlciA9ICcsIGhlbHBlck5hbWUsICcgfHwgJywgbm9uSGVscGVyLCAnKSddO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xuICAgICAgbG9va3VwWzBdID0gJyhoZWxwZXIgPSAnO1xuICAgICAgbG9va3VwLnB1c2goXG4gICAgICAgICcgIT0gbnVsbCA/IGhlbHBlciA6ICcsXG4gICAgICAgIHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmhlbHBlck1pc3NpbmcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2goW1xuICAgICAgICAnKCcsIGxvb2t1cCxcbiAgICAgICAgKGhlbHBlci5wYXJhbXNJbml0ID8gWycpLCgnLCBoZWxwZXIucGFyYW1zSW5pdF0gOiBbXSksICcpLCcsXG4gICAgICAgICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJyxcbiAgICAgICAgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtpbnZva2VQYXJ0aWFsXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cbiAgLy8gT24gc3RhY2sgYWZ0ZXI6IHJlc3VsdCBvZiBwYXJ0aWFsIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcbiAgLy8gYW5kIHB1c2hlcyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZvY2F0aW9uIGJhY2suXG4gIGludm9rZVBhcnRpYWw6IGZ1bmN0aW9uKGlzRHluYW1pYywgbmFtZSwgaW5kZW50KSB7XG4gICAgbGV0IHBhcmFtcyA9IFtdLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xuXG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgbmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGluZGVudCkge1xuICAgICAgb3B0aW9ucy5pbmRlbnQgPSBKU09OLnN0cmluZ2lmeShpbmRlbnQpO1xuICAgIH1cbiAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XG4gICAgb3B0aW9ucy5wYXJ0aWFscyA9ICdwYXJ0aWFscyc7XG4gICAgb3B0aW9ucy5kZWNvcmF0b3JzID0gJ2NvbnRhaW5lci5kZWNvcmF0b3JzJztcblxuICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy51bnNoaWZ0KG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG4gICAgICBvcHRpb25zLmRlcHRocyA9ICdkZXB0aHMnO1xuICAgIH1cbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnY29udGFpbmVyLmludm9rZVBhcnRpYWwnLCAnJywgcGFyYW1zKSk7XG4gIH0sXG5cbiAgLy8gW2Fzc2lnblRvSGFzaF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLiwgaGFzaCwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uLCBoYXNoLCAuLi5cbiAgLy9cbiAgLy8gUG9wcyBhIHZhbHVlIG9mZiB0aGUgc3RhY2sgYW5kIGFzc2lnbnMgaXQgdG8gdGhlIGN1cnJlbnQgaGFzaFxuICBhc3NpZ25Ub0hhc2g6IGZ1bmN0aW9uKGtleSkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaWQ7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgaWQgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdHlwZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGhhc2ggPSB0aGlzLmhhc2g7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XG4gICAgfVxuICAgIGlmICh0eXBlKSB7XG4gICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xuICAgIH1cbiAgICBpZiAoaWQpIHtcbiAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcbiAgICB9XG4gICAgaGFzaC52YWx1ZXNba2V5XSA9IHZhbHVlO1xuICB9LFxuXG4gIHB1c2hJZDogZnVuY3Rpb24odHlwZSwgbmFtZSwgY2hpbGQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ0Jsb2NrUGFyYW0nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoXG4gICAgICAgICAgJ2Jsb2NrUGFyYW1zWycgKyBuYW1lWzBdICsgJ10ucGF0aFsnICsgbmFtZVsxXSArICddJ1xuICAgICAgICAgICsgKGNoaWxkID8gJyArICcgKyBKU09OLnN0cmluZ2lmeSgnLicgKyBjaGlsZCkgOiAnJykpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdudWxsJyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhFTFBFUlNcblxuICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxuXG4gIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24oZW52aXJvbm1lbnQsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbnZpcm9ubWVudC5jaGlsZHJlbiwgY2hpbGQsIGNvbXBpbGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXG4gICAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcblxuICAgICAgaWYgKGV4aXN0aW5nID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zLnB1c2goJycpOyAvLyBQbGFjZWhvbGRlciB0byBwcmV2ZW50IG5hbWUgY29uZmxpY3RzIGZvciBuZXN0ZWQgY2hpbGRyZW5cbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb250ZXh0LnByb2dyYW1zLmxlbmd0aDtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBpbmRleDtcbiAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuICAgICAgICB0aGlzLmNvbnRleHQucHJvZ3JhbXNbaW5kZXhdID0gY29tcGlsZXIuY29tcGlsZShjaGlsZCwgb3B0aW9ucywgdGhpcy5jb250ZXh0LCAhdGhpcy5wcmVjb21waWxlKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LmRlY29yYXRvcnNbaW5kZXhdID0gY29tcGlsZXIuZGVjb3JhdG9ycztcbiAgICAgICAgdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpbmRleF0gPSBjaGlsZDtcblxuICAgICAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGNvbXBpbGVyLnVzZURlcHRocztcbiAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgY29tcGlsZXIudXNlQmxvY2tQYXJhbXM7XG4gICAgICAgIGNoaWxkLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzO1xuICAgICAgICBjaGlsZC51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZC5pbmRleCA9IGV4aXN0aW5nLmluZGV4O1xuICAgICAgICBjaGlsZC5uYW1lID0gJ3Byb2dyYW0nICsgZXhpc3RpbmcuaW5kZXg7XG5cbiAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBleGlzdGluZy51c2VEZXB0aHM7XG4gICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGV4aXN0aW5nLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWF0Y2hFeGlzdGluZ1Byb2dyYW06IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBlbnZpcm9ubWVudCA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaV07XG4gICAgICBpZiAoZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnQuZXF1YWxzKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gZW52aXJvbm1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHByb2dyYW1FeHByZXNzaW9uOiBmdW5jdGlvbihndWlkKSB7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5lbnZpcm9ubWVudC5jaGlsZHJlbltndWlkXSxcbiAgICAgICAgcHJvZ3JhbVBhcmFtcyA9IFtjaGlsZC5pbmRleCwgJ2RhdGEnLCBjaGlsZC5ibG9ja1BhcmFtc107XG5cbiAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcyB8fCB0aGlzLnVzZURlcHRocykge1xuICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdjb250YWluZXIucHJvZ3JhbSgnICsgcHJvZ3JhbVBhcmFtcy5qb2luKCcsICcpICsgJyknO1xuICB9LFxuXG4gIHVzZVJlZ2lzdGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKCF0aGlzLnJlZ2lzdGVyc1tuYW1lXSkge1xuICAgICAgdGhpcy5yZWdpc3RlcnNbbmFtZV0gPSB0cnVlO1xuICAgICAgdGhpcy5yZWdpc3RlcnMubGlzdC5wdXNoKG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICBwdXNoOiBmdW5jdGlvbihleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIExpdGVyYWwpKSB7XG4gICAgICBleHByID0gdGhpcy5zb3VyY2Uud3JhcChleHByKTtcbiAgICB9XG5cbiAgICB0aGlzLmlubGluZVN0YWNrLnB1c2goZXhwcik7XG4gICAgcmV0dXJuIGV4cHI7XG4gIH0sXG5cbiAgcHVzaFN0YWNrTGl0ZXJhbDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMucHVzaChuZXcgTGl0ZXJhbChpdGVtKSk7XG4gIH0sXG5cbiAgcHVzaFNvdXJjZTogZnVuY3Rpb24oc291cmNlKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIHRoaXMuc291cmNlLnB1c2goXG4gICAgICAgICAgdGhpcy5hcHBlbmRUb0J1ZmZlcih0aGlzLnNvdXJjZS5xdW90ZWRTdHJpbmcodGhpcy5wZW5kaW5nQ29udGVudCksIHRoaXMucGVuZGluZ0xvY2F0aW9uKSk7XG4gICAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIHRoaXMuc291cmNlLnB1c2goc291cmNlKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVwbGFjZVN0YWNrOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGxldCBwcmVmaXggPSBbJygnXSxcbiAgICAgICAgc3RhY2ssXG4gICAgICAgIGNyZWF0ZWRTdGFjayxcbiAgICAgICAgdXNlZExpdGVyYWw7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICghdGhpcy5pc0lubGluZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdyZXBsYWNlU3RhY2sgb24gbm9uLWlubGluZScpO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gbWVyZ2UgdGhlIGlubGluZSBzdGF0ZW1lbnQgaW50byB0aGUgcmVwbGFjZW1lbnQgc3RhdGVtZW50IHZpYSAnLCdcbiAgICBsZXQgdG9wID0gdGhpcy5wb3BTdGFjayh0cnVlKTtcblxuICAgIGlmICh0b3AgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAvLyBMaXRlcmFscyBkbyBub3QgbmVlZCB0byBiZSBpbmxpbmVkXG4gICAgICBzdGFjayA9IFt0b3AudmFsdWVdO1xuICAgICAgcHJlZml4ID0gWycoJywgc3RhY2tdO1xuICAgICAgdXNlZExpdGVyYWwgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBHZXQgb3IgY3JlYXRlIHRoZSBjdXJyZW50IHN0YWNrIG5hbWUgZm9yIHVzZSBieSB0aGUgaW5saW5lXG4gICAgICBjcmVhdGVkU3RhY2sgPSB0cnVlO1xuICAgICAgbGV0IG5hbWUgPSB0aGlzLmluY3JTdGFjaygpO1xuXG4gICAgICBwcmVmaXggPSBbJygoJywgdGhpcy5wdXNoKG5hbWUpLCAnID0gJywgdG9wLCAnKSddO1xuICAgICAgc3RhY2sgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGl0ZW0gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0YWNrKTtcblxuICAgIGlmICghdXNlZExpdGVyYWwpIHtcbiAgICAgIHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG4gICAgaWYgKGNyZWF0ZWRTdGFjaykge1xuICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcbiAgICB9XG4gICAgdGhpcy5wdXNoKHByZWZpeC5jb25jYXQoaXRlbSwgJyknKSk7XG4gIH0sXG5cbiAgaW5jclN0YWNrOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0YWNrU2xvdCsrO1xuICAgIGlmICh0aGlzLnN0YWNrU2xvdCA+IHRoaXMuc3RhY2tWYXJzLmxlbmd0aCkgeyB0aGlzLnN0YWNrVmFycy5wdXNoKCdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdCk7IH1cbiAgICByZXR1cm4gdGhpcy50b3BTdGFja05hbWUoKTtcbiAgfSxcbiAgdG9wU3RhY2tOYW1lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90O1xuICB9LFxuICBmbHVzaElubGluZTogZnVuY3Rpb24oKSB7XG4gICAgbGV0IGlubGluZVN0YWNrID0gdGhpcy5pbmxpbmVTdGFjaztcbiAgICB0aGlzLmlubGluZVN0YWNrID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGlubGluZVN0YWNrLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgZW50cnkgPSBpbmxpbmVTdGFja1tpXTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKGVudHJ5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzdGFjayA9IHRoaXMuaW5jclN0YWNrKCk7XG4gICAgICAgIHRoaXMucHVzaFNvdXJjZShbc3RhY2ssICcgPSAnLCBlbnRyeSwgJzsnXSk7XG4gICAgICAgIHRoaXMuY29tcGlsZVN0YWNrLnB1c2goc3RhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNJbmxpbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlubGluZVN0YWNrLmxlbmd0aDtcbiAgfSxcblxuICBwb3BTdGFjazogZnVuY3Rpb24od3JhcHBlZCkge1xuICAgIGxldCBpbmxpbmUgPSB0aGlzLmlzSW5saW5lKCksXG4gICAgICAgIGl0ZW0gPSAoaW5saW5lID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrKS5wb3AoKTtcblxuICAgIGlmICghd3JhcHBlZCAmJiAoaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpbmxpbmUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKCF0aGlzLnN0YWNrU2xvdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICB0b3BTdGFjazogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHN0YWNrID0gKHRoaXMuaXNJbmxpbmUoKSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjayksXG4gICAgICAgIGl0ZW0gPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICBjb250ZXh0TmFtZTogZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGlmICh0aGlzLnVzZURlcHRocyAmJiBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gJ2RlcHRoc1snICsgY29udGV4dCArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdkZXB0aCcgKyBjb250ZXh0O1xuICAgIH1cbiAgfSxcblxuICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5xdW90ZWRTdHJpbmcoc3RyKTtcbiAgfSxcblxuICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2Uub2JqZWN0TGl0ZXJhbChvYmopO1xuICB9LFxuXG4gIGFsaWFzYWJsZTogZnVuY3Rpb24obmFtZSkge1xuICAgIGxldCByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV07XG4gICAgaWYgKHJldCkge1xuICAgICAgcmV0LnJlZmVyZW5jZUNvdW50Kys7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXSA9IHRoaXMuc291cmNlLndyYXAobmFtZSk7XG4gICAgcmV0LmFsaWFzYWJsZSA9IHRydWU7XG4gICAgcmV0LnJlZmVyZW5jZUNvdW50ID0gMTtcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgc2V0dXBIZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSwgYmxvY2tIZWxwZXIpIHtcbiAgICBsZXQgcGFyYW1zID0gW10sXG4gICAgICAgIHBhcmFtc0luaXQgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUsIHBhcmFtcywgYmxvY2tIZWxwZXIpO1xuICAgIGxldCBmb3VuZEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKSxcbiAgICAgICAgY2FsbENvbnRleHQgPSB0aGlzLmFsaWFzYWJsZShgJHt0aGlzLmNvbnRleHROYW1lKDApfSAhPSBudWxsID8gJHt0aGlzLmNvbnRleHROYW1lKDApfSA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pYCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICBwYXJhbXNJbml0OiBwYXJhbXNJbml0LFxuICAgICAgbmFtZTogZm91bmRIZWxwZXIsXG4gICAgICBjYWxsUGFyYW1zOiBbY2FsbENvbnRleHRdLmNvbmNhdChwYXJhbXMpXG4gICAgfTtcbiAgfSxcblxuICBzZXR1cFBhcmFtczogZnVuY3Rpb24oaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcykge1xuICAgIGxldCBvcHRpb25zID0ge30sXG4gICAgICAgIGNvbnRleHRzID0gW10sXG4gICAgICAgIHR5cGVzID0gW10sXG4gICAgICAgIGlkcyA9IFtdLFxuICAgICAgICBvYmplY3RBcmdzID0gIXBhcmFtcyxcbiAgICAgICAgcGFyYW07XG5cbiAgICBpZiAob2JqZWN0QXJncykge1xuICAgICAgcGFyYW1zID0gW107XG4gICAgfVxuXG4gICAgb3B0aW9ucy5uYW1lID0gdGhpcy5xdW90ZWRTdHJpbmcoaGVscGVyKTtcbiAgICBvcHRpb25zLmhhc2ggPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgb3B0aW9ucy5oYXNoSWRzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIG9wdGlvbnMuaGFzaFR5cGVzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgb3B0aW9ucy5oYXNoQ29udGV4dHMgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGludmVyc2UgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAgIHByb2dyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICAvLyBBdm9pZCBzZXR0aW5nIGZuIGFuZCBpbnZlcnNlIGlmIG5laXRoZXIgYXJlIHNldC4gVGhpcyBhbGxvd3NcbiAgICAvLyBoZWxwZXJzIHRvIGRvIGEgY2hlY2sgZm9yIGBpZiAob3B0aW9ucy5mbilgXG4gICAgaWYgKHByb2dyYW0gfHwgaW52ZXJzZSkge1xuICAgICAgb3B0aW9ucy5mbiA9IHByb2dyYW0gfHwgJ2NvbnRhaW5lci5ub29wJztcbiAgICAgIG9wdGlvbnMuaW52ZXJzZSA9IGludmVyc2UgfHwgJ2NvbnRhaW5lci5ub29wJztcbiAgICB9XG5cbiAgICAvLyBUaGUgcGFyYW1ldGVycyBnbyBvbiB0byB0aGUgc3RhY2sgaW4gb3JkZXIgKG1ha2luZyBzdXJlIHRoYXQgdGhleSBhcmUgZXZhbHVhdGVkIGluIG9yZGVyKVxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9wIHRoZW0gb2ZmIHRoZSBzdGFjayBpbiByZXZlcnNlIG9yZGVyXG4gICAgbGV0IGkgPSBwYXJhbVNpemU7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcGFyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcblxuICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgICAgaWRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICAgIHR5cGVzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgICBjb250ZXh0c1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2JqZWN0QXJncykge1xuICAgICAgb3B0aW9ucy5hcmdzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShwYXJhbXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICBvcHRpb25zLmlkcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoaWRzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLnR5cGVzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheSh0eXBlcyk7XG4gICAgICBvcHRpb25zLmNvbnRleHRzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShjb250ZXh0cyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSAnZGF0YSc7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gJ2Jsb2NrUGFyYW1zJztcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0sXG5cbiAgc2V0dXBIZWxwZXJBcmdzOiBmdW5jdGlvbihoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zLCB1c2VSZWdpc3Rlcikge1xuICAgIGxldCBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKTtcbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIGlmICh1c2VSZWdpc3Rlcikge1xuICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xuICAgICAgcGFyYW1zLnB1c2goJ29wdGlvbnMnKTtcbiAgICAgIHJldHVybiBbJ29wdGlvbnM9Jywgb3B0aW9uc107XG4gICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gIH1cbn07XG5cblxuKGZ1bmN0aW9uKCkge1xuICBjb25zdCByZXNlcnZlZFdvcmRzID0gKFxuICAgICdicmVhayBlbHNlIG5ldyB2YXInICtcbiAgICAnIGNhc2UgZmluYWxseSByZXR1cm4gdm9pZCcgK1xuICAgICcgY2F0Y2ggZm9yIHN3aXRjaCB3aGlsZScgK1xuICAgICcgY29udGludWUgZnVuY3Rpb24gdGhpcyB3aXRoJyArXG4gICAgJyBkZWZhdWx0IGlmIHRocm93JyArXG4gICAgJyBkZWxldGUgaW4gdHJ5JyArXG4gICAgJyBkbyBpbnN0YW5jZW9mIHR5cGVvZicgK1xuICAgICcgYWJzdHJhY3QgZW51bSBpbnQgc2hvcnQnICtcbiAgICAnIGJvb2xlYW4gZXhwb3J0IGludGVyZmFjZSBzdGF0aWMnICtcbiAgICAnIGJ5dGUgZXh0ZW5kcyBsb25nIHN1cGVyJyArXG4gICAgJyBjaGFyIGZpbmFsIG5hdGl2ZSBzeW5jaHJvbml6ZWQnICtcbiAgICAnIGNsYXNzIGZsb2F0IHBhY2thZ2UgdGhyb3dzJyArXG4gICAgJyBjb25zdCBnb3RvIHByaXZhdGUgdHJhbnNpZW50JyArXG4gICAgJyBkZWJ1Z2dlciBpbXBsZW1lbnRzIHByb3RlY3RlZCB2b2xhdGlsZScgK1xuICAgICcgZG91YmxlIGltcG9ydCBwdWJsaWMgbGV0IHlpZWxkIGF3YWl0JyArXG4gICAgJyBudWxsIHRydWUgZmFsc2UnXG4gICkuc3BsaXQoJyAnKTtcblxuICBjb25zdCBjb21waWxlcldvcmRzID0gSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSByZXNlcnZlZFdvcmRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xuICB9XG59KCkpO1xuXG5KYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiAhSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTW25hbWVdICYmICgvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvKS50ZXN0KG5hbWUpO1xufTtcblxuZnVuY3Rpb24gc3RyaWN0TG9va3VwKHJlcXVpcmVUZXJtaW5hbCwgY29tcGlsZXIsIHBhcnRzLCB0eXBlKSB7XG4gIGxldCBzdGFjayA9IGNvbXBpbGVyLnBvcFN0YWNrKCksXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuICAgIGxlbi0tO1xuICB9XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHN0YWNrID0gY29tcGlsZXIubmFtZUxvb2t1cChzdGFjaywgcGFydHNbaV0sIHR5cGUpO1xuICB9XG5cbiAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuICAgIHJldHVybiBbY29tcGlsZXIuYWxpYXNhYmxlKCdjb250YWluZXIuc3RyaWN0JyksICcoJywgc3RhY2ssICcsICcsIGNvbXBpbGVyLnF1b3RlZFN0cmluZyhwYXJ0c1tpXSksICcpJ107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YWNrO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEphdmFTY3JpcHRDb21waWxlcjtcbiIsImNvbnN0IGVzY2FwZSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOycsXG4gICc9JzogJyYjeDNEOydcbn07XG5cbmNvbnN0IGJhZENoYXJzID0gL1smPD5cIidgPV0vZyxcbiAgICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBsZXQgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBTb3VyY2VkIGZyb20gbG9kYXNoXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvbG9kYXNoL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXG5sZXQgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGlzRnVuY3Rpb24oL3gvKSkge1xuICBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9O1xufVxuZXhwb3J0IHtpc0Z1bmN0aW9ufTtcbi8qIGVzbGludC1lbmFibGUgZnVuYy1zdHlsZSAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJyA6IGZhbHNlO1xufTtcblxuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVFeHByZXNzaW9uKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXG4gICAgaWYgKHN0cmluZyAmJiBzdHJpbmcudG9IVE1MKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnRvSFRNTCgpO1xuICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2UgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBhIHN0cmluZyBjb252ZXJzaW9uIGFzIHRoaXMgd2lsbCBiZSBkb25lIGJ5IHRoZSBhcHBlbmQgcmVnYXJkbGVzcyBhbmRcbiAgICAvLyB0aGUgcmVnZXggdGVzdCB3aWxsIGRvIHRoaXMgdHJhbnNwYXJlbnRseSBiZWhpbmQgdGhlIHNjZW5lcywgY2F1c2luZyBpc3N1ZXMgaWZcbiAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZztcbiAgfVxuXG4gIGlmICghcG9zc2libGUudGVzdChzdHJpbmcpKSB7IHJldHVybiBzdHJpbmc7IH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnJhbWUob2JqZWN0KSB7XG4gIGxldCBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcbiAgZnJhbWUuX3BhcmVudCA9IG9iamVjdDtcbiAgcmV0dXJuIGZyYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiIsIlxuY29uc3QgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbjtcbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV4Y2VwdGlvbjtcbiIsImltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQgeyBDT01QSUxFUl9SRVZJU0lPTiwgUkVWSVNJT05fQ0hBTkdFUywgY3JlYXRlRnJhbWUgfSBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZXZpc2lvbihjb21waWxlckluZm8pIHtcbiAgY29uc3QgY29tcGlsZXJSZXZpc2lvbiA9IGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0gfHwgMSxcbiAgICAgICAgY3VycmVudFJldmlzaW9uID0gQ09NUElMRVJfUkVWSVNJT047XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gIT09IGN1cnJlbnRSZXZpc2lvbikge1xuICAgIGlmIChjb21waWxlclJldmlzaW9uIDwgY3VycmVudFJldmlzaW9uKSB7XG4gICAgICBjb25zdCBydW50aW1lVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2N1cnJlbnRSZXZpc2lvbl0sXG4gICAgICAgICAgICBjb21waWxlclZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1cGRhdGUgeW91ciBwcmVjb21waWxlciB0byBhIG5ld2VyIHZlcnNpb24gKCcgKyBydW50aW1lVmVyc2lvbnMgKyAnKSBvciBkb3duZ3JhZGUgeW91ciBydW50aW1lIHRvIGFuIG9sZGVyIHZlcnNpb24gKCcgKyBjb21waWxlclZlcnNpb25zICsgJykuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzZSB0aGUgZW1iZWRkZWQgdmVyc2lvbiBpbmZvIHNpbmNlIHRoZSBydW50aW1lIGRvZXNuJ3Qga25vdyBhYm91dCB0aGlzIHJldmlzaW9uIHlldFxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYSBuZXdlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICtcbiAgICAgICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcnVudGltZSB0byBhIG5ld2VyIHZlcnNpb24gKCcgKyBjb21waWxlckluZm9bMV0gKyAnKS4nKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlKHRlbXBsYXRlU3BlYywgZW52KSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICghZW52KSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTm8gZW52aXJvbm1lbnQgcGFzc2VkIHRvIHRlbXBsYXRlJyk7XG4gIH1cbiAgaWYgKCF0ZW1wbGF0ZVNwZWMgfHwgIXRlbXBsYXRlU3BlYy5tYWluKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0ZW1wbGF0ZSBvYmplY3Q6ICcgKyB0eXBlb2YgdGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIHRlbXBsYXRlU3BlYy5tYWluLmRlY29yYXRvciA9IHRlbXBsYXRlU3BlYy5tYWluX2Q7XG5cbiAgLy8gTm90ZTogVXNpbmcgZW52LlZNIHJlZmVyZW5jZXMgcmF0aGVyIHRoYW4gbG9jYWwgdmFyIHJlZmVyZW5jZXMgdGhyb3VnaG91dCB0aGlzIHNlY3Rpb24gdG8gYWxsb3dcbiAgLy8gZm9yIGV4dGVybmFsIHVzZXJzIHRvIG92ZXJyaWRlIHRoZXNlIGFzIHBzdWVkby1zdXBwb3J0ZWQgQVBJcy5cbiAgZW52LlZNLmNoZWNrUmV2aXNpb24odGVtcGxhdGVTcGVjLmNvbXBpbGVyKTtcblxuICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgICAgY29udGV4dCA9IFV0aWxzLmV4dGVuZCh7fSwgY29udGV4dCwgb3B0aW9ucy5oYXNoKTtcbiAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIGxldCByZXN1bHQgPSBlbnYuVk0uaW52b2tlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGVudi5jb21waWxlKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0gPSBlbnYuY29tcGlsZShwYXJ0aWFsLCB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJPcHRpb25zLCBlbnYpO1xuICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xuICAgICAgICBsZXQgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2ldID0gb3B0aW9ucy5pbmRlbnQgKyBsaW5lc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcbiAgICB9XG4gIH1cblxuICAvLyBKdXN0IGFkZCB3YXRlclxuICBsZXQgY29udGFpbmVyID0ge1xuICAgIHN0cmljdDogZnVuY3Rpb24ob2JqLCBuYW1lKSB7XG4gICAgICBpZiAoIShuYW1lIGluIG9iaikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignXCInICsgbmFtZSArICdcIiBub3QgZGVmaW5lZCBpbiAnICsgb2JqKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpbbmFtZV07XG4gICAgfSxcbiAgICBsb29rdXA6IGZ1bmN0aW9uKGRlcHRocywgbmFtZSkge1xuICAgICAgY29uc3QgbGVuID0gZGVwdGhzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGRlcHRoc1tpXSAmJiBkZXB0aHNbaV1bbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBkZXB0aHNbaV1bbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGxhbWJkYTogZnVuY3Rpb24oY3VycmVudCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcbiAgICB9LFxuXG4gICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcbiAgICBpbnZva2VQYXJ0aWFsOiBpbnZva2VQYXJ0aWFsV3JhcHBlcixcblxuICAgIGZuOiBmdW5jdGlvbihpKSB7XG4gICAgICBsZXQgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xuICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBwcm9ncmFtczogW10sXG4gICAgcHJvZ3JhbTogZnVuY3Rpb24oaSwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgICAgbGV0IHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSxcbiAgICAgICAgICBmbiA9IHRoaXMuZm4oaSk7XG4gICAgICBpZiAoZGF0YSB8fCBkZXB0aHMgfHwgYmxvY2tQYXJhbXMgfHwgZGVjbGFyZWRCbG9ja1BhcmFtcykge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICAgIH0gZWxzZSBpZiAoIXByb2dyYW1XcmFwcGVyKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9ncmFtV3JhcHBlcjtcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24odmFsdWUsIGRlcHRoKSB7XG4gICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBtZXJnZTogZnVuY3Rpb24ocGFyYW0sIGNvbW1vbikge1xuICAgICAgbGV0IG9iaiA9IHBhcmFtIHx8IGNvbW1vbjtcblxuICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiAocGFyYW0gIT09IGNvbW1vbikpIHtcbiAgICAgICAgb2JqID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIC8vIEFuIGVtcHR5IG9iamVjdCB0byB1c2UgYXMgcmVwbGFjZW1lbnQgZm9yIG51bGwtY29udGV4dHNcbiAgICBudWxsQ29udGV4dDogT2JqZWN0LnNlYWwoe30pLFxuXG4gICAgbm9vcDogZW52LlZNLm5vb3AsXG4gICAgY29tcGlsZXJJbmZvOiB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJcbiAgfTtcblxuICBmdW5jdGlvbiByZXQoY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG5cbiAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsICYmIHRlbXBsYXRlU3BlYy51c2VEYXRhKSB7XG4gICAgICBkYXRhID0gaW5pdERhdGEoY29udGV4dCwgZGF0YSk7XG4gICAgfVxuICAgIGxldCBkZXB0aHMsXG4gICAgICAgIGJsb2NrUGFyYW1zID0gdGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zID8gW10gOiB1bmRlZmluZWQ7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMpIHtcbiAgICAgIGlmIChvcHRpb25zLmRlcHRocykge1xuICAgICAgICBkZXB0aHMgPSBjb250ZXh0ICE9IG9wdGlvbnMuZGVwdGhzWzBdID8gW2NvbnRleHRdLmNvbmNhdChvcHRpb25zLmRlcHRocykgOiBvcHRpb25zLmRlcHRocztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlcHRocyA9IFtjb250ZXh0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQvKiwgb3B0aW9ucyovKSB7XG4gICAgICByZXR1cm4gJycgKyB0ZW1wbGF0ZVNwZWMubWFpbihjb250YWluZXIsIGNvbnRleHQsIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIH1cbiAgICBtYWluID0gZXhlY3V0ZURlY29yYXRvcnModGVtcGxhdGVTcGVjLm1haW4sIG1haW4sIGNvbnRhaW5lciwgb3B0aW9ucy5kZXB0aHMgfHwgW10sIGRhdGEsIGJsb2NrUGFyYW1zKTtcbiAgICByZXR1cm4gbWFpbihjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxuICByZXQuaXNUb3AgPSB0cnVlO1xuXG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuaGVscGVycywgZW52LmhlbHBlcnMpO1xuXG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwpIHtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMucGFydGlhbHMsIGVudi5wYXJ0aWFscyk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwgfHwgdGVtcGxhdGVTcGVjLnVzZURlY29yYXRvcnMpIHtcbiAgICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5kZWNvcmF0b3JzLCBlbnYuZGVjb3JhdG9ycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gb3B0aW9ucy5oZWxwZXJzO1xuICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcbiAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gb3B0aW9ucy5kZWNvcmF0b3JzO1xuICAgIH1cbiAgfTtcblxuICByZXQuX2NoaWxkID0gZnVuY3Rpb24oaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgJiYgIWJsb2NrUGFyYW1zKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdtdXN0IHBhc3MgYmxvY2sgcGFyYW1zJyk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBwYXJlbnQgZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgZnVuY3Rpb24gcHJvZyhjb250ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgY3VycmVudERlcHRocyA9IGRlcHRocztcbiAgICBpZiAoZGVwdGhzICYmIGNvbnRleHQgIT0gZGVwdGhzWzBdICYmICEoY29udGV4dCA9PT0gY29udGFpbmVyLm51bGxDb250ZXh0ICYmIGRlcHRoc1swXSA9PT0gbnVsbCkpIHtcbiAgICAgIGN1cnJlbnREZXB0aHMgPSBbY29udGV4dF0uY29uY2F0KGRlcHRocyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuKGNvbnRhaW5lcixcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscyxcbiAgICAgICAgb3B0aW9ucy5kYXRhIHx8IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLFxuICAgICAgICBjdXJyZW50RGVwdGhzKTtcbiAgfVxuXG4gIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuICBwcm9nLnByb2dyYW0gPSBpO1xuICBwcm9nLmRlcHRoID0gZGVwdGhzID8gZGVwdGhzLmxlbmd0aCA6IDA7XG4gIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG4gIHJldHVybiBwcm9nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAoIXBhcnRpYWwpIHtcbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCFwYXJ0aWFsLmNhbGwgJiYgIW9wdGlvbnMubmFtZSkge1xuICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xuICAgIG9wdGlvbnMubmFtZSA9IHBhcnRpYWw7XG4gICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbcGFydGlhbF07XG4gIH1cbiAgcmV0dXJuIHBhcnRpYWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgLy8gVXNlIHRoZSBjdXJyZW50IGNsb3N1cmUgY29udGV4dCB0byBzYXZlIHRoZSBwYXJ0aWFsLWJsb2NrIGlmIHRoaXMgcGFydGlhbFxuICBjb25zdCBjdXJyZW50UGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICBvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGggPSBvcHRpb25zLmlkc1swXSB8fCBvcHRpb25zLmRhdGEuY29udGV4dFBhdGg7XG4gIH1cblxuICBsZXQgcGFydGlhbEJsb2NrO1xuICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcbiAgICBwYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGZ1bmN0aW9uIHBhcnRpYWxCbG9ja1dyYXBwZXIoY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG5cbiAgICAgIC8vIFJlc3RvcmUgdGhlIHBhcnRpYWwtYmxvY2sgZnJvbSB0aGUgY2xvc3VyZSBmb3IgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYmxvY2tcbiAgICAgIC8vIGkuZS4gdGhlIHBhcnQgaW5zaWRlIHRoZSBibG9jayBvZiB0aGUgcGFydGlhbCBjYWxsLlxuICAgICAgb3B0aW9ucy5kYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gY3VycmVudFBhcnRpYWxCbG9jaztcbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIGlmIChmbi5wYXJ0aWFscykge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFscyA9IFV0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucy5wYXJ0aWFscywgZm4ucGFydGlhbHMpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJ0aWFsID09PSB1bmRlZmluZWQgJiYgcGFydGlhbEJsb2NrKSB7XG4gICAgcGFydGlhbCA9IHBhcnRpYWxCbG9jaztcbiAgfVxuXG4gIGlmIChwYXJ0aWFsID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcbiAgfSBlbHNlIGlmIChwYXJ0aWFsIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gcGFydGlhbChjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgcmV0dXJuICcnOyB9XG5cbmZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8ICEoJ3Jvb3QnIGluIGRhdGEpKSB7XG4gICAgZGF0YSA9IGRhdGEgPyBjcmVhdGVGcmFtZShkYXRhKSA6IHt9O1xuICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcbiAgaWYgKGZuLmRlY29yYXRvcikge1xuICAgIGxldCBwcm9wcyA9IHt9O1xuICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgVXRpbHMuZXh0ZW5kKHByb2csIHByb3BzKTtcbiAgfVxuICByZXR1cm4gcHJvZztcbn1cbiIsImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4xLjInO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIiwiaW1wb3J0IHtpbmRleE9mfSBmcm9tICcuL3V0aWxzJztcblxubGV0IGxvZ2dlciA9IHtcbiAgbWV0aG9kTWFwOiBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddLFxuICBsZXZlbDogJ2luZm8nLFxuXG4gIC8vIE1hcHMgYSBnaXZlbiBsZXZlbCB2YWx1ZSB0byB0aGUgYG1ldGhvZE1hcGAgaW5kZXhlcyBhYm92ZS5cbiAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBsZXZlbE1hcCA9IGluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uKGxldmVsLCAuLi5tZXNzYWdlKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgY29uc29sZVttZXRob2RdKC4uLm1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiIsImltcG9ydCByZWdpc3RlcklubGluZSBmcm9tICcuL2RlY29yYXRvcnMvaW5saW5lJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJJbmxpbmUoaW5zdGFuY2UpO1xufVxuXG4iLCJpbXBvcnQgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlckVhY2ggZnJvbSAnLi9oZWxwZXJzL2VhY2gnO1xuaW1wb3J0IHJlZ2lzdGVySGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVySWYgZnJvbSAnLi9oZWxwZXJzL2lmJztcbmltcG9ydCByZWdpc3RlckxvZyBmcm9tICcuL2hlbHBlcnMvbG9nJztcbmltcG9ydCByZWdpc3Rlckxvb2t1cCBmcm9tICcuL2hlbHBlcnMvbG9va3VwJztcbmltcG9ydCByZWdpc3RlcldpdGggZnJvbSAnLi9oZWxwZXJzL3dpdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0SGVscGVycyhpbnN0YW5jZSkge1xuICByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyRWFjaChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySWYoaW5zdGFuY2UpO1xuICByZWdpc3RlckxvZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9va3VwKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJXaXRoKGluc3RhbmNlKTtcbn1cbiIsIi8vIEZpbGUgaWdub3JlZCBpbiBjb3ZlcmFnZSB0ZXN0cyB2aWEgc2V0dGluZyBpbiAuaXN0YW5idWwueW1sXG4vKiBKaXNvbiBnZW5lcmF0ZWQgcGFyc2VyICovXG52YXIgaGFuZGxlYmFycyA9IChmdW5jdGlvbigpe1xudmFyIHBhcnNlciA9IHt0cmFjZTogZnVuY3Rpb24gdHJhY2UgKCkgeyB9LFxueXk6IHt9LFxuc3ltYm9sc186IHtcImVycm9yXCI6MixcInJvb3RcIjozLFwicHJvZ3JhbVwiOjQsXCJFT0ZcIjo1LFwicHJvZ3JhbV9yZXBldGl0aW9uMFwiOjYsXCJzdGF0ZW1lbnRcIjo3LFwibXVzdGFjaGVcIjo4LFwiYmxvY2tcIjo5LFwicmF3QmxvY2tcIjoxMCxcInBhcnRpYWxcIjoxMSxcInBhcnRpYWxCbG9ja1wiOjEyLFwiY29udGVudFwiOjEzLFwiQ09NTUVOVFwiOjE0LFwiQ09OVEVOVFwiOjE1LFwib3BlblJhd0Jsb2NrXCI6MTYsXCJyYXdCbG9ja19yZXBldGl0aW9uX3BsdXMwXCI6MTcsXCJFTkRfUkFXX0JMT0NLXCI6MTgsXCJPUEVOX1JBV19CTE9DS1wiOjE5LFwiaGVscGVyTmFtZVwiOjIwLFwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6MjEsXCJvcGVuUmF3QmxvY2tfb3B0aW9uMFwiOjIyLFwiQ0xPU0VfUkFXX0JMT0NLXCI6MjMsXCJvcGVuQmxvY2tcIjoyNCxcImJsb2NrX29wdGlvbjBcIjoyNSxcImNsb3NlQmxvY2tcIjoyNixcIm9wZW5JbnZlcnNlXCI6MjcsXCJibG9ja19vcHRpb24xXCI6MjgsXCJPUEVOX0JMT0NLXCI6MjksXCJvcGVuQmxvY2tfcmVwZXRpdGlvbjBcIjozMCxcIm9wZW5CbG9ja19vcHRpb24wXCI6MzEsXCJvcGVuQmxvY2tfb3B0aW9uMVwiOjMyLFwiQ0xPU0VcIjozMyxcIk9QRU5fSU5WRVJTRVwiOjM0LFwib3BlbkludmVyc2VfcmVwZXRpdGlvbjBcIjozNSxcIm9wZW5JbnZlcnNlX29wdGlvbjBcIjozNixcIm9wZW5JbnZlcnNlX29wdGlvbjFcIjozNyxcIm9wZW5JbnZlcnNlQ2hhaW5cIjozOCxcIk9QRU5fSU5WRVJTRV9DSEFJTlwiOjM5LFwib3BlbkludmVyc2VDaGFpbl9yZXBldGl0aW9uMFwiOjQwLFwib3BlbkludmVyc2VDaGFpbl9vcHRpb24wXCI6NDEsXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjFcIjo0MixcImludmVyc2VBbmRQcm9ncmFtXCI6NDMsXCJJTlZFUlNFXCI6NDQsXCJpbnZlcnNlQ2hhaW5cIjo0NSxcImludmVyc2VDaGFpbl9vcHRpb24wXCI6NDYsXCJPUEVOX0VOREJMT0NLXCI6NDcsXCJPUEVOXCI6NDgsXCJtdXN0YWNoZV9yZXBldGl0aW9uMFwiOjQ5LFwibXVzdGFjaGVfb3B0aW9uMFwiOjUwLFwiT1BFTl9VTkVTQ0FQRURcIjo1MSxcIm11c3RhY2hlX3JlcGV0aXRpb24xXCI6NTIsXCJtdXN0YWNoZV9vcHRpb24xXCI6NTMsXCJDTE9TRV9VTkVTQ0FQRURcIjo1NCxcIk9QRU5fUEFSVElBTFwiOjU1LFwicGFydGlhbE5hbWVcIjo1NixcInBhcnRpYWxfcmVwZXRpdGlvbjBcIjo1NyxcInBhcnRpYWxfb3B0aW9uMFwiOjU4LFwib3BlblBhcnRpYWxCbG9ja1wiOjU5LFwiT1BFTl9QQVJUSUFMX0JMT0NLXCI6NjAsXCJvcGVuUGFydGlhbEJsb2NrX3JlcGV0aXRpb24wXCI6NjEsXCJvcGVuUGFydGlhbEJsb2NrX29wdGlvbjBcIjo2MixcInBhcmFtXCI6NjMsXCJzZXhwclwiOjY0LFwiT1BFTl9TRVhQUlwiOjY1LFwic2V4cHJfcmVwZXRpdGlvbjBcIjo2NixcInNleHByX29wdGlvbjBcIjo2NyxcIkNMT1NFX1NFWFBSXCI6NjgsXCJoYXNoXCI6NjksXCJoYXNoX3JlcGV0aXRpb25fcGx1czBcIjo3MCxcImhhc2hTZWdtZW50XCI6NzEsXCJJRFwiOjcyLFwiRVFVQUxTXCI6NzMsXCJibG9ja1BhcmFtc1wiOjc0LFwiT1BFTl9CTE9DS19QQVJBTVNcIjo3NSxcImJsb2NrUGFyYW1zX3JlcGV0aXRpb25fcGx1czBcIjo3NixcIkNMT1NFX0JMT0NLX1BBUkFNU1wiOjc3LFwicGF0aFwiOjc4LFwiZGF0YU5hbWVcIjo3OSxcIlNUUklOR1wiOjgwLFwiTlVNQkVSXCI6ODEsXCJCT09MRUFOXCI6ODIsXCJVTkRFRklORURcIjo4MyxcIk5VTExcIjo4NCxcIkRBVEFcIjo4NSxcInBhdGhTZWdtZW50c1wiOjg2LFwiU0VQXCI6ODcsXCIkYWNjZXB0XCI6MCxcIiRlbmRcIjoxfSxcbnRlcm1pbmFsc186IHsyOlwiZXJyb3JcIiw1OlwiRU9GXCIsMTQ6XCJDT01NRU5UXCIsMTU6XCJDT05URU5UXCIsMTg6XCJFTkRfUkFXX0JMT0NLXCIsMTk6XCJPUEVOX1JBV19CTE9DS1wiLDIzOlwiQ0xPU0VfUkFXX0JMT0NLXCIsMjk6XCJPUEVOX0JMT0NLXCIsMzM6XCJDTE9TRVwiLDM0OlwiT1BFTl9JTlZFUlNFXCIsMzk6XCJPUEVOX0lOVkVSU0VfQ0hBSU5cIiw0NDpcIklOVkVSU0VcIiw0NzpcIk9QRU5fRU5EQkxPQ0tcIiw0ODpcIk9QRU5cIiw1MTpcIk9QRU5fVU5FU0NBUEVEXCIsNTQ6XCJDTE9TRV9VTkVTQ0FQRURcIiw1NTpcIk9QRU5fUEFSVElBTFwiLDYwOlwiT1BFTl9QQVJUSUFMX0JMT0NLXCIsNjU6XCJPUEVOX1NFWFBSXCIsNjg6XCJDTE9TRV9TRVhQUlwiLDcyOlwiSURcIiw3MzpcIkVRVUFMU1wiLDc1OlwiT1BFTl9CTE9DS19QQVJBTVNcIiw3NzpcIkNMT1NFX0JMT0NLX1BBUkFNU1wiLDgwOlwiU1RSSU5HXCIsODE6XCJOVU1CRVJcIiw4MjpcIkJPT0xFQU5cIiw4MzpcIlVOREVGSU5FRFwiLDg0OlwiTlVMTFwiLDg1OlwiREFUQVwiLDg3OlwiU0VQXCJ9LFxucHJvZHVjdGlvbnNfOiBbMCxbMywyXSxbNCwxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbMTMsMV0sWzEwLDNdLFsxNiw1XSxbOSw0XSxbOSw0XSxbMjQsNl0sWzI3LDZdLFszOCw2XSxbNDMsMl0sWzQ1LDNdLFs0NSwxXSxbMjYsM10sWzgsNV0sWzgsNV0sWzExLDVdLFsxMiwzXSxbNTksNV0sWzYzLDFdLFs2MywxXSxbNjQsNV0sWzY5LDFdLFs3MSwzXSxbNzQsM10sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFs1NiwxXSxbNTYsMV0sWzc5LDJdLFs3OCwxXSxbODYsM10sWzg2LDFdLFs2LDBdLFs2LDJdLFsxNywxXSxbMTcsMl0sWzIxLDBdLFsyMSwyXSxbMjIsMF0sWzIyLDFdLFsyNSwwXSxbMjUsMV0sWzI4LDBdLFsyOCwxXSxbMzAsMF0sWzMwLDJdLFszMSwwXSxbMzEsMV0sWzMyLDBdLFszMiwxXSxbMzUsMF0sWzM1LDJdLFszNiwwXSxbMzYsMV0sWzM3LDBdLFszNywxXSxbNDAsMF0sWzQwLDJdLFs0MSwwXSxbNDEsMV0sWzQyLDBdLFs0MiwxXSxbNDYsMF0sWzQ2LDFdLFs0OSwwXSxbNDksMl0sWzUwLDBdLFs1MCwxXSxbNTIsMF0sWzUyLDJdLFs1MywwXSxbNTMsMV0sWzU3LDBdLFs1NywyXSxbNTgsMF0sWzU4LDFdLFs2MSwwXSxbNjEsMl0sWzYyLDBdLFs2MiwxXSxbNjYsMF0sWzY2LDJdLFs2NywwXSxbNjcsMV0sWzcwLDFdLFs3MCwyXSxbNzYsMV0sWzc2LDJdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQseXlsZW5nLHl5bGluZW5vLHl5LHl5c3RhdGUsJCQsXyRcbikge1xuXG52YXIgJDAgPSAkJC5sZW5ndGggLSAxO1xuc3dpdGNoICh5eXN0YXRlKSB7XG5jYXNlIDE6IHJldHVybiAkJFskMC0xXTsgXG5icmVhaztcbmNhc2UgMjp0aGlzLiQgPSB5eS5wcmVwYXJlUHJvZ3JhbSgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDM6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDQ6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDU6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDY6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDc6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDg6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDk6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ0NvbW1lbnRTdGF0ZW1lbnQnLFxuICAgICAgdmFsdWU6IHl5LnN0cmlwQ29tbWVudCgkJFskMF0pLFxuICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDBdLCAkJFskMF0pLFxuICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgfTtcbiAgXG5icmVhaztcbmNhc2UgMTA6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ0NvbnRlbnRTdGF0ZW1lbnQnLFxuICAgICAgb3JpZ2luYWw6ICQkWyQwXSxcbiAgICAgIHZhbHVlOiAkJFskMF0sXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAxMTp0aGlzLiQgPSB5eS5wcmVwYXJlUmF3QmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDEyOnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtM10sIHBhcmFtczogJCRbJDAtMl0sIGhhc2g6ICQkWyQwLTFdIH07XG5icmVhaztcbmNhc2UgMTM6dGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDE0OnRoaXMuJCA9IHl5LnByZXBhcmVCbG9jaygkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRydWUsIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDE1OnRoaXMuJCA9IHsgb3BlbjogJCRbJDAtNV0sIHBhdGg6ICQkWyQwLTRdLCBwYXJhbXM6ICQkWyQwLTNdLCBoYXNoOiAkJFskMC0yXSwgYmxvY2tQYXJhbXM6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC01XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDE2OnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtNF0sIHBhcmFtczogJCRbJDAtM10sIGhhc2g6ICQkWyQwLTJdLCBibG9ja1BhcmFtczogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTVdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMTc6dGhpcy4kID0geyBwYXRoOiAkJFskMC00XSwgcGFyYW1zOiAkJFskMC0zXSwgaGFzaDogJCRbJDAtMl0sIGJsb2NrUGFyYW1zOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNV0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAxODp0aGlzLiQgPSB7IHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTFdLCAkJFskMC0xXSksIHByb2dyYW06ICQkWyQwXSB9O1xuYnJlYWs7XG5jYXNlIDE5OlxuICAgIHZhciBpbnZlcnNlID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCAkJFskMF0sIGZhbHNlLCB0aGlzLl8kKSxcbiAgICAgICAgcHJvZ3JhbSA9IHl5LnByZXBhcmVQcm9ncmFtKFtpbnZlcnNlXSwgJCRbJDAtMV0ubG9jKTtcbiAgICBwcm9ncmFtLmNoYWluZWQgPSB0cnVlO1xuXG4gICAgdGhpcy4kID0geyBzdHJpcDogJCRbJDAtMl0uc3RyaXAsIHByb2dyYW06IHByb2dyYW0sIGNoYWluOiB0cnVlIH07XG4gIFxuYnJlYWs7XG5jYXNlIDIwOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAyMTp0aGlzLiQgPSB7cGF0aDogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTJdLCAkJFskMF0pfTtcbmJyZWFrO1xuY2FzZSAyMjp0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDAtNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSksIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDIzOnRoaXMuJCA9IHl5LnByZXBhcmVNdXN0YWNoZSgkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMC00XSwgeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMjQ6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ1BhcnRpYWxTdGF0ZW1lbnQnLFxuICAgICAgbmFtZTogJCRbJDAtM10sXG4gICAgICBwYXJhbXM6ICQkWyQwLTJdLFxuICAgICAgaGFzaDogJCRbJDAtMV0sXG4gICAgICBpbmRlbnQ6ICcnLFxuICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSksXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAyNTp0aGlzLiQgPSB5eS5wcmVwYXJlUGFydGlhbEJsb2NrKCQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAyNjp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTNdLCBwYXJhbXM6ICQkWyQwLTJdLCBoYXNoOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAyNzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMjg6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDI5OlxuICAgIHRoaXMuJCA9IHtcbiAgICAgIHR5cGU6ICdTdWJFeHByZXNzaW9uJyxcbiAgICAgIHBhdGg6ICQkWyQwLTNdLFxuICAgICAgcGFyYW1zOiAkJFskMC0yXSxcbiAgICAgIGhhc2g6ICQkWyQwLTFdLFxuICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgfTtcbiAgXG5icmVhaztcbmNhc2UgMzA6dGhpcy4kID0ge3R5cGU6ICdIYXNoJywgcGFpcnM6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzMTp0aGlzLiQgPSB7dHlwZTogJ0hhc2hQYWlyJywga2V5OiB5eS5pZCgkJFskMC0yXSksIHZhbHVlOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzI6dGhpcy4kID0geXkuaWQoJCRbJDAtMV0pO1xuYnJlYWs7XG5jYXNlIDMzOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAzNDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMzU6dGhpcy4kID0ge3R5cGU6ICdTdHJpbmdMaXRlcmFsJywgdmFsdWU6ICQkWyQwXSwgb3JpZ2luYWw6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzNjp0aGlzLiQgPSB7dHlwZTogJ051bWJlckxpdGVyYWwnLCB2YWx1ZTogTnVtYmVyKCQkWyQwXSksIG9yaWdpbmFsOiBOdW1iZXIoJCRbJDBdKSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzNzp0aGlzLiQgPSB7dHlwZTogJ0Jvb2xlYW5MaXRlcmFsJywgdmFsdWU6ICQkWyQwXSA9PT0gJ3RydWUnLCBvcmlnaW5hbDogJCRbJDBdID09PSAndHJ1ZScsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzg6dGhpcy4kID0ge3R5cGU6ICdVbmRlZmluZWRMaXRlcmFsJywgb3JpZ2luYWw6IHVuZGVmaW5lZCwgdmFsdWU6IHVuZGVmaW5lZCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzOTp0aGlzLiQgPSB7dHlwZTogJ051bGxMaXRlcmFsJywgb3JpZ2luYWw6IG51bGwsIHZhbHVlOiBudWxsLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDQwOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA0MTp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNDI6dGhpcy4kID0geXkucHJlcGFyZVBhdGgodHJ1ZSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSA0Mzp0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aChmYWxzZSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSA0NDogJCRbJDAtMl0ucHVzaCh7cGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXSwgc2VwYXJhdG9yOiAkJFskMC0xXX0pOyB0aGlzLiQgPSAkJFskMC0yXTsgXG5icmVhaztcbmNhc2UgNDU6dGhpcy4kID0gW3twYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdfV07XG5icmVhaztcbmNhc2UgNDY6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNDc6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDQ4OnRoaXMuJCA9IFskJFskMF1dO1xuYnJlYWs7XG5jYXNlIDQ5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA1MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA1MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNTg6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNTk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDY0OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDY1OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA3MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA3MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNzg6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNzk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDgyOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDgzOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA4Njp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA4NzokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgOTA6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgOTE6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDk0OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDk1OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA5ODp0aGlzLiQgPSBbJCRbJDBdXTtcbmJyZWFrO1xuY2FzZSA5OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgMTAwOnRoaXMuJCA9IFskJFskMF1dO1xuYnJlYWs7XG5jYXNlIDEwMTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbn1cbn0sXG50YWJsZTogW3szOjEsNDoyLDU6WzIsNDZdLDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezE6WzNdfSx7NTpbMSw0XX0sezU6WzIsMl0sNzo1LDg6Niw5OjcsMTA6OCwxMTo5LDEyOjEwLDEzOjExLDE0OlsxLDEyXSwxNTpbMSwyMF0sMTY6MTcsMTk6WzEsMjNdLDI0OjE1LDI3OjE2LDI5OlsxLDIxXSwzNDpbMSwyMl0sMzk6WzIsMl0sNDQ6WzIsMl0sNDc6WzIsMl0sNDg6WzEsMTNdLDUxOlsxLDE0XSw1NTpbMSwxOF0sNTk6MTksNjA6WzEsMjRdfSx7MTpbMiwxXX0sezU6WzIsNDddLDE0OlsyLDQ3XSwxNTpbMiw0N10sMTk6WzIsNDddLDI5OlsyLDQ3XSwzNDpbMiw0N10sMzk6WzIsNDddLDQ0OlsyLDQ3XSw0NzpbMiw0N10sNDg6WzIsNDddLDUxOlsyLDQ3XSw1NTpbMiw0N10sNjA6WzIsNDddfSx7NTpbMiwzXSwxNDpbMiwzXSwxNTpbMiwzXSwxOTpbMiwzXSwyOTpbMiwzXSwzNDpbMiwzXSwzOTpbMiwzXSw0NDpbMiwzXSw0NzpbMiwzXSw0ODpbMiwzXSw1MTpbMiwzXSw1NTpbMiwzXSw2MDpbMiwzXX0sezU6WzIsNF0sMTQ6WzIsNF0sMTU6WzIsNF0sMTk6WzIsNF0sMjk6WzIsNF0sMzQ6WzIsNF0sMzk6WzIsNF0sNDQ6WzIsNF0sNDc6WzIsNF0sNDg6WzIsNF0sNTE6WzIsNF0sNTU6WzIsNF0sNjA6WzIsNF19LHs1OlsyLDVdLDE0OlsyLDVdLDE1OlsyLDVdLDE5OlsyLDVdLDI5OlsyLDVdLDM0OlsyLDVdLDM5OlsyLDVdLDQ0OlsyLDVdLDQ3OlsyLDVdLDQ4OlsyLDVdLDUxOlsyLDVdLDU1OlsyLDVdLDYwOlsyLDVdfSx7NTpbMiw2XSwxNDpbMiw2XSwxNTpbMiw2XSwxOTpbMiw2XSwyOTpbMiw2XSwzNDpbMiw2XSwzOTpbMiw2XSw0NDpbMiw2XSw0NzpbMiw2XSw0ODpbMiw2XSw1MTpbMiw2XSw1NTpbMiw2XSw2MDpbMiw2XX0sezU6WzIsN10sMTQ6WzIsN10sMTU6WzIsN10sMTk6WzIsN10sMjk6WzIsN10sMzQ6WzIsN10sMzk6WzIsN10sNDQ6WzIsN10sNDc6WzIsN10sNDg6WzIsN10sNTE6WzIsN10sNTU6WzIsN10sNjA6WzIsN119LHs1OlsyLDhdLDE0OlsyLDhdLDE1OlsyLDhdLDE5OlsyLDhdLDI5OlsyLDhdLDM0OlsyLDhdLDM5OlsyLDhdLDQ0OlsyLDhdLDQ3OlsyLDhdLDQ4OlsyLDhdLDUxOlsyLDhdLDU1OlsyLDhdLDYwOlsyLDhdfSx7NTpbMiw5XSwxNDpbMiw5XSwxNTpbMiw5XSwxOTpbMiw5XSwyOTpbMiw5XSwzNDpbMiw5XSwzOTpbMiw5XSw0NDpbMiw5XSw0NzpbMiw5XSw0ODpbMiw5XSw1MTpbMiw5XSw1NTpbMiw5XSw2MDpbMiw5XX0sezIwOjI1LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjM2LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezQ6MzcsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sMzk6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NDozOCw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezEzOjQwLDE1OlsxLDIwXSwxNzozOX0sezIwOjQyLDU2OjQxLDY0OjQzLDY1OlsxLDQ0XSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs0OjQ1LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs1OlsyLDEwXSwxNDpbMiwxMF0sMTU6WzIsMTBdLDE4OlsyLDEwXSwxOTpbMiwxMF0sMjk6WzIsMTBdLDM0OlsyLDEwXSwzOTpbMiwxMF0sNDQ6WzIsMTBdLDQ3OlsyLDEwXSw0ODpbMiwxMF0sNTE6WzIsMTBdLDU1OlsyLDEwXSw2MDpbMiwxMF19LHsyMDo0Niw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo0Nyw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo0OCw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo0Miw1Njo0OSw2NDo0Myw2NTpbMSw0NF0sNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MzM6WzIsNzhdLDQ5OjUwLDY1OlsyLDc4XSw3MjpbMiw3OF0sODA6WzIsNzhdLDgxOlsyLDc4XSw4MjpbMiw3OF0sODM6WzIsNzhdLDg0OlsyLDc4XSw4NTpbMiw3OF19LHsyMzpbMiwzM10sMzM6WzIsMzNdLDU0OlsyLDMzXSw2NTpbMiwzM10sNjg6WzIsMzNdLDcyOlsyLDMzXSw3NTpbMiwzM10sODA6WzIsMzNdLDgxOlsyLDMzXSw4MjpbMiwzM10sODM6WzIsMzNdLDg0OlsyLDMzXSw4NTpbMiwzM119LHsyMzpbMiwzNF0sMzM6WzIsMzRdLDU0OlsyLDM0XSw2NTpbMiwzNF0sNjg6WzIsMzRdLDcyOlsyLDM0XSw3NTpbMiwzNF0sODA6WzIsMzRdLDgxOlsyLDM0XSw4MjpbMiwzNF0sODM6WzIsMzRdLDg0OlsyLDM0XSw4NTpbMiwzNF19LHsyMzpbMiwzNV0sMzM6WzIsMzVdLDU0OlsyLDM1XSw2NTpbMiwzNV0sNjg6WzIsMzVdLDcyOlsyLDM1XSw3NTpbMiwzNV0sODA6WzIsMzVdLDgxOlsyLDM1XSw4MjpbMiwzNV0sODM6WzIsMzVdLDg0OlsyLDM1XSw4NTpbMiwzNV19LHsyMzpbMiwzNl0sMzM6WzIsMzZdLDU0OlsyLDM2XSw2NTpbMiwzNl0sNjg6WzIsMzZdLDcyOlsyLDM2XSw3NTpbMiwzNl0sODA6WzIsMzZdLDgxOlsyLDM2XSw4MjpbMiwzNl0sODM6WzIsMzZdLDg0OlsyLDM2XSw4NTpbMiwzNl19LHsyMzpbMiwzN10sMzM6WzIsMzddLDU0OlsyLDM3XSw2NTpbMiwzN10sNjg6WzIsMzddLDcyOlsyLDM3XSw3NTpbMiwzN10sODA6WzIsMzddLDgxOlsyLDM3XSw4MjpbMiwzN10sODM6WzIsMzddLDg0OlsyLDM3XSw4NTpbMiwzN119LHsyMzpbMiwzOF0sMzM6WzIsMzhdLDU0OlsyLDM4XSw2NTpbMiwzOF0sNjg6WzIsMzhdLDcyOlsyLDM4XSw3NTpbMiwzOF0sODA6WzIsMzhdLDgxOlsyLDM4XSw4MjpbMiwzOF0sODM6WzIsMzhdLDg0OlsyLDM4XSw4NTpbMiwzOF19LHsyMzpbMiwzOV0sMzM6WzIsMzldLDU0OlsyLDM5XSw2NTpbMiwzOV0sNjg6WzIsMzldLDcyOlsyLDM5XSw3NTpbMiwzOV0sODA6WzIsMzldLDgxOlsyLDM5XSw4MjpbMiwzOV0sODM6WzIsMzldLDg0OlsyLDM5XSw4NTpbMiwzOV19LHsyMzpbMiw0M10sMzM6WzIsNDNdLDU0OlsyLDQzXSw2NTpbMiw0M10sNjg6WzIsNDNdLDcyOlsyLDQzXSw3NTpbMiw0M10sODA6WzIsNDNdLDgxOlsyLDQzXSw4MjpbMiw0M10sODM6WzIsNDNdLDg0OlsyLDQzXSw4NTpbMiw0M10sODc6WzEsNTFdfSx7NzI6WzEsMzVdLDg2OjUyfSx7MjM6WzIsNDVdLDMzOlsyLDQ1XSw1NDpbMiw0NV0sNjU6WzIsNDVdLDY4OlsyLDQ1XSw3MjpbMiw0NV0sNzU6WzIsNDVdLDgwOlsyLDQ1XSw4MTpbMiw0NV0sODI6WzIsNDVdLDgzOlsyLDQ1XSw4NDpbMiw0NV0sODU6WzIsNDVdLDg3OlsyLDQ1XX0sezUyOjUzLDU0OlsyLDgyXSw2NTpbMiw4Ml0sNzI6WzIsODJdLDgwOlsyLDgyXSw4MTpbMiw4Ml0sODI6WzIsODJdLDgzOlsyLDgyXSw4NDpbMiw4Ml0sODU6WzIsODJdfSx7MjU6NTQsMzg6NTYsMzk6WzEsNThdLDQzOjU3LDQ0OlsxLDU5XSw0NTo1NSw0NzpbMiw1NF19LHsyODo2MCw0Mzo2MSw0NDpbMSw1OV0sNDc6WzIsNTZdfSx7MTM6NjMsMTU6WzEsMjBdLDE4OlsxLDYyXX0sezE1OlsyLDQ4XSwxODpbMiw0OF19LHszMzpbMiw4Nl0sNTc6NjQsNjU6WzIsODZdLDcyOlsyLDg2XSw4MDpbMiw4Nl0sODE6WzIsODZdLDgyOlsyLDg2XSw4MzpbMiw4Nl0sODQ6WzIsODZdLDg1OlsyLDg2XX0sezMzOlsyLDQwXSw2NTpbMiw0MF0sNzI6WzIsNDBdLDgwOlsyLDQwXSw4MTpbMiw0MF0sODI6WzIsNDBdLDgzOlsyLDQwXSw4NDpbMiw0MF0sODU6WzIsNDBdfSx7MzM6WzIsNDFdLDY1OlsyLDQxXSw3MjpbMiw0MV0sODA6WzIsNDFdLDgxOlsyLDQxXSw4MjpbMiw0MV0sODM6WzIsNDFdLDg0OlsyLDQxXSw4NTpbMiw0MV19LHsyMDo2NSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyNjo2Niw0NzpbMSw2N119LHszMDo2OCwzMzpbMiw1OF0sNjU6WzIsNThdLDcyOlsyLDU4XSw3NTpbMiw1OF0sODA6WzIsNThdLDgxOlsyLDU4XSw4MjpbMiw1OF0sODM6WzIsNThdLDg0OlsyLDU4XSw4NTpbMiw1OF19LHszMzpbMiw2NF0sMzU6NjksNjU6WzIsNjRdLDcyOlsyLDY0XSw3NTpbMiw2NF0sODA6WzIsNjRdLDgxOlsyLDY0XSw4MjpbMiw2NF0sODM6WzIsNjRdLDg0OlsyLDY0XSw4NTpbMiw2NF19LHsyMTo3MCwyMzpbMiw1MF0sNjU6WzIsNTBdLDcyOlsyLDUwXSw4MDpbMiw1MF0sODE6WzIsNTBdLDgyOlsyLDUwXSw4MzpbMiw1MF0sODQ6WzIsNTBdLDg1OlsyLDUwXX0sezMzOlsyLDkwXSw2MTo3MSw2NTpbMiw5MF0sNzI6WzIsOTBdLDgwOlsyLDkwXSw4MTpbMiw5MF0sODI6WzIsOTBdLDgzOlsyLDkwXSw4NDpbMiw5MF0sODU6WzIsOTBdfSx7MjA6NzUsMzM6WzIsODBdLDUwOjcyLDYzOjczLDY0Ojc2LDY1OlsxLDQ0XSw2OTo3NCw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs3MjpbMSw4MF19LHsyMzpbMiw0Ml0sMzM6WzIsNDJdLDU0OlsyLDQyXSw2NTpbMiw0Ml0sNjg6WzIsNDJdLDcyOlsyLDQyXSw3NTpbMiw0Ml0sODA6WzIsNDJdLDgxOlsyLDQyXSw4MjpbMiw0Ml0sODM6WzIsNDJdLDg0OlsyLDQyXSw4NTpbMiw0Ml0sODc6WzEsNTFdfSx7MjA6NzUsNTM6ODEsNTQ6WzIsODRdLDYzOjgyLDY0Ojc2LDY1OlsxLDQ0XSw2OTo4Myw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyNjo4NCw0NzpbMSw2N119LHs0NzpbMiw1NV19LHs0Ojg1LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDM5OlsyLDQ2XSw0NDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezQ3OlsyLDIwXX0sezIwOjg2LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezQ6ODcsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezI2Ojg4LDQ3OlsxLDY3XX0sezQ3OlsyLDU3XX0sezU6WzIsMTFdLDE0OlsyLDExXSwxNTpbMiwxMV0sMTk6WzIsMTFdLDI5OlsyLDExXSwzNDpbMiwxMV0sMzk6WzIsMTFdLDQ0OlsyLDExXSw0NzpbMiwxMV0sNDg6WzIsMTFdLDUxOlsyLDExXSw1NTpbMiwxMV0sNjA6WzIsMTFdfSx7MTU6WzIsNDldLDE4OlsyLDQ5XX0sezIwOjc1LDMzOlsyLDg4XSw1ODo4OSw2Mzo5MCw2NDo3Niw2NTpbMSw0NF0sNjk6OTEsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NjU6WzIsOTRdLDY2OjkyLDY4OlsyLDk0XSw3MjpbMiw5NF0sODA6WzIsOTRdLDgxOlsyLDk0XSw4MjpbMiw5NF0sODM6WzIsOTRdLDg0OlsyLDk0XSw4NTpbMiw5NF19LHs1OlsyLDI1XSwxNDpbMiwyNV0sMTU6WzIsMjVdLDE5OlsyLDI1XSwyOTpbMiwyNV0sMzQ6WzIsMjVdLDM5OlsyLDI1XSw0NDpbMiwyNV0sNDc6WzIsMjVdLDQ4OlsyLDI1XSw1MTpbMiwyNV0sNTU6WzIsMjVdLDYwOlsyLDI1XX0sezIwOjkzLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc1LDMxOjk0LDMzOlsyLDYwXSw2Mzo5NSw2NDo3Niw2NTpbMSw0NF0sNjk6OTYsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc1OlsyLDYwXSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc1LDMzOlsyLDY2XSwzNjo5Nyw2Mzo5OCw2NDo3Niw2NTpbMSw0NF0sNjk6OTksNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc1OlsyLDY2XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc1LDIyOjEwMCwyMzpbMiw1Ml0sNjM6MTAxLDY0Ojc2LDY1OlsxLDQ0XSw2OToxMDIsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMzM6WzIsOTJdLDYyOjEwMyw2MzoxMDQsNjQ6NzYsNjU6WzEsNDRdLDY5OjEwNSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHszMzpbMSwxMDZdfSx7MzM6WzIsNzldLDY1OlsyLDc5XSw3MjpbMiw3OV0sODA6WzIsNzldLDgxOlsyLDc5XSw4MjpbMiw3OV0sODM6WzIsNzldLDg0OlsyLDc5XSw4NTpbMiw3OV19LHszMzpbMiw4MV19LHsyMzpbMiwyN10sMzM6WzIsMjddLDU0OlsyLDI3XSw2NTpbMiwyN10sNjg6WzIsMjddLDcyOlsyLDI3XSw3NTpbMiwyN10sODA6WzIsMjddLDgxOlsyLDI3XSw4MjpbMiwyN10sODM6WzIsMjddLDg0OlsyLDI3XSw4NTpbMiwyN119LHsyMzpbMiwyOF0sMzM6WzIsMjhdLDU0OlsyLDI4XSw2NTpbMiwyOF0sNjg6WzIsMjhdLDcyOlsyLDI4XSw3NTpbMiwyOF0sODA6WzIsMjhdLDgxOlsyLDI4XSw4MjpbMiwyOF0sODM6WzIsMjhdLDg0OlsyLDI4XSw4NTpbMiwyOF19LHsyMzpbMiwzMF0sMzM6WzIsMzBdLDU0OlsyLDMwXSw2ODpbMiwzMF0sNzE6MTA3LDcyOlsxLDEwOF0sNzU6WzIsMzBdfSx7MjM6WzIsOThdLDMzOlsyLDk4XSw1NDpbMiw5OF0sNjg6WzIsOThdLDcyOlsyLDk4XSw3NTpbMiw5OF19LHsyMzpbMiw0NV0sMzM6WzIsNDVdLDU0OlsyLDQ1XSw2NTpbMiw0NV0sNjg6WzIsNDVdLDcyOlsyLDQ1XSw3MzpbMSwxMDldLDc1OlsyLDQ1XSw4MDpbMiw0NV0sODE6WzIsNDVdLDgyOlsyLDQ1XSw4MzpbMiw0NV0sODQ6WzIsNDVdLDg1OlsyLDQ1XSw4NzpbMiw0NV19LHsyMzpbMiw0NF0sMzM6WzIsNDRdLDU0OlsyLDQ0XSw2NTpbMiw0NF0sNjg6WzIsNDRdLDcyOlsyLDQ0XSw3NTpbMiw0NF0sODA6WzIsNDRdLDgxOlsyLDQ0XSw4MjpbMiw0NF0sODM6WzIsNDRdLDg0OlsyLDQ0XSw4NTpbMiw0NF0sODc6WzIsNDRdfSx7NTQ6WzEsMTEwXX0sezU0OlsyLDgzXSw2NTpbMiw4M10sNzI6WzIsODNdLDgwOlsyLDgzXSw4MTpbMiw4M10sODI6WzIsODNdLDgzOlsyLDgzXSw4NDpbMiw4M10sODU6WzIsODNdfSx7NTQ6WzIsODVdfSx7NTpbMiwxM10sMTQ6WzIsMTNdLDE1OlsyLDEzXSwxOTpbMiwxM10sMjk6WzIsMTNdLDM0OlsyLDEzXSwzOTpbMiwxM10sNDQ6WzIsMTNdLDQ3OlsyLDEzXSw0ODpbMiwxM10sNTE6WzIsMTNdLDU1OlsyLDEzXSw2MDpbMiwxM119LHszODo1NiwzOTpbMSw1OF0sNDM6NTcsNDQ6WzEsNTldLDQ1OjExMiw0NjoxMTEsNDc6WzIsNzZdfSx7MzM6WzIsNzBdLDQwOjExMyw2NTpbMiw3MF0sNzI6WzIsNzBdLDc1OlsyLDcwXSw4MDpbMiw3MF0sODE6WzIsNzBdLDgyOlsyLDcwXSw4MzpbMiw3MF0sODQ6WzIsNzBdLDg1OlsyLDcwXX0sezQ3OlsyLDE4XX0sezU6WzIsMTRdLDE0OlsyLDE0XSwxNTpbMiwxNF0sMTk6WzIsMTRdLDI5OlsyLDE0XSwzNDpbMiwxNF0sMzk6WzIsMTRdLDQ0OlsyLDE0XSw0NzpbMiwxNF0sNDg6WzIsMTRdLDUxOlsyLDE0XSw1NTpbMiwxNF0sNjA6WzIsMTRdfSx7MzM6WzEsMTE0XX0sezMzOlsyLDg3XSw2NTpbMiw4N10sNzI6WzIsODddLDgwOlsyLDg3XSw4MTpbMiw4N10sODI6WzIsODddLDgzOlsyLDg3XSw4NDpbMiw4N10sODU6WzIsODddfSx7MzM6WzIsODldfSx7MjA6NzUsNjM6MTE2LDY0Ojc2LDY1OlsxLDQ0XSw2NzoxMTUsNjg6WzIsOTZdLDY5OjExNyw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHszMzpbMSwxMThdfSx7MzI6MTE5LDMzOlsyLDYyXSw3NDoxMjAsNzU6WzEsMTIxXX0sezMzOlsyLDU5XSw2NTpbMiw1OV0sNzI6WzIsNTldLDc1OlsyLDU5XSw4MDpbMiw1OV0sODE6WzIsNTldLDgyOlsyLDU5XSw4MzpbMiw1OV0sODQ6WzIsNTldLDg1OlsyLDU5XX0sezMzOlsyLDYxXSw3NTpbMiw2MV19LHszMzpbMiw2OF0sMzc6MTIyLDc0OjEyMyw3NTpbMSwxMjFdfSx7MzM6WzIsNjVdLDY1OlsyLDY1XSw3MjpbMiw2NV0sNzU6WzIsNjVdLDgwOlsyLDY1XSw4MTpbMiw2NV0sODI6WzIsNjVdLDgzOlsyLDY1XSw4NDpbMiw2NV0sODU6WzIsNjVdfSx7MzM6WzIsNjddLDc1OlsyLDY3XX0sezIzOlsxLDEyNF19LHsyMzpbMiw1MV0sNjU6WzIsNTFdLDcyOlsyLDUxXSw4MDpbMiw1MV0sODE6WzIsNTFdLDgyOlsyLDUxXSw4MzpbMiw1MV0sODQ6WzIsNTFdLDg1OlsyLDUxXX0sezIzOlsyLDUzXX0sezMzOlsxLDEyNV19LHszMzpbMiw5MV0sNjU6WzIsOTFdLDcyOlsyLDkxXSw4MDpbMiw5MV0sODE6WzIsOTFdLDgyOlsyLDkxXSw4MzpbMiw5MV0sODQ6WzIsOTFdLDg1OlsyLDkxXX0sezMzOlsyLDkzXX0sezU6WzIsMjJdLDE0OlsyLDIyXSwxNTpbMiwyMl0sMTk6WzIsMjJdLDI5OlsyLDIyXSwzNDpbMiwyMl0sMzk6WzIsMjJdLDQ0OlsyLDIyXSw0NzpbMiwyMl0sNDg6WzIsMjJdLDUxOlsyLDIyXSw1NTpbMiwyMl0sNjA6WzIsMjJdfSx7MjM6WzIsOTldLDMzOlsyLDk5XSw1NDpbMiw5OV0sNjg6WzIsOTldLDcyOlsyLDk5XSw3NTpbMiw5OV19LHs3MzpbMSwxMDldfSx7MjA6NzUsNjM6MTI2LDY0Ojc2LDY1OlsxLDQ0XSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs1OlsyLDIzXSwxNDpbMiwyM10sMTU6WzIsMjNdLDE5OlsyLDIzXSwyOTpbMiwyM10sMzQ6WzIsMjNdLDM5OlsyLDIzXSw0NDpbMiwyM10sNDc6WzIsMjNdLDQ4OlsyLDIzXSw1MTpbMiwyM10sNTU6WzIsMjNdLDYwOlsyLDIzXX0sezQ3OlsyLDE5XX0sezQ3OlsyLDc3XX0sezIwOjc1LDMzOlsyLDcyXSw0MToxMjcsNjM6MTI4LDY0Ojc2LDY1OlsxLDQ0XSw2OToxMjksNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc1OlsyLDcyXSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezU6WzIsMjRdLDE0OlsyLDI0XSwxNTpbMiwyNF0sMTk6WzIsMjRdLDI5OlsyLDI0XSwzNDpbMiwyNF0sMzk6WzIsMjRdLDQ0OlsyLDI0XSw0NzpbMiwyNF0sNDg6WzIsMjRdLDUxOlsyLDI0XSw1NTpbMiwyNF0sNjA6WzIsMjRdfSx7Njg6WzEsMTMwXX0sezY1OlsyLDk1XSw2ODpbMiw5NV0sNzI6WzIsOTVdLDgwOlsyLDk1XSw4MTpbMiw5NV0sODI6WzIsOTVdLDgzOlsyLDk1XSw4NDpbMiw5NV0sODU6WzIsOTVdfSx7Njg6WzIsOTddfSx7NTpbMiwyMV0sMTQ6WzIsMjFdLDE1OlsyLDIxXSwxOTpbMiwyMV0sMjk6WzIsMjFdLDM0OlsyLDIxXSwzOTpbMiwyMV0sNDQ6WzIsMjFdLDQ3OlsyLDIxXSw0ODpbMiwyMV0sNTE6WzIsMjFdLDU1OlsyLDIxXSw2MDpbMiwyMV19LHszMzpbMSwxMzFdfSx7MzM6WzIsNjNdfSx7NzI6WzEsMTMzXSw3NjoxMzJ9LHszMzpbMSwxMzRdfSx7MzM6WzIsNjldfSx7MTU6WzIsMTJdfSx7MTQ6WzIsMjZdLDE1OlsyLDI2XSwxOTpbMiwyNl0sMjk6WzIsMjZdLDM0OlsyLDI2XSw0NzpbMiwyNl0sNDg6WzIsMjZdLDUxOlsyLDI2XSw1NTpbMiwyNl0sNjA6WzIsMjZdfSx7MjM6WzIsMzFdLDMzOlsyLDMxXSw1NDpbMiwzMV0sNjg6WzIsMzFdLDcyOlsyLDMxXSw3NTpbMiwzMV19LHszMzpbMiw3NF0sNDI6MTM1LDc0OjEzNiw3NTpbMSwxMjFdfSx7MzM6WzIsNzFdLDY1OlsyLDcxXSw3MjpbMiw3MV0sNzU6WzIsNzFdLDgwOlsyLDcxXSw4MTpbMiw3MV0sODI6WzIsNzFdLDgzOlsyLDcxXSw4NDpbMiw3MV0sODU6WzIsNzFdfSx7MzM6WzIsNzNdLDc1OlsyLDczXX0sezIzOlsyLDI5XSwzMzpbMiwyOV0sNTQ6WzIsMjldLDY1OlsyLDI5XSw2ODpbMiwyOV0sNzI6WzIsMjldLDc1OlsyLDI5XSw4MDpbMiwyOV0sODE6WzIsMjldLDgyOlsyLDI5XSw4MzpbMiwyOV0sODQ6WzIsMjldLDg1OlsyLDI5XX0sezE0OlsyLDE1XSwxNTpbMiwxNV0sMTk6WzIsMTVdLDI5OlsyLDE1XSwzNDpbMiwxNV0sMzk6WzIsMTVdLDQ0OlsyLDE1XSw0NzpbMiwxNV0sNDg6WzIsMTVdLDUxOlsyLDE1XSw1NTpbMiwxNV0sNjA6WzIsMTVdfSx7NzI6WzEsMTM4XSw3NzpbMSwxMzddfSx7NzI6WzIsMTAwXSw3NzpbMiwxMDBdfSx7MTQ6WzIsMTZdLDE1OlsyLDE2XSwxOTpbMiwxNl0sMjk6WzIsMTZdLDM0OlsyLDE2XSw0NDpbMiwxNl0sNDc6WzIsMTZdLDQ4OlsyLDE2XSw1MTpbMiwxNl0sNTU6WzIsMTZdLDYwOlsyLDE2XX0sezMzOlsxLDEzOV19LHszMzpbMiw3NV19LHszMzpbMiwzMl19LHs3MjpbMiwxMDFdLDc3OlsyLDEwMV19LHsxNDpbMiwxN10sMTU6WzIsMTddLDE5OlsyLDE3XSwyOTpbMiwxN10sMzQ6WzIsMTddLDM5OlsyLDE3XSw0NDpbMiwxN10sNDc6WzIsMTddLDQ4OlsyLDE3XSw1MTpbMiwxN10sNTU6WzIsMTddLDYwOlsyLDE3XX1dLFxuZGVmYXVsdEFjdGlvbnM6IHs0OlsyLDFdLDU1OlsyLDU1XSw1NzpbMiwyMF0sNjE6WzIsNTddLDc0OlsyLDgxXSw4MzpbMiw4NV0sODc6WzIsMThdLDkxOlsyLDg5XSwxMDI6WzIsNTNdLDEwNTpbMiw5M10sMTExOlsyLDE5XSwxMTI6WzIsNzddLDExNzpbMiw5N10sMTIwOlsyLDYzXSwxMjM6WzIsNjldLDEyNDpbMiwxMl0sMTM2OlsyLDc1XSwxMzc6WzIsMzJdfSxcbnBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3IgKHN0ciwgaGFzaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xufSxcbnBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgIHZhciBzZWxmID0gdGhpcywgc3RhY2sgPSBbMF0sIHZzdGFjayA9IFtudWxsXSwgbHN0YWNrID0gW10sIHRhYmxlID0gdGhpcy50YWJsZSwgeXl0ZXh0ID0gXCJcIiwgeXlsaW5lbm8gPSAwLCB5eWxlbmcgPSAwLCByZWNvdmVyaW5nID0gMCwgVEVSUk9SID0gMiwgRU9GID0gMTtcbiAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTtcbiAgICB0aGlzLmxleGVyLnl5ID0gdGhpcy55eTtcbiAgICB0aGlzLnl5LmxleGVyID0gdGhpcy5sZXhlcjtcbiAgICB0aGlzLnl5LnBhcnNlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmxleGVyLnl5bGxvYyA9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICB0aGlzLmxleGVyLnl5bGxvYyA9IHt9O1xuICAgIHZhciB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcbiAgICB2YXIgcmFuZ2VzID0gdGhpcy5sZXhlci5vcHRpb25zICYmIHRoaXMubGV4ZXIub3B0aW9ucy5yYW5nZXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yO1xuICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHtcbiAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMiAqIG47XG4gICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjtcbiAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgdG9rZW4gPSBzZWxmLmxleGVyLmxleCgpIHx8IDE7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbiAgICB2YXIgc3ltYm9sLCBwcmVFcnJvclN5bWJvbCwgc3RhdGUsIGFjdGlvbiwgYSwgciwgeXl2YWwgPSB7fSwgcCwgbGVuLCBuZXdTdGF0ZSwgZXhwZWN0ZWQ7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwidW5kZWZpbmVkXCIgfHwgIWFjdGlvbi5sZW5ndGggfHwgIWFjdGlvblswXSkge1xuICAgICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoIXJlY292ZXJpbmcpIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkLnB1c2goXCInXCIgKyB0aGlzLnRlcm1pbmFsc19bcF0gKyBcIidcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXhlci5zaG93UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjpcXG5cIiArIHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKCkgKyBcIlxcbkV4cGVjdGluZyBcIiArIGV4cGVjdGVkLmpvaW4oXCIsIFwiKSArIFwiLCBnb3QgJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSBcIlBhcnNlIGVycm9yIG9uIGxpbmUgXCIgKyAoeXlsaW5lbm8gKyAxKSArIFwiOiBVbmV4cGVjdGVkIFwiICsgKHN5bWJvbCA9PSAxP1wiZW5kIG9mIGlucHV0XCI6XCInXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge3RleHQ6IHRoaXMubGV4ZXIubWF0Y2gsIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsIGxpbmU6IHRoaXMubGV4ZXIueXlsaW5lbm8sIGxvYzogeXlsb2MsIGV4cGVjdGVkOiBleHBlY3RlZH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6IFwiICsgc3RhdGUgKyBcIiwgdG9rZW46IFwiICsgc3ltYm9sKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh0aGlzLmxleGVyLnl5bGxvYyk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7XG4gICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFwcmVFcnJvclN5bWJvbCkge1xuICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgIHl5dGV4dCA9IHRoaXMubGV4ZXIueXl0ZXh0O1xuICAgICAgICAgICAgICAgIHl5bGluZW5vID0gdGhpcy5sZXhlci55eWxpbmVubztcbiAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMClcbiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcmluZy0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgbGVuID0gdGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVsxXTtcbiAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XG4gICAgICAgICAgICB5eXZhbC5fJCA9IHtmaXJzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2xpbmUsIGxhc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2xpbmUsIGZpcnN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9jb2x1bW4sIGxhc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfY29sdW1ufTtcbiAgICAgICAgICAgIGlmIChyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB5eXZhbC5fJC5yYW5nZSA9IFtsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLCBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLnJhbmdlWzFdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh5eXZhbCwgeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB0aGlzLnl5LCBhY3Rpb25bMV0sIHZzdGFjaywgbHN0YWNrKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcbiAgICAgICAgICAgICAgICB2c3RhY2sgPSB2c3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMF0pO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDJdXVtzdGFja1tzdGFjay5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbn07XG4vKiBKaXNvbiBnZW5lcmF0ZWQgbGV4ZXIgKi9cbnZhciBsZXhlciA9IChmdW5jdGlvbigpe1xudmFyIGxleGVyID0gKHtFT0Y6MSxcbnBhcnNlRXJyb3I6ZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyKSB7XG4gICAgICAgICAgICB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgfVxuICAgIH0sXG5zZXRJbnB1dDpmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2xlc3MgPSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55eWxpbmVubyA9IHRoaXMueXlsZW5nID0gMDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZToxLGZpcnN0X2NvbHVtbjowLGxhc3RfbGluZToxLGxhc3RfY29sdW1uOjB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwwXTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuaW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG4gICAgICAgIHRoaXMueXlsZW5nKys7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG4gICAgICAgIHRoaXMubWF0Y2hlZCArPSBjaDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICBpZiAobGluZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4rKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2VbMV0rKztcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKDEpO1xuICAgICAgICByZXR1cm4gY2g7XG4gICAgfSxcbnVucHV0OmZ1bmN0aW9uIChjaCkge1xuICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoLWxlbi0xKTtcbiAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGgtMSk7XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aC0xKTtcblxuICAgICAgICBpZiAobGluZXMubGVuZ3RoLTEpIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoLTE7XG4gICAgICAgIHZhciByID0gdGhpcy55eWxsb2MucmFuZ2U7XG5cbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSxcbiAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgP1xuICAgICAgICAgICAgICAobGluZXMubGVuZ3RoID09PSBvbGRMaW5lcy5sZW5ndGggPyB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gOiAwKSArIG9sZExpbmVzW29sZExpbmVzLmxlbmd0aCAtIGxpbmVzLmxlbmd0aF0ubGVuZ3RoIC0gbGluZXNbMF0ubGVuZ3RoOlxuICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW5cbiAgICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5tb3JlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5sZXNzOmZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHRoaXMudW5wdXQodGhpcy5tYXRjaC5zbGljZShuKSk7XG4gICAgfSxcbnBhc3RJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gKHBhc3QubGVuZ3RoID4gMjAgPyAnLi4uJzonJykgKyBwYXN0LnN1YnN0cigtMjApLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICB9LFxudXBjb21pbmdJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5tYXRjaDtcbiAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcbiAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwLW5leHQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG5leHQuc3Vic3RyKDAsMjApKyhuZXh0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcbnNob3dQb3NpdGlvbjpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xuICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XG4gICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjK1wiXlwiO1xuICAgIH0sXG5uZXh0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgdmFyIHRva2VuLFxuICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICB0ZW1wTWF0Y2gsXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgIGxpbmVzO1xuICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gJyc7XG4gICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG4gICAgICAgIGZvciAodmFyIGk9MDtpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRlbXBNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKHRoaXMucnVsZXNbcnVsZXNbaV1dKTtcbiAgICAgICAgICAgIGlmICh0ZW1wTWF0Y2ggJiYgKCFtYXRjaCB8fCB0ZW1wTWF0Y2hbMF0ubGVuZ3RoID4gbWF0Y2hbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVtcE1hdGNoO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5mbGV4KSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGxpbmVzID0gbWF0Y2hbMF0ubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICAgICAgaWYgKGxpbmVzKSB0aGlzLnl5bGluZW5vICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubysxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/IGxpbmVzW2xpbmVzLmxlbmd0aC0xXS5sZW5ndGgtbGluZXNbbGluZXMubGVuZ3RoLTFdLm1hdGNoKC9cXHI/XFxuPy8pWzBdLmxlbmd0aCA6IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uICsgbWF0Y2hbMF0ubGVuZ3RofTtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2luZGV4XSx0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnKyh0aGlzLnl5bGluZW5vKzEpKycuIFVucmVjb2duaXplZCB0ZXh0LlxcbicrdGhpcy5zaG93UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAge3RleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vfSk7XG4gICAgICAgIH1cbiAgICB9LFxubGV4OmZ1bmN0aW9uIGxleCAoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgICAgIH1cbiAgICB9LFxuYmVnaW46ZnVuY3Rpb24gYmVnaW4gKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcbiAgICB9LFxucG9wU3RhdGU6ZnVuY3Rpb24gcG9wU3RhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5wb3AoKTtcbiAgICB9LFxuX2N1cnJlbnRSdWxlczpmdW5jdGlvbiBfY3VycmVudFJ1bGVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdXS5ydWxlcztcbiAgICB9LFxudG9wU3RhdGU6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0yXTtcbiAgICB9LFxucHVzaFN0YXRlOmZ1bmN0aW9uIGJlZ2luIChjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5iZWdpbihjb25kaXRpb24pO1xuICAgIH19KTtcbmxleGVyLm9wdGlvbnMgPSB7fTtcbmxleGVyLnBlcmZvcm1BY3Rpb24gPSBmdW5jdGlvbiBhbm9ueW1vdXMoeXkseXlfLCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMsWVlfU1RBUlRcbikge1xuXG5cbmZ1bmN0aW9uIHN0cmlwKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cmluZyhzdGFydCwgeXlfLnl5bGVuZyAtIGVuZCArIHN0YXJ0KTtcbn1cblxuXG52YXIgWVlTVEFURT1ZWV9TVEFSVFxuc3dpdGNoKCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMpIHtcbmNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeXlfLnl5dGV4dC5zbGljZSgtMikgPT09IFwiXFxcXFxcXFxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoeXlfLnl5dGV4dC5zbGljZSgtMSkgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwiZW11XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih5eV8ueXl0ZXh0KSByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAxOnJldHVybiAxNTtcbmJyZWFrO1xuY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDM6dGhpcy5iZWdpbigncmF3Jyk7IHJldHVybiAxNTtcbmJyZWFrO1xuY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG91bGQgYmUgdXNpbmcgYHRoaXMudG9wU3RhdGUoKWAgYmVsb3csIGJ1dCBpdCBjdXJyZW50bHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIHRoZSBzZWNvbmQgdG9wIGluc3RlYWQgb2YgdGhlIGZpcnN0IHRvcC4gT3BlbmVkIGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXNzdWUgYWJvdXQgaXQgYXQgaHR0cHM6Ly9naXRodWIuY29tL3phYWNoL2ppc29uL2lzc3Vlcy8yOTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXSA9PT0gJ3JhdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoNSwgOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VORF9SQVdfQkxPQ0snO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDU6IHJldHVybiAxNTsgXG5icmVhaztcbmNhc2UgNjpcbiAgdGhpcy5wb3BTdGF0ZSgpO1xuICByZXR1cm4gMTQ7XG5cbmJyZWFrO1xuY2FzZSA3OnJldHVybiA2NTtcbmJyZWFrO1xuY2FzZSA4OnJldHVybiA2ODtcbmJyZWFrO1xuY2FzZSA5OiByZXR1cm4gMTk7IFxuYnJlYWs7XG5jYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAxMTpyZXR1cm4gNTU7XG5icmVhaztcbmNhc2UgMTI6cmV0dXJuIDYwO1xuYnJlYWs7XG5jYXNlIDEzOnJldHVybiAyOTtcbmJyZWFrO1xuY2FzZSAxNDpyZXR1cm4gNDc7XG5icmVhaztcbmNhc2UgMTU6dGhpcy5wb3BTdGF0ZSgpOyByZXR1cm4gNDQ7XG5icmVhaztcbmNhc2UgMTY6dGhpcy5wb3BTdGF0ZSgpOyByZXR1cm4gNDQ7XG5icmVhaztcbmNhc2UgMTc6cmV0dXJuIDM0O1xuYnJlYWs7XG5jYXNlIDE4OnJldHVybiAzOTtcbmJyZWFrO1xuY2FzZSAxOTpyZXR1cm4gNTE7XG5icmVhaztcbmNhc2UgMjA6cmV0dXJuIDQ4O1xuYnJlYWs7XG5jYXNlIDIxOlxuICB0aGlzLnVucHV0KHl5Xy55eXRleHQpO1xuICB0aGlzLnBvcFN0YXRlKCk7XG4gIHRoaXMuYmVnaW4oJ2NvbScpO1xuXG5icmVhaztcbmNhc2UgMjI6XG4gIHRoaXMucG9wU3RhdGUoKTtcbiAgcmV0dXJuIDE0O1xuXG5icmVhaztcbmNhc2UgMjM6cmV0dXJuIDQ4O1xuYnJlYWs7XG5jYXNlIDI0OnJldHVybiA3MztcbmJyZWFrO1xuY2FzZSAyNTpyZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgMjY6cmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDI3OnJldHVybiA4NztcbmJyZWFrO1xuY2FzZSAyODovLyBpZ25vcmUgd2hpdGVzcGFjZVxuYnJlYWs7XG5jYXNlIDI5OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDU0O1xuYnJlYWs7XG5jYXNlIDMwOnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDMzO1xuYnJlYWs7XG5jYXNlIDMxOnl5Xy55eXRleHQgPSBzdHJpcCgxLDIpLnJlcGxhY2UoL1xcXFxcIi9nLCdcIicpOyByZXR1cm4gODA7XG5icmVhaztcbmNhc2UgMzI6eXlfLnl5dGV4dCA9IHN0cmlwKDEsMikucmVwbGFjZSgvXFxcXCcvZyxcIidcIik7IHJldHVybiA4MDtcbmJyZWFrO1xuY2FzZSAzMzpyZXR1cm4gODU7XG5icmVhaztcbmNhc2UgMzQ6cmV0dXJuIDgyO1xuYnJlYWs7XG5jYXNlIDM1OnJldHVybiA4MjtcbmJyZWFrO1xuY2FzZSAzNjpyZXR1cm4gODM7XG5icmVhaztcbmNhc2UgMzc6cmV0dXJuIDg0O1xuYnJlYWs7XG5jYXNlIDM4OnJldHVybiA4MTtcbmJyZWFrO1xuY2FzZSAzOTpyZXR1cm4gNzU7XG5icmVhaztcbmNhc2UgNDA6cmV0dXJuIDc3O1xuYnJlYWs7XG5jYXNlIDQxOnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSA0Mjp5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5yZXBsYWNlKC9cXFxcKFtcXFxcXFxdXSkvZywnJDEnKTsgcmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDQzOnJldHVybiAnSU5WQUxJRCc7XG5icmVhaztcbmNhc2UgNDQ6cmV0dXJuIDU7XG5icmVhaztcbn1cbn07XG5sZXhlci5ydWxlcyA9IFsvXig/OlteXFx4MDBdKj8oPz0oXFx7XFx7KSkpLywvXig/OlteXFx4MDBdKykvLC9eKD86W15cXHgwMF17Mix9Pyg/PShcXHtcXHt8XFxcXFxce1xce3xcXFxcXFxcXFxce1xce3wkKSkpLywvXig/Olxce1xce1xce1xceyg/PVteXFwvXSkpLywvXig/Olxce1xce1xce1xce1xcL1teXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz1bPX1cXHNcXC8uXSlcXH1cXH1cXH1cXH0pLywvXig/OlteXFx4MDBdKj8oPz0oXFx7XFx7XFx7XFx7KSkpLywvXig/OltcXHNcXFNdKj8tLSh+KT9cXH1cXH0pLywvXig/OlxcKCkvLC9eKD86XFwpKS8sL14oPzpcXHtcXHtcXHtcXHspLywvXig/OlxcfVxcfVxcfVxcfSkvLC9eKD86XFx7XFx7KH4pPz4pLywvXig/Olxce1xceyh+KT8jPikvLC9eKD86XFx7XFx7KH4pPyNcXCo/KS8sL14oPzpcXHtcXHsofik/XFwvKS8sL14oPzpcXHtcXHsofik/XFxeXFxzKih+KT9cXH1cXH0pLywvXig/Olxce1xceyh+KT9cXHMqZWxzZVxccyoofik/XFx9XFx9KS8sL14oPzpcXHtcXHsofik/XFxeKS8sL14oPzpcXHtcXHsofik/XFxzKmVsc2VcXGIpLywvXig/Olxce1xceyh+KT9cXHspLywvXig/Olxce1xceyh+KT8mKS8sL14oPzpcXHtcXHsofik/IS0tKS8sL14oPzpcXHtcXHsofik/IVtcXHNcXFNdKj9cXH1cXH0pLywvXig/Olxce1xceyh+KT9cXCo/KS8sL14oPzo9KS8sL14oPzpcXC5cXC4pLywvXig/OlxcLig/PShbPX59XFxzXFwvLil8XSkpKS8sL14oPzpbXFwvLl0pLywvXig/OlxccyspLywvXig/OlxcfSh+KT9cXH1cXH0pLywvXig/Oih+KT9cXH1cXH0pLywvXig/OlwiKFxcXFxbXCJdfFteXCJdKSpcIikvLC9eKD86JyhcXFxcWyddfFteJ10pKicpLywvXig/OkApLywvXig/OnRydWUoPz0oW359XFxzKV0pKSkvLC9eKD86ZmFsc2UoPz0oW359XFxzKV0pKSkvLC9eKD86dW5kZWZpbmVkKD89KFt+fVxccyldKSkpLywvXig/Om51bGwoPz0oW359XFxzKV0pKSkvLC9eKD86LT9bMC05XSsoPzpcXC5bMC05XSspPyg/PShbfn1cXHMpXSkpKS8sL14oPzphc1xccytcXHwpLywvXig/OlxcfCkvLC9eKD86KFteXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz0oWz1+fVxcc1xcLy4pfF0pKSkpLywvXig/OlxcWyhcXFxcXFxdfFteXFxdXSkqXFxdKS8sL14oPzouKS8sL14oPzokKS9dO1xubGV4ZXIuY29uZGl0aW9ucyA9IHtcIm11XCI6e1wicnVsZXNcIjpbNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDRdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwiZW11XCI6e1wicnVsZXNcIjpbMl0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJjb21cIjp7XCJydWxlc1wiOls2XSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcInJhd1wiOntcInJ1bGVzXCI6WzMsNCw1XSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcIklOSVRJQUxcIjp7XCJydWxlc1wiOlswLDEsNDRdLFwiaW5jbHVzaXZlXCI6dHJ1ZX19O1xucmV0dXJuIGxleGVyO30pKClcbnBhcnNlci5sZXhlciA9IGxleGVyO1xuZnVuY3Rpb24gUGFyc2VyICgpIHsgdGhpcy55eSA9IHt9OyB9UGFyc2VyLnByb3RvdHlwZSA9IHBhcnNlcjtwYXJzZXIuUGFyc2VyID0gUGFyc2VyO1xucmV0dXJuIG5ldyBQYXJzZXI7XG59KSgpO2V4cG9ydCBkZWZhdWx0IGhhbmRsZWJhcnM7XG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpIHtcbiAgY2xvc2UgPSBjbG9zZS5wYXRoID8gY2xvc2UucGF0aC5vcmlnaW5hbCA6IGNsb3NlO1xuXG4gIGlmIChvcGVuLnBhdGgub3JpZ2luYWwgIT09IGNsb3NlKSB7XG4gICAgbGV0IGVycm9yTm9kZSA9IHtsb2M6IG9wZW4ucGF0aC5sb2N9O1xuXG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihvcGVuLnBhdGgub3JpZ2luYWwgKyBcIiBkb2Vzbid0IG1hdGNoIFwiICsgY2xvc2UsIGVycm9yTm9kZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNvdXJjZUxvY2F0aW9uKHNvdXJjZSwgbG9jSW5mbykge1xuICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgdGhpcy5zdGFydCA9IHtcbiAgICBsaW5lOiBsb2NJbmZvLmZpcnN0X2xpbmUsXG4gICAgY29sdW1uOiBsb2NJbmZvLmZpcnN0X2NvbHVtblxuICB9O1xuICB0aGlzLmVuZCA9IHtcbiAgICBsaW5lOiBsb2NJbmZvLmxhc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8ubGFzdF9jb2x1bW5cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlkKHRva2VuKSB7XG4gIGlmICgvXlxcWy4qXFxdJC8udGVzdCh0b2tlbikpIHtcbiAgICByZXR1cm4gdG9rZW4uc3Vic3RyaW5nKDEsIHRva2VuLmxlbmd0aCAtIDEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xuICByZXR1cm4ge1xuICAgIG9wZW46IG9wZW4uY2hhckF0KDIpID09PSAnficsXG4gICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcENvbW1lbnQoY29tbWVudCkge1xuICByZXR1cm4gY29tbWVudC5yZXBsYWNlKC9eXFx7XFx7fj8hLT8tPy8sICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8tPy0/fj9cXH1cXH0kLywgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVBhdGgoZGF0YSwgcGFydHMsIGxvYykge1xuICBsb2MgPSB0aGlzLmxvY0luZm8obG9jKTtcblxuICBsZXQgb3JpZ2luYWwgPSBkYXRhID8gJ0AnIDogJycsXG4gICAgICBkaWcgPSBbXSxcbiAgICAgIGRlcHRoID0gMDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBwYXJ0ID0gcGFydHNbaV0ucGFydCxcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBbXSBzeW50YXggdGhlbiB3ZSBkbyBub3QgdHJlYXQgcGF0aCByZWZlcmVuY2VzIGFzIG9wZXJhdG9ycyxcbiAgICAgICAgLy8gaS5lLiBmb28uW3RoaXNdIHJlc29sdmVzIHRvIGFwcHJveGltYXRlbHkgY29udGV4dC5mb29bJ3RoaXMnXVxuICAgICAgICBpc0xpdGVyYWwgPSBwYXJ0c1tpXS5vcmlnaW5hbCAhPT0gcGFydDtcbiAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XG5cbiAgICBpZiAoIWlzTGl0ZXJhbCAmJiAocGFydCA9PT0gJy4uJyB8fCBwYXJ0ID09PSAnLicgfHwgcGFydCA9PT0gJ3RoaXMnKSkge1xuICAgICAgaWYgKGRpZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0ludmFsaWQgcGF0aDogJyArIG9yaWdpbmFsLCB7bG9jfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlnLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuICAgIGRhdGEsXG4gICAgZGVwdGgsXG4gICAgcGFydHM6IGRpZyxcbiAgICBvcmlnaW5hbCxcbiAgICBsb2NcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XG4gIC8vIE11c3QgdXNlIGNoYXJBdCB0byBzdXBwb3J0IElFIHByZS0xMFxuICBsZXQgZXNjYXBlRmxhZyA9IG9wZW4uY2hhckF0KDMpIHx8IG9wZW4uY2hhckF0KDIpLFxuICAgICAgZXNjYXBlZCA9IGVzY2FwZUZsYWcgIT09ICd7JyAmJiBlc2NhcGVGbGFnICE9PSAnJic7XG5cbiAgbGV0IGRlY29yYXRvciA9ICgvXFwqLy50ZXN0KG9wZW4pKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXG4gICAgcGF0aCxcbiAgICBwYXJhbXMsXG4gICAgaGFzaCxcbiAgICBlc2NhcGVkLFxuICAgIHN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUmF3QmxvY2sob3BlblJhd0Jsb2NrLCBjb250ZW50cywgY2xvc2UsIGxvY0luZm8pIHtcbiAgdmFsaWRhdGVDbG9zZShvcGVuUmF3QmxvY2ssIGNsb3NlKTtcblxuICBsb2NJbmZvID0gdGhpcy5sb2NJbmZvKGxvY0luZm8pO1xuICBsZXQgcHJvZ3JhbSA9IHtcbiAgICB0eXBlOiAnUHJvZ3JhbScsXG4gICAgYm9keTogY29udGVudHMsXG4gICAgc3RyaXA6IHt9LFxuICAgIGxvYzogbG9jSW5mb1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuUmF3QmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5SYXdCbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlblJhd0Jsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBvcGVuU3RyaXA6IHt9LFxuICAgIGludmVyc2VTdHJpcDoge30sXG4gICAgY2xvc2VTdHJpcDoge30sXG4gICAgbG9jOiBsb2NJbmZvXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQmxvY2sob3BlbkJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlQW5kUHJvZ3JhbSwgY2xvc2UsIGludmVydGVkLCBsb2NJbmZvKSB7XG4gIGlmIChjbG9zZSAmJiBjbG9zZS5wYXRoKSB7XG4gICAgdmFsaWRhdGVDbG9zZShvcGVuQmxvY2ssIGNsb3NlKTtcbiAgfVxuXG4gIGxldCBkZWNvcmF0b3IgPSAoL1xcKi8udGVzdChvcGVuQmxvY2sub3BlbikpO1xuXG4gIHByb2dyYW0uYmxvY2tQYXJhbXMgPSBvcGVuQmxvY2suYmxvY2tQYXJhbXM7XG5cbiAgbGV0IGludmVyc2UsXG4gICAgICBpbnZlcnNlU3RyaXA7XG5cbiAgaWYgKGludmVyc2VBbmRQcm9ncmFtKSB7XG4gICAgaWYgKGRlY29yYXRvcikge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5leHBlY3RlZCBpbnZlcnNlIGJsb2NrIG9uIGRlY29yYXRvcicsIGludmVyc2VBbmRQcm9ncmFtKTtcbiAgICB9XG5cbiAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcbiAgICAgIGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW0uYm9keVswXS5jbG9zZVN0cmlwID0gY2xvc2Uuc3RyaXA7XG4gICAgfVxuXG4gICAgaW52ZXJzZVN0cmlwID0gaW52ZXJzZUFuZFByb2dyYW0uc3RyaXA7XG4gICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XG4gIH1cblxuICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICBpbnZlcnRlZCA9IGludmVyc2U7XG4gICAgaW52ZXJzZSA9IHByb2dyYW07XG4gICAgcHJvZ3JhbSA9IGludmVydGVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuQmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5CbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBpbnZlcnNlLFxuICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxuICAgIGludmVyc2VTdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVByb2dyYW0oc3RhdGVtZW50cywgbG9jKSB7XG4gIGlmICghbG9jICYmIHN0YXRlbWVudHMubGVuZ3RoKSB7XG4gICAgY29uc3QgZmlyc3RMb2MgPSBzdGF0ZW1lbnRzWzBdLmxvYyxcbiAgICAgICAgICBsYXN0TG9jID0gc3RhdGVtZW50c1tzdGF0ZW1lbnRzLmxlbmd0aCAtIDFdLmxvYztcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGZpcnN0TG9jICYmIGxhc3RMb2MpIHtcbiAgICAgIGxvYyA9IHtcbiAgICAgICAgc291cmNlOiBmaXJzdExvYy5zb3VyY2UsXG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgbGluZTogZmlyc3RMb2Muc3RhcnQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGZpcnN0TG9jLnN0YXJ0LmNvbHVtblxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBsaW5lOiBsYXN0TG9jLmVuZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogbGFzdExvYy5lbmQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUHJvZ3JhbScsXG4gICAgYm9keTogc3RhdGVtZW50cyxcbiAgICBzdHJpcDoge30sXG4gICAgbG9jOiBsb2NcbiAgfTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVBhcnRpYWxCbG9jayhvcGVuLCBwcm9ncmFtLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxuICAgIG5hbWU6IG9wZW4ucGF0aCxcbiAgICBwYXJhbXM6IG9wZW4ucGFyYW1zLFxuICAgIGhhc2g6IG9wZW4uaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDogb3Blbi5zdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuXG4iLCJpbXBvcnQgVmlzaXRvciBmcm9tICcuL3Zpc2l0b3InO1xuXG5mdW5jdGlvbiBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zID0ge30pIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBWaXNpdG9yKCk7XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICBjb25zdCBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XG5cbiAgbGV0IGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XG4gIHRoaXMuaXNSb290U2VlbiA9IHRydWU7XG5cbiAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHk7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgY3VycmVudCA9IGJvZHlbaV0sXG4gICAgICAgIHN0cmlwID0gdGhpcy5hY2NlcHQoY3VycmVudCk7XG5cbiAgICBpZiAoIXN0cmlwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgX2lzUHJldldoaXRlc3BhY2UgPSBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXG4gICAgICAgIF9pc05leHRXaGl0ZXNwYWNlID0gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuXG4gICAgICAgIG9wZW5TdGFuZGFsb25lID0gc3RyaXAub3BlblN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UsXG4gICAgICAgIGNsb3NlU3RhbmRhbG9uZSA9IHN0cmlwLmNsb3NlU3RhbmRhbG9uZSAmJiBfaXNOZXh0V2hpdGVzcGFjZSxcbiAgICAgICAgaW5saW5lU3RhbmRhbG9uZSA9IHN0cmlwLmlubGluZVN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UgJiYgX2lzTmV4dFdoaXRlc3BhY2U7XG5cbiAgICBpZiAoc3RyaXAuY2xvc2UpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgaW5saW5lU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG4gICAgICBpZiAob21pdExlZnQoYm9keSwgaSkpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhbmRhbG9uZSBub2RlLCBzYXZlIHRoZSBpbmRlbnQgaW5mbyBmb3IgcGFydGlhbHNcbiAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ1BhcnRpYWxTdGF0ZW1lbnQnKSB7XG4gICAgICAgICAgLy8gUHVsbCBvdXQgdGhlIHdoaXRlc3BhY2UgZnJvbSB0aGUgZmluYWwgbGluZVxuICAgICAgICAgIGN1cnJlbnQuaW5kZW50ID0gKC8oWyBcXHRdKyQpLykuZXhlYyhib2R5W2kgLSAxXS5vcmlnaW5hbClbMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBvcGVuU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KChjdXJyZW50LnByb2dyYW0gfHwgY3VycmVudC5pbnZlcnNlKS5ib2R5KTtcblxuICAgICAgLy8gU3RyaXAgb3V0IHRoZSBwcmV2aW91cyBjb250ZW50IG5vZGUgaWYgaXQncyB3aGl0ZXNwYWNlIG9ubHlcbiAgICAgIG9taXRMZWZ0KGJvZHksIGkpO1xuICAgIH1cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIGNsb3NlU3RhbmRhbG9uZSkge1xuICAgICAgLy8gQWx3YXlzIHN0cmlwIHRoZSBuZXh0IG5vZGVcbiAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuICAgICAgb21pdExlZnQoKGN1cnJlbnQuaW52ZXJzZSB8fCBjdXJyZW50LnByb2dyYW0pLmJvZHkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9ncmFtO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3JCbG9jayA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG4gIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuXG4gIC8vIEZpbmQgdGhlIGludmVyc2UgcHJvZ3JhbSB0aGF0IGlzIGludm9sZWQgd2l0aCB3aGl0ZXNwYWNlIHN0cmlwcGluZy5cbiAgbGV0IHByb2dyYW0gPSBibG9jay5wcm9ncmFtIHx8IGJsb2NrLmludmVyc2UsXG4gICAgICBpbnZlcnNlID0gYmxvY2sucHJvZ3JhbSAmJiBibG9jay5pbnZlcnNlLFxuICAgICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZSxcbiAgICAgIGxhc3RJbnZlcnNlID0gaW52ZXJzZTtcblxuICBpZiAoaW52ZXJzZSAmJiBpbnZlcnNlLmNoYWluZWQpIHtcbiAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLmJvZHlbMF0ucHJvZ3JhbTtcblxuICAgIC8vIFdhbGsgdGhlIGludmVyc2UgY2hhaW4gdG8gZmluZCB0aGUgbGFzdCBpbnZlcnNlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhlIGNoYWluLlxuICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XG4gICAgICBsYXN0SW52ZXJzZSA9IGxhc3RJbnZlcnNlLmJvZHlbbGFzdEludmVyc2UuYm9keS5sZW5ndGggLSAxXS5wcm9ncmFtO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdHJpcCA9IHtcbiAgICBvcGVuOiBibG9jay5vcGVuU3RyaXAub3BlbixcbiAgICBjbG9zZTogYmxvY2suY2xvc2VTdHJpcC5jbG9zZSxcblxuICAgIC8vIERldGVybWluZSB0aGUgc3RhbmRhbG9uZSBjYW5kaWFjeS4gQmFzaWNhbGx5IGZsYWcgb3VyIGNvbnRlbnQgYXMgYmVpbmcgcG9zc2libHkgc3RhbmRhbG9uZVxuICAgIC8vIHNvIG91ciBwYXJlbnQgY2FuIGRldGVybWluZSBpZiB3ZSBhY3R1YWxseSBhcmUgc3RhbmRhbG9uZVxuICAgIG9wZW5TdGFuZGFsb25lOiBpc05leHRXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSksXG4gICAgY2xvc2VTdGFuZGFsb25lOiBpc1ByZXZXaGl0ZXNwYWNlKChmaXJzdEludmVyc2UgfHwgcHJvZ3JhbSkuYm9keSlcbiAgfTtcblxuICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XG4gICAgb21pdFJpZ2h0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoaW52ZXJzZSkge1xuICAgIGxldCBpbnZlcnNlU3RyaXAgPSBibG9jay5pbnZlcnNlU3RyaXA7XG5cbiAgICBpZiAoaW52ZXJzZVN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGludmVyc2VTdHJpcC5jbG9zZSkge1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLmNsb3NlU3RyaXAub3Blbikge1xuICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBzdGFuZGFsb25lIGVsc2Ugc3RhdG1lbnRzXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlU3RhbmRhbG9uZVxuICAgICAgICAmJiBpc1ByZXZXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSlcbiAgICAgICAgJiYgaXNOZXh0V2hpdGVzcGFjZShmaXJzdEludmVyc2UuYm9keSkpIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSk7XG4gICAgICBvbWl0UmlnaHQoZmlyc3RJbnZlcnNlLmJvZHkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcbiAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlwO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihtdXN0YWNoZSkge1xuICByZXR1cm4gbXVzdGFjaGUuc3RyaXA7XG59O1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9XG4gICAgV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XG4gIHJldHVybiB7XG4gICAgaW5saW5lU3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBvcGVuOiBzdHJpcC5vcGVuLFxuICAgIGNsb3NlOiBzdHJpcC5jbG9zZVxuICB9O1xufTtcblxuXG5mdW5jdGlvbiBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IGJvZHkubGVuZ3RoO1xuICB9XG5cbiAgLy8gTm9kZXMgdGhhdCBlbmQgd2l0aCBuZXdsaW5lcyBhcmUgY29uc2lkZXJlZCB3aGl0ZXNwYWNlIChidXQgYXJlIHNwZWNpYWxcbiAgLy8gY2FzZWQgZm9yIHN0cmlwIG9wZXJhdGlvbnMpXG4gIGxldCBwcmV2ID0gYm9keVtpIC0gMV0sXG4gICAgICBzaWJsaW5nID0gYm9keVtpIC0gMl07XG4gIGlmICghcHJldikge1xuICAgIHJldHVybiBpc1Jvb3Q7XG4gIH1cblxuICBpZiAocHJldi50eXBlID09PSAnQ29udGVudFN0YXRlbWVudCcpIHtcbiAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/ICgvXFxyP1xcblxccyo/JC8pIDogKC8oXnxcXHI/XFxuKVxccyo/JC8pKS50ZXN0KHByZXYub3JpZ2luYWwpO1xuICB9XG59XG5mdW5jdGlvbiBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IC0xO1xuICB9XG5cbiAgbGV0IG5leHQgPSBib2R5W2kgKyAxXSxcbiAgICAgIHNpYmxpbmcgPSBib2R5W2kgKyAyXTtcbiAgaWYgKCFuZXh0KSB7XG4gICAgcmV0dXJuIGlzUm9vdDtcbiAgfVxuXG4gIGlmIChuZXh0LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gKC9eXFxzKj9cXHI/XFxuLykgOiAoL15cXHMqPyhcXHI/XFxufCQpLykpLnRlc3QobmV4dC5vcmlnaW5hbCk7XG4gIH1cbn1cblxuLy8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiB7e2Zvb319JyAnIHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cbi8vXG4vLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxuLy8gY29udGVudCBpcyBtZXQuXG5mdW5jdGlvbiBvbWl0UmlnaHQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IDAgOiBpICsgMV07XG4gIGlmICghY3VycmVudCB8fCBjdXJyZW50LnR5cGUgIT09ICdDb250ZW50U3RhdGVtZW50JyB8fCAoIW11bHRpcGxlICYmIGN1cnJlbnQucmlnaHRTdHJpcHBlZCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gKC9eXFxzKy8pIDogKC9eWyBcXHRdKlxccj9cXG4/LyksICcnKTtcbiAgY3VycmVudC5yaWdodFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XG59XG5cbi8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSBsZWZ0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiAnICd7e2Zvb319IHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCB0aGVuIHRoZSBsYXN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXG4vL1xuLy8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcbi8vIGNvbnRlbnQgaXMgbWV0LlxuZnVuY3Rpb24gb21pdExlZnQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IGJvZHkubGVuZ3RoIC0gMSA6IGkgLSAxXTtcbiAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICghbXVsdGlwbGUgJiYgY3VycmVudC5sZWZ0U3RyaXBwZWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VlZGVkIGJ5IGEgbm9uLWNvbnRlbnQgbm9kZS5cbiAgbGV0IG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcbiAgY3VycmVudC52YWx1ZSA9IGN1cnJlbnQudmFsdWUucmVwbGFjZShtdWx0aXBsZSA/ICgvXFxzKyQvKSA6ICgvWyBcXHRdKyQvKSwgJycpO1xuICBjdXJyZW50LmxlZnRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xuICByZXR1cm4gY3VycmVudC5sZWZ0U3RyaXBwZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoaXRlc3BhY2VDb250cm9sO1xuIiwiLyogZ2xvYmFsIGRlZmluZSAqL1xuaW1wb3J0IHtpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmxldCBTb3VyY2VOb2RlO1xuXG50cnkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhZGVmaW5lLmFtZCkge1xuICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3VzbWUgdGhhdFxuICAgIC8vIHRoZXkgYXJlIHJ1bm5pbmcgb24gdGhlIGJyb3dzZXIgYW5kIHRodXMgaGF2ZSBubyBuZWVkIGZvciB0aGUgc291cmNlLW1hcCBsaWJyYXJ5LlxuICAgIGxldCBTb3VyY2VNYXAgPSByZXF1aXJlKCdzb3VyY2UtbWFwJyk7XG4gICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlO1xuICB9XG59IGNhdGNoIChlcnIpIHtcbiAgLyogTk9QICovXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGVzdGVkIGJ1dCBub3QgY292ZXJlZCBpbiBpc3RhbmJ1bCBkdWUgdG8gZGlzdCBidWlsZCAgKi9cbmlmICghU291cmNlTm9kZSkge1xuICBTb3VyY2VOb2RlID0gZnVuY3Rpb24obGluZSwgY29sdW1uLCBzcmNGaWxlLCBjaHVua3MpIHtcbiAgICB0aGlzLnNyYyA9ICcnO1xuICAgIGlmIChjaHVua3MpIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rcyk7XG4gICAgfVxuICB9O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHtcbiAgICBhZGQ6IGZ1bmN0aW9uKGNodW5rcykge1xuICAgICAgaWYgKGlzQXJyYXkoY2h1bmtzKSkge1xuICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNyYyArPSBjaHVua3M7XG4gICAgfSxcbiAgICBwcmVwZW5kOiBmdW5jdGlvbihjaHVua3MpIHtcbiAgICAgIGlmIChpc0FycmF5KGNodW5rcykpIHtcbiAgICAgICAgY2h1bmtzID0gY2h1bmtzLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgdGhpcy5zcmMgPSBjaHVua3MgKyB0aGlzLnNyYztcbiAgICB9LFxuICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge2NvZGU6IHRoaXMudG9TdHJpbmcoKX07XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zcmM7XG4gICAgfVxuICB9O1xufVxuXG5cbmZ1bmN0aW9uIGNhc3RDaHVuayhjaHVuaywgY29kZUdlbiwgbG9jKSB7XG4gIGlmIChpc0FycmF5KGNodW5rKSkge1xuICAgIGxldCByZXQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XG4gICAgLy8gSGFuZGxlIHByaW1pdGl2ZXMgdGhhdCB0aGUgU291cmNlTm9kZSB3aWxsIHRocm93IHVwIG9uXG4gICAgcmV0dXJuIGNodW5rICsgJyc7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5cbmZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkge1xuICB0aGlzLnNyY0ZpbGUgPSBzcmNGaWxlO1xuICB0aGlzLnNvdXJjZSA9IFtdO1xufVxuXG5Db2RlR2VuLnByb3RvdHlwZSA9IHtcbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuc291cmNlLmxlbmd0aDtcbiAgfSxcbiAgcHJlcGVuZDogZnVuY3Rpb24oc291cmNlLCBsb2MpIHtcbiAgICB0aGlzLnNvdXJjZS51bnNoaWZ0KHRoaXMud3JhcChzb3VyY2UsIGxvYykpO1xuICB9LFxuICBwdXNoOiBmdW5jdGlvbihzb3VyY2UsIGxvYykge1xuICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XG4gIH0sXG5cbiAgbWVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzb3VyY2UgPSB0aGlzLmVtcHR5KCk7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHNvdXJjZS5hZGQoWycgICcsIGxpbmUsICdcXG4nXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcblxuICBlYWNoOiBmdW5jdGlvbihpdGVyKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuc291cmNlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpdGVyKHRoaXMuc291cmNlW2ldKTtcbiAgICB9XG4gIH0sXG5cbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7c3RhcnQ6IHt9fTtcbiAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSk7XG4gIH0sXG4gIHdyYXA6IGZ1bmN0aW9uKGNodW5rLCBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7c3RhcnQ6IHt9fSkge1xuICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcbiAgICAgIHJldHVybiBjaHVuaztcbiAgICB9XG5cbiAgICBjaHVuayA9IGNhc3RDaHVuayhjaHVuaywgdGhpcywgbG9jKTtcblxuICAgIHJldHVybiBuZXcgU291cmNlTm9kZShsb2Muc3RhcnQubGluZSwgbG9jLnN0YXJ0LmNvbHVtbiwgdGhpcy5zcmNGaWxlLCBjaHVuayk7XG4gIH0sXG5cbiAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbihmbiwgdHlwZSwgcGFyYW1zKSB7XG4gICAgcGFyYW1zID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFyYW1zKTtcbiAgICByZXR1cm4gdGhpcy53cmFwKFtmbiwgdHlwZSA/ICcuJyArIHR5cGUgKyAnKCcgOiAnKCcsIHBhcmFtcywgJyknXSk7XG4gIH0sXG5cbiAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJylcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpXG4gICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JykgLy8gUGVyIEVjbWEtMjYyIDcuMyArIDcuOC40XG4gICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5JykgKyAnXCInO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uKG9iaikge1xuICAgIGxldCBwYWlycyA9IFtdO1xuXG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNhc3RDaHVuayhvYmpba2V5XSwgdGhpcyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xuICAgIHJldC5wcmVwZW5kKCd7Jyk7XG4gICAgcmV0LmFkZCgnfScpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cblxuICBnZW5lcmF0ZUxpc3Q6IGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICBsZXQgcmV0ID0gdGhpcy5lbXB0eSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChpKSB7XG4gICAgICAgIHJldC5hZGQoJywnKTtcbiAgICAgIH1cblxuICAgICAgcmV0LmFkZChjYXN0Q2h1bmsoZW50cmllc1tpXSwgdGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24oZW50cmllcykge1xuICAgIGxldCByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcbiAgICByZXQucHJlcGVuZCgnWycpO1xuICAgIHJldC5hZGQoJ10nKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVHZW47XG5cbiIsIi8qIGNvbW1vbi1zaGFrZSByZW1vdmVkOiBleHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9ICovIHJlcXVpcmUoMzcxKS5Tb3VyY2VNYXBHZW5lcmF0b3IsLyogY29tbW9uLXNoYWtlIHJlbW92ZWQ6IGV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSAqLyByZXF1aXJlKDM3MCkuU291cmNlTWFwQ29uc3VtZXIsZXhwb3J0cy5Tb3VyY2VOb2RlPXJlcXVpcmUoMzcyKS5Tb3VyY2VOb2RlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk52ZFhKalpTMXRZWEF1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbkpsY1hWcGNtVWlMQ0pUYjNWeVkyVk5ZWEJIWlc1bGNtRjBiM0lpTENKVGIzVnlZMlZOWVhCRGIyNXpkVzFsY2lJc0lsTnZkWEpqWlU1dlpHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVdEJRU3g1UkVGQk5rSkRMRTlCUVVGQkxFTkJRVkVzTkVKQlFVRXNRMEZCUVN4RFFVRTRRa01zYTBKQlFVRkJMRU5CUTI1RlJpeDNSRUZCTkVKRExFOUJRVUZCTEVOQlFWRXNNa0pCUVVFc1EwRkJRU3hEUVVFMlFrVXNhVUpCUVVGQkxFTkJRMnBGU0N4UFFVRkJRU3hEUVVGUlNTeFZRVUZCUVN4RFFVRmhTQ3hQUVVGQlFTeERRVUZSTEcxQ1FVRkJMRU5CUVVFc1EwRkJjVUpITEZWQlFVRkJMRU5CUVVGQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFgwPSIsIi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cbmltcG9ydCBWaXNpdG9yIGZyb20gJy4vdmlzaXRvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludChhc3QpIHtcbiAgcmV0dXJuIG5ldyBQcmludFZpc2l0b3IoKS5hY2NlcHQoYXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByaW50VmlzaXRvcigpIHtcbiAgdGhpcy5wYWRkaW5nID0gMDtcbn1cblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZSA9IG5ldyBWaXNpdG9yKCk7XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUucGFkID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGxldCBvdXQgPSAnJztcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMucGFkZGluZzsgaSA8IGw7IGkrKykge1xuICAgIG91dCArPSAnICAnO1xuICB9XG5cbiAgb3V0ICs9IHN0cmluZyArICdcXG4nO1xuICByZXR1cm4gb3V0O1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICBsZXQgb3V0ID0gJycsXG4gICAgICBib2R5ID0gcHJvZ3JhbS5ib2R5LFxuICAgICAgaSwgbDtcblxuICBpZiAocHJvZ3JhbS5ibG9ja1BhcmFtcykge1xuICAgIGxldCBibG9ja1BhcmFtcyA9ICdCTE9DSyBQQVJBTVM6IFsnO1xuICAgIGZvciAoaSA9IDAsIGwgPSBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgIGJsb2NrUGFyYW1zICs9ICcgJyArIHByb2dyYW0uYmxvY2tQYXJhbXNbaV07XG4gICAgfVxuICAgIGJsb2NrUGFyYW1zICs9ICcgXSc7XG4gICAgb3V0ICs9IHRoaXMucGFkKGJsb2NrUGFyYW1zKTtcbiAgfVxuXG4gIGZvciAoaSA9IDAsIGwgPSBib2R5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG91dCArPSB0aGlzLmFjY2VwdChib2R5W2ldKTtcbiAgfVxuXG4gIHRoaXMucGFkZGluZy0tO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLk11c3RhY2hlU3RhdGVtZW50ID0gZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgcmV0dXJuIHRoaXMucGFkKCd7eyAnICsgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKSArICcgfX0nKTtcbn07XG5QcmludFZpc2l0b3IucHJvdG90eXBlLkRlY29yYXRvciA9IGZ1bmN0aW9uKG11c3RhY2hlKSB7XG4gIHJldHVybiB0aGlzLnBhZCgne3sgRElSRUNUSVZFICcgKyB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpICsgJyB9fScpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5CbG9ja1N0YXRlbWVudCA9XG5QcmludFZpc2l0b3IucHJvdG90eXBlLkRlY29yYXRvckJsb2NrID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgbGV0IG91dCA9ICcnO1xuXG4gIG91dCArPSB0aGlzLnBhZCgoYmxvY2sudHlwZSA9PT0gJ0RlY29yYXRvckJsb2NrJyA/ICdESVJFQ1RJVkUgJyA6ICcnKSArICdCTE9DSzonKTtcbiAgdGhpcy5wYWRkaW5nKys7XG4gIG91dCArPSB0aGlzLnBhZCh0aGlzLlN1YkV4cHJlc3Npb24oYmxvY2spKTtcbiAgaWYgKGJsb2NrLnByb2dyYW0pIHtcbiAgICBvdXQgKz0gdGhpcy5wYWQoJ1BST0dSQU06Jyk7XG4gICAgdGhpcy5wYWRkaW5nKys7XG4gICAgb3V0ICs9IHRoaXMuYWNjZXB0KGJsb2NrLnByb2dyYW0pO1xuICAgIHRoaXMucGFkZGluZy0tO1xuICB9XG4gIGlmIChibG9jay5pbnZlcnNlKSB7XG4gICAgaWYgKGJsb2NrLnByb2dyYW0pIHsgdGhpcy5wYWRkaW5nKys7IH1cbiAgICBvdXQgKz0gdGhpcy5wYWQoJ3t7Xn19Jyk7XG4gICAgdGhpcy5wYWRkaW5nKys7XG4gICAgb3V0ICs9IHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuICAgIHRoaXMucGFkZGluZy0tO1xuICAgIGlmIChibG9jay5wcm9ncmFtKSB7IHRoaXMucGFkZGluZy0tOyB9XG4gIH1cbiAgdGhpcy5wYWRkaW5nLS07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9IGZ1bmN0aW9uKHBhcnRpYWwpIHtcbiAgbGV0IGNvbnRlbnQgPSAnUEFSVElBTDonICsgcGFydGlhbC5uYW1lLm9yaWdpbmFsO1xuICBpZiAocGFydGlhbC5wYXJhbXNbMF0pIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwucGFyYW1zWzBdKTtcbiAgfVxuICBpZiAocGFydGlhbC5oYXNoKSB7XG4gICAgY29udGVudCArPSAnICcgKyB0aGlzLmFjY2VwdChwYXJ0aWFsLmhhc2gpO1xuICB9XG4gIHJldHVybiB0aGlzLnBhZCgne3s+ICcgKyBjb250ZW50ICsgJyB9fScpO1xufTtcblByaW50VmlzaXRvci5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24ocGFydGlhbCkge1xuICBsZXQgY29udGVudCA9ICdQQVJUSUFMIEJMT0NLOicgKyBwYXJ0aWFsLm5hbWUub3JpZ2luYWw7XG4gIGlmIChwYXJ0aWFsLnBhcmFtc1swXSkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5wYXJhbXNbMF0pO1xuICB9XG4gIGlmIChwYXJ0aWFsLmhhc2gpIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwuaGFzaCk7XG4gIH1cblxuICBjb250ZW50ICs9ICcgJyArIHRoaXMucGFkKCdQUk9HUkFNOicpO1xuICB0aGlzLnBhZGRpbmcrKztcbiAgY29udGVudCArPSB0aGlzLmFjY2VwdChwYXJ0aWFsLnByb2dyYW0pO1xuICB0aGlzLnBhZGRpbmctLTtcblxuICByZXR1cm4gdGhpcy5wYWQoJ3t7PiAnICsgY29udGVudCArICcgfX0nKTtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuQ29udGVudFN0YXRlbWVudCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHRoaXMucGFkKFwiQ09OVEVOVFsgJ1wiICsgY29udGVudC52YWx1ZSArIFwiJyBdXCIpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Db21tZW50U3RhdGVtZW50ID0gZnVuY3Rpb24oY29tbWVudCkge1xuICByZXR1cm4gdGhpcy5wYWQoXCJ7eyEgJ1wiICsgY29tbWVudC52YWx1ZSArIFwiJyB9fVwiKTtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuU3ViRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKHNleHByKSB7XG4gIGxldCBwYXJhbXMgPSBzZXhwci5wYXJhbXMsXG4gICAgICBwYXJhbVN0cmluZ3MgPSBbXSxcbiAgICAgIGhhc2g7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcGFyYW1TdHJpbmdzLnB1c2godGhpcy5hY2NlcHQocGFyYW1zW2ldKSk7XG4gIH1cblxuICBwYXJhbXMgPSAnWycgKyBwYXJhbVN0cmluZ3Muam9pbignLCAnKSArICddJztcblxuICBoYXNoID0gc2V4cHIuaGFzaCA/ICcgJyArIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpIDogJyc7XG5cbiAgcmV0dXJuIHRoaXMuYWNjZXB0KHNleHByLnBhdGgpICsgJyAnICsgcGFyYW1zICsgaGFzaDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuUGF0aEV4cHJlc3Npb24gPSBmdW5jdGlvbihpZCkge1xuICBsZXQgcGF0aCA9IGlkLnBhcnRzLmpvaW4oJy8nKTtcbiAgcmV0dXJuIChpZC5kYXRhID8gJ0AnIDogJycpICsgJ1BBVEg6JyArIHBhdGg7XG59O1xuXG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuU3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICByZXR1cm4gJ1wiJyArIHN0cmluZy52YWx1ZSArICdcIic7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLk51bWJlckxpdGVyYWwgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgcmV0dXJuICdOVU1CRVJ7JyArIG51bWJlci52YWx1ZSArICd9Jztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuQm9vbGVhbkxpdGVyYWwgPSBmdW5jdGlvbihib29sKSB7XG4gIHJldHVybiAnQk9PTEVBTnsnICsgYm9vbC52YWx1ZSArICd9Jztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuVW5kZWZpbmVkTGl0ZXJhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ1VOREVGSU5FRCc7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLk51bGxMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnTlVMTCc7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkhhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gIGxldCBwYWlycyA9IGhhc2gucGFpcnMsXG4gICAgICBqb2luZWRQYWlycyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgam9pbmVkUGFpcnMucHVzaCh0aGlzLmFjY2VwdChwYWlyc1tpXSkpO1xuICB9XG5cbiAgcmV0dXJuICdIQVNIeycgKyBqb2luZWRQYWlycy5qb2luKCcsICcpICsgJ30nO1xufTtcblByaW50VmlzaXRvci5wcm90b3R5cGUuSGFzaFBhaXIgPSBmdW5jdGlvbihwYWlyKSB7XG4gIHJldHVybiBwYWlyLmtleSArICc9JyArIHRoaXMuYWNjZXB0KHBhaXIudmFsdWUpO1xufTtcbi8qIGVzbGludC1lbmFibGUgbmV3LWNhcCAqL1xuIiwiaW1wb3J0IHtleHRlbmR9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICBsZXQgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgbGV0IHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGlmIChmaWVsZCA9PT0gJ2NvbnN0cnVjdG9yJyAmJiAhb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlKGZpZWxkKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG9ialtmaWVsZF07XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHthcHBlbmRDb250ZXh0UGF0aCwgYmxvY2tQYXJhbXMsIGNyZWF0ZUZyYW1lLCBpc0FycmF5LCBpc0Z1bmN0aW9ufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdlYWNoJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG4gICAgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbixcbiAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJldCA9ICcnLFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0UGF0aDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zKFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLCBbY29udGV4dFBhdGggKyBmaWVsZCwgbnVsbF0pXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmlvcktleTtcblxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gY29udGV4dCkge1xuICAgICAgICAgIGlmIChjb250ZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgICAgLy8gdGhlIGxhc3QgaXRlcmF0aW9uIHdpdGhvdXQgaGF2ZSB0byBzY2FuIHRoZSBvYmplY3QgdHdpY2UgYW5kIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYW4gaXRlcm1lZGlhdGUga2V5cyBhcnJheS5cbiAgICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICByZXQgPSBpbnZlcnNlKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufVxuIiwiaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKC8qIFthcmdzLCBdb3B0aW9ucyAqLykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBBIG1pc3NpbmcgZmllbGQgaW4gYSB7e2Zvb319IGNvbnN0cnVjdC5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNvbWVvbmUgaXMgYWN0dWFsbHkgdHJ5aW5nIHRvIGNhbGwgc29tZXRoaW5nLCBibG93IHVwLlxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTWlzc2luZyBoZWxwZXI6IFwiJyArIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0ubmFtZSArICdcIicpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQge2lzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihjb25kaXRpb25hbCkpIHsgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpOyB9XG5cbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlbmRlciB0aGUgcG9zaXRpdmUgcGF0aCBpZiB0aGUgdmFsdWUgaXMgdHJ1dGh5IGFuZCBub3QgZW1wdHkuXG4gICAgLy8gVGhlIGBpbmNsdWRlWmVyb2Agb3B0aW9uIG1heSBiZSBzZXQgdG8gdHJlYXQgdGhlIGNvbmR0aW9uYWwgYXMgcHVyZWx5IG5vdCBlbXB0eSBiYXNlZCBvbiB0aGVcbiAgICAvLyBiZWhhdmlvciBvZiBpc0VtcHR5LiBFZmZlY3RpdmVseSB0aGlzIGRldGVybWluZXMgaWYgMCBpcyBoYW5kbGVkIGJ5IHRoZSBwb3NpdGl2ZSBwYXRoIG9yIG5lZ2F0aXZlLlxuICAgIGlmICgoIW9wdGlvbnMuaGFzaC5pbmNsdWRlWmVybyAmJiAhY29uZGl0aW9uYWwpIHx8IGlzRW1wdHkoY29uZGl0aW9uYWwpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd1bmxlc3MnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHtmbjogb3B0aW9ucy5pbnZlcnNlLCBpbnZlcnNlOiBvcHRpb25zLmZuLCBoYXNoOiBvcHRpb25zLmhhc2h9KTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgaGFuZGxlYmFycz1yZXF1aXJlKDMzNCkuZGVmYXVsdCxwcmludGVyPXJlcXVpcmUoMzQ0KTtmdW5jdGlvbiBleHRlbnNpb24oZSxyKXt2YXIgbj1yZXF1aXJlKDMpLnJlYWRGaWxlU3luYyhyLFwidXRmOFwiKTtlLmV4cG9ydHM9aGFuZGxlYmFycy5jb21waWxlKG4pfWhhbmRsZWJhcnMuUHJpbnRWaXNpdG9yPXByaW50ZXIuUHJpbnRWaXNpdG9yLGhhbmRsZWJhcnMucHJpbnQ9cHJpbnRlci5wcmludCxtb2R1bGUuZXhwb3J0cz1oYW5kbGViYXJzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLmV4dGVuc2lvbnMmJihyZXF1aXJlLmV4dGVuc2lvbnNbXCIuaGFuZGxlYmFyc1wiXT1leHRlbnNpb24scmVxdWlyZS5leHRlbnNpb25zW1wiLmhic1wiXT1leHRlbnNpb24pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltaGhibVJzWldKaGNuTWlMQ0p5WlhGMWFYSmxJaXdpWkdWbVlYVnNkQ0lzSW5CeWFXNTBaWElpTENKbGVIUmxibk5wYjI0aUxDSnRiMlIxYkdVaUxDSm1hV3hsYm1GdFpTSXNJblJsYlhCc1lYUmxVM1J5YVc1bklpd2ljbVZoWkVacGJHVlRlVzVqSWl3aVpYaHdiM0owY3lJc0ltTnZiWEJwYkdVaUxDSlFjbWx1ZEZacGMybDBiM0lpTENKd2NtbHVkQ0lzSW1WNGRHVnVjMmx2Ym5NaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVUxQkxFbEJRVWxCTEZkQlFXRkRMRkZCUVZFc01FSkJRVzFEUXl4UlFVVjRSRU1zVVVGQlZVWXNVVUZCVVN3eVEwRlBkRUlzVTBGQlUwY3NWVUZCVlVNc1JVRkJVVU1zUjBGRGVrSXNTVUZEU1VNc1JVRkVTMDRzVVVGQlVTeE5RVU5QVHl4aFFVRmhSaXhGUVVGVkxGRkJReTlEUkN4RlFVRlBTU3hSUVVGVlZDeFhRVUZYVlN4UlFVRlJTQ3hIUVZSMFExQXNWMEZCVjFjc1lVRkJaVklzVVVGQlVWRXNZVUZEYkVOWUxGZEJRVmRaTEUxQlFWRlVMRkZCUVZGVExFMUJSVE5DVUN4UFFVRlBTU3hSUVVGVlZDeFhRVk5OTEc5Q1FVRmFReXhUUVVFeVFrRXNVVUZCVVZrc1lVRkROVU5hTEZGQlFWRlpMRmRCUVZjc1pVRkJhVUpVTEZWQlEzQkRTQ3hSUVVGUldTeFhRVUZYTEZGQlFWVlVJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnhvWVc1a2JHVmlZWEp6WEZ4c2FXSmNYR2x1WkdWNExtcHpJbjA9IiwidmFyIHV0aWw9cmVxdWlyZSgzNzMpLGhhcz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGhhc05hdGl2ZU1hcD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwO2Z1bmN0aW9uIEFycmF5U2V0KCl7dGhpcy5fYXJyYXk9W10sdGhpcy5fc2V0PWhhc05hdGl2ZU1hcD9uZXcgTWFwOk9iamVjdC5jcmVhdGUobnVsbCl9QXJyYXlTZXQuZnJvbUFycmF5PWZ1bmN0aW9uKHQscil7Zm9yKHZhciBlPW5ldyBBcnJheVNldCxhPTAsaT10Lmxlbmd0aDthPGk7YSsrKWUuYWRkKHRbYV0scik7cmV0dXJuIGV9LEFycmF5U2V0LnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIGhhc05hdGl2ZU1hcD90aGlzLl9zZXQuc2l6ZTpPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aH0sQXJyYXlTZXQucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0LHIpe3ZhciBlPWhhc05hdGl2ZU1hcD90OnV0aWwudG9TZXRTdHJpbmcodCksYT1oYXNOYXRpdmVNYXA/dGhpcy5oYXModCk6aGFzLmNhbGwodGhpcy5fc2V0LGUpLGk9dGhpcy5fYXJyYXkubGVuZ3RoO2EmJiFyfHx0aGlzLl9hcnJheS5wdXNoKHQpLGF8fChoYXNOYXRpdmVNYXA/dGhpcy5fc2V0LnNldCh0LGkpOnRoaXMuX3NldFtlXT1pKX0sQXJyYXlTZXQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtpZihoYXNOYXRpdmVNYXApcmV0dXJuIHRoaXMuX3NldC5oYXModCk7dmFyIHI9dXRpbC50b1NldFN0cmluZyh0KTtyZXR1cm4gaGFzLmNhbGwodGhpcy5fc2V0LHIpfSxBcnJheVNldC5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbih0KXtpZihoYXNOYXRpdmVNYXApe3ZhciByPXRoaXMuX3NldC5nZXQodCk7aWYocj49MClyZXR1cm4gcn1lbHNle3ZhciBlPXV0aWwudG9TZXRTdHJpbmcodCk7aWYoaGFzLmNhbGwodGhpcy5fc2V0LGUpKXJldHVybiB0aGlzLl9zZXRbZV19dGhyb3cgbmV3IEVycm9yKCdcIicrdCsnXCIgaXMgbm90IGluIHRoZSBzZXQuJyl9LEFycmF5U2V0LnByb3RvdHlwZS5hdD1mdW5jdGlvbih0KXtpZih0Pj0wJiZ0PHRoaXMuX2FycmF5Lmxlbmd0aClyZXR1cm4gdGhpcy5fYXJyYXlbdF07dGhyb3cgbmV3IEVycm9yKFwiTm8gZWxlbWVudCBpbmRleGVkIGJ5IFwiK3QpfSxBcnJheVNldC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcnJheS5zbGljZSgpfSxleHBvcnRzLkFycmF5U2V0PUFycmF5U2V0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ5Y21GNUxYTmxkQzVxY3lKZExDSnVZVzFsY3lJNld5SjFkR2xzSWl3aWNtVnhkV2x5WlNJc0ltaGhjeUlzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWFHRnpUbUYwYVhabFRXRndJaXdpVFdGd0lpd2lRWEp5WVhsVFpYUWlMQ0owYUdseklpd2lYMkZ5Y21GNUlpd2lYM05sZENJc0ltTnlaV0YwWlNJc0ltWnliMjFCY25KaGVTSXNJbUZCY25KaGVTSXNJbUZCYkd4dmQwUjFjR3hwWTJGMFpYTWlMQ0p6WlhRaUxDSnBJaXdpYkdWdUlpd2liR1Z1WjNSb0lpd2lZV1JrSWl3aWMybDZaU0lzSW1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNaUxDSmhVM1J5SWl3aWMxTjBjaUlzSW5SdlUyVjBVM1J5YVc1bklpd2lhWE5FZFhCc2FXTmhkR1VpTENKallXeHNJaXdpYVdSNElpd2ljSFZ6YUNJc0ltbHVaR1Y0VDJZaUxDSm5aWFFpTENKRmNuSnZjaUlzSW1GMElpd2lZVWxrZUNJc0luUnZRWEp5WVhraUxDSnpiR2xqWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVU5QkxFbEJRVWxCTEVsQlFVRkJMRU5CUVU5RExFOUJRVUZCTEVOQlFWRXNVVUZCUVN4RFFVRkJMRU5CUTJaRExFZEJRVUZCTEVOQlFVMURMRTFCUVVGQkxFTkJRVTlETEZOQlFVRkJMRU5CUVZWRExHTkJRVUZCTEVOQlEzWkNReXhaUVVGQlFTeERRVUU0UWl4WFFVRkJMRVZCUVVFc1QwRkJVa01zUjBGQlFVRXNRMEZSTVVJc1UwRkJVME1zVVVGQlFVRXNSVUZCUVVFc1EwRkRVRU1zU1VGQlFVRXNRMEZCUzBNc1RVRkJRVUVzUTBGQlV5eEZRVUZCTEVOQlEyUkVMRWxCUVVGQkxFTkJRVXRGTEVsQlFVRkJMRU5CUVU5TUxGbEJRVUZCTEVOQlFXVXNTVUZCU1VNc1IwRkJRVUVzUTBGQlVVb3NUVUZCUVVFc1EwRkJUMU1zVFVGQlFVRXNRMEZCVHl4SlFVRkJMRU5CUVVFc1EwRk5ka1JLTEZGQlFVRkJMRU5CUVZOTExGTkJRVUZCTEVOQlFWa3NVMEZCTkVKRExFTkJRVUZCTEVOQlFWRkRMRU5CUVVGQkxFTkJRVUZCTEVOQlJYWkVMRWxCUkVFc1NVRkJTVU1zUTBGQlFVRXNRMEZCVFN4SlFVRkpVaXhSUVVGQlFTeERRVU5NVXl4RFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlIwTXNRMEZCUVVFc1EwRkJUVW9zUTBGQlFVRXNRMEZCVDBzc1RVRkJRVUVzUTBGQlVVWXNRMEZCUVVFc1EwRkJTVU1zUTBGQlFVRXNRMEZCUzBRc1EwRkJRVUVzUlVGQlFVRXNRMEZETlVORUxFTkJRVUZCTEVOQlFVbEpMRWRCUVVGQkxFTkJRVWxPTEVOQlFVRkJMRU5CUVU5SExFTkJRVUZCTEVOQlFVRkJMRU5CUVVsR0xFTkJRVUZCTEVOQlFVRkJMRU5CUlhKQ0xFOUJRVTlETEVOQlFVRkJMRU5CUVVGQkxFTkJVMVJTTEZGQlFVRkJMRU5CUVZOS0xGTkJRVUZCTEVOQlFWVnBRaXhKUVVGQlFTeERRVUZQTEZWQlFVRXNRMEZEZUVJc1QwRkJUMllzV1VGQlFVRXNRMEZCWlVjc1NVRkJRVUVzUTBGQlMwVXNTVUZCUVVFc1EwRkJTMVVzU1VGQlFVRXNRMEZCVDJ4Q0xFMUJRVUZCTEVOQlFVOXRRaXh0UWtGQlFVRXNRMEZCYjBKaUxFbEJRVUZCTEVOQlFVdEZMRWxCUVVGQkxFTkJRVUZCTEVOQlFVMVJMRTFCUVVGQkxFTkJRVUZCTEVOQlVTOUZXQ3hSUVVGQlFTeERRVUZUU2l4VFFVRkJRU3hEUVVGVlowSXNSMEZCUVVFc1EwRkJUU3hUUVVGelFrY3NRMEZCUVVFc1EwRkJUVklzUTBGQlFVRXNRMEZCUVVFc1EwRkRia1FzU1VGQlNWTXNRMEZCUVVFc1EwRkJUMnhDTEZsQlFVRkJMRU5CUVdWcFFpeERRVUZCUVN4RFFVRlBka0lzU1VGQlFVRXNRMEZCUzNsQ0xGZEJRVUZCTEVOQlFWbEdMRU5CUVVGQkxFTkJRVUZCTEVOQlF6bERSeXhEUVVGQlFTeERRVUZqY0VJc1dVRkJRVUVzUTBGQlpVY3NTVUZCUVVFc1EwRkJTMUFzUjBGQlFVRXNRMEZCU1hGQ0xFTkJRVUZCTEVOQlFVRkJMRU5CUVZGeVFpeEhRVUZCUVN4RFFVRkplVUlzU1VGQlFVRXNRMEZCUzJ4Q0xFbEJRVUZCTEVOQlFVdEZMRWxCUVVGQkxFTkJRVTFoTEVOQlFVRkJMRU5CUVVGQkxFTkJRMnhGU1N4RFFVRkJRU3hEUVVGTmJrSXNTVUZCUVVFc1EwRkJTME1zVFVGQlFVRXNRMEZCVDFNc1RVRkJRVUVzUTBGRGFrSlBMRU5CUVVGQkxFVkJRVUZCTEVOQlFXVllMRU5CUVVGQkxFVkJRMnhDVGl4SlFVRkJRU3hEUVVGTFF5eE5RVUZCUVN4RFFVRlBiVUlzU1VGQlFVRXNRMEZCUzA0c1EwRkJRVUVzUTBGQlFVRXNRMEZGWkVjc1EwRkJRVUVzUjBGRFEzQkNMRmxCUVVGQkxFTkJRMFpITEVsQlFVRkJMRU5CUVV0RkxFbEJRVUZCTEVOQlFVdExMRWRCUVVGQkxFTkJRVWxQTEVOQlFVRkJMRU5CUVUxTExFTkJRVUZCTEVOQlFVRkJMRU5CUlhCQ2JrSXNTVUZCUVVFc1EwRkJTMFVzU1VGQlFVRXNRMEZCUzJFc1EwRkJRVUVzUTBGQlFVRXNRMEZCVVVrc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRlZlRUp3UWl4UlFVRkJRU3hEUVVGVFNpeFRRVUZCUVN4RFFVRlZSaXhIUVVGQlFTeERRVUZOTEZOQlFYTkNjVUlzUTBGQlFVRXNRMEZCUVVFc1EwRkROME1zUjBGQlNXcENMRmxCUVVGQkxFTkJRMFlzVDBGQlQwY3NTVUZCUVVFc1EwRkJTMFVzU1VGQlFVRXNRMEZCUzFRc1IwRkJRVUVzUTBGQlNYRkNMRU5CUVVGQkxFTkJRVUZCTEVOQlJYSkNMRWxCUVVsRExFTkJRVUZCTEVOQlFVOTRRaXhKUVVGQlFTeERRVUZMZVVJc1YwRkJRVUVzUTBGQldVWXNRMEZCUVVFc1EwRkJRVUVzUTBGRE5VSXNUMEZCVDNKQ0xFZEJRVUZCTEVOQlFVbDVRaXhKUVVGQlFTeERRVUZMYkVJc1NVRkJRVUVzUTBGQlMwVXNTVUZCUVVFc1EwRkJUV0VzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGVEwwSm9RaXhSUVVGQlFTeERRVUZUU2l4VFFVRkJRU3hEUVVGVk1FSXNUMEZCUVVFc1EwRkJWU3hUUVVFd1FsQXNRMEZCUVVFc1EwRkJRVUVzUTBGRGNrUXNSMEZCU1dwQ0xGbEJRVUZCTEVOQlFXTXNRMEZEYUVJc1NVRkJTWE5DTEVOQlFVRkJMRU5CUVUxdVFpeEpRVUZCUVN4RFFVRkxSU3hKUVVGQlFTeERRVUZMYjBJc1IwRkJRVUVzUTBGQlNWSXNRMEZCUVVFc1EwRkJRVUVzUTBGRGVFSXNSMEZCU1Vzc1EwRkJRVUVzUlVGQlR5eERRVUZCTEVOQlExQXNUMEZCVDBFc1EwRkJRVUVzUTBGQlFVRXNTVUZGVGl4RFFVTk1MRWxCUVVsS0xFTkJRVUZCTEVOQlFVOTRRaXhKUVVGQlFTeERRVUZMZVVJc1YwRkJRVUVzUTBGQldVWXNRMEZCUVVFc1EwRkJRVUVzUTBGRE5VSXNSMEZCU1hKQ0xFZEJRVUZCTEVOQlFVbDVRaXhKUVVGQlFTeERRVUZMYkVJc1NVRkJRVUVzUTBGQlMwVXNTVUZCUVVFc1EwRkJUV0VzUTBGQlFVRXNRMEZCUVVFc1EwRkRkRUlzVDBGQlQyWXNTVUZCUVVFc1EwRkJTMFVzU1VGQlFVRXNRMEZCUzJFc1EwRkJRVUVzUTBGQlFVRXNRMEZKY2tJc1RVRkJUU3hKUVVGSlVTeExRVUZCUVN4RFFVRk5MRWRCUVVFc1EwRkJUVlFzUTBGQlFVRXNRMEZCVHl4elFrRkJRU3hEUVVGQkxFTkJRVUVzUTBGUkwwSm1MRkZCUVVGQkxFTkJRVk5LTEZOQlFVRkJMRU5CUVZVMlFpeEZRVUZCUVN4RFFVRkxMRk5CUVhGQ1F5eERRVUZCUVN4RFFVRkJRU3hEUVVNelF5eEhRVUZKUVN4RFFVRkJRU3hGUVVGUkxFTkJRVUVzUlVGQlMwRXNRMEZCUVVFc1EwRkJUM3BDTEVsQlFVRkJMRU5CUVV0RExFMUJRVUZCTEVOQlFVOVRMRTFCUVVGQkxFTkJRMnhETEU5QlFVOVdMRWxCUVVGQkxFTkJRVXRETEUxQlFVRkJMRU5CUVU5M1FpeERRVUZCUVN4RFFVRkJRU3hEUVVWeVFpeE5RVUZOTEVsQlFVbEdMRXRCUVVGQkxFTkJRVTBzZDBKQlFVRXNRMEZCTWtKRkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJVVGRETVVJc1VVRkJRVUVzUTBGQlUwb3NVMEZCUVVFc1EwRkJWU3RDTEU5QlFVRkJMRU5CUVZVc1ZVRkJRU3hEUVVNelFpeFBRVUZQTVVJc1NVRkJRVUVzUTBGQlMwTXNUVUZCUVVFc1EwRkJUekJDTEV0QlFVRkJMRVZCUVVGQkxFTkJRVUZCTEVOQlIzSkNReXhQUVVGQlFTeERRVUZSTjBJc1VVRkJRVUVzUTBGQlYwRXNVVUZCUVVFc1EwRkJRVUVpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzI1MWJHeGRmUT09IiwiZXhwb3J0cy5nZXRBcmc9ZnVuY3Rpb24ocixlLHQpe2lmKGUgaW4gcilyZXR1cm4gcltlXTtpZigzPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdDt0aHJvdyBuZXcgRXJyb3IoJ1wiJytlKydcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpfTt2YXIgdXJsUmVnZXhwPS9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuLV0qKSg/OjooXFxkKykpPyguKikkLyxkYXRhVXJsUmVnZXhwPS9eZGF0YTouK1xcLC4rJC87ZnVuY3Rpb24gdXJsUGFyc2Uocil7dmFyIGU9ci5tYXRjaCh1cmxSZWdleHApO3JldHVybiBlP3tzY2hlbWU6ZVsxXSxhdXRoOmVbMl0saG9zdDplWzNdLHBvcnQ6ZVs0XSxwYXRoOmVbNV19Om51bGx9ZnVuY3Rpb24gdXJsR2VuZXJhdGUocil7dmFyIGU9XCJcIjtyZXR1cm4gci5zY2hlbWUmJihlKz1yLnNjaGVtZStcIjpcIiksZSs9XCIvL1wiLHIuYXV0aCYmKGUrPXIuYXV0aCtcIkBcIiksci5ob3N0JiYoZSs9ci5ob3N0KSxyLnBvcnQmJihlKz1cIjpcIityLnBvcnQpLHIucGF0aCYmKGUrPXIucGF0aCksZX1mdW5jdGlvbiBub3JtYWxpemUocil7dmFyIGU9cix0PXVybFBhcnNlKHIpO2lmKHQpe2lmKCF0LnBhdGgpcmV0dXJuIHI7ZT10LnBhdGh9Zm9yKHZhciBuLG89ZXhwb3J0cy5pc0Fic29sdXRlKGUpLGE9ZS5zcGxpdCgvXFwvKy8pLGk9MCx1PWEubGVuZ3RoLTE7dT49MDt1LS0pXCIuXCI9PT0obj1hW3VdKT9hLnNwbGljZSh1LDEpOlwiLi5cIj09PW4/aSsrOmk+MCYmKFwiXCI9PT1uPyhhLnNwbGljZSh1KzEsaSksaT0wKTooYS5zcGxpY2UodSwyKSxpLS0pKTtyZXR1cm5cIlwiPT09KGU9YS5qb2luKFwiL1wiKSkmJihlPW8/XCIvXCI6XCIuXCIpLHQ/KHQucGF0aD1lLHVybEdlbmVyYXRlKHQpKTplfWZ1bmN0aW9uIGpvaW4ocixlKXtcIlwiPT09ciYmKHI9XCIuXCIpLFwiXCI9PT1lJiYoZT1cIi5cIik7dmFyIHQ9dXJsUGFyc2UoZSksbj11cmxQYXJzZShyKTtpZihuJiYocj1uLnBhdGh8fFwiL1wiKSx0JiYhdC5zY2hlbWUpcmV0dXJuIG4mJih0LnNjaGVtZT1uLnNjaGVtZSksdXJsR2VuZXJhdGUodCk7aWYodHx8ZS5tYXRjaChkYXRhVXJsUmVnZXhwKSlyZXR1cm4gZTtpZihuJiYhbi5ob3N0JiYhbi5wYXRoKXJldHVybiBuLmhvc3Q9ZSx1cmxHZW5lcmF0ZShuKTt2YXIgbz1cIi9cIj09PWUuY2hhckF0KDApP2U6bm9ybWFsaXplKHIucmVwbGFjZSgvXFwvKyQvLFwiXCIpK1wiL1wiK2UpO3JldHVybiBuPyhuLnBhdGg9byx1cmxHZW5lcmF0ZShuKSk6b31leHBvcnRzLnVybFBhcnNlPXVybFBhcnNlLC8qIGNvbW1vbi1zaGFrZSByZW1vdmVkOiBleHBvcnRzLnVybEdlbmVyYXRlID0gKi8gdXJsR2VuZXJhdGUsZXhwb3J0cy5ub3JtYWxpemU9bm9ybWFsaXplLGV4cG9ydHMuam9pbj1qb2luLGV4cG9ydHMuaXNBYnNvbHV0ZT1mdW5jdGlvbihyKXtyZXR1cm5cIi9cIj09PXIuY2hhckF0KDApfHx1cmxSZWdleHAudGVzdChyKX0sZXhwb3J0cy5yZWxhdGl2ZT1mdW5jdGlvbihyLGUpe1wiXCI9PT1yJiYocj1cIi5cIikscj1yLnJlcGxhY2UoL1xcLyQvLFwiXCIpO2Zvcih2YXIgdD0wOzAhPT1lLmluZGV4T2YocitcIi9cIik7KXt2YXIgbj1yLmxhc3RJbmRleE9mKFwiL1wiKTtpZihuPDApcmV0dXJuIGU7aWYoKHI9ci5zbGljZSgwLG4pKS5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSlyZXR1cm4gZTsrK3R9cmV0dXJuIEFycmF5KHQrMSkuam9pbihcIi4uL1wiKStlLnN1YnN0cihyLmxlbmd0aCsxKX07dmFyIHN1cHBvcnRzTnVsbFByb3RvPSEoXCJfX3Byb3RvX19cImluIE9iamVjdC5jcmVhdGUobnVsbCkpO2Z1bmN0aW9uIGlkZW50aXR5KHIpe3JldHVybiByfWZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocil7aWYoIXIpcmV0dXJuITE7dmFyIGU9ci5sZW5ndGg7aWYoZTw5KXJldHVybiExO2lmKDk1IT09ci5jaGFyQ29kZUF0KGUtMSl8fDk1IT09ci5jaGFyQ29kZUF0KGUtMil8fDExMSE9PXIuY2hhckNvZGVBdChlLTMpfHwxMTYhPT1yLmNoYXJDb2RlQXQoZS00KXx8MTExIT09ci5jaGFyQ29kZUF0KGUtNSl8fDExNCE9PXIuY2hhckNvZGVBdChlLTYpfHwxMTIhPT1yLmNoYXJDb2RlQXQoZS03KXx8OTUhPT1yLmNoYXJDb2RlQXQoZS04KXx8OTUhPT1yLmNoYXJDb2RlQXQoZS05KSlyZXR1cm4hMTtmb3IodmFyIHQ9ZS0xMDt0Pj0wO3QtLSlpZigzNiE9PXIuY2hhckNvZGVBdCh0KSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBzdHJjbXAocixlKXtyZXR1cm4gcj09PWU/MDpudWxsPT09cj8xOm51bGw9PT1lPy0xOnI+ZT8xOi0xfWV4cG9ydHMudG9TZXRTdHJpbmc9c3VwcG9ydHNOdWxsUHJvdG8/aWRlbnRpdHk6ZnVuY3Rpb24ocil7cmV0dXJuIGlzUHJvdG9TdHJpbmcocik/XCIkXCIrcjpyfSxleHBvcnRzLmZyb21TZXRTdHJpbmc9c3VwcG9ydHNOdWxsUHJvdG8/aWRlbnRpdHk6ZnVuY3Rpb24ocil7cmV0dXJuIGlzUHJvdG9TdHJpbmcocik/ci5zbGljZSgxKTpyfSxleHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zPWZ1bmN0aW9uKHIsZSx0KXt2YXIgbj1zdHJjbXAoci5zb3VyY2UsZS5zb3VyY2UpO3JldHVybiAwIT09bj9uOjAhPShuPXIub3JpZ2luYWxMaW5lLWUub3JpZ2luYWxMaW5lKT9uOjAhPShuPXIub3JpZ2luYWxDb2x1bW4tZS5vcmlnaW5hbENvbHVtbil8fHQ/bjowIT0obj1yLmdlbmVyYXRlZENvbHVtbi1lLmdlbmVyYXRlZENvbHVtbik/bjowIT0obj1yLmdlbmVyYXRlZExpbmUtZS5nZW5lcmF0ZWRMaW5lKT9uOnN0cmNtcChyLm5hbWUsZS5uYW1lKX0sZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZD1mdW5jdGlvbihyLGUsdCl7dmFyIG49ci5nZW5lcmF0ZWRMaW5lLWUuZ2VuZXJhdGVkTGluZTtyZXR1cm4gMCE9PW4/bjowIT0obj1yLmdlbmVyYXRlZENvbHVtbi1lLmdlbmVyYXRlZENvbHVtbil8fHQ/bjowIT09KG49c3RyY21wKHIuc291cmNlLGUuc291cmNlKSk/bjowIT0obj1yLm9yaWdpbmFsTGluZS1lLm9yaWdpbmFsTGluZSk/bjowIT0obj1yLm9yaWdpbmFsQ29sdW1uLWUub3JpZ2luYWxDb2x1bW4pP246c3RyY21wKHIubmFtZSxlLm5hbWUpfSxleHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkPWZ1bmN0aW9uKHIsZSl7dmFyIHQ9ci5nZW5lcmF0ZWRMaW5lLWUuZ2VuZXJhdGVkTGluZTtyZXR1cm4gMCE9PXQ/dDowIT0odD1yLmdlbmVyYXRlZENvbHVtbi1lLmdlbmVyYXRlZENvbHVtbik/dDowIT09KHQ9c3RyY21wKHIuc291cmNlLGUuc291cmNlKSk/dDowIT0odD1yLm9yaWdpbmFsTGluZS1lLm9yaWdpbmFsTGluZSk/dDowIT0odD1yLm9yaWdpbmFsQ29sdW1uLWUub3JpZ2luYWxDb2x1bW4pP3Q6c3RyY21wKHIubmFtZSxlLm5hbWUpfSxleHBvcnRzLnBhcnNlU291cmNlTWFwSW5wdXQ9ZnVuY3Rpb24ocil7cmV0dXJuIEpTT04ucGFyc2Uoci5yZXBsYWNlKC9eXFwpXX0nW15cXG5dKlxcbi8sXCJcIikpfSxleHBvcnRzLmNvbXB1dGVTb3VyY2VVUkw9ZnVuY3Rpb24ocixlLHQpe2lmKGU9ZXx8XCJcIixyJiYoXCIvXCIhPT1yW3IubGVuZ3RoLTFdJiZcIi9cIiE9PWVbMF0mJihyKz1cIi9cIiksZT1yK2UpLHQpe3ZhciBuPXVybFBhcnNlKHQpO2lmKCFuKXRocm93IG5ldyBFcnJvcihcInNvdXJjZU1hcFVSTCBjb3VsZCBub3QgYmUgcGFyc2VkXCIpO2lmKG4ucGF0aCl7dmFyIG89bi5wYXRoLmxhc3RJbmRleE9mKFwiL1wiKTtvPj0wJiYobi5wYXRoPW4ucGF0aC5zdWJzdHJpbmcoMCxvKzEpKX1lPWpvaW4odXJsR2VuZXJhdGUobiksZSl9cmV0dXJuIG5vcm1hbGl6ZShlKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluVjBhV3d1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbWRsZEVGeVp5SXNJbUZCY21keklpd2lZVTVoYldVaUxDSmhSR1ZtWVhWc2RGWmhiSFZsSWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2lSWEp5YjNJaUxDSjFjbXhTWldkbGVIQWlMQ0prWVhSaFZYSnNVbVZuWlhod0lpd2lkWEpzVUdGeWMyVWlMQ0poVlhKc0lpd2liV0YwWTJnaUxDSnpZMmhsYldVaUxDSmhkWFJvSWl3aWFHOXpkQ0lzSW5CdmNuUWlMQ0p3WVhSb0lpd2lkWEpzUjJWdVpYSmhkR1VpTENKaFVHRnljMlZrVlhKc0lpd2lkWEpzSWl3aWJtOXliV0ZzYVhwbElpd2lZVkJoZEdnaUxDSndZWEowSWl3aWFYTkJZbk52YkhWMFpTSXNJbkJoY25Seklpd2ljM0JzYVhRaUxDSjFjQ0lzSW1raUxDSnpjR3hwWTJVaUxDSnFiMmx1SWl3aVlWSnZiM1FpTENKaFVHRjBhRlZ5YkNJc0ltRlNiMjkwVlhKc0lpd2lhbTlwYm1Wa0lpd2lZMmhoY2tGMElpd2ljbVZ3YkdGalpTSXNJblJsYzNRaUxDSnlaV3hoZEdsMlpTSXNJbXhsZG1Wc0lpd2lhVzVrWlhoUFppSXNJbWx1WkdWNElpd2liR0Z6ZEVsdVpHVjRUMllpTENKemJHbGpaU0lzSWtGeWNtRjVJaXdpYzNWaWMzUnlJaXdpYzNWd2NHOXlkSE5PZFd4c1VISnZkRzhpTENKUFltcGxZM1FpTENKamNtVmhkR1VpTENKcFpHVnVkR2wwZVNJc0luTWlMQ0pwYzFCeWIzUnZVM1J5YVc1bklpd2lZMmhoY2tOdlpHVkJkQ0lzSW5OMGNtTnRjQ0lzSW1GVGRISXhJaXdpWVZOMGNqSWlMQ0owYjFObGRGTjBjbWx1WnlJc0ltRlRkSElpTENKbWNtOXRVMlYwVTNSeWFXNW5JaXdpWTI5dGNHRnlaVUo1VDNKcFoybHVZV3hRYjNOcGRHbHZibk1pTENKdFlYQndhVzVuUVNJc0ltMWhjSEJwYm1kQ0lpd2liMjVzZVVOdmJYQmhjbVZQY21sbmFXNWhiQ0lzSW1OdGNDSXNJbk52ZFhKalpTSXNJbTl5YVdkcGJtRnNUR2x1WlNJc0ltOXlhV2RwYm1Gc1EyOXNkVzF1SWl3aVoyVnVaWEpoZEdWa1EyOXNkVzF1SWl3aVoyVnVaWEpoZEdWa1RHbHVaU0lzSW01aGJXVWlMQ0pqYjIxd1lYSmxRbmxIWlc1bGNtRjBaV1JRYjNOcGRHbHZibk5FWldac1lYUmxaQ0lzSW05dWJIbERiMjF3WVhKbFIyVnVaWEpoZEdWa0lpd2lZMjl0Y0dGeVpVSjVSMlZ1WlhKaGRHVmtVRzl6YVhScGIyNXpTVzVtYkdGMFpXUWlMQ0p3WVhKelpWTnZkWEpqWlUxaGNFbHVjSFYwSWl3aWMzUnlJaXdpU2xOUFRpSXNJbkJoY25ObElpd2lZMjl0Y0hWMFpWTnZkWEpqWlZWU1RDSXNJbk52ZFhKalpWSnZiM1FpTENKemIzVnlZMlZWVWt3aUxDSnpiM1Z5WTJWTllYQlZVa3dpTENKd1lYSnpaV1FpTENKemRXSnpkSEpwYm1jaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVRCQ1FVRXNUMEZCUVVFc1EwRkJVVU1zVFVGQlFVRXNRMEZVVWl4VFFVRm5Ra01zUTBGQlFVRXNRMEZCVDBNc1EwRkJRVUVzUTBGQlQwTXNRMEZCUVVFc1EwRkJRVUVzUTBGRE5VSXNSMEZCU1VRc1EwRkJRVUVzU1VGQlUwUXNRMEZCUVVFc1EwRkRXQ3hQUVVGUFFTeERRVUZCUVN4RFFVRk5ReXhEUVVGQlFTeERRVUZCUVN4RFFVTlNMRWRCUVhsQ0xFTkJRVUVzUjBGQmNrSkZMRk5CUVVGQkxFTkJRVlZETEUxQlFVRkJMRU5CUTI1Q0xFOUJRVTlHTEVOQlFVRkJMRU5CUlZBc1RVRkJUU3hKUVVGSlJ5eExRVUZCUVN4RFFVRk5MRWRCUVVFc1EwRkJUVW9zUTBGQlFVRXNRMEZCVVN3eVFrRkJRU3hEUVVGQkxFTkJRVUVzUTBGTGJFTXNTVUZCU1Vzc1UwRkJRVUVzUTBGQldTeG5SVUZCUVN4RFFVTmFReXhoUVVGQlFTeERRVUZuUWl4bFFVRkJMRU5CUlhCQ0xGTkJRVk5ETEZGQlFVRkJMRU5CUVZORExFTkJRVUZCTEVOQlFVRkJMRU5CUTJoQ0xFbEJRVWxETEVOQlFVRkJMRU5CUVZGRUxFTkJRVUZCTEVOQlFVdERMRXRCUVVGQkxFTkJRVTFLTEZOQlFVRkJMRU5CUVVGQkxFTkJRM1pDTEU5QlFVdEpMRU5CUVVGQkxFTkJSMFVzUTBGRFRFTXNUVUZCUVVFc1EwRkJVVVFzUTBGQlFVRXNRMEZCVFN4RFFVRkJMRU5CUVVFc1EwRkRaRVVzU1VGQlFVRXNRMEZCVFVZc1EwRkJRVUVzUTBGQlRTeERRVUZCTEVOQlFVRXNRMEZEV2tjc1NVRkJRVUVzUTBGQlRVZ3NRMEZCUVVFc1EwRkJUU3hEUVVGQkxFTkJRVUVzUTBGRFdra3NTVUZCUVVFc1EwRkJUVW9zUTBGQlFVRXNRMEZCVFN4RFFVRkJMRU5CUVVFc1EwRkRXa3NzU1VGQlFVRXNRMEZCVFV3c1EwRkJRVUVzUTBGQlRTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFWQk1MRWxCUVVFc1EwRlpXQ3hUUVVGVFRTeFhRVUZCUVN4RFFVRlpReXhEUVVGQlFTeERRVUZCUVN4RFFVTnVRaXhKUVVGSlF5eERRVUZCUVN4RFFVRk5MRVZCUVVFc1EwRnBRbFlzVDBGb1FrbEVMRU5CUVVGQkxFTkJRVmRPTEUxQlFVRkJMRWRCUTJKUExFTkJRVUZCTEVWQlFVOUVMRU5CUVVGQkxFTkJRVmRPTEUxQlFVRkJMRU5CUVZNc1IwRkJRU3hEUVVGQkxFTkJSVGRDVHl4RFFVRkJRU3hGUVVGUExFbEJRVUVzUTBGRFNFUXNRMEZCUVVFc1EwRkJWMHdzU1VGQlFVRXNSMEZEWWswc1EwRkJRVUVzUlVGQlQwUXNRMEZCUVVFc1EwRkJWMHdzU1VGQlFVRXNRMEZCVHl4SFFVRkJMRU5CUVVFc1EwRkZka0pMTEVOQlFVRkJMRU5CUVZkS0xFbEJRVUZCTEVkQlEySkxMRU5CUVVGQkxFVkJRVTlFTEVOQlFVRkJMRU5CUVZkS0xFbEJRVUZCTEVOQlFVRkJMRU5CUldoQ1NTeERRVUZCUVN4RFFVRlhTQ3hKUVVGQlFTeEhRVU5pU1N4RFFVRkJRU3hGUVVGUExFZEJRVUVzUTBGQlRVUXNRMEZCUVVFc1EwRkJWMGdzU1VGQlFVRXNRMEZCUVVFc1EwRkZkRUpITEVOQlFVRkJMRU5CUVZkR0xFbEJRVUZCTEVkQlEySkhMRU5CUVVGQkxFVkJRVTlFTEVOQlFVRkJMRU5CUVZkR0xFbEJRVUZCTEVOQlFVRkJMRU5CUldKSExFTkJRVUZCTEVOQlpWUXNVMEZCVTBNc1UwRkJRVUVzUTBGQlZVTXNRMEZCUVVFc1EwRkJRVUVzUTBGRGFrSXNTVUZCU1V3c1EwRkJRVUVzUTBGQlQwc3NRMEZCUVVFc1EwRkRVRVlzUTBGQlFVRXNRMEZCVFZZc1VVRkJRVUVzUTBGQlUxa3NRMEZCUVVFc1EwRkJRVUVzUTBGRGJrSXNSMEZCU1VZc1EwRkJRVUVzUTBGQlN5eERRVU5RTEVkQlFVRXNRMEZCUzBFc1EwRkJRVUVzUTBGQlNVZ3NTVUZCUVVFc1EwRkRVQ3hQUVVGUFN5eERRVUZCUVN4RFFVVlVUQ3hEUVVGQlFTeERRVUZQUnl4RFFVRkJRU3hEUVVGSlNDeEpRVUZCUVN4RFFVdGlMRWxCU0VFc1NVRkhVMDBzUTBGQlFVRXNRMEZJVEVNc1EwRkJRVUVzUTBGQllYaENMRTlCUVVGQkxFTkJRVkYzUWl4VlFVRkJRU3hEUVVGWFVDeERRVUZCUVN4RFFVRkJRU3hEUVVWb1ExRXNRMEZCUVVFc1EwRkJVVklzUTBGQlFVRXNRMEZCUzFNc1MwRkJRVUVzUTBGQlRTeExRVUZCTEVOQlFVRXNRMEZEVWtNc1EwRkJRVUVzUTBGQlN5eERRVUZCTEVOQlFVZERMRU5CUVVGQkxFTkJRVWxJTEVOQlFVRkJMRU5CUVUxdVFpeE5RVUZCUVN4RFFVRlRMRU5CUVVFc1EwRkJSM05DTEVOQlFVRkJMRVZCUVVzc1EwRkJRU3hEUVVGSFFTeERRVUZCUVN4RlFVRkJRU3hEUVVWMFF5eEhRVUZCTEVsQlJHSk1MRU5CUVVGQkxFTkJRVTlGTEVOQlFVRkJMRU5CUVUxSExFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSVmhJTEVOQlFVRkJMRU5CUVUxSkxFMUJRVUZCTEVOQlFVOUVMRU5CUVVGQkxFTkJRVWNzUTBGQlFTeERRVUZCTEVOQlEwVXNTVUZCUVN4SFFVRlVUQ3hEUVVGQlFTeERRVU5VU1N4RFFVRkJRU3hGUVVGQlFTeERRVU5UUVN4RFFVRkJRU3hEUVVGTExFTkJRVUVzUjBGRFJDeEZRVUZCTEVkQlFWUktMRU5CUVVGQkxFVkJTVVpGTEVOQlFVRkJMRU5CUVUxSkxFMUJRVUZCTEVOQlFVOUVMRU5CUVVGQkxFTkJRVWtzUTBGQlFTeERRVUZIUkN4RFFVRkJRU3hEUVVGQlFTeERRVU53UWtFc1EwRkJRVUVzUTBGQlN5eERRVUZCTEVkQlJVeEdMRU5CUVVGQkxFTkJRVTFKTEUxQlFVRkJMRU5CUVU5RUxFTkJRVUZCTEVOQlFVY3NRMEZCUVN4RFFVRkJMRU5CUTJoQ1JDeERRVUZCUVN4RlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFWVk9MRTFCU21Fc1JVRkJRU3hKUVVaaVZpeERRVUZCUVN4RFFVRlBVU3hEUVVGQlFTeERRVUZOU3l4SlFVRkJRU3hEUVVGTExFZEJRVUVzUTBGQlFTeERRVUZCTEVkQlIyaENZaXhEUVVGQlFTeERRVUZQVHl4RFFVRkJRU3hEUVVGaExFZEJRVUVzUTBGQlRTeEhRVUZCTEVOQlFVRXNRMEZIZUVKS0xFTkJRVUZCTEVWQlEwWkJMRU5CUVVGQkxFTkJRVWxJTEVsQlFVRkJMRU5CUVU5QkxFTkJRVUZCTEVOQlEwcERMRmRCUVVGQkxFTkJRVmxGTEVOQlFVRkJMRU5CUVVGQkxFVkJSV1JJTEVOQlFVRkJMRU5CYjBKVUxGTkJRVk5oTEVsQlFVRkJMRU5CUVV0RExFTkJRVUZCTEVOQlFVOVVMRU5CUVVGQkxFTkJRVUZCTEVOQlEwd3NSVUZCUVN4SFFVRldVeXhEUVVGQlFTeEhRVU5HUVN4RFFVRkJRU3hEUVVGUkxFZEJRVUVzUTBGQlFTeERRVVZKTEVWQlFVRXNSMEZCVmxRc1EwRkJRVUVzUjBGRFJrRXNRMEZCUVVFc1EwRkJVU3hIUVVGQkxFTkJRVUVzUTBGRlZpeEpRVUZKVlN4RFFVRkJRU3hEUVVGWGRFSXNVVUZCUVVFc1EwRkJVMWtzUTBGQlFVRXNRMEZCUVVFc1EwRkRjRUpYTEVOQlFVRkJMRU5CUVZkMlFpeFJRVUZCUVN4RFFVRlRjVUlzUTBGQlFVRXNRMEZCUVVFc1EwRk5lRUlzUjBGTVNVVXNRMEZCUVVFc1IwRkRSa1lzUTBGQlFVRXNRMEZCVVVVc1EwRkJRVUVzUTBGQlUyaENMRWxCUVVGQkxFVkJRVkVzUjBGQlFTeERRVUZCTEVOQlNYWkNaU3hEUVVGQlFTeEZRVUZCUVN4RFFVRmhRU3hEUVVGQlFTeERRVUZUYmtJc1RVRkJRVUVzUTBGSmVFSXNUMEZJU1c5Q0xFTkJRVUZCTEVkQlEwWkVMRU5CUVVGQkxFTkJRVk51UWl4TlFVRkJRU3hEUVVGVGIwSXNRMEZCUVVFc1EwRkJVM0JDTEUxQlFVRkJMRU5CUVVGQkxFTkJSWFJDU3l4WFFVRkJRU3hEUVVGWll5eERRVUZCUVN4RFFVRkJRU3hEUVVkeVFpeEhRVUZKUVN4RFFVRkJRU3hGUVVGWlZpeERRVUZCUVN4RFFVRk5WaXhMUVVGQlFTeERRVUZOU0N4aFFVRkJRU3hEUVVGQlFTeERRVU14UWl4UFFVRlBZU3hEUVVGQlFTeERRVWxVTEVkQlFVbFhMRU5CUVVGQkxFVkJRVUZCTEVOQlFXRkJMRU5CUVVGQkxFTkJRVk5zUWl4SlFVRkJRU3hGUVVGQlFTeERRVUZUYTBJc1EwRkJRVUVzUTBGQlUyaENMRWxCUVVGQkxFTkJSVEZETEU5QlJFRm5RaXhEUVVGQlFTeERRVUZUYkVJc1NVRkJRVUVzUTBGQlQwOHNRMEZCUVVFc1EwRkRWRW9zVjBGQlFVRXNRMEZCV1dVc1EwRkJRVUVzUTBGQlFVRXNRMEZIY2tJc1NVRkJTVU1zUTBGQlFVRXNRMEZCTmtJc1IwRkJRU3hIUVVGd1Fsb3NRMEZCUVVFc1EwRkJUV0VzVFVGQlFVRXNRMEZCVHl4RFFVRkJMRU5CUVVFc1EwRkRkRUppTEVOQlFVRkJMRU5CUTBGRUxGTkJRVUZCTEVOQlFWVlZMRU5CUVVGQkxFTkJRVTFMTEU5QlFVRkJMRU5CUVZFc1RVRkJRU3hEUVVGUkxFVkJRVUVzUTBGQlFTeERRVUZOTEVkQlFVRXNRMEZCVFdRc1EwRkJRVUVzUTBGQlFVRXNRMEZGYUVRc1QwRkJTVmNzUTBGQlFVRXNSVUZEUmtFc1EwRkJRVUVzUTBGQlUyaENMRWxCUVVGQkxFTkJRVTlwUWl4RFFVRkJRU3hEUVVOVWFFSXNWMEZCUVVFc1EwRkJXV1VzUTBGQlFVRXNRMEZCUVVFc1JVRkZaRU1zUTBGQlFVRXNRMEYyU1ZSc1F5eFBRVUZCUVN4RFFVRlJWU3hSUVVGQlFTeERRVUZYUVN4UlFVRkJRU3hEUVhOQ2JrSldMR3RFUVVGelFtdENMRmRCUVVGQkxFTkJkMFIwUW14Q0xFOUJRVUZCTEVOQlFWRnhRaXhUUVVGQlFTeERRVUZaUVN4VFFVRkJRU3hEUVRKRWNFSnlRaXhQUVVGQlFTeERRVUZST0VJc1NVRkJRVUVzUTBGQlQwRXNTVUZCUVVFc1EwRkZaamxDTEU5QlFVRkJMRU5CUVZGM1FpeFZRVUZCUVN4RFFVRmhMRk5CUVZWR0xFTkJRVUZCTEVOQlFVRkJMRU5CUXpkQ0xFMUJRVEpDTEVkQlFVRXNSMEZCY0VKQkxFTkJRVUZCTEVOQlFVMWhMRTFCUVVGQkxFTkJRVThzUTBGQlFTeERRVUZCTEVWQlFXTXpRaXhUUVVGQlFTeERRVUZWTmtJc1NVRkJRVUVzUTBGQlMyWXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEY1UTI1RWRFSXNUMEZCUVVFc1EwRkJVWE5ETEZGQlFVRkJMRU5CYUVOU0xGTkJRV3RDVUN4RFFVRkJRU3hEUVVGUFZDeERRVUZCUVN4RFFVRkJRU3hEUVVOVUxFVkJRVUVzUjBGQlZsTXNRMEZCUVVFc1IwRkRSa0VzUTBGQlFVRXNRMEZCVVN4SFFVRkJMRU5CUVVFc1EwRkhWa0VzUTBGQlFVRXNRMEZCVVVFc1EwRkJRVUVzUTBGQlRVc3NUMEZCUVVFc1EwRkJVU3hMUVVGQkxFTkJRVThzUlVGQlFTeERRVUZCTEVOQlR6ZENMRWxCUkVFc1NVRkJTVWNzUTBGQlFVRXNRMEZCVVN4RFFVRkJMRU5CUXpCQ0xFTkJRVUVzUjBGQkwwSnFRaXhEUVVGQlFTeERRVUZOYTBJc1QwRkJRVUVzUTBGQlVWUXNRMEZCUVVFc1EwRkJVU3hIUVVGQkxFTkJRVUVzUlVGQldTeERRVU4yUXl4SlFVRkpWU3hEUVVGQlFTeERRVUZSVml4RFFVRkJRU3hEUVVGTlZ5eFhRVUZCUVN4RFFVRlpMRWRCUVVFc1EwRkJRU3hEUVVNNVFpeEhRVUZKUkN4RFFVRkJRU3hEUVVGUkxFTkJRVUVzUTBGRFZpeFBRVUZQYmtJc1EwRkJRVUVzUTBGUFZDeEhRVUZCTEVOQlJFRlRMRU5CUVVGQkxFTkJRVkZCTEVOQlFVRkJMRU5CUVUxWkxFdEJRVUZCTEVOQlFVMHNRMEZCUVN4RFFVRkhSaXhEUVVGQlFTeERRVUZCUVN4RlFVTmlOMElzUzBGQlFVRXNRMEZCVFN4dFFrRkJRU3hEUVVGQkxFTkJRMlFzVDBGQlQxVXNRMEZCUVVFc1EwRkJRVUVzUlVGSFVHbENMRU5CUVVGQkxFTkJTVW9zVDBGQlQwc3NTMEZCUVVFc1EwRkJUVXdzUTBGQlFVRXNRMEZCVVN4RFFVRkJMRU5CUVVFc1EwRkJSMVFzU1VGQlFVRXNRMEZCU3l4TFFVRkJMRU5CUVVFc1EwRkJVMUlzUTBGQlFVRXNRMEZCVFhWQ0xFMUJRVUZCTEVOQlFVOWtMRU5CUVVGQkxFTkJRVTE2UWl4TlFVRkJRU3hEUVVGVExFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlNYQkZMRWxCUVVsM1F5eHBRa0ZCUVVFc1EwRkJRVUVzUlVGRlR5eFhRVUZCTEVkQlJFTkRMRTFCUVVGQkxFTkJRVTlETEUxQlFVRkJMRU5CUVU4c1NVRkJRU3hEUVVGQkxFTkJRVUVzUTBGSk1VSXNVMEZCVTBNc1VVRkJRVUVzUTBGQlZVTXNRMEZCUVVFc1EwRkJRVUVzUTBGRGFrSXNUMEZCVDBFc1EwRkJRVUVzUTBFNFFsUXNVMEZCVTBNc1lVRkJRVUVzUTBGQlkwUXNRMEZCUVVFc1EwRkJRVUVzUTBGRGNrSXNSMEZCUVN4RFFVRkxRU3hEUVVGQlFTeERRVU5JTEUxQlFVRXNRMEZCUVN4RFFVRkJMRU5CUjBZc1NVRkJTVFZETEVOQlFVRkJMRU5CUVZNMFF5eERRVUZCUVN4RFFVRkZOVU1zVFVGQlFVRXNRMEZGWml4SFFVRkpRU3hEUVVGQlFTeERRVUZUTEVOQlFVRXNRMEZEV0N4TlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVkR0xFZEJRV2xETEVWQlFVRXNSMEZCTjBJMFF5eERRVUZCUVN4RFFVRkZSU3hWUVVGQlFTeERRVUZYT1VNc1EwRkJRVUVzUTBGQlV5eERRVUZCTEVOQlFVRXNSVUZEVHl4RlFVRkJMRWRCUVRkQ05FTXNRMEZCUVVFc1EwRkJSVVVzVlVGQlFVRXNRMEZCVnpsRExFTkJRVUZCTEVOQlFWTXNRMEZCUVN4RFFVRkJMRVZCUTA4c1IwRkJRU3hIUVVFM1FqUkRMRU5CUVVGQkxFTkJRVVZGTEZWQlFVRkJMRU5CUVZjNVF5eERRVUZCUVN4RFFVRlRMRU5CUVVFc1EwRkJRU3hGUVVOUExFZEJRVUVzUjBGQk4wSTBReXhEUVVGQlFTeERRVUZGUlN4VlFVRkJRU3hEUVVGWE9VTXNRMEZCUVVFc1EwRkJVeXhEUVVGQkxFTkJRVUVzUlVGRFR5eEhRVUZCTEVkQlFUZENORU1zUTBGQlFVRXNRMEZCUlVVc1ZVRkJRVUVzUTBGQlZ6bERMRU5CUVVGQkxFTkJRVk1zUTBGQlFTeERRVUZCTEVWQlEwOHNSMEZCUVN4SFFVRTNRalJETEVOQlFVRkJMRU5CUVVWRkxGVkJRVUZCTEVOQlFWYzVReXhEUVVGQlFTeERRVUZUTEVOQlFVRXNRMEZCUVN4RlFVTlBMRWRCUVVFc1IwRkJOMEkwUXl4RFFVRkJRU3hEUVVGRlJTeFZRVUZCUVN4RFFVRlhPVU1zUTBGQlFVRXNRMEZCVXl4RFFVRkJMRU5CUVVFc1JVRkRUeXhGUVVGQkxFZEJRVGRDTkVNc1EwRkJRVUVzUTBGQlJVVXNWVUZCUVVFc1EwRkJWemxETEVOQlFVRkJMRU5CUVZNc1EwRkJRU3hEUVVGQkxFVkJRMDhzUlVGQlFTeEhRVUUzUWpSRExFTkJRVUZCTEVOQlFVVkZMRlZCUVVGQkxFTkJRVmM1UXl4RFFVRkJRU3hEUVVGVExFTkJRVUVzUTBGQlFTeERRVU40UWl4TlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVkR0xFbEJRVXNzU1VGQlNYTkNMRU5CUVVGQkxFTkJRVWwwUWl4RFFVRkJRU3hEUVVGVExFVkJRVUVzUTBGQlNYTkNMRU5CUVVGQkxFVkJRVXNzUTBGQlFTeERRVUZIUVN4RFFVRkJRU3hGUVVGQlFTeERRVU5vUXl4SFFVRjNRaXhGUVVGQkxFZEJRWEJDYzBJc1EwRkJRVUVzUTBGQlJVVXNWVUZCUVVFc1EwRkJWM2hDTEVOQlFVRkJMRU5CUVVGQkxFTkJRMllzVFVGQlFTeERRVUZCTEVOQlFVRXNRMEZKU2l4TlFVRkJMRU5CUVVFc1EwRkJRU3hEUVdkR1JpeFRRVUZUZVVJc1RVRkJRVUVzUTBGQlQwTXNRMEZCUVVFc1EwRkJUME1zUTBGQlFVRXNRMEZCUVVFc1EwRkRja0lzVDBGQlNVUXNRMEZCUVVFc1IwRkJWVU1zUTBGQlFVRXNRMEZEVEN4RFFVRkJMRU5CUjBzc1NVRkJRU3hIUVVGV1JDeERRVUZCUVN4RFFVTkxMRU5CUVVFc1EwRkhTeXhKUVVGQkxFZEJRVlpETEVOQlFVRkJMRU5CUVVGQkxFTkJRMDBzUTBGQlFTeERRVWRPUkN4RFFVRkJRU3hEUVVGUlF5eERRVUZCUVN4RFFVTklMRU5CUVVFc1EwRkJRU3hEUVVkRUxFTkJRVUVzUTBGNlNWWjJSQ3hQUVVGQlFTeERRVUZSZDBRc1YwRkJRVUVzUTBGQlkxWXNhVUpCUVVGQkxFTkJRVzlDUnl4UlFVRkJRU3hEUVZBeFF5eFRRVUZ4UWxFc1EwRkJRVUVzUTBGQlFVRXNRMEZEYmtJc1QwRkJTVTRzWVVGQlFVRXNRMEZCWTAwc1EwRkJRVUVzUTBGQlFVRXNRMEZEVkN4SFFVRkJMRU5CUVUxQkxFTkJRVUZCTEVOQlIxSkJMRU5CUVVGQkxFTkJRVUZCTEVOQlYxUjZSQ3hQUVVGQlFTeERRVUZSTUVRc1lVRkJRVUVzUTBGQlowSmFMR2xDUVVGQlFTeERRVUZ2UWtjc1VVRkJRVUVzUTBGUU5VTXNVMEZCZFVKUkxFTkJRVUZCTEVOQlFVRkJMRU5CUTNKQ0xFOUJRVWxPTEdGQlFVRkJMRU5CUVdOTkxFTkJRVUZCTEVOQlFVRkJMRU5CUTFSQkxFTkJRVUZCTEVOQlFVdGtMRXRCUVVGQkxFTkJRVTBzUTBGQlFTeERRVUZCTEVOQlIySmpMRU5CUVVGQkxFTkJRVUZCTEVOQmQwVlVla1FzVDBGQlFVRXNRMEZCVVRKRUxEQkNRVUZCUVN4RFFUVkNVaXhUUVVGdlEwTXNRMEZCUVVFc1EwRkJWVU1zUTBGQlFVRXNRMEZCVlVNc1EwRkJRVUVzUTBGQlFVRXNRMEZEZEVRc1NVRkJTVU1zUTBGQlFVRXNRMEZCVFZZc1RVRkJRVUVzUTBGQlQwOHNRMEZCUVVFc1EwRkJVMGtzVFVGQlFVRXNRMEZCVVVnc1EwRkJRVUVzUTBGQlUwY3NUVUZCUVVFc1EwRkJRVUVzUTBGRE0wTXNUMEZCV1N4RFFVRkJMRWRCUVZKRUxFTkJRVUZCTEVOQlEwdEJMRU5CUVVGQkxFTkJTVWNzUTBGQlFTeEhRVVJhUVN4RFFVRkJRU3hEUVVGTlNDeERRVUZCUVN4RFFVRlRTeXhaUVVGQlFTeERRVUZsU2l4RFFVRkJRU3hEUVVGVFNTeFpRVUZCUVN4RFFVRkJRU3hEUVVVNVFrWXNRMEZCUVVFc1EwRkpSeXhEUVVGQkxFZEJSRnBCTEVOQlFVRkJMRU5CUVUxSUxFTkJRVUZCTEVOQlFWTk5MR05CUVVGQkxFTkJRV2xDVEN4RFFVRkJRU3hEUVVGVFN5eGpRVUZCUVN4RFFVRkJRU3hGUVVONFFrb3NRMEZCUVVFc1EwRkRVa01zUTBGQlFVRXNRMEZKUnl4RFFVRkJMRWRCUkZwQkxFTkJRVUZCTEVOQlFVMUlMRU5CUVVGQkxFTkJRVk5QTEdWQlFVRkJMRU5CUVd0Q1RpeERRVUZCUVN4RFFVRlRUU3hsUVVGQlFTeERRVUZCUVN4RFFVVnFRMG9zUTBGQlFVRXNRMEZKUnl4RFFVRkJMRWRCUkZwQkxFTkJRVUZCTEVOQlFVMUlMRU5CUVVGQkxFTkJRVk5STEdGQlFVRkJMRU5CUVdkQ1VDeERRVUZCUVN4RFFVRlRUeXhoUVVGQlFTeERRVUZCUVN4RFFVVXZRa3dzUTBGQlFVRXNRMEZIUmxZc1RVRkJRVUVzUTBGQlQwOHNRMEZCUVVFc1EwRkJVMU1zU1VGQlFVRXNRMEZCVFZJc1EwRkJRVUVzUTBGQlUxRXNTVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEY1UTNoRGNrVXNUMEZCUVVFc1EwRkJVWE5GTEcxRFFVRkJRU3hEUVRWQ1VpeFRRVUUyUTFZc1EwRkJRVUVzUTBGQlZVTXNRMEZCUVVFc1EwRkJWVlVzUTBGQlFVRXNRMEZCUVVFc1EwRkRMMFFzU1VGQlNWSXNRMEZCUVVFc1EwRkJUVWdzUTBGQlFVRXNRMEZCVTFFc1lVRkJRVUVzUTBGQlowSlFMRU5CUVVGQkxFTkJRVk5QTEdGQlFVRkJMRU5CUXpWRExFOUJRVmtzUTBGQlFTeEhRVUZTVEN4RFFVRkJRU3hEUVVOTFFTeERRVUZCUVN4RFFVbEhMRU5CUVVFc1IwRkVXa0VzUTBGQlFVRXNRMEZCVFVnc1EwRkJRVUVzUTBGQlUwOHNaVUZCUVVFc1EwRkJhMEpPTEVOQlFVRkJMRU5CUVZOTkxHVkJRVUZCTEVOQlFVRkJMRVZCUTNwQ1NTeERRVUZCUVN4RFFVTlNVaXhEUVVGQlFTeERRVWxITEVOQlFVRXNTVUZFV2tFc1EwRkJRVUVzUTBGQlRWWXNUVUZCUVVFc1EwRkJUMDhzUTBGQlFVRXNRMEZCVTBrc1RVRkJRVUVzUTBGQlVVZ3NRMEZCUVVFc1EwRkJVMGNzVFVGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGRk9VSkVMRU5CUVVGQkxFTkJTVWNzUTBGQlFTeEhRVVJhUVN4RFFVRkJRU3hEUVVGTlNDeERRVUZCUVN4RFFVRlRTeXhaUVVGQlFTeERRVUZsU2l4RFFVRkJRU3hEUVVGVFNTeFpRVUZCUVN4RFFVRkJRU3hEUVVVNVFrWXNRMEZCUVVFc1EwRkpSeXhEUVVGQkxFZEJSRnBCTEVOQlFVRkJMRU5CUVUxSUxFTkJRVUZCTEVOQlFWTk5MR05CUVVGQkxFTkJRV2xDVEN4RFFVRkJRU3hEUVVGVFN5eGpRVUZCUVN4RFFVRkJRU3hEUVVWb1EwZ3NRMEZCUVVFc1EwRkhSbFlzVFVGQlFVRXNRMEZCVDA4c1EwRkJRVUVzUTBGQlUxTXNTVUZCUVVFc1EwRkJUVklzUTBGQlFVRXNRMEZCVTFFc1NVRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRjNSSGhEY2tVc1QwRkJRVUVzUTBGQlVYZEZMRzFEUVVGQlFTeERRVFZDVWl4VFFVRTJRMW9zUTBGQlFVRXNRMEZCVlVNc1EwRkJRVUVzUTBGQlFVRXNRMEZEY2tRc1NVRkJTVVVzUTBGQlFVRXNRMEZCVFVnc1EwRkJRVUVzUTBGQlUxRXNZVUZCUVVFc1EwRkJaMEpRTEVOQlFVRkJMRU5CUVZOUExHRkJRVUZCTEVOQlF6VkRMRTlCUVZrc1EwRkJRU3hIUVVGU1RDeERRVUZCUVN4RFFVTkxRU3hEUVVGQlFTeERRVWxITEVOQlFVRXNSMEZFV2tFc1EwRkJRVUVzUTBGQlRVZ3NRMEZCUVVFc1EwRkJVMDhzWlVGQlFVRXNRMEZCYTBKT0xFTkJRVUZCTEVOQlFWTk5MR1ZCUVVGQkxFTkJRVUZCTEVOQlJXcERTaXhEUVVGQlFTeERRVWxITEVOQlFVRXNTVUZFV2tFc1EwRkJRVUVzUTBGQlRWWXNUVUZCUVVFc1EwRkJUMDhzUTBGQlFVRXNRMEZCVTBrc1RVRkJRVUVzUTBGQlVVZ3NRMEZCUVVFc1EwRkJVMGNzVFVGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGRk9VSkVMRU5CUVVGQkxFTkJTVWNzUTBGQlFTeEhRVVJhUVN4RFFVRkJRU3hEUVVGTlNDeERRVUZCUVN4RFFVRlRTeXhaUVVGQlFTeERRVUZsU2l4RFFVRkJRU3hEUVVGVFNTeFpRVUZCUVN4RFFVRkJRU3hEUVVVNVFrWXNRMEZCUVVFc1EwRkpSeXhEUVVGQkxFZEJSRnBCTEVOQlFVRkJMRU5CUVUxSUxFTkJRVUZCTEVOQlFWTk5MR05CUVVGQkxFTkJRV2xDVEN4RFFVRkJRU3hEUVVGVFN5eGpRVUZCUVN4RFFVRkJRU3hEUVVWb1EwZ3NRMEZCUVVFc1EwRkhSbFlzVFVGQlFVRXNRMEZCVDA4c1EwRkJRVUVzUTBGQlUxTXNTVUZCUVVFc1EwRkJUVklzUTBGQlFVRXNRMEZCVTFFc1NVRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRlplRU55UlN4UFFVRkJRU3hEUVVGUmVVVXNiVUpCUVVGQkxFTkJTRklzVTBGQk5rSkRMRU5CUVVGQkxFTkJRVUZCTEVOQlF6TkNMRTlCUVU5RExFbEJRVUZCTEVOQlFVdERMRXRCUVVGQkxFTkJRVTFHTEVOQlFVRkJMRU5CUVVsMFF5eFBRVUZCUVN4RFFVRlJMR2RDUVVGQkxFTkJRV3RDTEVWQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRjFSR3hFY0VNc1QwRkJRVUVzUTBGQlVUWkZMR2RDUVVGQlFTeERRUzlEVWl4VFFVRXdRa01zUTBGQlFVRXNRMEZCV1VNc1EwRkJRVUVzUTBGQlYwTXNRMEZCUVVFc1EwRkJRVUVzUTBFNFFpOURMRWRCTjBKQlJDeERRVUZCUVN4RFFVRlpRU3hEUVVGQlFTeEZRVUZoTEVWQlFVRXNRMEZGY2tKRUxFTkJRVUZCTEVkQlJYZERMRWRCUVVFc1IwRkJkRU5CTEVOQlFVRkJMRU5CUVZkQkxFTkJRVUZCTEVOQlFWZDRSU3hOUVVGQlFTeERRVUZUTEVOQlFVRXNRMEZCUVN4RlFVRXJRaXhIUVVGQkxFZEJRV3BDZVVVc1EwRkJRVUVzUTBGQlZTeERRVUZCTEVOQlFVRXNSMEZEZWtSRUxFTkJRVUZCTEVWQlFXTXNSMEZCUVN4RFFVRkJMRU5CVDJoQ1F5eERRVUZCUVN4RFFVRlpSQ3hEUVVGQlFTeERRVUZoUXl4RFFVRkJRU3hEUVVGQlFTeERRV2xDZGtKRExFTkJRVUZCTEVOQlFXTXNRMEZEYUVJc1NVRkJTVU1zUTBGQlFVRXNRMEZCVTNaRkxGRkJRVUZCTEVOQlFWTnpSU3hEUVVGQlFTeERRVUZCUVN4RFFVTjBRaXhIUVVGQkxFTkJRVXRETEVOQlFVRkJMRU5CUTBnc1RVRkJUU3hKUVVGSk1VVXNTMEZCUVVFc1EwRkJUU3hyUTBGQlFTeERRVUZCTEVOQlJXeENMRWRCUVVrd1JTeERRVUZCUVN4RFFVRlBhRVVzU1VGQlFVRXNRMEZCVFN4RFFVVm1MRWxCUVVsM1FpeERRVUZCUVN4RFFVRlJkME1zUTBGQlFVRXNRMEZCVDJoRkxFbEJRVUZCTEVOQlFVdDVRaXhYUVVGQlFTeERRVUZaTEVkQlFVRXNRMEZCUVN4RFFVTm9RMFFzUTBGQlFVRXNSVUZCVXl4RFFVRkJMRWRCUTFoM1F5eERRVUZCUVN4RFFVRlBhRVVzU1VGQlFVRXNRMEZCVDJkRkxFTkJRVUZCTEVOQlFVOW9SU3hKUVVGQlFTeERRVUZMYVVVc1UwRkJRVUVzUTBGQlZTeERRVUZCTEVOQlFVZDZReXhEUVVGQlFTeERRVUZSTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUjI1RWMwTXNRMEZCUVVFc1EwRkJXV3BFTEVsQlFVRkJMRU5CUVV0YUxGZEJRVUZCTEVOQlFWa3JSQ3hEUVVGQlFTeERRVUZCUVN4RFFVRlRSaXhEUVVGQlFTeERRVUZCUVN4RFFVZDRReXhQUVVGUE1VUXNVMEZCUVVFc1EwRkJWVEJFTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hYMD0iLCJ2YXIgYmFzZTY0PXJlcXVpcmUoMzY2KTtleHBvcnRzLmVuY29kZT1mdW5jdGlvbihlKXt2YXIgcixvPVwiXCIsdD1mdW5jdGlvbihlKXtyZXR1cm4gZTwwPzErKC1lPDwxKTowKyhlPDwxKX0oZSk7ZG97cj0zMSZ0LCh0Pj4+PTUpPjAmJihyfD0zMiksbys9YmFzZTY0LmVuY29kZShyKX13aGlsZSh0PjApO3JldHVybiBvfSxleHBvcnRzLmRlY29kZT1mdW5jdGlvbihlLHIsbyl7dmFyIHQsbixhLGksZD1lLmxlbmd0aCxjPTAscz0wO2Rve2lmKHI+PWQpdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbW9yZSBkaWdpdHMgaW4gYmFzZSA2NCBWTFEgdmFsdWUuXCIpO2lmKC0xPT09KG49YmFzZTY0LmRlY29kZShlLmNoYXJDb2RlQXQocisrKSkpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGRpZ2l0OiBcIitlLmNoYXJBdChyLTEpKTt0PSEhKDMyJm4pLGMrPShuJj0zMSk8PHMscys9NX13aGlsZSh0KTtvLnZhbHVlPShpPShhPWMpPj4xLDE9PSgxJmEpPy1pOmkpLG8ucmVzdD1yfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KaGMyVTJOQzEyYkhFdWFuTWlYU3dpYm1GdFpYTWlPbHNpWW1GelpUWTBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKbGJtTnZaR1VpTENKaFZtRnNkV1VpTENKa2FXZHBkQ0lzSW1WdVkyOWtaV1FpTENKMmJIRWlMQ0pXVEZGZlFrRlRSU0lzSW1SbFkyOWtaU0lzSW1GVGRISWlMQ0poU1c1a1pYZ2lMQ0poVDNWMFVHRnlZVzBpTENKamIyNTBhVzUxWVhScGIyNGlMQ0p6YUdsbWRHVmtJaXdpYzNSeVRHVnVJaXdpYkdWdVozUm9JaXdpY21WemRXeDBJaXdpYzJocFpuUWlMQ0pGY25KdmNpSXNJbU5vWVhKRGIyUmxRWFFpTENKamFHRnlRWFFpTENKMllXeDFaU0lzSW5KbGMzUWlYU3dpYldGd2NHbHVaM01pT2lKQlFYRkRRU3hKUVVGSlFTeE5RVUZCUVN4RFFVRlRReXhQUVVGQlFTeERRVUZSTEZWQlFVRXNRMEZCUVN4RFFYTkVja0pETEU5QlFVRkJMRU5CUVZGRExFMUJRVUZCTEVOQlFWTXNVMEZCTUVKRExFTkJRVUZCTEVOQlFVRkJMRU5CUTNwRExFbEJRMGxETEVOQlFVRkJMRU5CUkVGRExFTkJRVUZCTEVOQlFWVXNSVUZCUVN4RFFVZFdReXhEUVVGQlFTeERRVE5DVGl4VFFVRnhRa2dzUTBGQlFVRXNRMEZCUVVFc1EwRkRia0lzVDBGQlQwRXNRMEZCUVVFc1EwRkJVeXhEUVVGQkxFTkJRMDhzUTBGQlFTeEZRVUZCTEVOQlFXaENRU3hEUVVGQlFTeEZRVUZYTEVOQlFVRXNRMEZCUVN4RFFVTkZMRU5CUVVFc1JVRkJaa0VzUTBGQlFVRXNSVUZCVlN4RFFVRkJMRU5CUVVFc1EwRklha0lzUTBFeVFuZENRU3hEUVVGQlFTeERRVUZCUVN4RFFVVjBRaXhGUVVGQkxFTkJRMFZETEVOQlFVRkJMRU5CZWtOblFrY3NSVUZCUVVFc1EwRjVRMUpFTEVOQlFVRkJMRU5CUVVGQkxFTkJRMUpCTEVOQlFVRkJMRWxCYUVScFFpeERRVUZCTEVWQmFVUlFMRU5CUVVFc1IwRkhVa1lzUTBGQlFVRXNSVUZxUkZNc1JVRkJRU3hEUVVGQkxFTkJiVVJZUXl4RFFVRkJRU3hGUVVGWFRpeE5RVUZCUVN4RFFVRlBSeXhOUVVGQlFTeERRVUZQUlN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4TlFVTnNRa1VzUTBGQlFVRXNRMEZCVFN4RFFVRkJMRVZCUldZc1QwRkJUMFFzUTBGQlFVRXNRMEZCUVVFc1EwRlBWRW9zVDBGQlFVRXNRMEZCVVU4c1RVRkJRVUVzUTBGQlV5eFRRVUV3UWtNc1EwRkJRVUVzUTBGQlRVTXNRMEZCUVVFc1EwRkJVVU1zUTBGQlFVRXNRMEZCUVVFc1EwRkRka1FzU1VGSFNVTXNRMEZCUVVFc1EwRkJZMUlzUTBGQlFVRXNRMEYyUTBkRUxFTkJRVUZCTEVOQlJXcENWU3hEUVVGQlFTeERRV3REUVVNc1EwRkJRVUVzUTBGQlUwd3NRMEZCUVVFc1EwRkJTMDBzVFVGQlFVRXNRMEZEWkVNc1EwRkJRVUVzUTBGQlV5eERRVUZCTEVOQlExUkRMRU5CUVVGQkxFTkJRVkVzUTBGQlFTeERRVWRhTEVWQlFVY3NRMEZEUkN4SFFVRkpVQ3hEUVVGQlFTeEZRVUZWU1N4RFFVRkJRU3hEUVVOYUxFMUJRVTBzU1VGQlNVa3NTMEZCUVVFc1EwRkJUU3cwUTBGQlFTeERRVUZCTEVOQlNXeENMRWRCUVVFc1EwRkJaU3hEUVVGQkxFbEJSR1prTEVOQlFVRkJMRU5CUVZGTUxFMUJRVUZCTEVOQlFVOVRMRTFCUVVGQkxFTkJRVTlETEVOQlFVRkJMRU5CUVV0VkxGVkJRVUZCTEVOQlFWZFVMRU5CUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlJYQkRMRTFCUVUwc1NVRkJTVkVzUzBGQlFVRXNRMEZCVFN4M1FrRkJRU3hEUVVFeVFsUXNRMEZCUVVFc1EwRkJTMWNzVFVGQlFVRXNRMEZCVDFZc1EwRkJRVUVzUTBGQlV5eERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVZHNSVVVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUlVFM1JWY3NSVUZCUVN4RFFUWkZUMUlzUTBGQlFVRXNRMEZCUVVFc1EwRkZiRUpaTEVOQlFVRkJMRVZCUVVGQkxFTkJSRUZhTEVOQlFVRkJMRVZCTTBWblFrY3NSVUZCUVVFc1IwRTBSVmxWTEVOQlFVRkJMRU5CUXpWQ1FTeERRVUZCUVN4RlFXNUdhVUlzUTBGQlFTeERRVUZCTEUxQmIwWldUQ3hEUVVGQlFTeEZRVVZVUkN4RFFVRkJRU3hEUVVGVlZTeExRVUZCUVN4RlFYWkVUbElzUTBGQlFVRXNRMEZCUVVFc1EwRkdhVUpXTEVOQlFVRkJMRU5CZVVSWFlTeERRVUZCUVN4SFFYWkVVaXhEUVVGQkxFTkJSRlVzUTBGQlFTeEhRVUZRTEVOQlFVRXNRMEZCVkdJc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkhZbFVzUTBGQlFVRXNRMEZEUkVFc1EwRkJRVUVzUTBGQlFVRXNRMEZ4UkVwR0xFTkJRVUZCTEVOQlFWVlhMRWxCUVVGQkxFTkJRVTlhTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYWDA9IiwidmFyIGludFRvQ2hhck1hcD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5zcGxpdChcIlwiKTsvKiBjb21tb24tc2hha2UgcmVtb3ZlZDogZXhwb3J0cy5lbmNvZGUgPSAqLyB2b2lkIDAsIGZ1bmN0aW9uKGUpe2lmKDA8PWUmJmU8aW50VG9DaGFyTWFwLmxlbmd0aClyZXR1cm4gaW50VG9DaGFyTWFwW2VdO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJNdXN0IGJlIGJldHdlZW4gMCBhbmQgNjM6IFwiK2UpfSwvKiBjb21tb24tc2hha2UgcmVtb3ZlZDogZXhwb3J0cy5kZWNvZGUgPSAqLyB2b2lkIDAsIGZ1bmN0aW9uKGUpe3JldHVybiA2NTw9ZSYmZTw9OTA/ZS02NTo5Nzw9ZSYmZTw9MTIyP2UtOTcrMjY6NDg8PWUmJmU8PTU3P2UtNDgrNTI6NDM9PWU/NjI6NDc9PWU/NjM6LTF9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUpoYzJVMk5DNXFjeUpkTENKdVlXMWxjeUk2V3lKcGJuUlViME5vWVhKTllYQWlMQ0p6Y0d4cGRDSXNJbVY0Y0c5eWRITWlMQ0p1ZFcxaVpYSWlMQ0pzWlc1bmRHZ2lMQ0pVZVhCbFJYSnliM0lpTENKamFHRnlRMjlrWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVDBFc1NVRkJTVUVzV1VGQlFVRXNRMEZCWlN4clJVRkJRU3hEUVVGdFJVTXNTMEZCUVVFc1EwRkJUU3hGUVVGQkxFTkJRVUVzUTBGTE5VWkRMSEZFUVVGcFFpeFRRVUZWUXl4RFFVRkJRU3hEUVVGQlFTeERRVU42UWl4SFFVRkpMRU5CUVVFc1JVRkJTMEVzUTBGQlFVRXNSVUZCVlVFc1EwRkJRVUVzUTBGQlUwZ3NXVUZCUVVFc1EwRkJZVWtzVFVGQlFVRXNRMEZEZGtNc1QwRkJUMG9zV1VGQlFVRXNRMEZCWVVjc1EwRkJRVUVzUTBGQlFVRXNRMEZGZEVJc1RVRkJUU3hKUVVGSlJTeFRRVUZCUVN4RFFVRlZMRFJDUVVGQkxFTkJRU3RDUml4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVOXlSRVFzY1VSQlFXbENMRk5CUVZWSkxFTkJRVUZCTEVOQlFVRkJMRU5CYVVKNlFpeFBRV2hDVnl4RlFVRkJMRVZCWjBKRFFTeERRVUZCUVN4RlFVRlpRU3hEUVVGQlFTeEZRV1ppTEVWQlFVRXNRMEZuUWtSQkxFTkJRVUZCTEVOQmFrSkRMRVZCUVVFc1EwRkhSeXhGUVVGQkxFVkJhMEpEUVN4RFFVRkJRU3hGUVVGWlFTeERRVUZCUVN4RlFXcENZaXhIUVVGQkxFTkJhMEpLUVN4RFFVRkJRU3hEUVc1Q1NTeEZRVUZCTEVOQlUwc3NSVUZCUVN4RFFVNVNMRVZCUVVFc1JVRnZRa05CTEVOQlFVRkJMRVZCUVZsQkxFTkJRVUZCTEVWQmJrSmlMRVZCUVVFc1EwRnZRa1JCTEVOQlFVRkJMRU5CY2tKRExFVkJRVUVzUTBGUFVTeEZRVUZCTEVOQlNsSXNSVUZCUVN4RlFYTkNVRUVzUTBGQlFVRXNRMEZEU3l4RlFVRkJMRU5CZEVKSExFVkJRVUVzUlVFd1FsSkJMRU5CUVVGQkxFTkJRMHNzUlVGQlFTeERRVUZCTEVOQlNVUXNRMEZCUVN4RFFVRkJMRU5CUVVFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcyNTFiR3hkZlE9PSIsImV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQ9MSxleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EPTIsZXhwb3J0cy5zZWFyY2g9ZnVuY3Rpb24ocix0LGUsRSl7aWYoMD09PXQubGVuZ3RoKXJldHVybi0xO3ZhciBuPWZ1bmN0aW9uIHIodCxlLEUsbixvLF8pe3ZhciBVPU1hdGguZmxvb3IoKGUtdCkvMikrdCxzPW8oRSxuW1VdLCEwKTtyZXR1cm4gMD09PXM/VTpzPjA/ZS1VPjE/cihVLGUsRSxuLG8sXyk6Xz09ZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORD9lPG4ubGVuZ3RoP2U6LTE6VTpVLXQ+MT9yKHQsVSxFLG4sbyxfKTpfPT1leHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EP1U6dDwwPy0xOnR9KC0xLHQubGVuZ3RoLHIsdCxlLEV8fGV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQpO2lmKG48MClyZXR1cm4tMTtmb3IoO24tMT49MCYmMD09PWUodFtuXSx0W24tMV0sITApOyktLW47cmV0dXJuIG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUpwYm1GeWVTMXpaV0Z5WTJndWFuTWlYU3dpYm1GdFpYTWlPbHNpWlhod2IzSjBjeUlzSWtkU1JVRlVSVk5VWDB4UFYwVlNYMEpQVlU1RUlpd2lURVZCVTFSZlZWQlFSVkpmUWs5VlRrUWlMQ0p6WldGeVkyZ2lMQ0poVG1WbFpHeGxJaXdpWVVoaGVYTjBZV05ySWl3aVlVTnZiWEJoY21VaUxDSmhRbWxoY3lJc0lteGxibWQwYUNJc0ltbHVaR1Y0SWl3aWNtVmpkWEp6YVhabFUyVmhjbU5vSWl3aVlVeHZkeUlzSW1GSWFXZG9JaXdpYldsa0lpd2lUV0YwYUNJc0ltWnNiMjl5SWl3aVkyMXdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlBRVUVzVDBGQlFVRXNRMEZCVVVNc2IwSkJRVUZCTEVOQlFYVkNMRU5CUVVFc1EwRkRMMEpFTEU5QlFVRkJMRU5CUVZGRkxHbENRVUZCUVN4RFFVRnZRaXhEUVVGQkxFTkJaMFkxUWtZc1QwRkJRVUVzUTBGQlVVY3NUVUZCUVVFc1EwRkJVeXhUUVVGblFrTXNRMEZCUVVFc1EwRkJVME1zUTBGQlFVRXNRMEZCVjBNc1EwRkJRVUVzUTBGQlZVTXNRMEZCUVVFc1EwRkJRVUVzUTBGRE4wUXNSMEZCZVVJc1EwRkJRU3hIUVVGeVFrWXNRMEZCUVVFc1EwRkJWVWNzVFVGQlFVRXNRMEZEV2l4TlFVRkJMRU5CUVZFc1EwRkJRU3hEUVVkV0xFbEJRVWxETEVOQlFVRkJMRU5CZEVWT0xGTkJRVk5ETEVOQlFVRkJMRU5CUVdkQ1F5eERRVUZCUVN4RFFVRk5ReXhEUVVGQlFTeERRVUZQVWl4RFFVRkJRU3hEUVVGVFF5eERRVUZCUVN4RFFVRlhReXhEUVVGQlFTeERRVUZWUXl4RFFVRkJRU3hEUVVGQlFTeERRVlZzUlN4SlFVRkpUU3hEUVVGQlFTeERRVUZOUXl4SlFVRkJRU3hEUVVGTFF5eExRVUZCUVN4RFFVRkJRU3hEUVVGUFNDeERRVUZCUVN4RFFVRlJSQ3hEUVVGQlFTeEZRVUZSTEVOQlFVRXNRMEZCUVN4RFFVRkxRU3hEUVVGQlFTeERRVU4yUTBzc1EwRkJRVUVzUTBGQlRWWXNRMEZCUVVFc1EwRkJVMFlzUTBGQlFVRXNRMEZCVTBNc1EwRkJRVUVzUTBGQlZWRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZEZEVNc1QwRkJXU3hEUVVGQkxFZEJRVkpITEVOQlFVRkJMRU5CUlV0SUxFTkJRVUZCTEVOQlJVRkhMRU5CUVVGQkxFTkJRVTBzUTBGQlFTeERRVVZVU2l4RFFVRkJRU3hEUVVGUlF5eERRVUZCUVN4RFFVRk5MRU5CUVVFc1EwRkZWRWdzUTBGQlFVRXNRMEZCWjBKSExFTkJRVUZCTEVOQlFVdEVMRU5CUVVGQkxFTkJRVTlTTEVOQlFVRkJMRU5CUVZORExFTkJRVUZCTEVOQlFWZERMRU5CUVVGQkxFTkJRVlZETEVOQlFVRkJMRU5CUVVGQkxFTkJTeTlFUVN4RFFVRkJRU3hGUVVGVFVDeFBRVUZCUVN4RFFVRlJSU3hwUWtGQlFVRXNRMEZEV2xVc1EwRkJRVUVzUTBGQlVWQXNRMEZCUVVFc1EwRkJWVWNzVFVGQlFVRXNRMEZCVTBrc1EwRkJRVUVzUTBGQlFVRXNRMEZCVXl4RFFVRkJMRU5CUlhCRFF5eERRVUZCUVN4RFFVdE1RU3hEUVVGQlFTeERRVUZOUml4RFFVRkJRU3hEUVVGUExFTkJRVUVzUTBGRlVrUXNRMEZCUVVFc1EwRkJaMEpETEVOQlFVRkJMRU5CUVUxRkxFTkJRVUZCTEVOQlFVdFVMRU5CUVVGQkxFTkJRVk5ETEVOQlFVRkJMRU5CUVZkRExFTkJRVUZCTEVOQlFWVkRMRU5CUVVGQkxFTkJRVUZCTEVOQlNUbEVRU3hEUVVGQlFTeEZRVUZUVUN4UFFVRkJRU3hEUVVGUlJTeHBRa0ZCUVVFc1EwRkRXbGNzUTBGQlFVRXNRMEZGUVVZc1EwRkJRVUVzUTBGQlR5eERRVUZCTEVOQlFVRXNRMEZCU3l4RFFVRkJMRU5CUVVsQkxFTkJRVUZCTEVOQk1VTTNRaXhEUVVGQkxFTkJjMFVyUWl4RFFVRkJMRU5CUVVkT0xFTkJRVUZCTEVOQlFWVkhMRTFCUVVGQkxFTkJRVkZLTEVOQlFVRkJMRU5CUVZORExFTkJRVUZCTEVOQlF5OUNReXhEUVVGQlFTeERRVUZWUXl4RFFVRkJRU3hGUVVGVFVDeFBRVUZCUVN4RFFVRlJReXh2UWtGQlFVRXNRMEZCUVVFc1EwRkRka1FzUjBGQlNWRXNRMEZCUVVFc1EwRkJVU3hEUVVGQkxFTkJRMVlzVFVGQlFTeERRVUZSTEVOQlFVRXNRMEZOVml4TFFVRlBRU3hEUVVGQlFTeERRVUZSTEVOQlFVRXNSVUZCU3l4RFFVRkJMRVZCUXpaRExFTkJRVUVzUjBGQk0wUklMRU5CUVVGQkxFTkJRVk5FTEVOQlFVRkJMRU5CUVZWSkxFTkJRVUZCTEVOQlFVRkJMRU5CUVZGS0xFTkJRVUZCTEVOQlFWVkpMRU5CUVVGQkxFTkJRVkVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRU3hGUVVjdlEwRXNRMEZCUVVFc1EwRkhTaXhQUVVGUFFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYxOSIsInZhciB1dGlsPXJlcXVpcmUoMzczKTtmdW5jdGlvbiBNYXBwaW5nTGlzdCgpe3RoaXMuX2FycmF5PVtdLHRoaXMuX3NvcnRlZD0hMCx0aGlzLl9sYXN0PXtnZW5lcmF0ZWRMaW5lOi0xLGdlbmVyYXRlZENvbHVtbjowfX1NYXBwaW5nTGlzdC5wcm90b3R5cGUudW5zb3J0ZWRGb3JFYWNoPWZ1bmN0aW9uKHQsZSl7dGhpcy5fYXJyYXkuZm9yRWFjaCh0LGUpfSxNYXBwaW5nTGlzdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxhLHMsbjtyPXQsaT0oZT10aGlzLl9sYXN0KS5nZW5lcmF0ZWRMaW5lLGE9ci5nZW5lcmF0ZWRMaW5lLHM9ZS5nZW5lcmF0ZWRDb2x1bW4sbj1yLmdlbmVyYXRlZENvbHVtbixhPml8fGE9PWkmJm4+PXN8fHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQoZSxyKTw9MD8odGhpcy5fbGFzdD10LHRoaXMuX2FycmF5LnB1c2godCkpOih0aGlzLl9zb3J0ZWQ9ITEsdGhpcy5fYXJyYXkucHVzaCh0KSl9LE1hcHBpbmdMaXN0LnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NvcnRlZHx8KHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCksdGhpcy5fc29ydGVkPSEwKSx0aGlzLl9hcnJheX0sZXhwb3J0cy5NYXBwaW5nTGlzdD1NYXBwaW5nTGlzdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW0xaGNIQnBibWN0YkdsemRDNXFjeUpkTENKdVlXMWxjeUk2V3lKMWRHbHNJaXdpY21WeGRXbHlaU0lzSWsxaGNIQnBibWRNYVhOMElpd2lkR2hwY3lJc0lsOWhjbkpoZVNJc0lsOXpiM0owWldRaUxDSmZiR0Z6ZENJc0ltZGxibVZ5WVhSbFpFeHBibVVpTENKblpXNWxjbUYwWldSRGIyeDFiVzRpTENKd2NtOTBiM1I1Y0dVaUxDSjFibk52Y25SbFpFWnZja1ZoWTJnaUxDSmhRMkZzYkdKaFkyc2lMQ0poVkdocGMwRnlaeUlzSW1admNrVmhZMmdpTENKaFpHUWlMQ0poVFdGd2NHbHVaeUlzSW0xaGNIQnBibWRCSWl3aWJXRndjR2x1WjBJaUxDSnNhVzVsUVNJc0lteHBibVZDSWl3aVkyOXNkVzF1UVNJc0ltTnZiSFZ0YmtJaUxDSmpiMjF3WVhKbFFubEhaVzVsY21GMFpXUlFiM05wZEdsdmJuTkpibVpzWVhSbFpDSXNJbkIxYzJnaUxDSjBiMEZ5Y21GNUlpd2ljMjl5ZENJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVU5QkxFbEJRVWxCTEVsQlFVRkJMRU5CUVU5RExFOUJRVUZCTEVOQlFWRXNVVUZCUVN4RFFVRkJMRU5CY1VKdVFpeFRRVUZUUXl4WFFVRkJRU3hGUVVGQlFTeERRVU5RUXl4SlFVRkJRU3hEUVVGTFF5eE5RVUZCUVN4RFFVRlRMRVZCUVVFc1EwRkRaRVFzU1VGQlFVRXNRMEZCUzBVc1QwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGRlRFWXNTVUZCUVVFc1EwRkJTMGNzUzBGQlFVRXNRMEZCVVN4RFFVRkRReXhoUVVGQlFTeERRVUZCUVN4RFFVRm5RaXhEUVVGQkxFTkJRVWRETEdWQlFVRkJMRU5CUVdsQ0xFTkJRVUVzUTBGQlFTeERRVk53UkU0c1YwRkJRVUVzUTBGQldVOHNVMEZCUVVFc1EwRkJWVU1zWlVGQlFVRXNRMEZEY0VJc1UwRkJOa0pETEVOQlFVRkJMRU5CUVZkRExFTkJRVUZCTEVOQlFVRkJMRU5CUTNSRFZDeEpRVUZCUVN4RFFVRkxReXhOUVVGQlFTeERRVUZQVXl4UFFVRkJRU3hEUVVGUlJpeERRVUZCUVN4RFFVRlhReXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVZGdVExWXNWMEZCUVVFc1EwRkJXVThzVTBGQlFVRXNRMEZCVlVzc1IwRkJRVUVzUTBGQlRTeFRRVUY1UWtNc1EwRkJRVUVzUTBGQlFVRXNRMEYwUTNKRUxFbEJRV2REUXl4RFFVRkJRU3hEUVVGVlF5eERRVUZCUVN4RFFVVndRME1zUTBGQlFVRXNRMEZEUVVNc1EwRkJRVUVzUTBGRFFVTXNRMEZCUVVFc1EwRkRRVU1zUTBGQlFVRXNRMEZNYjBOS0xFTkJRVUZCTEVOQmRVTkVSaXhEUVVGQlFTeERRWEpEYmtOSExFTkJRVUZCTEVOQlFVRkJMRU5CUmpCQ1JpeERRVUZCUVN4RFFYVkRTR0lzU1VGQlFVRXNRMEZCUzBjc1MwRkJRVUVzUlVGeVExaERMR0ZCUVVGQkxFTkJRMnBDV1N4RFFVRkJRU3hEUVVGUlJpeERRVUZCUVN4RFFVRlRWaXhoUVVGQlFTeERRVU5xUW1Fc1EwRkJRVUVzUTBGQlZVb3NRMEZCUVVFc1EwRkJVMUlzWlVGQlFVRXNRMEZEYmtKaExFTkJRVUZCTEVOQlFWVktMRU5CUVVGQkxFTkJRVk5VTEdWQlFVRkJMRU5CUTJoQ1Z5eERRVUZCUVN4RFFVRlJSQ3hEUVVGQlFTeEZRVUZUUXl4RFFVRkJRU3hGUVVGVFJDeERRVUZCUVN4RlFVRlRSeXhEUVVGQlFTeEZRVUZYUkN4RFFVRkJRU3hGUVVNNVEzQkNMRWxCUVVGQkxFTkJRVXR6UWl4dFEwRkJRVUVzUTBGQmIwTk9MRU5CUVVGQkxFTkJRVlZETEVOQlFVRkJMRU5CUVVGQkxFVkJRV0VzUTBGQlFTeEZRV2xEY2tWa0xFbEJRVUZCTEVOQlFVdEhMRXRCUVVGQkxFTkJRVkZUTEVOQlFVRkJMRU5CUTJKYUxFbEJRVUZCTEVOQlFVdERMRTFCUVVGQkxFTkJRVTl0UWl4SlFVRkJRU3hEUVVGTFVpeERRVUZCUVN4RFFVRkJRU3hIUVVWcVFsb3NTVUZCUVVFc1EwRkJTMFVzVDBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZEVEVZc1NVRkJRVUVzUTBGQlMwTXNUVUZCUVVFc1EwRkJUMjFDTEVsQlFVRkJMRU5CUVV0U0xFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQllYSkNZaXhYUVVGQlFTeERRVUZaVHl4VFFVRkJRU3hEUVVGVlpTeFBRVUZCUVN4RFFVRlZMRlZCUVVFc1EwRkxPVUlzVDBGS1MzSkNMRWxCUVVGQkxFTkJRVXRGTEU5QlFVRkJMRWRCUTFKR0xFbEJRVUZCTEVOQlFVdERMRTFCUVVGQkxFTkJRVTl4UWl4SlFVRkJRU3hEUVVGTGVrSXNTVUZCUVVFc1EwRkJTM05DTEcxRFFVRkJRU3hEUVVGQlFTeERRVU4wUW01Q0xFbEJRVUZCTEVOQlFVdEZMRTlCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlJVRkdMRWxCUVVGQkxFTkJRVXRETEUxQlFVRkJMRU5CUVVGQkxFTkJSMlJ6UWl4UFFVRkJRU3hEUVVGUmVFSXNWMEZCUVVFc1EwRkJZMEVzVjBGQlFVRXNRMEZCUVVFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcyNTFiR3hkZlE9PSIsImZ1bmN0aW9uIHN3YXAobyxyLGEpe3ZhciB0PW9bcl07b1tyXT1vW2FdLG9bYV09dH1mdW5jdGlvbiBkb1F1aWNrU29ydChvLHIsYSx0KXtpZihhPHQpe3ZhciBpPWEtMTtzd2FwKG8sKGQ9YSxmPXQsTWF0aC5yb3VuZChkK01hdGgucmFuZG9tKCkqKGYtZCkpKSx0KTtmb3IodmFyIG49b1t0XSx1PWE7dTx0O3UrKylyKG9bdV0sbik8PTAmJnN3YXAobyxpKz0xLHUpO3N3YXAobyxpKzEsdSk7dmFyIGM9aSsxO2RvUXVpY2tTb3J0KG8scixhLGMtMSksZG9RdWlja1NvcnQobyxyLGMrMSx0KX12YXIgZCxmfWV4cG9ydHMucXVpY2tTb3J0PWZ1bmN0aW9uKG8scil7ZG9RdWlja1NvcnQobyxyLDAsby5sZW5ndGgtMSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkYxYVdOckxYTnZjblF1YW5NaVhTd2libUZ0WlhNaU9sc2ljM2RoY0NJc0ltRnllU0lzSW5naUxDSjVJaXdpZEdWdGNDSXNJbVJ2VVhWcFkydFRiM0owSWl3aVkyOXRjR0Z5WVhSdmNpSXNJbkFpTENKeUlpd2lhU0lzSW14dmR5SXNJbWhwWjJnaUxDSk5ZWFJvSWl3aWNtOTFibVFpTENKeVlXNWtiMjBpTENKd2FYWnZkQ0lzSW1vaUxDSnhJaXdpWlhod2IzSjBjeUlzSW5GMWFXTnJVMjl5ZENJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCTWtKQkxGTkJRVk5CTEVsQlFVRkJMRU5CUVV0RExFTkJRVUZCTEVOQlFVdERMRU5CUVVGQkxFTkJRVWRETEVOQlFVRkJMRU5CUVVGQkxFTkJRM0JDTEVsQlFVbERMRU5CUVVGQkxFTkJRVTlJTEVOQlFVRkJMRU5CUVVsRExFTkJRVUZCTEVOQlFVRkJMRU5CUTJaRUxFTkJRVUZCTEVOQlFVbERMRU5CUVVGQkxFTkJRVUZCTEVOQlFVdEVMRU5CUVVGQkxFTkJRVWxGTEVOQlFVRkJMRU5CUVVGQkxFTkJRMkpHTEVOQlFVRkJMRU5CUVVsRkxFTkJRVUZCTEVOQlFVRkJMRU5CUVV0RExFTkJRVUZCTEVOQk1rSllMRk5CUVZORExGZEJRVUZCTEVOQlFWbEtMRU5CUVVGQkxFTkJRVXRMTEVOQlFVRkJMRU5CUVZsRExFTkJRVUZCTEVOQlFVZERMRU5CUVVGQkxFTkJRVUZCTEVOQlMzWkRMRWRCUVVsRUxFTkJRVUZCTEVOQlFVbERMRU5CUVVGQkxFTkJRVWNzUTBGWlZDeEpRVU5KUXl4RFFVRkJRU3hEUVVGSlJpeERRVUZCUVN4RFFVRkpMRU5CUVVFc1EwRkZXbEFzU1VGQlFVRXNRMEZCUzBNc1EwRkJRVUVzUlVGd1EybENVeXhEUVVGQlFTeERRV2xEV1Vnc1EwRkJRVUVzUTBGcVExQkpMRU5CUVVGQkxFTkJhVU5WU0N4RFFVRkJRU3hEUVdoRGFFTkpMRWxCUVVGQkxFTkJRVXRETEV0QlFVRkJMRU5CUVUxSUxFTkJRVUZCTEVOQlFVOUZMRWxCUVVGQkxFTkJRVXRGTEUxQlFVRkJMRVZCUVVGQkxFVkJRVmxJTEVOQlFVRkJMRU5CUVU5RUxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFVkJiVU42UWtZc1EwRkJRVUVzUTBGQlFVRXNRMEZUZEVJc1NVRlNRU3hKUVVGSlR5eERRVUZCUVN4RFFVRlJaQ3hEUVVGQlFTeERRVUZKVHl4RFFVRkJRU3hEUVVGQlFTeERRVkZRVVN4RFFVRkJRU3hEUVVGSlZDeERRVUZCUVN4RFFVRkhVeXhEUVVGQlFTeERRVUZKVWl4RFFVRkJRU3hEUVVGSFVTeERRVUZCUVN4RlFVRkJRU3hEUVVOcVFsWXNRMEZCUVVFc1EwRkJWMHdzUTBGQlFVRXNRMEZCU1dVc1EwRkJRVUVzUTBGQlFVRXNRMEZCU1VRc1EwRkJRVUVzUTBGQlFVRXNSVUZCVlN4RFFVRkJMRVZCUlM5Q1ppeEpRVUZCUVN4RFFVRkxReXhEUVVGQlFTeERRVVJNVVN4RFFVRkJRU3hGUVVGTExFTkJRVUVzUTBGRFVVOHNRMEZCUVVFc1EwRkJRVUVzUTBGSmFrSm9RaXhKUVVGQlFTeERRVUZMUXl4RFFVRkJRU3hEUVVGTFVTeERRVUZCUVN4RFFVRkpMRU5CUVVFc1EwRkJSMDhzUTBGQlFVRXNRMEZCUVVFc1EwRkRha0lzU1VGQlNVTXNRMEZCUVVFc1EwRkJTVklzUTBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CU1ZwS0xGZEJRVUZCTEVOQlFWbEtMRU5CUVVGQkxFTkJRVXRMTEVOQlFVRkJMRU5CUVZsRExFTkJRVUZCTEVOQlFVZFZMRU5CUVVGQkxFTkJRVWtzUTBGQlFTeERRVUZCTEVOQlEzQkRXaXhYUVVGQlFTeERRVUZaU2l4RFFVRkJRU3hEUVVGTFN5eERRVUZCUVN4RFFVRlpWeXhEUVVGQlFTeERRVUZKTEVOQlFVRXNRMEZCUjFRc1EwRkJRVUVzUTBGQlFVRXNRMEV4UkhoRExFbEJRVEJDUlN4RFFVRkJRU3hEUVVGTFF5eERRVUZCUVN4RFFYTkZMMEpQTEU5QlFVRkJMRU5CUVZGRExGTkJRVUZCTEVOQlFWa3NVMEZCVld4Q0xFTkJRVUZCTEVOQlFVdExMRU5CUVVGQkxFTkJRVUZCTEVOQlEycERSQ3hYUVVGQlFTeERRVUZaU2l4RFFVRkJRU3hEUVVGTFN5eERRVUZCUVN4RFFVRlpMRU5CUVVFc1EwRkJSMHdzUTBGQlFVRXNRMEZCU1cxQ0xFMUJRVUZCTEVOQlFWTXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMTkiLCJ2YXIgdXRpbD1yZXF1aXJlKDM3MyksYmluYXJ5U2VhcmNoPXJlcXVpcmUoMzY3KSxBcnJheVNldD1yZXF1aXJlKDM2NCkuQXJyYXlTZXQsYmFzZTY0VkxRPXJlcXVpcmUoMzY1KSxxdWlja1NvcnQ9cmVxdWlyZSgzNjkpLnF1aWNrU29ydDtmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcihlLHIpe3ZhciBuPWU7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihuPXV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChlKSksbnVsbCE9bi5zZWN0aW9ucz9uZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKG4scik6bmV3IEJhc2ljU291cmNlTWFwQ29uc3VtZXIobixyKX1mdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGUscil7dmFyIG49ZTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKG49dXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGUpKTt2YXIgbz11dGlsLmdldEFyZyhuLFwidmVyc2lvblwiKSx0PXV0aWwuZ2V0QXJnKG4sXCJzb3VyY2VzXCIpLGk9dXRpbC5nZXRBcmcobixcIm5hbWVzXCIsW10pLHU9dXRpbC5nZXRBcmcobixcInNvdXJjZVJvb3RcIixudWxsKSxzPXV0aWwuZ2V0QXJnKG4sXCJzb3VyY2VzQ29udGVudFwiLG51bGwpLGE9dXRpbC5nZXRBcmcobixcIm1hcHBpbmdzXCIpLGw9dXRpbC5nZXRBcmcobixcImZpbGVcIixudWxsKTtpZihvIT10aGlzLl92ZXJzaW9uKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHZlcnNpb246IFwiK28pO3UmJih1PXV0aWwubm9ybWFsaXplKHUpKSx0PXQubWFwKFN0cmluZykubWFwKHV0aWwubm9ybWFsaXplKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHUmJnV0aWwuaXNBYnNvbHV0ZSh1KSYmdXRpbC5pc0Fic29sdXRlKGUpP3V0aWwucmVsYXRpdmUodSxlKTplfSksdGhpcy5fbmFtZXM9QXJyYXlTZXQuZnJvbUFycmF5KGkubWFwKFN0cmluZyksITApLHRoaXMuX3NvdXJjZXM9QXJyYXlTZXQuZnJvbUFycmF5KHQsITApLHRoaXMuX2Fic29sdXRlU291cmNlcz10aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTCh1LGUscil9KSx0aGlzLnNvdXJjZVJvb3Q9dSx0aGlzLnNvdXJjZXNDb250ZW50PXMsdGhpcy5fbWFwcGluZ3M9YSx0aGlzLl9zb3VyY2VNYXBVUkw9cix0aGlzLmZpbGU9bH1mdW5jdGlvbiBNYXBwaW5nKCl7dGhpcy5nZW5lcmF0ZWRMaW5lPTAsdGhpcy5nZW5lcmF0ZWRDb2x1bW49MCx0aGlzLnNvdXJjZT1udWxsLHRoaXMub3JpZ2luYWxMaW5lPW51bGwsdGhpcy5vcmlnaW5hbENvbHVtbj1udWxsLHRoaXMubmFtZT1udWxsfWZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihlLHIpe3ZhciBuPWU7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihuPXV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChlKSk7dmFyIG89dXRpbC5nZXRBcmcobixcInZlcnNpb25cIiksdD11dGlsLmdldEFyZyhuLFwic2VjdGlvbnNcIik7aWYobyE9dGhpcy5fdmVyc2lvbil0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB2ZXJzaW9uOiBcIitvKTt0aGlzLl9zb3VyY2VzPW5ldyBBcnJheVNldCx0aGlzLl9uYW1lcz1uZXcgQXJyYXlTZXQ7dmFyIGk9e2xpbmU6LTEsY29sdW1uOjB9O3RoaXMuX3NlY3Rpb25zPXQubWFwKGZ1bmN0aW9uKGUpe2lmKGUudXJsKXRocm93IG5ldyBFcnJvcihcIlN1cHBvcnQgZm9yIHVybCBmaWVsZCBpbiBzZWN0aW9ucyBub3QgaW1wbGVtZW50ZWQuXCIpO3ZhciBuPXV0aWwuZ2V0QXJnKGUsXCJvZmZzZXRcIiksbz11dGlsLmdldEFyZyhuLFwibGluZVwiKSx0PXV0aWwuZ2V0QXJnKG4sXCJjb2x1bW5cIik7aWYobzxpLmxpbmV8fG89PT1pLmxpbmUmJnQ8aS5jb2x1bW4pdGhyb3cgbmV3IEVycm9yKFwiU2VjdGlvbiBvZmZzZXRzIG11c3QgYmUgb3JkZXJlZCBhbmQgbm9uLW92ZXJsYXBwaW5nLlwiKTtyZXR1cm4gaT1uLHtnZW5lcmF0ZWRPZmZzZXQ6e2dlbmVyYXRlZExpbmU6bysxLGdlbmVyYXRlZENvbHVtbjp0KzF9LGNvbnN1bWVyOm5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhlLFwibWFwXCIpLHIpfX0pfVNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXA9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwKGUscil9LFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbj0zLFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX2dlbmVyYXRlZE1hcHBpbmdzPW51bGwsT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSxcIl9nZW5lcmF0ZWRNYXBwaW5nc1wiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzfHx0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLHRoaXMuc291cmNlUm9vdCksdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzfX0pLFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX29yaWdpbmFsTWFwcGluZ3M9bnVsbCxPYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLFwiX29yaWdpbmFsTWFwcGluZ3NcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzfHx0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLHRoaXMuc291cmNlUm9vdCksdGhpcy5fX29yaWdpbmFsTWFwcGluZ3N9fSksU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yPWZ1bmN0aW9uKGUscil7dmFyIG49ZS5jaGFyQXQocik7cmV0dXJuXCI7XCI9PT1ufHxcIixcIj09PW59LFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncz1mdW5jdGlvbihlLHIpe3Rocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgX3BhcnNlTWFwcGluZ3NcIil9LFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUj0xLFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSPTIsU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQ9MSxTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORD0yLFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZz1mdW5jdGlvbihlLHIsbil7dmFyIG8sdD1yfHxudWxsO3N3aXRjaChufHxTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVIpe2Nhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOm89dGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7YnJlYWs7Y2FzZSBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUjpvPXRoaXMuX29yaWdpbmFsTWFwcGluZ3M7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG9yZGVyIG9mIGl0ZXJhdGlvbi5cIil9dmFyIGk9dGhpcy5zb3VyY2VSb290O28ubWFwKGZ1bmN0aW9uKGUpe3ZhciByPW51bGw9PT1lLnNvdXJjZT9udWxsOnRoaXMuX3NvdXJjZXMuYXQoZS5zb3VyY2UpO3JldHVybntzb3VyY2U6cj11dGlsLmNvbXB1dGVTb3VyY2VVUkwoaSxyLHRoaXMuX3NvdXJjZU1hcFVSTCksZ2VuZXJhdGVkTGluZTplLmdlbmVyYXRlZExpbmUsZ2VuZXJhdGVkQ29sdW1uOmUuZ2VuZXJhdGVkQ29sdW1uLG9yaWdpbmFsTGluZTplLm9yaWdpbmFsTGluZSxvcmlnaW5hbENvbHVtbjplLm9yaWdpbmFsQ29sdW1uLG5hbWU6bnVsbD09PWUubmFtZT9udWxsOnRoaXMuX25hbWVzLmF0KGUubmFtZSl9fSx0aGlzKS5mb3JFYWNoKGUsdCl9LFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3I9ZnVuY3Rpb24oZSl7dmFyIHI9dXRpbC5nZXRBcmcoZSxcImxpbmVcIiksbj17c291cmNlOnV0aWwuZ2V0QXJnKGUsXCJzb3VyY2VcIiksb3JpZ2luYWxMaW5lOnIsb3JpZ2luYWxDb2x1bW46dXRpbC5nZXRBcmcoZSxcImNvbHVtblwiLDApfTtpZihuLnNvdXJjZT10aGlzLl9maW5kU291cmNlSW5kZXgobi5zb3VyY2UpLG4uc291cmNlPDApcmV0dXJuW107dmFyIG89W10sdD10aGlzLl9maW5kTWFwcGluZyhuLHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXCJvcmlnaW5hbExpbmVcIixcIm9yaWdpbmFsQ29sdW1uXCIsdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQpO2lmKHQ+PTApe3ZhciBpPXRoaXMuX29yaWdpbmFsTWFwcGluZ3NbdF07aWYodm9pZCAwPT09ZS5jb2x1bW4pZm9yKHZhciB1PWkub3JpZ2luYWxMaW5lO2kmJmkub3JpZ2luYWxMaW5lPT09dTspby5wdXNoKHtsaW5lOnV0aWwuZ2V0QXJnKGksXCJnZW5lcmF0ZWRMaW5lXCIsbnVsbCksY29sdW1uOnV0aWwuZ2V0QXJnKGksXCJnZW5lcmF0ZWRDb2x1bW5cIixudWxsKSxsYXN0Q29sdW1uOnV0aWwuZ2V0QXJnKGksXCJsYXN0R2VuZXJhdGVkQ29sdW1uXCIsbnVsbCl9KSxpPXRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKyt0XTtlbHNlIGZvcih2YXIgcz1pLm9yaWdpbmFsQ29sdW1uO2kmJmkub3JpZ2luYWxMaW5lPT09ciYmaS5vcmlnaW5hbENvbHVtbj09czspby5wdXNoKHtsaW5lOnV0aWwuZ2V0QXJnKGksXCJnZW5lcmF0ZWRMaW5lXCIsbnVsbCksY29sdW1uOnV0aWwuZ2V0QXJnKGksXCJnZW5lcmF0ZWRDb2x1bW5cIixudWxsKSxsYXN0Q29sdW1uOnV0aWwuZ2V0QXJnKGksXCJsYXN0R2VuZXJhdGVkQ29sdW1uXCIsbnVsbCl9KSxpPXRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKyt0XX1yZXR1cm4gb30sLyogY29tbW9uLXNoYWtlIHJlbW92ZWQ6IGV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSAqLyBTb3VyY2VNYXBDb25zdW1lcixCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSksQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3VtZXI9U291cmNlTWFwQ29uc3VtZXIsQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRTb3VyY2VJbmRleD1mdW5jdGlvbihlKXt2YXIgcixuPWU7aWYobnVsbCE9dGhpcy5zb3VyY2VSb290JiYobj11dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCxuKSksdGhpcy5fc291cmNlcy5oYXMobikpcmV0dXJuIHRoaXMuX3NvdXJjZXMuaW5kZXhPZihuKTtmb3Iocj0wO3I8dGhpcy5fYWJzb2x1dGVTb3VyY2VzLmxlbmd0aDsrK3IpaWYodGhpcy5fYWJzb2x1dGVTb3VyY2VzW3JdPT1lKXJldHVybiByO3JldHVybi0xfSxCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXA9ZnVuY3Rpb24oZSxyKXt2YXIgbj1PYmplY3QuY3JlYXRlKEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKSxvPW4uX25hbWVzPUFycmF5U2V0LmZyb21BcnJheShlLl9uYW1lcy50b0FycmF5KCksITApLHQ9bi5fc291cmNlcz1BcnJheVNldC5mcm9tQXJyYXkoZS5fc291cmNlcy50b0FycmF5KCksITApO24uc291cmNlUm9vdD1lLl9zb3VyY2VSb290LG4uc291cmNlc0NvbnRlbnQ9ZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChuLl9zb3VyY2VzLnRvQXJyYXkoKSxuLnNvdXJjZVJvb3QpLG4uZmlsZT1lLl9maWxlLG4uX3NvdXJjZU1hcFVSTD1yLG4uX2Fic29sdXRlU291cmNlcz1uLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChuLnNvdXJjZVJvb3QsZSxyKX0pO2Zvcih2YXIgaT1lLl9tYXBwaW5ncy50b0FycmF5KCkuc2xpY2UoKSx1PW4uX19nZW5lcmF0ZWRNYXBwaW5ncz1bXSxzPW4uX19vcmlnaW5hbE1hcHBpbmdzPVtdLGE9MCxsPWkubGVuZ3RoO2E8bDthKyspe3ZhciBjPWlbYV0scD1uZXcgTWFwcGluZztwLmdlbmVyYXRlZExpbmU9Yy5nZW5lcmF0ZWRMaW5lLHAuZ2VuZXJhdGVkQ29sdW1uPWMuZ2VuZXJhdGVkQ29sdW1uLGMuc291cmNlJiYocC5zb3VyY2U9dC5pbmRleE9mKGMuc291cmNlKSxwLm9yaWdpbmFsTGluZT1jLm9yaWdpbmFsTGluZSxwLm9yaWdpbmFsQ29sdW1uPWMub3JpZ2luYWxDb2x1bW4sYy5uYW1lJiYocC5uYW1lPW8uaW5kZXhPZihjLm5hbWUpKSxzLnB1c2gocCkpLHUucHVzaChwKX1yZXR1cm4gcXVpY2tTb3J0KG4uX19vcmlnaW5hbE1hcHBpbmdzLHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpLG59LEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uPTMsT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLFwic291cmNlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWJzb2x1dGVTb3VyY2VzLnNsaWNlKCl9fSksQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3M9ZnVuY3Rpb24oZSxyKXtmb3IodmFyIG4sbyx0LGksdSxzPTEsYT0wLGw9MCxjPTAscD0wLGc9MCxtPWUubGVuZ3RoLGg9MCxkPXt9LGY9e30sXz1bXSxDPVtdO2g8bTspaWYoXCI7XCI9PT1lLmNoYXJBdChoKSlzKyssaCsrLGE9MDtlbHNlIGlmKFwiLFwiPT09ZS5jaGFyQXQoaCkpaCsrO2Vsc2V7Zm9yKChuPW5ldyBNYXBwaW5nKS5nZW5lcmF0ZWRMaW5lPXMsaT1oO2k8bSYmIXRoaXMuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoZSxpKTtpKyspO2lmKHQ9ZFtvPWUuc2xpY2UoaCxpKV0paCs9by5sZW5ndGg7ZWxzZXtmb3IodD1bXTtoPGk7KWJhc2U2NFZMUS5kZWNvZGUoZSxoLGYpLHU9Zi52YWx1ZSxoPWYucmVzdCx0LnB1c2godSk7aWYoMj09PXQubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkZvdW5kIGEgc291cmNlLCBidXQgbm8gbGluZSBhbmQgY29sdW1uXCIpO2lmKDM9PT10Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtblwiKTtkW29dPXR9bi5nZW5lcmF0ZWRDb2x1bW49YSt0WzBdLGE9bi5nZW5lcmF0ZWRDb2x1bW4sdC5sZW5ndGg+MSYmKG4uc291cmNlPXArdFsxXSxwKz10WzFdLG4ub3JpZ2luYWxMaW5lPWwrdFsyXSxsPW4ub3JpZ2luYWxMaW5lLG4ub3JpZ2luYWxMaW5lKz0xLG4ub3JpZ2luYWxDb2x1bW49Yyt0WzNdLGM9bi5vcmlnaW5hbENvbHVtbix0Lmxlbmd0aD40JiYobi5uYW1lPWcrdFs0XSxnKz10WzRdKSksQy5wdXNoKG4pLFwibnVtYmVyXCI9PXR5cGVvZiBuLm9yaWdpbmFsTGluZSYmXy5wdXNoKG4pfXF1aWNrU29ydChDLHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpLHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncz1DLHF1aWNrU29ydChfLHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpLHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzPV99LEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZz1mdW5jdGlvbihlLHIsbixvLHQsaSl7aWYoZVtuXTw9MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgXCIrZVtuXSk7aWYoZVtvXTwwKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDb2x1bW4gbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCwgZ290IFwiK2Vbb10pO3JldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGUscix0LGkpfSxCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsrK2Upe3ZhciByPXRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2VdO2lmKGUrMTx0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGgpe3ZhciBuPXRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2UrMV07aWYoci5nZW5lcmF0ZWRMaW5lPT09bi5nZW5lcmF0ZWRMaW5lKXtyLmxhc3RHZW5lcmF0ZWRDb2x1bW49bi5nZW5lcmF0ZWRDb2x1bW4tMTtjb250aW51ZX19ci5sYXN0R2VuZXJhdGVkQ29sdW1uPTEvMH19LEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3I9ZnVuY3Rpb24oZSl7dmFyIHI9e2dlbmVyYXRlZExpbmU6dXRpbC5nZXRBcmcoZSxcImxpbmVcIiksZ2VuZXJhdGVkQ29sdW1uOnV0aWwuZ2V0QXJnKGUsXCJjb2x1bW5cIil9LG49dGhpcy5fZmluZE1hcHBpbmcocix0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncyxcImdlbmVyYXRlZExpbmVcIixcImdlbmVyYXRlZENvbHVtblwiLHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQsdXRpbC5nZXRBcmcoZSxcImJpYXNcIixTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCkpO2lmKG4+PTApe3ZhciBvPXRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW25dO2lmKG8uZ2VuZXJhdGVkTGluZT09PXIuZ2VuZXJhdGVkTGluZSl7dmFyIHQ9dXRpbC5nZXRBcmcobyxcInNvdXJjZVwiLG51bGwpO251bGwhPT10JiYodD10aGlzLl9zb3VyY2VzLmF0KHQpLHQ9dXRpbC5jb21wdXRlU291cmNlVVJMKHRoaXMuc291cmNlUm9vdCx0LHRoaXMuX3NvdXJjZU1hcFVSTCkpO3ZhciBpPXV0aWwuZ2V0QXJnKG8sXCJuYW1lXCIsbnVsbCk7cmV0dXJuIG51bGwhPT1pJiYoaT10aGlzLl9uYW1lcy5hdChpKSkse3NvdXJjZTp0LGxpbmU6dXRpbC5nZXRBcmcobyxcIm9yaWdpbmFsTGluZVwiLG51bGwpLGNvbHVtbjp1dGlsLmdldEFyZyhvLFwib3JpZ2luYWxDb2x1bW5cIixudWxsKSxuYW1lOml9fX1yZXR1cm57c291cmNlOm51bGwsbGluZTpudWxsLGNvbHVtbjpudWxsLG5hbWU6bnVsbH19LEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLnNvdXJjZXNDb250ZW50JiZ0aGlzLnNvdXJjZXNDb250ZW50Lmxlbmd0aD49dGhpcy5fc291cmNlcy5zaXplKCkmJiF0aGlzLnNvdXJjZXNDb250ZW50LnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV9KX0sQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvcj1mdW5jdGlvbihlLHIpe2lmKCF0aGlzLnNvdXJjZXNDb250ZW50KXJldHVybiBudWxsO3ZhciBuPXRoaXMuX2ZpbmRTb3VyY2VJbmRleChlKTtpZihuPj0wKXJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W25dO3ZhciBvLHQ9ZTtpZihudWxsIT10aGlzLnNvdXJjZVJvb3QmJih0PXV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LHQpKSxudWxsIT10aGlzLnNvdXJjZVJvb3QmJihvPXV0aWwudXJsUGFyc2UodGhpcy5zb3VyY2VSb290KSkpe3ZhciBpPXQucmVwbGFjZSgvXmZpbGU6XFwvXFwvLyxcIlwiKTtpZihcImZpbGVcIj09by5zY2hlbWUmJnRoaXMuX3NvdXJjZXMuaGFzKGkpKXJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihpKV07aWYoKCFvLnBhdGh8fFwiL1wiPT1vLnBhdGgpJiZ0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIit0KSlyZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIrdCldfWlmKHIpcmV0dXJuIG51bGw7dGhyb3cgbmV3IEVycm9yKCdcIicrdCsnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyl9LEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yPWZ1bmN0aW9uKGUpe3ZhciByPXV0aWwuZ2V0QXJnKGUsXCJzb3VyY2VcIik7aWYoKHI9dGhpcy5fZmluZFNvdXJjZUluZGV4KHIpKTwwKXJldHVybntsaW5lOm51bGwsY29sdW1uOm51bGwsbGFzdENvbHVtbjpudWxsfTt2YXIgbj17c291cmNlOnIsb3JpZ2luYWxMaW5lOnV0aWwuZ2V0QXJnKGUsXCJsaW5lXCIpLG9yaWdpbmFsQ29sdW1uOnV0aWwuZ2V0QXJnKGUsXCJjb2x1bW5cIil9LG89dGhpcy5fZmluZE1hcHBpbmcobix0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFwib3JpZ2luYWxMaW5lXCIsXCJvcmlnaW5hbENvbHVtblwiLHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsdXRpbC5nZXRBcmcoZSxcImJpYXNcIixTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCkpO2lmKG8+PTApe3ZhciB0PXRoaXMuX29yaWdpbmFsTWFwcGluZ3Nbb107aWYodC5zb3VyY2U9PT1uLnNvdXJjZSlyZXR1cm57bGluZTp1dGlsLmdldEFyZyh0LFwiZ2VuZXJhdGVkTGluZVwiLG51bGwpLGNvbHVtbjp1dGlsLmdldEFyZyh0LFwiZ2VuZXJhdGVkQ29sdW1uXCIsbnVsbCksbGFzdENvbHVtbjp1dGlsLmdldEFyZyh0LFwibGFzdEdlbmVyYXRlZENvbHVtblwiLG51bGwpfX1yZXR1cm57bGluZTpudWxsLGNvbHVtbjpudWxsLGxhc3RDb2x1bW46bnVsbH19LC8qIGNvbW1vbi1zaGFrZSByZW1vdmVkOiBleHBvcnRzLkJhc2ljU291cmNlTWFwQ29uc3VtZXIgPSAqLyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpLEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3I9U291cmNlTWFwQ29uc3VtZXIsSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbj0zLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLFwic291cmNlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10scj0wO3I8dGhpcy5fc2VjdGlvbnMubGVuZ3RoO3IrKylmb3IodmFyIG49MDtuPHRoaXMuX3NlY3Rpb25zW3JdLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoO24rKyllLnB1c2godGhpcy5fc2VjdGlvbnNbcl0uY29uc3VtZXIuc291cmNlc1tuXSk7cmV0dXJuIGV9fSksSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yPWZ1bmN0aW9uKGUpe3ZhciByPXtnZW5lcmF0ZWRMaW5lOnV0aWwuZ2V0QXJnKGUsXCJsaW5lXCIpLGdlbmVyYXRlZENvbHVtbjp1dGlsLmdldEFyZyhlLFwiY29sdW1uXCIpfSxuPWJpbmFyeVNlYXJjaC5zZWFyY2gocix0aGlzLl9zZWN0aW9ucyxmdW5jdGlvbihlLHIpe3JldHVybiBlLmdlbmVyYXRlZExpbmUtci5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZXx8ZS5nZW5lcmF0ZWRDb2x1bW4tci5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1ufSksbz10aGlzLl9zZWN0aW9uc1tuXTtyZXR1cm4gbz9vLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe2xpbmU6ci5nZW5lcmF0ZWRMaW5lLShvLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lLTEpLGNvbHVtbjpyLmdlbmVyYXRlZENvbHVtbi0oby5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZT09PXIuZ2VuZXJhdGVkTGluZT9vLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4tMTowKSxiaWFzOmUuYmlhc30pOntzb3VyY2U6bnVsbCxsaW5lOm51bGwsY29sdW1uOm51bGwsbmFtZTpudWxsfX0sSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZWN0aW9ucy5ldmVyeShmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25zdW1lci5oYXNDb250ZW50c09mQWxsU291cmNlcygpfSl9LEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvcj1mdW5jdGlvbihlLHIpe2Zvcih2YXIgbj0wO248dGhpcy5fc2VjdGlvbnMubGVuZ3RoO24rKyl7dmFyIG89dGhpcy5fc2VjdGlvbnNbbl0uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihlLCEwKTtpZihvKXJldHVybiBvfWlmKHIpcmV0dXJuIG51bGw7dGhyb3cgbmV3IEVycm9yKCdcIicrZSsnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyl9LEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3I9ZnVuY3Rpb24oZSl7Zm9yKHZhciByPTA7cjx0aGlzLl9zZWN0aW9ucy5sZW5ndGg7cisrKXt2YXIgbj10aGlzLl9zZWN0aW9uc1tyXTtpZigtMSE9PW4uY29uc3VtZXIuX2ZpbmRTb3VyY2VJbmRleCh1dGlsLmdldEFyZyhlLFwic291cmNlXCIpKSl7dmFyIG89bi5jb25zdW1lci5nZW5lcmF0ZWRQb3NpdGlvbkZvcihlKTtpZihvKXJldHVybntsaW5lOm8ubGluZSsobi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZS0xKSxjb2x1bW46by5jb2x1bW4rKG4uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmU9PT1vLmxpbmU/bi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uLTE6MCl9fX1yZXR1cm57bGluZTpudWxsLGNvbHVtbjpudWxsfX0sSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncz1mdW5jdGlvbihlLHIpe3RoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncz1bXSx0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncz1bXTtmb3IodmFyIG49MDtuPHRoaXMuX3NlY3Rpb25zLmxlbmd0aDtuKyspZm9yKHZhciBvPXRoaXMuX3NlY3Rpb25zW25dLHQ9by5jb25zdW1lci5fZ2VuZXJhdGVkTWFwcGluZ3MsaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgdT10W2ldLHM9by5jb25zdW1lci5fc291cmNlcy5hdCh1LnNvdXJjZSk7cz11dGlsLmNvbXB1dGVTb3VyY2VVUkwoby5jb25zdW1lci5zb3VyY2VSb290LHMsdGhpcy5fc291cmNlTWFwVVJMKSx0aGlzLl9zb3VyY2VzLmFkZChzKSxzPXRoaXMuX3NvdXJjZXMuaW5kZXhPZihzKTt2YXIgYT1udWxsO3UubmFtZSYmKGE9by5jb25zdW1lci5fbmFtZXMuYXQodS5uYW1lKSx0aGlzLl9uYW1lcy5hZGQoYSksYT10aGlzLl9uYW1lcy5pbmRleE9mKGEpKTt2YXIgbD17c291cmNlOnMsZ2VuZXJhdGVkTGluZTp1LmdlbmVyYXRlZExpbmUrKG8uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUtMSksZ2VuZXJhdGVkQ29sdW1uOnUuZ2VuZXJhdGVkQ29sdW1uKyhvLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lPT09dS5nZW5lcmF0ZWRMaW5lP28uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbi0xOjApLG9yaWdpbmFsTGluZTp1Lm9yaWdpbmFsTGluZSxvcmlnaW5hbENvbHVtbjp1Lm9yaWdpbmFsQ29sdW1uLG5hbWU6YX07dGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2gobCksXCJudW1iZXJcIj09dHlwZW9mIGwub3JpZ2luYWxMaW5lJiZ0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGwpfXF1aWNrU29ydCh0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MsdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCkscXVpY2tTb3J0KHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpfSwvKiBjb21tb24tc2hha2UgcmVtb3ZlZDogZXhwb3J0cy5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIgPSAqLyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnZkWEpqWlMxdFlYQXRZMjl1YzNWdFpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRYUnBiQ0lzSW5KbGNYVnBjbVVpTENKaWFXNWhjbmxUWldGeVkyZ2lMQ0pCY25KaGVWTmxkQ0lzSW1KaGMyVTJORlpNVVNJc0luRjFhV05yVTI5eWRDSXNJbE52ZFhKalpVMWhjRU52Ym5OMWJXVnlJaXdpWVZOdmRYSmpaVTFoY0NJc0ltRlRiM1Z5WTJWTllYQlZVa3dpTENKemIzVnlZMlZOWVhBaUxDSndZWEp6WlZOdmRYSmpaVTFoY0VsdWNIVjBJaXdpYzJWamRHbHZibk1pTENKSmJtUmxlR1ZrVTI5MWNtTmxUV0Z3UTI5dWMzVnRaWElpTENKQ1lYTnBZMU52ZFhKalpVMWhjRU52Ym5OMWJXVnlJaXdpZG1WeWMybHZiaUlzSW1kbGRFRnlaeUlzSW5OdmRYSmpaWE1pTENKdVlXMWxjeUlzSW5OdmRYSmpaVkp2YjNRaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJc0ltMWhjSEJwYm1keklpd2labWxzWlNJc0luUm9hWE1pTENKZmRtVnljMmx2YmlJc0lrVnljbTl5SWl3aWJtOXliV0ZzYVhwbElpd2liV0Z3SWl3aVUzUnlhVzVuSWl3aWMyOTFjbU5sSWl3aWFYTkJZbk52YkhWMFpTSXNJbkpsYkdGMGFYWmxJaXdpWDI1aGJXVnpJaXdpWm5KdmJVRnljbUY1SWl3aVgzTnZkWEpqWlhNaUxDSmZZV0p6YjJ4MWRHVlRiM1Z5WTJWeklpd2lkRzlCY25KaGVTSXNJbk1pTENKamIyMXdkWFJsVTI5MWNtTmxWVkpNSWl3aVgyMWhjSEJwYm1keklpd2lYM052ZFhKalpVMWhjRlZTVENJc0lrMWhjSEJwYm1jaUxDSm5aVzVsY21GMFpXUk1hVzVsSWl3aVoyVnVaWEpoZEdWa1EyOXNkVzF1SWl3aWIzSnBaMmx1WVd4TWFXNWxJaXdpYjNKcFoybHVZV3hEYjJ4MWJXNGlMQ0p1WVcxbElpd2liR0Z6ZEU5bVpuTmxkQ0lzSW14cGJtVWlMQ0pqYjJ4MWJXNGlMQ0pmYzJWamRHbHZibk1pTENKMWNtd2lMQ0p2Wm1aelpYUWlMQ0p2Wm1aelpYUk1hVzVsSWl3aWIyWm1jMlYwUTI5c2RXMXVJaXdpWjJWdVpYSmhkR1ZrVDJabWMyVjBJaXdpWTI5dWMzVnRaWElpTENKbWNtOXRVMjkxY21ObFRXRndJaXdpY0hKdmRHOTBlWEJsSWl3aVgxOW5aVzVsY21GMFpXUk5ZWEJ3YVc1bmN5SXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2lZMjl1Wm1sbmRYSmhZbXhsSWl3aVpXNTFiV1Z5WVdKc1pTSXNJbWRsZENJc0lsOXdZWEp6WlUxaGNIQnBibWR6SWl3aVgxOXZjbWxuYVc1aGJFMWhjSEJwYm1keklpd2lYMk5vWVhKSmMwMWhjSEJwYm1kVFpYQmhjbUYwYjNJaUxDSmhVM1J5SWl3aWFXNWtaWGdpTENKaklpd2lZMmhoY2tGMElpd2lZVk52ZFhKalpWSnZiM1FpTENKSFJVNUZVa0ZVUlVSZlQxSkVSVklpTENKUFVrbEhTVTVCVEY5UFVrUkZVaUlzSWtkU1JVRlVSVk5VWDB4UFYwVlNYMEpQVlU1RUlpd2lURVZCVTFSZlZWQlFSVkpmUWs5VlRrUWlMQ0psWVdOb1RXRndjR2x1WnlJc0ltRkRZV3hzWW1GamF5SXNJbUZEYjI1MFpYaDBJaXdpWVU5eVpHVnlJaXdpWTI5dWRHVjRkQ0lzSWw5blpXNWxjbUYwWldSTllYQndhVzVuY3lJc0lsOXZjbWxuYVc1aGJFMWhjSEJwYm1keklpd2liV0Z3Y0dsdVp5SXNJbUYwSWl3aVptOXlSV0ZqYUNJc0ltRnNiRWRsYm1WeVlYUmxaRkJ2YzJsMGFXOXVjMFp2Y2lJc0ltRkJjbWR6SWl3aWJtVmxaR3hsSWl3aVgyWnBibVJUYjNWeVkyVkpibVJsZUNJc0lsOW1hVzVrVFdGd2NHbHVaeUlzSW1OdmJYQmhjbVZDZVU5eWFXZHBibUZzVUc5emFYUnBiMjV6SWl3aWNIVnphQ0lzSW14aGMzUkRiMngxYlc0aUxDSmxlSEJ2Y25Seklpd2lZM0psWVhSbElpd2lZVk52ZFhKalpTSXNJbWtpTENKeVpXeGhkR2wyWlZOdmRYSmpaU0lzSW1oaGN5SXNJbWx1WkdWNFQyWWlMQ0pzWlc1bmRHZ2lMQ0p6YldNaUxDSmZjMjkxY21ObFVtOXZkQ0lzSWw5blpXNWxjbUYwWlZOdmRYSmpaWE5EYjI1MFpXNTBJaXdpWDJacGJHVWlMQ0puWlc1bGNtRjBaV1JOWVhCd2FXNW5jeUlzSW5Oc2FXTmxJaXdpWkdWemRFZGxibVZ5WVhSbFpFMWhjSEJwYm1keklpd2laR1Z6ZEU5eWFXZHBibUZzVFdGd2NHbHVaM01pTENKemNtTk5ZWEJ3YVc1bklpd2laR1Z6ZEUxaGNIQnBibWNpTENKemRISWlMQ0p6WldkdFpXNTBJaXdpWlc1a0lpd2lkbUZzZFdVaUxDSndjbVYyYVc5MWMwZGxibVZ5WVhSbFpFTnZiSFZ0YmlJc0luQnlaWFpwYjNWelQzSnBaMmx1WVd4TWFXNWxJaXdpY0hKbGRtbHZkWE5QY21sbmFXNWhiRU52YkhWdGJpSXNJbkJ5WlhacGIzVnpVMjkxY21ObElpd2ljSEpsZG1sdmRYTk9ZVzFsSWl3aVkyRmphR1ZrVTJWbmJXVnVkSE1pTENKMFpXMXdJaXdpYjNKcFoybHVZV3hOWVhCd2FXNW5jeUlzSW1SbFkyOWtaU0lzSW5KbGMzUWlMQ0pqYjIxd1lYSmxRbmxIWlc1bGNtRjBaV1JRYjNOcGRHbHZibk5FWldac1lYUmxaQ0lzSW1GT1pXVmtiR1VpTENKaFRXRndjR2x1WjNNaUxDSmhUR2x1WlU1aGJXVWlMQ0poUTI5c2RXMXVUbUZ0WlNJc0ltRkRiMjF3WVhKaGRHOXlJaXdpWVVKcFlYTWlMQ0pVZVhCbFJYSnliM0lpTENKelpXRnlZMmdpTENKamIyMXdkWFJsUTI5c2RXMXVVM0JoYm5NaUxDSnVaWGgwVFdGd2NHbHVaeUlzSW14aGMzUkhaVzVsY21GMFpXUkRiMngxYlc0aUxDSkpibVpwYm1sMGVTSXNJbTl5YVdkcGJtRnNVRzl6YVhScGIyNUdiM0lpTENKb1lYTkRiMjUwWlc1MGMwOW1RV3hzVTI5MWNtTmxjeUlzSW5OcGVtVWlMQ0p6YjIxbElpd2ljMk1pTENKemIzVnlZMlZEYjI1MFpXNTBSbTl5SWl3aWJuVnNiRTl1VFdsemMybHVaeUlzSW5WeWJGQmhjbk5sSWl3aVptbHNaVlZ5YVVGaWMxQmhkR2dpTENKeVpYQnNZV05sSWl3aWMyTm9aVzFsSWl3aWNHRjBhQ0lzSW1kbGJtVnlZWFJsWkZCdmMybDBhVzl1Um05eUlpd2lZMjl1YzNSeWRXTjBiM0lpTENKcUlpd2ljMlZqZEdsdmJrbHVaR1Y0SWl3aWMyVmpkR2x2YmlJc0ltSnBZWE1pTENKbGRtVnllU0lzSW1OdmJuUmxiblFpTENKblpXNWxjbUYwWldSUWIzTnBkR2x2YmlJc0luTmxZM1JwYjI1TllYQndhVzVuY3lJc0ltRmtaQ0lzSW1Ga2FuVnpkR1ZrVFdGd2NHbHVaeUpkTENKdFlYQndhVzVuY3lJNklrRkJUMEVzU1VGQlNVRXNTVUZCUVVFc1EwRkJUME1zVDBGQlFVRXNRMEZCVVN4UlFVRkJMRU5CUVVFc1EwRkRaa01zV1VGQlFVRXNRMEZCWlVRc1QwRkJRVUVzUTBGQlVTeHBRa0ZCUVN4RFFVRkJMRU5CUTNaQ1JTeFJRVUZCUVN4RFFVRlhSaXhQUVVGQlFTeERRVUZSTEdGQlFVRXNRMEZCUVN4RFFVRmxSU3hSUVVGQlFTeERRVU5zUTBNc1UwRkJRVUVzUTBGQldVZ3NUMEZCUVVFc1EwRkJVU3hqUVVGQkxFTkJRVUVzUTBGRGNFSkpMRk5CUVVGQkxFTkJRVmxLTEU5QlFVRkJMRU5CUVZFc1kwRkJRU3hEUVVGQkxFTkJRV2RDU1N4VFFVRkJRU3hEUVVWNFF5eFRRVUZUUXl4cFFrRkJRVUVzUTBGQmEwSkRMRU5CUVVGQkxFTkJRVmxETEVOQlFVRkJMRU5CUVVGQkxFTkJRM0pETEVsQlFVbERMRU5CUVVGQkxFTkJRVmxHTEVOQlFVRkJMRU5CUzJoQ0xFMUJTakJDTEZGQlFVRXNSVUZCUVN4UFFVRm1RU3hEUVVGQlFTeEhRVU5VUlN4RFFVRkJRU3hEUVVGWlZDeEpRVUZCUVN4RFFVRkxWU3h0UWtGQlFVRXNRMEZCYjBKSUxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSMVlzU1VGQlFTeEZRVUYwUWtVc1EwRkJRVUVzUTBGQlZVVXNVVUZCUVVFc1EwRkRZaXhKUVVGSlF5eDNRa0ZCUVVFc1EwRkJlVUpJTEVOQlFVRkJMRU5CUVZkRUxFTkJRVUZCTEVOQlFVRkJMRU5CUTNoRExFbEJRVWxMTEhOQ1FVRkJRU3hEUVVGMVFrb3NRMEZCUVVFc1EwRkJWMFFzUTBGQlFVRXNRMEZCUVVFc1EwRXdVVFZETEZOQlFWTkxMSE5DUVVGQlFTeERRVUYxUWs0c1EwRkJRVUVzUTBGQldVTXNRMEZCUVVFc1EwRkJRVUVzUTBGRE1VTXNTVUZCU1VNc1EwRkJRVUVzUTBGQldVWXNRMEZCUVVFc1EwRkRWU3hSUVVGQkxFVkJRVUVzVDBGQlprRXNRMEZCUVVFc1IwRkRWRVVzUTBGQlFVRXNRMEZCV1ZRc1NVRkJRVUVzUTBGQlMxVXNiVUpCUVVGQkxFTkJRVzlDU0N4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZDJReXhKUVVGSlR5eERRVUZCUVN4RFFVRlZaQ3hKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUFRpeERRVUZCUVN4RFFVRlhMRk5CUVVFc1EwRkJRU3hEUVVOcVEwOHNRMEZCUVVFc1EwRkJWV2hDTEVsQlFVRkJMRU5CUVV0bExFMUJRVUZCTEVOQlFVOU9MRU5CUVVGQkxFTkJRVmNzVTBGQlFTeERRVUZCTEVOQlIycERVU3hEUVVGQlFTeERRVUZSYWtJc1NVRkJRVUVzUTBGQlMyVXNUVUZCUVVFc1EwRkJUMDRzUTBGQlFVRXNRMEZCVnl4UFFVRkJMRU5CUVZNc1JVRkJRU3hEUVVGQkxFTkJRM2hEVXl4RFFVRkJRU3hEUVVGaGJFSXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDA0c1EwRkJRVUVzUTBGQlZ5eFpRVUZCTEVOQlFXTXNTVUZCUVN4RFFVRkJMRU5CUTJ4RVZTeERRVUZCUVN4RFFVRnBRbTVDTEVsQlFVRkJMRU5CUVV0bExFMUJRVUZCTEVOQlFVOU9MRU5CUVVGQkxFTkJRVmNzWjBKQlFVRXNRMEZCYTBJc1NVRkJRU3hEUVVGQkxFTkJRekZFVnl4RFFVRkJRU3hEUVVGWGNFSXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDA0c1EwRkJRVUVzUTBGQlZ5eFZRVUZCTEVOQlFVRXNRMEZEYkVOWkxFTkJRVUZCTEVOQlFVOXlRaXhKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUFRpeERRVUZCUVN4RFFVRlhMRTFCUVVFc1EwRkJVU3hKUVVGQkxFTkJRVUVzUTBGSk1VTXNSMEZCU1Vzc1EwRkJRVUVzUlVGQlYxRXNTVUZCUVVFc1EwRkJTME1zVVVGQlFVRXNRMEZEYkVJc1RVRkJUU3hKUVVGSlF5eExRVUZCUVN4RFFVRk5MSFZDUVVGQkxFTkJRVEJDVml4RFFVRkJRU3hEUVVGQlFTeERRVWQ0UTBrc1EwRkJRVUVzUjBGRFJrRXNRMEZCUVVFc1EwRkJZV3hDTEVsQlFVRkJMRU5CUVV0NVFpeFRRVUZCUVN4RFFVRlZVQ3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVjNVFrWXNRMEZCUVVFc1EwRkJWVUVzUTBGQlFVRXNRMEZEVUZVc1IwRkJRVUVzUTBGQlNVTXNUVUZCUVVFc1EwRkJRVUVzUTBGSlNrUXNSMEZCUVVFc1EwRkJTVEZDTEVsQlFVRkJMRU5CUVV0NVFpeFRRVUZCUVN4RFFVRkJRU3hEUVV0VVF5eEhRVUZCUVN4RFFVRkpMRk5CUVZWRkxFTkJRVUZCTEVOQlFVRkJMRU5CUTJJc1QwRkJUMVlzUTBGQlFVRXNSVUZCWTJ4Q0xFbEJRVUZCTEVOQlFVczJRaXhWUVVGQlFTeERRVUZYV0N4RFFVRkJRU3hEUVVGQlFTeEZRVUZsYkVJc1NVRkJRVUVzUTBGQlN6WkNMRlZCUVVGQkxFTkJRVmRFTEVOQlFVRkJMRU5CUVVGQkxFTkJRMmhGTlVJc1NVRkJRVUVzUTBGQlN6aENMRkZCUVVGQkxFTkJRVk5hTEVOQlFVRkJMRU5CUVZsVkxFTkJRVUZCTEVOQlFVRkJMRU5CUXpGQ1FTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVTlTVGl4SlFVRkJRU3hEUVVGTFV5eE5RVUZCUVN4RFFVRlROVUlzVVVGQlFVRXNRMEZCVXpaQ0xGTkJRVUZCTEVOQlFWVm1MRU5CUVVGQkxFTkJRVTFUTEVkQlFVRkJMRU5CUVVsRExFMUJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRek5EVEN4SlFVRkJRU3hEUVVGTFZ5eFJRVUZCUVN4RFFVRlhPVUlzVVVGQlFVRXNRMEZCVXpaQ0xGTkJRVUZCTEVOQlFWVm9RaXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVVnVRMDBzU1VGQlFVRXNRMEZCUzFrc1owSkJRVUZCTEVOQlFXMUNXaXhKUVVGQlFTeERRVUZMVnl4UlFVRkJRU3hEUVVGVFJTeFBRVUZCUVN4RlFVRkJRU3hEUVVGVlZDeEhRVUZCUVN4RFFVRkpMRk5CUVZWVkxFTkJRVUZCTEVOQlFVRkJMRU5CUXpWRUxFOUJRVTl3UXl4SlFVRkJRU3hEUVVGTGNVTXNaMEpCUVVGQkxFTkJRV2xDYmtJc1EwRkJRVUVzUTBGQldXdENMRU5CUVVGQkxFTkJRVWMxUWl4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVjNVEyTXNTVUZCUVVFc1EwRkJTMG9zVlVGQlFVRXNRMEZCWVVFc1EwRkJRVUVzUTBGRGJFSkpMRWxCUVVGQkxFTkJRVXRJTEdOQlFVRkJMRU5CUVdsQ1FTeERRVUZCUVN4RFFVTjBRa2NzU1VGQlFVRXNRMEZCUzJkQ0xGTkJRVUZCTEVOQlFWbHNRaXhEUVVGQlFTeERRVU5xUWtVc1NVRkJRVUVzUTBGQlMybENMR0ZCUVVGQkxFTkJRV2RDTDBJc1EwRkJRVUVzUTBGRGNrSmpMRWxCUVVGQkxFTkJRVXRFTEVsQlFVRkJMRU5CUVU5QkxFTkJRVUZCTEVOQk5FZGtMRk5CUVZOdFFpeFBRVUZCUVN4RlFVRkJRU3hEUVVOUWJFSXNTVUZCUVVFc1EwRkJTMjFDTEdGQlFVRkJMRU5CUVdkQ0xFTkJRVUVzUTBGRGNrSnVRaXhKUVVGQlFTeERRVUZMYjBJc1pVRkJRVUVzUTBGQmEwSXNRMEZCUVN4RFFVTjJRbkJDTEVsQlFVRkJMRU5CUVV0TkxFMUJRVUZCTEVOQlFWTXNTVUZCUVN4RFFVTmtUaXhKUVVGQlFTeERRVUZMY1VJc1dVRkJRVUVzUTBGQlpTeEpRVUZCTEVOQlEzQkNja0lzU1VGQlFVRXNRMEZCUzNOQ0xHTkJRVUZCTEVOQlFXbENMRWxCUVVFc1EwRkRkRUowUWl4SlFVRkJRU3hEUVVGTGRVSXNTVUZCUVVFc1EwRkJUeXhKUVVGQkxFTkJhMkZrTEZOQlFWTnFReXgzUWtGQlFVRXNRMEZCZVVKTUxFTkJRVUZCTEVOQlFWbERMRU5CUVVGQkxFTkJRVUZCTEVOQlF6VkRMRWxCUVVsRExFTkJRVUZCTEVOQlFWbEdMRU5CUVVGQkxFTkJRMVVzVVVGQlFTeEZRVUZCTEU5QlFXWkJMRU5CUVVGQkxFZEJRMVJGTEVOQlFVRkJMRU5CUVZsVUxFbEJRVUZCTEVOQlFVdFZMRzFDUVVGQlFTeERRVUZ2UWtnc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkhka01zU1VGQlNVOHNRMEZCUVVFc1EwRkJWV1FzU1VGQlFVRXNRMEZCUzJVc1RVRkJRVUVzUTBGQlQwNHNRMEZCUVVFc1EwRkJWeXhUUVVGQkxFTkJRVUVzUTBGRGFrTkZMRU5CUVVGQkxFTkJRVmRZTEVsQlFVRkJMRU5CUVV0bExFMUJRVUZCTEVOQlFVOU9MRU5CUVVGQkxFTkJRVmNzVlVGQlFTeERRVUZCTEVOQlJYUkRMRWRCUVVsTExFTkJRVUZCTEVWQlFWZFJMRWxCUVVGQkxFTkJRVXRETEZGQlFVRkJMRU5CUTJ4Q0xFMUJRVTBzU1VGQlNVTXNTMEZCUVVFc1EwRkJUU3gxUWtGQlFTeERRVUV3UWxZc1EwRkJRVUVzUTBGQlFVRXNRMEZITlVOUkxFbEJRVUZCTEVOQlFVdFhMRkZCUVVGQkxFTkJRVmNzU1VGQlNUbENMRkZCUVVGQkxFTkJRM0JDYlVJc1NVRkJRVUVzUTBGQlMxTXNUVUZCUVVFc1EwRkJVeXhKUVVGSk5VSXNVVUZCUVVFc1EwRkZiRUlzU1VGQlNUSkRMRU5CUVVGQkxFTkJRV0VzUTBGRFprTXNTVUZCUVVFc1EwRkJRVUVzUTBGQlR5eERRVUZCTEVOQlExQkRMRTFCUVVGQkxFTkJRVkVzUTBGQlFTeERRVUZCTEVOQlJWWXhRaXhKUVVGQlFTeERRVUZMTWtJc1UwRkJRVUVzUTBGQldYUkRMRU5CUVVGQkxFTkJRVk5sTEVkQlFVRkJMRU5CUVVrc1UwRkJWVlVzUTBGQlFVRXNRMEZCUVVFc1EwRkRkRU1zUjBGQlNVRXNRMEZCUVVFc1EwRkJSV01zUjBGQlFVRXNRMEZIU2l4TlFVRk5MRWxCUVVreFFpeExRVUZCUVN4RFFVRk5MRzlFUVVGQkxFTkJRVUVzUTBGRmJFSXNTVUZCU1RKQ0xFTkJRVUZCTEVOQlFWTnVSQ3hKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUGNVSXNRMEZCUVVFc1EwRkJSeXhSUVVGQkxFTkJRVUVzUTBGRGVFSm5RaXhEUVVGQlFTeERRVUZoY0VRc1NVRkJRVUVzUTBGQlMyVXNUVUZCUVVFc1EwRkJUMjlETEVOQlFVRkJMRU5CUVZFc1RVRkJRU3hEUVVGQkxFTkJRMnBEUlN4RFFVRkJRU3hEUVVGbGNrUXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDI5RExFTkJRVUZCTEVOQlFWRXNVVUZCUVN4RFFVRkJMRU5CUlhaRExFZEJRVWxETEVOQlFVRkJMRU5CUVdGT0xFTkJRVUZCTEVOQlFWZERMRWxCUVVGQkxFVkJRM1pDU3l4RFFVRkJRU3hIUVVGbFRpeERRVUZCUVN4RFFVRlhReXhKUVVGQlFTeEZRVUZSVFN4RFFVRkJRU3hEUVVGbFVDeERRVUZCUVN4RFFVRlhSU3hOUVVGQlFTeERRVU12UkN4TlFVRk5MRWxCUVVsNFFpeExRVUZCUVN4RFFVRk5MSE5FUVVGQkxFTkJRVUVzUTBGSmJFSXNUMEZHUVhOQ0xFTkJRVUZCTEVOQlFXRkxMRU5CUVVGQkxFTkJSVTRzUTBGRFRFY3NaVUZCUVVFc1EwRkJhVUlzUTBGSFptSXNZVUZCUVVFc1EwRkJaVmNzUTBGQlFVRXNRMEZCWVN4RFFVRkJMRU5CUXpWQ1ZpeGxRVUZCUVN4RFFVRnBRbGNzUTBGQlFVRXNRMEZCWlN4RFFVRkJMRU5CUVVFc1EwRkZiRU5GTEZGQlFVRkJMRU5CUVZVc1NVRkJTV3BFTEdsQ1FVRkJRU3hEUVVGclFrNHNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDNGQ0xFTkJRVUZCTEVOQlFVY3NTMEZCUVN4RFFVRkJMRU5CUVZFMVFpeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVM4elFqZEVSaXhwUWtGQlFVRXNRMEZCYTBKclJDeGhRVUZCUVN4RFFVRm5RaXhUUVVGVGFrUXNRMEZCUVVFc1EwRkJXVU1zUTBGQlFVRXNRMEZCUVVFc1EwRkRja1FzVDBGQlQwc3NjMEpCUVVGQkxFTkJRWFZDTWtNc1lVRkJRVUVzUTBGQlkycEVMRU5CUVVGQkxFTkJRVmxETEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlRURkVSaXhwUWtGQlFVRXNRMEZCYTBKdFJDeFRRVUZCUVN4RFFVRlZiRU1zVVVGQlFVRXNRMEZCVnl4RFFVRkJMRU5CWjBOMlEycENMR2xDUVVGQlFTeERRVUZyUW0xRUxGTkJRVUZCTEVOQlFWVkRMRzFDUVVGQlFTeERRVUZ6UWl4SlFVRkJMRU5CUTJ4RVF5eE5RVUZCUVN4RFFVRlBReXhqUVVGQlFTeERRVUZsZEVRc2FVSkJRVUZCTEVOQlFXdENiVVFzVTBGQlFVRXNRMEZCVnl4dlFrRkJRU3hEUVVGelFpeERRVU4yUlVrc1dVRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGRFFVTXNWVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkRRVU1zUjBGQlFVRXNRMEZCU3l4VlFVRkJMRU5CUzBnc1QwRktTM3BETEVsQlFVRkJMRU5CUVV0dlF5eHRRa0ZCUVVFc1JVRkRVbkJETEVsQlFVRkJMRU5CUVVzd1F5eGpRVUZCUVN4RFFVRmxNVU1zU1VGQlFVRXNRMEZCUzJkQ0xGTkJRVUZCTEVOQlFWZG9RaXhKUVVGQlFTeERRVUZMU2l4VlFVRkJRU3hEUVVGQlFTeERRVWR3UTBrc1NVRkJRVUVzUTBGQlMyOURMRzFDUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWxvUW5CRUxHbENRVUZCUVN4RFFVRnJRbTFFTEZOQlFVRkJMRU5CUVZWUkxHdENRVUZCUVN4RFFVRnhRaXhKUVVGQkxFTkJRMnBFVGl4TlFVRkJRU3hEUVVGUFF5eGpRVUZCUVN4RFFVRmxkRVFzYVVKQlFVRkJMRU5CUVd0Q2JVUXNVMEZCUVVFc1EwRkJWeXh0UWtGQlFTeERRVUZ4UWl4RFFVTjBSVWtzV1VGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZEUVVNc1ZVRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGRFFVTXNSMEZCUVVFc1EwRkJTeXhWUVVGQkxFTkJTMGdzVDBGS1MzcERMRWxCUVVGQkxFTkJRVXN5UXl4clFrRkJRVUVzUlVGRFVqTkRMRWxCUVVGQkxFTkJRVXN3UXl4alFVRkJRU3hEUVVGbE1VTXNTVUZCUVVFc1EwRkJTMmRDTEZOQlFVRkJMRU5CUVZkb1FpeEpRVUZCUVN4RFFVRkxTaXhWUVVGQlFTeERRVUZCUVN4RFFVZHdRMGtzU1VGQlFVRXNRMEZCU3pKRExHdENRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVbG9Rak5FTEdsQ1FVRkJRU3hEUVVGclFtMUVMRk5CUVVGQkxFTkJRVlZUTEhWQ1FVRkJRU3hEUVVNeFFpeFRRVUZyUkVNc1EwRkJRVUVzUTBGQlRVTXNRMEZCUVVFc1EwRkJRVUVzUTBGRGRFUXNTVUZCU1VNc1EwRkJRVUVzUTBGQlNVWXNRMEZCUVVFc1EwRkJTMGNzVFVGQlFVRXNRMEZCVDBZc1EwRkJRVUVzUTBGQlFVRXNRMEZEY0VJc1RVRkJZU3hIUVVGQkxFZEJRVTVETEVOQlFVRkJMRVZCUVcxQ0xFZEJRVUVzUjBGQlRrRXNRMEZCUVVFc1EwRkJRVUVzUTBGUmVFSXZSQ3hwUWtGQlFVRXNRMEZCYTBKdFJDeFRRVUZCUVN4RFFVRlZUeXhqUVVGQlFTeERRVU14UWl4VFFVRjVRMGNzUTBGQlFVRXNRMEZCVFVrc1EwRkJRVUVzUTBGQlFVRXNRMEZETjBNc1RVRkJUU3hKUVVGSkwwTXNTMEZCUVVFc1EwRkJUU3d3UTBGQlFTeERRVUZCTEVOQlFVRXNRMEZIY0VKc1FpeHBRa0ZCUVVFc1EwRkJhMEpyUlN4bFFVRkJRU3hEUVVGclFpeERRVUZCTEVOQlEzQkRiRVVzYVVKQlFVRkJMRU5CUVd0Q2JVVXNZMEZCUVVFc1EwRkJhVUlzUTBGQlFTeERRVVZ1UTI1RkxHbENRVUZCUVN4RFFVRnJRbTlGTEc5Q1FVRkJRU3hEUVVGMVFpeERRVUZCTEVOQlEzcERjRVVzYVVKQlFVRkJMRU5CUVd0Q2NVVXNhVUpCUVVGQkxFTkJRVzlDTEVOQlFVRXNRMEZyUW5SRGNrVXNhVUpCUVVGQkxFTkJRV3RDYlVRc1UwRkJRVUVzUTBGQlZXMUNMRmRCUVVGQkxFTkJRekZDTEZOQlFYVkRReXhEUVVGQlFTeERRVUZYUXl4RFFVRkJRU3hEUVVGVlF5eERRVUZCUVN4RFFVRkJRU3hEUVVNeFJDeEpRVWRKTTBRc1EwRkJRVUVzUTBGSVFUUkVMRU5CUVVGQkxFTkJRVlZHTEVOQlFVRkJMRVZCUVZrc1NVRkJRU3hEUVVreFFpeFBRVWhaUXl4RFFVRkJRU3hGUVVGVmVrVXNhVUpCUVVGQkxFTkJRV3RDYTBVc1pVRkJRVUVzUlVGSmVFTXNTMEZCUzJ4RkxHbENRVUZCUVN4RFFVRnJRbXRGTEdWQlFVRkJMRU5CUTNKQ2NFUXNRMEZCUVVFc1EwRkJWMFVzU1VGQlFVRXNRMEZCU3pKRUxHdENRVUZCUVN4RFFVTm9RaXhOUVVOR0xFdEJRVXN6UlN4cFFrRkJRVUVzUTBGQmEwSnRSU3hqUVVGQlFTeERRVU55UW5KRUxFTkJRVUZCTEVOQlFWZEZMRWxCUVVGQkxFTkJRVXMwUkN4cFFrRkJRVUVzUTBGRGFFSXNUVUZEUml4UlFVTkZMRTFCUVUwc1NVRkJTVEZFTEV0QlFVRkJMRU5CUVUwc05rSkJRVUVzUTBGQlFTeERRVWRzUWl4SlFVRkpUaXhEUVVGQlFTeERRVUZoU1N4SlFVRkJRU3hEUVVGTFNpeFZRVUZCUVN4RFFVTjBRa1VzUTBGQlFVRXNRMEZCVTAwc1IwRkJRVUVzUTBGQlNTeFRRVUZWZVVRc1EwRkJRVUVzUTBGQlFVRXNRMEZEY2tJc1NVRkJTWFpFTEVOQlFVRkJMRU5CUVRSQ0xFbEJRVUVzUjBGQmJrSjFSQ3hEUVVGQlFTeERRVUZSZGtRc1RVRkJRVUVzUTBGQmEwSXNTVUZCUVN4RFFVRlBUaXhKUVVGQlFTeERRVUZMVnl4UlFVRkJRU3hEUVVGVGJVUXNSVUZCUVVFc1EwRkJSMFFzUTBGQlFVRXNRMEZCVVhaRUxFMUJRVUZCTEVOQlFVRkJMRU5CUlhaRkxFMUJRVThzUTBGRFRFRXNUVUZCUVVFc1EwRkdSa0VzUTBGQlFVRXNRMEZCVXpWQ0xFbEJRVUZCTEVOQlFVdHhReXhuUWtGQlFVRXNRMEZCYVVKdVFpeERRVUZCUVN4RFFVRlpWU3hEUVVGQlFTeERRVUZSVGl4SlFVRkJRU3hEUVVGTGFVSXNZVUZCUVVFc1EwRkJRVUVzUTBGSGRFUkZMR0ZCUVVGQkxFTkJRV1V3UXl4RFFVRkJRU3hEUVVGUk1VTXNZVUZCUVVFc1EwRkRka0pETEdWQlFVRkJMRU5CUVdsQ2VVTXNRMEZCUVVFc1EwRkJVWHBETEdWQlFVRkJMRU5CUTNwQ1F5eFpRVUZCUVN4RFFVRmpkME1zUTBGQlFVRXNRMEZCVVhoRExGbEJRVUZCTEVOQlEzUkNReXhqUVVGQlFTeERRVUZuUW5WRExFTkJRVUZCTEVOQlFWRjJReXhqUVVGQlFTeERRVU40UWtNc1NVRkJRVUVzUTBGQmRVSXNTVUZCUVN4SFFVRnFRbk5ETEVOQlFVRkJMRU5CUVZGMFF5eEpRVUZCUVN4RFFVRm5RaXhKUVVGQkxFTkJRVTkyUWl4SlFVRkJRU3hEUVVGTFV5eE5RVUZCUVN4RFFVRlBjVVFzUlVGQlFVRXNRMEZCUjBRc1EwRkJRVUVzUTBGQlVYUkRMRWxCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSVGRFZGtJc1NVRkJRVUVzUTBGQlFVRXNRMEZCVFN0RUxFOUJRVUZCTEVOQlFWRlNMRU5CUVVGQkxFTkJRVmRITEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQmVVSm9RekZGTEdsQ1FVRkJRU3hEUVVGclFtMUVMRk5CUVVGQkxFTkJRVlUyUWl4M1FrRkJRVUVzUTBGRE1VSXNVMEZCYjBSRExFTkJRVUZCTEVOQlFVRkJMRU5CUTJ4RUxFbEJRVWw0UXl4RFFVRkJRU3hEUVVGUEwwTXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDNkRkxFTkJRVUZCTEVOQlFVOHNUVUZCUVN4RFFVRkJMRU5CVFRGQ1F5eERRVUZCUVN4RFFVRlRMRU5CUTFnMVJDeE5RVUZCUVN4RFFVRlJOVUlzU1VGQlFVRXNRMEZCUzJVc1RVRkJRVUVzUTBGQlQzZEZMRU5CUVVGQkxFTkJRVThzVVVGQlFTeERRVUZCTEVOQlF6TkNOVU1zV1VGQlFVRXNRMEZCWTBrc1EwRkJRVUVzUTBGRFpFZ3NZMEZCUVVFc1EwRkJaMEkxUXl4SlFVRkJRU3hEUVVGTFpTeE5RVUZCUVN4RFFVRlBkMFVzUTBGQlFVRXNRMEZCVHl4UlFVRkJMRU5CUVZVc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGSkwwTXNSMEZFUVVNc1EwRkJRVUVzUTBGQlR6VkVMRTFCUVVGQkxFTkJRVk5PTEVsQlFVRkJMRU5CUVV0dFJTeG5Ra0ZCUVVFc1EwRkJhVUpFTEVOQlFVRkJMRU5CUVU4MVJDeE5RVUZCUVN4RFFVRkJRU3hEUVVONlF6UkVMRU5CUVVGQkxFTkJRVTgxUkN4TlFVRkJRU3hEUVVGVExFTkJRVUVzUTBGRGJFSXNUVUZCVHl4RlFVRkJMRU5CUjFRc1NVRkJTVklzUTBGQlFVRXNRMEZCVnl4RlFVRkJMRU5CUlZoblJDeERRVUZCUVN4RFFVRlJPVU1zU1VGQlFVRXNRMEZCUzI5RkxGbEJRVUZCTEVOQlFXRkdMRU5CUVVGQkxFTkJRMEZzUlN4SlFVRkJRU3hEUVVGTE5FUXNhVUpCUVVGQkxFTkJRMHdzWTBGQlFTeERRVU5CTEdkQ1FVRkJMRU5CUTBGc1JpeEpRVUZCUVN4RFFVRkxNa1lzTUVKQlFVRkJMRU5CUTB4NlJpeFpRVUZCUVN4RFFVRmhlVVVzYVVKQlFVRkJMRU5CUVVGQkxFTkJRek5ETEVkQlFVbFFMRU5CUVVGQkxFVkJRVk1zUTBGQlFTeERRVUZITEVOQlEyUXNTVUZCU1dVc1EwRkJRVUVzUTBGQlZUZEVMRWxCUVVGQkxFTkJRVXMwUkN4cFFrRkJRVUVzUTBGQmEwSmtMRU5CUVVGQkxFTkJRVUZCTEVOQlJYSkRMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVWx0UWl4RFFVRkJRU3hEUVVGTmRrTXNUVUZCUVVFc1EwRlBVaXhKUVU1QkxFbEJRVWxNTEVOQlFVRkJMRU5CUVdWM1F5eERRVUZCUVN4RFFVRlJlRU1zV1VGQlFVRXNRMEZOY0VKM1F5eERRVUZCUVN4RlFVRlhRU3hEUVVGQlFTeERRVUZSZUVNc1dVRkJRVUVzUjBGQmFVSkJMRU5CUVVGQkxFVkJRM3BEZGtJc1EwRkJRVUVzUTBGQlUzZEZMRWxCUVVGQkxFTkJRVXNzUTBGRFdqZERMRWxCUVVGQkxFTkJRVTB2UXl4SlFVRkJRU3hEUVVGTFpTeE5RVUZCUVN4RFFVRlBiMFVzUTBGQlFVRXNRMEZCVXl4bFFVRkJMRU5CUVdsQ0xFbEJRVUVzUTBGQlFTeERRVU0xUTI1RExFMUJRVUZCTEVOQlFWRm9SQ3hKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUGIwVXNRMEZCUVVFc1EwRkJVeXhwUWtGQlFTeERRVUZ0UWl4SlFVRkJMRU5CUVVFc1EwRkRhRVJWTEZWQlFVRkJMRU5CUVZrM1JpeEpRVUZCUVN4RFFVRkxaU3hOUVVGQlFTeERRVUZQYjBVc1EwRkJRVUVzUTBGQlV5eHhRa0ZCUVN4RFFVRjFRaXhKUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlJ6RkVRU3hEUVVGQlFTeERRVUZWTjBRc1NVRkJRVUVzUTBGQlN6UkVMR2xDUVVGQlFTeERRVUZCUVN4RlFVRnZRbVFzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUzBGVGNrTXNTVUZPUVN4SlFVRkplRUlzUTBGQlFVRXNRMEZCYVVKMVF5eERRVUZCUVN4RFFVRlJka01zWTBGQlFVRXNRMEZOZEVKMVF5eERRVUZCUVN4RlFVTkJRU3hEUVVGQlFTeERRVUZSZUVNc1dVRkJRVUVzUjBGQmFVSkpMRU5CUVVGQkxFVkJRM3BDYjBNc1EwRkJRVUVzUTBGQlVYWkRMR05CUVVGQkxFVkJRV3RDUVN4RFFVRkJRU3hGUVVNdlFuaENMRU5CUVVGQkxFTkJRVk4zUlN4SlFVRkJRU3hEUVVGTExFTkJRMW8zUXl4SlFVRkJRU3hEUVVGTkwwTXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDI5RkxFTkJRVUZCTEVOQlFWTXNaVUZCUVN4RFFVRnBRaXhKUVVGQkxFTkJRVUVzUTBGRE5VTnVReXhOUVVGQlFTeERRVUZSYUVRc1NVRkJRVUVzUTBGQlMyVXNUVUZCUVVFc1EwRkJUMjlGTEVOQlFVRkJMRU5CUVZNc2FVSkJRVUVzUTBGQmJVSXNTVUZCUVN4RFFVRkJMRU5CUTJoRVZTeFZRVUZCUVN4RFFVRlpOMFlzU1VGQlFVRXNRMEZCUzJVc1RVRkJRVUVzUTBGQlQyOUZMRU5CUVVGQkxFTkJRVk1zY1VKQlFVRXNRMEZCZFVJc1NVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVWN4UkVFc1EwRkJRVUVzUTBGQlZUZEVMRWxCUVVGQkxFTkJRVXMwUkN4cFFrRkJRVUVzUTBGQlFVRXNSVUZCYjBKa0xFTkJRVUZCTEVOQlFVRkJMRU5CUzNwRExFOUJRVTlvUkN4RFFVRkJRU3hEUVVGQlFTeERRVWRZTUVVc2QwUkJRVFJDZUVZc2FVSkJRVUZCTEVOQlowYzFRazhzYzBKQlFVRkJMRU5CUVhWQ05FTXNVMEZCUVVFc1EwRkJXVVVzVFVGQlFVRXNRMEZCVDI5RExFMUJRVUZCTEVOQlFVOTZSaXhwUWtGQlFVRXNRMEZCYTBKdFJDeFRRVUZCUVN4RFFVRkJRU3hEUVVOdVJUVkRMSE5DUVVGQlFTeERRVUYxUWpSRExGTkJRVUZCTEVOQlFWVkdMRkZCUVVGQkxFTkJRVmRxUkN4cFFrRkJRVUVzUTBGTk5VTlBMSE5DUVVGQlFTeERRVUYxUWpSRExGTkJRVUZCTEVOQlFWVm5ReXhuUWtGQlFVRXNRMEZCYlVJc1UwRkJVMDhzUTBGQlFVRXNRMEZCUVVFc1EwRkRNMFFzU1VGWFNVTXNRMEZCUVVFc1EwRllRVU1zUTBGQlFVRXNRMEZCYVVKR0xFTkJRVUZCTEVOQlMzSkNMRWRCU25WQ0xFbEJRVUVzUlVGQmJrSXhSU3hKUVVGQlFTeERRVUZMU2l4VlFVRkJRU3hIUVVOUVowWXNRMEZCUVVFc1EwRkJhVUpzUnl4SlFVRkJRU3hEUVVGTE9FSXNVVUZCUVVFc1EwRkJVMUlzU1VGQlFVRXNRMEZCUzBvc1ZVRkJRVUVzUTBGQldXZEdMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUnpsRE5VVXNTVUZCUVVFc1EwRkJTMWNzVVVGQlFVRXNRMEZCVTJ0RkxFZEJRVUZCTEVOQlFVbEVMRU5CUVVGQkxFTkJRVUZCTEVOQlEzQkNMRTlCUVU4MVJTeEpRVUZCUVN4RFFVRkxWeXhSUVVGQlFTeERRVUZUYlVVc1QwRkJRVUVzUTBGQlVVWXNRMEZCUVVFc1EwRkJRVUVzUTBGTkwwSXNTVUZCUzBRc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVZEJMRU5CUVVGQkxFTkJRVWt6UlN4SlFVRkJRU3hEUVVGTFdTeG5Ra0ZCUVVFc1EwRkJhVUp0UlN4TlFVRkJRU3hEUVVGQlFTeEZRVUZWU2l4RFFVRkJRU3hEUVVNNVF5eEhRVUZKTTBVc1NVRkJRVUVzUTBGQlMxa3NaMEpCUVVGQkxFTkJRV2xDSzBRc1EwRkJRVUVzUTBGQlFVRXNSVUZCVFVRc1EwRkJRVUVzUTBGRE9VSXNUMEZCVDBNc1EwRkJRVUVzUTBGSldDeE5RVUZCTEVOQlFWRXNRMEZCUVN4RFFVRkJMRU5CV1Zad1JpeHpRa0ZCUVVFc1EwRkJkVUl5UXl4aFFVRkJRU3hEUVVOeVFpeFRRVUY1UTJwRUxFTkJRVUZCTEVOQlFWbERMRU5CUVVGQkxFTkJRVUZCTEVOQlEyNUVMRWxCUVVrNFJpeERRVUZCUVN4RFFVRk5NME1zVFVGQlFVRXNRMEZCVDI5RExFMUJRVUZCTEVOQlFVOXNSaXh6UWtGQlFVRXNRMEZCZFVJMFF5eFRRVUZCUVN4RFFVRkJRU3hEUVVVelEzaERMRU5CUVVGQkxFTkJRVkZ4Uml4RFFVRkJRU3hEUVVGSmRrVXNUVUZCUVVFc1EwRkJVelZDTEZGQlFVRkJMRU5CUVZNMlFpeFRRVUZCUVN4RFFVRlZla0lzUTBGQlFVRXNRMEZCVjNkQ0xFMUJRVUZCTEVOQlFVOUpMRTlCUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUXpGRWJrSXNRMEZCUVVFc1EwRkJWWE5HTEVOQlFVRkJMRU5CUVVseVJTeFJRVUZCUVN4RFFVRlhPVUlzVVVGQlFVRXNRMEZCVXpaQ0xGTkJRVUZCTEVOQlFWVjZRaXhEUVVGQlFTeERRVUZYTUVJc1VVRkJRVUVzUTBGQlUwVXNUMEZCUVVFc1JVRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZEY0VWdFJTeERRVUZCUVN4RFFVRkpjRVlzVlVGQlFVRXNRMEZCWVZnc1EwRkJRVUVzUTBGQlYyZEhMRmRCUVVGQkxFTkJRelZDUkN4RFFVRkJRU3hEUVVGSmJrWXNZMEZCUVVFc1EwRkJhVUphTEVOQlFVRkJMRU5CUVZkcFJ5eDFRa0ZCUVVFc1EwRkJkMEpHTEVOQlFVRkJMRU5CUVVseVJTeFJRVUZCUVN4RFFVRlRSU3hQUVVGQlFTeEZRVUZCUVN4RFFVTmliVVVzUTBGQlFVRXNRMEZCU1hCR0xGVkJRVUZCTEVOQlFVRkJMRU5CUXpWRWIwWXNRMEZCUVVFc1EwRkJTV3BHTEVsQlFVRkJMRU5CUVU5a0xFTkJRVUZCTEVOQlFWZHJSeXhMUVVGQlFTeERRVU4wUWtnc1EwRkJRVUVzUTBGQlNTOUVMR0ZCUVVGQkxFTkJRV2RDTDBJc1EwRkJRVUVzUTBGRGNFSTRSaXhEUVVGQlFTeERRVUZKY0VVc1owSkJRVUZCTEVOQlFXMUNiMFVzUTBGQlFVRXNRMEZCU1hKRkxGRkJRVUZCTEVOQlFWTkZMRTlCUVVGQkxFVkJRVUZCTEVOQlFWVlVMRWRCUVVGQkxFTkJRVWtzVTBGQlZWVXNRMEZCUVVFc1EwRkJRVUVzUTBGRE1VUXNUMEZCVDNCRExFbEJRVUZCTEVOQlFVdHhReXhuUWtGQlFVRXNRMEZCYVVKcFJTeERRVUZCUVN4RFFVRkpjRVlzVlVGQlFVRXNRMEZCV1d0Q0xFTkJRVUZCTEVOQlFVYzFRaXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVmxzUkN4SlFVcEJMRWxCUVVsclJ5eERRVUZCUVN4RFFVRnZRbTVITEVOQlFVRkJMRU5CUVZjclFpeFRRVUZCUVN4RFFVRlZTQ3hQUVVGQlFTeEZRVUZCUVN4RFFVRlZkMFVzUzBGQlFVRXNSVUZCUVVFc1EwRkRia1JETEVOQlFVRkJMRU5CUVhkQ1RpeERRVUZCUVN4RFFVRkpOVU1zYlVKQlFVRkJMRU5CUVhOQ0xFVkJRVUVzUTBGRGJFUnRSQ3hEUVVGQlFTeERRVUYxUWxBc1EwRkJRVUVzUTBGQlNYSkRMR3RDUVVGQlFTeERRVUZ4UWl4RlFVRkJMRU5CUlRORFowTXNRMEZCUVVFc1EwRkJTU3hEUVVGQkxFTkJRVWRKTEVOQlFVRkJMRU5CUVZOTExFTkJRVUZCTEVOQlFXdENUQ3hOUVVGQlFTeERRVUZSU2l4RFFVRkJRU3hEUVVGSlNTeERRVUZCUVN4RFFVRlJTaXhEUVVGQlFTeEZRVUZCUVN4RFFVRkxMRU5CUTJ4RkxFbEJRVWxoTEVOQlFVRkJMRU5CUVdGS0xFTkJRVUZCTEVOQlFXdENWQ3hEUVVGQlFTeERRVUZCUVN4RFFVTXZRbU1zUTBGQlFVRXNRMEZCWXl4SlFVRkpka1VzVDBGQlFVRXNRMEZEZEVKMVJTeERRVUZCUVN4RFFVRlpkRVVzWVVGQlFVRXNRMEZCWjBKeFJTeERRVUZCUVN4RFFVRlhja1VzWVVGQlFVRXNRMEZEZGtOelJTeERRVUZCUVN4RFFVRlpja1VzWlVGQlFVRXNRMEZCYTBKdlJTeERRVUZCUVN4RFFVRlhjRVVzWlVGQlFVRXNRMEZGY2tOdlJTeERRVUZCUVN4RFFVRlhiRVlzVFVGQlFVRXNSMEZEWW0xR0xFTkJRVUZCTEVOQlFWbHVSaXhOUVVGQlFTeERRVUZUV2l4RFFVRkJRU3hEUVVGUmIwWXNUMEZCUVVFc1EwRkJVVlVzUTBGQlFVRXNRMEZCVjJ4R0xFMUJRVUZCTEVOQlFVRkJMRU5CUTJoRWJVWXNRMEZCUVVFc1EwRkJXWEJGTEZsQlFVRkJMRU5CUVdWdFJTeERRVUZCUVN4RFFVRlhia1VzV1VGQlFVRXNRMEZEZEVOdlJTeERRVUZCUVN4RFFVRlpia1VzWTBGQlFVRXNRMEZCYVVKclJTeERRVUZCUVN4RFFVRlhiRVVzWTBGQlFVRXNRMEZGY0VOclJTeERRVUZCUVN4RFFVRlhha1VzU1VGQlFVRXNSMEZEWW10RkxFTkJRVUZCTEVOQlFWbHNSU3hKUVVGQlFTeERRVUZQTlVJc1EwRkJRVUVzUTBGQlRXMUdMRTlCUVVGQkxFTkJRVkZWTEVOQlFVRkJMRU5CUVZkcVJTeEpRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWM1UTJkRkxFTkJRVUZCTEVOQlFYRkNha0lzU1VGQlFVRXNRMEZCUzIxQ0xFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSelZDU0N4RFFVRkJRU3hEUVVGelFtaENMRWxCUVVGQkxFTkJRVXR0UWl4RFFVRkJRU3hEUVVGQlFTeERRVXMzUWl4UFFVWkJNVWNzVTBGQlFVRXNRMEZCVldsSExFTkJRVUZCTEVOQlFVbHlReXhyUWtGQlFVRXNRMEZCYjBKcVJTeEpRVUZCUVN4RFFVRkxNa1lzTUVKQlFVRkJMRU5CUVVGQkxFTkJSV2hEVnl4RFFVRkJRU3hEUVVGQlFTeERRVTFZZWtZc2MwSkJRVUZCTEVOQlFYVkNORU1zVTBGQlFVRXNRMEZCVld4RExGRkJRVUZCTEVOQlFWY3NRMEZCUVN4RFFVczFRMjlETEUxQlFVRkJMRU5CUVU5RExHTkJRVUZCTEVOQlFXVXZReXh6UWtGQlFVRXNRMEZCZFVJMFF5eFRRVUZCUVN4RFFVRlhMRk5CUVVFc1EwRkJWeXhEUVVOcVJVMHNSMEZCUVVFc1EwRkJTeXhWUVVGQkxFTkJRMGdzVDBGQlQzcERMRWxCUVVGQkxFTkJRVXRaTEdkQ1FVRkJRU3hEUVVGcFFubEZMRXRCUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQmNVSnFRemxHTEhOQ1FVRkJRU3hEUVVGMVFqUkRMRk5CUVVGQkxFTkJRVlZQTEdOQlFVRkJMRU5CUXk5Q0xGTkJRWGxEUnl4RFFVRkJRU3hEUVVGTlNTeERRVUZCUVN4RFFVRkJRU3hEUVdVM1F5eEpRV1JCTEVsQldVbFpMRU5CUVVGQkxFTkJRVk0yUWl4RFFVRkJRU3hEUVVGTFF5eERRVUZCUVN4RFFVRlRReXhEUVVGQlFTeERRVUZMUXl4RFFVRkJRU3hEUVZvMVFqRkZMRU5CUVVGQkxFTkJRV2RDTEVOQlFVRXNRMEZEYUVJeVJTeERRVUZCUVN4RFFVRXdRaXhEUVVGQkxFTkJRekZDUXl4RFFVRkJRU3hEUVVGMVFpeERRVUZCTEVOQlEzWkNReXhEUVVGQlFTeERRVUY1UWl4RFFVRkJMRU5CUTNwQ1F5eERRVUZCUVN4RFFVRnBRaXhEUVVGQkxFTkJRMnBDUXl4RFFVRkJRU3hEUVVGbExFTkJRVUVzUTBGRFptNUNMRU5CUVVGQkxFTkJRVk5zUXl4RFFVRkJRU3hEUVVGTGEwTXNUVUZCUVVFc1EwRkRaR3BETEVOQlFVRkJMRU5CUVZFc1EwRkJRU3hEUVVOU2NVUXNRMEZCUVVFc1EwRkJhVUlzUlVGQlFTeERRVU5xUWtNc1EwRkJRVUVzUTBGQlR5eEZRVUZCTEVOQlExQkRMRU5CUVVGQkxFTkJRVzFDTEVWQlFVRXNRMEZEYmtKcVFpeERRVUZCUVN4RFFVRnZRaXhGUVVGQkxFTkJSMnBDZEVNc1EwRkJRVUVzUTBGQlVXbERMRU5CUVVGQkxFVkJRMklzUjBGQk1rSXNSMEZCUVN4SFFVRjJRbXhETEVOQlFVRkJMRU5CUVV0SExFMUJRVUZCTEVOQlFVOUdMRU5CUVVGQkxFTkJRVUZCTEVOQlEyUXpRaXhEUVVGQlFTeEZRVUZCUVN4RFFVTkJNa0lzUTBGQlFVRXNSVUZCUVVFc1EwRkRRV2RFTEVOQlFVRkJMRU5CUVRCQ0xFTkJRVUVzUTBGQlFTeExRVVYyUWl4SFFVRXlRaXhIUVVGQkxFZEJRWFpDYWtRc1EwRkJRVUVzUTBGQlMwY3NUVUZCUVVFc1EwRkJUMFlzUTBGQlFVRXNRMEZCUVVFc1EwRkRia0pCTEVOQlFVRkJMRVZCUVVGQkxFTkJRVUZCTEVsQlJVY3NRMEZUU0N4SlFVRkJMRU5CVWtGbExFTkJRVUZCTEVOQlFWVXNTVUZCU1RORExFOUJRVUZCTEVWQlEwNURMR0ZCUVVGQkxFTkJRV2RDUVN4RFFVRkJRU3hEUVU5dVFubEZMRU5CUVVGQkxFTkJRVTA1UXl4RFFVRkJRU3hEUVVGUE9FTXNRMEZCUVVFc1EwRkJUV0lzUTBGQlFVRXNSVUZCUVVFc1EwRkRiRUl2UlN4SlFVRkJRU3hEUVVGTE5FTXNkVUpCUVVGQkxFTkJRWGRDUXl4RFFVRkJRU3hEUVVGTkswTXNRMEZCUVVFc1EwRkJRVUVzUTBGRVZFRXNRMEZCUVVFc1JVRkJRVUVzUTBGQlFVRXNRMEZSYUVNc1IwRkVRVVFzUTBGQlFVRXNRMEZCVlZFc1EwRkJRVUVzUTBGR1ZsUXNRMEZCUVVFc1EwRkJUVGRETEVOQlFVRkJMRU5CUVV0M1F5eExRVUZCUVN4RFFVRk5ka01zUTBGQlFVRXNRMEZCVHpoRExFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJTWFJDT1VNc1EwRkJRVUVzUlVGQlV6UkRMRU5CUVVGQkxFTkJRVWxZTEUxQlFVRkJMRU5CUVVGQkxFbEJRMUlzUTBGRlRDeEpRVVJCV1N4RFFVRkJRU3hEUVVGVkxFVkJRVUVzUTBGRFNEZERMRU5CUVVGQkxFTkJRVkU0UXl4RFFVRkJRU3hGUVVOaU9VY3NVMEZCUVVFc1EwRkJWWGRJTEUxQlFVRkJMRU5CUVU5NlJDeERRVUZCUVN4RFFVRk5ReXhEUVVGQlFTeERRVUZQYzBRc1EwRkJRVUVzUTBGQlFVRXNRMEZET1VKUUxFTkJRVUZCTEVOQlFWRlBMRU5CUVVGQkxFTkJRVXRRTEV0QlFVRkJMRU5CUTJJdlF5eERRVUZCUVN4RFFVRlJjMFFzUTBGQlFVRXNRMEZCUzBjc1NVRkJRVUVzUTBGRFlsb3NRMEZCUVVFc1EwRkJVWEpDTEVsQlFVRkJMRU5CUVV0MVFpeERRVUZCUVN4RFFVRkJRU3hEUVVkbUxFZEJRWFZDTEVOQlFVRXNSMEZCYmtKR0xFTkJRVUZCTEVOQlFWRmFMRTFCUVVGQkxFTkJRMVlzVFVGQlRTeEpRVUZKTjBVc1MwRkJRVUVzUTBGQlRTeDNRMEZCUVN4RFFVRkJMRU5CUjJ4Q0xFZEJRWFZDTEVOQlFVRXNSMEZCYmtKNVJpeERRVUZCUVN4RFFVRlJXaXhOUVVGQlFTeERRVU5XTEUxQlFVMHNTVUZCU1RkRkxFdEJRVUZCTEVOQlFVMHNkME5CUVVFc1EwRkJRU3hEUVVkc1FtbEhMRU5CUVVGQkxFTkJRV1ZVTEVOQlFVRkJMRU5CUVVGQkxFTkJRVTlETEVOQlFVRkJMRU5CU1hoQ09VSXNRMEZCUVVFc1EwRkJVWHBETEdWQlFVRkJMRU5CUVd0Q01FVXNRMEZCUVVFc1EwRkJNRUpJTEVOQlFVRkJMRU5CUVZFc1EwRkJRU3hEUVVGQkxFTkJRelZFUnl4RFFVRkJRU3hEUVVFd1FtcERMRU5CUVVGQkxFTkJRVkY2UXl4bFFVRkJRU3hEUVVVNVFuVkZMRU5CUVVGQkxFTkJRVkZhTEUxQlFVRkJMRU5CUVZNc1EwRkJRU3hIUVVWdVFteENMRU5CUVVGQkxFTkJRVkYyUkN4TlFVRkJRU3hEUVVGVE1rWXNRMEZCUVVFc1EwRkJhVUpPTEVOQlFVRkJMRU5CUVZFc1EwRkJRU3hEUVVGQkxFTkJRekZEVFN4RFFVRkJRU3hGUVVGclFrNHNRMEZCUVVFc1EwRkJVU3hEUVVGQkxFTkJRVUVzUTBGSE1VSTVRaXhEUVVGQlFTeERRVUZSZUVNc1dVRkJRVUVzUTBGQlpUQkZMRU5CUVVGQkxFTkJRWFZDU2l4RFFVRkJRU3hEUVVGUkxFTkJRVUVzUTBGQlFTeERRVU4wUkVrc1EwRkJRVUVzUTBGQmRVSnNReXhEUVVGQlFTeERRVUZSZUVNc1dVRkJRVUVzUTBGRkwwSjNReXhEUVVGQlFTeERRVUZSZUVNc1dVRkJRVUVzUlVGQlowSXNRMEZCUVN4RFFVZDRRbmRETEVOQlFVRkJMRU5CUVZGMlF5eGpRVUZCUVN4RFFVRnBRakJGTEVOQlFVRkJMRU5CUVhsQ1RDeERRVUZCUVN4RFFVRlJMRU5CUVVFc1EwRkJRU3hEUVVNeFJFc3NRMEZCUVVFc1EwRkJlVUp1UXl4RFFVRkJRU3hEUVVGUmRrTXNZMEZCUVVFc1EwRkZOMEp4UlN4RFFVRkJRU3hEUVVGUldpeE5RVUZCUVN4RFFVRlRMRU5CUVVFc1IwRkZia0pzUWl4RFFVRkJRU3hEUVVGUmRFTXNTVUZCUVVFc1EwRkJUekpGTEVOQlFVRkJMRU5CUVdWUUxFTkJRVUZCTEVOQlFWRXNRMEZCUVN4RFFVRkJMRU5CUTNSRFR5eERRVUZCUVN4RlFVRm5RbEFzUTBGQlFVRXNRMEZCVVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJTVFZDVUN4RFFVRkJRU3hEUVVGclFtUXNTVUZCUVVFc1EwRkJTMVFzUTBGQlFVRXNRMEZCUVVFc1EwRkRZU3hSUVVGQkxFVkJRVUVzVDBGQmVrSkJMRU5CUVVGQkxFTkJRVkY0UXl4WlFVRkJRU3hGUVVOcVFtZEdMRU5CUVVGQkxFTkJRV2xDTDBJc1NVRkJRVUVzUTBGQlMxUXNRMEZCUVVFc1EwRkJRVUVzUTBGTE5VSTVSU3hUUVVGQlFTeERRVUZWY1Vjc1EwRkJRVUVzUTBGQmJVSXhSeXhKUVVGQlFTeERRVUZMT0Vnc2JVTkJRVUZCTEVOQlFVRkJMRU5CUTJ4RGVFY3NTVUZCUVVFc1EwRkJTMjlETEcxQ1FVRkJRU3hEUVVGelFtZEVMRU5CUVVGQkxFTkJSVE5DY2tjc1UwRkJRVUVzUTBGQlZYTklMRU5CUVVGQkxFTkJRV3RDTTBnc1NVRkJRVUVzUTBGQlN6SkdMREJDUVVGQlFTeERRVUZCUVN4RFFVTnFRM0pGTEVsQlFVRkJMRU5CUVVzeVF5eHJRa0ZCUVVFc1EwRkJjVUl3UkN4RFFVRkJRU3hEUVVGQlFTeERRVTg1UWpsSExITkNRVUZCUVN4RFFVRjFRalJETEZOQlFVRkJMRU5CUVZWcFF5eFpRVUZCUVN4RFFVTXZRaXhUUVVGMVEzRkRMRU5CUVVGQkxFTkJRVk5ETEVOQlFVRkJMRU5CUVZkRExFTkJRVUZCTEVOQlEzQkNReXhEUVVGQlFTeERRVUZoUXl4RFFVRkJRU3hEUVVGaFF5eERRVUZCUVN4RFFVRkJRU3hEUVUwdlJDeEhRVUZKVEN4RFFVRkJRU3hEUVVGUlJTeERRVUZCUVN4RFFVRkJRU3hGUVVGakxFTkJRVUVzUTBGRGVFSXNUVUZCVFN4SlFVRkpTU3hUUVVGQlFTeERRVUZWTEN0RFFVRkJMRU5CUTBWT0xFTkJRVUZCTEVOQlFWRkZMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUldoRExFZEJRVWxHTEVOQlFVRkJMRU5CUVZGSExFTkJRVUZCTEVOQlFVRkJMRU5CUVdVc1EwRkJRU3hEUVVONlFpeE5RVUZOTEVsQlFVbEhMRk5CUVVGQkxFTkJRVlVzYVVSQlFVRXNRMEZEUlU0c1EwRkJRVUVzUTBGQlVVY3NRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZIYUVNc1QwRkJUMmhKTEZsQlFVRkJMRU5CUVdGdlNTeE5RVUZCUVN4RFFVRlBVQ3hEUVVGQlFTeERRVUZUUXl4RFFVRkJRU3hEUVVGWFJ5eERRVUZCUVN4RFFVRmhReXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVU5b1JYWklMSE5DUVVGQlFTeERRVUYxUWpSRExGTkJRVUZCTEVOQlFWVTRSU3hyUWtGQlFVRXNRMEZETDBJc1ZVRkJRU3hEUVVORkxFbEJRVXNzU1VGQlNXNUZMRU5CUVVGQkxFTkJRVkVzUTBGQlFTeERRVUZIUVN4RFFVRkJRU3hEUVVGUk9VTXNTVUZCUVVFc1EwRkJTekpFTEd0Q1FVRkJRU3hEUVVGdFFtOUNMRTFCUVVGQkxFTkJRVUZCTEVWQlFWVnFReXhEUVVGQlFTeERRVUZQTEVOQlEyNUZMRWxCUVVsbExFTkJRVUZCTEVOQlFWVTNSQ3hKUVVGQlFTeERRVUZMTWtRc2EwSkJRVUZCTEVOQlFXMUNZaXhEUVVGQlFTeERRVUZCUVN4RFFVMTBReXhIUVVGSlFTeERRVUZCUVN4RFFVRlJMRU5CUVVFc1EwRkJTVGxETEVsQlFVRkJMRU5CUVVzeVJDeHJRa0ZCUVVFc1EwRkJiVUp2UWl4TlFVRkJRU3hEUVVGUkxFTkJRemxETEVsQlFVbHRReXhEUVVGQlFTeERRVUZqYkVnc1NVRkJRVUVzUTBGQlN6SkVMR3RDUVVGQlFTeERRVUZ0UW1Jc1EwRkJRVUVzUTBGQlVTeERRVUZCTEVOQlFVRXNRMEZGYkVRc1IwRkJTV1VzUTBGQlFVRXNRMEZCVVRGRExHRkJRVUZCTEVkQlFXdENLMFlzUTBGQlFVRXNRMEZCV1M5R0xHRkJRVUZCTEVOQlFXVXNRMEZEZGtRd1F5eERRVUZCUVN4RFFVRlJjMFFzYlVKQlFVRkJMRU5CUVhOQ1JDeERRVUZCUVN4RFFVRlpPVVlzWlVGQlFVRXNRMEZCYTBJc1EwRkJRU3hEUVVNMVJDeFJRVUZCTEVOQlFVRXNRMEZMU25sRExFTkJRVUZCTEVOQlFWRnpSQ3h0UWtGQlFVRXNRMEZCYzBKRExFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CTkVKd1F6ZElMSE5DUVVGQlFTeERRVUYxUWpSRExGTkJRVUZCTEVOQlFWVnJSaXh0UWtGQlFVRXNRMEZETDBJc1UwRkJLME53UkN4RFFVRkJRU3hEUVVGQlFTeERRVU0zUXl4SlFVRkpReXhEUVVGQlFTeERRVUZUTEVOQlExZ3ZReXhoUVVGQlFTeERRVUZsZWtNc1NVRkJRVUVzUTBGQlMyVXNUVUZCUVVFc1EwRkJUM2RGTEVOQlFVRkJMRU5CUVU4c1RVRkJRU3hEUVVGQkxFTkJRMnhETjBNc1pVRkJRVUVzUTBGQmFVSXhReXhKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUGQwVXNRMEZCUVVFc1EwRkJUeXhSUVVGQkxFTkJRVUVzUTBGQlFTeERRVWRzUTI1Q0xFTkJRVUZCTEVOQlFWRTVReXhKUVVGQlFTeERRVUZMYjBVc1dVRkJRVUVzUTBGRFprWXNRMEZCUVVFc1EwRkRRV3hGTEVsQlFVRkJMRU5CUVVzeVJDeHJRa0ZCUVVFc1EwRkRUQ3hsUVVGQkxFTkJRMEVzYVVKQlFVRXNRMEZEUVdwR0xFbEJRVUZCTEVOQlFVczRTQ3h0UTBGQlFVRXNRMEZEVERsSUxFbEJRVUZCTEVOQlFVdGxMRTFCUVVGQkxFTkJRVTkzUlN4RFFVRkJRU3hEUVVGUExFMUJRVUVzUTBGQlVXcEdMR2xDUVVGQlFTeERRVUZyUW05RkxHOUNRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWN2UXl4SFFVRkpUaXhEUVVGQlFTeEZRVUZUTEVOQlFVRXNRMEZCUnl4RFFVTmtMRWxCUVVsbExFTkJRVUZCTEVOQlFWVTNSQ3hKUVVGQlFTeERRVUZMTWtRc2EwSkJRVUZCTEVOQlFXMUNZaXhEUVVGQlFTeERRVUZCUVN4RFFVVjBReXhIUVVGSlpTeERRVUZCUVN4RFFVRlJNVU1zWVVGQlFVRXNSMEZCYTBJclF5eERRVUZCUVN4RFFVRlBMME1zWVVGQlFVRXNRMEZCWlN4RFFVTnNSQ3hKUVVGSllpeERRVUZCUVN4RFFVRlROVUlzU1VGQlFVRXNRMEZCUzJVc1RVRkJRVUVzUTBGQlQyOUZMRU5CUVVGQkxFTkJRVk1zVVVGQlFTeERRVUZWTEVsQlFVRXNRMEZCUVN4RFFVTTNRaXhKUVVGQkxFZEJRVmgyUkN4RFFVRkJRU3hIUVVOR1FTeERRVUZCUVN4RFFVRlRUaXhKUVVGQlFTeERRVUZMVnl4UlFVRkJRU3hEUVVGVGJVUXNSVUZCUVVFc1EwRkJSM2hFTEVOQlFVRkJMRU5CUVVGQkxFTkJRekZDUVN4RFFVRkJRU3hEUVVGVE5VSXNTVUZCUVVFc1EwRkJTM0ZETEdkQ1FVRkJRU3hEUVVGcFFtWXNTVUZCUVVFc1EwRkJTMG9zVlVGQlFVRXNRMEZCV1ZVc1EwRkJRVUVzUTBGQlVVNHNTVUZCUVVFc1EwRkJTMmxDTEdGQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlJTOUVMRWxCUVVsTkxFTkJRVUZCTEVOQlFVODNReXhKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUGIwVXNRMEZCUVVFc1EwRkJVeXhOUVVGQkxFTkJRVkVzU1VGQlFTeERRVUZCTEVOQlNYaERMRTlCU0dFc1NVRkJRU3hIUVVGVWRFTXNRMEZCUVVFc1IwRkRSa0VzUTBGQlFVRXNRMEZCVDNaQ0xFbEJRVUZCTEVOQlFVdFRMRTFCUVVGQkxFTkJRVTl4UkN4RlFVRkJRU3hEUVVGSGRrTXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZGYWtJc1EwRkRUR3BDTEUxQlFVRkJMRU5CUVZGQkxFTkJRVUZCTEVOQlExSnRRaXhKUVVGQlFTeERRVUZOTDBNc1NVRkJRVUVzUTBGQlMyVXNUVUZCUVVFc1EwRkJUMjlGTEVOQlFVRkJMRU5CUVZNc1kwRkJRU3hEUVVGblFpeEpRVUZCTEVOQlFVRXNRMEZETTBOdVF5eE5RVUZCUVN4RFFVRlJhRVFzU1VGQlFVRXNRMEZCUzJVc1RVRkJRVUVzUTBGQlQyOUZMRU5CUVVGQkxFTkJRVk1zWjBKQlFVRXNRMEZCYTBJc1NVRkJRU3hEUVVGQkxFTkJReTlEZEVNc1NVRkJRVUVzUTBGQlRVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZMV2l4TlFVRlBMRU5CUTB4cVFpeE5RVUZCUVN4RFFVRlJMRWxCUVVFc1EwRkRVbTFDTEVsQlFVRkJMRU5CUVUwc1NVRkJRU3hEUVVOT1F5eE5RVUZCUVN4RFFVRlJMRWxCUVVFc1EwRkRVa2dzU1VGQlFVRXNRMEZCVFN4SlFVRkJMRU5CUVVFc1EwRkJRU3hEUVZGYWFFTXNjMEpCUVVGQkxFTkJRWFZDTkVNc1UwRkJRVUVzUTBGQlZXMUdMSFZDUVVGQlFTeERRVU12UWl4VlFVRkJMRU5CUTBVc1RVRkJRU3hEUVVGQkxFTkJRVXQwU0N4SlFVRkJRU3hEUVVGTFNDeGpRVUZCUVN4RlFVZElSeXhKUVVGQlFTeERRVUZMU0N4alFVRkJRU3hEUVVGbGEwWXNUVUZCUVVFc1JVRkJWUzlGTEVsQlFVRkJMRU5CUVV0WExGRkJRVUZCTEVOQlFWTTBSeXhKUVVGQlFTeEZRVUZCUVN4RlFVRkJRU3hEUVVOb1JIWklMRWxCUVVGQkxFTkJRVXRJTEdOQlFVRkJMRU5CUVdVeVNDeEpRVUZCUVN4RFFVRkxMRk5CUVZWRExFTkJRVUZCTEVOQlFVRkJMRU5CUVUwc1QwRkJZU3hKUVVGQkxFVkJRVTVCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CVVhaRWJFa3NjMEpCUVVGQkxFTkJRWFZDTkVNc1UwRkJRVUVzUTBGQlZYVkdMR2RDUVVGQlFTeERRVU12UWl4VFFVRTBRMmhFTEVOQlFVRkJMRU5CUVZOcFJDeERRVUZCUVN4RFFVRkJRU3hEUVVOdVJDeEhRVUZCTEVOQlFVc3pTQ3hKUVVGQlFTeERRVUZMU0N4alFVRkJRU3hEUVVOU0xFOUJRVThzU1VGQlFTeERRVWRVTEVsQlFVbHBSQ3hEUVVGQlFTeERRVUZST1VNc1NVRkJRVUVzUTBGQlMyMUZMR2RDUVVGQlFTeERRVUZwUWs4c1EwRkJRVUVzUTBGQlFVRXNRMEZEYkVNc1IwRkJTVFZDTEVOQlFVRkJMRVZCUVZNc1EwRkJRU3hEUVVOWUxFOUJRVTg1UXl4SlFVRkJRU3hEUVVGTFNDeGpRVUZCUVN4RFFVRmxhVVFzUTBGQlFVRXNRMEZCUVVFc1EwRkhOMElzU1VGTFNXeENMRU5CUVVGQkxFTkJURUZuUkN4RFFVRkJRU3hEUVVGcFFrWXNRMEZCUVVFc1EwRk5ja0lzUjBGTWRVSXNTVUZCUVN4RlFVRnVRakZGTEVsQlFVRkJMRU5CUVV0S0xGVkJRVUZCTEVkQlExQm5SaXhEUVVGQlFTeERRVUZwUW14SExFbEJRVUZCTEVOQlFVczRRaXhSUVVGQlFTeERRVUZUVWl4SlFVRkJRU3hEUVVGTFNpeFZRVUZCUVN4RFFVRlpaMFlzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGSk0wSXNTVUZCUVN4RlFVRnVRalZGTEVsQlFVRkJMRU5CUVV0S0xGVkJRVUZCTEVkQlEwUm5ReXhEUVVGQlFTeERRVUZOYkVRc1NVRkJRVUVzUTBGQlMydEtMRkZCUVVGQkxFTkJRVk0xU0N4SlFVRkJRU3hEUVVGTFNpeFZRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZqTEVOQlN6ZERMRWxCUVVscFNTeERRVUZCUVN4RFFVRnBRbXBFTEVOQlFVRkJMRU5CUVdWclJDeFBRVUZCUVN4RFFVRlJMRmxCUVVFc1EwRkJZeXhGUVVGQkxFTkJRVUVzUTBGRE1VUXNSMEZCYTBJc1RVRkJRU3hGUVVGa2JFY3NRMEZCUVVFc1EwRkJTVzFITEUxQlFVRkJMRVZCUTBRdlNDeEpRVUZCUVN4RFFVRkxWeXhSUVVGQlFTeERRVUZUYTBVc1IwRkJRVUVzUTBGQlNXZEVMRU5CUVVGQkxFTkJRVUZCTEVOQlEzWkNMRTlCUVU4M1NDeEpRVUZCUVN4RFFVRkxTQ3hqUVVGQlFTeERRVUZsUnl4SlFVRkJRU3hEUVVGTFZ5eFJRVUZCUVN4RFFVRlRiVVVzVDBGQlFVRXNRMEZCVVN0RExFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSMjVFTEVkQlFVRXNRMEZCUVN4RFFVRk5ha2NzUTBGQlFVRXNRMEZCU1c5SExFbEJRVUZCTEVWQlFXOUNMRWRCUVVFc1JVRkJXbkJITEVOQlFVRkJMRU5CUVVsdlJ5eEpRVUZCUVN4SFFVTm1hRWtzU1VGQlFVRXNRMEZCUzFjc1VVRkJRVUVzUTBGQlUydEZMRWRCUVVGQkxFTkJRVWtzUjBGQlFTeERRVUZOUkN4RFFVRkJRU3hEUVVGQlFTeERRVU0zUWl4UFFVRlBOVVVzU1VGQlFVRXNRMEZCUzBnc1kwRkJRVUVzUTBGQlpVY3NTVUZCUVVFc1EwRkJTMWNzVVVGQlFVRXNRMEZCVTIxRkxFOUJRVUZCTEVOQlFWRXNSMEZCUVN4RFFVRk5SaXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVZFelJDeEhRVUZKSzBNc1EwRkJRVUVzUTBGRFJpeFBRVUZQTEVsQlFVRXNRMEZIVUN4TlFVRk5MRWxCUVVsNlNDeExRVUZCUVN4RFFVRk5MRWRCUVVFc1EwRkJUVEJGTEVOQlFVRkJMRU5CUVdsQ0xEUkNRVUZCTEVOQlFVRXNRMEZCUVN4RFFUSkNOME55Uml4elFrRkJRVUVzUTBGQmRVSTBReXhUUVVGQlFTeERRVUZWT0VZc2IwSkJRVUZCTEVOQlF5OUNMRk5CUVdkRWFFVXNRMEZCUVVFc1EwRkJRVUVzUTBGRE9VTXNTVUZCU1RORUxFTkJRVUZCTEVOQlFWTTFRaXhKUVVGQlFTeERRVUZMWlN4TlFVRkJRU3hEUVVGUGQwVXNRMEZCUVVFc1EwRkJUeXhSUVVGQkxFTkJRVUVzUTBGRmFFTXNSMEZCUVN4RFFVUkJNMFFzUTBGQlFVRXNRMEZCVTA0c1NVRkJRVUVzUTBGQlMyMUZMR2RDUVVGQlFTeERRVUZwUWpkRUxFTkJRVUZCTEVOQlFVRkJMRVZCUTJ4Q0xFTkJRVUVzUTBGRFdDeE5RVUZQTEVOQlEweHRRaXhKUVVGQlFTeERRVUZOTEVsQlFVRXNRMEZEVGtNc1RVRkJRVUVzUTBGQlVTeEpRVUZCTEVOQlExSTJReXhWUVVGQlFTeERRVUZaTEVsQlFVRXNRMEZCUVN4RFFVbG9RaXhKUVVGSlRDeERRVUZCUVN4RFFVRlRMRU5CUTFnMVJDeE5RVUZCUVN4RFFVRlJRU3hEUVVGQlFTeERRVU5TWlN4WlFVRkJRU3hEUVVGak0wTXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDNkRkxFTkJRVUZCTEVOQlFVOHNUVUZCUVN4RFFVRkJMRU5CUTJwRE0wTXNZMEZCUVVFc1EwRkJaMEkxUXl4SlFVRkJRU3hEUVVGTFpTeE5RVUZCUVN4RFFVRlBkMFVzUTBGQlFVRXNRMEZCVHl4UlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVkcVEyNUNMRU5CUVVGQkxFTkJRVkU1UXl4SlFVRkJRU3hEUVVGTGIwVXNXVUZCUVVFc1EwRkRaa1lzUTBGQlFVRXNRMEZEUVd4RkxFbEJRVUZCTEVOQlFVczBSQ3hwUWtGQlFVRXNRMEZEVEN4alFVRkJMRU5CUTBFc1owSkJRVUVzUTBGRFFXeEdMRWxCUVVGQkxFTkJRVXN5Uml3d1FrRkJRVUVzUTBGRFRETkdMRWxCUVVGQkxFTkJRVXRsTEUxQlFVRkJMRU5CUVU5M1JTeERRVUZCUVN4RFFVRlBMRTFCUVVFc1EwRkJVV3BHTEdsQ1FVRkJRU3hEUVVGclFtOUZMRzlDUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVjdlF5eEhRVUZKVGl4RFFVRkJRU3hGUVVGVExFTkJRVUVzUTBGQlJ5eERRVU5rTEVsQlFVbGxMRU5CUVVGQkxFTkJRVlUzUkN4SlFVRkJRU3hEUVVGTE5FUXNhVUpCUVVGQkxFTkJRV3RDWkN4RFFVRkJRU3hEUVVGQlFTeERRVVZ5UXl4SFFVRkpaU3hEUVVGQlFTeERRVUZSZGtRc1RVRkJRVUVzUjBGQlZ6UkVMRU5CUVVGQkxFTkJRVTgxUkN4TlFVRkJRU3hEUVVNMVFpeE5RVUZQTEVOQlEweHRRaXhKUVVGQlFTeERRVUZOTDBNc1NVRkJRVUVzUTBGQlMyVXNUVUZCUVVFc1EwRkJUMjlGTEVOQlFVRkJMRU5CUVZNc1pVRkJRU3hEUVVGcFFpeEpRVUZCTEVOQlFVRXNRMEZETlVOdVF5eE5RVUZCUVN4RFFVRlJhRVFzU1VGQlFVRXNRMEZCUzJVc1RVRkJRVUVzUTBGQlQyOUZMRU5CUVVGQkxFTkJRVk1zYVVKQlFVRXNRMEZCYlVJc1NVRkJRU3hEUVVGQkxFTkJRMmhFVlN4VlFVRkJRU3hEUVVGWk4wWXNTVUZCUVVFc1EwRkJTMlVzVFVGQlFVRXNRMEZCVDI5RkxFTkJRVUZCTEVOQlFWTXNjVUpCUVVFc1EwRkJkVUlzU1VGQlFTeERRVUZCTEVOQlFVRXNRMEZMT1VRc1RVRkJUeXhEUVVOTWNFTXNTVUZCUVVFc1EwRkJUU3hKUVVGQkxFTkJRMDVETEUxQlFVRkJMRU5CUVZFc1NVRkJRU3hEUVVOU05rTXNWVUZCUVVFc1EwRkJXU3hKUVVGQkxFTkJRVUVzUTBGQlFTeERRVWxzUWtNc05rUkJRV2xEYWtZc2MwSkJRVUZCTEVOQmJVZHFRMFFzZDBKQlFVRkJMRU5CUVhsQ05rTXNVMEZCUVVFc1EwRkJXVVVzVFVGQlFVRXNRMEZCVDI5RExFMUJRVUZCTEVOQlFVOTZSaXhwUWtGQlFVRXNRMEZCYTBKdFJDeFRRVUZCUVN4RFFVRkJRU3hEUVVOeVJUZERMSGRDUVVGQlFTeERRVUY1UWpaRExGTkJRVUZCTEVOQlFWVXJSaXhYUVVGQlFTeERRVUZqYkVvc2FVSkJRVUZCTEVOQlMycEVUU3gzUWtGQlFVRXNRMEZCZVVJMlF5eFRRVUZCUVN4RFFVRlZiRU1zVVVGQlFVRXNRMEZCVnl4RFFVRkJMRU5CU3psRGIwTXNUVUZCUVVFc1EwRkJUME1zWTBGQlFVRXNRMEZCWldoRUxIZENRVUZCUVN4RFFVRjVRalpETEZOQlFVRkJMRU5CUVZjc1UwRkJRU3hEUVVGWExFTkJRMjVGVFN4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRlNDeEpRVVJCTEVsQlFVa3ZReXhEUVVGQlFTeERRVUZWTEVWQlFVRXNRMEZEVEdsR0xFTkJRVUZCTEVOQlFVa3NRMEZCUVN4RFFVRkhRU3hEUVVGQlFTeERRVUZKTTBVc1NVRkJRVUVzUTBGQlN6SkNMRk5CUVVGQkxFTkJRVlZ2UkN4TlFVRkJRU3hEUVVGUlNpeERRVUZCUVN4RlFVRkJRU3hEUVVONlF5eEpRVUZMTEVsQlFVbDNSQ3hEUVVGQlFTeERRVUZKTEVOQlFVRXNRMEZCUjBFc1EwRkJRVUVzUTBGQlNXNUpMRWxCUVVGQkxFTkJRVXN5UWl4VFFVRkJRU3hEUVVGVlowUXNRMEZCUVVFc1EwRkJRVUVzUTBGQlJ6RkRMRkZCUVVGQkxFTkJRVk4yUXl4UFFVRkJRU3hEUVVGUmNVWXNUVUZCUVVFc1EwRkJVVzlFTEVOQlFVRkJMRVZCUVVGQkxFTkJRemRFZWtrc1EwRkJRVUVzUTBGQlVUUkZMRWxCUVVGQkxFTkJRVXQwUlN4SlFVRkJRU3hEUVVGTE1rSXNVMEZCUVVFc1EwRkJWV2RFTEVOQlFVRkJMRU5CUVVGQkxFTkJRVWN4UXl4UlFVRkJRU3hEUVVGVGRrTXNUMEZCUVVFc1EwRkJVWGxKTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIzQkVMRTlCUVU5NlNTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFYVkNXRW9zZDBKQlFVRkJMRU5CUVhsQ05rTXNVMEZCUVVFc1EwRkJWV3RHTEcxQ1FVRkJRU3hEUVVOcVF5eFRRVUZ6UkhCRUxFTkJRVUZCTEVOQlFVRkJMRU5CUTNCRUxFbEJRVWxETEVOQlFVRkJMRU5CUVZNc1EwRkRXQzlETEdGQlFVRkJMRU5CUVdWNlF5eEpRVUZCUVN4RFFVRkxaU3hOUVVGQlFTeERRVUZQZDBVc1EwRkJRVUVzUTBGQlR5eE5RVUZCTEVOQlFVRXNRMEZEYkVNM1F5eGxRVUZCUVN4RFFVRnBRakZETEVsQlFVRkJMRU5CUVV0bExFMUJRVUZCTEVOQlFVOTNSU3hEUVVGQlFTeERRVUZQTEZGQlFVRXNRMEZCUVN4RFFVRkJMRU5CUzJ4RGJVVXNRMEZCUVVFc1EwRkJaWGhLTEZsQlFVRkJMRU5CUVdGdlNTeE5RVUZCUVN4RFFVRlBPVU1zUTBGQlFVRXNRMEZCVVd4RkxFbEJRVUZCTEVOQlFVc3lRaXhUUVVGQlFTeERRVU5zUkN4VFFVRlRkVU1zUTBGQlFVRXNRMEZCVVcxRkxFTkJRVUZCTEVOQlFVRkJMRU5CUldZc1QwRkVWVzVGTEVOQlFVRkJMRU5CUVU4dlF5eGhRVUZCUVN4RFFVRm5RbXRJTEVOQlFVRkJMRU5CUVZGeVJ5eGxRVUZCUVN4RFFVRm5RbUlzWVVGQlFVRXNSVUZMYWtRclF5eERRVUZCUVN4RFFVRlBPVU1zWlVGQlFVRXNRMEZEVUdsSUxFTkJRVUZCTEVOQlFWRnlSeXhsUVVGQlFTeERRVUZuUWxvc1pVRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkZhRU5wU0N4RFFVRkJRU3hEUVVGVmNra3NTVUZCUVVFc1EwRkJTekpDTEZOQlFVRkJMRU5CUVZWNVJ5eERRVUZCUVN4RFFVRkJRU3hEUVVVM1FpeFBRVUZMUXl4RFFVRkJRU3hEUVZORlFTeERRVUZCUVN4RFFVRlJjRWNzVVVGQlFVRXNRMEZCVTI5R0xHMUNRVUZCUVN4RFFVRnZRaXhEUVVNeFF6VkdMRWxCUVVGQkxFTkJRVTE1UXl4RFFVRkJRU3hEUVVGUEwwTXNZVUZCUVVFc1JVRkRWbXRJTEVOQlFVRkJMRU5CUVZGeVJ5eGxRVUZCUVN4RFFVRm5RbUlzWVVGQlFVRXNRMEZCWjBJc1EwRkJRU3hEUVVGQkxFTkJRek5EVHl4TlFVRkJRU3hEUVVGUmQwTXNRMEZCUVVFc1EwRkJUemxETEdWQlFVRkJMRVZCUTFwcFNDeERRVUZCUVN4RFFVRlJja2NzWlVGQlFVRXNRMEZCWjBKaUxHRkJRVUZCTEVkQlFXdENLME1zUTBGQlFVRXNRMEZCVHk5RExHRkJRVUZCTEVOQlF5OURhMGdzUTBGQlFVRXNRMEZCVVhKSExHVkJRVUZCTEVOQlFXZENXaXhsUVVGQlFTeERRVUZyUWl4RFFVRkJMRU5CUXpGRExFTkJRVUVzUTBGQlFTeERRVU5NYTBnc1NVRkJRVUVzUTBGQlRYSkZMRU5CUVVGQkxFTkJRVTF4UlN4SlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFXWk1MRU5CUTB4b1NTeE5RVUZCUVN4RFFVRlJMRWxCUVVFc1EwRkRVbTFDTEVsQlFVRkJMRU5CUVUwc1NVRkJRU3hEUVVOT1F5eE5RVUZCUVN4RFFVRlJMRWxCUVVFc1EwRkRVa2dzU1VGQlFVRXNRMEZCVFN4SlFVRkJMRU5CUVVFc1EwRkJRU3hEUVcxQ1pHcERMSGRDUVVGQlFTeERRVUY1UWpaRExGTkJRVUZCTEVOQlFWVnRSaXgxUWtGQlFVRXNRMEZEYWtNc1ZVRkJRU3hEUVVORkxFOUJRVTkwU0N4SlFVRkJRU3hEUVVGTE1rSXNVMEZCUVVFc1EwRkJWVFJITEV0QlFVRkJMRU5CUVUwc1UwRkJWWHBJTEVOQlFVRkJMRU5CUVVGQkxFTkJRM0JETEU5QlFVOUJMRU5CUVVGQkxFTkJRVVZ0UWl4UlFVRkJRU3hEUVVGVGNVWXNkVUpCUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlUzaENhRWtzZDBKQlFVRkJMRU5CUVhsQ05rTXNVMEZCUVVFc1EwRkJWWFZHTEdkQ1FVRkJRU3hEUVVOcVF5eFRRVUZ0UkdoRUxFTkJRVUZCTEVOQlFWTnBSQ3hEUVVGQlFTeERRVUZCUVN4RFFVTXhSQ3hKUVVGTExFbEJRVWxvUkN4RFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlIwRXNRMEZCUVVFc1EwRkJTVE5GTEVsQlFVRkJMRU5CUVVzeVFpeFRRVUZCUVN4RFFVRlZiMFFzVFVGQlFVRXNRMEZCVVVvc1EwRkJRVUVzUlVGQlFVRXNRMEZCU3l4RFFVTTVReXhKUVVWSk5rUXNRMEZCUVVFc1EwRkdWWGhKTEVsQlFVRkJMRU5CUVVzeVFpeFRRVUZCUVN4RFFVRlZaMFFzUTBGQlFVRXNRMEZCUVVFc1EwRkZVREZETEZGQlFVRkJMRU5CUVZONVJpeG5Ra0ZCUVVFc1EwRkJhVUpvUkN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVU5vUkN4SFFVRkpPRVFzUTBGQlFVRXNRMEZEUml4UFFVRlBRU3hEUVVGQlFTeERRVWRZTEVkQlFVbGlMRU5CUVVGQkxFTkJRMFlzVDBGQlR5eEpRVUZCTEVOQlIxQXNUVUZCVFN4SlFVRkpla2dzUzBGQlFVRXNRMEZCVFN4SFFVRkJMRU5CUVUxM1JTeERRVUZCUVN4RFFVRlZMRFJDUVVGQkxFTkJRVUVzUTBGQlFTeERRWE5DZEVOd1JpeDNRa0ZCUVVFc1EwRkJlVUkyUXl4VFFVRkJRU3hEUVVGVk9FWXNiMEpCUVVGQkxFTkJRMnBETEZOQlFYVkVhRVVzUTBGQlFVRXNRMEZCUVVFc1EwRkRja1FzU1VGQlN5eEpRVUZKVlN4RFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlIwRXNRMEZCUVVFc1EwRkJTVE5GTEVsQlFVRkJMRU5CUVVzeVFpeFRRVUZCUVN4RFFVRlZiMFFzVFVGQlFVRXNRMEZCVVVvc1EwRkJRVUVzUlVGQlFVRXNRMEZCU3l4RFFVTTVReXhKUVVGSk1FUXNRMEZCUVVFc1EwRkJWWEpKTEVsQlFVRkJMRU5CUVVzeVFpeFRRVUZCUVN4RFFVRlZaMFFzUTBGQlFVRXNRMEZCUVVFc1EwRkpOMElzUjBGQlFTeERRVUY1UlN4RFFVRkJMRWRCUVhKRk1FUXNRMEZCUVVFc1EwRkJVWEJITEZGQlFVRkJMRU5CUVZOclF5eG5Ra0ZCUVVFc1EwRkJhVUo2Uml4SlFVRkJRU3hEUVVGTFpTeE5RVUZCUVN4RFFVRlBkMFVzUTBGQlFVRXNRMEZCVHl4UlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGNlJDeERRVWRCTEVsQlFVbDNSU3hEUVVGQlFTeERRVUZ2UWtvc1EwRkJRVUVzUTBGQlVYQkhMRkZCUVVGQkxFTkJRVk5uUnl4dlFrRkJRVUVzUTBGQmNVSm9SU3hEUVVGQlFTeERRVUZCUVN4RFFVTTVSQ3hIUVVGSmQwVXNRMEZCUVVFc1EwRlRSaXhOUVZKVkxFTkJRMUpvU0N4SlFVRkJRU3hEUVVGTlowZ3NRMEZCUVVFc1EwRkJhMEpvU0N4SlFVRkJRU3hGUVVOeVFqUkhMRU5CUVVGQkxFTkJRVkZ5Unl4bFFVRkJRU3hEUVVGblFtSXNZVUZCUVVFc1EwRkJaMElzUTBGQlFTeERRVUZCTEVOQlF6TkRUeXhOUVVGQlFTeERRVUZSSzBjc1EwRkJRVUVzUTBGQmEwSXZSeXhOUVVGQlFTeEZRVU4yUWpKSExFTkJRVUZCTEVOQlFWRnlSeXhsUVVGQlFTeERRVUZuUW1Jc1lVRkJRVUVzUjBGQmEwSnpTQ3hEUVVGQlFTeERRVUZyUW1oSUxFbEJRVUZCTEVOQlF6RkVORWNzUTBGQlFVRXNRMEZCVVhKSExHVkJRVUZCTEVOQlFXZENXaXhsUVVGQlFTeERRVUZyUWl4RFFVRkJMRU5CUXpGRExFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZOV0N4TlFVRlBMRU5CUTB4TExFbEJRVUZCTEVOQlFVMHNTVUZCUVN4RFFVTk9ReXhOUVVGQlFTeERRVUZSTEVsQlFVRXNRMEZCUVN4RFFVRkJMRU5CVTJSd1F5eDNRa0ZCUVVFc1EwRkJlVUkyUXl4VFFVRkJRU3hEUVVGVlR5eGpRVUZCUVN4RFFVTnFReXhUUVVGblJFY3NRMEZCUVVFc1EwRkJUVWtzUTBGQlFVRXNRMEZCUVVFc1EwRkRjRVJxUkN4SlFVRkJRU3hEUVVGTGIwTXNiVUpCUVVGQkxFTkJRWE5DTEVWQlFVRXNRMEZETTBKd1F5eEpRVUZCUVN4RFFVRkxNa01zYTBKQlFVRkJMRU5CUVhGQ0xFVkJRVUVzUTBGRE1VSXNTVUZCU3l4SlFVRkpaME1zUTBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVkQkxFTkJRVUZCTEVOQlFVa3pSU3hKUVVGQlFTeERRVUZMTWtJc1UwRkJRVUVzUTBGQlZXOUVMRTFCUVVGQkxFTkJRVkZLTEVOQlFVRkJMRVZCUVVGQkxFTkJSM3BETEVsQlJrRXNTVUZCU1RCRUxFTkJRVUZCTEVOQlFWVnlTU3hKUVVGQlFTeERRVUZMTWtJc1UwRkJRVUVzUTBGQlZXZEVMRU5CUVVGQkxFTkJRVUZCTEVOQlEzcENLMFFzUTBGQlFVRXNRMEZCYTBKTUxFTkJRVUZCTEVOQlFWRndSeXhSUVVGQlFTeERRVUZUTUVJc2EwSkJRVUZCTEVOQlF6bENkMFVzUTBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVkQkxFTkJRVUZCTEVOQlFVbFBMRU5CUVVGQkxFTkJRV2RDTTBRc1RVRkJRVUVzUTBGQlVXOUVMRU5CUVVGQkxFVkJRVUZCTEVOQlFVc3NRMEZETDBNc1NVRkJTWFJGTEVOQlFVRkJMRU5CUVZVMlJTeERRVUZCUVN4RFFVRm5RbEFzUTBGQlFVRXNRMEZCUVVFc1EwRkZNVUkzU0N4RFFVRkJRU3hEUVVGVEswZ3NRMEZCUVVFc1EwRkJVWEJITEZGQlFVRkJMRU5CUVZOMFFpeFJRVUZCUVN4RFFVRlRiVVFzUlVGQlFVRXNRMEZCUjBRc1EwRkJRVUVzUTBGQlVYWkVMRTFCUVVGQkxFTkJRVUZCTEVOQlEyeEVRU3hEUVVGQlFTeERRVUZUTlVJc1NVRkJRVUVzUTBGQlMzRkRMR2RDUVVGQlFTeERRVUZwUW5OSUxFTkJRVUZCTEVOQlFWRndSeXhSUVVGQlFTeERRVUZUY2tNc1ZVRkJRVUVzUTBGQldWVXNRMEZCUVVFc1EwRkJVVTRzU1VGQlFVRXNRMEZCUzJsQ0xHRkJRVUZCTEVOQlFVRkJMRU5CUTNwRmFrSXNTVUZCUVVFc1EwRkJTMWNzVVVGQlFVRXNRMEZCVTJkSkxFZEJRVUZCTEVOQlFVbHlTU3hEUVVGQlFTeERRVUZCUVN4RFFVTnNRa0VzUTBGQlFVRXNRMEZCVTA0c1NVRkJRVUVzUTBGQlMxY3NVVUZCUVVFc1EwRkJVMjFGTEU5QlFVRkJMRU5CUVZGNFJTeERRVUZCUVN4RFFVRkJRU3hEUVVVdlFpeEpRVUZKYVVJc1EwRkJRVUVzUTBGQlR5eEpRVUZCTEVOQlExQnpReXhEUVVGQlFTeERRVUZSZEVNc1NVRkJRVUVzUjBGRFZrRXNRMEZCUVVFc1EwRkJUemhITEVOQlFVRkJMRU5CUVZGd1J5eFJRVUZCUVN4RFFVRlRlRUlzVFVGQlFVRXNRMEZCVDNGRUxFVkJRVUZCTEVOQlFVZEVMRU5CUVVGQkxFTkJRVkYwUXl4SlFVRkJRU3hEUVVGQlFTeERRVU14UTNaQ0xFbEJRVUZCTEVOQlFVdFRMRTFCUVVGQkxFTkJRVTlyU1N4SFFVRkJRU3hEUVVGSmNFZ3NRMEZCUVVFc1EwRkJRVUVzUTBGRGFFSkJMRU5CUVVGQkxFTkJRVTkyUWl4SlFVRkJRU3hEUVVGTFV5eE5RVUZCUVN4RFFVRlBjVVVzVDBGQlFVRXNRMEZCVVhaRUxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJUemRDTEVsQlFVbHhTQ3hEUVVGQlFTeERRVUZyUWl4RFFVTndRblJKTEUxQlFVRkJMRU5CUVZGQkxFTkJRVUZCTEVOQlExSmhMR0ZCUVVGQkxFTkJRV1V3UXl4RFFVRkJRU3hEUVVGUk1VTXNZVUZCUVVFc1JVRkRjRUpyU0N4RFFVRkJRU3hEUVVGUmNrY3NaVUZCUVVFc1EwRkJaMEppTEdGQlFVRkJMRU5CUVdkQ0xFTkJRVUVzUTBGQlFTeERRVU16UTBNc1pVRkJRVUVzUTBGQmFVSjVReXhEUVVGQlFTeERRVUZSZWtNc1pVRkJRVUVzUlVGRGRFSnBTQ3hEUVVGQlFTeERRVUZSY2tjc1pVRkJRVUVzUTBGQlowSmlMR0ZCUVVGQkxFZEJRV3RDTUVNc1EwRkJRVUVzUTBGQlVURkRMR0ZCUVVGQkxFTkJRMnBFYTBnc1EwRkJRVUVzUTBGQlVYSkhMR1ZCUVVGQkxFTkJRV2RDV2l4bFFVRkJRU3hEUVVGclFpeERRVUZCTEVOQlF6RkRMRU5CUVVFc1EwRkJRU3hEUVVOS1F5eFpRVUZCUVN4RFFVRmpkME1zUTBGQlFVRXNRMEZCVVhoRExGbEJRVUZCTEVOQlEzUkNReXhqUVVGQlFTeERRVUZuUW5WRExFTkJRVUZCTEVOQlFWRjJReXhqUVVGQlFTeERRVU40UWtNc1NVRkJRVUVzUTBGQlRVRXNRMEZCUVVFc1EwRkJRVUVzUTBGSFVuWkNMRWxCUVVGQkxFTkJRVXR2UXl4dFFrRkJRVUVzUTBGQmIwSnJReXhKUVVGQlFTeERRVUZMYzBVc1EwRkJRVUVzUTBGQlFVRXNRMEZEWXl4UlFVRkJMRVZCUVVFc1QwRkJha05CTEVOQlFVRkJMRU5CUVdkQ2RrZ3NXVUZCUVVFc1JVRkRla0p5UWl4SlFVRkJRU3hEUVVGTE1rTXNhMEpCUVVGQkxFTkJRVzFDTWtJc1NVRkJRVUVzUTBGQlMzTkZMRU5CUVVGQkxFTkJRVUZCTEVOQlMyNUROMG9zVTBGQlFVRXNRMEZCVldsQ0xFbEJRVUZCTEVOQlFVdHZReXh0UWtGQlFVRXNRMEZCY1VJeFJDeEpRVUZCUVN4RFFVRkxPRWdzYlVOQlFVRkJMRU5CUVVGQkxFTkJRM3BEZWtnc1UwRkJRVUVzUTBGQlZXbENMRWxCUVVGQkxFTkJRVXN5UXl4clFrRkJRVUVzUTBGQmIwSnFSU3hKUVVGQlFTeERRVUZMTWtZc01FSkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSelZEUnl3clJFRkJiVU5zUml4M1FrRkJRVUVzUTBGQlFVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXMjUxYkd4ZGZRPT0iLCJ2YXIgYmFzZTY0VkxRPXJlcXVpcmUoMzY1KSx1dGlsPXJlcXVpcmUoMzczKSxBcnJheVNldD1yZXF1aXJlKDM2NCkuQXJyYXlTZXQsTWFwcGluZ0xpc3Q9cmVxdWlyZSgzNjgpLk1hcHBpbmdMaXN0O2Z1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihlKXtlfHwoZT17fSksdGhpcy5fZmlsZT11dGlsLmdldEFyZyhlLFwiZmlsZVwiLG51bGwpLHRoaXMuX3NvdXJjZVJvb3Q9dXRpbC5nZXRBcmcoZSxcInNvdXJjZVJvb3RcIixudWxsKSx0aGlzLl9za2lwVmFsaWRhdGlvbj11dGlsLmdldEFyZyhlLFwic2tpcFZhbGlkYXRpb25cIiwhMSksdGhpcy5fc291cmNlcz1uZXcgQXJyYXlTZXQsdGhpcy5fbmFtZXM9bmV3IEFycmF5U2V0LHRoaXMuX21hcHBpbmdzPW5ldyBNYXBwaW5nTGlzdCx0aGlzLl9zb3VyY2VzQ29udGVudHM9bnVsbH1Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92ZXJzaW9uPTMsU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXA9ZnVuY3Rpb24oZSl7dmFyIG49ZS5zb3VyY2VSb290LHI9bmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7ZmlsZTplLmZpbGUsc291cmNlUm9vdDpufSk7cmV0dXJuIGUuZWFjaE1hcHBpbmcoZnVuY3Rpb24oZSl7dmFyIHQ9e2dlbmVyYXRlZDp7bGluZTplLmdlbmVyYXRlZExpbmUsY29sdW1uOmUuZ2VuZXJhdGVkQ29sdW1ufX07bnVsbCE9ZS5zb3VyY2UmJih0LnNvdXJjZT1lLnNvdXJjZSxudWxsIT1uJiYodC5zb3VyY2U9dXRpbC5yZWxhdGl2ZShuLHQuc291cmNlKSksdC5vcmlnaW5hbD17bGluZTplLm9yaWdpbmFsTGluZSxjb2x1bW46ZS5vcmlnaW5hbENvbHVtbn0sbnVsbCE9ZS5uYW1lJiYodC5uYW1lPWUubmFtZSkpLHIuYWRkTWFwcGluZyh0KX0pLGUuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBvPXQ7bnVsbCE9PW4mJihvPXV0aWwucmVsYXRpdmUobix0KSksci5fc291cmNlcy5oYXMobyl8fHIuX3NvdXJjZXMuYWRkKG8pO3ZhciBpPWUuc291cmNlQ29udGVudEZvcih0KTtudWxsIT1pJiZyLnNldFNvdXJjZUNvbnRlbnQodCxpKX0pLHJ9LFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZz1mdW5jdGlvbihlKXt2YXIgbj11dGlsLmdldEFyZyhlLFwiZ2VuZXJhdGVkXCIpLHI9dXRpbC5nZXRBcmcoZSxcIm9yaWdpbmFsXCIsbnVsbCksdD11dGlsLmdldEFyZyhlLFwic291cmNlXCIsbnVsbCksbz11dGlsLmdldEFyZyhlLFwibmFtZVwiLG51bGwpO3RoaXMuX3NraXBWYWxpZGF0aW9ufHx0aGlzLl92YWxpZGF0ZU1hcHBpbmcobixyLHQsbyksbnVsbCE9dCYmKHQ9U3RyaW5nKHQpLHRoaXMuX3NvdXJjZXMuaGFzKHQpfHx0aGlzLl9zb3VyY2VzLmFkZCh0KSksbnVsbCE9byYmKG89U3RyaW5nKG8pLHRoaXMuX25hbWVzLmhhcyhvKXx8dGhpcy5fbmFtZXMuYWRkKG8pKSx0aGlzLl9tYXBwaW5ncy5hZGQoe2dlbmVyYXRlZExpbmU6bi5saW5lLGdlbmVyYXRlZENvbHVtbjpuLmNvbHVtbixvcmlnaW5hbExpbmU6bnVsbCE9ciYmci5saW5lLG9yaWdpbmFsQ29sdW1uOm51bGwhPXImJnIuY29sdW1uLHNvdXJjZTp0LG5hbWU6b30pfSxTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQ9ZnVuY3Rpb24oZSxuKXt2YXIgcj1lO251bGwhPXRoaXMuX3NvdXJjZVJvb3QmJihyPXV0aWwucmVsYXRpdmUodGhpcy5fc291cmNlUm9vdCxyKSksbnVsbCE9bj8odGhpcy5fc291cmNlc0NvbnRlbnRzfHwodGhpcy5fc291cmNlc0NvbnRlbnRzPU9iamVjdC5jcmVhdGUobnVsbCkpLHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHIpXT1uKTp0aGlzLl9zb3VyY2VzQ29udGVudHMmJihkZWxldGUgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcocildLDA9PT1PYmplY3Qua2V5cyh0aGlzLl9zb3VyY2VzQ29udGVudHMpLmxlbmd0aCYmKHRoaXMuX3NvdXJjZXNDb250ZW50cz1udWxsKSl9LFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXA9ZnVuY3Rpb24oZSxuLHIpe3ZhciB0PW47aWYobnVsbD09bil7aWYobnVsbD09ZS5maWxlKXRocm93IG5ldyBFcnJvcignU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCByZXF1aXJlcyBlaXRoZXIgYW4gZXhwbGljaXQgc291cmNlIGZpbGUsIG9yIHRoZSBzb3VyY2UgbWFwXFwncyBcImZpbGVcIiBwcm9wZXJ0eS4gQm90aCB3ZXJlIG9taXR0ZWQuJyk7dD1lLmZpbGV9dmFyIG89dGhpcy5fc291cmNlUm9vdDtudWxsIT1vJiYodD11dGlsLnJlbGF0aXZlKG8sdCkpO3ZhciBpPW5ldyBBcnJheVNldCxzPW5ldyBBcnJheVNldDt0aGlzLl9tYXBwaW5ncy51bnNvcnRlZEZvckVhY2goZnVuY3Rpb24obil7aWYobi5zb3VyY2U9PT10JiZudWxsIT1uLm9yaWdpbmFsTGluZSl7dmFyIGw9ZS5vcmlnaW5hbFBvc2l0aW9uRm9yKHtsaW5lOm4ub3JpZ2luYWxMaW5lLGNvbHVtbjpuLm9yaWdpbmFsQ29sdW1ufSk7bnVsbCE9bC5zb3VyY2UmJihuLnNvdXJjZT1sLnNvdXJjZSxudWxsIT1yJiYobi5zb3VyY2U9dXRpbC5qb2luKHIsbi5zb3VyY2UpKSxudWxsIT1vJiYobi5zb3VyY2U9dXRpbC5yZWxhdGl2ZShvLG4uc291cmNlKSksbi5vcmlnaW5hbExpbmU9bC5saW5lLG4ub3JpZ2luYWxDb2x1bW49bC5jb2x1bW4sbnVsbCE9bC5uYW1lJiYobi5uYW1lPWwubmFtZSkpfXZhciB1PW4uc291cmNlO251bGw9PXV8fGkuaGFzKHUpfHxpLmFkZCh1KTt2YXIgYT1uLm5hbWU7bnVsbD09YXx8cy5oYXMoYSl8fHMuYWRkKGEpfSx0aGlzKSx0aGlzLl9zb3VyY2VzPWksdGhpcy5fbmFtZXM9cyxlLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihuKXt2YXIgdD1lLnNvdXJjZUNvbnRlbnRGb3Iobik7bnVsbCE9dCYmKG51bGwhPXImJihuPXV0aWwuam9pbihyLG4pKSxudWxsIT1vJiYobj11dGlsLnJlbGF0aXZlKG8sbikpLHRoaXMuc2V0U291cmNlQ29udGVudChuLHQpKX0sdGhpcyl9LFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlTWFwcGluZz1mdW5jdGlvbihlLG4scix0KXtpZihuJiZcIm51bWJlclwiIT10eXBlb2Ygbi5saW5lJiZcIm51bWJlclwiIT10eXBlb2Ygbi5jb2x1bW4pdGhyb3cgbmV3IEVycm9yKFwib3JpZ2luYWwubGluZSBhbmQgb3JpZ2luYWwuY29sdW1uIGFyZSBub3QgbnVtYmVycyAtLSB5b3UgcHJvYmFibHkgbWVhbnQgdG8gb21pdCB0aGUgb3JpZ2luYWwgbWFwcGluZyBlbnRpcmVseSBhbmQgb25seSBtYXAgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi4gSWYgc28sIHBhc3MgbnVsbCBmb3IgdGhlIG9yaWdpbmFsIG1hcHBpbmcgaW5zdGVhZCBvZiBhbiBvYmplY3Qgd2l0aCBlbXB0eSBvciBudWxsIHZhbHVlcy5cIik7aWYoKCEoZSYmXCJsaW5lXCJpbiBlJiZcImNvbHVtblwiaW4gZSYmZS5saW5lPjAmJmUuY29sdW1uPj0wKXx8bnx8cnx8dCkmJiEoZSYmXCJsaW5lXCJpbiBlJiZcImNvbHVtblwiaW4gZSYmbiYmXCJsaW5lXCJpbiBuJiZcImNvbHVtblwiaW4gbiYmZS5saW5lPjAmJmUuY29sdW1uPj0wJiZuLmxpbmU+MCYmbi5jb2x1bW4+PTAmJnIpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbWFwcGluZzogXCIrSlNPTi5zdHJpbmdpZnkoe2dlbmVyYXRlZDplLHNvdXJjZTpyLG9yaWdpbmFsOm4sbmFtZTp0fSkpfSxTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncz1mdW5jdGlvbigpe2Zvcih2YXIgZSxuLHIsdCxvPTAsaT0xLHM9MCxsPTAsdT0wLGE9MCxjPVwiXCIscD10aGlzLl9tYXBwaW5ncy50b0FycmF5KCksZz0wLGg9cC5sZW5ndGg7ZzxoO2crKyl7aWYoZT1cIlwiLChuPXBbZ10pLmdlbmVyYXRlZExpbmUhPT1pKWZvcihvPTA7bi5nZW5lcmF0ZWRMaW5lIT09aTspZSs9XCI7XCIsaSsrO2Vsc2UgaWYoZz4wKXtpZighdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChuLHBbZy0xXSkpY29udGludWU7ZSs9XCIsXCJ9ZSs9YmFzZTY0VkxRLmVuY29kZShuLmdlbmVyYXRlZENvbHVtbi1vKSxvPW4uZ2VuZXJhdGVkQ29sdW1uLG51bGwhPW4uc291cmNlJiYodD10aGlzLl9zb3VyY2VzLmluZGV4T2Yobi5zb3VyY2UpLGUrPWJhc2U2NFZMUS5lbmNvZGUodC1hKSxhPXQsZSs9YmFzZTY0VkxRLmVuY29kZShuLm9yaWdpbmFsTGluZS0xLWwpLGw9bi5vcmlnaW5hbExpbmUtMSxlKz1iYXNlNjRWTFEuZW5jb2RlKG4ub3JpZ2luYWxDb2x1bW4tcykscz1uLm9yaWdpbmFsQ29sdW1uLG51bGwhPW4ubmFtZSYmKHI9dGhpcy5fbmFtZXMuaW5kZXhPZihuLm5hbWUpLGUrPWJhc2U2NFZMUS5lbmNvZGUoci11KSx1PXIpKSxjKz1lfXJldHVybiBjfSxTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50PWZ1bmN0aW9uKGUsbil7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe2lmKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpcmV0dXJuIG51bGw7bnVsbCE9biYmKGU9dXRpbC5yZWxhdGl2ZShuLGUpKTt2YXIgcj11dGlsLnRvU2V0U3RyaW5nKGUpO3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLHIpP3RoaXMuX3NvdXJjZXNDb250ZW50c1tyXTpudWxsfSx0aGlzKX0sU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgZT17dmVyc2lvbjp0aGlzLl92ZXJzaW9uLHNvdXJjZXM6dGhpcy5fc291cmNlcy50b0FycmF5KCksbmFtZXM6dGhpcy5fbmFtZXMudG9BcnJheSgpLG1hcHBpbmdzOnRoaXMuX3NlcmlhbGl6ZU1hcHBpbmdzKCl9O3JldHVybiBudWxsIT10aGlzLl9maWxlJiYoZS5maWxlPXRoaXMuX2ZpbGUpLG51bGwhPXRoaXMuX3NvdXJjZVJvb3QmJihlLnNvdXJjZVJvb3Q9dGhpcy5fc291cmNlUm9vdCksdGhpcy5fc291cmNlc0NvbnRlbnRzJiYoZS5zb3VyY2VzQ29udGVudD10aGlzLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGUuc291cmNlcyxlLnNvdXJjZVJvb3QpKSxlfSxTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpfSxleHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvcj1Tb3VyY2VNYXBHZW5lcmF0b3I7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnZkWEpqWlMxdFlYQXRaMlZ1WlhKaGRHOXlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltSmhjMlUyTkZaTVVTSXNJbkpsY1hWcGNtVWlMQ0oxZEdsc0lpd2lRWEp5WVhsVFpYUWlMQ0pOWVhCd2FXNW5UR2x6ZENJc0lsTnZkWEpqWlUxaGNFZGxibVZ5WVhSdmNpSXNJbUZCY21keklpd2lkR2hwY3lJc0lsOW1hV3hsSWl3aVoyVjBRWEpuSWl3aVgzTnZkWEpqWlZKdmIzUWlMQ0pmYzJ0cGNGWmhiR2xrWVhScGIyNGlMQ0pmYzI5MWNtTmxjeUlzSWw5dVlXMWxjeUlzSWw5dFlYQndhVzVuY3lJc0lsOXpiM1Z5WTJWelEyOXVkR1Z1ZEhNaUxDSndjbTkwYjNSNWNHVWlMQ0pmZG1WeWMybHZiaUlzSW1aeWIyMVRiM1Z5WTJWTllYQWlMQ0poVTI5MWNtTmxUV0Z3UTI5dWMzVnRaWElpTENKemIzVnlZMlZTYjI5MElpd2laMlZ1WlhKaGRHOXlJaXdpWm1sc1pTSXNJbVZoWTJoTllYQndhVzVuSWl3aWJXRndjR2x1WnlJc0ltNWxkMDFoY0hCcGJtY2lMQ0puWlc1bGNtRjBaV1FpTENKc2FXNWxJaXdpWjJWdVpYSmhkR1ZrVEdsdVpTSXNJbU52YkhWdGJpSXNJbWRsYm1WeVlYUmxaRU52YkhWdGJpSXNJbk52ZFhKalpTSXNJbkpsYkdGMGFYWmxJaXdpYjNKcFoybHVZV3dpTENKdmNtbG5hVzVoYkV4cGJtVWlMQ0p2Y21sbmFXNWhiRU52YkhWdGJpSXNJbTVoYldVaUxDSmhaR1JOWVhCd2FXNW5JaXdpYzI5MWNtTmxjeUlzSW1admNrVmhZMmdpTENKemIzVnlZMlZHYVd4bElpd2ljMjkxY21ObFVtVnNZWFJwZG1VaUxDSm9ZWE1pTENKaFpHUWlMQ0pqYjI1MFpXNTBJaXdpYzI5MWNtTmxRMjl1ZEdWdWRFWnZjaUlzSW5ObGRGTnZkWEpqWlVOdmJuUmxiblFpTENKZmRtRnNhV1JoZEdWTllYQndhVzVuSWl3aVUzUnlhVzVuSWl3aVlWTnZkWEpqWlVacGJHVWlMQ0poVTI5MWNtTmxRMjl1ZEdWdWRDSXNJazlpYW1WamRDSXNJbU55WldGMFpTSXNJblJ2VTJWMFUzUnlhVzVuSWl3aWEyVjVjeUlzSW14bGJtZDBhQ0lzSW1Gd2NHeDVVMjkxY21ObFRXRndJaXdpWVZOdmRYSmpaVTFoY0ZCaGRHZ2lMQ0pGY25KdmNpSXNJbTVsZDFOdmRYSmpaWE1pTENKdVpYZE9ZVzFsY3lJc0luVnVjMjl5ZEdWa1JtOXlSV0ZqYUNJc0ltOXlhV2RwYm1Gc1VHOXphWFJwYjI1R2IzSWlMQ0pxYjJsdUlpd2lZVWRsYm1WeVlYUmxaQ0lzSW1GUGNtbG5hVzVoYkNJc0ltRlRiM1Z5WTJVaUxDSmhUbUZ0WlNJc0lrcFRUMDRpTENKemRISnBibWRwWm5raUxDSmZjMlZ5YVdGc2FYcGxUV0Z3Y0dsdVozTWlMQ0p1WlhoMElpd2libUZ0WlVsa2VDSXNJbk52ZFhKalpVbGtlQ0lzSW5CeVpYWnBiM1Z6UjJWdVpYSmhkR1ZrUTI5c2RXMXVJaXdpY0hKbGRtbHZkWE5IWlc1bGNtRjBaV1JNYVc1bElpd2ljSEpsZG1sdmRYTlBjbWxuYVc1aGJFTnZiSFZ0YmlJc0luQnlaWFpwYjNWelQzSnBaMmx1WVd4TWFXNWxJaXdpY0hKbGRtbHZkWE5PWVcxbElpd2ljSEpsZG1sdmRYTlRiM1Z5WTJVaUxDSnlaWE4xYkhRaUxDSnRZWEJ3YVc1bmN5SXNJblJ2UVhKeVlYa2lMQ0pwSWl3aWJHVnVJaXdpWTI5dGNHRnlaVUo1UjJWdVpYSmhkR1ZrVUc5emFYUnBiMjV6U1c1bWJHRjBaV1FpTENKbGJtTnZaR1VpTENKcGJtUmxlRTltSWl3aVgyZGxibVZ5WVhSbFUyOTFjbU5sYzBOdmJuUmxiblFpTENKaFUyOTFjbU5sY3lJc0ltRlRiM1Z5WTJWU2IyOTBJaXdpYldGd0lpd2lhMlY1SWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKallXeHNJaXdpZEc5S1UwOU9JaXdpZG1WeWMybHZiaUlzSW01aGJXVnpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlMQ0owYjFOMGNtbHVaeUlzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVTlCTEVsQlFVbEJMRk5CUVVGQkxFTkJRVmxETEU5QlFVRkJMRU5CUVZFc1kwRkJRU3hEUVVGQkxFTkJRM0JDUXl4SlFVRkJRU3hEUVVGUFJDeFBRVUZCUVN4RFFVRlJMRkZCUVVFc1EwRkJRU3hEUVVObVJTeFJRVUZCUVN4RFFVRlhSaXhQUVVGQlFTeERRVUZSTEdGQlFVRXNRMEZCUVN4RFFVRmxSU3hSUVVGQlFTeERRVU5zUTBNc1YwRkJRVUVzUTBGQlkwZ3NUMEZCUVVFc1EwRkJVU3huUWtGQlFTeERRVUZCTEVOQlFXdENSeXhYUVVGQlFTeERRVlUxUXl4VFFVRlRReXhyUWtGQlFVRXNRMEZCYlVKRExFTkJRVUZCTEVOQlFVRkJMRU5CUTNKQ1FTeERRVUZCUVN4SFFVTklRU3hEUVVGQlFTeERRVUZSTEVWQlFVRXNRMEZCUVN4RFFVVldReXhKUVVGQlFTeERRVUZMUXl4TFFVRkJRU3hEUVVGUlRpeEpRVUZCUVN4RFFVRkxUeXhOUVVGQlFTeERRVUZQU0N4RFFVRkJRU3hEUVVGUExFMUJRVUVzUTBGQlVTeEpRVUZCTEVOQlFVRXNRMEZEZUVORExFbEJRVUZCTEVOQlFVdEhMRmRCUVVGQkxFTkJRV05TTEVsQlFVRkJMRU5CUVV0UExFMUJRVUZCTEVOQlFVOUlMRU5CUVVGQkxFTkJRVThzV1VGQlFTeERRVUZqTEVsQlFVRXNRMEZCUVN4RFFVTndSRU1zU1VGQlFVRXNRMEZCUzBrc1pVRkJRVUVzUTBGQmEwSlVMRWxCUVVGQkxFTkJRVXRQTEUxQlFVRkJMRU5CUVU5SUxFTkJRVUZCTEVOQlFVOHNaMEpCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVU14UTBNc1NVRkJRVUVzUTBGQlMwc3NVVUZCUVVFc1EwRkJWeXhKUVVGSlZDeFJRVUZCUVN4RFFVTndRa2tzU1VGQlFVRXNRMEZCUzAwc1RVRkJRVUVzUTBGQlV5eEpRVUZKVml4UlFVRkJRU3hEUVVOc1Fra3NTVUZCUVVFc1EwRkJTMDhzVTBGQlFVRXNRMEZCV1N4SlFVRkpWaXhYUVVGQlFTeERRVU55UWtjc1NVRkJRVUVzUTBGQlMxRXNaMEpCUVVGQkxFTkJRVzFDTEVsQlFVRXNRMEZITVVKV0xHdENRVUZCUVN4RFFVRnRRbGNzVTBGQlFVRXNRMEZCVlVNc1VVRkJRVUVzUTBGQlZ5eERRVUZCTEVOQlQzaERXaXhyUWtGQlFVRXNRMEZCYlVKaExHRkJRVUZCTEVOQlEycENMRk5CUVRCRFF5eERRVUZCUVN4RFFVRkJRU3hEUVVONFF5eEpRVUZKUXl4RFFVRkJRU3hEUVVGaFJDeERRVUZCUVN4RFFVRnRRa01zVlVGQlFVRXNRMEZEYUVORExFTkJRVUZCTEVOQlFWa3NTVUZCU1doQ0xHdENRVUZCUVN4RFFVRnRRaXhEUVVOeVEybENMRWxCUVVGQkxFTkJRVTFJTEVOQlFVRkJMRU5CUVcxQ1J5eEpRVUZCUVN4RFFVTjZRa1lzVlVGQlFVRXNRMEZCV1VFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRXlRMlFzVDBGNlEwRkVMRU5CUVVGQkxFTkJRVzFDU1N4WFFVRkJRU3hEUVVGWkxGTkJRVlZETEVOQlFVRkJMRU5CUVVGQkxFTkJRM1pETEVsQlFVbERMRU5CUVVGQkxFTkJRV0VzUTBGRFprTXNVMEZCUVVFc1EwRkJWeXhEUVVOVVF5eEpRVUZCUVN4RFFVRk5TQ3hEUVVGQlFTeERRVUZSU1N4aFFVRkJRU3hEUVVOa1F5eE5RVUZCUVN4RFFVRlJUQ3hEUVVGQlFTeERRVUZSVFN4bFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVbEZMRWxCUVVFc1JVRkJiRUpPTEVOQlFVRkJMRU5CUVZGUExFMUJRVUZCTEVkQlExWk9MRU5CUVVGQkxFTkJRVmROTEUxQlFVRkJMRU5CUVZOUUxFTkJRVUZCTEVOQlFWRlBMRTFCUVVGQkxFTkJRMVlzU1VGQlFTeEZRVUZrV0N4RFFVRkJRU3hIUVVOR1N5eERRVUZCUVN4RFFVRlhUU3hOUVVGQlFTeERRVUZUTjBJc1NVRkJRVUVzUTBGQlN6aENMRkZCUVVGQkxFTkJRVk5hTEVOQlFVRkJMRU5CUVZsTExFTkJRVUZCTEVOQlFWZE5MRTFCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUnpORVRpeERRVUZCUVN4RFFVRlhVU3hSUVVGQlFTeERRVUZYTEVOQlEzQkNUaXhKUVVGQlFTeERRVUZOU0N4RFFVRkJRU3hEUVVGUlZTeFpRVUZCUVN4RFFVTmtUQ3hOUVVGQlFTeERRVUZSVEN4RFFVRkJRU3hEUVVGUlZ5eGpRVUZCUVN4RFFVRkJRU3hEUVVkRkxFbEJRVUVzUlVGQmFFSllMRU5CUVVGQkxFTkJRVkZaTEVsQlFVRkJMRWRCUTFaWUxFTkJRVUZCTEVOQlFWZFhMRWxCUVVGQkxFTkJRVTlhTEVOQlFVRkJMRU5CUVZGWkxFbEJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJTVGxDWml4RFFVRkJRU3hEUVVGVlowSXNWVUZCUVVFc1EwRkJWMW9zUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZGZGtKT0xFTkJRVUZCTEVOQlFXMUNiVUlzVDBGQlFVRXNRMEZCVVVNc1QwRkJRVUVzUTBGQlVTeFRRVUZWUXl4RFFVRkJRU3hEUVVGQlFTeERRVU16UXl4SlFVRkpReXhEUVVGQlFTeERRVUZwUWtRc1EwRkJRVUVzUTBGRFJpeEpRVUZCTEVkQlFXWndRaXhEUVVGQlFTeEhRVU5HY1VJc1EwRkJRVUVzUTBGQmFVSjJReXhKUVVGQlFTeERRVUZMT0VJc1VVRkJRVUVzUTBGQlUxb3NRMEZCUVVFc1EwRkJXVzlDTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIzaERia0lzUTBGQlFVRXNRMEZCVlZRc1VVRkJRVUVzUTBGQlV6aENMRWRCUVVGQkxFTkJRVWxFTEVOQlFVRkJMRU5CUVVGQkxFVkJRekZDY0VJc1EwRkJRVUVzUTBGQlZWUXNVVUZCUVVFc1EwRkJVeXRDTEVkQlFVRkJMRU5CUVVsR0xFTkJRVUZCTEVOQlFVRkJMRU5CUjNwQ0xFbEJRVWxITEVOQlFVRkJMRU5CUVZWNlFpeERRVUZCUVN4RFFVRnRRakJDTEdkQ1FVRkJRU3hEUVVGcFFrd3NRMEZCUVVFc1EwRkJRVUVzUTBGRGJrTXNTVUZCUVN4RlFVRllTU3hEUVVGQlFTeEZRVU5HZGtJc1EwRkJRVUVzUTBGQlZYbENMR2RDUVVGQlFTeERRVUZwUWs0c1EwRkJRVUVzUTBGQldVa3NRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkhjRU4yUWl4RFFVRkJRU3hEUVVGQlFTeERRV0ZZYUVJc2EwSkJRVUZCTEVOQlFXMUNWeXhUUVVGQlFTeERRVUZWY1VJc1ZVRkJRVUVzUTBGRE0wSXNVMEZCZFVNdlFpeERRVUZCUVN4RFFVRkJRU3hEUVVOeVF5eEpRVUZKYjBJc1EwRkJRVUVzUTBGQldYaENMRWxCUVVGQkxFTkJRVXRQTEUxQlFVRkJMRU5CUVU5SUxFTkJRVUZCTEVOQlFVOHNWMEZCUVN4RFFVRkJMRU5CUXk5Q01rSXNRMEZCUVVFc1EwRkJWeTlDTEVsQlFVRkJMRU5CUVV0UExFMUJRVUZCTEVOQlFVOUlMRU5CUVVGQkxFTkJRVThzVlVGQlFTeERRVUZaTEVsQlFVRXNRMEZCUVN4RFFVTXhRM2xDTEVOQlFVRkJMRU5CUVZNM1FpeEpRVUZCUVN4RFFVRkxUeXhOUVVGQlFTeERRVUZQU0N4RFFVRkJRU3hEUVVGUExGRkJRVUVzUTBGQlZTeEpRVUZCTEVOQlFVRXNRMEZEZEVNNFFpeERRVUZCUVN4RFFVRlBiRU1zU1VGQlFVRXNRMEZCUzA4c1RVRkJRVUVzUTBGQlQwZ3NRMEZCUVVFc1EwRkJUeXhOUVVGQkxFTkJRVkVzU1VGQlFTeERRVUZCTEVOQlJXcERReXhKUVVGQlFTeERRVUZMU1N4bFFVRkJRU3hGUVVOU1NpeEpRVUZCUVN4RFFVRkxkME1zWjBKQlFVRkJMRU5CUVdsQ2NrSXNRMEZCUVVFc1EwRkJWMDhzUTBGQlFVRXNRMEZCVlVZc1EwRkJRVUVzUTBGQlVVc3NRMEZCUVVFc1EwRkJRVUVzUTBGSGRrTXNTVUZCUVN4RlFVRldUQ3hEUVVGQlFTeEhRVU5HUVN4RFFVRkJRU3hEUVVGVGFVSXNUVUZCUVVFc1EwRkJUMnBDTEVOQlFVRkJMRU5CUVVGQkxFTkJRMWg0UWl4SlFVRkJRU3hEUVVGTFN5eFJRVUZCUVN4RFFVRlRPRUlzUjBGQlFVRXNRMEZCU1Znc1EwRkJRVUVzUTBGQlFVRXNSVUZEY2tKNFFpeEpRVUZCUVN4RFFVRkxTeXhSUVVGQlFTeERRVUZUSzBJc1IwRkJRVUVzUTBGQlNWb3NRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZKVml4SlFVRkJMRVZCUVZKTExFTkJRVUZCTEVkQlEwWkJMRU5CUVVGQkxFTkJRVTlaTEUxQlFVRkJMRU5CUVU5YUxFTkJRVUZCTEVOQlFVRkJMRU5CUTFRM1FpeEpRVUZCUVN4RFFVRkxUU3hOUVVGQlFTeERRVUZQTmtJc1IwRkJRVUVzUTBGQlNVNHNRMEZCUVVFc1EwRkJRVUVzUlVGRGJrSTNRaXhKUVVGQlFTeERRVUZMVFN4TlFVRkJRU3hEUVVGUE9FSXNSMEZCUVVFc1EwRkJTVkFzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGSmNFSTNRaXhKUVVGQlFTeERRVUZMVHl4VFFVRkJRU3hEUVVGVk5rSXNSMEZCUVVFc1EwRkJTU3hEUVVOcVFtWXNZVUZCUVVFc1EwRkJaVVlzUTBGQlFVRXNRMEZCVlVNc1NVRkJRVUVzUTBGRGVrSkhMR1ZCUVVGQkxFTkJRV2xDU2l4RFFVRkJRU3hEUVVGVlJ5eE5RVUZCUVN4RFFVTXpRa3NzV1VGQlFVRXNRMEZCTUVJc1NVRkJRU3hGUVVGYVJDeERRVUZCUVN4RlFVRnZRa0VzUTBGQlFVRXNRMEZCVTA0c1NVRkJRVUVzUTBGRE0wTlJMR05CUVVGQkxFTkJRVFJDTEVsQlFVRXNSVUZCV2tZc1EwRkJRVUVzUlVGQmIwSkJMRU5CUVVGQkxFTkJRVk5LTEUxQlFVRkJMRU5CUXpkRFJTeE5RVUZCUVN4RFFVRlJRU3hEUVVGQlFTeERRVU5TU3l4SlFVRkJRU3hEUVVGTlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVOWFMMElzYTBKQlFVRkJMRU5CUVcxQ1Z5eFRRVUZCUVN4RFFVRlZPRUlzWjBKQlFVRkJMRU5CUXpOQ0xGTkJRVFpEUnl4RFFVRkJRU3hEUVVGaFF5eERRVUZCUVN4RFFVRkJRU3hEUVVONFJDeEpRVUZKYmtJc1EwRkJRVUVzUTBGQlUydENMRU5CUVVGQkxFTkJRMWNzU1VGQlFTeEZRVUZ3UWpGRExFbEJRVUZCTEVOQlFVdEhMRmRCUVVGQkxFZEJRMUJ4UWl4RFFVRkJRU3hEUVVGVE4wSXNTVUZCUVVFc1EwRkJTemhDTEZGQlFVRkJMRU5CUVZONlFpeEpRVUZCUVN4RFFVRkxSeXhYUVVGQlFTeERRVUZoY1VJc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkhja0lzU1VGQlFTeEZRVUZzUW0xQ0xFTkJRVUZCTEVWQlIwY3pReXhKUVVGQlFTeERRVUZMVVN4blFrRkJRVUVzUjBGRFVsSXNTVUZCUVVFc1EwRkJTMUVzWjBKQlFVRkJMRU5CUVcxQ2IwTXNUVUZCUVVFc1EwRkJUME1zVFVGQlFVRXNRMEZCVHl4SlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVWNFF6ZERMRWxCUVVGQkxFTkJRVXRSTEdkQ1FVRkJRU3hEUVVGcFFtSXNTVUZCUVVFc1EwRkJTMjFFTEZkQlFVRkJMRU5CUVZsMFFpeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZYYlVJc1EwRkJRVUVzUlVGRGVrTXpReXhKUVVGQlFTeERRVUZMVVN4blFrRkJRVUVzUjBGQlFVRXNUMEZIVUZJc1NVRkJRVUVzUTBGQlMxRXNaMEpCUVVGQkxFTkJRV2xDWWl4SlFVRkJRU3hEUVVGTGJVUXNWMEZCUVVFc1EwRkJXWFJDTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlEwa3NRMEZCUVN4SFFVRTVRMjlDTEUxQlFVRkJMRU5CUVU5SExFbEJRVUZCTEVOQlFVc3ZReXhKUVVGQlFTeERRVUZMVVN4blFrRkJRVUVzUTBGQlFVRXNRMEZCYTBKM1F5eE5RVUZCUVN4SFFVTnlRMmhFTEVsQlFVRkJMRU5CUVV0UkxHZENRVUZCUVN4RFFVRnRRaXhKUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVOQmNVSm9RMVlzYTBKQlFVRkJMRU5CUVcxQ1Z5eFRRVUZCUVN4RFFVRlZkME1zWTBGQlFVRXNRMEZETTBJc1UwRkJNa055UXl4RFFVRkJRU3hEUVVGdlFqaENMRU5CUVVGQkxFTkJRV0ZSTEVOQlFVRkJMRU5CUVVGQkxFTkJRekZGTEVsQlFVbHFRaXhEUVVGQlFTeERRVUZoVXl4RFFVRkJRU3hEUVVWcVFpeEhRVUZ0UWl4SlFVRkJMRVZCUVdaQkxFTkJRVUZCTEVOQlFYRkNMRU5CUTNaQ0xFZEJRU3RDTEVsQlFVRXNSVUZCTTBJNVFpeERRVUZCUVN4RFFVRnRRa2NzU1VGQlFVRXNRMEZEY2tJc1RVRkJUU3hKUVVGSmIwTXNTMEZCUVVFc1EwRkRVaXdyU1VGQlFTeERRVUZCTEVOQlNVcHNRaXhEUVVGQlFTeERRVUZoY2tJc1EwRkJRVUVzUTBGQmJVSkhMRWxCUVVGQkxFTkJSV3hETEVsQlFVbEdMRU5CUVVGQkxFTkJRV0ZpTEVsQlFVRkJMRU5CUVV0SExGZEJRVUZCTEVOQlJVb3NTVUZCUVN4RlFVRmtWU3hEUVVGQlFTeEhRVU5HYjBJc1EwRkJRVUVzUTBGQllYUkRMRWxCUVVGQkxFTkJRVXM0UWl4UlFVRkJRU3hEUVVGVFdpeERRVUZCUVN4RFFVRlpiMElzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGSmVrTXNTVUZCU1cxQ0xFTkJRVUZCTEVOQlFXRXNTVUZCU1hoRUxGRkJRVUZCTEVOQlEycENlVVFzUTBGQlFVRXNRMEZCVnl4SlFVRkpla1FzVVVGQlFVRXNRMEZIYmtKSkxFbEJRVUZCTEVOQlFVdFBMRk5CUVVGQkxFTkJRVlVyUXl4bFFVRkJRU3hEUVVGblFpeFRRVUZWY2tNc1EwRkJRVUVzUTBGQlFVRXNRMEZEZGtNc1IwRkJTVUVzUTBGQlFVRXNRMEZCVVU4c1RVRkJRVUVzUjBGQlYxTXNRMEZCUVVFc1JVRkJjME1zU1VGQlFTeEZRVUY0UW1oQ0xFTkJRVUZCTEVOQlFWRlZMRmxCUVVGQkxFTkJRWE5DTEVOQlJXcEZMRWxCUVVsRUxFTkJRVUZCTEVOQlFWZGtMRU5CUVVGQkxFTkJRVzFDTWtNc2JVSkJRVUZCTEVOQlFXOUNMRU5CUTNCRWJrTXNTVUZCUVVFc1EwRkJUVWdzUTBGQlFVRXNRMEZCVVZVc1dVRkJRVUVzUTBGRFpFd3NUVUZCUVVFc1EwRkJVVXdzUTBGQlFVRXNRMEZCVVZjc1kwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkZTeXhKUVVGQkxFVkJRVzVDUml4RFFVRkJRU3hEUVVGVFJpeE5RVUZCUVN4SFFVVllVQ3hEUVVGQlFTeERRVUZSVHl4TlFVRkJRU3hEUVVGVFJTeERRVUZCUVN4RFFVRlRSaXhOUVVGQlFTeERRVU5LTEVsQlFVRXNSVUZCYkVJd1FpeERRVUZCUVN4SFFVTkdha01zUTBGQlFVRXNRMEZCVVU4c1RVRkJRVUVzUTBGQlV6ZENMRWxCUVVGQkxFTkJRVXMyUkN4SlFVRkJRU3hEUVVGTFRpeERRVUZCUVN4RFFVRm5RbXBETEVOQlFVRkJMRU5CUVZGUExFMUJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSVzVETEVsQlFVRXNSVUZCWkZnc1EwRkJRVUVzUjBGRFJra3NRMEZCUVVFc1EwRkJVVThzVFVGQlFVRXNRMEZCVXpkQ0xFbEJRVUZCTEVOQlFVczRRaXhSUVVGQlFTeERRVUZUV2l4RFFVRkJRU3hEUVVGWlNTeERRVUZCUVN4RFFVRlJUeXhOUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVWeVJGQXNRMEZCUVVFc1EwRkJVVlVzV1VGQlFVRXNRMEZCWlVRc1EwRkJRVUVzUTBGQlUwNHNTVUZCUVVFc1EwRkRhRU5JTEVOQlFVRkJMRU5CUVZGWExHTkJRVUZCTEVOQlFXbENSaXhEUVVGQlFTeERRVUZUU2l4TlFVRkJRU3hEUVVOaUxFbEJRVUVzUlVGQmFrSkpMRU5CUVVGQkxFTkJRVk5ITEVsQlFVRkJMRWRCUTFoYUxFTkJRVUZCTEVOQlFWRlpMRWxCUVVGQkxFTkJRVTlJTEVOQlFVRkJMRU5CUVZOSExFbEJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJTemxDTEVsQlFVbE1MRU5CUVVGQkxFTkJRVk5RTEVOQlFVRkJMRU5CUVZGUExFMUJRVUZCTEVOQlExQXNTVUZCUVN4RlFVRldRU3hEUVVGQlFTeEZRVUZ0UWpSQ0xFTkJRVUZCTEVOQlFWZHFRaXhIUVVGQlFTeERRVUZKV0N4RFFVRkJRU3hEUVVGQlFTeEZRVU53UXpSQ0xFTkJRVUZCTEVOQlFWZG9RaXhIUVVGQlFTeERRVUZKV2l4RFFVRkJRU3hEUVVGQlFTeERRVWRxUWl4SlFVRkpTeXhEUVVGQlFTeERRVUZQV2l4RFFVRkJRU3hEUVVGUldTeEpRVUZCUVN4RFFVTlFMRWxCUVVFc1JVRkJVa0VzUTBGQlFVRXNSVUZCYVVKM1FpeERRVUZCUVN4RFFVRlRiRUlzUjBGQlFVRXNRMEZCU1U0c1EwRkJRVUVzUTBGQlFVRXNSVUZEYUVOM1FpeERRVUZCUVN4RFFVRlRha0lzUjBGQlFVRXNRMEZCU1ZBc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkhaRGRDTEVsQlFVRkJMRU5CUVVGQkxFTkJRMGhCTEVsQlFVRkJMRU5CUVV0TExGRkJRVUZCTEVOQlFWY3JReXhEUVVGQlFTeERRVU5vUW5CRUxFbEJRVUZCTEVOQlFVdE5MRTFCUVVGQkxFTkJRVk1yUXl4RFFVRkJRU3hEUVVka2VrTXNRMEZCUVVFc1EwRkJiVUp0UWl4UFFVRkJRU3hEUVVGUlF5eFBRVUZCUVN4RFFVRlJMRk5CUVZWRExFTkJRVUZCTEVOQlFVRkJMRU5CUXpORExFbEJRVWxKTEVOQlFVRkJMRU5CUVZWNlFpeERRVUZCUVN4RFFVRnRRakJDTEdkQ1FVRkJRU3hEUVVGcFFrd3NRMEZCUVVFc1EwRkJRVUVzUTBGRGJrTXNTVUZCUVN4RlFVRllTU3hEUVVGQlFTeEhRVU52UWl4SlFVRkJMRVZCUVd4Q1lTeERRVUZCUVN4SFFVTkdha0lzUTBGQlFVRXNRMEZCWVhSRExFbEJRVUZCTEVOQlFVczJSQ3hKUVVGQlFTeERRVUZMVGl4RFFVRkJRU3hEUVVGblFtcENMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUlhaQ0xFbEJRVUVzUlVGQlpIQkNMRU5CUVVGQkxFZEJRMFp2UWl4RFFVRkJRU3hEUVVGaGRFTXNTVUZCUVVFc1EwRkJTemhDTEZGQlFVRkJMRU5CUVZOYUxFTkJRVUZCTEVOQlFWbHZRaXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVWNlEycERMRWxCUVVGQkxFTkJRVXQxUXl4blFrRkJRVUVzUTBGQmFVSk9MRU5CUVVGQkxFTkJRVmxKTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUlc1RGNrTXNTVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZqVUVZc2EwSkJRVUZCTEVOQlFXMUNWeXhUUVVGQlFTeERRVUZWSzBJc1owSkJRVUZCTEVOQlF6TkNMRk5CUVRSRGFVSXNRMEZCUVVFc1EwRkJXVU1zUTBGQlFVRXNRMEZCVjBNc1EwRkJRVUVzUTBGRGRrSkRMRU5CUVVGQkxFTkJRVUZCTEVOQlN6RkRMRWRCUVVsR0xFTkJRVUZCTEVWQlFYVkRMRkZCUVVFc1JVRkJRU3hQUVVGdVFrRXNRMEZCUVVFc1EwRkJWWFJETEVsQlFVRkJMRVZCUVdsRUxGRkJRVUVzUlVGQlFTeFBRVUZ5UW5ORExFTkJRVUZCTEVOQlFWVndReXhOUVVGQlFTeERRVU53UlN4TlFVRk5MRWxCUVVrMlFpeExRVUZCUVN4RFFVTk9MRGhQUVVGQkxFTkJRVUVzUTBGTlVpeEhRVUZCTEVOQlFVRXNSVUZCU1Uwc1EwRkJRVUVzUlVGQll5eE5RVUZCTEVkQlFWVkJMRU5CUVVGQkxFVkJRV01zVVVGQlFTeEhRVUZaUVN4RFFVRkJRU3hGUVVNdlEwRXNRMEZCUVVFc1EwRkJWM0pETEVsQlFVRkJMRU5CUVU4c1EwRkJRU3hGUVVGTGNVTXNRMEZCUVVFc1EwRkJWMjVETEUxQlFVRkJMRVZCUVZVc1EwRkJRU3hEUVVGQkxFVkJRek5EYjBNc1EwRkJRVUVzUlVGQlkwTXNRMEZCUVVFc1JVRkJXVU1zUTBGQlFVRXNSMEZCUVVFc1JVRkpla0pJTEVOQlFVRkJMRVZCUVdNc1RVRkJRU3hIUVVGVlFTeERRVUZCUVN4RlFVRmpMRkZCUVVFc1IwRkJXVUVzUTBGQlFVRXNSVUZETDBORExFTkJRVUZCTEVWQlFXRXNUVUZCUVN4SFFVRlZRU3hEUVVGQlFTeEZRVUZoTEZGQlFVRXNSMEZCV1VFc1EwRkJRVUVzUlVGRGFFUkVMRU5CUVVGQkxFTkJRVmR5UXl4SlFVRkJRU3hEUVVGUExFTkJRVUVzUlVGQlMzRkRMRU5CUVVGQkxFTkJRVmR1UXl4TlFVRkJRU3hGUVVGVkxFTkJRVUVzUlVGRE5VTnZReXhEUVVGQlFTeERRVUZWZEVNc1NVRkJRVUVzUTBGQlR5eERRVUZCTEVWQlFVdHpReXhEUVVGQlFTeERRVUZWY0VNc1RVRkJRVUVzUlVGQlZTeERRVUZCTEVWQlF6RkRjVU1zUTBGQlFVRXNRMEZCUVVFc1EwRkxWaXhOUVVGTkxFbEJRVWxTTEV0QlFVRkJMRU5CUVUwc2JVSkJRVUVzUTBGQmMwSlZMRWxCUVVGQkxFTkJRVXRETEZOQlFVRkJMRU5CUVZVc1EwRkRia1F6UXl4VFFVRkJRU3hEUVVGWGMwTXNRMEZCUVVFc1EwRkRXR3BETEUxQlFVRkJMRU5CUVZGdFF5eERRVUZCUVN4RFFVTlNha01zVVVGQlFVRXNRMEZCVldkRExFTkJRVUZCTEVOQlExWTNRaXhKUVVGQlFTeERRVUZOSzBJc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZUWkRsRUxHdENRVUZCUVN4RFFVRnRRbGNzVTBGQlFVRXNRMEZCVlhORUxHdENRVUZCUVN4RFFVTXpRaXhWUVVGQkxFTkJZMFVzU1VGaVFTeEpRVTlKUXl4RFFVRkJRU3hEUVVOQkwwTXNRMEZCUVVFc1EwRkRRV2RFTEVOQlFVRkJMRU5CUTBGRExFTkJRVUZCTEVOQlZrRkRMRU5CUVVGQkxFTkJRVEJDTEVOQlFVRXNRMEZETVVKRExFTkJRVUZCTEVOQlFYZENMRU5CUVVFc1EwRkRlRUpETEVOQlFVRkJMRU5CUVhsQ0xFTkJRVUVzUTBGRGVrSkRMRU5CUVVGQkxFTkJRWFZDTEVOQlFVRXNRMEZEZGtKRExFTkJRVUZCTEVOQlFXVXNRMEZCUVN4RFFVTm1ReXhEUVVGQlFTeERRVUZwUWl4RFFVRkJMRU5CUTJwQ1F5eERRVUZCUVN4RFFVRlRMRVZCUVVFc1EwRk5WRU1zUTBGQlFVRXNRMEZCVnpGRkxFbEJRVUZCTEVOQlFVdFBMRk5CUVVGQkxFTkJRVlZ2UlN4UFFVRkJRU3hGUVVGQlFTeERRVU55UWtNc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVZERMRU5CUVVGQkxFTkJRVTFJTEVOQlFVRkJMRU5CUVZNeFFpeE5RVUZCUVN4RFFVRlJORUlzUTBGQlFVRXNRMEZCU1VNc1EwRkJRVUVzUTBGQlMwUXNRMEZCUVVFc1JVRkJRVUVzUTBGQlN5eERRVWx1UkN4SFFVWkJXaXhEUVVGQlFTeERRVUZQTEVWQlFVRXNRMEZCUVN4RFFVUlFMME1zUTBGQlFVRXNRMEZCVlhsRUxFTkJRVUZCTEVOQlFWTkZMRU5CUVVGQkxFTkJRVUZCTEVWQlIxQjJSQ3hoUVVGQlFTeEhRVUZyUWl0RExFTkJRVUZCTEVOQlJUVkNMRWxCUkVGRUxFTkJRVUZCTEVOQlFUQkNMRU5CUVVFc1EwRkRia0pzUkN4RFFVRkJRU3hEUVVGUlNTeGhRVUZCUVN4SFFVRnJRaXRETEVOQlFVRkJMRVZCUXk5Q1NpeERRVUZCUVN4RlFVRlJMRWRCUVVFc1EwRkRVa2tzUTBGQlFVRXNSVUZCUVVFc1EwRkJRVUVzUzBGSlJpeEhRVUZKVVN4RFFVRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlJ5eERRVU5VTEVkQlFVRXNRMEZCUzJwR0xFbEJRVUZCTEVOQlFVdHRSaXh0UTBGQlFVRXNRMEZCYjBNM1JDeERRVUZCUVN4RFFVRlRlVVFzUTBGQlFVRXNRMEZCVTBVc1EwRkJRVUVzUTBGQlNTeERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVTnNSU3hUUVVWR1dpeERRVUZCUVN4RlFVRlJMRWRCUVVFc1EwRkpXa0VzUTBGQlFVRXNSVUZCVVhaRkxGTkJRVUZCTEVOQlFWVnpSaXhOUVVGQlFTeERRVUZQT1VRc1EwRkJRVUVzUTBGQlVVMHNaVUZCUVVFc1EwRkRTalJETEVOQlFVRkJMRU5CUVVGQkxFTkJRemRDUVN4RFFVRkJRU3hEUVVFd1FteEVMRU5CUVVGQkxFTkJRVkZOTEdWQlFVRkJMRU5CUlZvc1NVRkJRU3hGUVVGc1FrNHNRMEZCUVVFc1EwRkJVVThzVFVGQlFVRXNSMEZEVmpCRExFTkJRVUZCTEVOQlFWbHNSU3hKUVVGQlFTeERRVUZMU3l4UlFVRkJRU3hEUVVGVE1rVXNUMEZCUVVFc1EwRkJVUzlFTEVOQlFVRkJMRU5CUVZGUExFMUJRVUZCTEVOQlFVRkJMRU5CUXpGRGQwTXNRMEZCUVVFc1JVRkJVWFpGTEZOQlFVRkJMRU5CUVZWelJpeE5RVUZCUVN4RFFVRlBZaXhEUVVGQlFTeERRVUZaVFN4RFFVRkJRU3hEUVVGQlFTeERRVU55UTBFc1EwRkJRVUVzUTBGQmFVSk9MRU5CUVVGQkxFTkJSMnBDUml4RFFVRkJRU3hGUVVGUmRrVXNVMEZCUVVFc1EwRkJWWE5HTEUxQlFVRkJMRU5CUVU4NVJDeERRVUZCUVN4RFFVRlJWU3haUVVGQlFTeERRVUZsTEVOQlFVRXNRMEZEYmtJeVF5eERRVUZCUVN4RFFVRkJRU3hEUVVNM1FrRXNRMEZCUVVFc1EwRkJkVUp5UkN4RFFVRkJRU3hEUVVGUlZTeFpRVUZCUVN4RFFVRmxMRU5CUVVFc1EwRkZPVU54UXl4RFFVRkJRU3hGUVVGUmRrVXNVMEZCUVVFc1EwRkJWWE5HTEUxQlFVRkJMRU5CUVU4NVJDeERRVUZCUVN4RFFVRlJWeXhqUVVGQlFTeERRVU5LZVVNc1EwRkJRVUVzUTBGQlFVRXNRMEZETjBKQkxFTkJRVUZCTEVOQlFYbENjRVFzUTBGQlFVRXNRMEZCVVZjc1kwRkJRVUVzUTBGRllpeEpRVUZCTEVWQlFXaENXQ3hEUVVGQlFTeERRVUZSV1N4SlFVRkJRU3hIUVVOV2IwTXNRMEZCUVVFc1EwRkJWV3BGTEVsQlFVRkJMRU5CUVV0TkxFMUJRVUZCTEVOQlFVOHdSU3hQUVVGQlFTeERRVUZSTDBRc1EwRkJRVUVzUTBGQlVWa3NTVUZCUVVFc1EwRkJRVUVzUTBGRGRFTnRReXhEUVVGQlFTeEZRVUZSZGtVc1UwRkJRVUVzUTBGQlZYTkdMRTFCUVVGQkxFTkJRVTlrTEVOQlFVRkJMRU5CUVZWTkxFTkJRVUZCTEVOQlFVRkJMRU5CUTI1RFFTeERRVUZCUVN4RFFVRmxUaXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVsdVFsRXNRMEZCUVVFc1JVRkJWVlFzUTBGQlFVRXNRMEZIV2l4UFFVRlBVeXhEUVVGQlFTeERRVUZCUVN4RFFVZFlNMFVzYTBKQlFVRkJMRU5CUVcxQ1Z5eFRRVUZCUVN4RFFVRlZkMFVzZFVKQlFVRkJMRU5CUXpOQ0xGTkJRVzFFUXl4RFFVRkJRU3hEUVVGVlF5eERRVUZCUVN4RFFVRkJRU3hEUVVNelJDeFBRVUZQUkN4RFFVRkJRU3hEUVVGVFJTeEhRVUZCUVN4RFFVRkpMRk5CUVZVMVJDeERRVUZCUVN4RFFVRkJRU3hEUVVNMVFpeEhRVUZCTEVOQlFVdDRRaXhKUVVGQlFTeERRVUZMVVN4blFrRkJRVUVzUTBGRFVpeFBRVUZQTEVsQlFVRXNRMEZGVlN4SlFVRkJMRVZCUVdZeVJTeERRVUZCUVN4SFFVTkdNMFFzUTBGQlFVRXNRMEZCVXpkQ0xFbEJRVUZCTEVOQlFVczRRaXhSUVVGQlFTeERRVUZUTUVRc1EwRkJRVUVzUTBGQllUTkVMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUlhSRExFbEJRVWsyUkN4RFFVRkJRU3hEUVVGTk1VWXNTVUZCUVVFc1EwRkJTMjFFTEZkQlFVRkJMRU5CUVZsMFFpeERRVUZCUVN4RFFVRkJRU3hEUVVNelFpeFBRVUZQYjBJc1RVRkJRVUVzUTBGQlQyNURMRk5CUVVGQkxFTkJRVlUyUlN4alFVRkJRU3hEUVVGbFF5eEpRVUZCUVN4RFFVRkxka1lzU1VGQlFVRXNRMEZCUzFFc1owSkJRVUZCTEVOQlFXdENOa1VzUTBGQlFVRXNRMEZCUVVFc1EwRkRMMFJ5Uml4SlFVRkJRU3hEUVVGTFVTeG5Ra0ZCUVVFc1EwRkJhVUkyUlN4RFFVRkJRU3hEUVVGQlFTeERRVU4wUWl4SlFVRkJMRU5CUVVFc1EwRkRTSEpHTEVsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlRWQkdMR3RDUVVGQlFTeERRVUZ0UWxjc1UwRkJRVUVzUTBGQlZTdEZMRTFCUVVGQkxFTkJRek5DTEZWQlFVRXNRMEZEUlN4SlFVRkpTaXhEUVVGQlFTeERRVUZOTEVOQlExSkxMRTlCUVVGQkxFTkJRVk42Uml4SlFVRkJRU3hEUVVGTFZTeFJRVUZCUVN4RFFVTmtjVUlzVDBGQlFVRXNRMEZCVXk5Q0xFbEJRVUZCTEVOQlFVdExMRkZCUVVGQkxFTkJRVk56UlN4UFFVRkJRU3hGUVVGQlFTeERRVU4yUW1Vc1MwRkJRVUVzUTBGQlR6RkdMRWxCUVVGQkxFTkJRVXROTEUxQlFVRkJMRU5CUVU5eFJTeFBRVUZCUVN4RlFVRkJRU3hEUVVOdVFrUXNVVUZCUVVFc1EwRkJWVEZGTEVsQlFVRkJMRU5CUVVzclJDeHJRa0ZCUVVFc1JVRkJRVUVzUTBGQlFVRXNRMEZaYWtJc1QwRldhMElzU1VGQlFTeEZRVUZrTDBRc1NVRkJRVUVzUTBGQlMwTXNTMEZCUVVFc1IwRkRVRzFHTEVOQlFVRkJMRU5CUVVseVJTeEpRVUZCUVN4RFFVRlBaaXhKUVVGQlFTeERRVUZMUXl4TFFVRkJRU3hEUVVGQlFTeERRVVZOTEVsQlFVRXNSVUZCY0VKRUxFbEJRVUZCTEVOQlFVdEhMRmRCUVVGQkxFZEJRMUJwUml4RFFVRkJRU3hEUVVGSmRrVXNWVUZCUVVFc1EwRkJZV0lzU1VGQlFVRXNRMEZCUzBjc1YwRkJRVUVzUTBGQlFVRXNRMEZGY0VKSUxFbEJRVUZCTEVOQlFVdFJMR2RDUVVGQlFTeEhRVU5RTkVVc1EwRkJRVUVzUTBGQlNVOHNZMEZCUVVFc1EwRkJhVUl6Uml4SlFVRkJRU3hEUVVGTGFVWXNkVUpCUVVGQkxFTkJRWGRDUnl4RFFVRkJRU3hEUVVGSmNrUXNUMEZCUVVFc1EwRkJVM0ZFTEVOQlFVRkJMRU5CUVVsMlJTeFZRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWM1UkhWRkxFTkJRVUZCTEVOQlFVRkJMRU5CVFZoMFJpeHJRa0ZCUVVFc1EwRkJiVUpYTEZOQlFVRkJMRU5CUVZWdFJpeFJRVUZCUVN4RFFVTXpRaXhWUVVGQkxFTkJRMFVzVDBGQlR5OUNMRWxCUVVGQkxFTkJRVXRETEZOQlFVRkJMRU5CUVZVNVJDeEpRVUZCUVN4RFFVRkxkMFlzVFVGQlFVRXNSVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZITDBKTExFOUJRVUZCTEVOQlFWRXZSaXhyUWtGQlFVRXNRMEZCY1VKQkxHdENRVUZCUVN4RFFVRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMTkiLCJ2YXIgU291cmNlTWFwR2VuZXJhdG9yPXJlcXVpcmUoMzcxKS5Tb3VyY2VNYXBHZW5lcmF0b3IsdXRpbD1yZXF1aXJlKDM3MyksUkVHRVhfTkVXTElORT0vKFxccj9cXG4pLyxpc1NvdXJjZU5vZGU9XCIkJCRpc1NvdXJjZU5vZGUkJCRcIjtmdW5jdGlvbiBTb3VyY2VOb2RlKGUsbixvLHIsdCl7dGhpcy5jaGlsZHJlbj1bXSx0aGlzLnNvdXJjZUNvbnRlbnRzPXt9LHRoaXMubGluZT1udWxsPT1lP251bGw6ZSx0aGlzLmNvbHVtbj1udWxsPT1uP251bGw6bix0aGlzLnNvdXJjZT1udWxsPT1vP251bGw6byx0aGlzLm5hbWU9bnVsbD09dD9udWxsOnQsdGhpc1tpc1NvdXJjZU5vZGVdPSEwLG51bGwhPXImJnRoaXMuYWRkKHIpfVNvdXJjZU5vZGUuZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXA9ZnVuY3Rpb24oZSxuLG8pe3ZhciByPW5ldyBTb3VyY2VOb2RlLHQ9ZS5zcGxpdChSRUdFWF9ORVdMSU5FKSxpPTAsdT1mdW5jdGlvbigpe3JldHVybiBlKCkrKGUoKXx8XCJcIik7ZnVuY3Rpb24gZSgpe3JldHVybiBpPHQubGVuZ3RoP3RbaSsrXTp2b2lkIDB9fSxsPTEsYz0wLHM9bnVsbDtyZXR1cm4gbi5lYWNoTWFwcGluZyhmdW5jdGlvbihlKXtpZihudWxsIT09cyl7aWYoIShsPGUuZ2VuZXJhdGVkTGluZSkpe3ZhciBuPShvPXRbaV18fFwiXCIpLnN1YnN0cigwLGUuZ2VuZXJhdGVkQ29sdW1uLWMpO3JldHVybiB0W2ldPW8uc3Vic3RyKGUuZ2VuZXJhdGVkQ29sdW1uLWMpLGM9ZS5nZW5lcmF0ZWRDb2x1bW4sYShzLG4pLHZvaWQocz1lKX1hKHMsdSgpKSxsKyssYz0wfWZvcig7bDxlLmdlbmVyYXRlZExpbmU7KXIuYWRkKHUoKSksbCsrO2lmKGM8ZS5nZW5lcmF0ZWRDb2x1bW4pe3ZhciBvPXRbaV18fFwiXCI7ci5hZGQoby5zdWJzdHIoMCxlLmdlbmVyYXRlZENvbHVtbikpLHRbaV09by5zdWJzdHIoZS5nZW5lcmF0ZWRDb2x1bW4pLGM9ZS5nZW5lcmF0ZWRDb2x1bW59cz1lfSx0aGlzKSxpPHQubGVuZ3RoJiYocyYmYShzLHUoKSksci5hZGQodC5zcGxpY2UoaSkuam9pbihcIlwiKSkpLG4uc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uc291cmNlQ29udGVudEZvcihlKTtudWxsIT10JiYobnVsbCE9byYmKGU9dXRpbC5qb2luKG8sZSkpLHIuc2V0U291cmNlQ29udGVudChlLHQpKX0pLHI7ZnVuY3Rpb24gYShlLG4pe2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lLnNvdXJjZSlyLmFkZChuKTtlbHNle3ZhciB0PW8/dXRpbC5qb2luKG8sZS5zb3VyY2UpOmUuc291cmNlO3IuYWRkKG5ldyBTb3VyY2VOb2RlKGUub3JpZ2luYWxMaW5lLGUub3JpZ2luYWxDb2x1bW4sdCxuLGUubmFtZSkpfX19LFNvdXJjZU5vZGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKWUuZm9yRWFjaChmdW5jdGlvbihlKXt0aGlzLmFkZChlKX0sdGhpcyk7ZWxzZXtpZighZVtpc1NvdXJjZU5vZGVdJiZcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIrZSk7ZSYmdGhpcy5jaGlsZHJlbi5wdXNoKGUpfXJldHVybiB0aGlzfSxTb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kPWZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBuPWUubGVuZ3RoLTE7bj49MDtuLS0pdGhpcy5wcmVwZW5kKGVbbl0pO2Vsc2V7aWYoIWVbaXNTb3VyY2VOb2RlXSYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiK2UpO3RoaXMuY2hpbGRyZW4udW5zaGlmdChlKX1yZXR1cm4gdGhpc30sU291cmNlTm9kZS5wcm90b3R5cGUud2Fsaz1mdW5jdGlvbihlKXtmb3IodmFyIG4sbz0wLHI9dGhpcy5jaGlsZHJlbi5sZW5ndGg7bzxyO28rKykobj10aGlzLmNoaWxkcmVuW29dKVtpc1NvdXJjZU5vZGVdP24ud2FsayhlKTpcIlwiIT09biYmZShuLHtzb3VyY2U6dGhpcy5zb3VyY2UsbGluZTp0aGlzLmxpbmUsY29sdW1uOnRoaXMuY29sdW1uLG5hbWU6dGhpcy5uYW1lfSl9LFNvdXJjZU5vZGUucHJvdG90eXBlLmpvaW49ZnVuY3Rpb24oZSl7dmFyIG4sbyxyPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2lmKHI+MCl7Zm9yKG49W10sbz0wO288ci0xO28rKyluLnB1c2godGhpcy5jaGlsZHJlbltvXSksbi5wdXNoKGUpO24ucHVzaCh0aGlzLmNoaWxkcmVuW29dKSx0aGlzLmNoaWxkcmVuPW59cmV0dXJuIHRoaXN9LFNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodD1mdW5jdGlvbihlLG4pe3ZhciBvPXRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGgtMV07cmV0dXJuIG9baXNTb3VyY2VOb2RlXT9vLnJlcGxhY2VSaWdodChlLG4pOlwic3RyaW5nXCI9PXR5cGVvZiBvP3RoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGgtMV09by5yZXBsYWNlKGUsbik6dGhpcy5jaGlsZHJlbi5wdXNoKFwiXCIucmVwbGFjZShlLG4pKSx0aGlzfSxTb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50PWZ1bmN0aW9uKGUsbil7dGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGUpXT1ufSxTb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrU291cmNlQ29udGVudHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTAsbz10aGlzLmNoaWxkcmVuLmxlbmd0aDtuPG87bisrKXRoaXMuY2hpbGRyZW5bbl1baXNTb3VyY2VOb2RlXSYmdGhpcy5jaGlsZHJlbltuXS53YWxrU291cmNlQ29udGVudHMoZSk7dmFyIHI9T2JqZWN0LmtleXModGhpcy5zb3VyY2VDb250ZW50cyk7Zm9yKG49MCxvPXIubGVuZ3RoO248bztuKyspZSh1dGlsLmZyb21TZXRTdHJpbmcocltuXSksdGhpcy5zb3VyY2VDb250ZW50c1tyW25dXSl9LFNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9XCJcIjtyZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uKG4pe2UrPW59KSxlfSxTb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZ1dpdGhTb3VyY2VNYXA9ZnVuY3Rpb24oZSl7dmFyIG49e2NvZGU6XCJcIixsaW5lOjEsY29sdW1uOjB9LG89bmV3IFNvdXJjZU1hcEdlbmVyYXRvcihlKSxyPSExLHQ9bnVsbCxpPW51bGwsdT1udWxsLGw9bnVsbDtyZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uKGUsYyl7bi5jb2RlKz1lLG51bGwhPT1jLnNvdXJjZSYmbnVsbCE9PWMubGluZSYmbnVsbCE9PWMuY29sdW1uPyh0PT09Yy5zb3VyY2UmJmk9PT1jLmxpbmUmJnU9PT1jLmNvbHVtbiYmbD09PWMubmFtZXx8by5hZGRNYXBwaW5nKHtzb3VyY2U6Yy5zb3VyY2Usb3JpZ2luYWw6e2xpbmU6Yy5saW5lLGNvbHVtbjpjLmNvbHVtbn0sZ2VuZXJhdGVkOntsaW5lOm4ubGluZSxjb2x1bW46bi5jb2x1bW59LG5hbWU6Yy5uYW1lfSksdD1jLnNvdXJjZSxpPWMubGluZSx1PWMuY29sdW1uLGw9Yy5uYW1lLHI9ITApOnImJihvLmFkZE1hcHBpbmcoe2dlbmVyYXRlZDp7bGluZTpuLmxpbmUsY29sdW1uOm4uY29sdW1ufX0pLHQ9bnVsbCxyPSExKTtmb3IodmFyIHM9MCxhPWUubGVuZ3RoO3M8YTtzKyspMTA9PT1lLmNoYXJDb2RlQXQocyk/KG4ubGluZSsrLG4uY29sdW1uPTAscysxPT09YT8odD1udWxsLHI9ITEpOnImJm8uYWRkTWFwcGluZyh7c291cmNlOmMuc291cmNlLG9yaWdpbmFsOntsaW5lOmMubGluZSxjb2x1bW46Yy5jb2x1bW59LGdlbmVyYXRlZDp7bGluZTpuLmxpbmUsY29sdW1uOm4uY29sdW1ufSxuYW1lOmMubmFtZX0pKTpuLmNvbHVtbisrfSksdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24oZSxuKXtvLnNldFNvdXJjZUNvbnRlbnQoZSxuKX0pLHtjb2RlOm4uY29kZSxtYXA6b319LGV4cG9ydHMuU291cmNlTm9kZT1Tb3VyY2VOb2RlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk52ZFhKalpTMXViMlJsTG1weklsMHNJbTVoYldWeklqcGJJbE52ZFhKalpVMWhjRWRsYm1WeVlYUnZjaUlzSW5KbGNYVnBjbVVpTENKMWRHbHNJaXdpVWtWSFJWaGZUa1ZYVEVsT1JTSXNJbWx6VTI5MWNtTmxUbTlrWlNJc0lsTnZkWEpqWlU1dlpHVWlMQ0poVEdsdVpTSXNJbUZEYjJ4MWJXNGlMQ0poVTI5MWNtTmxJaXdpWVVOb2RXNXJjeUlzSW1GT1lXMWxJaXdpZEdocGN5SXNJbU5vYVd4a2NtVnVJaXdpYzI5MWNtTmxRMjl1ZEdWdWRITWlMQ0pzYVc1bElpd2lZMjlzZFcxdUlpd2ljMjkxY21ObElpd2libUZ0WlNJc0ltRmtaQ0lzSW1aeWIyMVRkSEpwYm1kWGFYUm9VMjkxY21ObFRXRndJaXdpWVVkbGJtVnlZWFJsWkVOdlpHVWlMQ0poVTI5MWNtTmxUV0Z3UTI5dWMzVnRaWElpTENKaFVtVnNZWFJwZG1WUVlYUm9JaXdpYm05a1pTSXNJbkpsYldGcGJtbHVaMHhwYm1Weklpd2ljM0JzYVhRaUxDSnlaVzFoYVc1cGJtZE1hVzVsYzBsdVpHVjRJaXdpYzJocFpuUk9aWGgwVEdsdVpTSXNJbWRsZEU1bGVIUk1hVzVsSWl3aWJHVnVaM1JvSWl3aWJHRnpkRWRsYm1WeVlYUmxaRXhwYm1VaUxDSnNZWE4wUjJWdVpYSmhkR1ZrUTI5c2RXMXVJaXdpYkdGemRFMWhjSEJwYm1jaUxDSmxZV05vVFdGd2NHbHVaeUlzSW0xaGNIQnBibWNpTENKblpXNWxjbUYwWldSTWFXNWxJaXdpWTI5a1pTSXNJbTVsZUhSTWFXNWxJaXdpYzNWaWMzUnlJaXdpWjJWdVpYSmhkR1ZrUTI5c2RXMXVJaXdpWVdSa1RXRndjR2x1WjFkcGRHaERiMlJsSWl3aWMzQnNhV05sSWl3aWFtOXBiaUlzSW5OdmRYSmpaWE1pTENKbWIzSkZZV05vSWl3aWMyOTFjbU5sUm1sc1pTSXNJbU52Ym5SbGJuUWlMQ0p6YjNWeVkyVkRiMjUwWlc1MFJtOXlJaXdpYzJWMFUyOTFjbU5sUTI5dWRHVnVkQ0lzSW05eWFXZHBibUZzVEdsdVpTSXNJbTl5YVdkcGJtRnNRMjlzZFcxdUlpd2ljSEp2ZEc5MGVYQmxJaXdpWVVOb2RXNXJJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpWTJoMWJtc2lMQ0pVZVhCbFJYSnliM0lpTENKd2RYTm9JaXdpY0hKbGNHVnVaQ0lzSW1raUxDSjFibk5vYVdaMElpd2lkMkZzYXlJc0ltRkdiaUlzSW14bGJpSXNJbUZUWlhBaUxDSnVaWGREYUdsc1pISmxiaUlzSW5KbGNHeGhZMlZTYVdkb2RDSXNJbUZRWVhSMFpYSnVJaXdpWVZKbGNHeGhZMlZ0Wlc1MElpd2liR0Z6ZEVOb2FXeGtJaXdpY21Wd2JHRmpaU0lzSW1GVGIzVnlZMlZHYVd4bElpd2lZVk52ZFhKalpVTnZiblJsYm5RaUxDSjBiMU5sZEZOMGNtbHVaeUlzSW5kaGJHdFRiM1Z5WTJWRGIyNTBaVzUwY3lJc0lrOWlhbVZqZENJc0ltdGxlWE1pTENKbWNtOXRVMlYwVTNSeWFXNW5JaXdpZEc5VGRISnBibWNpTENKemRISWlMQ0owYjFOMGNtbHVaMWRwZEdoVGIzVnlZMlZOWVhBaUxDSmhRWEpuY3lJc0ltZGxibVZ5WVhSbFpDSXNJbTFoY0NJc0luTnZkWEpqWlUxaGNIQnBibWRCWTNScGRtVWlMQ0pzWVhOMFQzSnBaMmx1WVd4VGIzVnlZMlVpTENKc1lYTjBUM0pwWjJsdVlXeE1hVzVsSWl3aWJHRnpkRTl5YVdkcGJtRnNRMjlzZFcxdUlpd2liR0Z6ZEU5eWFXZHBibUZzVG1GdFpTSXNJbTl5YVdkcGJtRnNJaXdpWVdSa1RXRndjR2x1WnlJc0ltbGtlQ0lzSW1Ob1lYSkRiMlJsUVhRaUxDSnpiM1Z5WTJWRGIyNTBaVzUwSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVDBFc1NVRkJTVUVzYTBKQlFVRkJMRU5CUVhGQ1F5eFBRVUZCUVN4RFFVRlJMSGRDUVVGQkxFTkJRVUVzUTBGQk1FSkVMR3RDUVVGQlFTeERRVU4yUkVVc1NVRkJRVUVzUTBGQlQwUXNUMEZCUVVFc1EwRkJVU3hSUVVGQkxFTkJRVUVzUTBGSlprVXNZVUZCUVVFc1EwRkJaMElzVTBGQlFTeERRVkZvUWtNc1dVRkJRVUVzUTBGQlpTeHZRa0ZCUVN4RFFXTnVRaXhUUVVGVFF5eFZRVUZCUVN4RFFVRlhReXhEUVVGQlFTeERRVUZQUXl4RFFVRkJRU3hEUVVGVFF5eERRVUZCUVN4RFFVRlRReXhEUVVGQlFTeERRVUZUUXl4RFFVRkJRU3hEUVVGQlFTeERRVU53UkVNc1NVRkJRVUVzUTBGQlMwTXNVVUZCUVVFc1EwRkJWeXhGUVVGQkxFTkJRMmhDUkN4SlFVRkJRU3hEUVVGTFJTeGpRVUZCUVN4RFFVRnBRaXhGUVVGQkxFTkJRM1JDUml4SlFVRkJRU3hEUVVGTFJ5eEpRVUZCUVN4RFFVRm5RaXhKUVVGQkxFVkJRVlJTTEVOQlFVRkJMRU5CUVdkQ0xFbEJRVUVzUTBGQlQwRXNRMEZCUVVFc1EwRkRia05MTEVsQlFVRkJMRU5CUVV0SkxFMUJRVUZCTEVOQlFXOUNMRWxCUVVFc1JVRkJXRklzUTBGQlFVRXNRMEZCYTBJc1NVRkJRU3hEUVVGUFFTeERRVUZCUVN4RFFVTjJRMGtzU1VGQlFVRXNRMEZCUzBzc1RVRkJRVUVzUTBGQmIwSXNTVUZCUVN4RlFVRllVaXhEUVVGQlFTeERRVUZyUWl4SlFVRkJMRU5CUVU5QkxFTkJRVUZCTEVOQlEzWkRSeXhKUVVGQlFTeERRVUZMVFN4SlFVRkJRU3hEUVVGblFpeEpRVUZCTEVWQlFWUlFMRU5CUVVGQkxFTkJRV2RDTEVsQlFVRXNRMEZCVDBFc1EwRkJRVUVzUTBGRGJrTkRMRWxCUVVGQkxFTkJRVXRRTEZsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRMVVzU1VGQlFTeEZRVUZZU3l4RFFVRkJRU3hGUVVGcFFrVXNTVUZCUVVFc1EwRkJTMDhzUjBGQlFVRXNRMEZCU1ZRc1EwRkJRVUVzUTBGQlFVRXNRMEZYYUVOS0xGVkJRVUZCTEVOQlFWZGpMSFZDUVVGQlFTeERRVU5VTEZOQlFUUkRReXhEUVVGQlFTeERRVUZuUWtNc1EwRkJRVUVzUTBGQmIwSkRMRU5CUVVGQkxFTkJRVUZCTEVOQlJ6bEZMRWxCUVVsRExFTkJRVUZCTEVOQlFVOHNTVUZCU1d4Q0xGVkJRVUZCTEVOQlRWaHRRaXhEUVVGQlFTeERRVUZwUWtvc1EwRkJRVUVzUTBGQlpVc3NTMEZCUVVFc1EwRkJUWFJDTEdGQlFVRkJMRU5CUVVGQkxFTkJRM1JEZFVJc1EwRkJRVUVzUTBGQmMwSXNRMEZCUVN4RFFVTjBRa01zUTBGQlFVRXNRMEZCWjBJc1ZVRkJRU3hEUVVsc1FpeFBRVWh0UWtNc1EwRkJRVUVzUlVGQlFVRXNSVUZGVEVFc1EwRkJRVUVzUlVGQlFVRXNSVUZCYVVJc1JVRkJRU3hEUVVGQkxFTkJSeTlDTEZOQlFWTkJMRU5CUVVGQkxFVkJRVUZCTEVOQlExQXNUMEZCVDBZc1EwRkJRVUVzUTBGQmMwSkdMRU5CUVVGQkxFTkJRV1ZMTEUxQlFVRkJMRU5CUTNoRFRDeERRVUZCUVN4RFFVRmxSU3hEUVVGQlFTeEZRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeExRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVdHVRa2tzUTBGQlFVRXNRMEZCYjBJc1EwRkJRU3hEUVVGSFF5eERRVUZCUVN4RFFVRnpRaXhEUVVGQkxFTkJTemREUXl4RFFVRkJRU3hEUVVGakxFbEJRVUVzUTBGblJXeENMRTlCT1VSQldDeERRVUZCUVN4RFFVRnRRbGtzVjBGQlFVRXNRMEZCV1N4VFFVRlZReXhEUVVGQlFTeERRVUZCUVN4RFFVTjJReXhIUVVGdlFpeEpRVUZCTEVkQlFXaENSaXhEUVVGQlFTeERRVUZ6UWl4RFFVZDRRaXhIUVVGQkxFVkJRVWxHTEVOQlFVRkJMRU5CUVc5Q1NTeERRVUZCUVN4RFFVRlJReXhoUVVGQlFTeERRVUZCUVN4RFFVMTZRaXhEUVVsTUxFbEJRMGxETEVOQlFVRkJMRU5CUVVGQkxFTkJSRUZETEVOQlFVRkJMRU5CUVZkaUxFTkJRVUZCTEVOQlFXVkZMRU5CUVVGQkxFTkJRVUZCTEVWQlFYZENMRVZCUVVFc1JVRkRiRU5aTEUxQlFVRkJMRU5CUVU4c1EwRkJRU3hEUVVGSFNpeERRVUZCUVN4RFFVRlJTeXhsUVVGQlFTeERRVU5TVWl4RFFVRkJRU3hEUVVGQlFTeERRVTg1UWl4UFFVNUJVQ3hEUVVGQlFTeERRVUZsUlN4RFFVRkJRU3hEUVVGQlFTeERRVUYxUWxjc1EwRkJRVUVzUTBGQlUwTXNUVUZCUVVFc1EwRkJUMG9zUTBGQlFVRXNRMEZCVVVzc1pVRkJRVUVzUTBGRE1VSlNMRU5CUVVGQkxFTkJRVUZCTEVOQlEzQkRRU3hEUVVGQlFTeERRVUZ6UWtjc1EwRkJRVUVzUTBGQlVVc3NaVUZCUVVFc1EwRkRPVUpETEVOQlFVRkJMRU5CUVcxQ1VpeERRVUZCUVN4RFFVRmhTU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hMUVVWb1Ewb3NRMEZCUVVFc1EwRkJZMFVzUTBGQlFVRXNRMEZCUVVFc1EwRm9RbVJOTEVOQlFVRkJMRU5CUVcxQ1VpeERRVUZCUVN4RFFVRmhUQ3hEUVVGQlFTeEZRVUZCUVN4RFFVRkJRU3hEUVVOb1EwY3NRMEZCUVVFc1JVRkJRVUVzUTBGRFFVTXNRMEZCUVVFc1EwRkJjMElzUTBGQlFTeERRWEZDTVVJc1MwRkJUMFFzUTBGQlFVRXNRMEZCYjBKSkxFTkJRVUZCTEVOQlFWRkRMR0ZCUVVGQkxFVkJRMnBEV2l4RFFVRkJRU3hEUVVGTFRDeEhRVUZCUVN4RFFVRkpVeXhEUVVGQlFTeEZRVUZCUVN4RFFVRkJRU3hEUVVOVVJ5eERRVUZCUVN4RlFVRkJRU3hEUVVWR0xFZEJRVWxETEVOQlFVRkJMRU5CUVhOQ1J5eERRVUZCUVN4RFFVRlJTeXhsUVVGQlFTeERRVUZwUWl4RFFVTnFSQ3hKUVVGSlJpeERRVUZCUVN4RFFVRlhZaXhEUVVGQlFTeERRVUZsUlN4RFFVRkJRU3hEUVVGQlFTeEZRVUYzUWl4RlFVRkJMRU5CUTNSRVNDeERRVUZCUVN4RFFVRkxUQ3hIUVVGQlFTeERRVUZKYlVJc1EwRkJRVUVzUTBGQlUwTXNUVUZCUVVFc1EwRkJUeXhEUVVGQkxFTkJRVWRLTEVOQlFVRkJMRU5CUVZGTExHVkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRM0JEWml4RFFVRkJRU3hEUVVGbFJTeERRVUZCUVN4RFFVRkJRU3hEUVVGMVFsY3NRMEZCUVVFc1EwRkJVME1zVFVGQlFVRXNRMEZCVDBvc1EwRkJRVUVzUTBGQlVVc3NaVUZCUVVFc1EwRkJRVUVzUTBGRE9VUlNMRU5CUVVGQkxFTkJRWE5DUnl4RFFVRkJRU3hEUVVGUlN5eGxRVUZCUVN4RFFVVm9RMUFzUTBGQlFVRXNRMEZCWTBVc1EwRkJRVUVzUTBGQlFVRXNRMEZEWW5aQ0xFbEJRVUZCTEVOQlFVRkJMRU5CUlVObExFTkJRVUZCTEVOQlFYTkNSaXhEUVVGQlFTeERRVUZsU3l4TlFVRkJRU3hIUVVOdVEwY3NRMEZCUVVFc1JVRkZSbEVzUTBGQlFVRXNRMEZCYlVKU0xFTkJRVUZCTEVOQlFXRk1MRU5CUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUjJ4RFNpeERRVUZCUVN4RFFVRkxUQ3hIUVVGQlFTeERRVUZKVFN4RFFVRkJRU3hEUVVGbGFVSXNUVUZCUVVFc1EwRkJUMllzUTBGQlFVRXNRMEZCUVVFc1EwRkJjVUpuUWl4SlFVRkJRU3hEUVVGTExFVkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZKTTBSeVFpeERRVUZCUVN4RFFVRnRRbk5DTEU5QlFVRkJMRU5CUVZGRExFOUJRVUZCTEVOQlFWRXNVMEZCVlVNc1EwRkJRVUVzUTBGQlFVRXNRMEZETTBNc1NVRkJTVU1zUTBGQlFVRXNRMEZCVlhwQ0xFTkJRVUZCTEVOQlFXMUNNRUlzWjBKQlFVRkJMRU5CUVdsQ1JpeERRVUZCUVN4RFFVRkJRU3hEUVVOdVF5eEpRVUZCTEVWQlFWaERMRU5CUVVGQkxFZEJRMjFDTEVsQlFVRXNSVUZCYWtKNFFpeERRVUZCUVN4SFFVTkdkVUlzUTBGQlFVRXNRMEZCWVRORExFbEJRVUZCTEVOQlFVdDNReXhKUVVGQlFTeERRVUZMY0VJc1EwRkJRVUVzUTBGQlpYVkNMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUlhoRGRFSXNRMEZCUVVFc1EwRkJTM2xDTEdkQ1FVRkJRU3hEUVVGcFFrZ3NRMEZCUVVFc1EwRkJXVU1zUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkpMMEoyUWl4RFFVRkJRU3hEUVVWUUxGTkJRVk5wUWl4RFFVRkJRU3hEUVVGdFFrNHNRMEZCUVVFc1EwRkJVMFVzUTBGQlFVRXNRMEZCUVVFc1EwRkRia01zUjBGQlowSXNTVUZCUVN4SFFVRmFSaXhEUVVGQlFTeEZRVUZCUVN4TFFVRkJRU3hEUVVGQlFTeEhRVUZ2UWtFc1EwRkJRVUVzUTBGQlVXeENMRTFCUVVGQkxFTkJRemxDVHl4RFFVRkJRU3hEUVVGTFRDeEhRVUZCUVN4RFFVRkphMElzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzU1VGRFNpeERRVU5NTEVsQlFVbHdRaXhEUVVGQlFTeERRVUZUVFN4RFFVRkJRU3hEUVVOVWNFSXNTVUZCUVVFc1EwRkJTM2RETEVsQlFVRkJMRU5CUVV0d1FpeERRVUZCUVN4RFFVRmxXU3hEUVVGQlFTeERRVUZSYkVJc1RVRkJRVUVzUTBGQlFVRXNRMEZEYWtOclFpeERRVUZCUVN4RFFVRlJiRUlzVFVGQlFVRXNRMEZEV2s4c1EwRkJRVUVzUTBGQlMwd3NSMEZCUVVFc1EwRkJTU3hKUVVGSllpeFZRVUZCUVN4RFFVRlhOa0lzUTBGQlFVRXNRMEZCVVdVc1dVRkJRVUVzUTBGRFVtWXNRMEZCUVVFc1EwRkJVV2RDTEdOQlFVRkJMRU5CUTFKc1F5eERRVUZCUVN4RFFVTkJiMElzUTBGQlFVRXNRMEZEUVVZc1EwRkJRVUVzUTBGQlVXcENMRWxCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CVjNoRFdpeFZRVUZCUVN4RFFVRlhPRU1zVTBGQlFVRXNRMEZCVldwRExFZEJRVUZCTEVOQlFVMHNVMEZCZDBKclF5eERRVUZCUVN4RFFVRkJRU3hEUVVOcVJDeEhRVUZKUXl4TFFVRkJRU3hEUVVGTlF5eFBRVUZCUVN4RFFVRlJSaXhEUVVGQlFTeERRVUZCUVN4RFFVTm9Ra0VzUTBGQlFVRXNRMEZCVDFJc1QwRkJRVUVzUTBGQlVTeFRRVUZWVnl4RFFVRkJRU3hEUVVGQlFTeERRVU4yUWpWRExFbEJRVUZCTEVOQlFVdFBMRWRCUVVGQkxFTkJRVWx4UXl4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVTlNOVU1zU1VGQlFVRXNRMEZCUVVFc1EwRkJRVUVzU1VGRlFTeERRVUZCTEVkQlFVRXNRMEZCU1hsRExFTkJRVUZCTEVOQlFVOW9SQ3haUVVGQlFTeERRVUZCUVN4RlFVRnRReXhSUVVGQkxFVkJRVUVzVDBGQldHZEVMRU5CUVVGQkxFTkJUWFJETEUxQlFVMHNTVUZCU1Vrc1UwRkJRVUVzUTBGRFVpdzJSVUZCUVN4RFFVRm5Sa29zUTBGQlFVRXNRMEZCUVVFc1EwRk9PVVZCTEVOQlFVRkJMRVZCUTBaNlF5eEpRVUZCUVN4RFFVRkxReXhSUVVGQlFTeERRVUZUTmtNc1NVRkJRVUVzUTBGQlMwd3NRMEZCUVVFc1EwRkJRVUVzUTBGUmRrSXNUMEZCVDNwRExFbEJRVUZCTEVOQlFVRkJMRU5CVTFST0xGVkJRVUZCTEVOQlFWYzRReXhUUVVGQlFTeERRVUZWVHl4UFFVRkJRU3hEUVVGVkxGTkJRVFJDVGl4RFFVRkJRU3hEUVVGQlFTeERRVU42UkN4SFFVRkpReXhMUVVGQlFTeERRVUZOUXl4UFFVRkJRU3hEUVVGUlJpeERRVUZCUVN4RFFVRkJRU3hEUVVOb1FpeEpRVUZMTEVsQlFVbFBMRU5CUVVGQkxFTkJRVWxRTEVOQlFVRkJMRU5CUVU5MlFpeE5RVUZCUVN4RFFVRlBMRU5CUVVFc1EwRkJSemhDTEVOQlFVRkJMRVZCUVVzc1EwRkJRU3hEUVVGSFFTeERRVUZCUVN4RlFVRkJRU3hEUVVOd1EyaEVMRWxCUVVGQkxFTkJRVXNyUXl4UFFVRkJRU3hEUVVGUlRpeERRVUZCUVN4RFFVRlBUeXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeEpRVWR1UWl4RFFVRkJMRWRCUVVFc1EwRkJTVkFzUTBGQlFVRXNRMEZCVDJoRUxGbEJRVUZCTEVOQlFVRkJMRVZCUVcxRExGRkJRVUVzUlVGQlFTeFBRVUZZWjBRc1EwRkJRVUVzUTBGSmRFTXNUVUZCVFN4SlFVRkpTU3hUUVVGQlFTeERRVU5TTERaRlFVRkJMRU5CUVdkR1NpeERRVUZCUVN4RFFVRkJRU3hEUVVwc1JucERMRWxCUVVGQkxFTkJRVXRETEZGQlFVRkJMRU5CUVZOblJDeFBRVUZCUVN4RFFVRlJVaXhEUVVGQlFTeERRVUZCUVN4RFFVOTRRaXhQUVVGUGVrTXNTVUZCUVVFc1EwRkJRVUVzUTBGVlZFNHNWVUZCUVVFc1EwRkJWemhETEZOQlFVRkJMRU5CUVZWVkxFbEJRVUZCTEVOQlFVOHNVMEZCZVVKRExFTkJRVUZCTEVOQlFVRkJMRU5CUlc1RUxFbEJSRUVzU1VGQlNWQXNRMEZCUVVFc1EwRkRTMGtzUTBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVkSkxFTkJRVUZCTEVOQlFVMXdSQ3hKUVVGQlFTeERRVUZMUXl4UlFVRkJRU3hEUVVGVGFVSXNUVUZCUVVFc1EwRkJVVGhDTEVOQlFVRkJMRU5CUVVsSkxFTkJRVUZCTEVOQlFVdEtMRU5CUVVGQkxFVkJRVUZCTEVOQlFVRkJMRU5CUTI1RVNpeERRVUZCUVN4RFFVRlJOVU1zU1VGQlFVRXNRMEZCUzBNc1VVRkJRVUVzUTBGQlV5dERMRU5CUVVGQkxFTkJRVUZCTEVWQlExcDJSQ3haUVVGQlFTeERRVUZCUVN4RFFVTlNiVVFzUTBGQlFVRXNRMEZCVFUwc1NVRkJRVUVzUTBGQlMwTXNRMEZCUVVFc1EwRkJRVUVzUTBGSFJ5eEZRVUZCTEVkQlFWWlFMRU5CUVVGQkxFVkJRMFpQTEVOQlFVRkJMRU5CUVVsUUxFTkJRVUZCTEVOQlFVOHNRMEZCUlhaRExFMUJRVUZCTEVOQlFWRk1MRWxCUVVGQkxFTkJRVXRMTEUxQlFVRkJMRU5CUTJKR0xFbEJRVUZCTEVOQlFVMUlMRWxCUVVGQkxFTkJRVXRITEVsQlFVRkJMRU5CUTFoRExFMUJRVUZCTEVOQlFWRktMRWxCUVVGQkxFTkJRVXRKTEUxQlFVRkJMRU5CUTJKRkxFbEJRVUZCTEVOQlFVMU9MRWxCUVVGQkxFTkJRVXROTEVsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CV1doRFdpeFZRVUZCUVN4RFFVRlhPRU1zVTBGQlFVRXNRMEZCVlZRc1NVRkJRVUVzUTBGQlR5eFRRVUY1UW5OQ0xFTkJRVUZCTEVOQlFVRkJMRU5CUTI1RUxFbEJRVWxETEVOQlFVRkJMRU5CUTBGT0xFTkJRVUZCTEVOQlEwRkpMRU5CUVVGQkxFTkJRVTF3UkN4SlFVRkJRU3hEUVVGTFF5eFJRVUZCUVN4RFFVRlRhVUlzVFVGQlFVRXNRMEZEZUVJc1IwRkJTV3RETEVOQlFVRkJMRU5CUVUwc1EwRkJRU3hEUVVGSExFTkJSVmdzU1VGRVFVVXNRMEZCUVVFc1EwRkJZeXhGUVVGQkxFTkJRMVJPTEVOQlFVRkJMRU5CUVVrc1EwRkJRU3hEUVVGSFFTeERRVUZCUVN4RFFVRkpTU3hEUVVGQlFTeERRVUZKTEVOQlFVRXNRMEZCUjBvc1EwRkJRVUVzUlVGQlFVRXNRMEZEY2tKTkxFTkJRVUZCTEVOQlFWbFNMRWxCUVVGQkxFTkJRVXM1UXl4SlFVRkJRU3hEUVVGTFF5eFJRVUZCUVN4RFFVRlRLME1zUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGREwwSk5MRU5CUVVGQkxFTkJRVmxTTEVsQlFVRkJMRU5CUVV0UExFTkJRVUZCTEVOQlFVRkJMRU5CUlc1Q1F5eERRVUZCUVN4RFFVRlpVaXhKUVVGQlFTeERRVUZMT1VNc1NVRkJRVUVzUTBGQlMwTXNVVUZCUVVFc1EwRkJVeXRETEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlF5OUNhRVFzU1VGQlFVRXNRMEZCUzBNc1VVRkJRVUVzUTBGQlYzRkVMRU5CUVVGQkxFTkJSV3hDTEU5QlFVOTBSQ3hKUVVGQlFTeERRVUZCUVN4RFFWVlVUaXhWUVVGQlFTeERRVUZYT0VNc1UwRkJRVUVzUTBGQlZXVXNXVUZCUVVFc1EwRkJaU3hUUVVGcFEwTXNRMEZCUVVFc1EwRkJWVU1zUTBGQlFVRXNRMEZCUVVFc1EwRkROMFVzU1VGQlNVTXNRMEZCUVVFc1EwRkJXVEZFTEVsQlFVRkJMRU5CUVV0RExGRkJRVUZCTEVOQlFWTkVMRWxCUVVGQkxFTkJRVXRETEZGQlFVRkJMRU5CUVZOcFFpeE5RVUZCUVN4RFFVRlRMRU5CUVVFc1EwRkJRU3hEUVZWeVJDeFBRVlJKZDBNc1EwRkJRVUVzUTBGQlZXcEZMRmxCUVVGQkxFTkJRVUZCTEVOQlExcHBSU3hEUVVGQlFTeERRVUZWU0N4WlFVRkJRU3hEUVVGaFF5eERRVUZCUVN4RFFVRlZReXhEUVVGQlFTeERRVUZCUVN4RFFVVk1MRkZCUVVFc1JVRkJRU3hQUVVGa1F5eERRVUZCUVN4RFFVTmtNVVFzU1VGQlFVRXNRMEZCUzBNc1VVRkJRVUVzUTBGQlUwUXNTVUZCUVVFc1EwRkJTME1zVVVGQlFVRXNRMEZCVTJsQ0xFMUJRVUZCTEVOQlFWTXNRMEZCUVN4RFFVRkJMRU5CUVV0M1F5eERRVUZCUVN4RFFVRlZReXhQUVVGQlFTeERRVUZSU0N4RFFVRkJRU3hEUVVGVlF5eERRVUZCUVN4RFFVRkJRU3hEUVVkMFJYcEVMRWxCUVVGQkxFTkJRVXRETEZGQlFVRkJMRU5CUVZNMlF5eEpRVUZCUVN4RFFVRkxMRVZCUVVFc1EwRkJSMkVzVDBGQlFVRXNRMEZCVVVnc1EwRkJRVUVzUTBGQlZVTXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZGYmtONlJDeEpRVUZCUVN4RFFVRkJRU3hEUVZWVVRpeFZRVUZCUVN4RFFVRlhPRU1zVTBGQlFVRXNRMEZCVlVnc1owSkJRVUZCTEVOQlEyNUNMRk5CUVhGRGRVSXNRMEZCUVVFc1EwRkJZVU1zUTBGQlFVRXNRMEZCUVVFc1EwRkRhRVEzUkN4SlFVRkJRU3hEUVVGTFJTeGpRVUZCUVN4RFFVRmxXQ3hKUVVGQlFTeERRVUZMZFVVc1YwRkJRVUVzUTBGQldVWXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCWjBKRExFTkJRVUZCTEVOQlFVRkJMRU5CVTNwRWJrVXNWVUZCUVVFc1EwRkJWemhETEZOQlFVRkJMRU5CUVZWMVFpeHJRa0ZCUVVFc1EwRkRia0lzVTBGQmRVTmFMRU5CUVVGQkxFTkJRVUZCTEVOQlEzSkRMRWxCUVVzc1NVRkJTVWdzUTBGQlFVRXNRMEZCU1N4RFFVRkJMRU5CUVVkSkxFTkJRVUZCTEVOQlFVMXdSQ3hKUVVGQlFTeERRVUZMUXl4UlFVRkJRU3hEUVVGVGFVSXNUVUZCUVVFc1EwRkJVVGhDTEVOQlFVRkJMRU5CUVVsSkxFTkJRVUZCTEVOQlFVdEtMRU5CUVVGQkxFVkJRVUZCTEVOQlF5OURhRVFzU1VGQlFVRXNRMEZCUzBNc1VVRkJRVUVzUTBGQlV5dERMRU5CUVVGQkxFTkJRVUZCTEVOQlFVZDJSQ3haUVVGQlFTeERRVUZCUVN4RlFVTnVRazhzU1VGQlFVRXNRMEZCUzBNc1VVRkJRVUVzUTBGQlV5dERMRU5CUVVGQkxFTkJRVUZCTEVOQlFVZGxMR3RDUVVGQlFTeERRVUZ0UWxvc1EwRkJRVUVzUTBGQlFVRXNRMEZKZUVNc1NVRkJTVzVDTEVOQlFVRkJMRU5CUVZWblF5eE5RVUZCUVN4RFFVRlBReXhKUVVGQlFTeERRVUZMYWtVc1NVRkJRVUVzUTBGQlMwVXNZMEZCUVVFc1EwRkJRVUVzUTBGREwwSXNTVUZCVXpoRExFTkJRVUZCTEVOQlFVa3NRMEZCUVN4RFFVRkhTU3hEUVVGQlFTeERRVUZOY0VJc1EwRkJRVUVzUTBGQlVXUXNUVUZCUVVFc1EwRkJVVGhDTEVOQlFVRkJMRU5CUVVsSkxFTkJRVUZCTEVOQlFVdEtMRU5CUVVGQkxFVkJRVUZCTEVOQlF6ZERSeXhEUVVGQlFTeERRVUZKTlVRc1NVRkJRVUVzUTBGQlN6SkZMR0ZCUVVGQkxFTkJRV05zUXl4RFFVRkJRU3hEUVVGUlowSXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUzJoRUxFbEJRVUZCTEVOQlFVdEZMR05CUVVGQkxFTkJRV1U0UWl4RFFVRkJRU3hEUVVGUlowSXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGUmRFVjBSQ3hWUVVGQlFTeERRVUZYT0VNc1UwRkJRVUVzUTBGQlZUSkNMRkZCUVVGQkxFTkJRVmNzVlVGQlFTeERRVU01UWl4SlFVRkpReXhEUVVGQlFTeERRVUZOTEVWQlFVRXNRMEZKVml4UFFVaEJjRVVzU1VGQlFVRXNRMEZCUzJ0RUxFbEJRVUZCTEVOQlFVc3NVMEZCVlU0c1EwRkJRVUVzUTBGQlFVRXNRMEZEYkVKM1FpeERRVUZCUVN4RlFVRlBlRUlzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGRlJuZENMRU5CUVVGQkxFTkJRVUZCTEVOQlQxUXhSU3hWUVVGQlFTeERRVUZYT0VNc1UwRkJRVUVzUTBGQlZUWkNMSEZDUVVGQlFTeERRVUYzUWl4VFFVRXdRME1zUTBGQlFVRXNRMEZCUVVFc1EwRkRja1lzU1VGQlNVTXNRMEZCUVVFc1EwRkJXU3hEUVVOa09VTXNTVUZCUVVFc1EwRkJUU3hGUVVGQkxFTkJRMDUwUWl4SlFVRkJRU3hEUVVGTkxFTkJRVUVzUTBGRFRrTXNUVUZCUVVFc1EwRkJVU3hEUVVGQkxFTkJRVUVzUTBGRlRtOUZMRU5CUVVGQkxFTkJRVTBzU1VGQlNXNUdMR3RDUVVGQlFTeERRVUZ0UW1sR0xFTkJRVUZCTEVOQlFVRkJMRU5CUXpkQ1J5eERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVTkJReXhEUVVGQlFTeERRVUZ4UWl4SlFVRkJMRU5CUTNKQ1F5eERRVUZCUVN4RFFVRnRRaXhKUVVGQkxFTkJRMjVDUXl4RFFVRkJRU3hEUVVGeFFpeEpRVUZCTEVOQlEzSkNReXhEUVVGQlFTeERRVUZ0UWl4SlFVRkJMRU5CY1VWMlFpeFBRWEJGUVRkRkxFbEJRVUZCTEVOQlFVdHJSQ3hKUVVGQlFTeERRVUZMTEZOQlFWVk9MRU5CUVVGQkxFTkJRVTlyUXl4RFFVRkJRU3hEUVVGQlFTeERRVU42UWxBc1EwRkJRVUVzUTBGQlZUbERMRWxCUVVGQkxFVkJRVkZ0UWl4RFFVRkJRU3hEUVVOTkxFbEJRVUVzUjBGQmNFSnJReXhEUVVGQlFTeERRVUZUZWtVc1RVRkJRVUVzUlVGRFdTeEpRVUZCTEVkQlFXeENlVVVzUTBGQlFVRXNRMEZCVXpORkxFbEJRVUZCTEVWQlExY3NTVUZCUVN4SFFVRndRakpGTEVOQlFVRkJMRU5CUVZNeFJTeE5RVUZCUVN4RlFVTlljMFVzUTBGQlFVRXNSMEZCZFVKSkxFTkJRVUZCTEVOQlFWTjZSU3hOUVVGQlFTeEZRVU0zUW5ORkxFTkJRVUZCTEVkQlFYRkNSeXhEUVVGQlFTeERRVUZUTTBVc1NVRkJRVUVzUlVGRE9VSjVSU3hEUVVGQlFTeEhRVUYxUWtVc1EwRkJRVUVzUTBGQlV6RkZMRTFCUVVGQkxFVkJRMmhEZVVVc1EwRkJRVUVzUjBGQmNVSkRMRU5CUVVGQkxFTkJRVk40UlN4SlFVRkJRU3hGUVVOc1EydEZMRU5CUVVGQkxFTkJRVWxQTEZWQlFVRkJMRU5CUVZjc1EwRkRZakZGTEUxQlFVRkJMRU5CUVZGNVJTeERRVUZCUVN4RFFVRlRla1VzVFVGQlFVRXNRMEZEYWtKNVJTeFJRVUZCUVN4RFFVRlZMRU5CUTFJelJTeEpRVUZCUVN4RFFVRk5Na1VzUTBGQlFVRXNRMEZCVXpORkxFbEJRVUZCTEVOQlEyWkRMRTFCUVVGQkxFTkJRVkV3UlN4RFFVRkJRU3hEUVVGVE1VVXNUVUZCUVVFc1EwRkJRVUVzUTBGRmJrSnRSU3hUUVVGQlFTeERRVUZYTEVOQlExUndSU3hKUVVGQlFTeERRVUZOYjBVc1EwRkJRVUVzUTBGQlZYQkZMRWxCUVVGQkxFTkJRMmhDUXl4TlFVRkJRU3hEUVVGUmJVVXNRMEZCUVVFc1EwRkJWVzVGTEUxQlFVRkJMRU5CUVVGQkxFTkJSWEJDUlN4SlFVRkJRU3hEUVVGTmQwVXNRMEZCUVVFc1EwRkJVM2hGTEVsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIyNUNiMFVzUTBGQlFVRXNRMEZCY1VKSkxFTkJRVUZCTEVOQlFWTjZSU3hOUVVGQlFTeERRVU01UW5ORkxFTkJRVUZCTEVOQlFXMUNSeXhEUVVGQlFTeERRVUZUTTBVc1NVRkJRVUVzUTBGRE5VSjVSU3hEUVVGQlFTeERRVUZ4UWtVc1EwRkJRVUVzUTBGQlV6RkZMRTFCUVVGQkxFTkJRemxDZVVVc1EwRkJRVUVzUTBGQmJVSkRMRU5CUVVGQkxFTkJRVk40UlN4SlFVRkJRU3hEUVVNMVFtMUZMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFVkJRMU5CTEVOQlFVRkJMRWRCUTFSRUxFTkJRVUZCTEVOQlFVbFBMRlZCUVVGQkxFTkJRVmNzUTBGRFlsSXNVMEZCUVVFc1EwRkJWeXhEUVVOVWNFVXNTVUZCUVVFc1EwRkJUVzlGTEVOQlFVRkJMRU5CUVZWd1JTeEpRVUZCUVN4RFFVTm9Ra01zVFVGQlFVRXNRMEZCVVcxRkxFTkJRVUZCTEVOQlFWVnVSU3hOUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWQwUW5ORkxFTkJRVUZCTEVOQlFYRkNMRWxCUVVFc1EwRkRja0pFTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSVVlzU1VGQlN5eEpRVUZKVHl4RFFVRkJRU3hEUVVGTkxFTkJRVUVzUTBGQlJ6bEVMRU5CUVVGQkxFTkJRVk13UWl4RFFVRkJRU3hEUVVGTk1VSXNUVUZCUVVFc1EwRkJVVGhFTEVOQlFVRkJMRU5CUVUwNVJDeERRVUZCUVN4RFFVRlJPRVFzUTBGQlFVRXNSVUZCUVVFc1EwRXpWM2hETEVWQlFVRXNSMEUwVjFSd1F5eERRVUZCUVN4RFFVRk5jVU1zVlVGQlFVRXNRMEZCVjBRc1EwRkJRVUVzUTBGQlFVRXNSVUZEYmtKVUxFTkJRVUZCTEVOQlFWVndSU3hKUVVGQlFTeEZRVUZCUVN4RFFVTldiMFVzUTBGQlFVRXNRMEZCVlc1RkxFMUJRVUZCTEVOQlFWTXNRMEZCUVN4RFFVVm1ORVVzUTBGQlFVRXNRMEZCVFN4RFFVRkJMRWRCUVUwNVJDeERRVUZCUVN4RlFVTmtkMFFzUTBGQlFVRXNRMEZCY1VJc1NVRkJRU3hEUVVOeVFrUXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1JVRkRVMEVzUTBGQlFVRXNSVUZEVkVRc1EwRkJRVUVzUTBGQlNVOHNWVUZCUVVFc1EwRkJWeXhEUVVOaU1VVXNUVUZCUVVFc1EwRkJVWGxGTEVOQlFVRkJMRU5CUVZONlJTeE5RVUZCUVN4RFFVTnFRbmxGTEZGQlFVRkJMRU5CUVZVc1EwRkRVak5GTEVsQlFVRkJMRU5CUVUweVJTeERRVUZCUVN4RFFVRlRNMFVzU1VGQlFVRXNRMEZEWmtNc1RVRkJRVUVzUTBGQlVUQkZMRU5CUVVGQkxFTkJRVk14UlN4TlFVRkJRU3hEUVVGQlFTeERRVVZ1UW0xRkxGTkJRVUZCTEVOQlFWY3NRMEZEVkhCRkxFbEJRVUZCTEVOQlFVMXZSU3hEUVVGQlFTeERRVUZWY0VVc1NVRkJRVUVzUTBGRGFFSkRMRTFCUVVGQkxFTkJRVkZ0UlN4RFFVRkJRU3hEUVVGVmJrVXNUVUZCUVVFc1EwRkJRVUVzUTBGRmNFSkZMRWxCUVVGQkxFTkJRVTEzUlN4RFFVRkJRU3hEUVVGVGVFVXNTVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNSVUZKYmtKcFJTeERRVUZCUVN4RFFVRlZia1VzVFVGQlFVRXNSVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZKYUVKS0xFbEJRVUZCTEVOQlFVc3JSQ3hyUWtGQlFVRXNRMEZCYlVJc1UwRkJWVGRDTEVOQlFVRkJMRU5CUVZsblJDeERRVUZCUVN4RFFVRkJRU3hEUVVNMVExWXNRMEZCUVVFc1EwRkJTVzVETEdkQ1FVRkJRU3hEUVVGcFFrZ3NRMEZCUVVFc1EwRkJXV2RFTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUnpWQ0xFTkJRVVY2UkN4SlFVRkJRU3hEUVVGTk9FTXNRMEZCUVVFc1EwRkJWVGxETEVsQlFVRkJMRU5CUVUwclF5eEhRVUZCUVN4RFFVRkxRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkMFExY3NUMEZCUVVFc1EwRkJVWHBHTEZWQlFVRkJMRU5CUVdGQkxGVkJRVUZCTEVOQlFVRkJJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hYMD0iLCIoZnVuY3Rpb24oKXt2YXIgbix0PTIwMCxyPVwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiLGU9XCJfX2xvZGFzaF9wbGFjZWhvbGRlcl9fXCIsdT0xLGk9MixvPTQsZj0xLGE9MixjPTEsbD0yLHM9NCxoPTgscD0xNix2PTMyLF89NjQsZz0xMjgseT0yNTYsZD01MTIsYj04MDAsdz0xNixtPTEvMCx4PTkwMDcxOTkyNTQ3NDA5OTEsaj0xLjc5NzY5MzEzNDg2MjMxNTdlMzA4LEE9TmFOLGs9NDI5NDk2NzI5NSxPPWstMSxJPWs+Pj4xLFI9W1tcImFyeVwiLGddLFtcImJpbmRcIixjXSxbXCJiaW5kS2V5XCIsbF0sW1wiY3VycnlcIixoXSxbXCJjdXJyeVJpZ2h0XCIscF0sW1wiZmxpcFwiLGRdLFtcInBhcnRpYWxcIix2XSxbXCJwYXJ0aWFsUmlnaHRcIixfXSxbXCJyZWFyZ1wiLHldXSxFPVwiW29iamVjdCBBcmd1bWVudHNdXCIsej1cIltvYmplY3QgQXJyYXldXCIsUz1cIltvYmplY3QgQXN5bmNGdW5jdGlvbl1cIixMPVwiW29iamVjdCBCb29sZWFuXVwiLFc9XCJbb2JqZWN0IERhdGVdXCIsQz1cIltvYmplY3QgRE9NRXhjZXB0aW9uXVwiLFU9XCJbb2JqZWN0IEVycm9yXVwiLEI9XCJbb2JqZWN0IEZ1bmN0aW9uXVwiLFQ9XCJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXVwiLCQ9XCJbb2JqZWN0IE1hcF1cIixEPVwiW29iamVjdCBOdW1iZXJdXCIsTT1cIltvYmplY3QgTnVsbF1cIixGPVwiW29iamVjdCBPYmplY3RdXCIsTj1cIltvYmplY3QgUHJveHldXCIsUD1cIltvYmplY3QgUmVnRXhwXVwiLHE9XCJbb2JqZWN0IFNldF1cIixaPVwiW29iamVjdCBTdHJpbmddXCIsSz1cIltvYmplY3QgU3ltYm9sXVwiLFY9XCJbb2JqZWN0IFVuZGVmaW5lZF1cIixHPVwiW29iamVjdCBXZWFrTWFwXVwiLEg9XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiLEo9XCJbb2JqZWN0IERhdGFWaWV3XVwiLFk9XCJbb2JqZWN0IEZsb2F0MzJBcnJheV1cIixRPVwiW29iamVjdCBGbG9hdDY0QXJyYXldXCIsWD1cIltvYmplY3QgSW50OEFycmF5XVwiLG5uPVwiW29iamVjdCBJbnQxNkFycmF5XVwiLHRuPVwiW29iamVjdCBJbnQzMkFycmF5XVwiLHJuPVwiW29iamVjdCBVaW50OEFycmF5XVwiLGVuPVwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIix1bj1cIltvYmplY3QgVWludDE2QXJyYXldXCIsb249XCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiLGZuPS9cXGJfX3AgXFwrPSAnJzsvZyxhbj0vXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxjbj0vKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nLGxuPS8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxzbj0vWyY8PlwiJ10vZyxobj1SZWdFeHAobG4uc291cmNlKSxwbj1SZWdFeHAoc24uc291cmNlKSx2bj0vPCUtKFtcXHNcXFNdKz8pJT4vZyxfbj0vPCUoW1xcc1xcU10rPyklPi9nLGduPS88JT0oW1xcc1xcU10rPyklPi9nLHluPS9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sZG49L15cXHcqJC8sYm49L1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nLHduPS9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxtbj1SZWdFeHAod24uc291cmNlKSx4bj0vXlxccyt8XFxzKyQvZyxqbj0vXlxccysvLEFuPS9cXHMrJC8sa249L1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxPbj0vXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sSW49Lyw/ICYgLyxSbj0vW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2csRW49L1xcXFwoXFxcXCk/L2csem49L1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nLFNuPS9cXHcqJC8sTG49L15bLStdMHhbMC05YS1mXSskL2ksV249L14wYlswMV0rJC9pLENuPS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sVW49L14wb1swLTddKyQvaSxCbj0vXig/OjB8WzEtOV1cXGQqKSQvLFRuPS9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nLCRuPS8oJF4pLyxEbj0vWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2csTW49XCJcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyZlxcXFx1MjBkMC1cXFxcdTIwZmZcIixGbj1cIlxcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmZcXFxcdTIwMDAtXFxcXHUyMDZmIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBcIixObj1cIltcIitGbitcIl1cIixQbj1cIltcIitNbitcIl1cIixxbj1cIlxcXFxkK1wiLFpuPVwiW2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZl1cIixLbj1cIlteXFxcXHVkODAwLVxcXFx1ZGZmZlwiK0ZuK3FuK1wiXFxcXHUyNzAwLVxcXFx1MjdiZmEtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZkEtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZV1cIixWbj1cIlxcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXVwiLEduPVwiW15cXFxcdWQ4MDAtXFxcXHVkZmZmXVwiLEhuPVwiKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfVwiLEpuPVwiW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdXCIsWW49XCJbQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlXVwiLFFuPVwiKD86XCIrWm4rXCJ8XCIrS24rXCIpXCIsWG49XCIoPzpcIitZbitcInxcIitLbitcIilcIixudD1cIig/OlwiK1BuK1wifFwiK1ZuK1wiKT9cIix0dD1cIltcXFxcdWZlMGVcXFxcdWZlMGZdP1wiK250K1wiKD86XFxcXHUyMDBkKD86XCIrW0duLEhuLEpuXS5qb2luKFwifFwiKStcIilbXFxcXHVmZTBlXFxcXHVmZTBmXT9cIitudCtcIikqXCIscnQ9XCIoPzpcIitbXCJbXFxcXHUyNzAwLVxcXFx1MjdiZl1cIixIbixKbl0uam9pbihcInxcIikrXCIpXCIrdHQsZXQ9XCIoPzpcIitbR24rUG4rXCI/XCIsUG4sSG4sSm4sXCJbXFxcXHVkODAwLVxcXFx1ZGZmZl1cIl0uam9pbihcInxcIikrXCIpXCIsdXQ9UmVnRXhwKFwiWyfigJldXCIsXCJnXCIpLGl0PVJlZ0V4cChQbixcImdcIiksb3Q9UmVnRXhwKFZuK1wiKD89XCIrVm4rXCIpfFwiK2V0K3R0LFwiZ1wiKSxmdD1SZWdFeHAoW1luK1wiP1wiK1puK1wiKyg/Olsn4oCZXSg/OmR8bGx8bXxyZXxzfHR8dmUpKT8oPz1cIitbTm4sWW4sXCIkXCJdLmpvaW4oXCJ8XCIpK1wiKVwiLFhuK1wiKyg/Olsn4oCZXSg/OkR8TEx8TXxSRXxTfFR8VkUpKT8oPz1cIitbTm4sWW4rUW4sXCIkXCJdLmpvaW4oXCJ8XCIpK1wiKVwiLFluK1wiP1wiK1FuK1wiKyg/Olsn4oCZXSg/OmR8bGx8bXxyZXxzfHR8dmUpKT9cIixZbitcIisoPzpbJ+KAmV0oPzpEfExMfE18UkV8U3xUfFZFKSk/XCIsXCJcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSlcIixcIlxcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKVwiLHFuLHJ0XS5qb2luKFwifFwiKSxcImdcIiksYXQ9UmVnRXhwKFwiW1xcXFx1MjAwZFxcXFx1ZDgwMC1cXFxcdWRmZmZcIitNbitcIlxcXFx1ZmUwZVxcXFx1ZmUwZl1cIiksY3Q9L1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS8sbHQ9W1wiQXJyYXlcIixcIkJ1ZmZlclwiLFwiRGF0YVZpZXdcIixcIkRhdGVcIixcIkVycm9yXCIsXCJGbG9hdDMyQXJyYXlcIixcIkZsb2F0NjRBcnJheVwiLFwiRnVuY3Rpb25cIixcIkludDhBcnJheVwiLFwiSW50MTZBcnJheVwiLFwiSW50MzJBcnJheVwiLFwiTWFwXCIsXCJNYXRoXCIsXCJPYmplY3RcIixcIlByb21pc2VcIixcIlJlZ0V4cFwiLFwiU2V0XCIsXCJTdHJpbmdcIixcIlN5bWJvbFwiLFwiVHlwZUVycm9yXCIsXCJVaW50OEFycmF5XCIsXCJVaW50OENsYW1wZWRBcnJheVwiLFwiVWludDE2QXJyYXlcIixcIlVpbnQzMkFycmF5XCIsXCJXZWFrTWFwXCIsXCJfXCIsXCJjbGVhclRpbWVvdXRcIixcImlzRmluaXRlXCIsXCJwYXJzZUludFwiLFwic2V0VGltZW91dFwiXSxzdD0tMSxodD17fTtodFtZXT1odFtRXT1odFtYXT1odFtubl09aHRbdG5dPWh0W3JuXT1odFtlbl09aHRbdW5dPWh0W29uXT0hMCxodFtFXT1odFt6XT1odFtIXT1odFtMXT1odFtKXT1odFtXXT1odFtVXT1odFtCXT1odFskXT1odFtEXT1odFtGXT1odFtQXT1odFtxXT1odFtaXT1odFtHXT0hMTt2YXIgcHQ9e307cHRbRV09cHRbel09cHRbSF09cHRbSl09cHRbTF09cHRbV109cHRbWV09cHRbUV09cHRbWF09cHRbbm5dPXB0W3RuXT1wdFskXT1wdFtEXT1wdFtGXT1wdFtQXT1wdFtxXT1wdFtaXT1wdFtLXT1wdFtybl09cHRbZW5dPXB0W3VuXT1wdFtvbl09ITAscHRbVV09cHRbQl09cHRbR109ITE7dmFyIHZ0PXtcIlxcXFxcIjpcIlxcXFxcIixcIidcIjpcIidcIixcIlxcblwiOlwiblwiLFwiXFxyXCI6XCJyXCIsXCJcXHUyMDI4XCI6XCJ1MjAyOFwiLFwiXFx1MjAyOVwiOlwidTIwMjlcIn0sX3Q9cGFyc2VGbG9hdCxndD1wYXJzZUludCx5dD1cIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwmJmdsb2JhbC5PYmplY3Q9PT1PYmplY3QmJmdsb2JhbCxkdD1cIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGYsYnQ9eXR8fGR0fHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksd3Q9XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJmV4cG9ydHMmJiFleHBvcnRzLm5vZGVUeXBlJiZleHBvcnRzLG10PXd0JiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUmJiFtb2R1bGUubm9kZVR5cGUmJm1vZHVsZSx4dD1tdCYmbXQuZXhwb3J0cz09PXd0LGp0PXh0JiZ5dC5wcm9jZXNzLEF0PWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBtdCYmbXQucmVxdWlyZSYmbXQucmVxdWlyZShcInV0aWxcIikudHlwZXN8fGp0JiZqdC5iaW5kaW5nJiZqdC5iaW5kaW5nKFwidXRpbFwiKX1jYXRjaChuKXt9fSgpLGt0PUF0JiZBdC5pc0FycmF5QnVmZmVyLE90PUF0JiZBdC5pc0RhdGUsSXQ9QXQmJkF0LmlzTWFwLFJ0PUF0JiZBdC5pc1JlZ0V4cCxFdD1BdCYmQXQuaXNTZXQsenQ9QXQmJkF0LmlzVHlwZWRBcnJheTtmdW5jdGlvbiBTdChuLHQscil7c3dpdGNoKHIubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG4uY2FsbCh0KTtjYXNlIDE6cmV0dXJuIG4uY2FsbCh0LHJbMF0pO2Nhc2UgMjpyZXR1cm4gbi5jYWxsKHQsclswXSxyWzFdKTtjYXNlIDM6cmV0dXJuIG4uY2FsbCh0LHJbMF0sclsxXSxyWzJdKX1yZXR1cm4gbi5hcHBseSh0LHIpfWZ1bmN0aW9uIEx0KG4sdCxyLGUpe2Zvcih2YXIgdT0tMSxpPW51bGw9PW4/MDpuLmxlbmd0aDsrK3U8aTspe3ZhciBvPW5bdV07dChlLG8scihvKSxuKX1yZXR1cm4gZX1mdW5jdGlvbiBXdChuLHQpe2Zvcih2YXIgcj0tMSxlPW51bGw9PW4/MDpuLmxlbmd0aDsrK3I8ZSYmITEhPT10KG5bcl0scixuKTspO3JldHVybiBufWZ1bmN0aW9uIEN0KG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoOysrcjxlOylpZighdChuW3JdLHIsbikpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gVXQobix0KXtmb3IodmFyIHI9LTEsZT1udWxsPT1uPzA6bi5sZW5ndGgsdT0wLGk9W107KytyPGU7KXt2YXIgbz1uW3JdO3QobyxyLG4pJiYoaVt1KytdPW8pfXJldHVybiBpfWZ1bmN0aW9uIEJ0KG4sdCl7cmV0dXJuIShudWxsPT1ufHwhbi5sZW5ndGgpJiZLdChuLHQsMCk+LTF9ZnVuY3Rpb24gVHQobix0LHIpe2Zvcih2YXIgZT0tMSx1PW51bGw9PW4/MDpuLmxlbmd0aDsrK2U8dTspaWYocih0LG5bZV0pKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uICR0KG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoLHU9QXJyYXkoZSk7KytyPGU7KXVbcl09dChuW3JdLHIsbik7cmV0dXJuIHV9ZnVuY3Rpb24gRHQobix0KXtmb3IodmFyIHI9LTEsZT10Lmxlbmd0aCx1PW4ubGVuZ3RoOysrcjxlOyluW3Urcl09dFtyXTtyZXR1cm4gbn1mdW5jdGlvbiBNdChuLHQscixlKXt2YXIgdT0tMSxpPW51bGw9PW4/MDpuLmxlbmd0aDtmb3IoZSYmaSYmKHI9blsrK3VdKTsrK3U8aTspcj10KHIsblt1XSx1LG4pO3JldHVybiByfWZ1bmN0aW9uIEZ0KG4sdCxyLGUpe3ZhciB1PW51bGw9PW4/MDpuLmxlbmd0aDtmb3IoZSYmdSYmKHI9blstLXVdKTt1LS07KXI9dChyLG5bdV0sdSxuKTtyZXR1cm4gcn1mdW5jdGlvbiBOdChuLHQpe2Zvcih2YXIgcj0tMSxlPW51bGw9PW4/MDpuLmxlbmd0aDsrK3I8ZTspaWYodChuW3JdLHIsbikpcmV0dXJuITA7cmV0dXJuITF9dmFyIFB0PUp0KFwibGVuZ3RoXCIpO2Z1bmN0aW9uIHF0KG4sdCxyKXt2YXIgZTtyZXR1cm4gcihuLGZ1bmN0aW9uKG4scix1KXtpZih0KG4scix1KSlyZXR1cm4gZT1yLCExfSksZX1mdW5jdGlvbiBadChuLHQscixlKXtmb3IodmFyIHU9bi5sZW5ndGgsaT1yKyhlPzE6LTEpO2U/aS0tOisraTx1OylpZih0KG5baV0saSxuKSlyZXR1cm4gaTtyZXR1cm4tMX1mdW5jdGlvbiBLdChuLHQscil7cmV0dXJuIHQ9PXQ/ZnVuY3Rpb24obix0LHIpe2Zvcih2YXIgZT1yLTEsdT1uLmxlbmd0aDsrK2U8dTspaWYobltlXT09PXQpcmV0dXJuIGU7cmV0dXJuLTF9KG4sdCxyKTpadChuLEd0LHIpfWZ1bmN0aW9uIFZ0KG4sdCxyLGUpe2Zvcih2YXIgdT1yLTEsaT1uLmxlbmd0aDsrK3U8aTspaWYoZShuW3VdLHQpKXJldHVybiB1O3JldHVybi0xfWZ1bmN0aW9uIEd0KG4pe3JldHVybiBuIT1ufWZ1bmN0aW9uIEh0KG4sdCl7dmFyIHI9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiByP1h0KG4sdCkvcjpBfWZ1bmN0aW9uIEp0KHQpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gbnVsbD09cj9uOnJbdF19fWZ1bmN0aW9uIFl0KHQpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gbnVsbD09dD9uOnRbcl19fWZ1bmN0aW9uIFF0KG4sdCxyLGUsdSl7cmV0dXJuIHUobixmdW5jdGlvbihuLHUsaSl7cj1lPyhlPSExLG4pOnQocixuLHUsaSl9KSxyfWZ1bmN0aW9uIFh0KHQscil7Zm9yKHZhciBlLHU9LTEsaT10Lmxlbmd0aDsrK3U8aTspe3ZhciBvPXIodFt1XSk7byE9PW4mJihlPWU9PT1uP286ZStvKX1yZXR1cm4gZX1mdW5jdGlvbiBucihuLHQpe2Zvcih2YXIgcj0tMSxlPUFycmF5KG4pOysrcjxuOyllW3JdPXQocik7cmV0dXJuIGV9ZnVuY3Rpb24gdHIobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuKHQpfX1mdW5jdGlvbiBycihuLHQpe3JldHVybiAkdCh0LGZ1bmN0aW9uKHQpe3JldHVybiBuW3RdfSl9ZnVuY3Rpb24gZXIobix0KXtyZXR1cm4gbi5oYXModCl9ZnVuY3Rpb24gdXIobix0KXtmb3IodmFyIHI9LTEsZT1uLmxlbmd0aDsrK3I8ZSYmS3QodCxuW3JdLDApPi0xOyk7cmV0dXJuIHJ9ZnVuY3Rpb24gaXIobix0KXtmb3IodmFyIHI9bi5sZW5ndGg7ci0tJiZLdCh0LG5bcl0sMCk+LTE7KTtyZXR1cm4gcn12YXIgb3I9WXQoe1wiw4BcIjpcIkFcIixcIsOBXCI6XCJBXCIsXCLDglwiOlwiQVwiLFwiw4NcIjpcIkFcIixcIsOEXCI6XCJBXCIsXCLDhVwiOlwiQVwiLFwiw6BcIjpcImFcIixcIsOhXCI6XCJhXCIsXCLDolwiOlwiYVwiLFwiw6NcIjpcImFcIixcIsOkXCI6XCJhXCIsXCLDpVwiOlwiYVwiLFwiw4dcIjpcIkNcIixcIsOnXCI6XCJjXCIsXCLDkFwiOlwiRFwiLFwiw7BcIjpcImRcIixcIsOIXCI6XCJFXCIsXCLDiVwiOlwiRVwiLFwiw4pcIjpcIkVcIixcIsOLXCI6XCJFXCIsXCLDqFwiOlwiZVwiLFwiw6lcIjpcImVcIixcIsOqXCI6XCJlXCIsXCLDq1wiOlwiZVwiLFwiw4xcIjpcIklcIixcIsONXCI6XCJJXCIsXCLDjlwiOlwiSVwiLFwiw49cIjpcIklcIixcIsOsXCI6XCJpXCIsXCLDrVwiOlwiaVwiLFwiw65cIjpcImlcIixcIsOvXCI6XCJpXCIsXCLDkVwiOlwiTlwiLFwiw7FcIjpcIm5cIixcIsOSXCI6XCJPXCIsXCLDk1wiOlwiT1wiLFwiw5RcIjpcIk9cIixcIsOVXCI6XCJPXCIsXCLDllwiOlwiT1wiLFwiw5hcIjpcIk9cIixcIsOyXCI6XCJvXCIsXCLDs1wiOlwib1wiLFwiw7RcIjpcIm9cIixcIsO1XCI6XCJvXCIsXCLDtlwiOlwib1wiLFwiw7hcIjpcIm9cIixcIsOZXCI6XCJVXCIsXCLDmlwiOlwiVVwiLFwiw5tcIjpcIlVcIixcIsOcXCI6XCJVXCIsXCLDuVwiOlwidVwiLFwiw7pcIjpcInVcIixcIsO7XCI6XCJ1XCIsXCLDvFwiOlwidVwiLFwiw51cIjpcIllcIixcIsO9XCI6XCJ5XCIsXCLDv1wiOlwieVwiLFwiw4ZcIjpcIkFlXCIsXCLDplwiOlwiYWVcIixcIsOeXCI6XCJUaFwiLFwiw75cIjpcInRoXCIsXCLDn1wiOlwic3NcIixcIsSAXCI6XCJBXCIsXCLEglwiOlwiQVwiLFwixIRcIjpcIkFcIixcIsSBXCI6XCJhXCIsXCLEg1wiOlwiYVwiLFwixIVcIjpcImFcIixcIsSGXCI6XCJDXCIsXCLEiFwiOlwiQ1wiLFwixIpcIjpcIkNcIixcIsSMXCI6XCJDXCIsXCLEh1wiOlwiY1wiLFwixIlcIjpcImNcIixcIsSLXCI6XCJjXCIsXCLEjVwiOlwiY1wiLFwixI5cIjpcIkRcIixcIsSQXCI6XCJEXCIsXCLEj1wiOlwiZFwiLFwixJFcIjpcImRcIixcIsSSXCI6XCJFXCIsXCLElFwiOlwiRVwiLFwixJZcIjpcIkVcIixcIsSYXCI6XCJFXCIsXCLEmlwiOlwiRVwiLFwixJNcIjpcImVcIixcIsSVXCI6XCJlXCIsXCLEl1wiOlwiZVwiLFwixJlcIjpcImVcIixcIsSbXCI6XCJlXCIsXCLEnFwiOlwiR1wiLFwixJ5cIjpcIkdcIixcIsSgXCI6XCJHXCIsXCLEolwiOlwiR1wiLFwixJ1cIjpcImdcIixcIsSfXCI6XCJnXCIsXCLEoVwiOlwiZ1wiLFwixKNcIjpcImdcIixcIsSkXCI6XCJIXCIsXCLEplwiOlwiSFwiLFwixKVcIjpcImhcIixcIsSnXCI6XCJoXCIsXCLEqFwiOlwiSVwiLFwixKpcIjpcIklcIixcIsSsXCI6XCJJXCIsXCLErlwiOlwiSVwiLFwixLBcIjpcIklcIixcIsSpXCI6XCJpXCIsXCLEq1wiOlwiaVwiLFwixK1cIjpcImlcIixcIsSvXCI6XCJpXCIsXCLEsVwiOlwiaVwiLFwixLRcIjpcIkpcIixcIsS1XCI6XCJqXCIsXCLEtlwiOlwiS1wiLFwixLdcIjpcImtcIixcIsS4XCI6XCJrXCIsXCLEuVwiOlwiTFwiLFwixLtcIjpcIkxcIixcIsS9XCI6XCJMXCIsXCLEv1wiOlwiTFwiLFwixYFcIjpcIkxcIixcIsS6XCI6XCJsXCIsXCLEvFwiOlwibFwiLFwixL5cIjpcImxcIixcIsWAXCI6XCJsXCIsXCLFglwiOlwibFwiLFwixYNcIjpcIk5cIixcIsWFXCI6XCJOXCIsXCLFh1wiOlwiTlwiLFwixYpcIjpcIk5cIixcIsWEXCI6XCJuXCIsXCLFhlwiOlwiblwiLFwixYhcIjpcIm5cIixcIsWLXCI6XCJuXCIsXCLFjFwiOlwiT1wiLFwixY5cIjpcIk9cIixcIsWQXCI6XCJPXCIsXCLFjVwiOlwib1wiLFwixY9cIjpcIm9cIixcIsWRXCI6XCJvXCIsXCLFlFwiOlwiUlwiLFwixZZcIjpcIlJcIixcIsWYXCI6XCJSXCIsXCLFlVwiOlwiclwiLFwixZdcIjpcInJcIixcIsWZXCI6XCJyXCIsXCLFmlwiOlwiU1wiLFwixZxcIjpcIlNcIixcIsWeXCI6XCJTXCIsXCLFoFwiOlwiU1wiLFwixZtcIjpcInNcIixcIsWdXCI6XCJzXCIsXCLFn1wiOlwic1wiLFwixaFcIjpcInNcIixcIsWiXCI6XCJUXCIsXCLFpFwiOlwiVFwiLFwixaZcIjpcIlRcIixcIsWjXCI6XCJ0XCIsXCLFpVwiOlwidFwiLFwixadcIjpcInRcIixcIsWoXCI6XCJVXCIsXCLFqlwiOlwiVVwiLFwixaxcIjpcIlVcIixcIsWuXCI6XCJVXCIsXCLFsFwiOlwiVVwiLFwixbJcIjpcIlVcIixcIsWpXCI6XCJ1XCIsXCLFq1wiOlwidVwiLFwixa1cIjpcInVcIixcIsWvXCI6XCJ1XCIsXCLFsVwiOlwidVwiLFwixbNcIjpcInVcIixcIsW0XCI6XCJXXCIsXCLFtVwiOlwid1wiLFwixbZcIjpcIllcIixcIsW3XCI6XCJ5XCIsXCLFuFwiOlwiWVwiLFwixblcIjpcIlpcIixcIsW7XCI6XCJaXCIsXCLFvVwiOlwiWlwiLFwixbpcIjpcInpcIixcIsW8XCI6XCJ6XCIsXCLFvlwiOlwielwiLFwixLJcIjpcIklKXCIsXCLEs1wiOlwiaWpcIixcIsWSXCI6XCJPZVwiLFwixZNcIjpcIm9lXCIsXCLFiVwiOlwiJ25cIixcIsW/XCI6XCJzXCJ9KSxmcj1ZdCh7XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiYjMzk7XCJ9KTtmdW5jdGlvbiBhcihuKXtyZXR1cm5cIlxcXFxcIit2dFtuXX1mdW5jdGlvbiBjcihuKXtyZXR1cm4gYXQudGVzdChuKX1mdW5jdGlvbiBscihuKXt2YXIgdD0tMSxyPUFycmF5KG4uc2l6ZSk7cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbihuLGUpe3JbKyt0XT1bZSxuXX0pLHJ9ZnVuY3Rpb24gc3Iobix0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG4odChyKSl9fWZ1bmN0aW9uIGhyKG4sdCl7Zm9yKHZhciByPS0xLHU9bi5sZW5ndGgsaT0wLG89W107KytyPHU7KXt2YXIgZj1uW3JdO2YhPT10JiZmIT09ZXx8KG5bcl09ZSxvW2krK109cil9cmV0dXJuIG99ZnVuY3Rpb24gcHIobil7dmFyIHQ9LTEscj1BcnJheShuLnNpemUpO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24obil7clsrK3RdPW59KSxyfWZ1bmN0aW9uIHZyKG4pe3ZhciB0PS0xLHI9QXJyYXkobi5zaXplKTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKG4pe3JbKyt0XT1bbixuXX0pLHJ9ZnVuY3Rpb24gX3Iobil7cmV0dXJuIGNyKG4pP2Z1bmN0aW9uKG4pe2Zvcih2YXIgdD1vdC5sYXN0SW5kZXg9MDtvdC50ZXN0KG4pOykrK3Q7cmV0dXJuIHR9KG4pOlB0KG4pfWZ1bmN0aW9uIGdyKG4pe3JldHVybiBjcihuKT9mdW5jdGlvbihuKXtyZXR1cm4gbi5tYXRjaChvdCl8fFtdfShuKTpmdW5jdGlvbihuKXtyZXR1cm4gbi5zcGxpdChcIlwiKX0obil9dmFyIHlyPVl0KHtcIiZhbXA7XCI6XCImXCIsXCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImcXVvdDtcIjonXCInLFwiJiMzOTtcIjpcIidcIn0pLGRyPWZ1bmN0aW9uIE1uKEZuKXt2YXIgTm4sUG49KEZuPW51bGw9PUZuP2J0OmRyLmRlZmF1bHRzKGJ0Lk9iamVjdCgpLEZuLGRyLnBpY2soYnQsbHQpKSkuQXJyYXkscW49Rm4uRGF0ZSxabj1Gbi5FcnJvcixLbj1Gbi5GdW5jdGlvbixWbj1Gbi5NYXRoLEduPUZuLk9iamVjdCxIbj1Gbi5SZWdFeHAsSm49Rm4uU3RyaW5nLFluPUZuLlR5cGVFcnJvcixRbj1Qbi5wcm90b3R5cGUsWG49S24ucHJvdG90eXBlLG50PUduLnByb3RvdHlwZSx0dD1GbltcIl9fY29yZS1qc19zaGFyZWRfX1wiXSxydD1Ybi50b1N0cmluZyxldD1udC5oYXNPd25Qcm9wZXJ0eSxvdD0wLGF0PShObj0vW14uXSskLy5leGVjKHR0JiZ0dC5rZXlzJiZ0dC5rZXlzLklFX1BST1RPfHxcIlwiKSk/XCJTeW1ib2woc3JjKV8xLlwiK05uOlwiXCIsdnQ9bnQudG9TdHJpbmcseXQ9cnQuY2FsbChHbiksZHQ9YnQuXyx3dD1IbihcIl5cIitydC5jYWxsKGV0KS5yZXBsYWNlKHduLFwiXFxcXCQmXCIpLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csXCIkMS4qP1wiKStcIiRcIiksbXQ9eHQ/Rm4uQnVmZmVyOm4sanQ9Rm4uU3ltYm9sLEF0PUZuLlVpbnQ4QXJyYXksUHQ9bXQ/bXQuYWxsb2NVbnNhZmU6bixZdD1zcihHbi5nZXRQcm90b3R5cGVPZixHbiksYnI9R24uY3JlYXRlLHdyPW50LnByb3BlcnR5SXNFbnVtZXJhYmxlLG1yPVFuLnNwbGljZSx4cj1qdD9qdC5pc0NvbmNhdFNwcmVhZGFibGU6bixqcj1qdD9qdC5pdGVyYXRvcjpuLEFyPWp0P2p0LnRvU3RyaW5nVGFnOm4sa3I9ZnVuY3Rpb24oKXt0cnl7dmFyIG49amkoR24sXCJkZWZpbmVQcm9wZXJ0eVwiKTtyZXR1cm4gbih7fSxcIlwiLHt9KSxufWNhdGNoKG4pe319KCksT3I9Rm4uY2xlYXJUaW1lb3V0IT09YnQuY2xlYXJUaW1lb3V0JiZGbi5jbGVhclRpbWVvdXQsSXI9cW4mJnFuLm5vdyE9PWJ0LkRhdGUubm93JiZxbi5ub3csUnI9Rm4uc2V0VGltZW91dCE9PWJ0LnNldFRpbWVvdXQmJkZuLnNldFRpbWVvdXQsRXI9Vm4uY2VpbCx6cj1Wbi5mbG9vcixTcj1Hbi5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsTHI9bXQ/bXQuaXNCdWZmZXI6bixXcj1Gbi5pc0Zpbml0ZSxDcj1Rbi5qb2luLFVyPXNyKEduLmtleXMsR24pLEJyPVZuLm1heCxUcj1Wbi5taW4sJHI9cW4ubm93LERyPUZuLnBhcnNlSW50LE1yPVZuLnJhbmRvbSxGcj1Rbi5yZXZlcnNlLE5yPWppKEZuLFwiRGF0YVZpZXdcIiksUHI9amkoRm4sXCJNYXBcIikscXI9amkoRm4sXCJQcm9taXNlXCIpLFpyPWppKEZuLFwiU2V0XCIpLEtyPWppKEZuLFwiV2Vha01hcFwiKSxWcj1qaShHbixcImNyZWF0ZVwiKSxHcj1LciYmbmV3IEtyLEhyPXt9LEpyPVlpKE5yKSxZcj1ZaShQciksUXI9WWkocXIpLFhyPVlpKFpyKSxuZT1ZaShLciksdGU9anQ/anQucHJvdG90eXBlOm4scmU9dGU/dGUudmFsdWVPZjpuLGVlPXRlP3RlLnRvU3RyaW5nOm47ZnVuY3Rpb24gdWUobil7aWYoZ2YobikmJiF1ZihuKSYmIShuIGluc3RhbmNlb2YgYWUpKXtpZihuIGluc3RhbmNlb2YgZmUpcmV0dXJuIG47aWYoZXQuY2FsbChuLFwiX193cmFwcGVkX19cIikpcmV0dXJuIFFpKG4pfXJldHVybiBuZXcgZmUobil9dmFyIGllPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gZnVuY3Rpb24ocil7aWYoIV9mKHIpKXJldHVybnt9O2lmKGJyKXJldHVybiBicihyKTt0LnByb3RvdHlwZT1yO3ZhciBlPW5ldyB0O3JldHVybiB0LnByb3RvdHlwZT1uLGV9fSgpO2Z1bmN0aW9uIG9lKCl7fWZ1bmN0aW9uIGZlKHQscil7dGhpcy5fX3dyYXBwZWRfXz10LHRoaXMuX19hY3Rpb25zX189W10sdGhpcy5fX2NoYWluX189ISFyLHRoaXMuX19pbmRleF9fPTAsdGhpcy5fX3ZhbHVlc19fPW59ZnVuY3Rpb24gYWUobil7dGhpcy5fX3dyYXBwZWRfXz1uLHRoaXMuX19hY3Rpb25zX189W10sdGhpcy5fX2Rpcl9fPTEsdGhpcy5fX2ZpbHRlcmVkX189ITEsdGhpcy5fX2l0ZXJhdGVlc19fPVtdLHRoaXMuX190YWtlQ291bnRfXz1rLHRoaXMuX192aWV3c19fPVtdfWZ1bmN0aW9uIGNlKG4pe3ZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7Kyt0PHI7KXt2YXIgZT1uW3RdO3RoaXMuc2V0KGVbMF0sZVsxXSl9fWZ1bmN0aW9uIGxlKG4pe3ZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7Kyt0PHI7KXt2YXIgZT1uW3RdO3RoaXMuc2V0KGVbMF0sZVsxXSl9fWZ1bmN0aW9uIHNlKG4pe3ZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7Kyt0PHI7KXt2YXIgZT1uW3RdO3RoaXMuc2V0KGVbMF0sZVsxXSl9fWZ1bmN0aW9uIGhlKG4pe3ZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoO2Zvcih0aGlzLl9fZGF0YV9fPW5ldyBzZTsrK3Q8cjspdGhpcy5hZGQoblt0XSl9ZnVuY3Rpb24gcGUobil7dmFyIHQ9dGhpcy5fX2RhdGFfXz1uZXcgbGUobik7dGhpcy5zaXplPXQuc2l6ZX1mdW5jdGlvbiB2ZShuLHQpe3ZhciByPXVmKG4pLGU9IXImJmVmKG4pLHU9IXImJiFlJiZjZihuKSxpPSFyJiYhZSYmIXUmJkFmKG4pLG89cnx8ZXx8dXx8aSxmPW8/bnIobi5sZW5ndGgsSm4pOltdLGE9Zi5sZW5ndGg7Zm9yKHZhciBjIGluIG4pIXQmJiFldC5jYWxsKG4sYyl8fG8mJihcImxlbmd0aFwiPT1jfHx1JiYoXCJvZmZzZXRcIj09Y3x8XCJwYXJlbnRcIj09Yyl8fGkmJihcImJ1ZmZlclwiPT1jfHxcImJ5dGVMZW5ndGhcIj09Y3x8XCJieXRlT2Zmc2V0XCI9PWMpfHx6aShjLGEpKXx8Zi5wdXNoKGMpO3JldHVybiBmfWZ1bmN0aW9uIF9lKHQpe3ZhciByPXQubGVuZ3RoO3JldHVybiByP3RbY3UoMCxyLTEpXTpufWZ1bmN0aW9uIGdlKHQscixlKXsoZT09PW58fG5mKHRbcl0sZSkpJiYoZSE9PW58fHIgaW4gdCl8fG1lKHQscixlKX1mdW5jdGlvbiB5ZSh0LHIsZSl7dmFyIHU9dFtyXTtldC5jYWxsKHQscikmJm5mKHUsZSkmJihlIT09bnx8ciBpbiB0KXx8bWUodCxyLGUpfWZ1bmN0aW9uIGRlKG4sdCl7Zm9yKHZhciByPW4ubGVuZ3RoO3ItLTspaWYobmYobltyXVswXSx0KSlyZXR1cm4gcjtyZXR1cm4tMX1mdW5jdGlvbiBiZShuLHQscixlKXtyZXR1cm4gUmUobixmdW5jdGlvbihuLHUsaSl7dChlLG4scihuKSxpKX0pLGV9ZnVuY3Rpb24gd2Uobix0KXtyZXR1cm4gbiYmTnUodCxLZih0KSxuKX1mdW5jdGlvbiBtZShuLHQscil7XCJfX3Byb3RvX19cIj09dCYma3I/a3Iobix0LHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTpyLHdyaXRhYmxlOiEwfSk6blt0XT1yfWZ1bmN0aW9uIHhlKHQscil7Zm9yKHZhciBlPS0xLHU9ci5sZW5ndGgsaT1Qbih1KSxvPW51bGw9PXQ7KytlPHU7KWlbZV09bz9uOkZmKHQscltlXSk7cmV0dXJuIGl9ZnVuY3Rpb24gamUodCxyLGUpe3JldHVybiB0PT10JiYoZSE9PW4mJih0PXQ8PWU/dDplKSxyIT09biYmKHQ9dD49cj90OnIpKSx0fWZ1bmN0aW9uIEFlKHQscixlLGYsYSxjKXt2YXIgbCxzPXImdSxoPXImaSxwPXImbztpZihlJiYobD1hP2UodCxmLGEsYyk6ZSh0KSksbCE9PW4pcmV0dXJuIGw7aWYoIV9mKHQpKXJldHVybiB0O3ZhciB2PXVmKHQpO2lmKHYpe2lmKGw9ZnVuY3Rpb24obil7dmFyIHQ9bi5sZW5ndGgscj1uZXcgbi5jb25zdHJ1Y3Rvcih0KTtyZXR1cm4gdCYmXCJzdHJpbmdcIj09dHlwZW9mIG5bMF0mJmV0LmNhbGwobixcImluZGV4XCIpJiYoci5pbmRleD1uLmluZGV4LHIuaW5wdXQ9bi5pbnB1dCkscn0odCksIXMpcmV0dXJuIEZ1KHQsbCl9ZWxzZXt2YXIgXz1PaSh0KSxnPV89PUJ8fF89PVQ7aWYoY2YodCkpcmV0dXJuIFV1KHQscyk7aWYoXz09Rnx8Xz09RXx8ZyYmIWEpe2lmKGw9aHx8Zz97fTpSaSh0KSwhcylyZXR1cm4gaD9mdW5jdGlvbihuLHQpe3JldHVybiBOdShuLGtpKG4pLHQpfSh0LGZ1bmN0aW9uKG4scil7cmV0dXJuIG4mJk51KHQsVmYodCksbil9KGwpKTpmdW5jdGlvbihuLHQpe3JldHVybiBOdShuLEFpKG4pLHQpfSh0LHdlKGwsdCkpfWVsc2V7aWYoIXB0W19dKXJldHVybiBhP3Q6e307bD1mdW5jdGlvbihuLHQscil7dmFyIGUsdSxpLG89bi5jb25zdHJ1Y3Rvcjtzd2l0Y2godCl7Y2FzZSBIOnJldHVybiBCdShuKTtjYXNlIEw6Y2FzZSBXOnJldHVybiBuZXcgbygrbik7Y2FzZSBKOnJldHVybiBmdW5jdGlvbihuLHQpe3ZhciByPXQ/QnUobi5idWZmZXIpOm4uYnVmZmVyO3JldHVybiBuZXcgbi5jb25zdHJ1Y3RvcihyLG4uYnl0ZU9mZnNldCxuLmJ5dGVMZW5ndGgpfShuLHIpO2Nhc2UgWTpjYXNlIFE6Y2FzZSBYOmNhc2Ugbm46Y2FzZSB0bjpjYXNlIHJuOmNhc2UgZW46Y2FzZSB1bjpjYXNlIG9uOnJldHVybiBUdShuLHIpO2Nhc2UgJDpyZXR1cm4gbmV3IG87Y2FzZSBEOmNhc2UgWjpyZXR1cm4gbmV3IG8obik7Y2FzZSBQOnJldHVybihpPW5ldyh1PW4pLmNvbnN0cnVjdG9yKHUuc291cmNlLFNuLmV4ZWModSkpKS5sYXN0SW5kZXg9dS5sYXN0SW5kZXgsaTtjYXNlIHE6cmV0dXJuIG5ldyBvO2Nhc2UgSzpyZXR1cm4gZT1uLHJlP0duKHJlLmNhbGwoZSkpOnt9fX0odCxfLHMpfX1jfHwoYz1uZXcgcGUpO3ZhciB5PWMuZ2V0KHQpO2lmKHkpcmV0dXJuIHk7Yy5zZXQodCxsKSxtZih0KT90LmZvckVhY2goZnVuY3Rpb24obil7bC5hZGQoQWUobixyLGUsbix0LGMpKX0pOnlmKHQpJiZ0LmZvckVhY2goZnVuY3Rpb24obix1KXtsLnNldCh1LEFlKG4scixlLHUsdCxjKSl9KTt2YXIgZD12P246KHA/aD9naTpfaTpoP1ZmOktmKSh0KTtyZXR1cm4gV3QoZHx8dCxmdW5jdGlvbihuLHUpe2QmJihuPXRbdT1uXSkseWUobCx1LEFlKG4scixlLHUsdCxjKSl9KSxsfWZ1bmN0aW9uIGtlKHQscixlKXt2YXIgdT1lLmxlbmd0aDtpZihudWxsPT10KXJldHVybiF1O2Zvcih0PUduKHQpO3UtLTspe3ZhciBpPWVbdV0sbz1yW2ldLGY9dFtpXTtpZihmPT09biYmIShpIGluIHQpfHwhbyhmKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBPZSh0LGUsdSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgWW4ocik7cmV0dXJuIE5pKGZ1bmN0aW9uKCl7dC5hcHBseShuLHUpfSxlKX1mdW5jdGlvbiBJZShuLHIsZSx1KXt2YXIgaT0tMSxvPUJ0LGY9ITAsYT1uLmxlbmd0aCxjPVtdLGw9ci5sZW5ndGg7aWYoIWEpcmV0dXJuIGM7ZSYmKHI9JHQocix0cihlKSkpLHU/KG89VHQsZj0hMSk6ci5sZW5ndGg+PXQmJihvPWVyLGY9ITEscj1uZXcgaGUocikpO246Zm9yKDsrK2k8YTspe3ZhciBzPW5baV0saD1udWxsPT1lP3M6ZShzKTtpZihzPXV8fDAhPT1zP3M6MCxmJiZoPT1oKXtmb3IodmFyIHA9bDtwLS07KWlmKHJbcF09PT1oKWNvbnRpbnVlIG47Yy5wdXNoKHMpfWVsc2UgbyhyLGgsdSl8fGMucHVzaChzKX1yZXR1cm4gY311ZS50ZW1wbGF0ZVNldHRpbmdzPXtlc2NhcGU6dm4sZXZhbHVhdGU6X24saW50ZXJwb2xhdGU6Z24sdmFyaWFibGU6XCJcIixpbXBvcnRzOntfOnVlfX0sdWUucHJvdG90eXBlPW9lLnByb3RvdHlwZSx1ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9dWUsZmUucHJvdG90eXBlPWllKG9lLnByb3RvdHlwZSksZmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWZlLGFlLnByb3RvdHlwZT1pZShvZS5wcm90b3R5cGUpLGFlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hZSxjZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPVZyP1ZyKG51bGwpOnt9LHRoaXMuc2l6ZT0wfSxjZS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMuaGFzKG4pJiZkZWxldGUgdGhpcy5fX2RhdGFfX1tuXTtyZXR1cm4gdGhpcy5zaXplLT10PzE6MCx0fSxjZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciByPXRoaXMuX19kYXRhX187aWYoVnIpe3ZhciBlPXJbdF07cmV0dXJuXCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCI9PT1lP246ZX1yZXR1cm4gZXQuY2FsbChyLHQpP3JbdF06bn0sY2UucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXt2YXIgcj10aGlzLl9fZGF0YV9fO3JldHVybiBWcj9yW3RdIT09bjpldC5jYWxsKHIsdCl9LGNlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxyKXt2YXIgZT10aGlzLl9fZGF0YV9fO3JldHVybiB0aGlzLnNpemUrPXRoaXMuaGFzKHQpPzA6MSxlW3RdPVZyJiZyPT09bj9cIl9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX19cIjpyLHRoaXN9LGxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189W10sdGhpcy5zaXplPTB9LGxlLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5fX2RhdGFfXyxyPWRlKHQsbik7cmV0dXJuIShyPDB8fChyPT10Lmxlbmd0aC0xP3QucG9wKCk6bXIuY2FsbCh0LHIsMSksLS10aGlzLnNpemUsMCkpfSxsZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciByPXRoaXMuX19kYXRhX18sZT1kZShyLHQpO3JldHVybiBlPDA/bjpyW2VdWzFdfSxsZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKG4pe3JldHVybiBkZSh0aGlzLl9fZGF0YV9fLG4pPi0xfSxsZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKG4sdCl7dmFyIHI9dGhpcy5fX2RhdGFfXyxlPWRlKHIsbik7cmV0dXJuIGU8MD8oKyt0aGlzLnNpemUsci5wdXNoKFtuLHRdKSk6cltlXVsxXT10LHRoaXN9LHNlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuc2l6ZT0wLHRoaXMuX19kYXRhX189e2hhc2g6bmV3IGNlLG1hcDpuZXcoUHJ8fGxlKSxzdHJpbmc6bmV3IGNlfX0sc2UucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihuKXt2YXIgdD1taSh0aGlzLG4pLmRlbGV0ZShuKTtyZXR1cm4gdGhpcy5zaXplLT10PzE6MCx0fSxzZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKG4pe3JldHVybiBtaSh0aGlzLG4pLmdldChuKX0sc2UucHJvdG90eXBlLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gbWkodGhpcyxuKS5oYXMobil9LHNlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24obix0KXt2YXIgcj1taSh0aGlzLG4pLGU9ci5zaXplO3JldHVybiByLnNldChuLHQpLHRoaXMuc2l6ZSs9ci5zaXplPT1lPzA6MSx0aGlzfSxoZS5wcm90b3R5cGUuYWRkPWhlLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLl9fZGF0YV9fLnNldChuLFwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiKSx0aGlzfSxoZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhuKX0scGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1uZXcgbGUsdGhpcy5zaXplPTB9LHBlLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5fX2RhdGFfXyxyPXQuZGVsZXRlKG4pO3JldHVybiB0aGlzLnNpemU9dC5zaXplLHJ9LHBlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KG4pfSxwZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhuKX0scGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihuLHIpe3ZhciBlPXRoaXMuX19kYXRhX187aWYoZSBpbnN0YW5jZW9mIGxlKXt2YXIgdT1lLl9fZGF0YV9fO2lmKCFQcnx8dS5sZW5ndGg8dC0xKXJldHVybiB1LnB1c2goW24scl0pLHRoaXMuc2l6ZT0rK2Uuc2l6ZSx0aGlzO2U9dGhpcy5fX2RhdGFfXz1uZXcgc2UodSl9cmV0dXJuIGUuc2V0KG4sciksdGhpcy5zaXplPWUuc2l6ZSx0aGlzfTt2YXIgUmU9WnUoQmUpLEVlPVp1KFRlLCEwKTtmdW5jdGlvbiB6ZShuLHQpe3ZhciByPSEwO3JldHVybiBSZShuLGZ1bmN0aW9uKG4sZSx1KXtyZXR1cm4gcj0hIXQobixlLHUpfSkscn1mdW5jdGlvbiBTZSh0LHIsZSl7Zm9yKHZhciB1PS0xLGk9dC5sZW5ndGg7Kyt1PGk7KXt2YXIgbz10W3VdLGY9cihvKTtpZihudWxsIT1mJiYoYT09PW4/Zj09ZiYmIWpmKGYpOmUoZixhKSkpdmFyIGE9ZixjPW99cmV0dXJuIGN9ZnVuY3Rpb24gTGUobix0KXt2YXIgcj1bXTtyZXR1cm4gUmUobixmdW5jdGlvbihuLGUsdSl7dChuLGUsdSkmJnIucHVzaChuKX0pLHJ9ZnVuY3Rpb24gV2Uobix0LHIsZSx1KXt2YXIgaT0tMSxvPW4ubGVuZ3RoO2ZvcihyfHwocj1FaSksdXx8KHU9W10pOysraTxvOyl7dmFyIGY9bltpXTt0PjAmJnIoZik/dD4xP1dlKGYsdC0xLHIsZSx1KTpEdCh1LGYpOmV8fCh1W3UubGVuZ3RoXT1mKX1yZXR1cm4gdX12YXIgQ2U9S3UoKSxVZT1LdSghMCk7ZnVuY3Rpb24gQmUobix0KXtyZXR1cm4gbiYmQ2Uobix0LEtmKX1mdW5jdGlvbiBUZShuLHQpe3JldHVybiBuJiZVZShuLHQsS2YpfWZ1bmN0aW9uICRlKG4sdCl7cmV0dXJuIFV0KHQsZnVuY3Rpb24odCl7cmV0dXJuIGhmKG5bdF0pfSl9ZnVuY3Rpb24gRGUodCxyKXtmb3IodmFyIGU9MCx1PShyPVN1KHIsdCkpLmxlbmd0aDtudWxsIT10JiZlPHU7KXQ9dFtKaShyW2UrK10pXTtyZXR1cm4gZSYmZT09dT90Om59ZnVuY3Rpb24gTWUobix0LHIpe3ZhciBlPXQobik7cmV0dXJuIHVmKG4pP2U6RHQoZSxyKG4pKX1mdW5jdGlvbiBGZSh0KXtyZXR1cm4gbnVsbD09dD90PT09bj9WOk06QXImJkFyIGluIEduKHQpP2Z1bmN0aW9uKHQpe3ZhciByPWV0LmNhbGwodCxBciksZT10W0FyXTt0cnl7dFtBcl09bjt2YXIgdT0hMH1jYXRjaChuKXt9dmFyIGk9dnQuY2FsbCh0KTtyZXR1cm4gdSYmKHI/dFtBcl09ZTpkZWxldGUgdFtBcl0pLGl9KHQpOmZ1bmN0aW9uKG4pe3JldHVybiB2dC5jYWxsKG4pfSh0KX1mdW5jdGlvbiBOZShuLHQpe3JldHVybiBuPnR9ZnVuY3Rpb24gUGUobix0KXtyZXR1cm4gbnVsbCE9biYmZXQuY2FsbChuLHQpfWZ1bmN0aW9uIHFlKG4sdCl7cmV0dXJuIG51bGwhPW4mJnQgaW4gR24obil9ZnVuY3Rpb24gWmUodCxyLGUpe2Zvcih2YXIgdT1lP1R0OkJ0LGk9dFswXS5sZW5ndGgsbz10Lmxlbmd0aCxmPW8sYT1QbihvKSxjPTEvMCxsPVtdO2YtLTspe3ZhciBzPXRbZl07ZiYmciYmKHM9JHQocyx0cihyKSkpLGM9VHIocy5sZW5ndGgsYyksYVtmXT0hZSYmKHJ8fGk+PTEyMCYmcy5sZW5ndGg+PTEyMCk/bmV3IGhlKGYmJnMpOm59cz10WzBdO3ZhciBoPS0xLHA9YVswXTtuOmZvcig7KytoPGkmJmwubGVuZ3RoPGM7KXt2YXIgdj1zW2hdLF89cj9yKHYpOnY7aWYodj1lfHwwIT09dj92OjAsIShwP2VyKHAsXyk6dShsLF8sZSkpKXtmb3IoZj1vOy0tZjspe3ZhciBnPWFbZl07aWYoIShnP2VyKGcsXyk6dSh0W2ZdLF8sZSkpKWNvbnRpbnVlIG59cCYmcC5wdXNoKF8pLGwucHVzaCh2KX19cmV0dXJuIGx9ZnVuY3Rpb24gS2UodCxyLGUpe3ZhciB1PW51bGw9PSh0PURpKHQscj1TdShyLHQpKSk/dDp0W0ppKGNvKHIpKV07cmV0dXJuIG51bGw9PXU/bjpTdCh1LHQsZSl9ZnVuY3Rpb24gVmUobil7cmV0dXJuIGdmKG4pJiZGZShuKT09RX1mdW5jdGlvbiBHZSh0LHIsZSx1LGkpe3JldHVybiB0PT09cnx8KG51bGw9PXR8fG51bGw9PXJ8fCFnZih0KSYmIWdmKHIpP3QhPXQmJnIhPXI6ZnVuY3Rpb24odCxyLGUsdSxpLG8pe3ZhciBjPXVmKHQpLGw9dWYocikscz1jP3o6T2kodCksaD1sP3o6T2kocikscD0ocz1zPT1FP0Y6cyk9PUYsdj0oaD1oPT1FP0Y6aCk9PUYsXz1zPT1oO2lmKF8mJmNmKHQpKXtpZighY2YocikpcmV0dXJuITE7Yz0hMCxwPSExfWlmKF8mJiFwKXJldHVybiBvfHwobz1uZXcgcGUpLGN8fEFmKHQpP3BpKHQscixlLHUsaSxvKTpmdW5jdGlvbihuLHQscixlLHUsaSxvKXtzd2l0Y2gocyl7Y2FzZSBKOmlmKG4uYnl0ZUxlbmd0aCE9dC5ieXRlTGVuZ3RofHxuLmJ5dGVPZmZzZXQhPXQuYnl0ZU9mZnNldClyZXR1cm4hMTtuPW4uYnVmZmVyLHQ9dC5idWZmZXI7Y2FzZSBIOnJldHVybiEobi5ieXRlTGVuZ3RoIT10LmJ5dGVMZW5ndGh8fCFpKG5ldyBBdChuKSxuZXcgQXQodCkpKTtjYXNlIEw6Y2FzZSBXOmNhc2UgRDpyZXR1cm4gbmYoK24sK3QpO2Nhc2UgVTpyZXR1cm4gbi5uYW1lPT10Lm5hbWUmJm4ubWVzc2FnZT09dC5tZXNzYWdlO2Nhc2UgUDpjYXNlIFo6cmV0dXJuIG49PXQrXCJcIjtjYXNlICQ6dmFyIGM9bHI7Y2FzZSBxOnZhciBsPWUmZjtpZihjfHwoYz1wciksbi5zaXplIT10LnNpemUmJiFsKXJldHVybiExO3ZhciBoPW8uZ2V0KG4pO2lmKGgpcmV0dXJuIGg9PXQ7ZXw9YSxvLnNldChuLHQpO3ZhciBwPXBpKGMobiksYyh0KSxlLHUsaSxvKTtyZXR1cm4gby5kZWxldGUobikscDtjYXNlIEs6aWYocmUpcmV0dXJuIHJlLmNhbGwobik9PXJlLmNhbGwodCl9cmV0dXJuITF9KHQsciwwLGUsdSxpLG8pO2lmKCEoZSZmKSl7dmFyIGc9cCYmZXQuY2FsbCh0LFwiX193cmFwcGVkX19cIikseT12JiZldC5jYWxsKHIsXCJfX3dyYXBwZWRfX1wiKTtpZihnfHx5KXt2YXIgZD1nP3QudmFsdWUoKTp0LGI9eT9yLnZhbHVlKCk6cjtyZXR1cm4gb3x8KG89bmV3IHBlKSxpKGQsYixlLHUsbyl9fXJldHVybiEhXyYmKG98fChvPW5ldyBwZSksZnVuY3Rpb24odCxyLGUsdSxpLG8pe3ZhciBhPWUmZixjPV9pKHQpLGw9Yy5sZW5ndGg7aWYobCE9X2kocikubGVuZ3RoJiYhYSlyZXR1cm4hMTtmb3IodmFyIHM9bDtzLS07KXt2YXIgaD1jW3NdO2lmKCEoYT9oIGluIHI6ZXQuY2FsbChyLGgpKSlyZXR1cm4hMX12YXIgcD1vLmdldCh0KTtpZihwJiZvLmdldChyKSlyZXR1cm4gcD09cjt2YXIgdj0hMDtvLnNldCh0LHIpLG8uc2V0KHIsdCk7Zm9yKHZhciBfPWE7KytzPGw7KXt2YXIgZz10W2g9Y1tzXV0seT1yW2hdO2lmKHUpdmFyIGQ9YT91KHksZyxoLHIsdCxvKTp1KGcseSxoLHQscixvKTtpZighKGQ9PT1uP2c9PT15fHxpKGcseSxlLHUsbyk6ZCkpe3Y9ITE7YnJlYWt9X3x8KF89XCJjb25zdHJ1Y3RvclwiPT1oKX1pZih2JiYhXyl7dmFyIGI9dC5jb25zdHJ1Y3Rvcix3PXIuY29uc3RydWN0b3I7YiE9dyYmXCJjb25zdHJ1Y3RvclwiaW4gdCYmXCJjb25zdHJ1Y3RvclwiaW4gciYmIShcImZ1bmN0aW9uXCI9PXR5cGVvZiBiJiZiIGluc3RhbmNlb2YgYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgdyYmdyBpbnN0YW5jZW9mIHcpJiYodj0hMSl9cmV0dXJuIG8uZGVsZXRlKHQpLG8uZGVsZXRlKHIpLHZ9KHQscixlLHUsaSxvKSl9KHQscixlLHUsR2UsaSkpfWZ1bmN0aW9uIEhlKHQscixlLHUpe3ZhciBpPWUubGVuZ3RoLG89aSxjPSF1O2lmKG51bGw9PXQpcmV0dXJuIW87Zm9yKHQ9R24odCk7aS0tOyl7dmFyIGw9ZVtpXTtpZihjJiZsWzJdP2xbMV0hPT10W2xbMF1dOiEobFswXWluIHQpKXJldHVybiExfWZvcig7KytpPG87KXt2YXIgcz0obD1lW2ldKVswXSxoPXRbc10scD1sWzFdO2lmKGMmJmxbMl0pe2lmKGg9PT1uJiYhKHMgaW4gdCkpcmV0dXJuITF9ZWxzZXt2YXIgdj1uZXcgcGU7aWYodSl2YXIgXz11KGgscCxzLHQscix2KTtpZighKF89PT1uP0dlKHAsaCxmfGEsdSx2KTpfKSlyZXR1cm4hMX19cmV0dXJuITB9ZnVuY3Rpb24gSmUobil7cmV0dXJuISghX2Yobil8fCh0PW4sYXQmJmF0IGluIHQpKSYmKGhmKG4pP3d0OkNuKS50ZXN0KFlpKG4pKTt2YXIgdH1mdW5jdGlvbiBZZShuKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP246bnVsbD09bj9kYTpcIm9iamVjdFwiPT10eXBlb2Ygbj91ZihuKT9ydShuWzBdLG5bMV0pOnR1KG4pOklhKG4pfWZ1bmN0aW9uIFFlKG4pe2lmKCFVaShuKSlyZXR1cm4gVXIobik7dmFyIHQ9W107Zm9yKHZhciByIGluIEduKG4pKWV0LmNhbGwobixyKSYmXCJjb25zdHJ1Y3RvclwiIT1yJiZ0LnB1c2gocik7cmV0dXJuIHR9ZnVuY3Rpb24gWGUobix0KXtyZXR1cm4gbjx0fWZ1bmN0aW9uIG51KG4sdCl7dmFyIHI9LTEsZT1mZihuKT9QbihuLmxlbmd0aCk6W107cmV0dXJuIFJlKG4sZnVuY3Rpb24obix1LGkpe2VbKytyXT10KG4sdSxpKX0pLGV9ZnVuY3Rpb24gdHUobil7dmFyIHQ9eGkobik7cmV0dXJuIDE9PXQubGVuZ3RoJiZ0WzBdWzJdP1RpKHRbMF1bMF0sdFswXVsxXSk6ZnVuY3Rpb24ocil7cmV0dXJuIHI9PT1ufHxIZShyLG4sdCl9fWZ1bmN0aW9uIHJ1KHQscil7cmV0dXJuIExpKHQpJiZCaShyKT9UaShKaSh0KSxyKTpmdW5jdGlvbihlKXt2YXIgdT1GZihlLHQpO3JldHVybiB1PT09biYmdT09PXI/TmYoZSx0KTpHZShyLHUsZnxhKX19ZnVuY3Rpb24gZXUodCxyLGUsdSxpKXt0IT09ciYmQ2UocixmdW5jdGlvbihvLGYpe2lmKGl8fChpPW5ldyBwZSksX2YobykpIWZ1bmN0aW9uKHQscixlLHUsaSxvLGYpe3ZhciBhPU1pKHQsZSksYz1NaShyLGUpLGw9Zi5nZXQoYyk7aWYobClnZSh0LGUsbCk7ZWxzZXt2YXIgcz1vP28oYSxjLGUrXCJcIix0LHIsZik6bixoPXM9PT1uO2lmKGgpe3ZhciBwPXVmKGMpLHY9IXAmJmNmKGMpLF89IXAmJiF2JiZBZihjKTtzPWMscHx8dnx8Xz91ZihhKT9zPWE6YWYoYSk/cz1GdShhKTp2PyhoPSExLHM9VXUoYywhMCkpOl8/KGg9ITEscz1UdShjLCEwKSk6cz1bXTpiZihjKXx8ZWYoYyk/KHM9YSxlZihhKT9zPUxmKGEpOl9mKGEpJiYhaGYoYSl8fChzPVJpKGMpKSk6aD0hMX1oJiYoZi5zZXQoYyxzKSxpKHMsYyx1LG8sZiksZi5kZWxldGUoYykpLGdlKHQsZSxzKX19KHQscixmLGUsZXUsdSxpKTtlbHNle3ZhciBhPXU/dShNaSh0LGYpLG8sZitcIlwiLHQscixpKTpuO2E9PT1uJiYoYT1vKSxnZSh0LGYsYSl9fSxWZil9ZnVuY3Rpb24gdXUodCxyKXt2YXIgZT10Lmxlbmd0aDtpZihlKXJldHVybiB6aShyKz1yPDA/ZTowLGUpP3Rbcl06bn1mdW5jdGlvbiBpdShuLHQscil7dmFyIGU9LTE7cmV0dXJuIHQ9JHQodC5sZW5ndGg/dDpbZGFdLHRyKHdpKCkpKSxmdW5jdGlvbihuLHQpe3ZhciBlPW4ubGVuZ3RoO2ZvcihuLnNvcnQoZnVuY3Rpb24obix0KXtyZXR1cm4gZnVuY3Rpb24obix0LHIpe2Zvcih2YXIgZT0tMSx1PW4uY3JpdGVyaWEsaT10LmNyaXRlcmlhLG89dS5sZW5ndGgsZj1yLmxlbmd0aDsrK2U8bzspe3ZhciBhPSR1KHVbZV0saVtlXSk7aWYoYSl7aWYoZT49ZilyZXR1cm4gYTt2YXIgYz1yW2VdO3JldHVybiBhKihcImRlc2NcIj09Yz8tMToxKX19cmV0dXJuIG4uaW5kZXgtdC5pbmRleH0obix0LHIpfSk7ZS0tOyluW2VdPW5bZV0udmFsdWU7cmV0dXJuIG59KG51KG4sZnVuY3Rpb24obixyLHUpe3JldHVybntjcml0ZXJpYTokdCh0LGZ1bmN0aW9uKHQpe3JldHVybiB0KG4pfSksaW5kZXg6KytlLHZhbHVlOm59fSkpfWZ1bmN0aW9uIG91KG4sdCxyKXtmb3IodmFyIGU9LTEsdT10Lmxlbmd0aCxpPXt9OysrZTx1Oyl7dmFyIG89dFtlXSxmPURlKG4sbyk7cihmLG8pJiZodShpLFN1KG8sbiksZil9cmV0dXJuIGl9ZnVuY3Rpb24gZnUobix0LHIsZSl7dmFyIHU9ZT9WdDpLdCxpPS0xLG89dC5sZW5ndGgsZj1uO2ZvcihuPT09dCYmKHQ9RnUodCkpLHImJihmPSR0KG4sdHIocikpKTsrK2k8bzspZm9yKHZhciBhPTAsYz10W2ldLGw9cj9yKGMpOmM7KGE9dShmLGwsYSxlKSk+LTE7KWYhPT1uJiZtci5jYWxsKGYsYSwxKSxtci5jYWxsKG4sYSwxKTtyZXR1cm4gbn1mdW5jdGlvbiBhdShuLHQpe2Zvcih2YXIgcj1uP3QubGVuZ3RoOjAsZT1yLTE7ci0tOyl7dmFyIHU9dFtyXTtpZihyPT1lfHx1IT09aSl7dmFyIGk9dTt6aSh1KT9tci5jYWxsKG4sdSwxKTpqdShuLHUpfX1yZXR1cm4gbn1mdW5jdGlvbiBjdShuLHQpe3JldHVybiBuK3pyKE1yKCkqKHQtbisxKSl9ZnVuY3Rpb24gbHUobix0KXt2YXIgcj1cIlwiO2lmKCFufHx0PDF8fHQ+eClyZXR1cm4gcjtkb3t0JTImJihyKz1uKSwodD16cih0LzIpKSYmKG4rPW4pfXdoaWxlKHQpO3JldHVybiByfWZ1bmN0aW9uIHN1KG4sdCl7cmV0dXJuIFBpKCRpKG4sdCxkYSksbitcIlwiKX1mdW5jdGlvbiBodSh0LHIsZSx1KXtpZighX2YodCkpcmV0dXJuIHQ7Zm9yKHZhciBpPS0xLG89KHI9U3Uocix0KSkubGVuZ3RoLGY9by0xLGE9dDtudWxsIT1hJiYrK2k8bzspe3ZhciBjPUppKHJbaV0pLGw9ZTtpZihpIT1mKXt2YXIgcz1hW2NdOyhsPXU/dShzLGMsYSk6bik9PT1uJiYobD1fZihzKT9zOnppKHJbaSsxXSk/W106e30pfXllKGEsYyxsKSxhPWFbY119cmV0dXJuIHR9dmFyIHB1PUdyP2Z1bmN0aW9uKG4sdCl7cmV0dXJuIEdyLnNldChuLHQpLG59OmRhLHZ1PWtyP2Z1bmN0aW9uKG4sdCl7cmV0dXJuIGtyKG4sXCJ0b1N0cmluZ1wiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx2YWx1ZTpfYSh0KSx3cml0YWJsZTohMH0pfTpkYTtmdW5jdGlvbiBfdShuLHQscil7dmFyIGU9LTEsdT1uLmxlbmd0aDt0PDAmJih0PS10PnU/MDp1K3QpLChyPXI+dT91OnIpPDAmJihyKz11KSx1PXQ+cj8wOnItdD4+PjAsdD4+Pj0wO2Zvcih2YXIgaT1Qbih1KTsrK2U8dTspaVtlXT1uW2UrdF07cmV0dXJuIGl9ZnVuY3Rpb24gZ3Uobix0KXt2YXIgcjtyZXR1cm4gUmUobixmdW5jdGlvbihuLGUsdSl7cmV0dXJuIShyPXQobixlLHUpKX0pLCEhcn1mdW5jdGlvbiB5dShuLHQscil7dmFyIGU9MCx1PW51bGw9PW4/ZTpuLmxlbmd0aDtpZihcIm51bWJlclwiPT10eXBlb2YgdCYmdD09dCYmdTw9SSl7Zm9yKDtlPHU7KXt2YXIgaT1lK3U+Pj4xLG89bltpXTtudWxsIT09byYmIWpmKG8pJiYocj9vPD10Om88dCk/ZT1pKzE6dT1pfXJldHVybiB1fXJldHVybiBkdShuLHQsZGEscil9ZnVuY3Rpb24gZHUodCxyLGUsdSl7cj1lKHIpO2Zvcih2YXIgaT0wLG89bnVsbD09dD8wOnQubGVuZ3RoLGY9ciE9cixhPW51bGw9PT1yLGM9amYociksbD1yPT09bjtpPG87KXt2YXIgcz16cigoaStvKS8yKSxoPWUodFtzXSkscD1oIT09bix2PW51bGw9PT1oLF89aD09aCxnPWpmKGgpO2lmKGYpdmFyIHk9dXx8XztlbHNlIHk9bD9fJiYodXx8cCk6YT9fJiZwJiYodXx8IXYpOmM/XyYmcCYmIXYmJih1fHwhZyk6IXYmJiFnJiYodT9oPD1yOmg8cik7eT9pPXMrMTpvPXN9cmV0dXJuIFRyKG8sTyl9ZnVuY3Rpb24gYnUobix0KXtmb3IodmFyIHI9LTEsZT1uLmxlbmd0aCx1PTAsaT1bXTsrK3I8ZTspe3ZhciBvPW5bcl0sZj10P3Qobyk6bztpZighcnx8IW5mKGYsYSkpe3ZhciBhPWY7aVt1KytdPTA9PT1vPzA6b319cmV0dXJuIGl9ZnVuY3Rpb24gd3Uobil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG4/bjpqZihuKT9BOitufWZ1bmN0aW9uIG11KG4pe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiBuO2lmKHVmKG4pKXJldHVybiAkdChuLG11KStcIlwiO2lmKGpmKG4pKXJldHVybiBlZT9lZS5jYWxsKG4pOlwiXCI7dmFyIHQ9bitcIlwiO3JldHVyblwiMFwiPT10JiYxL249PS1tP1wiLTBcIjp0fWZ1bmN0aW9uIHh1KG4scixlKXt2YXIgdT0tMSxpPUJ0LG89bi5sZW5ndGgsZj0hMCxhPVtdLGM9YTtpZihlKWY9ITEsaT1UdDtlbHNlIGlmKG8+PXQpe3ZhciBsPXI/bnVsbDpmaShuKTtpZihsKXJldHVybiBwcihsKTtmPSExLGk9ZXIsYz1uZXcgaGV9ZWxzZSBjPXI/W106YTtuOmZvcig7Kyt1PG87KXt2YXIgcz1uW3VdLGg9cj9yKHMpOnM7aWYocz1lfHwwIT09cz9zOjAsZiYmaD09aCl7Zm9yKHZhciBwPWMubGVuZ3RoO3AtLTspaWYoY1twXT09PWgpY29udGludWUgbjtyJiZjLnB1c2goaCksYS5wdXNoKHMpfWVsc2UgaShjLGgsZSl8fChjIT09YSYmYy5wdXNoKGgpLGEucHVzaChzKSl9cmV0dXJuIGF9ZnVuY3Rpb24ganUobix0KXtyZXR1cm4gbnVsbD09KG49RGkobix0PVN1KHQsbikpKXx8ZGVsZXRlIG5bSmkoY28odCkpXX1mdW5jdGlvbiBBdShuLHQscixlKXtyZXR1cm4gaHUobix0LHIoRGUobix0KSksZSl9ZnVuY3Rpb24ga3Uobix0LHIsZSl7Zm9yKHZhciB1PW4ubGVuZ3RoLGk9ZT91Oi0xOyhlP2ktLTorK2k8dSkmJnQobltpXSxpLG4pOyk7cmV0dXJuIHI/X3UobixlPzA6aSxlP2krMTp1KTpfdShuLGU/aSsxOjAsZT91OmkpfWZ1bmN0aW9uIE91KG4sdCl7dmFyIHI9bjtyZXR1cm4gciBpbnN0YW5jZW9mIGFlJiYocj1yLnZhbHVlKCkpLE10KHQsZnVuY3Rpb24obix0KXtyZXR1cm4gdC5mdW5jLmFwcGx5KHQudGhpc0FyZyxEdChbbl0sdC5hcmdzKSl9LHIpfWZ1bmN0aW9uIEl1KG4sdCxyKXt2YXIgZT1uLmxlbmd0aDtpZihlPDIpcmV0dXJuIGU/eHUoblswXSk6W107Zm9yKHZhciB1PS0xLGk9UG4oZSk7Kyt1PGU7KWZvcih2YXIgbz1uW3VdLGY9LTE7KytmPGU7KWYhPXUmJihpW3VdPUllKGlbdV18fG8sbltmXSx0LHIpKTtyZXR1cm4geHUoV2UoaSwxKSx0LHIpfWZ1bmN0aW9uIFJ1KHQscixlKXtmb3IodmFyIHU9LTEsaT10Lmxlbmd0aCxvPXIubGVuZ3RoLGY9e307Kyt1PGk7KXt2YXIgYT11PG8/clt1XTpuO2UoZix0W3VdLGEpfXJldHVybiBmfWZ1bmN0aW9uIEV1KG4pe3JldHVybiBhZihuKT9uOltdfWZ1bmN0aW9uIHp1KG4pe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bjpkYX1mdW5jdGlvbiBTdShuLHQpe3JldHVybiB1ZihuKT9uOkxpKG4sdCk/W25dOkhpKFdmKG4pKX12YXIgTHU9c3U7ZnVuY3Rpb24gV3UodCxyLGUpe3ZhciB1PXQubGVuZ3RoO3JldHVybiBlPWU9PT1uP3U6ZSwhciYmZT49dT90Ol91KHQscixlKX12YXIgQ3U9T3J8fGZ1bmN0aW9uKG4pe3JldHVybiBidC5jbGVhclRpbWVvdXQobil9O2Z1bmN0aW9uIFV1KG4sdCl7aWYodClyZXR1cm4gbi5zbGljZSgpO3ZhciByPW4ubGVuZ3RoLGU9UHQ/UHQocik6bmV3IG4uY29uc3RydWN0b3Iocik7cmV0dXJuIG4uY29weShlKSxlfWZ1bmN0aW9uIEJ1KG4pe3ZhciB0PW5ldyBuLmNvbnN0cnVjdG9yKG4uYnl0ZUxlbmd0aCk7cmV0dXJuIG5ldyBBdCh0KS5zZXQobmV3IEF0KG4pKSx0fWZ1bmN0aW9uIFR1KG4sdCl7dmFyIHI9dD9CdShuLmJ1ZmZlcik6bi5idWZmZXI7cmV0dXJuIG5ldyBuLmNvbnN0cnVjdG9yKHIsbi5ieXRlT2Zmc2V0LG4ubGVuZ3RoKX1mdW5jdGlvbiAkdSh0LHIpe2lmKHQhPT1yKXt2YXIgZT10IT09bix1PW51bGw9PT10LGk9dD09dCxvPWpmKHQpLGY9ciE9PW4sYT1udWxsPT09cixjPXI9PXIsbD1qZihyKTtpZighYSYmIWwmJiFvJiZ0PnJ8fG8mJmYmJmMmJiFhJiYhbHx8dSYmZiYmY3x8IWUmJmN8fCFpKXJldHVybiAxO2lmKCF1JiYhbyYmIWwmJnQ8cnx8bCYmZSYmaSYmIXUmJiFvfHxhJiZlJiZpfHwhZiYmaXx8IWMpcmV0dXJuLTF9cmV0dXJuIDB9ZnVuY3Rpb24gRHUobix0LHIsZSl7Zm9yKHZhciB1PS0xLGk9bi5sZW5ndGgsbz1yLmxlbmd0aCxmPS0xLGE9dC5sZW5ndGgsYz1CcihpLW8sMCksbD1QbihhK2MpLHM9IWU7KytmPGE7KWxbZl09dFtmXTtmb3IoOysrdTxvOykoc3x8dTxpKSYmKGxbclt1XV09blt1XSk7Zm9yKDtjLS07KWxbZisrXT1uW3UrK107cmV0dXJuIGx9ZnVuY3Rpb24gTXUobix0LHIsZSl7Zm9yKHZhciB1PS0xLGk9bi5sZW5ndGgsbz0tMSxmPXIubGVuZ3RoLGE9LTEsYz10Lmxlbmd0aCxsPUJyKGktZiwwKSxzPVBuKGwrYyksaD0hZTsrK3U8bDspc1t1XT1uW3VdO2Zvcih2YXIgcD11OysrYTxjOylzW3ArYV09dFthXTtmb3IoOysrbzxmOykoaHx8dTxpKSYmKHNbcCtyW29dXT1uW3UrK10pO3JldHVybiBzfWZ1bmN0aW9uIEZ1KG4sdCl7dmFyIHI9LTEsZT1uLmxlbmd0aDtmb3IodHx8KHQ9UG4oZSkpOysrcjxlOyl0W3JdPW5bcl07cmV0dXJuIHR9ZnVuY3Rpb24gTnUodCxyLGUsdSl7dmFyIGk9IWU7ZXx8KGU9e30pO2Zvcih2YXIgbz0tMSxmPXIubGVuZ3RoOysrbzxmOyl7dmFyIGE9cltvXSxjPXU/dShlW2FdLHRbYV0sYSxlLHQpOm47Yz09PW4mJihjPXRbYV0pLGk/bWUoZSxhLGMpOnllKGUsYSxjKX1yZXR1cm4gZX1mdW5jdGlvbiBQdShuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe3ZhciB1PXVmKHIpP0x0OmJlLGk9dD90KCk6e307cmV0dXJuIHUocixuLHdpKGUsMiksaSl9fWZ1bmN0aW9uIHF1KHQpe3JldHVybiBzdShmdW5jdGlvbihyLGUpe3ZhciB1PS0xLGk9ZS5sZW5ndGgsbz1pPjE/ZVtpLTFdOm4sZj1pPjI/ZVsyXTpuO2ZvcihvPXQubGVuZ3RoPjMmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG8/KGktLSxvKTpuLGYmJlNpKGVbMF0sZVsxXSxmKSYmKG89aTwzP246byxpPTEpLHI9R24ocik7Kyt1PGk7KXt2YXIgYT1lW3VdO2EmJnQocixhLHUsbyl9cmV0dXJuIHJ9KX1mdW5jdGlvbiBadShuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe2lmKG51bGw9PXIpcmV0dXJuIHI7aWYoIWZmKHIpKXJldHVybiBuKHIsZSk7Zm9yKHZhciB1PXIubGVuZ3RoLGk9dD91Oi0xLG89R24ocik7KHQ/aS0tOisraTx1KSYmITEhPT1lKG9baV0saSxvKTspO3JldHVybiByfX1mdW5jdGlvbiBLdShuKXtyZXR1cm4gZnVuY3Rpb24odCxyLGUpe2Zvcih2YXIgdT0tMSxpPUduKHQpLG89ZSh0KSxmPW8ubGVuZ3RoO2YtLTspe3ZhciBhPW9bbj9mOisrdV07aWYoITE9PT1yKGlbYV0sYSxpKSlicmVha31yZXR1cm4gdH19ZnVuY3Rpb24gVnUodCl7cmV0dXJuIGZ1bmN0aW9uKHIpe3ZhciBlPWNyKHI9V2YocikpP2dyKHIpOm4sdT1lP2VbMF06ci5jaGFyQXQoMCksaT1lP1d1KGUsMSkuam9pbihcIlwiKTpyLnNsaWNlKDEpO3JldHVybiB1W3RdKCkraX19ZnVuY3Rpb24gR3Uobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBNdChoYSh1YSh0KS5yZXBsYWNlKHV0LFwiXCIpKSxuLFwiXCIpfX1mdW5jdGlvbiBIdShuKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHM7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBuO2Nhc2UgMTpyZXR1cm4gbmV3IG4odFswXSk7Y2FzZSAyOnJldHVybiBuZXcgbih0WzBdLHRbMV0pO2Nhc2UgMzpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0pO2Nhc2UgNDpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSk7Y2FzZSA1OnJldHVybiBuZXcgbih0WzBdLHRbMV0sdFsyXSx0WzNdLHRbNF0pO2Nhc2UgNjpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSx0WzRdLHRbNV0pO2Nhc2UgNzpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSx0WzRdLHRbNV0sdFs2XSl9dmFyIHI9aWUobi5wcm90b3R5cGUpLGU9bi5hcHBseShyLHQpO3JldHVybiBfZihlKT9lOnJ9fWZ1bmN0aW9uIEp1KHQpe3JldHVybiBmdW5jdGlvbihyLGUsdSl7dmFyIGk9R24ocik7aWYoIWZmKHIpKXt2YXIgbz13aShlLDMpO3I9S2YociksZT1mdW5jdGlvbihuKXtyZXR1cm4gbyhpW25dLG4saSl9fXZhciBmPXQocixlLHUpO3JldHVybiBmPi0xP2lbbz9yW2ZdOmZdOm59fWZ1bmN0aW9uIFl1KHQpe3JldHVybiB2aShmdW5jdGlvbihlKXt2YXIgdT1lLmxlbmd0aCxpPXUsbz1mZS5wcm90b3R5cGUudGhydTtmb3IodCYmZS5yZXZlcnNlKCk7aS0tOyl7dmFyIGY9ZVtpXTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBmKXRocm93IG5ldyBZbihyKTtpZihvJiYhYSYmXCJ3cmFwcGVyXCI9PWRpKGYpKXZhciBhPW5ldyBmZShbXSwhMCl9Zm9yKGk9YT9pOnU7KytpPHU7KXt2YXIgYz1kaShmPWVbaV0pLGw9XCJ3cmFwcGVyXCI9PWM/eWkoZik6bjthPWwmJldpKGxbMF0pJiZsWzFdPT0oZ3xofHZ8eSkmJiFsWzRdLmxlbmd0aCYmMT09bFs5XT9hW2RpKGxbMF0pXS5hcHBseShhLGxbM10pOjE9PWYubGVuZ3RoJiZXaShmKT9hW2NdKCk6YS50aHJ1KGYpfXJldHVybiBmdW5jdGlvbigpe3ZhciBuPWFyZ3VtZW50cyx0PW5bMF07aWYoYSYmMT09bi5sZW5ndGgmJnVmKHQpKXJldHVybiBhLnBsYW50KHQpLnZhbHVlKCk7Zm9yKHZhciByPTAsaT11P2Vbcl0uYXBwbHkodGhpcyxuKTp0Oysrcjx1OylpPWVbcl0uY2FsbCh0aGlzLGkpO3JldHVybiBpfX0pfWZ1bmN0aW9uIFF1KHQscixlLHUsaSxvLGYsYSxzLHYpe3ZhciBfPXImZyx5PXImYyxiPXImbCx3PXImKGh8cCksbT1yJmQseD1iP246SHUodCk7cmV0dXJuIGZ1bmN0aW9uIGMoKXtmb3IodmFyIGw9YXJndW1lbnRzLmxlbmd0aCxoPVBuKGwpLHA9bDtwLS07KWhbcF09YXJndW1lbnRzW3BdO2lmKHcpdmFyIGc9YmkoYyksZD1mdW5jdGlvbihuLHQpe2Zvcih2YXIgcj1uLmxlbmd0aCxlPTA7ci0tOyluW3JdPT09dCYmKytlO3JldHVybiBlfShoLGcpO2lmKHUmJihoPUR1KGgsdSxpLHcpKSxvJiYoaD1NdShoLG8sZix3KSksbC09ZCx3JiZsPHYpe3ZhciBqPWhyKGgsZyk7cmV0dXJuIGlpKHQscixRdSxjLnBsYWNlaG9sZGVyLGUsaCxqLGEscyx2LWwpfXZhciBBPXk/ZTp0aGlzLGs9Yj9BW3RdOnQ7cmV0dXJuIGw9aC5sZW5ndGgsYT9oPWZ1bmN0aW9uKHQscil7Zm9yKHZhciBlPXQubGVuZ3RoLHU9VHIoci5sZW5ndGgsZSksaT1GdSh0KTt1LS07KXt2YXIgbz1yW3VdO3RbdV09emkobyxlKT9pW29dOm59cmV0dXJuIHR9KGgsYSk6bSYmbD4xJiZoLnJldmVyc2UoKSxfJiZzPGwmJihoLmxlbmd0aD1zKSx0aGlzJiZ0aGlzIT09YnQmJnRoaXMgaW5zdGFuY2VvZiBjJiYoaz14fHxIdShrKSksay5hcHBseShBLGgpfX1mdW5jdGlvbiBYdShuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe3JldHVybiBmdW5jdGlvbihuLHQscixlKXtyZXR1cm4gQmUobixmdW5jdGlvbihuLHUsaSl7dChlLHIobiksdSxpKX0pLGV9KHIsbix0KGUpLHt9KX19ZnVuY3Rpb24gbmkodCxyKXtyZXR1cm4gZnVuY3Rpb24oZSx1KXt2YXIgaTtpZihlPT09biYmdT09PW4pcmV0dXJuIHI7aWYoZSE9PW4mJihpPWUpLHUhPT1uKXtpZihpPT09bilyZXR1cm4gdTtcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJzdHJpbmdcIj09dHlwZW9mIHU/KGU9bXUoZSksdT1tdSh1KSk6KGU9d3UoZSksdT13dSh1KSksaT10KGUsdSl9cmV0dXJuIGl9fWZ1bmN0aW9uIHRpKG4pe3JldHVybiB2aShmdW5jdGlvbih0KXtyZXR1cm4gdD0kdCh0LHRyKHdpKCkpKSxzdShmdW5jdGlvbihyKXt2YXIgZT10aGlzO3JldHVybiBuKHQsZnVuY3Rpb24obil7cmV0dXJuIFN0KG4sZSxyKX0pfSl9KX1mdW5jdGlvbiByaSh0LHIpe3ZhciBlPShyPXI9PT1uP1wiIFwiOm11KHIpKS5sZW5ndGg7aWYoZTwyKXJldHVybiBlP2x1KHIsdCk6cjt2YXIgdT1sdShyLEVyKHQvX3IocikpKTtyZXR1cm4gY3Iocik/V3UoZ3IodSksMCx0KS5qb2luKFwiXCIpOnUuc2xpY2UoMCx0KX1mdW5jdGlvbiBlaSh0KXtyZXR1cm4gZnVuY3Rpb24ocixlLHUpe3JldHVybiB1JiZcIm51bWJlclwiIT10eXBlb2YgdSYmU2kocixlLHUpJiYoZT11PW4pLHI9UmYociksZT09PW4/KGU9cixyPTApOmU9UmYoZSksZnVuY3Rpb24obix0LHIsZSl7Zm9yKHZhciB1PS0xLGk9QnIoRXIoKHQtbikvKHJ8fDEpKSwwKSxvPVBuKGkpO2ktLTspb1tlP2k6Kyt1XT1uLG4rPXI7cmV0dXJuIG99KHIsZSx1PXU9PT1uP3I8ZT8xOi0xOlJmKHUpLHQpfX1mdW5jdGlvbiB1aShuKXtyZXR1cm4gZnVuY3Rpb24odCxyKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmXCJzdHJpbmdcIj09dHlwZW9mIHJ8fCh0PVNmKHQpLHI9U2YocikpLG4odCxyKX19ZnVuY3Rpb24gaWkodCxyLGUsdSxpLG8sZixhLHAsZyl7dmFyIHk9ciZoO3J8PXk/djpfLChyJj1+KHk/Xzp2KSkmc3x8KHImPX4oY3xsKSk7dmFyIGQ9W3QscixpLHk/bzpuLHk/ZjpuLHk/bjpvLHk/bjpmLGEscCxnXSxiPWUuYXBwbHkobixkKTtyZXR1cm4gV2kodCkmJkZpKGIsZCksYi5wbGFjZWhvbGRlcj11LHFpKGIsdCxyKX1mdW5jdGlvbiBvaShuKXt2YXIgdD1WbltuXTtyZXR1cm4gZnVuY3Rpb24obixyKXtpZihuPVNmKG4pLChyPW51bGw9PXI/MDpUcihFZihyKSwyOTIpKSYmV3Iobikpe3ZhciBlPShXZihuKStcImVcIikuc3BsaXQoXCJlXCIpO3JldHVybisoKGU9KFdmKHQoZVswXStcImVcIisoK2VbMV0rcikpKStcImVcIikuc3BsaXQoXCJlXCIpKVswXStcImVcIisoK2VbMV0tcikpfXJldHVybiB0KG4pfX12YXIgZmk9WnImJjEvcHIobmV3IFpyKFssLTBdKSlbMV09PW0/ZnVuY3Rpb24obil7cmV0dXJuIG5ldyBacihuKX06amE7ZnVuY3Rpb24gYWkobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciByPU9pKHQpO3JldHVybiByPT0kP2xyKHQpOnI9PXE/dnIodCk6ZnVuY3Rpb24obix0KXtyZXR1cm4gJHQodCxmdW5jdGlvbih0KXtyZXR1cm5bdCxuW3RdXX0pfSh0LG4odCkpfX1mdW5jdGlvbiBjaSh0LHUsaSxvLGYsYSxkLGIpe3ZhciB3PXUmbDtpZighdyYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgWW4ocik7dmFyIG09bz9vLmxlbmd0aDowO2lmKG18fCh1Jj1+KHZ8Xyksbz1mPW4pLGQ9ZD09PW4/ZDpCcihFZihkKSwwKSxiPWI9PT1uP2I6RWYoYiksbS09Zj9mLmxlbmd0aDowLHUmXyl7dmFyIHg9byxqPWY7bz1mPW59dmFyIEE9dz9uOnlpKHQpLGs9W3QsdSxpLG8sZix4LGosYSxkLGJdO2lmKEEmJmZ1bmN0aW9uKG4sdCl7dmFyIHI9blsxXSx1PXRbMV0saT1yfHUsbz1pPChjfGx8ZyksZj11PT1nJiZyPT1ofHx1PT1nJiZyPT15JiZuWzddLmxlbmd0aDw9dFs4XXx8dT09KGd8eSkmJnRbN10ubGVuZ3RoPD10WzhdJiZyPT1oO2lmKCFvJiYhZilyZXR1cm4gbjt1JmMmJihuWzJdPXRbMl0saXw9ciZjPzA6cyk7dmFyIGE9dFszXTtpZihhKXt2YXIgcD1uWzNdO25bM109cD9EdShwLGEsdFs0XSk6YSxuWzRdPXA/aHIoblszXSxlKTp0WzRdfShhPXRbNV0pJiYocD1uWzVdLG5bNV09cD9NdShwLGEsdFs2XSk6YSxuWzZdPXA/aHIobls1XSxlKTp0WzZdKSwoYT10WzddKSYmKG5bN109YSksdSZnJiYobls4XT1udWxsPT1uWzhdP3RbOF06VHIobls4XSx0WzhdKSksbnVsbD09bls5XSYmKG5bOV09dFs5XSksblswXT10WzBdLG5bMV09aX0oayxBKSx0PWtbMF0sdT1rWzFdLGk9a1syXSxvPWtbM10sZj1rWzRdLCEoYj1rWzldPWtbOV09PT1uP3c/MDp0Lmxlbmd0aDpCcihrWzldLW0sMCkpJiZ1JihofHApJiYodSY9fihofHApKSx1JiZ1IT1jKU89dT09aHx8dT09cD9mdW5jdGlvbih0LHIsZSl7dmFyIHU9SHUodCk7cmV0dXJuIGZ1bmN0aW9uIGkoKXtmb3IodmFyIG89YXJndW1lbnRzLmxlbmd0aCxmPVBuKG8pLGE9byxjPWJpKGkpO2EtLTspZlthXT1hcmd1bWVudHNbYV07dmFyIGw9bzwzJiZmWzBdIT09YyYmZltvLTFdIT09Yz9bXTpocihmLGMpO3JldHVybihvLT1sLmxlbmd0aCk8ZT9paSh0LHIsUXUsaS5wbGFjZWhvbGRlcixuLGYsbCxuLG4sZS1vKTpTdCh0aGlzJiZ0aGlzIT09YnQmJnRoaXMgaW5zdGFuY2VvZiBpP3U6dCx0aGlzLGYpfX0odCx1LGIpOnUhPXYmJnUhPShjfHYpfHxmLmxlbmd0aD9RdS5hcHBseShuLGspOmZ1bmN0aW9uKG4sdCxyLGUpe3ZhciB1PXQmYyxpPUh1KG4pO3JldHVybiBmdW5jdGlvbiB0KCl7Zm9yKHZhciBvPS0xLGY9YXJndW1lbnRzLmxlbmd0aCxhPS0xLGM9ZS5sZW5ndGgsbD1QbihjK2YpLHM9dGhpcyYmdGhpcyE9PWJ0JiZ0aGlzIGluc3RhbmNlb2YgdD9pOm47KythPGM7KWxbYV09ZVthXTtmb3IoO2YtLTspbFthKytdPWFyZ3VtZW50c1srK29dO3JldHVybiBTdChzLHU/cjp0aGlzLGwpfX0odCx1LGksbyk7ZWxzZSB2YXIgTz1mdW5jdGlvbihuLHQscil7dmFyIGU9dCZjLHU9SHUobik7cmV0dXJuIGZ1bmN0aW9uIHQoKXtyZXR1cm4odGhpcyYmdGhpcyE9PWJ0JiZ0aGlzIGluc3RhbmNlb2YgdD91Om4pLmFwcGx5KGU/cjp0aGlzLGFyZ3VtZW50cyl9fSh0LHUsaSk7cmV0dXJuIHFpKChBP3B1OkZpKShPLGspLHQsdSl9ZnVuY3Rpb24gbGkodCxyLGUsdSl7cmV0dXJuIHQ9PT1ufHxuZih0LG50W2VdKSYmIWV0LmNhbGwodSxlKT9yOnR9ZnVuY3Rpb24gc2kodCxyLGUsdSxpLG8pe3JldHVybiBfZih0KSYmX2YocikmJihvLnNldChyLHQpLGV1KHQscixuLHNpLG8pLG8uZGVsZXRlKHIpKSx0fWZ1bmN0aW9uIGhpKHQpe3JldHVybiBiZih0KT9uOnR9ZnVuY3Rpb24gcGkodCxyLGUsdSxpLG8pe3ZhciBjPWUmZixsPXQubGVuZ3RoLHM9ci5sZW5ndGg7aWYobCE9cyYmIShjJiZzPmwpKXJldHVybiExO3ZhciBoPW8uZ2V0KHQpO2lmKGgmJm8uZ2V0KHIpKXJldHVybiBoPT1yO3ZhciBwPS0xLHY9ITAsXz1lJmE/bmV3IGhlOm47Zm9yKG8uc2V0KHQsciksby5zZXQocix0KTsrK3A8bDspe3ZhciBnPXRbcF0seT1yW3BdO2lmKHUpdmFyIGQ9Yz91KHksZyxwLHIsdCxvKTp1KGcseSxwLHQscixvKTtpZihkIT09bil7aWYoZCljb250aW51ZTt2PSExO2JyZWFrfWlmKF8pe2lmKCFOdChyLGZ1bmN0aW9uKG4sdCl7aWYoIWVyKF8sdCkmJihnPT09bnx8aShnLG4sZSx1LG8pKSlyZXR1cm4gXy5wdXNoKHQpfSkpe3Y9ITE7YnJlYWt9fWVsc2UgaWYoZyE9PXkmJiFpKGcseSxlLHUsbykpe3Y9ITE7YnJlYWt9fXJldHVybiBvLmRlbGV0ZSh0KSxvLmRlbGV0ZShyKSx2fWZ1bmN0aW9uIHZpKHQpe3JldHVybiBQaSgkaSh0LG4sdW8pLHQrXCJcIil9ZnVuY3Rpb24gX2kobil7cmV0dXJuIE1lKG4sS2YsQWkpfWZ1bmN0aW9uIGdpKG4pe3JldHVybiBNZShuLFZmLGtpKX12YXIgeWk9R3I/ZnVuY3Rpb24obil7cmV0dXJuIEdyLmdldChuKX06amE7ZnVuY3Rpb24gZGkobil7Zm9yKHZhciB0PW4ubmFtZStcIlwiLHI9SHJbdF0sZT1ldC5jYWxsKEhyLHQpP3IubGVuZ3RoOjA7ZS0tOyl7dmFyIHU9cltlXSxpPXUuZnVuYztpZihudWxsPT1pfHxpPT1uKXJldHVybiB1Lm5hbWV9cmV0dXJuIHR9ZnVuY3Rpb24gYmkobil7cmV0dXJuKGV0LmNhbGwodWUsXCJwbGFjZWhvbGRlclwiKT91ZTpuKS5wbGFjZWhvbGRlcn1mdW5jdGlvbiB3aSgpe3ZhciBuPXVlLml0ZXJhdGVlfHxiYTtyZXR1cm4gbj1uPT09YmE/WWU6bixhcmd1bWVudHMubGVuZ3RoP24oYXJndW1lbnRzWzBdLGFyZ3VtZW50c1sxXSk6bn1mdW5jdGlvbiBtaShuLHQpe3ZhciByLGUsdT1uLl9fZGF0YV9fO3JldHVybihcInN0cmluZ1wiPT0oZT10eXBlb2Yocj10KSl8fFwibnVtYmVyXCI9PWV8fFwic3ltYm9sXCI9PWV8fFwiYm9vbGVhblwiPT1lP1wiX19wcm90b19fXCIhPT1yOm51bGw9PT1yKT91W1wic3RyaW5nXCI9PXR5cGVvZiB0P1wic3RyaW5nXCI6XCJoYXNoXCJdOnUubWFwfWZ1bmN0aW9uIHhpKG4pe2Zvcih2YXIgdD1LZihuKSxyPXQubGVuZ3RoO3ItLTspe3ZhciBlPXRbcl0sdT1uW2VdO3Rbcl09W2UsdSxCaSh1KV19cmV0dXJuIHR9ZnVuY3Rpb24gamkodCxyKXt2YXIgZT1mdW5jdGlvbih0LHIpe3JldHVybiBudWxsPT10P246dFtyXX0odCxyKTtyZXR1cm4gSmUoZSk/ZTpufXZhciBBaT1Tcj9mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bj9bXToobj1HbihuKSxVdChTcihuKSxmdW5jdGlvbih0KXtyZXR1cm4gd3IuY2FsbChuLHQpfSkpfTp6YSxraT1Tcj9mdW5jdGlvbihuKXtmb3IodmFyIHQ9W107bjspRHQodCxBaShuKSksbj1ZdChuKTtyZXR1cm4gdH06emEsT2k9RmU7ZnVuY3Rpb24gSWkobix0LHIpe2Zvcih2YXIgZT0tMSx1PSh0PVN1KHQsbikpLmxlbmd0aCxpPSExOysrZTx1Oyl7dmFyIG89SmkodFtlXSk7aWYoIShpPW51bGwhPW4mJnIobixvKSkpYnJlYWs7bj1uW29dfXJldHVybiBpfHwrK2UhPXU/aTohISh1PW51bGw9PW4/MDpuLmxlbmd0aCkmJnZmKHUpJiZ6aShvLHUpJiYodWYobil8fGVmKG4pKX1mdW5jdGlvbiBSaShuKXtyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiBuLmNvbnN0cnVjdG9yfHxVaShuKT97fTppZShZdChuKSl9ZnVuY3Rpb24gRWkobil7cmV0dXJuIHVmKG4pfHxlZihuKXx8ISEoeHImJm4mJm5beHJdKX1mdW5jdGlvbiB6aShuLHQpe3ZhciByPXR5cGVvZiBuO3JldHVybiEhKHQ9bnVsbD09dD94OnQpJiYoXCJudW1iZXJcIj09cnx8XCJzeW1ib2xcIiE9ciYmQm4udGVzdChuKSkmJm4+LTEmJm4lMT09MCYmbjx0fWZ1bmN0aW9uIFNpKG4sdCxyKXtpZighX2YocikpcmV0dXJuITE7dmFyIGU9dHlwZW9mIHQ7cmV0dXJuISEoXCJudW1iZXJcIj09ZT9mZihyKSYmemkodCxyLmxlbmd0aCk6XCJzdHJpbmdcIj09ZSYmdCBpbiByKSYmbmYoclt0XSxuKX1mdW5jdGlvbiBMaShuLHQpe2lmKHVmKG4pKXJldHVybiExO3ZhciByPXR5cGVvZiBuO3JldHVybiEoXCJudW1iZXJcIiE9ciYmXCJzeW1ib2xcIiE9ciYmXCJib29sZWFuXCIhPXImJm51bGwhPW4mJiFqZihuKSl8fGRuLnRlc3Qobil8fCF5bi50ZXN0KG4pfHxudWxsIT10JiZuIGluIEduKHQpfWZ1bmN0aW9uIFdpKG4pe3ZhciB0PWRpKG4pLHI9dWVbdF07aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygcnx8ISh0IGluIGFlLnByb3RvdHlwZSkpcmV0dXJuITE7aWYobj09PXIpcmV0dXJuITA7dmFyIGU9eWkocik7cmV0dXJuISFlJiZuPT09ZVswXX0oTnImJk9pKG5ldyBOcihuZXcgQXJyYXlCdWZmZXIoMSkpKSE9Snx8UHImJk9pKG5ldyBQcikhPSR8fHFyJiZcIltvYmplY3QgUHJvbWlzZV1cIiE9T2kocXIucmVzb2x2ZSgpKXx8WnImJk9pKG5ldyBacikhPXF8fEtyJiZPaShuZXcgS3IpIT1HKSYmKE9pPWZ1bmN0aW9uKHQpe3ZhciByPUZlKHQpLGU9cj09Rj90LmNvbnN0cnVjdG9yOm4sdT1lP1lpKGUpOlwiXCI7aWYodSlzd2l0Y2godSl7Y2FzZSBKcjpyZXR1cm4gSjtjYXNlIFlyOnJldHVybiAkO2Nhc2UgUXI6cmV0dXJuXCJbb2JqZWN0IFByb21pc2VdXCI7Y2FzZSBYcjpyZXR1cm4gcTtjYXNlIG5lOnJldHVybiBHfXJldHVybiByfSk7dmFyIENpPXR0P2hmOlNhO2Z1bmN0aW9uIFVpKG4pe3ZhciB0PW4mJm4uY29uc3RydWN0b3I7cmV0dXJuIG49PT0oXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdC5wcm90b3R5cGV8fG50KX1mdW5jdGlvbiBCaShuKXtyZXR1cm4gbj09biYmIV9mKG4pfWZ1bmN0aW9uIFRpKHQscil7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiZlW3RdPT09ciYmKHIhPT1ufHx0IGluIEduKGUpKX19ZnVuY3Rpb24gJGkodCxyLGUpe3JldHVybiByPUJyKHI9PT1uP3QubGVuZ3RoLTE6ciwwKSxmdW5jdGlvbigpe2Zvcih2YXIgbj1hcmd1bWVudHMsdT0tMSxpPUJyKG4ubGVuZ3RoLXIsMCksbz1QbihpKTsrK3U8aTspb1t1XT1uW3IrdV07dT0tMTtmb3IodmFyIGY9UG4ocisxKTsrK3U8cjspZlt1XT1uW3VdO3JldHVybiBmW3JdPWUobyksU3QodCx0aGlzLGYpfX1mdW5jdGlvbiBEaShuLHQpe3JldHVybiB0Lmxlbmd0aDwyP246RGUobixfdSh0LDAsLTEpKX1mdW5jdGlvbiBNaShuLHQpe2lmKChcImNvbnN0cnVjdG9yXCIhPT10fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBuW3RdKSYmXCJfX3Byb3RvX19cIiE9dClyZXR1cm4gblt0XX12YXIgRmk9WmkocHUpLE5pPVJyfHxmdW5jdGlvbihuLHQpe3JldHVybiBidC5zZXRUaW1lb3V0KG4sdCl9LFBpPVppKHZ1KTtmdW5jdGlvbiBxaShuLHQscil7dmFyIGU9dCtcIlwiO3JldHVybiBQaShuLGZ1bmN0aW9uKG4sdCl7dmFyIHI9dC5sZW5ndGg7aWYoIXIpcmV0dXJuIG47dmFyIGU9ci0xO3JldHVybiB0W2VdPShyPjE/XCImIFwiOlwiXCIpK3RbZV0sdD10LmpvaW4ocj4yP1wiLCBcIjpcIiBcIiksbi5yZXBsYWNlKGtuLFwie1xcbi8qIFt3cmFwcGVkIHdpdGggXCIrdCtcIl0gKi9cXG5cIil9KGUsZnVuY3Rpb24obix0KXtyZXR1cm4gV3QoUixmdW5jdGlvbihyKXt2YXIgZT1cIl8uXCIrclswXTt0JnJbMV0mJiFCdChuLGUpJiZuLnB1c2goZSl9KSxuLnNvcnQoKX0oZnVuY3Rpb24obil7dmFyIHQ9bi5tYXRjaChPbik7cmV0dXJuIHQ/dFsxXS5zcGxpdChJbik6W119KGUpLHIpKSl9ZnVuY3Rpb24gWmkodCl7dmFyIHI9MCxlPTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHU9JHIoKSxpPXctKHUtZSk7aWYoZT11LGk+MCl7aWYoKytyPj1iKXJldHVybiBhcmd1bWVudHNbMF19ZWxzZSByPTA7cmV0dXJuIHQuYXBwbHkobixhcmd1bWVudHMpfX1mdW5jdGlvbiBLaSh0LHIpe3ZhciBlPS0xLHU9dC5sZW5ndGgsaT11LTE7Zm9yKHI9cj09PW4/dTpyOysrZTxyOyl7dmFyIG89Y3UoZSxpKSxmPXRbb107dFtvXT10W2VdLHRbZV09Zn1yZXR1cm4gdC5sZW5ndGg9cix0fXZhciBWaSxHaSxIaT0oVmk9R28oZnVuY3Rpb24obil7dmFyIHQ9W107cmV0dXJuIDQ2PT09bi5jaGFyQ29kZUF0KDApJiZ0LnB1c2goXCJcIiksbi5yZXBsYWNlKGJuLGZ1bmN0aW9uKG4scixlLHUpe3QucHVzaChlP3UucmVwbGFjZShFbixcIiQxXCIpOnJ8fG4pfSksdH0sZnVuY3Rpb24obil7cmV0dXJuIDUwMD09PUdpLnNpemUmJkdpLmNsZWFyKCksbn0pLEdpPVZpLmNhY2hlLFZpKTtmdW5jdGlvbiBKaShuKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygbnx8amYobikpcmV0dXJuIG47dmFyIHQ9bitcIlwiO3JldHVyblwiMFwiPT10JiYxL249PS1tP1wiLTBcIjp0fWZ1bmN0aW9uIFlpKG4pe2lmKG51bGwhPW4pe3RyeXtyZXR1cm4gcnQuY2FsbChuKX1jYXRjaChuKXt9dHJ5e3JldHVybiBuK1wiXCJ9Y2F0Y2gobil7fX1yZXR1cm5cIlwifWZ1bmN0aW9uIFFpKG4pe2lmKG4gaW5zdGFuY2VvZiBhZSlyZXR1cm4gbi5jbG9uZSgpO3ZhciB0PW5ldyBmZShuLl9fd3JhcHBlZF9fLG4uX19jaGFpbl9fKTtyZXR1cm4gdC5fX2FjdGlvbnNfXz1GdShuLl9fYWN0aW9uc19fKSx0Ll9faW5kZXhfXz1uLl9faW5kZXhfXyx0Ll9fdmFsdWVzX189bi5fX3ZhbHVlc19fLHR9dmFyIFhpPXN1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGFmKG4pP0llKG4sV2UodCwxLGFmLCEwKSk6W119KSxubz1zdShmdW5jdGlvbih0LHIpe3ZhciBlPWNvKHIpO3JldHVybiBhZihlKSYmKGU9biksYWYodCk/SWUodCxXZShyLDEsYWYsITApLHdpKGUsMikpOltdfSksdG89c3UoZnVuY3Rpb24odCxyKXt2YXIgZT1jbyhyKTtyZXR1cm4gYWYoZSkmJihlPW4pLGFmKHQpP0llKHQsV2UociwxLGFmLCEwKSxuLGUpOltdfSk7ZnVuY3Rpb24gcm8obix0LHIpe3ZhciBlPW51bGw9PW4/MDpuLmxlbmd0aDtpZighZSlyZXR1cm4tMTt2YXIgdT1udWxsPT1yPzA6RWYocik7cmV0dXJuIHU8MCYmKHU9QnIoZSt1LDApKSxadChuLHdpKHQsMyksdSl9ZnVuY3Rpb24gZW8odCxyLGUpe3ZhciB1PW51bGw9PXQ/MDp0Lmxlbmd0aDtpZighdSlyZXR1cm4tMTt2YXIgaT11LTE7cmV0dXJuIGUhPT1uJiYoaT1FZihlKSxpPWU8MD9Ccih1K2ksMCk6VHIoaSx1LTEpKSxadCh0LHdpKHIsMyksaSwhMCl9ZnVuY3Rpb24gdW8obil7cmV0dXJuIG51bGwhPW4mJm4ubGVuZ3RoP1dlKG4sMSk6W119ZnVuY3Rpb24gaW8odCl7cmV0dXJuIHQmJnQubGVuZ3RoP3RbMF06bn12YXIgb289c3UoZnVuY3Rpb24obil7dmFyIHQ9JHQobixFdSk7cmV0dXJuIHQubGVuZ3RoJiZ0WzBdPT09blswXT9aZSh0KTpbXX0pLGZvPXN1KGZ1bmN0aW9uKHQpe3ZhciByPWNvKHQpLGU9JHQodCxFdSk7cmV0dXJuIHI9PT1jbyhlKT9yPW46ZS5wb3AoKSxlLmxlbmd0aCYmZVswXT09PXRbMF0/WmUoZSx3aShyLDIpKTpbXX0pLGFvPXN1KGZ1bmN0aW9uKHQpe3ZhciByPWNvKHQpLGU9JHQodCxFdSk7cmV0dXJuKHI9XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9yOm4pJiZlLnBvcCgpLGUubGVuZ3RoJiZlWzBdPT09dFswXT9aZShlLG4scik6W119KTtmdW5jdGlvbiBjbyh0KXt2YXIgcj1udWxsPT10PzA6dC5sZW5ndGg7cmV0dXJuIHI/dFtyLTFdOm59dmFyIGxvPXN1KHNvKTtmdW5jdGlvbiBzbyhuLHQpe3JldHVybiBuJiZuLmxlbmd0aCYmdCYmdC5sZW5ndGg/ZnUobix0KTpufXZhciBobz12aShmdW5jdGlvbihuLHQpe3ZhciByPW51bGw9PW4/MDpuLmxlbmd0aCxlPXhlKG4sdCk7cmV0dXJuIGF1KG4sJHQodCxmdW5jdGlvbihuKXtyZXR1cm4gemkobixyKT8rbjpufSkuc29ydCgkdSkpLGV9KTtmdW5jdGlvbiBwbyhuKXtyZXR1cm4gbnVsbD09bj9uOkZyLmNhbGwobil9dmFyIHZvPXN1KGZ1bmN0aW9uKG4pe3JldHVybiB4dShXZShuLDEsYWYsITApKX0pLF9vPXN1KGZ1bmN0aW9uKHQpe3ZhciByPWNvKHQpO3JldHVybiBhZihyKSYmKHI9bikseHUoV2UodCwxLGFmLCEwKSx3aShyLDIpKX0pLGdvPXN1KGZ1bmN0aW9uKHQpe3ZhciByPWNvKHQpO3JldHVybiByPVwiZnVuY3Rpb25cIj09dHlwZW9mIHI/cjpuLHh1KFdlKHQsMSxhZiwhMCksbixyKX0pO2Z1bmN0aW9uIHlvKG4pe2lmKCFufHwhbi5sZW5ndGgpcmV0dXJuW107dmFyIHQ9MDtyZXR1cm4gbj1VdChuLGZ1bmN0aW9uKG4pe2lmKGFmKG4pKXJldHVybiB0PUJyKG4ubGVuZ3RoLHQpLCEwfSksbnIodCxmdW5jdGlvbih0KXtyZXR1cm4gJHQobixKdCh0KSl9KX1mdW5jdGlvbiBibyh0LHIpe2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuW107dmFyIGU9eW8odCk7cmV0dXJuIG51bGw9PXI/ZTokdChlLGZ1bmN0aW9uKHQpe3JldHVybiBTdChyLG4sdCl9KX12YXIgd289c3UoZnVuY3Rpb24obix0KXtyZXR1cm4gYWYobik/SWUobix0KTpbXX0pLG1vPXN1KGZ1bmN0aW9uKG4pe3JldHVybiBJdShVdChuLGFmKSl9KSx4bz1zdShmdW5jdGlvbih0KXt2YXIgcj1jbyh0KTtyZXR1cm4gYWYocikmJihyPW4pLEl1KFV0KHQsYWYpLHdpKHIsMikpfSksam89c3UoZnVuY3Rpb24odCl7dmFyIHI9Y28odCk7cmV0dXJuIHI9XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9yOm4sSXUoVXQodCxhZiksbixyKX0pLEFvPXN1KHlvKSxrbz1zdShmdW5jdGlvbih0KXt2YXIgcj10Lmxlbmd0aCxlPXI+MT90W3ItMV06bjtyZXR1cm4gZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlPyh0LnBvcCgpLGUpOm4sYm8odCxlKX0pO2Z1bmN0aW9uIE9vKG4pe3ZhciB0PXVlKG4pO3JldHVybiB0Ll9fY2hhaW5fXz0hMCx0fWZ1bmN0aW9uIElvKG4sdCl7cmV0dXJuIHQobil9dmFyIFJvPXZpKGZ1bmN0aW9uKHQpe3ZhciByPXQubGVuZ3RoLGU9cj90WzBdOjAsdT10aGlzLl9fd3JhcHBlZF9fLGk9ZnVuY3Rpb24obil7cmV0dXJuIHhlKG4sdCl9O3JldHVybiEocj4xfHx0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkmJnUgaW5zdGFuY2VvZiBhZSYmemkoZSk/KCh1PXUuc2xpY2UoZSwrZSsocj8xOjApKSkuX19hY3Rpb25zX18ucHVzaCh7ZnVuYzpJbyxhcmdzOltpXSx0aGlzQXJnOm59KSxuZXcgZmUodSx0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbih0KXtyZXR1cm4gciYmIXQubGVuZ3RoJiZ0LnB1c2gobiksdH0pKTp0aGlzLnRocnUoaSl9KSxFbz1QdShmdW5jdGlvbihuLHQscil7ZXQuY2FsbChuLHIpPysrbltyXTptZShuLHIsMSl9KSx6bz1KdShybyksU289SnUoZW8pO2Z1bmN0aW9uIExvKG4sdCl7cmV0dXJuKHVmKG4pP1d0OlJlKShuLHdpKHQsMykpfWZ1bmN0aW9uIFdvKG4sdCl7cmV0dXJuKHVmKG4pP2Z1bmN0aW9uKG4sdCl7Zm9yKHZhciByPW51bGw9PW4/MDpuLmxlbmd0aDtyLS0mJiExIT09dChuW3JdLHIsbik7KTtyZXR1cm4gbn06RWUpKG4sd2kodCwzKSl9dmFyIENvPVB1KGZ1bmN0aW9uKG4sdCxyKXtldC5jYWxsKG4scik/bltyXS5wdXNoKHQpOm1lKG4scixbdF0pfSksVW89c3UoZnVuY3Rpb24obix0LHIpe3ZhciBlPS0xLHU9XCJmdW5jdGlvblwiPT10eXBlb2YgdCxpPWZmKG4pP1BuKG4ubGVuZ3RoKTpbXTtyZXR1cm4gUmUobixmdW5jdGlvbihuKXtpWysrZV09dT9TdCh0LG4scik6S2Uobix0LHIpfSksaX0pLEJvPVB1KGZ1bmN0aW9uKG4sdCxyKXttZShuLHIsdCl9KTtmdW5jdGlvbiBUbyhuLHQpe3JldHVybih1ZihuKT8kdDpudSkobix3aSh0LDMpKX12YXIgJG89UHUoZnVuY3Rpb24obix0LHIpe25bcj8wOjFdLnB1c2godCl9LGZ1bmN0aW9uKCl7cmV0dXJuW1tdLFtdXX0pLERvPXN1KGZ1bmN0aW9uKG4sdCl7aWYobnVsbD09bilyZXR1cm5bXTt2YXIgcj10Lmxlbmd0aDtyZXR1cm4gcj4xJiZTaShuLHRbMF0sdFsxXSk/dD1bXTpyPjImJlNpKHRbMF0sdFsxXSx0WzJdKSYmKHQ9W3RbMF1dKSxpdShuLFdlKHQsMSksW10pfSksTW89SXJ8fGZ1bmN0aW9uKCl7cmV0dXJuIGJ0LkRhdGUubm93KCl9O2Z1bmN0aW9uIEZvKHQscixlKXtyZXR1cm4gcj1lP246cixyPXQmJm51bGw9PXI/dC5sZW5ndGg6cixjaSh0LGcsbixuLG4sbixyKX1mdW5jdGlvbiBObyh0LGUpe3ZhciB1O2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFluKHIpO3JldHVybiB0PUVmKHQpLGZ1bmN0aW9uKCl7cmV0dXJuLS10PjAmJih1PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpKSx0PD0xJiYoZT1uKSx1fX12YXIgUG89c3UoZnVuY3Rpb24obix0LHIpe3ZhciBlPWM7aWYoci5sZW5ndGgpe3ZhciB1PWhyKHIsYmkoUG8pKTtlfD12fXJldHVybiBjaShuLGUsdCxyLHUpfSkscW89c3UoZnVuY3Rpb24obix0LHIpe3ZhciBlPWN8bDtpZihyLmxlbmd0aCl7dmFyIHU9aHIocixiaShxbykpO2V8PXZ9cmV0dXJuIGNpKHQsZSxuLHIsdSl9KTtmdW5jdGlvbiBabyh0LGUsdSl7dmFyIGksbyxmLGEsYyxsLHM9MCxoPSExLHA9ITEsdj0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBZbihyKTtmdW5jdGlvbiBfKHIpe3ZhciBlPWksdT1vO3JldHVybiBpPW89bixzPXIsYT10LmFwcGx5KHUsZSl9ZnVuY3Rpb24gZyh0KXt2YXIgcj10LWw7cmV0dXJuIGw9PT1ufHxyPj1lfHxyPDB8fHAmJnQtcz49Zn1mdW5jdGlvbiB5KCl7dmFyIG49TW8oKTtpZihnKG4pKXJldHVybiBkKG4pO2M9TmkoeSxmdW5jdGlvbihuKXt2YXIgdD1lLShuLWwpO3JldHVybiBwP1RyKHQsZi0obi1zKSk6dH0obikpfWZ1bmN0aW9uIGQodCl7cmV0dXJuIGM9bix2JiZpP18odCk6KGk9bz1uLGEpfWZ1bmN0aW9uIGIoKXt2YXIgdD1NbygpLHI9Zyh0KTtpZihpPWFyZ3VtZW50cyxvPXRoaXMsbD10LHIpe2lmKGM9PT1uKXJldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gcz1uLGM9TmkoeSxlKSxoP18obik6YX0obCk7aWYocClyZXR1cm4gQ3UoYyksYz1OaSh5LGUpLF8obCl9cmV0dXJuIGM9PT1uJiYoYz1OaSh5LGUpKSxhfXJldHVybiBlPVNmKGUpfHwwLF9mKHUpJiYoaD0hIXUubGVhZGluZyxmPShwPVwibWF4V2FpdFwiaW4gdSk/QnIoU2YodS5tYXhXYWl0KXx8MCxlKTpmLHY9XCJ0cmFpbGluZ1wiaW4gdT8hIXUudHJhaWxpbmc6diksYi5jYW5jZWw9ZnVuY3Rpb24oKXtjIT09biYmQ3UoYykscz0wLGk9bD1vPWM9bn0sYi5mbHVzaD1mdW5jdGlvbigpe3JldHVybiBjPT09bj9hOmQoTW8oKSl9LGJ9dmFyIEtvPXN1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIE9lKG4sMSx0KX0pLFZvPXN1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gT2UobixTZih0KXx8MCxyKX0pO2Z1bmN0aW9uIEdvKG4sdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbnx8bnVsbCE9dCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgWW4ocik7dmFyIGU9ZnVuY3Rpb24oKXt2YXIgcj1hcmd1bWVudHMsdT10P3QuYXBwbHkodGhpcyxyKTpyWzBdLGk9ZS5jYWNoZTtpZihpLmhhcyh1KSlyZXR1cm4gaS5nZXQodSk7dmFyIG89bi5hcHBseSh0aGlzLHIpO3JldHVybiBlLmNhY2hlPWkuc2V0KHUsbyl8fGksb307cmV0dXJuIGUuY2FjaGU9bmV3KEdvLkNhY2hlfHxzZSksZX1mdW5jdGlvbiBIbyhuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBZbihyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHM7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIW4uY2FsbCh0aGlzKTtjYXNlIDE6cmV0dXJuIW4uY2FsbCh0aGlzLHRbMF0pO2Nhc2UgMjpyZXR1cm4hbi5jYWxsKHRoaXMsdFswXSx0WzFdKTtjYXNlIDM6cmV0dXJuIW4uY2FsbCh0aGlzLHRbMF0sdFsxXSx0WzJdKX1yZXR1cm4hbi5hcHBseSh0aGlzLHQpfX1Hby5DYWNoZT1zZTt2YXIgSm89THUoZnVuY3Rpb24obix0KXt2YXIgcj0odD0xPT10Lmxlbmd0aCYmdWYodFswXSk/JHQodFswXSx0cih3aSgpKSk6JHQoV2UodCwxKSx0cih3aSgpKSkpLmxlbmd0aDtyZXR1cm4gc3UoZnVuY3Rpb24oZSl7Zm9yKHZhciB1PS0xLGk9VHIoZS5sZW5ndGgscik7Kyt1PGk7KWVbdV09dFt1XS5jYWxsKHRoaXMsZVt1XSk7cmV0dXJuIFN0KG4sdGhpcyxlKX0pfSksWW89c3UoZnVuY3Rpb24odCxyKXt2YXIgZT1ocihyLGJpKFlvKSk7cmV0dXJuIGNpKHQsdixuLHIsZSl9KSxRbz1zdShmdW5jdGlvbih0LHIpe3ZhciBlPWhyKHIsYmkoUW8pKTtyZXR1cm4gY2kodCxfLG4scixlKX0pLFhvPXZpKGZ1bmN0aW9uKHQscil7cmV0dXJuIGNpKHQseSxuLG4sbixyKX0pO2Z1bmN0aW9uIG5mKG4sdCl7cmV0dXJuIG49PT10fHxuIT1uJiZ0IT10fXZhciB0Zj11aShOZSkscmY9dWkoZnVuY3Rpb24obix0KXtyZXR1cm4gbj49dH0pLGVmPVZlKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSk/VmU6ZnVuY3Rpb24obil7cmV0dXJuIGdmKG4pJiZldC5jYWxsKG4sXCJjYWxsZWVcIikmJiF3ci5jYWxsKG4sXCJjYWxsZWVcIil9LHVmPVBuLmlzQXJyYXksb2Y9a3Q/dHIoa3QpOmZ1bmN0aW9uKG4pe3JldHVybiBnZihuKSYmRmUobik9PUh9O2Z1bmN0aW9uIGZmKG4pe3JldHVybiBudWxsIT1uJiZ2ZihuLmxlbmd0aCkmJiFoZihuKX1mdW5jdGlvbiBhZihuKXtyZXR1cm4gZ2YobikmJmZmKG4pfXZhciBjZj1Mcnx8U2EsbGY9T3Q/dHIoT3QpOmZ1bmN0aW9uKG4pe3JldHVybiBnZihuKSYmRmUobik9PVd9O2Z1bmN0aW9uIHNmKG4pe2lmKCFnZihuKSlyZXR1cm4hMTt2YXIgdD1GZShuKTtyZXR1cm4gdD09VXx8dD09Q3x8XCJzdHJpbmdcIj09dHlwZW9mIG4ubWVzc2FnZSYmXCJzdHJpbmdcIj09dHlwZW9mIG4ubmFtZSYmIWJmKG4pfWZ1bmN0aW9uIGhmKG4pe2lmKCFfZihuKSlyZXR1cm4hMTt2YXIgdD1GZShuKTtyZXR1cm4gdD09Qnx8dD09VHx8dD09U3x8dD09Tn1mdW5jdGlvbiBwZihuKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgbiYmbj09RWYobil9ZnVuY3Rpb24gdmYobil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG4mJm4+LTEmJm4lMT09MCYmbjw9eH1mdW5jdGlvbiBfZihuKXt2YXIgdD10eXBlb2YgbjtyZXR1cm4gbnVsbCE9biYmKFwib2JqZWN0XCI9PXR8fFwiZnVuY3Rpb25cIj09dCl9ZnVuY3Rpb24gZ2Yobil7cmV0dXJuIG51bGwhPW4mJlwib2JqZWN0XCI9PXR5cGVvZiBufXZhciB5Zj1JdD90cihJdCk6ZnVuY3Rpb24obil7cmV0dXJuIGdmKG4pJiZPaShuKT09JH07ZnVuY3Rpb24gZGYobil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG58fGdmKG4pJiZGZShuKT09RH1mdW5jdGlvbiBiZihuKXtpZighZ2Yobil8fEZlKG4pIT1GKXJldHVybiExO3ZhciB0PVl0KG4pO2lmKG51bGw9PT10KXJldHVybiEwO3ZhciByPWV0LmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHImJnIgaW5zdGFuY2VvZiByJiZydC5jYWxsKHIpPT15dH12YXIgd2Y9UnQ/dHIoUnQpOmZ1bmN0aW9uKG4pe3JldHVybiBnZihuKSYmRmUobik9PVB9LG1mPUV0P3RyKEV0KTpmdW5jdGlvbihuKXtyZXR1cm4gZ2YobikmJk9pKG4pPT1xfTtmdW5jdGlvbiB4ZihuKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygbnx8IXVmKG4pJiZnZihuKSYmRmUobik9PVp9ZnVuY3Rpb24gamYobil7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIG58fGdmKG4pJiZGZShuKT09S312YXIgQWY9enQ/dHIoenQpOmZ1bmN0aW9uKG4pe3JldHVybiBnZihuKSYmdmYobi5sZW5ndGgpJiYhIWh0W0ZlKG4pXX0sa2Y9dWkoWGUpLE9mPXVpKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG48PXR9KTtmdW5jdGlvbiBJZihuKXtpZighbilyZXR1cm5bXTtpZihmZihuKSlyZXR1cm4geGYobik/Z3Iobik6RnUobik7aWYoanImJm5banJdKXJldHVybiBmdW5jdGlvbihuKXtmb3IodmFyIHQscj1bXTshKHQ9bi5uZXh0KCkpLmRvbmU7KXIucHVzaCh0LnZhbHVlKTtyZXR1cm4gcn0obltqcl0oKSk7dmFyIHQ9T2kobik7cmV0dXJuKHQ9PSQ/bHI6dD09cT9wcjp0YSkobil9ZnVuY3Rpb24gUmYobil7cmV0dXJuIG4/KG49U2YobikpPT09bXx8bj09PS1tPyhuPDA/LTE6MSkqajpuPT1uP246MDowPT09bj9uOjB9ZnVuY3Rpb24gRWYobil7dmFyIHQ9UmYobikscj10JTE7cmV0dXJuIHQ9PXQ/cj90LXI6dDowfWZ1bmN0aW9uIHpmKG4pe3JldHVybiBuP2plKEVmKG4pLDAsayk6MH1mdW5jdGlvbiBTZihuKXtpZihcIm51bWJlclwiPT10eXBlb2YgbilyZXR1cm4gbjtpZihqZihuKSlyZXR1cm4gQTtpZihfZihuKSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2Ygbi52YWx1ZU9mP24udmFsdWVPZigpOm47bj1fZih0KT90K1wiXCI6dH1pZihcInN0cmluZ1wiIT10eXBlb2YgbilyZXR1cm4gMD09PW4/bjorbjtuPW4ucmVwbGFjZSh4bixcIlwiKTt2YXIgcj1Xbi50ZXN0KG4pO3JldHVybiByfHxVbi50ZXN0KG4pP2d0KG4uc2xpY2UoMikscj8yOjgpOkxuLnRlc3Qobik/QTorbn1mdW5jdGlvbiBMZihuKXtyZXR1cm4gTnUobixWZihuKSl9ZnVuY3Rpb24gV2Yobil7cmV0dXJuIG51bGw9PW4/XCJcIjptdShuKX12YXIgQ2Y9cXUoZnVuY3Rpb24obix0KXtpZihVaSh0KXx8ZmYodCkpTnUodCxLZih0KSxuKTtlbHNlIGZvcih2YXIgciBpbiB0KWV0LmNhbGwodCxyKSYmeWUobixyLHRbcl0pfSksVWY9cXUoZnVuY3Rpb24obix0KXtOdSh0LFZmKHQpLG4pfSksQmY9cXUoZnVuY3Rpb24obix0LHIsZSl7TnUodCxWZih0KSxuLGUpfSksVGY9cXUoZnVuY3Rpb24obix0LHIsZSl7TnUodCxLZih0KSxuLGUpfSksJGY9dmkoeGUpLERmPXN1KGZ1bmN0aW9uKHQscil7dD1Hbih0KTt2YXIgZT0tMSx1PXIubGVuZ3RoLGk9dT4yP3JbMl06bjtmb3IoaSYmU2koclswXSxyWzFdLGkpJiYodT0xKTsrK2U8dTspZm9yKHZhciBvPXJbZV0sZj1WZihvKSxhPS0xLGM9Zi5sZW5ndGg7KythPGM7KXt2YXIgbD1mW2FdLHM9dFtsXTsocz09PW58fG5mKHMsbnRbbF0pJiYhZXQuY2FsbCh0LGwpKSYmKHRbbF09b1tsXSl9cmV0dXJuIHR9KSxNZj1zdShmdW5jdGlvbih0KXtyZXR1cm4gdC5wdXNoKG4sc2kpLFN0KEhmLG4sdCl9KTtmdW5jdGlvbiBGZih0LHIsZSl7dmFyIHU9bnVsbD09dD9uOkRlKHQscik7cmV0dXJuIHU9PT1uP2U6dX1mdW5jdGlvbiBOZihuLHQpe3JldHVybiBudWxsIT1uJiZJaShuLHQscWUpfXZhciBQZj1YdShmdW5jdGlvbihuLHQscil7bnVsbCE9dCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdC50b1N0cmluZyYmKHQ9dnQuY2FsbCh0KSksblt0XT1yfSxfYShkYSkpLHFmPVh1KGZ1bmN0aW9uKG4sdCxyKXtudWxsIT10JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnRvU3RyaW5nJiYodD12dC5jYWxsKHQpKSxldC5jYWxsKG4sdCk/blt0XS5wdXNoKHIpOm5bdF09W3JdfSx3aSksWmY9c3UoS2UpO2Z1bmN0aW9uIEtmKG4pe3JldHVybiBmZihuKT92ZShuKTpRZShuKX1mdW5jdGlvbiBWZihuKXtyZXR1cm4gZmYobik/dmUobiwhMCk6ZnVuY3Rpb24obil7aWYoIV9mKG4pKXJldHVybiBmdW5jdGlvbihuKXt2YXIgdD1bXTtpZihudWxsIT1uKWZvcih2YXIgciBpbiBHbihuKSl0LnB1c2gocik7cmV0dXJuIHR9KG4pO3ZhciB0PVVpKG4pLHI9W107Zm9yKHZhciBlIGluIG4pKFwiY29uc3RydWN0b3JcIiE9ZXx8IXQmJmV0LmNhbGwobixlKSkmJnIucHVzaChlKTtyZXR1cm4gcn0obil9dmFyIEdmPXF1KGZ1bmN0aW9uKG4sdCxyKXtldShuLHQscil9KSxIZj1xdShmdW5jdGlvbihuLHQscixlKXtldShuLHQscixlKX0pLEpmPXZpKGZ1bmN0aW9uKG4sdCl7dmFyIHI9e307aWYobnVsbD09bilyZXR1cm4gcjt2YXIgZT0hMTt0PSR0KHQsZnVuY3Rpb24odCl7cmV0dXJuIHQ9U3UodCxuKSxlfHwoZT10Lmxlbmd0aD4xKSx0fSksTnUobixnaShuKSxyKSxlJiYocj1BZShyLHV8aXxvLGhpKSk7Zm9yKHZhciBmPXQubGVuZ3RoO2YtLTspanUocix0W2ZdKTtyZXR1cm4gcn0pLFlmPXZpKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW4/e306ZnVuY3Rpb24obix0KXtyZXR1cm4gb3Uobix0LGZ1bmN0aW9uKHQscil7cmV0dXJuIE5mKG4scil9KX0obix0KX0pO2Z1bmN0aW9uIFFmKG4sdCl7aWYobnVsbD09bilyZXR1cm57fTt2YXIgcj0kdChnaShuKSxmdW5jdGlvbihuKXtyZXR1cm5bbl19KTtyZXR1cm4gdD13aSh0KSxvdShuLHIsZnVuY3Rpb24obixyKXtyZXR1cm4gdChuLHJbMF0pfSl9dmFyIFhmPWFpKEtmKSxuYT1haShWZik7ZnVuY3Rpb24gdGEobil7cmV0dXJuIG51bGw9PW4/W106cnIobixLZihuKSl9dmFyIHJhPUd1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gdD10LnRvTG93ZXJDYXNlKCksbisocj9lYSh0KTp0KX0pO2Z1bmN0aW9uIGVhKG4pe3JldHVybiBzYShXZihuKS50b0xvd2VyQ2FzZSgpKX1mdW5jdGlvbiB1YShuKXtyZXR1cm4obj1XZihuKSkmJm4ucmVwbGFjZShUbixvcikucmVwbGFjZShpdCxcIlwiKX12YXIgaWE9R3UoZnVuY3Rpb24obix0LHIpe3JldHVybiBuKyhyP1wiLVwiOlwiXCIpK3QudG9Mb3dlckNhc2UoKX0pLG9hPUd1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIiBcIjpcIlwiKSt0LnRvTG93ZXJDYXNlKCl9KSxmYT1WdShcInRvTG93ZXJDYXNlXCIpLGFhPUd1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIl9cIjpcIlwiKSt0LnRvTG93ZXJDYXNlKCl9KSxjYT1HdShmdW5jdGlvbihuLHQscil7cmV0dXJuIG4rKHI/XCIgXCI6XCJcIikrc2EodCl9KSxsYT1HdShmdW5jdGlvbihuLHQscil7cmV0dXJuIG4rKHI/XCIgXCI6XCJcIikrdC50b1VwcGVyQ2FzZSgpfSksc2E9VnUoXCJ0b1VwcGVyQ2FzZVwiKTtmdW5jdGlvbiBoYSh0LHIsZSl7cmV0dXJuIHQ9V2YodCksKHI9ZT9uOnIpPT09bj9mdW5jdGlvbihuKXtyZXR1cm4gY3QudGVzdChuKX0odCk/ZnVuY3Rpb24obil7cmV0dXJuIG4ubWF0Y2goZnQpfHxbXX0odCk6ZnVuY3Rpb24obil7cmV0dXJuIG4ubWF0Y2goUm4pfHxbXX0odCk6dC5tYXRjaChyKXx8W119dmFyIHBhPXN1KGZ1bmN0aW9uKHQscil7dHJ5e3JldHVybiBTdCh0LG4scil9Y2F0Y2gobil7cmV0dXJuIHNmKG4pP246bmV3IFpuKG4pfX0pLHZhPXZpKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIFd0KHQsZnVuY3Rpb24odCl7dD1KaSh0KSxtZShuLHQsUG8oblt0XSxuKSl9KSxufSk7ZnVuY3Rpb24gX2Eobil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG59fXZhciBnYT1ZdSgpLHlhPVl1KCEwKTtmdW5jdGlvbiBkYShuKXtyZXR1cm4gbn1mdW5jdGlvbiBiYShuKXtyZXR1cm4gWWUoXCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uOkFlKG4sdSkpfXZhciB3YT1zdShmdW5jdGlvbihuLHQpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gS2UocixuLHQpfX0pLG1hPXN1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBLZShuLHIsdCl9fSk7ZnVuY3Rpb24geGEobix0LHIpe3ZhciBlPUtmKHQpLHU9JGUodCxlKTtudWxsIT1yfHxfZih0KSYmKHUubGVuZ3RofHwhZS5sZW5ndGgpfHwocj10LHQ9bixuPXRoaXMsdT0kZSh0LEtmKHQpKSk7dmFyIGk9IShfZihyKSYmXCJjaGFpblwiaW4gciYmIXIuY2hhaW4pLG89aGYobik7cmV0dXJuIFd0KHUsZnVuY3Rpb24ocil7dmFyIGU9dFtyXTtuW3JdPWUsbyYmKG4ucHJvdG90eXBlW3JdPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fX2NoYWluX187aWYoaXx8dCl7dmFyIHI9bih0aGlzLl9fd3JhcHBlZF9fKTtyZXR1cm4oci5fX2FjdGlvbnNfXz1GdSh0aGlzLl9fYWN0aW9uc19fKSkucHVzaCh7ZnVuYzplLGFyZ3M6YXJndW1lbnRzLHRoaXNBcmc6bn0pLHIuX19jaGFpbl9fPXQscn1yZXR1cm4gZS5hcHBseShuLER0KFt0aGlzLnZhbHVlKCldLGFyZ3VtZW50cykpfSl9KSxufWZ1bmN0aW9uIGphKCl7fXZhciBBYT10aSgkdCksa2E9dGkoQ3QpLE9hPXRpKE50KTtmdW5jdGlvbiBJYShuKXtyZXR1cm4gTGkobik/SnQoSmkobikpOmZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gRGUodCxuKX19KG4pfXZhciBSYT1laSgpLEVhPWVpKCEwKTtmdW5jdGlvbiB6YSgpe3JldHVybltdfWZ1bmN0aW9uIFNhKCl7cmV0dXJuITF9dmFyIExhLFdhPW5pKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4rdH0sMCksQ2E9b2koXCJjZWlsXCIpLFVhPW5pKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4vdH0sMSksQmE9b2koXCJmbG9vclwiKSxUYT1uaShmdW5jdGlvbihuLHQpe3JldHVybiBuKnR9LDEpLCRhPW9pKFwicm91bmRcIiksRGE9bmkoZnVuY3Rpb24obix0KXtyZXR1cm4gbi10fSwwKTtyZXR1cm4gdWUuYWZ0ZXI9ZnVuY3Rpb24obix0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBZbihyKTtyZXR1cm4gbj1FZihuKSxmdW5jdGlvbigpe2lmKC0tbjwxKXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LHVlLmFyeT1Gbyx1ZS5hc3NpZ249Q2YsdWUuYXNzaWduSW49VWYsdWUuYXNzaWduSW5XaXRoPUJmLHVlLmFzc2lnbldpdGg9VGYsdWUuYXQ9JGYsdWUuYmVmb3JlPU5vLHVlLmJpbmQ9UG8sdWUuYmluZEFsbD12YSx1ZS5iaW5kS2V5PXFvLHVlLmNhc3RBcnJheT1mdW5jdGlvbigpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybltdO3ZhciBuPWFyZ3VtZW50c1swXTtyZXR1cm4gdWYobik/bjpbbl19LHVlLmNoYWluPU9vLHVlLmNodW5rPWZ1bmN0aW9uKHQscixlKXtyPShlP1NpKHQscixlKTpyPT09bik/MTpCcihFZihyKSwwKTt2YXIgdT1udWxsPT10PzA6dC5sZW5ndGg7aWYoIXV8fHI8MSlyZXR1cm5bXTtmb3IodmFyIGk9MCxvPTAsZj1QbihFcih1L3IpKTtpPHU7KWZbbysrXT1fdSh0LGksaSs9cik7cmV0dXJuIGZ9LHVlLmNvbXBhY3Q9ZnVuY3Rpb24obil7Zm9yKHZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoLGU9MCx1PVtdOysrdDxyOyl7dmFyIGk9blt0XTtpJiYodVtlKytdPWkpfXJldHVybiB1fSx1ZS5jb25jYXQ9ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoO2lmKCFuKXJldHVybltdO2Zvcih2YXIgdD1QbihuLTEpLHI9YXJndW1lbnRzWzBdLGU9bjtlLS07KXRbZS0xXT1hcmd1bWVudHNbZV07cmV0dXJuIER0KHVmKHIpP0Z1KHIpOltyXSxXZSh0LDEpKX0sdWUuY29uZD1mdW5jdGlvbihuKXt2YXIgdD1udWxsPT1uPzA6bi5sZW5ndGgsZT13aSgpO3JldHVybiBuPXQ/JHQobixmdW5jdGlvbihuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuWzFdKXRocm93IG5ldyBZbihyKTtyZXR1cm5bZShuWzBdKSxuWzFdXX0pOltdLHN1KGZ1bmN0aW9uKHIpe2Zvcih2YXIgZT0tMTsrK2U8dDspe3ZhciB1PW5bZV07aWYoU3QodVswXSx0aGlzLHIpKXJldHVybiBTdCh1WzFdLHRoaXMscil9fSl9LHVlLmNvbmZvcm1zPWZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihuKXt2YXIgdD1LZihuKTtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGtlKHIsbix0KX19KEFlKG4sdSkpfSx1ZS5jb25zdGFudD1fYSx1ZS5jb3VudEJ5PUVvLHVlLmNyZWF0ZT1mdW5jdGlvbihuLHQpe3ZhciByPWllKG4pO3JldHVybiBudWxsPT10P3I6d2Uocix0KX0sdWUuY3Vycnk9ZnVuY3Rpb24gdChyLGUsdSl7dmFyIGk9Y2kocixoLG4sbixuLG4sbixlPXU/bjplKTtyZXR1cm4gaS5wbGFjZWhvbGRlcj10LnBsYWNlaG9sZGVyLGl9LHVlLmN1cnJ5UmlnaHQ9ZnVuY3Rpb24gdChyLGUsdSl7dmFyIGk9Y2kocixwLG4sbixuLG4sbixlPXU/bjplKTtyZXR1cm4gaS5wbGFjZWhvbGRlcj10LnBsYWNlaG9sZGVyLGl9LHVlLmRlYm91bmNlPVpvLHVlLmRlZmF1bHRzPURmLHVlLmRlZmF1bHRzRGVlcD1NZix1ZS5kZWZlcj1Lbyx1ZS5kZWxheT1Wbyx1ZS5kaWZmZXJlbmNlPVhpLHVlLmRpZmZlcmVuY2VCeT1ubyx1ZS5kaWZmZXJlbmNlV2l0aD10byx1ZS5kcm9wPWZ1bmN0aW9uKHQscixlKXt2YXIgdT1udWxsPT10PzA6dC5sZW5ndGg7cmV0dXJuIHU/X3UodCwocj1lfHxyPT09bj8xOkVmKHIpKTwwPzA6cix1KTpbXX0sdWUuZHJvcFJpZ2h0PWZ1bmN0aW9uKHQscixlKXt2YXIgdT1udWxsPT10PzA6dC5sZW5ndGg7cmV0dXJuIHU/X3UodCwwLChyPXUtKHI9ZXx8cj09PW4/MTpFZihyKSkpPDA/MDpyKTpbXX0sdWUuZHJvcFJpZ2h0V2hpbGU9ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/a3Uobix3aSh0LDMpLCEwLCEwKTpbXX0sdWUuZHJvcFdoaWxlPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP2t1KG4sd2kodCwzKSwhMCk6W119LHVlLmZpbGw9ZnVuY3Rpb24odCxyLGUsdSl7dmFyIGk9bnVsbD09dD8wOnQubGVuZ3RoO3JldHVybiBpPyhlJiZcIm51bWJlclwiIT10eXBlb2YgZSYmU2kodCxyLGUpJiYoZT0wLHU9aSksZnVuY3Rpb24odCxyLGUsdSl7dmFyIGk9dC5sZW5ndGg7Zm9yKChlPUVmKGUpKTwwJiYoZT0tZT5pPzA6aStlKSwodT11PT09bnx8dT5pP2k6RWYodSkpPDAmJih1Kz1pKSx1PWU+dT8wOnpmKHUpO2U8dTspdFtlKytdPXI7cmV0dXJuIHR9KHQscixlLHUpKTpbXX0sdWUuZmlsdGVyPWZ1bmN0aW9uKG4sdCl7cmV0dXJuKHVmKG4pP1V0OkxlKShuLHdpKHQsMykpfSx1ZS5mbGF0TWFwPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIFdlKFRvKG4sdCksMSl9LHVlLmZsYXRNYXBEZWVwPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIFdlKFRvKG4sdCksbSl9LHVlLmZsYXRNYXBEZXB0aD1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIGU9ZT09PW4/MTpFZihlKSxXZShUbyh0LHIpLGUpfSx1ZS5mbGF0dGVuPXVvLHVlLmZsYXR0ZW5EZWVwPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsIT1uJiZuLmxlbmd0aD9XZShuLG0pOltdfSx1ZS5mbGF0dGVuRGVwdGg9ZnVuY3Rpb24odCxyKXtyZXR1cm4gbnVsbCE9dCYmdC5sZW5ndGg/V2UodCxyPXI9PT1uPzE6RWYocikpOltdfSx1ZS5mbGlwPWZ1bmN0aW9uKG4pe3JldHVybiBjaShuLGQpfSx1ZS5mbG93PWdhLHVlLmZsb3dSaWdodD15YSx1ZS5mcm9tUGFpcnM9ZnVuY3Rpb24obil7Zm9yKHZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoLGU9e307Kyt0PHI7KXt2YXIgdT1uW3RdO2VbdVswXV09dVsxXX1yZXR1cm4gZX0sdWUuZnVuY3Rpb25zPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsPT1uP1tdOiRlKG4sS2YobikpfSx1ZS5mdW5jdGlvbnNJbj1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bj9bXTokZShuLFZmKG4pKX0sdWUuZ3JvdXBCeT1Dbyx1ZS5pbml0aWFsPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsIT1uJiZuLmxlbmd0aD9fdShuLDAsLTEpOltdfSx1ZS5pbnRlcnNlY3Rpb249b28sdWUuaW50ZXJzZWN0aW9uQnk9Zm8sdWUuaW50ZXJzZWN0aW9uV2l0aD1hbyx1ZS5pbnZlcnQ9UGYsdWUuaW52ZXJ0Qnk9cWYsdWUuaW52b2tlTWFwPVVvLHVlLml0ZXJhdGVlPWJhLHVlLmtleUJ5PUJvLHVlLmtleXM9S2YsdWUua2V5c0luPVZmLHVlLm1hcD1Ubyx1ZS5tYXBLZXlzPWZ1bmN0aW9uKG4sdCl7dmFyIHI9e307cmV0dXJuIHQ9d2kodCwzKSxCZShuLGZ1bmN0aW9uKG4sZSx1KXttZShyLHQobixlLHUpLG4pfSkscn0sdWUubWFwVmFsdWVzPWZ1bmN0aW9uKG4sdCl7dmFyIHI9e307cmV0dXJuIHQ9d2kodCwzKSxCZShuLGZ1bmN0aW9uKG4sZSx1KXttZShyLGUsdChuLGUsdSkpfSkscn0sdWUubWF0Y2hlcz1mdW5jdGlvbihuKXtyZXR1cm4gdHUoQWUobix1KSl9LHVlLm1hdGNoZXNQcm9wZXJ0eT1mdW5jdGlvbihuLHQpe3JldHVybiBydShuLEFlKHQsdSkpfSx1ZS5tZW1vaXplPUdvLHVlLm1lcmdlPUdmLHVlLm1lcmdlV2l0aD1IZix1ZS5tZXRob2Q9d2EsdWUubWV0aG9kT2Y9bWEsdWUubWl4aW49eGEsdWUubmVnYXRlPUhvLHVlLm50aEFyZz1mdW5jdGlvbihuKXtyZXR1cm4gbj1FZihuKSxzdShmdW5jdGlvbih0KXtyZXR1cm4gdXUodCxuKX0pfSx1ZS5vbWl0PUpmLHVlLm9taXRCeT1mdW5jdGlvbihuLHQpe3JldHVybiBRZihuLEhvKHdpKHQpKSl9LHVlLm9uY2U9ZnVuY3Rpb24obil7cmV0dXJuIE5vKDIsbil9LHVlLm9yZGVyQnk9ZnVuY3Rpb24odCxyLGUsdSl7cmV0dXJuIG51bGw9PXQ/W106KHVmKHIpfHwocj1udWxsPT1yP1tdOltyXSksdWYoZT11P246ZSl8fChlPW51bGw9PWU/W106W2VdKSxpdSh0LHIsZSkpfSx1ZS5vdmVyPUFhLHVlLm92ZXJBcmdzPUpvLHVlLm92ZXJFdmVyeT1rYSx1ZS5vdmVyU29tZT1PYSx1ZS5wYXJ0aWFsPVlvLHVlLnBhcnRpYWxSaWdodD1Rbyx1ZS5wYXJ0aXRpb249JG8sdWUucGljaz1ZZix1ZS5waWNrQnk9UWYsdWUucHJvcGVydHk9SWEsdWUucHJvcGVydHlPZj1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG51bGw9PXQ/bjpEZSh0LHIpfX0sdWUucHVsbD1sbyx1ZS5wdWxsQWxsPXNvLHVlLnB1bGxBbGxCeT1mdW5jdGlvbihuLHQscil7cmV0dXJuIG4mJm4ubGVuZ3RoJiZ0JiZ0Lmxlbmd0aD9mdShuLHQsd2kociwyKSk6bn0sdWUucHVsbEFsbFdpdGg9ZnVuY3Rpb24odCxyLGUpe3JldHVybiB0JiZ0Lmxlbmd0aCYmciYmci5sZW5ndGg/ZnUodCxyLG4sZSk6dH0sdWUucHVsbEF0PWhvLHVlLnJhbmdlPVJhLHVlLnJhbmdlUmlnaHQ9RWEsdWUucmVhcmc9WG8sdWUucmVqZWN0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuKHVmKG4pP1V0OkxlKShuLEhvKHdpKHQsMykpKX0sdWUucmVtb3ZlPWZ1bmN0aW9uKG4sdCl7dmFyIHI9W107aWYoIW58fCFuLmxlbmd0aClyZXR1cm4gcjt2YXIgZT0tMSx1PVtdLGk9bi5sZW5ndGg7Zm9yKHQ9d2kodCwzKTsrK2U8aTspe3ZhciBvPW5bZV07dChvLGUsbikmJihyLnB1c2gobyksdS5wdXNoKGUpKX1yZXR1cm4gYXUobix1KSxyfSx1ZS5yZXN0PWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgWW4ocik7cmV0dXJuIHN1KHQsZT1lPT09bj9lOkVmKGUpKX0sdWUucmV2ZXJzZT1wbyx1ZS5zYW1wbGVTaXplPWZ1bmN0aW9uKHQscixlKXtyZXR1cm4gcj0oZT9TaSh0LHIsZSk6cj09PW4pPzE6RWYociksKHVmKHQpP2Z1bmN0aW9uKG4sdCl7cmV0dXJuIEtpKEZ1KG4pLGplKHQsMCxuLmxlbmd0aCkpfTpmdW5jdGlvbihuLHQpe3ZhciByPXRhKG4pO3JldHVybiBLaShyLGplKHQsMCxyLmxlbmd0aCkpfSkodCxyKX0sdWUuc2V0PWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbnVsbD09bj9uOmh1KG4sdCxyKX0sdWUuc2V0V2l0aD1mdW5jdGlvbih0LHIsZSx1KXtyZXR1cm4gdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiB1P3U6bixudWxsPT10P3Q6aHUodCxyLGUsdSl9LHVlLnNodWZmbGU9ZnVuY3Rpb24obil7cmV0dXJuKHVmKG4pP2Z1bmN0aW9uKG4pe3JldHVybiBLaShGdShuKSl9OmZ1bmN0aW9uKG4pe3JldHVybiBLaSh0YShuKSl9KShuKX0sdWUuc2xpY2U9ZnVuY3Rpb24odCxyLGUpe3ZhciB1PW51bGw9PXQ/MDp0Lmxlbmd0aDtyZXR1cm4gdT8oZSYmXCJudW1iZXJcIiE9dHlwZW9mIGUmJlNpKHQscixlKT8ocj0wLGU9dSk6KHI9bnVsbD09cj8wOkVmKHIpLGU9ZT09PW4/dTpFZihlKSksX3UodCxyLGUpKTpbXX0sdWUuc29ydEJ5PURvLHVlLnNvcnRlZFVuaXE9ZnVuY3Rpb24obil7cmV0dXJuIG4mJm4ubGVuZ3RoP2J1KG4pOltdfSx1ZS5zb3J0ZWRVbmlxQnk9ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/YnUobix3aSh0LDIpKTpbXX0sdWUuc3BsaXQ9ZnVuY3Rpb24odCxyLGUpe3JldHVybiBlJiZcIm51bWJlclwiIT10eXBlb2YgZSYmU2kodCxyLGUpJiYocj1lPW4pLChlPWU9PT1uP2s6ZT4+PjApPyh0PVdmKHQpKSYmKFwic3RyaW5nXCI9PXR5cGVvZiByfHxudWxsIT1yJiYhd2YocikpJiYhKHI9bXUocikpJiZjcih0KT9XdShncih0KSwwLGUpOnQuc3BsaXQocixlKTpbXX0sdWUuc3ByZWFkPWZ1bmN0aW9uKG4sdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgWW4ocik7cmV0dXJuIHQ9bnVsbD09dD8wOkJyKEVmKHQpLDApLHN1KGZ1bmN0aW9uKHIpe3ZhciBlPXJbdF0sdT1XdShyLDAsdCk7cmV0dXJuIGUmJkR0KHUsZSksU3Qobix0aGlzLHUpfSl9LHVlLnRhaWw9ZnVuY3Rpb24obil7dmFyIHQ9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiB0P191KG4sMSx0KTpbXX0sdWUudGFrZT1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIHQmJnQubGVuZ3RoP191KHQsMCwocj1lfHxyPT09bj8xOkVmKHIpKTwwPzA6cik6W119LHVlLnRha2VSaWdodD1mdW5jdGlvbih0LHIsZSl7dmFyIHU9bnVsbD09dD8wOnQubGVuZ3RoO3JldHVybiB1P191KHQsKHI9dS0ocj1lfHxyPT09bj8xOkVmKHIpKSk8MD8wOnIsdSk6W119LHVlLnRha2VSaWdodFdoaWxlPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP2t1KG4sd2kodCwzKSwhMSwhMCk6W119LHVlLnRha2VXaGlsZT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9rdShuLHdpKHQsMykpOltdfSx1ZS50YXA9ZnVuY3Rpb24obix0KXtyZXR1cm4gdChuKSxufSx1ZS50aHJvdHRsZT1mdW5jdGlvbihuLHQsZSl7dmFyIHU9ITAsaT0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBZbihyKTtyZXR1cm4gX2YoZSkmJih1PVwibGVhZGluZ1wiaW4gZT8hIWUubGVhZGluZzp1LGk9XCJ0cmFpbGluZ1wiaW4gZT8hIWUudHJhaWxpbmc6aSksWm8obix0LHtsZWFkaW5nOnUsbWF4V2FpdDp0LHRyYWlsaW5nOml9KX0sdWUudGhydT1Jbyx1ZS50b0FycmF5PUlmLHVlLnRvUGFpcnM9WGYsdWUudG9QYWlyc0luPW5hLHVlLnRvUGF0aD1mdW5jdGlvbihuKXtyZXR1cm4gdWYobik/JHQobixKaSk6amYobik/W25dOkZ1KEhpKFdmKG4pKSl9LHVlLnRvUGxhaW5PYmplY3Q9TGYsdWUudHJhbnNmb3JtPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT11ZihuKSx1PWV8fGNmKG4pfHxBZihuKTtpZih0PXdpKHQsNCksbnVsbD09cil7dmFyIGk9biYmbi5jb25zdHJ1Y3RvcjtyPXU/ZT9uZXcgaTpbXTpfZihuKSYmaGYoaSk/aWUoWXQobikpOnt9fXJldHVybih1P1d0OkJlKShuLGZ1bmN0aW9uKG4sZSx1KXtyZXR1cm4gdChyLG4sZSx1KX0pLHJ9LHVlLnVuYXJ5PWZ1bmN0aW9uKG4pe3JldHVybiBGbyhuLDEpfSx1ZS51bmlvbj12byx1ZS51bmlvbkJ5PV9vLHVlLnVuaW9uV2l0aD1nbyx1ZS51bmlxPWZ1bmN0aW9uKG4pe3JldHVybiBuJiZuLmxlbmd0aD94dShuKTpbXX0sdWUudW5pcUJ5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP3h1KG4sd2kodCwyKSk6W119LHVlLnVuaXFXaXRoPWZ1bmN0aW9uKHQscil7cmV0dXJuIHI9XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9yOm4sdCYmdC5sZW5ndGg/eHUodCxuLHIpOltdfSx1ZS51bnNldD1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1ufHxqdShuLHQpfSx1ZS51bnppcD15byx1ZS51bnppcFdpdGg9Ym8sdWUudXBkYXRlPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbnVsbD09bj9uOkF1KG4sdCx6dShyKSl9LHVlLnVwZGF0ZVdpdGg9ZnVuY3Rpb24odCxyLGUsdSl7cmV0dXJuIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgdT91Om4sbnVsbD09dD90OkF1KHQscix6dShlKSx1KX0sdWUudmFsdWVzPXRhLHVlLnZhbHVlc0luPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsPT1uP1tdOnJyKG4sVmYobikpfSx1ZS53aXRob3V0PXdvLHVlLndvcmRzPWhhLHVlLndyYXA9ZnVuY3Rpb24obix0KXtyZXR1cm4gWW8oenUodCksbil9LHVlLnhvcj1tbyx1ZS54b3JCeT14byx1ZS54b3JXaXRoPWpvLHVlLnppcD1Bbyx1ZS56aXBPYmplY3Q9ZnVuY3Rpb24obix0KXtyZXR1cm4gUnUobnx8W10sdHx8W10seWUpfSx1ZS56aXBPYmplY3REZWVwPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIFJ1KG58fFtdLHR8fFtdLGh1KX0sdWUuemlwV2l0aD1rbyx1ZS5lbnRyaWVzPVhmLHVlLmVudHJpZXNJbj1uYSx1ZS5leHRlbmQ9VWYsdWUuZXh0ZW5kV2l0aD1CZix4YSh1ZSx1ZSksdWUuYWRkPVdhLHVlLmF0dGVtcHQ9cGEsdWUuY2FtZWxDYXNlPXJhLHVlLmNhcGl0YWxpemU9ZWEsdWUuY2VpbD1DYSx1ZS5jbGFtcD1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIGU9PT1uJiYoZT1yLHI9biksZSE9PW4mJihlPShlPVNmKGUpKT09ZT9lOjApLHIhPT1uJiYocj0ocj1TZihyKSk9PXI/cjowKSxqZShTZih0KSxyLGUpfSx1ZS5jbG9uZT1mdW5jdGlvbihuKXtyZXR1cm4gQWUobixvKX0sdWUuY2xvbmVEZWVwPWZ1bmN0aW9uKG4pe3JldHVybiBBZShuLHV8byl9LHVlLmNsb25lRGVlcFdpdGg9ZnVuY3Rpb24odCxyKXtyZXR1cm4gQWUodCx1fG8scj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByP3I6bil9LHVlLmNsb25lV2l0aD1mdW5jdGlvbih0LHIpe3JldHVybiBBZSh0LG8scj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByP3I6bil9LHVlLmNvbmZvcm1zVG89ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbD09dHx8a2Uobix0LEtmKHQpKX0sdWUuZGVidXJyPXVhLHVlLmRlZmF1bHRUbz1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1ufHxuIT1uP3Q6bn0sdWUuZGl2aWRlPVVhLHVlLmVuZHNXaXRoPWZ1bmN0aW9uKHQscixlKXt0PVdmKHQpLHI9bXUocik7dmFyIHU9dC5sZW5ndGgsaT1lPWU9PT1uP3U6amUoRWYoZSksMCx1KTtyZXR1cm4oZS09ci5sZW5ndGgpPj0wJiZ0LnNsaWNlKGUsaSk9PXJ9LHVlLmVxPW5mLHVlLmVzY2FwZT1mdW5jdGlvbihuKXtyZXR1cm4obj1XZihuKSkmJnBuLnRlc3Qobik/bi5yZXBsYWNlKHNuLGZyKTpufSx1ZS5lc2NhcGVSZWdFeHA9ZnVuY3Rpb24obil7cmV0dXJuKG49V2YobikpJiZtbi50ZXN0KG4pP24ucmVwbGFjZSh3bixcIlxcXFwkJlwiKTpufSx1ZS5ldmVyeT1mdW5jdGlvbih0LHIsZSl7dmFyIHU9dWYodCk/Q3Q6emU7cmV0dXJuIGUmJlNpKHQscixlKSYmKHI9biksdSh0LHdpKHIsMykpfSx1ZS5maW5kPXpvLHVlLmZpbmRJbmRleD1ybyx1ZS5maW5kS2V5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHF0KG4sd2kodCwzKSxCZSl9LHVlLmZpbmRMYXN0PVNvLHVlLmZpbmRMYXN0SW5kZXg9ZW8sdWUuZmluZExhc3RLZXk9ZnVuY3Rpb24obix0KXtyZXR1cm4gcXQobix3aSh0LDMpLFRlKX0sdWUuZmxvb3I9QmEsdWUuZm9yRWFjaD1Mbyx1ZS5mb3JFYWNoUmlnaHQ9V28sdWUuZm9ySW49ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbD09bj9uOkNlKG4sd2kodCwzKSxWZil9LHVlLmZvckluUmlnaHQ9ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbD09bj9uOlVlKG4sd2kodCwzKSxWZil9LHVlLmZvck93bj1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZCZShuLHdpKHQsMykpfSx1ZS5mb3JPd25SaWdodD1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZUZShuLHdpKHQsMykpfSx1ZS5nZXQ9RmYsdWUuZ3Q9dGYsdWUuZ3RlPXJmLHVlLmhhcz1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsIT1uJiZJaShuLHQsUGUpfSx1ZS5oYXNJbj1OZix1ZS5oZWFkPWlvLHVlLmlkZW50aXR5PWRhLHVlLmluY2x1ZGVzPWZ1bmN0aW9uKG4sdCxyLGUpe249ZmYobik/bjp0YShuKSxyPXImJiFlP0VmKHIpOjA7dmFyIHU9bi5sZW5ndGg7cmV0dXJuIHI8MCYmKHI9QnIodStyLDApKSx4ZihuKT9yPD11JiZuLmluZGV4T2YodCxyKT4tMTohIXUmJkt0KG4sdCxyKT4tMX0sdWUuaW5kZXhPZj1mdW5jdGlvbihuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO2lmKCFlKXJldHVybi0xO3ZhciB1PW51bGw9PXI/MDpFZihyKTtyZXR1cm4gdTwwJiYodT1CcihlK3UsMCkpLEt0KG4sdCx1KX0sdWUuaW5SYW5nZT1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIHI9UmYociksZT09PW4/KGU9cixyPTApOmU9UmYoZSksZnVuY3Rpb24obix0LHIpe3JldHVybiBuPj1Ucih0LHIpJiZuPEJyKHQscil9KHQ9U2YodCkscixlKX0sdWUuaW52b2tlPVpmLHVlLmlzQXJndW1lbnRzPWVmLHVlLmlzQXJyYXk9dWYsdWUuaXNBcnJheUJ1ZmZlcj1vZix1ZS5pc0FycmF5TGlrZT1mZix1ZS5pc0FycmF5TGlrZU9iamVjdD1hZix1ZS5pc0Jvb2xlYW49ZnVuY3Rpb24obil7cmV0dXJuITA9PT1ufHwhMT09PW58fGdmKG4pJiZGZShuKT09TH0sdWUuaXNCdWZmZXI9Y2YsdWUuaXNEYXRlPWxmLHVlLmlzRWxlbWVudD1mdW5jdGlvbihuKXtyZXR1cm4gZ2YobikmJjE9PT1uLm5vZGVUeXBlJiYhYmYobil9LHVlLmlzRW1wdHk9ZnVuY3Rpb24obil7aWYobnVsbD09bilyZXR1cm4hMDtpZihmZihuKSYmKHVmKG4pfHxcInN0cmluZ1wiPT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT10eXBlb2Ygbi5zcGxpY2V8fGNmKG4pfHxBZihuKXx8ZWYobikpKXJldHVybiFuLmxlbmd0aDt2YXIgdD1PaShuKTtpZih0PT0kfHx0PT1xKXJldHVybiFuLnNpemU7aWYoVWkobikpcmV0dXJuIVFlKG4pLmxlbmd0aDtmb3IodmFyIHIgaW4gbilpZihldC5jYWxsKG4scikpcmV0dXJuITE7cmV0dXJuITB9LHVlLmlzRXF1YWw9ZnVuY3Rpb24obix0KXtyZXR1cm4gR2Uobix0KX0sdWUuaXNFcXVhbFdpdGg9ZnVuY3Rpb24odCxyLGUpe3ZhciB1PShlPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpuKT9lKHQscik6bjtyZXR1cm4gdT09PW4/R2UodCxyLG4sZSk6ISF1fSx1ZS5pc0Vycm9yPXNmLHVlLmlzRmluaXRlPWZ1bmN0aW9uKG4pe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBuJiZXcihuKX0sdWUuaXNGdW5jdGlvbj1oZix1ZS5pc0ludGVnZXI9cGYsdWUuaXNMZW5ndGg9dmYsdWUuaXNNYXA9eWYsdWUuaXNNYXRjaD1mdW5jdGlvbihuLHQpe3JldHVybiBuPT09dHx8SGUobix0LHhpKHQpKX0sdWUuaXNNYXRjaFdpdGg9ZnVuY3Rpb24odCxyLGUpe3JldHVybiBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpuLEhlKHQscix4aShyKSxlKX0sdWUuaXNOYU49ZnVuY3Rpb24obil7cmV0dXJuIGRmKG4pJiZuIT0rbn0sdWUuaXNOYXRpdmU9ZnVuY3Rpb24obil7aWYoQ2kobikpdGhyb3cgbmV3IFpuKFwiVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuXCIpO3JldHVybiBKZShuKX0sdWUuaXNOaWw9ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW59LHVlLmlzTnVsbD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09PW59LHVlLmlzTnVtYmVyPWRmLHVlLmlzT2JqZWN0PV9mLHVlLmlzT2JqZWN0TGlrZT1nZix1ZS5pc1BsYWluT2JqZWN0PWJmLHVlLmlzUmVnRXhwPXdmLHVlLmlzU2FmZUludGVnZXI9ZnVuY3Rpb24obil7cmV0dXJuIHBmKG4pJiZuPj0teCYmbjw9eH0sdWUuaXNTZXQ9bWYsdWUuaXNTdHJpbmc9eGYsdWUuaXNTeW1ib2w9amYsdWUuaXNUeXBlZEFycmF5PUFmLHVlLmlzVW5kZWZpbmVkPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09bn0sdWUuaXNXZWFrTWFwPWZ1bmN0aW9uKG4pe3JldHVybiBnZihuKSYmT2kobik9PUd9LHVlLmlzV2Vha1NldD1mdW5jdGlvbihuKXtyZXR1cm4gZ2YobikmJlwiW29iamVjdCBXZWFrU2V0XVwiPT1GZShuKX0sdWUuam9pbj1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1uP1wiXCI6Q3IuY2FsbChuLHQpfSx1ZS5rZWJhYkNhc2U9aWEsdWUubGFzdD1jbyx1ZS5sYXN0SW5kZXhPZj1mdW5jdGlvbih0LHIsZSl7dmFyIHU9bnVsbD09dD8wOnQubGVuZ3RoO2lmKCF1KXJldHVybi0xO3ZhciBpPXU7cmV0dXJuIGUhPT1uJiYoaT0oaT1FZihlKSk8MD9Ccih1K2ksMCk6VHIoaSx1LTEpKSxyPT1yP2Z1bmN0aW9uKG4sdCxyKXtmb3IodmFyIGU9cisxO2UtLTspaWYobltlXT09PXQpcmV0dXJuIGU7cmV0dXJuIGV9KHQscixpKTpadCh0LEd0LGksITApfSx1ZS5sb3dlckNhc2U9b2EsdWUubG93ZXJGaXJzdD1mYSx1ZS5sdD1rZix1ZS5sdGU9T2YsdWUubWF4PWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lmxlbmd0aD9TZSh0LGRhLE5lKTpufSx1ZS5tYXhCeT1mdW5jdGlvbih0LHIpe3JldHVybiB0JiZ0Lmxlbmd0aD9TZSh0LHdpKHIsMiksTmUpOm59LHVlLm1lYW49ZnVuY3Rpb24obil7cmV0dXJuIEh0KG4sZGEpfSx1ZS5tZWFuQnk9ZnVuY3Rpb24obix0KXtyZXR1cm4gSHQobix3aSh0LDIpKX0sdWUubWluPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lmxlbmd0aD9TZSh0LGRhLFhlKTpufSx1ZS5taW5CeT1mdW5jdGlvbih0LHIpe3JldHVybiB0JiZ0Lmxlbmd0aD9TZSh0LHdpKHIsMiksWGUpOm59LHVlLnN0dWJBcnJheT16YSx1ZS5zdHViRmFsc2U9U2EsdWUuc3R1Yk9iamVjdD1mdW5jdGlvbigpe3JldHVybnt9fSx1ZS5zdHViU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sdWUuc3R1YlRydWU9ZnVuY3Rpb24oKXtyZXR1cm4hMH0sdWUubXVsdGlwbHk9VGEsdWUubnRoPWZ1bmN0aW9uKHQscil7cmV0dXJuIHQmJnQubGVuZ3RoP3V1KHQsRWYocikpOm59LHVlLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYnQuXz09PXRoaXMmJihidC5fPWR0KSx0aGlzfSx1ZS5ub29wPWphLHVlLm5vdz1Nbyx1ZS5wYWQ9ZnVuY3Rpb24obix0LHIpe249V2Yobik7dmFyIGU9KHQ9RWYodCkpP19yKG4pOjA7aWYoIXR8fGU+PXQpcmV0dXJuIG47dmFyIHU9KHQtZSkvMjtyZXR1cm4gcmkoenIodSkscikrbityaShFcih1KSxyKX0sdWUucGFkRW5kPWZ1bmN0aW9uKG4sdCxyKXtuPVdmKG4pO3ZhciBlPSh0PUVmKHQpKT9fcihuKTowO3JldHVybiB0JiZlPHQ/bityaSh0LWUscik6bn0sdWUucGFkU3RhcnQ9ZnVuY3Rpb24obix0LHIpe249V2Yobik7dmFyIGU9KHQ9RWYodCkpP19yKG4pOjA7cmV0dXJuIHQmJmU8dD9yaSh0LWUscikrbjpufSx1ZS5wYXJzZUludD1mdW5jdGlvbihuLHQscil7cmV0dXJuIHJ8fG51bGw9PXQ/dD0wOnQmJih0PSt0KSxEcihXZihuKS5yZXBsYWNlKGpuLFwiXCIpLHR8fDApfSx1ZS5yYW5kb209ZnVuY3Rpb24odCxyLGUpe2lmKGUmJlwiYm9vbGVhblwiIT10eXBlb2YgZSYmU2kodCxyLGUpJiYocj1lPW4pLGU9PT1uJiYoXCJib29sZWFuXCI9PXR5cGVvZiByPyhlPXIscj1uKTpcImJvb2xlYW5cIj09dHlwZW9mIHQmJihlPXQsdD1uKSksdD09PW4mJnI9PT1uPyh0PTAscj0xKToodD1SZih0KSxyPT09bj8ocj10LHQ9MCk6cj1SZihyKSksdD5yKXt2YXIgdT10O3Q9cixyPXV9aWYoZXx8dCUxfHxyJTEpe3ZhciBpPU1yKCk7cmV0dXJuIFRyKHQraSooci10K190KFwiMWUtXCIrKChpK1wiXCIpLmxlbmd0aC0xKSkpLHIpfXJldHVybiBjdSh0LHIpfSx1ZS5yZWR1Y2U9ZnVuY3Rpb24obix0LHIpe3ZhciBlPXVmKG4pP010OlF0LHU9YXJndW1lbnRzLmxlbmd0aDwzO3JldHVybiBlKG4sd2kodCw0KSxyLHUsUmUpfSx1ZS5yZWR1Y2VSaWdodD1mdW5jdGlvbihuLHQscil7dmFyIGU9dWYobik/RnQ6UXQsdT1hcmd1bWVudHMubGVuZ3RoPDM7cmV0dXJuIGUobix3aSh0LDQpLHIsdSxFZSl9LHVlLnJlcGVhdD1mdW5jdGlvbih0LHIsZSl7cmV0dXJuIHI9KGU/U2kodCxyLGUpOnI9PT1uKT8xOkVmKHIpLGx1KFdmKHQpLHIpfSx1ZS5yZXBsYWNlPWZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLHQ9V2YoblswXSk7cmV0dXJuIG4ubGVuZ3RoPDM/dDp0LnJlcGxhY2UoblsxXSxuWzJdKX0sdWUucmVzdWx0PWZ1bmN0aW9uKHQscixlKXt2YXIgdT0tMSxpPShyPVN1KHIsdCkpLmxlbmd0aDtmb3IoaXx8KGk9MSx0PW4pOysrdTxpOyl7dmFyIG89bnVsbD09dD9uOnRbSmkoclt1XSldO289PT1uJiYodT1pLG89ZSksdD1oZihvKT9vLmNhbGwodCk6b31yZXR1cm4gdH0sdWUucm91bmQ9JGEsdWUucnVuSW5Db250ZXh0PU1uLHVlLnNhbXBsZT1mdW5jdGlvbihuKXtyZXR1cm4odWYobik/X2U6ZnVuY3Rpb24obil7cmV0dXJuIF9lKHRhKG4pKX0pKG4pfSx1ZS5zaXplPWZ1bmN0aW9uKG4pe2lmKG51bGw9PW4pcmV0dXJuIDA7aWYoZmYobikpcmV0dXJuIHhmKG4pP19yKG4pOm4ubGVuZ3RoO3ZhciB0PU9pKG4pO3JldHVybiB0PT0kfHx0PT1xP24uc2l6ZTpRZShuKS5sZW5ndGh9LHVlLnNuYWtlQ2FzZT1hYSx1ZS5zb21lPWZ1bmN0aW9uKHQscixlKXt2YXIgdT11Zih0KT9OdDpndTtyZXR1cm4gZSYmU2kodCxyLGUpJiYocj1uKSx1KHQsd2kociwzKSl9LHVlLnNvcnRlZEluZGV4PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHl1KG4sdCl9LHVlLnNvcnRlZEluZGV4Qnk9ZnVuY3Rpb24obix0LHIpe3JldHVybiBkdShuLHQsd2kociwyKSl9LHVlLnNvcnRlZEluZGV4T2Y9ZnVuY3Rpb24obix0KXt2YXIgcj1udWxsPT1uPzA6bi5sZW5ndGg7aWYocil7dmFyIGU9eXUobix0KTtpZihlPHImJm5mKG5bZV0sdCkpcmV0dXJuIGV9cmV0dXJuLTF9LHVlLnNvcnRlZExhc3RJbmRleD1mdW5jdGlvbihuLHQpe3JldHVybiB5dShuLHQsITApfSx1ZS5zb3J0ZWRMYXN0SW5kZXhCeT1mdW5jdGlvbihuLHQscil7cmV0dXJuIGR1KG4sdCx3aShyLDIpLCEwKX0sdWUuc29ydGVkTGFzdEluZGV4T2Y9ZnVuY3Rpb24obix0KXtpZihudWxsIT1uJiZuLmxlbmd0aCl7dmFyIHI9eXUobix0LCEwKS0xO2lmKG5mKG5bcl0sdCkpcmV0dXJuIHJ9cmV0dXJuLTF9LHVlLnN0YXJ0Q2FzZT1jYSx1ZS5zdGFydHNXaXRoPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbj1XZihuKSxyPW51bGw9PXI/MDpqZShFZihyKSwwLG4ubGVuZ3RoKSx0PW11KHQpLG4uc2xpY2UocixyK3QubGVuZ3RoKT09dH0sdWUuc3VidHJhY3Q9RGEsdWUuc3VtPWZ1bmN0aW9uKG4pe3JldHVybiBuJiZuLmxlbmd0aD9YdChuLGRhKTowfSx1ZS5zdW1CeT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9YdChuLHdpKHQsMikpOjB9LHVlLnRlbXBsYXRlPWZ1bmN0aW9uKHQscixlKXt2YXIgdT11ZS50ZW1wbGF0ZVNldHRpbmdzO2UmJlNpKHQscixlKSYmKHI9biksdD1XZih0KSxyPUJmKHt9LHIsdSxsaSk7dmFyIGksbyxmPUJmKHt9LHIuaW1wb3J0cyx1LmltcG9ydHMsbGkpLGE9S2YoZiksYz1ycihmLGEpLGw9MCxzPXIuaW50ZXJwb2xhdGV8fCRuLGg9XCJfX3AgKz0gJ1wiLHA9SG4oKHIuZXNjYXBlfHwkbikuc291cmNlK1wifFwiK3Muc291cmNlK1wifFwiKyhzPT09Z24/em46JG4pLnNvdXJjZStcInxcIisoci5ldmFsdWF0ZXx8JG4pLnNvdXJjZStcInwkXCIsXCJnXCIpLHY9XCIvLyMgc291cmNlVVJMPVwiKyhldC5jYWxsKHIsXCJzb3VyY2VVUkxcIik/KHIuc291cmNlVVJMK1wiXCIpLnJlcGxhY2UoL1tcXHJcXG5dL2csXCIgXCIpOlwibG9kYXNoLnRlbXBsYXRlU291cmNlc1tcIisgKytzdCtcIl1cIikrXCJcXG5cIjt0LnJlcGxhY2UocCxmdW5jdGlvbihuLHIsZSx1LGYsYSl7cmV0dXJuIGV8fChlPXUpLGgrPXQuc2xpY2UobCxhKS5yZXBsYWNlKERuLGFyKSxyJiYoaT0hMCxoKz1cIicgK1xcbl9fZShcIityK1wiKSArXFxuJ1wiKSxmJiYobz0hMCxoKz1cIic7XFxuXCIrZitcIjtcXG5fX3AgKz0gJ1wiKSxlJiYoaCs9XCInICtcXG4oKF9fdCA9IChcIitlK1wiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiKSxsPWErbi5sZW5ndGgsbn0pLGgrPVwiJztcXG5cIjt2YXIgXz1ldC5jYWxsKHIsXCJ2YXJpYWJsZVwiKSYmci52YXJpYWJsZTtffHwoaD1cIndpdGggKG9iaikge1xcblwiK2grXCJcXG59XFxuXCIpLGg9KG8/aC5yZXBsYWNlKGZuLFwiXCIpOmgpLnJlcGxhY2UoYW4sXCIkMVwiKS5yZXBsYWNlKGNuLFwiJDE7XCIpLGg9XCJmdW5jdGlvbihcIisoX3x8XCJvYmpcIikrXCIpIHtcXG5cIisoXz9cIlwiOlwib2JqIHx8IChvYmogPSB7fSk7XFxuXCIpK1widmFyIF9fdCwgX19wID0gJydcIisoaT9cIiwgX19lID0gXy5lc2NhcGVcIjpcIlwiKSsobz9cIiwgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCI6XCI7XFxuXCIpK2grXCJyZXR1cm4gX19wXFxufVwiO3ZhciBnPXBhKGZ1bmN0aW9uKCl7cmV0dXJuIEtuKGEsditcInJldHVybiBcIitoKS5hcHBseShuLGMpfSk7aWYoZy5zb3VyY2U9aCxzZihnKSl0aHJvdyBnO3JldHVybiBnfSx1ZS50aW1lcz1mdW5jdGlvbihuLHQpe2lmKChuPUVmKG4pKTwxfHxuPngpcmV0dXJuW107dmFyIHI9ayxlPVRyKG4sayk7dD13aSh0KSxuLT1rO2Zvcih2YXIgdT1ucihlLHQpOysrcjxuOyl0KHIpO3JldHVybiB1fSx1ZS50b0Zpbml0ZT1SZix1ZS50b0ludGVnZXI9RWYsdWUudG9MZW5ndGg9emYsdWUudG9Mb3dlcj1mdW5jdGlvbihuKXtyZXR1cm4gV2YobikudG9Mb3dlckNhc2UoKX0sdWUudG9OdW1iZXI9U2YsdWUudG9TYWZlSW50ZWdlcj1mdW5jdGlvbihuKXtyZXR1cm4gbj9qZShFZihuKSwteCx4KTowPT09bj9uOjB9LHVlLnRvU3RyaW5nPVdmLHVlLnRvVXBwZXI9ZnVuY3Rpb24obil7cmV0dXJuIFdmKG4pLnRvVXBwZXJDYXNlKCl9LHVlLnRyaW09ZnVuY3Rpb24odCxyLGUpe2lmKCh0PVdmKHQpKSYmKGV8fHI9PT1uKSlyZXR1cm4gdC5yZXBsYWNlKHhuLFwiXCIpO2lmKCF0fHwhKHI9bXUocikpKXJldHVybiB0O3ZhciB1PWdyKHQpLGk9Z3Iocik7cmV0dXJuIFd1KHUsdXIodSxpKSxpcih1LGkpKzEpLmpvaW4oXCJcIil9LHVlLnRyaW1FbmQ9ZnVuY3Rpb24odCxyLGUpe2lmKCh0PVdmKHQpKSYmKGV8fHI9PT1uKSlyZXR1cm4gdC5yZXBsYWNlKEFuLFwiXCIpO2lmKCF0fHwhKHI9bXUocikpKXJldHVybiB0O3ZhciB1PWdyKHQpO3JldHVybiBXdSh1LDAsaXIodSxncihyKSkrMSkuam9pbihcIlwiKX0sdWUudHJpbVN0YXJ0PWZ1bmN0aW9uKHQscixlKXtpZigodD1XZih0KSkmJihlfHxyPT09bikpcmV0dXJuIHQucmVwbGFjZShqbixcIlwiKTtpZighdHx8IShyPW11KHIpKSlyZXR1cm4gdDt2YXIgdT1ncih0KTtyZXR1cm4gV3UodSx1cih1LGdyKHIpKSkuam9pbihcIlwiKX0sdWUudHJ1bmNhdGU9ZnVuY3Rpb24odCxyKXt2YXIgZT0zMCx1PVwiLi4uXCI7aWYoX2Yocikpe3ZhciBpPVwic2VwYXJhdG9yXCJpbiByP3Iuc2VwYXJhdG9yOmk7ZT1cImxlbmd0aFwiaW4gcj9FZihyLmxlbmd0aCk6ZSx1PVwib21pc3Npb25cImluIHI/bXUoci5vbWlzc2lvbik6dX12YXIgbz0odD1XZih0KSkubGVuZ3RoO2lmKGNyKHQpKXt2YXIgZj1ncih0KTtvPWYubGVuZ3RofWlmKGU+PW8pcmV0dXJuIHQ7dmFyIGE9ZS1fcih1KTtpZihhPDEpcmV0dXJuIHU7dmFyIGM9Zj9XdShmLDAsYSkuam9pbihcIlwiKTp0LnNsaWNlKDAsYSk7aWYoaT09PW4pcmV0dXJuIGMrdTtpZihmJiYoYSs9Yy5sZW5ndGgtYSksd2YoaSkpe2lmKHQuc2xpY2UoYSkuc2VhcmNoKGkpKXt2YXIgbCxzPWM7Zm9yKGkuZ2xvYmFsfHwoaT1IbihpLnNvdXJjZSxXZihTbi5leGVjKGkpKStcImdcIikpLGkubGFzdEluZGV4PTA7bD1pLmV4ZWMocyk7KXZhciBoPWwuaW5kZXg7Yz1jLnNsaWNlKDAsaD09PW4/YTpoKX19ZWxzZSBpZih0LmluZGV4T2YobXUoaSksYSkhPWEpe3ZhciBwPWMubGFzdEluZGV4T2YoaSk7cD4tMSYmKGM9Yy5zbGljZSgwLHApKX1yZXR1cm4gYyt1fSx1ZS51bmVzY2FwZT1mdW5jdGlvbihuKXtyZXR1cm4obj1XZihuKSkmJmhuLnRlc3Qobik/bi5yZXBsYWNlKGxuLHlyKTpufSx1ZS51bmlxdWVJZD1mdW5jdGlvbihuKXt2YXIgdD0rK290O3JldHVybiBXZihuKSt0fSx1ZS51cHBlckNhc2U9bGEsdWUudXBwZXJGaXJzdD1zYSx1ZS5lYWNoPUxvLHVlLmVhY2hSaWdodD1Xbyx1ZS5maXJzdD1pbyx4YSh1ZSwoTGE9e30sQmUodWUsZnVuY3Rpb24obix0KXtldC5jYWxsKHVlLnByb3RvdHlwZSx0KXx8KExhW3RdPW4pfSksTGEpLHtjaGFpbjohMX0pLHVlLlZFUlNJT049XCI0LjE3LjE1XCIsV3QoW1wiYmluZFwiLFwiYmluZEtleVwiLFwiY3VycnlcIixcImN1cnJ5UmlnaHRcIixcInBhcnRpYWxcIixcInBhcnRpYWxSaWdodFwiXSxmdW5jdGlvbihuKXt1ZVtuXS5wbGFjZWhvbGRlcj11ZX0pLFd0KFtcImRyb3BcIixcInRha2VcIl0sZnVuY3Rpb24odCxyKXthZS5wcm90b3R5cGVbdF09ZnVuY3Rpb24oZSl7ZT1lPT09bj8xOkJyKEVmKGUpLDApO3ZhciB1PXRoaXMuX19maWx0ZXJlZF9fJiYhcj9uZXcgYWUodGhpcyk6dGhpcy5jbG9uZSgpO3JldHVybiB1Ll9fZmlsdGVyZWRfXz91Ll9fdGFrZUNvdW50X189VHIoZSx1Ll9fdGFrZUNvdW50X18pOnUuX192aWV3c19fLnB1c2goe3NpemU6VHIoZSxrKSx0eXBlOnQrKHUuX19kaXJfXzwwP1wiUmlnaHRcIjpcIlwiKX0pLHV9LGFlLnByb3RvdHlwZVt0K1wiUmlnaHRcIl09ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMucmV2ZXJzZSgpW3RdKG4pLnJldmVyc2UoKX19KSxXdChbXCJmaWx0ZXJcIixcIm1hcFwiLFwidGFrZVdoaWxlXCJdLGZ1bmN0aW9uKG4sdCl7dmFyIHI9dCsxLGU9MT09cnx8Mz09cjthZS5wcm90b3R5cGVbbl09ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5jbG9uZSgpO3JldHVybiB0Ll9faXRlcmF0ZWVzX18ucHVzaCh7aXRlcmF0ZWU6d2kobiwzKSx0eXBlOnJ9KSx0Ll9fZmlsdGVyZWRfXz10Ll9fZmlsdGVyZWRfX3x8ZSx0fX0pLFd0KFtcImhlYWRcIixcImxhc3RcIl0sZnVuY3Rpb24obix0KXt2YXIgcj1cInRha2VcIisodD9cIlJpZ2h0XCI6XCJcIik7YWUucHJvdG90eXBlW25dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbcl0oMSkudmFsdWUoKVswXX19KSxXdChbXCJpbml0aWFsXCIsXCJ0YWlsXCJdLGZ1bmN0aW9uKG4sdCl7dmFyIHI9XCJkcm9wXCIrKHQ/XCJcIjpcIlJpZ2h0XCIpO2FlLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9fZmlsdGVyZWRfXz9uZXcgYWUodGhpcyk6dGhpc1tyXSgxKX19KSxhZS5wcm90b3R5cGUuY29tcGFjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbHRlcihkYSl9LGFlLnByb3RvdHlwZS5maW5kPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmZpbHRlcihuKS5oZWFkKCl9LGFlLnByb3RvdHlwZS5maW5kTGFzdD1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChuKX0sYWUucHJvdG90eXBlLmludm9rZU1hcD1zdShmdW5jdGlvbihuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bmV3IGFlKHRoaXMpOnRoaXMubWFwKGZ1bmN0aW9uKHIpe3JldHVybiBLZShyLG4sdCl9KX0pLGFlLnByb3RvdHlwZS5yZWplY3Q9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZmlsdGVyKEhvKHdpKG4pKSl9LGFlLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbih0LHIpe3Q9RWYodCk7dmFyIGU9dGhpcztyZXR1cm4gZS5fX2ZpbHRlcmVkX18mJih0PjB8fHI8MCk/bmV3IGFlKGUpOih0PDA/ZT1lLnRha2VSaWdodCgtdCk6dCYmKGU9ZS5kcm9wKHQpKSxyIT09biYmKGU9KHI9RWYocikpPDA/ZS5kcm9wUmlnaHQoLXIpOmUudGFrZShyLXQpKSxlKX0sYWUucHJvdG90eXBlLnRha2VSaWdodFdoaWxlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUobikucmV2ZXJzZSgpfSxhZS5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRha2Uoayl9LEJlKGFlLnByb3RvdHlwZSxmdW5jdGlvbih0LHIpe3ZhciBlPS9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KHIpLHU9L14oPzpoZWFkfGxhc3QpJC8udGVzdChyKSxpPXVlW3U/XCJ0YWtlXCIrKFwibGFzdFwiPT1yP1wiUmlnaHRcIjpcIlwiKTpyXSxvPXV8fC9eZmluZC8udGVzdChyKTtpJiYodWUucHJvdG90eXBlW3JdPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcy5fX3dyYXBwZWRfXyxmPXU/WzFdOmFyZ3VtZW50cyxhPXIgaW5zdGFuY2VvZiBhZSxjPWZbMF0sbD1hfHx1ZihyKSxzPWZ1bmN0aW9uKG4pe3ZhciB0PWkuYXBwbHkodWUsRHQoW25dLGYpKTtyZXR1cm4gdSYmaD90WzBdOnR9O2wmJmUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJjEhPWMubGVuZ3RoJiYoYT1sPSExKTt2YXIgaD10aGlzLl9fY2hhaW5fXyxwPSEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsdj1vJiYhaCxfPWEmJiFwO2lmKCFvJiZsKXtyPV8/cjpuZXcgYWUodGhpcyk7dmFyIGc9dC5hcHBseShyLGYpO3JldHVybiBnLl9fYWN0aW9uc19fLnB1c2goe2Z1bmM6SW8sYXJnczpbc10sdGhpc0FyZzpufSksbmV3IGZlKGcsaCl9cmV0dXJuIHYmJl8/dC5hcHBseSh0aGlzLGYpOihnPXRoaXMudGhydShzKSx2P3U/Zy52YWx1ZSgpWzBdOmcudmFsdWUoKTpnKX0pfSksV3QoW1wicG9wXCIsXCJwdXNoXCIsXCJzaGlmdFwiLFwic29ydFwiLFwic3BsaWNlXCIsXCJ1bnNoaWZ0XCJdLGZ1bmN0aW9uKG4pe3ZhciB0PVFuW25dLHI9L14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG4pP1widGFwXCI6XCJ0aHJ1XCIsZT0vXig/OnBvcHxzaGlmdCkkLy50ZXN0KG4pO3VlLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3ZhciBuPWFyZ3VtZW50cztpZihlJiYhdGhpcy5fX2NoYWluX18pe3ZhciB1PXRoaXMudmFsdWUoKTtyZXR1cm4gdC5hcHBseSh1Zih1KT91OltdLG4pfXJldHVybiB0aGlzW3JdKGZ1bmN0aW9uKHIpe3JldHVybiB0LmFwcGx5KHVmKHIpP3I6W10sbil9KX19KSxCZShhZS5wcm90b3R5cGUsZnVuY3Rpb24obix0KXt2YXIgcj11ZVt0XTtpZihyKXt2YXIgZT1yLm5hbWUrXCJcIjtldC5jYWxsKEhyLGUpfHwoSHJbZV09W10pLEhyW2VdLnB1c2goe25hbWU6dCxmdW5jOnJ9KX19KSxIcltRdShuLGwpLm5hbWVdPVt7bmFtZTpcIndyYXBwZXJcIixmdW5jOm59XSxhZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj1uZXcgYWUodGhpcy5fX3dyYXBwZWRfXyk7cmV0dXJuIG4uX19hY3Rpb25zX189RnUodGhpcy5fX2FjdGlvbnNfXyksbi5fX2Rpcl9fPXRoaXMuX19kaXJfXyxuLl9fZmlsdGVyZWRfXz10aGlzLl9fZmlsdGVyZWRfXyxuLl9faXRlcmF0ZWVzX189RnUodGhpcy5fX2l0ZXJhdGVlc19fKSxuLl9fdGFrZUNvdW50X189dGhpcy5fX3Rha2VDb3VudF9fLG4uX192aWV3c19fPUZ1KHRoaXMuX192aWV3c19fKSxufSxhZS5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe2lmKHRoaXMuX19maWx0ZXJlZF9fKXt2YXIgbj1uZXcgYWUodGhpcyk7bi5fX2Rpcl9fPS0xLG4uX19maWx0ZXJlZF9fPSEwfWVsc2Uobj10aGlzLmNsb25lKCkpLl9fZGlyX18qPS0xO3JldHVybiBufSxhZS5wcm90b3R5cGUudmFsdWU9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksdD10aGlzLl9fZGlyX18scj11ZihuKSxlPXQ8MCx1PXI/bi5sZW5ndGg6MCxpPWZ1bmN0aW9uKG4sdCxyKXtmb3IodmFyIGU9LTEsdT1yLmxlbmd0aDsrK2U8dTspe3ZhciBpPXJbZV0sbz1pLnNpemU7c3dpdGNoKGkudHlwZSl7Y2FzZVwiZHJvcFwiOm4rPW87YnJlYWs7Y2FzZVwiZHJvcFJpZ2h0XCI6dC09bzticmVhaztjYXNlXCJ0YWtlXCI6dD1Ucih0LG4rbyk7YnJlYWs7Y2FzZVwidGFrZVJpZ2h0XCI6bj1CcihuLHQtbyl9fXJldHVybntzdGFydDpuLGVuZDp0fX0oMCx1LHRoaXMuX192aWV3c19fKSxvPWkuc3RhcnQsZj1pLmVuZCxhPWYtbyxjPWU/ZjpvLTEsbD10aGlzLl9faXRlcmF0ZWVzX18scz1sLmxlbmd0aCxoPTAscD1UcihhLHRoaXMuX190YWtlQ291bnRfXyk7aWYoIXJ8fCFlJiZ1PT1hJiZwPT1hKXJldHVybiBPdShuLHRoaXMuX19hY3Rpb25zX18pO3ZhciB2PVtdO246Zm9yKDthLS0mJmg8cDspe2Zvcih2YXIgXz0tMSxnPW5bYys9dF07KytfPHM7KXt2YXIgeT1sW19dLGQ9eS5pdGVyYXRlZSxiPXkudHlwZSx3PWQoZyk7aWYoMj09YilnPXc7ZWxzZSBpZighdyl7aWYoMT09Yiljb250aW51ZSBuO2JyZWFrIG59fXZbaCsrXT1nfXJldHVybiB2fSx1ZS5wcm90b3R5cGUuYXQ9Um8sdWUucHJvdG90eXBlLmNoYWluPWZ1bmN0aW9uKCl7cmV0dXJuIE9vKHRoaXMpfSx1ZS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBmZSh0aGlzLnZhbHVlKCksdGhpcy5fX2NoYWluX18pfSx1ZS5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3RoaXMuX192YWx1ZXNfXz09PW4mJih0aGlzLl9fdmFsdWVzX189SWYodGhpcy52YWx1ZSgpKSk7dmFyIHQ9dGhpcy5fX2luZGV4X18+PXRoaXMuX192YWx1ZXNfXy5sZW5ndGg7cmV0dXJue2RvbmU6dCx2YWx1ZTp0P246dGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdfX0sdWUucHJvdG90eXBlLnBsYW50PWZ1bmN0aW9uKHQpe2Zvcih2YXIgcixlPXRoaXM7ZSBpbnN0YW5jZW9mIG9lOyl7dmFyIHU9UWkoZSk7dS5fX2luZGV4X189MCx1Ll9fdmFsdWVzX189bixyP2kuX193cmFwcGVkX189dTpyPXU7dmFyIGk9dTtlPWUuX193cmFwcGVkX199cmV0dXJuIGkuX193cmFwcGVkX189dCxyfSx1ZS5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX193cmFwcGVkX187aWYodCBpbnN0YW5jZW9mIGFlKXt2YXIgcj10O3JldHVybiB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCYmKHI9bmV3IGFlKHRoaXMpKSwocj1yLnJldmVyc2UoKSkuX19hY3Rpb25zX18ucHVzaCh7ZnVuYzpJbyxhcmdzOltwb10sdGhpc0FyZzpufSksbmV3IGZlKHIsdGhpcy5fX2NoYWluX18pfXJldHVybiB0aGlzLnRocnUocG8pfSx1ZS5wcm90b3R5cGUudG9KU09OPXVlLnByb3RvdHlwZS52YWx1ZU9mPXVlLnByb3RvdHlwZS52YWx1ZT1mdW5jdGlvbigpe3JldHVybiBPdSh0aGlzLl9fd3JhcHBlZF9fLHRoaXMuX19hY3Rpb25zX18pfSx1ZS5wcm90b3R5cGUuZmlyc3Q9dWUucHJvdG90eXBlLmhlYWQsanImJih1ZS5wcm90b3R5cGVbanJdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSx1ZX0oKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJlwib2JqZWN0XCI9PXR5cGVvZiBkZWZpbmUuYW1kJiZkZWZpbmUuYW1kPyhidC5fPWRyLGRlZmluZShmdW5jdGlvbigpe3JldHVybiBkcn0pKTptdD8oKG10LmV4cG9ydHM9ZHIpLl89ZHIsd3QuXz1kcik6YnQuXz1kcn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXh2WkdGemFDNXFjeUpkTENKdVlXMWxjeUk2V3lKMWJtUmxabWx1WldRaUxDSk1RVkpIUlY5QlVsSkJXVjlUU1ZwRklpd2lSbFZPUTE5RlVsSlBVbDlVUlZoVUlpd2lVRXhCUTBWSVQweEVSVklpTENKRFRFOU9SVjlFUlVWUVgwWk1RVWNpTENKRFRFOU9SVjlHVEVGVVgwWk1RVWNpTENKRFRFOU9SVjlUV1UxQ1QweFRYMFpNUVVjaUxDSkRUMDFRUVZKRlgxQkJVbFJKUVV4ZlJreEJSeUlzSWtOUFRWQkJVa1ZmVlU1UFVrUkZVa1ZFWDBaTVFVY2lMQ0pYVWtGUVgwSkpUa1JmUmt4QlJ5SXNJbGRTUVZCZlFrbE9SRjlMUlZsZlJreEJSeUlzSWxkU1FWQmZRMVZTVWxsZlFrOVZUa1JmUmt4QlJ5SXNJbGRTUVZCZlExVlNVbGxmUmt4QlJ5SXNJbGRTUVZCZlExVlNVbGxmVWtsSFNGUmZSa3hCUnlJc0lsZFNRVkJmVUVGU1ZFbEJURjlHVEVGSElpd2lWMUpCVUY5UVFWSlVTVUZNWDFKSlIwaFVYMFpNUVVjaUxDSlhVa0ZRWDBGU1dWOUdURUZISWl3aVYxSkJVRjlTUlVGU1IxOUdURUZISWl3aVYxSkJVRjlHVEVsUVgwWk1RVWNpTENKSVQxUmZRMDlWVGxRaUxDSklUMVJmVTFCQlRpSXNJa2xPUmtsT1NWUlpJaXdpVFVGWVgxTkJSa1ZmU1U1VVJVZEZVaUlzSWsxQldGOUpUbFJGUjBWU0lpd2lUa0ZPSWl3aVRtRk9JaXdpVFVGWVgwRlNVa0ZaWDB4RlRrZFVTQ0lzSWsxQldGOUJVbEpCV1Y5SlRrUkZXQ0lzSWtoQlRFWmZUVUZZWDBGU1VrRlpYMHhGVGtkVVNDSXNJbmR5WVhCR2JHRm5jeUlzSW1GeVozTlVZV2NpTENKaGNuSmhlVlJoWnlJc0ltRnplVzVqVkdGbklpd2lZbTl2YkZSaFp5SXNJbVJoZEdWVVlXY2lMQ0prYjIxRmVHTlVZV2NpTENKbGNuSnZjbFJoWnlJc0ltWjFibU5VWVdjaUxDSm5aVzVVWVdjaUxDSnRZWEJVWVdjaUxDSnVkVzFpWlhKVVlXY2lMQ0p1ZFd4c1ZHRm5JaXdpYjJKcVpXTjBWR0ZuSWl3aWNISnZlSGxVWVdjaUxDSnlaV2RsZUhCVVlXY2lMQ0p6WlhSVVlXY2lMQ0p6ZEhKcGJtZFVZV2NpTENKemVXMWliMnhVWVdjaUxDSjFibVJsWm1sdVpXUlVZV2NpTENKM1pXRnJUV0Z3VkdGbklpd2lZWEp5WVhsQ2RXWm1aWEpVWVdjaUxDSmtZWFJoVm1sbGQxUmhaeUlzSW1ac2IyRjBNekpVWVdjaUxDSm1iRzloZERZMFZHRm5JaXdpYVc1ME9GUmhaeUlzSW1sdWRERTJWR0ZuSWl3aWFXNTBNekpVWVdjaUxDSjFhVzUwT0ZSaFp5SXNJblZwYm5RNFEyeGhiWEJsWkZSaFp5SXNJblZwYm5ReE5sUmhaeUlzSW5WcGJuUXpNbFJoWnlJc0luSmxSVzF3ZEhsVGRISnBibWRNWldGa2FXNW5JaXdpY21WRmJYQjBlVk4wY21sdVowMXBaR1JzWlNJc0luSmxSVzF3ZEhsVGRISnBibWRVY21GcGJHbHVaeUlzSW5KbFJYTmpZWEJsWkVoMGJXd2lMQ0p5WlZWdVpYTmpZWEJsWkVoMGJXd2lMQ0p5WlVoaGMwVnpZMkZ3WldSSWRHMXNJaXdpVW1WblJYaHdJaXdpYzI5MWNtTmxJaXdpY21WSVlYTlZibVZ6WTJGd1pXUklkRzFzSWl3aWNtVkZjMk5oY0dVaUxDSnlaVVYyWVd4MVlYUmxJaXdpY21WSmJuUmxjbkJ2YkdGMFpTSXNJbkpsU1hORVpXVndVSEp2Y0NJc0luSmxTWE5RYkdGcGJsQnliM0FpTENKeVpWQnliM0JPWVcxbElpd2ljbVZTWldkRmVIQkRhR0Z5SWl3aWNtVklZWE5TWldkRmVIQkRhR0Z5SWl3aWNtVlVjbWx0SWl3aWNtVlVjbWx0VTNSaGNuUWlMQ0p5WlZSeWFXMUZibVFpTENKeVpWZHlZWEJEYjIxdFpXNTBJaXdpY21WWGNtRndSR1YwWVdsc2N5SXNJbkpsVTNCc2FYUkVaWFJoYVd4eklpd2ljbVZCYzJOcGFWZHZjbVFpTENKeVpVVnpZMkZ3WlVOb1lYSWlMQ0p5WlVWelZHVnRjR3hoZEdVaUxDSnlaVVpzWVdkeklpd2ljbVZKYzBKaFpFaGxlQ0lzSW5KbFNYTkNhVzVoY25raUxDSnlaVWx6U0c5emRFTjBiM0lpTENKeVpVbHpUMk4wWVd3aUxDSnlaVWx6VldsdWRDSXNJbkpsVEdGMGFXNGlMQ0p5WlU1dlRXRjBZMmdpTENKeVpWVnVaWE5qWVhCbFpGTjBjbWx1WnlJc0luSnpRMjl0WW05U1lXNW5aU0lzSW5KelEyOXRZbTlOWVhKcmMxSmhibWRsSWl3aWNuTkNjbVZoYTFKaGJtZGxJaXdpY25OTllYUm9UM0JTWVc1blpTSXNJbkp6UW5KbFlXc2lMQ0p5YzBOdmJXSnZJaXdpY25ORWFXZHBkSE1pTENKeWMweHZkMlZ5SWl3aWNuTk5hWE5qSWl3aWNuTkdhWFI2SWl3aWNuTk9iMjVCYzNSeVlXd2lMQ0p5YzFKbFoybHZibUZzSWl3aWNuTlRkWEp5VUdGcGNpSXNJbkp6VlhCd1pYSWlMQ0p5YzAxcGMyTk1iM2RsY2lJc0luSnpUV2x6WTFWd2NHVnlJaXdpY21WUGNIUk5iMlFpTENKeWMxTmxjU0lzSW1wdmFXNGlMQ0p5YzBWdGIycHBJaXdpY25OVGVXMWliMndpTENKeVpVRndiM01pTENKeVpVTnZiV0p2VFdGeWF5SXNJbkpsVlc1cFkyOWtaU0lzSW5KbFZXNXBZMjlrWlZkdmNtUWlMQ0p5WlVoaGMxVnVhV052WkdVaUxDSnlaVWhoYzFWdWFXTnZaR1ZYYjNKa0lpd2lZMjl1ZEdWNGRGQnliM0J6SWl3aWRHVnRjR3hoZEdWRGIzVnVkR1Z5SWl3aWRIbHdaV1JCY25KaGVWUmhaM01pTENKamJHOXVaV0ZpYkdWVVlXZHpJaXdpYzNSeWFXNW5SWE5qWVhCbGN5SXNJbHhjSWl3aUp5SXNJbHh1SWl3aVhISWlMQ0xpZ0tnaUxDTGlnS2tpTENKbWNtVmxVR0Z5YzJWR2JHOWhkQ0lzSW5CaGNuTmxSbXh2WVhRaUxDSm1jbVZsVUdGeWMyVkpiblFpTENKd1lYSnpaVWx1ZENJc0ltWnlaV1ZIYkc5aVlXd2lMQ0puYkc5aVlXd2lMQ0pQWW1wbFkzUWlMQ0ptY21WbFUyVnNaaUlzSW5ObGJHWWlMQ0p5YjI5MElpd2lSblZ1WTNScGIyNGlMQ0ptY21WbFJYaHdiM0owY3lJc0ltVjRjRzl5ZEhNaUxDSnViMlJsVkhsd1pTSXNJbVp5WldWTmIyUjFiR1VpTENKdGIyUjFiR1VpTENKdGIyUjFiR1ZGZUhCdmNuUnpJaXdpWm5KbFpWQnliMk5sYzNNaUxDSndjbTlqWlhOeklpd2libTlrWlZWMGFXd2lMQ0p5WlhGMWFYSmxJaXdpZEhsd1pYTWlMQ0ppYVc1a2FXNW5JaXdpWlNJc0ltNXZaR1ZKYzBGeWNtRjVRblZtWm1WeUlpd2lhWE5CY25KaGVVSjFabVpsY2lJc0ltNXZaR1ZKYzBSaGRHVWlMQ0pwYzBSaGRHVWlMQ0p1YjJSbFNYTk5ZWEFpTENKcGMwMWhjQ0lzSW01dlpHVkpjMUpsWjBWNGNDSXNJbWx6VW1WblJYaHdJaXdpYm05a1pVbHpVMlYwSWl3aWFYTlRaWFFpTENKdWIyUmxTWE5VZVhCbFpFRnljbUY1SWl3aWFYTlVlWEJsWkVGeWNtRjVJaXdpWVhCd2JIa2lMQ0ptZFc1aklpd2lkR2hwYzBGeVp5SXNJbUZ5WjNNaUxDSnNaVzVuZEdnaUxDSmpZV3hzSWl3aVlYSnlZWGxCWjJkeVpXZGhkRzl5SWl3aVlYSnlZWGtpTENKelpYUjBaWElpTENKcGRHVnlZWFJsWlNJc0ltRmpZM1Z0ZFd4aGRHOXlJaXdpYVc1a1pYZ2lMQ0oyWVd4MVpTSXNJbUZ5Y21GNVJXRmphQ0lzSW1GeWNtRjVSWFpsY25raUxDSndjbVZrYVdOaGRHVWlMQ0poY25KaGVVWnBiSFJsY2lJc0luSmxjMGx1WkdWNElpd2ljbVZ6ZFd4MElpd2lZWEp5WVhsSmJtTnNkV1JsY3lJc0ltSmhjMlZKYm1SbGVFOW1JaXdpWVhKeVlYbEpibU5zZFdSbGMxZHBkR2dpTENKamIyMXdZWEpoZEc5eUlpd2lZWEp5WVhsTllYQWlMQ0pCY25KaGVTSXNJbUZ5Y21GNVVIVnphQ0lzSW5aaGJIVmxjeUlzSW05bVpuTmxkQ0lzSW1GeWNtRjVVbVZrZFdObElpd2lhVzVwZEVGalkzVnRJaXdpWVhKeVlYbFNaV1IxWTJWU2FXZG9kQ0lzSW1GeWNtRjVVMjl0WlNJc0ltRnpZMmxwVTJsNlpTSXNJbUpoYzJWUWNtOXdaWEowZVNJc0ltSmhjMlZHYVc1a1MyVjVJaXdpWTI5c2JHVmpkR2x2YmlJc0ltVmhZMmhHZFc1aklpd2lhMlY1SWl3aVltRnpaVVpwYm1SSmJtUmxlQ0lzSW1aeWIyMUpibVJsZUNJc0ltWnliMjFTYVdkb2RDSXNJbUpoYzJWSmMwNWhUaUlzSW1KaGMyVkpibVJsZUU5bVYybDBhQ0lzSW1KaGMyVk5aV0Z1SWl3aVltRnpaVk4xYlNJc0ltOWlhbVZqZENJc0ltSmhjMlZRY205d1pYSjBlVTltSWl3aVltRnpaVkpsWkhWalpTSXNJbU4xY25KbGJuUWlMQ0ppWVhObFZHbHRaWE1pTENKdUlpd2lZbUZ6WlZWdVlYSjVJaXdpWW1GelpWWmhiSFZsY3lJc0luQnliM0J6SWl3aVkyRmphR1ZJWVhNaUxDSmpZV05vWlNJc0ltaGhjeUlzSW1Ob1lYSnpVM1JoY25SSmJtUmxlQ0lzSW5OMGNsTjViV0p2YkhNaUxDSmphSEpUZVcxaWIyeHpJaXdpWTJoaGNuTkZibVJKYm1SbGVDSXNJbVJsWW5WeWNreGxkSFJsY2lJc0lzT0FJaXdpdzRFaUxDTERnaUlzSXNPRElpd2l3NFFpTENMRGhTSXNJc09nSWl3aXc2RWlMQ0xEb2lJc0lzT2pJaXdpdzZRaUxDTERwU0lzSXNPSElpd2l3NmNpTENMRGtDSXNJc093SWl3aXc0Z2lMQ0xEaVNJc0lzT0tJaXdpdzRzaUxDTERxQ0lzSXNPcElpd2l3Nm9pTENMRHF5SXNJc09NSWl3aXc0MGlMQ0xEamlJc0lzT1BJaXdpdzZ3aUxDTERyU0lzSXNPdUlpd2l3NjhpTENMRGtTSXNJc094SWl3aXc1SWlMQ0xEa3lJc0lzT1VJaXdpdzVVaUxDTERsaUlzSXNPWUlpd2l3N0lpTENMRHN5SXNJc08wSWl3aXc3VWlMQ0xEdGlJc0lzTzRJaXdpdzVraUxDTERtaUlzSXNPYklpd2l3NXdpTENMRHVTSXNJc082SWl3aXc3c2lMQ0xEdkNJc0lzT2RJaXdpdzcwaUxDTER2eUlzSXNPR0lpd2l3NllpTENMRG5pSXNJc08rSWl3aXc1OGlMQ0xFZ0NJc0lzU0NJaXdpeElRaUxDTEVnU0lzSXNTRElpd2l4SVVpTENMRWhpSXNJc1NJSWl3aXhJb2lMQ0xFakNJc0lzU0hJaXdpeElraUxDTEVpeUlzSXNTTklpd2l4STRpTENMRWtDSXNJc1NQSWl3aXhKRWlMQ0xFa2lJc0lzU1VJaXdpeEpZaUxDTEVtQ0lzSXNTYUlpd2l4Sk1pTENMRWxTSXNJc1NYSWl3aXhKa2lMQ0xFbXlJc0lzU2NJaXdpeEo0aUxDTEVvQ0lzSXNTaUlpd2l4SjBpTENMRW55SXNJc1NoSWl3aXhLTWlMQ0xFcENJc0lzU21JaXdpeEtVaUxDTEVweUlzSXNTb0lpd2l4S29pTENMRXJDSXNJc1N1SWl3aXhMQWlMQ0xFcVNJc0lzU3JJaXdpeEswaUxDTEVyeUlzSXNTeElpd2l4TFFpTENMRXRTSXNJc1MySWl3aXhMY2lMQ0xFdUNJc0lzUzVJaXdpeExzaUxDTEV2U0lzSXNTL0lpd2l4WUVpTENMRXVpSXNJc1M4SWl3aXhMNGlMQ0xGZ0NJc0lzV0NJaXdpeFlNaUxDTEZoU0lzSXNXSElpd2l4WW9pTENMRmhDSXNJc1dHSWl3aXhZZ2lMQ0xGaXlJc0lzV01JaXdpeFk0aUxDTEZrQ0lzSXNXTklpd2l4WThpTENMRmtTSXNJc1dVSWl3aXhaWWlMQ0xGbUNJc0lzV1ZJaXdpeFpjaUxDTEZtU0lzSXNXYUlpd2l4WndpTENMRm5pSXNJc1dnSWl3aXhac2lMQ0xGblNJc0lzV2ZJaXdpeGFFaUxDTEZvaUlzSXNXa0lpd2l4YVlpTENMRm95SXNJc1dsSWl3aXhhY2lMQ0xGcUNJc0lzV3FJaXdpeGF3aUxDTEZyaUlzSXNXd0lpd2l4YklpTENMRnFTSXNJc1dySWl3aXhhMGlMQ0xGcnlJc0lzV3hJaXdpeGJNaUxDTEZ0Q0lzSXNXMUlpd2l4YllpTENMRnR5SXNJc1c0SWl3aXhia2lMQ0xGdXlJc0lzVzlJaXdpeGJvaUxDTEZ2Q0lzSXNXK0lpd2l4TElpTENMRXN5SXNJc1dTSWl3aXhaTWlMQ0xGaVNJc0lzVy9JaXdpWlhOallYQmxTSFJ0YkVOb1lYSWlMQ0ltSWl3aVBDSXNJajRpTENKY0lpSXNJbVZ6WTJGd1pWTjBjbWx1WjBOb1lYSWlMQ0pqYUhJaUxDSm9ZWE5WYm1samIyUmxJaXdpYzNSeWFXNW5JaXdpZEdWemRDSXNJbTFoY0ZSdlFYSnlZWGtpTENKdFlYQWlMQ0p6YVhwbElpd2labTl5UldGamFDSXNJbTkyWlhKQmNtY2lMQ0owY21GdWMyWnZjbTBpTENKaGNtY2lMQ0p5WlhCc1lXTmxTRzlzWkdWeWN5SXNJbkJzWVdObGFHOXNaR1Z5SWl3aWMyVjBWRzlCY25KaGVTSXNJbk5sZENJc0luTmxkRlJ2VUdGcGNuTWlMQ0p6ZEhKcGJtZFRhWHBsSWl3aWJHRnpkRWx1WkdWNElpd2ljM1J5YVc1blZHOUJjbkpoZVNJc0ltMWhkR05vSWl3aWMzQnNhWFFpTENKMWJtVnpZMkZ3WlVoMGJXeERhR0Z5SWl3aUptRnRjRHNpTENJbWJIUTdJaXdpSm1kME95SXNJaVp4ZFc5ME95SXNJaVlqTXprN0lpd2lYeUlzSW5KMWJrbHVRMjl1ZEdWNGRDSXNJbU52Ym5SbGVIUWlMQ0oxYVdRaUxDSmtaV1poZFd4MGN5SXNJbkJwWTJzaUxDSkVZWFJsSWl3aVJYSnliM0lpTENKTllYUm9JaXdpVTNSeWFXNW5JaXdpVkhsd1pVVnljbTl5SWl3aVlYSnlZWGxRY205MGJ5SXNJbkJ5YjNSdmRIbHdaU0lzSW1aMWJtTlFjbTkwYnlJc0ltOWlhbVZqZEZCeWIzUnZJaXdpWTI5eVpVcHpSR0YwWVNJc0ltWjFibU5VYjFOMGNtbHVaeUlzSW5SdlUzUnlhVzVuSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKcFpFTnZkVzUwWlhJaUxDSnRZWE5yVTNKalMyVjVJaXdpWlhobFl5SXNJbXRsZVhNaUxDSkpSVjlRVWs5VVR5SXNJbTVoZEdsMlpVOWlhbVZqZEZSdlUzUnlhVzVuSWl3aWIySnFaV04wUTNSdmNsTjBjbWx1WnlJc0ltOXNaRVJoYzJnaUxDSnlaVWx6VG1GMGFYWmxJaXdpY21Wd2JHRmpaU0lzSWtKMVptWmxjaUlzSWxONWJXSnZiQ0lzSWxWcGJuUTRRWEp5WVhraUxDSmhiR3h2WTFWdWMyRm1aU0lzSW1kbGRGQnliM1J2ZEhsd1pTSXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2liMkpxWldOMFEzSmxZWFJsSWl3aVkzSmxZWFJsSWl3aWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVWlMQ0p6Y0d4cFkyVWlMQ0p6Y0hKbFlXUmhZbXhsVTNsdFltOXNJaXdpYVhORGIyNWpZWFJUY0hKbFlXUmhZbXhsSWl3aWMzbHRTWFJsY21GMGIzSWlMQ0pwZEdWeVlYUnZjaUlzSW5ONWJWUnZVM1J5YVc1blZHRm5JaXdpZEc5VGRISnBibWRVWVdjaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltZGxkRTVoZEdsMlpTSXNJbU4wZUVOc1pXRnlWR2x0Wlc5MWRDSXNJbU5zWldGeVZHbHRaVzkxZENJc0ltTjBlRTV2ZHlJc0ltNXZkeUlzSW1OMGVGTmxkRlJwYldWdmRYUWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWJtRjBhWFpsUTJWcGJDSXNJbU5sYVd3aUxDSnVZWFJwZG1WR2JHOXZjaUlzSW1ac2IyOXlJaXdpYm1GMGFYWmxSMlYwVTNsdFltOXNjeUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5SXNJbTVoZEdsMlpVbHpRblZtWm1WeUlpd2lhWE5DZFdabVpYSWlMQ0p1WVhScGRtVkpjMFpwYm1sMFpTSXNJbWx6Um1sdWFYUmxJaXdpYm1GMGFYWmxTbTlwYmlJc0ltNWhkR2wyWlV0bGVYTWlMQ0p1WVhScGRtVk5ZWGdpTENKdFlYZ2lMQ0p1WVhScGRtVk5hVzRpTENKdGFXNGlMQ0p1WVhScGRtVk9iM2NpTENKdVlYUnBkbVZRWVhKelpVbHVkQ0lzSW01aGRHbDJaVkpoYm1SdmJTSXNJbkpoYm1SdmJTSXNJbTVoZEdsMlpWSmxkbVZ5YzJVaUxDSnlaWFpsY25ObElpd2lSR0YwWVZacFpYY2lMQ0pOWVhBaUxDSlFjbTl0YVhObElpd2lVMlYwSWl3aVYyVmhhMDFoY0NJc0ltNWhkR2wyWlVOeVpXRjBaU0lzSW0xbGRHRk5ZWEFpTENKeVpXRnNUbUZ0WlhNaUxDSmtZWFJoVm1sbGQwTjBiM0pUZEhKcGJtY2lMQ0owYjFOdmRYSmpaU0lzSW0xaGNFTjBiM0pUZEhKcGJtY2lMQ0p3Y205dGFYTmxRM1J2Y2xOMGNtbHVaeUlzSW5ObGRFTjBiM0pUZEhKcGJtY2lMQ0ozWldGclRXRndRM1J2Y2xOMGNtbHVaeUlzSW5ONWJXSnZiRkJ5YjNSdklpd2ljM2x0WW05c1ZtRnNkV1ZQWmlJc0luWmhiSFZsVDJZaUxDSnplVzFpYjJ4VWIxTjBjbWx1WnlJc0lteHZaR0Z6YUNJc0ltbHpUMkpxWldOMFRHbHJaU0lzSW1selFYSnlZWGtpTENKTVlYcDVWM0poY0hCbGNpSXNJa3h2WkdGemFGZHlZWEJ3WlhJaUxDSjNjbUZ3Y0dWeVEyeHZibVVpTENKaVlYTmxRM0psWVhSbElpd2ljSEp2ZEc4aUxDSnBjMDlpYW1WamRDSXNJbUpoYzJWTWIyUmhjMmdpTENKamFHRnBia0ZzYkNJc0luUm9hWE1pTENKZlgzZHlZWEJ3WldSZlh5SXNJbDlmWVdOMGFXOXVjMTlmSWl3aVgxOWphR0ZwYmw5Zklpd2lYMTlwYm1SbGVGOWZJaXdpWDE5MllXeDFaWE5mWHlJc0lsOWZaR2x5WDE4aUxDSmZYMlpwYkhSbGNtVmtYMThpTENKZlgybDBaWEpoZEdWbGMxOWZJaXdpWDE5MFlXdGxRMjkxYm5SZlh5SXNJbDlmZG1sbGQzTmZYeUlzSWtoaGMyZ2lMQ0psYm5SeWFXVnpJaXdpWTJ4bFlYSWlMQ0psYm5SeWVTSXNJa3hwYzNSRFlXTm9aU0lzSWsxaGNFTmhZMmhsSWl3aVUyVjBRMkZqYUdVaUxDSmZYMlJoZEdGZlh5SXNJbUZrWkNJc0lsTjBZV05ySWl3aVpHRjBZU0lzSW1GeWNtRjVUR2xyWlV0bGVYTWlMQ0pwYm1obGNtbDBaV1FpTENKcGMwRnljaUlzSW1selFYSm5JaXdpYVhOQmNtZDFiV1Z1ZEhNaUxDSnBjMEoxWm1ZaUxDSnBjMVI1Y0dVaUxDSnphMmx3U1c1a1pYaGxjeUlzSW1selNXNWtaWGdpTENKd2RYTm9JaXdpWVhKeVlYbFRZVzF3YkdVaUxDSmlZWE5sVW1GdVpHOXRJaXdpWVhOemFXZHVUV1Z5WjJWV1lXeDFaU0lzSW1WeElpd2lZbUZ6WlVGemMybG5ibFpoYkhWbElpd2lZWE56YVdkdVZtRnNkV1VpTENKdlltcFdZV3gxWlNJc0ltRnpjMjlqU1c1a1pYaFBaaUlzSW1KaGMyVkJaMmR5WldkaGRHOXlJaXdpWW1GelpVVmhZMmdpTENKaVlYTmxRWE56YVdkdUlpd2lZMjl3ZVU5aWFtVmpkQ0lzSW1OdmJtWnBaM1Z5WVdKc1pTSXNJbVZ1ZFcxbGNtRmliR1VpTENKM2NtbDBZV0pzWlNJc0ltSmhjMlZCZENJc0luQmhkR2h6SWl3aWMydHBjQ0lzSW1kbGRDSXNJbUpoYzJWRGJHRnRjQ0lzSW01MWJXSmxjaUlzSW14dmQyVnlJaXdpZFhCd1pYSWlMQ0ppWVhObFEyeHZibVVpTENKaWFYUnRZWE5ySWl3aVkzVnpkRzl0YVhwbGNpSXNJbk4wWVdOcklpd2lhWE5FWldWd0lpd2lhWE5HYkdGMElpd2lhWE5HZFd4c0lpd2lZMjl1YzNSeWRXTjBiM0lpTENKcGJuQjFkQ0lzSW1OdmNIbEJjbkpoZVNJc0luUmhaeUlzSW1kbGRGUmhaeUlzSW1selJuVnVZeUlzSW1Oc2IyNWxRblZtWm1WeUlpd2lhVzVwZEVOc2IyNWxUMkpxWldOMElpd2laMlYwVTNsdFltOXNjMGx1SWl3aWEyVjVjMGx1SWl3aVoyVjBVM2x0WW05c2N5SXNJbk41YldKdmJDSXNJbkpsWjJWNGNDSXNJa04wYjNJaUxDSmpiRzl1WlVGeWNtRjVRblZtWm1WeUlpd2laR0YwWVZacFpYY2lMQ0ppZFdabVpYSWlMQ0ppZVhSbFQyWm1jMlYwSWl3aVlubDBaVXhsYm1kMGFDSXNJbU5zYjI1bFZIbHdaV1JCY25KaGVTSXNJbk4wWVdOclpXUWlMQ0p6ZFdKV1lXeDFaU0lzSW1kbGRFRnNiRXRsZVhOSmJpSXNJbWRsZEVGc2JFdGxlWE1pTENKaVlYTmxRMjl1Wm05eWJYTlVieUlzSW1KaGMyVkVaV3hoZVNJc0luZGhhWFFpTENKaVlYTmxSR2xtWm1WeVpXNWpaU0lzSW1sdVkyeDFaR1Z6SWl3aWFYTkRiMjF0YjI0aUxDSjJZV3gxWlhOTVpXNW5kR2dpTENKdmRYUmxjaUlzSW1OdmJYQjFkR1ZrSWl3aWRtRnNkV1Z6U1c1a1pYZ2lMQ0owWlcxd2JHRjBaVk5sZEhScGJtZHpJaXdpWlhOallYQmxJaXdpWlhaaGJIVmhkR1VpTENKcGJuUmxjbkJ2YkdGMFpTSXNJblpoY21saFlteGxJaXdpYVcxd2IzSjBjeUlzSW1SbGJHVjBaU0lzSW5CdmNDSXNJbWhoYzJnaUxDSm5aWFJOWVhCRVlYUmhJaXdpY0dGcGNuTWlMQ0pqY21WaGRHVkNZWE5sUldGamFDSXNJbUpoYzJWR2IzSlBkMjRpTENKaVlYTmxSV0ZqYUZKcFoyaDBJaXdpWW1GelpVWnZjazkzYmxKcFoyaDBJaXdpWW1GelpVVjJaWEo1SWl3aVltRnpaVVY0ZEhKbGJYVnRJaXdpYVhOVGVXMWliMndpTENKaVlYTmxSbWxzZEdWeUlpd2lZbUZ6WlVac1lYUjBaVzRpTENKa1pYQjBhQ0lzSW1selUzUnlhV04wSWl3aWFYTkdiR0YwZEdWdVlXSnNaU0lzSW1KaGMyVkdiM0lpTENKamNtVmhkR1ZDWVhObFJtOXlJaXdpWW1GelpVWnZjbEpwWjJoMElpd2lZbUZ6WlVaMWJtTjBhVzl1Y3lJc0ltbHpSblZ1WTNScGIyNGlMQ0ppWVhObFIyVjBJaXdpY0dGMGFDSXNJbU5oYzNSUVlYUm9JaXdpZEc5TFpYa2lMQ0ppWVhObFIyVjBRV3hzUzJWNWN5SXNJbXRsZVhOR2RXNWpJaXdpYzNsdFltOXNjMFoxYm1NaUxDSmlZWE5sUjJWMFZHRm5JaXdpYVhOUGQyNGlMQ0oxYm0xaGMydGxaQ0lzSW1KaGMyVkhkQ0lzSW05MGFHVnlJaXdpWW1GelpVaGhjeUlzSW1KaGMyVklZWE5KYmlJc0ltSmhjMlZKYm5SbGNuTmxZM1JwYjI0aUxDSmhjbkpoZVhNaUxDSnZkR2hNWlc1bmRHZ2lMQ0p2ZEdoSmJtUmxlQ0lzSW1OaFkyaGxjeUlzSW0xaGVFeGxibWQwYUNJc0lrbHVabWx1YVhSNUlpd2ljMlZsYmlJc0ltSmhjMlZKYm5admEyVWlMQ0p3WVhKbGJuUWlMQ0pzWVhOMElpd2lZbUZ6WlVselFYSm5kVzFsYm5Seklpd2lZbUZ6WlVselJYRjFZV3dpTENKbGNYVmhiRVoxYm1NaUxDSnZZbXBKYzBGeWNpSXNJbTkwYUVselFYSnlJaXdpYjJKcVZHRm5JaXdpYjNSb1ZHRm5JaXdpYjJKcVNYTlBZbW9pTENKdmRHaEpjMDlpYWlJc0ltbHpVMkZ0WlZSaFp5SXNJbVZ4ZFdGc1FYSnlZWGx6SWl3aWJtRnRaU0lzSW0xbGMzTmhaMlVpTENKamIyNTJaWEowSWl3aWFYTlFZWEowYVdGc0lpd2liMkpxU1hOWGNtRndjR1ZrSWl3aWIzUm9TWE5YY21Gd2NHVmtJaXdpYjJKcVZXNTNjbUZ3Y0dWa0lpd2liM1JvVlc1M2NtRndjR1ZrSWl3aWIySnFVSEp2Y0hNaUxDSnZZbXBNWlc1bmRHZ2lMQ0p6YTJsd1EzUnZjaUlzSW05MGFGWmhiSFZsSWl3aVkyOXRjR0Z5WldRaUxDSnZZbXBEZEc5eUlpd2liM1JvUTNSdmNpSXNJbUpoYzJWSmMwMWhkR05vSWl3aWJXRjBZMmhFWVhSaElpd2libTlEZFhOMGIyMXBlbVZ5SWl3aWMzSmpWbUZzZFdVaUxDSmlZWE5sU1hOT1lYUnBkbVVpTENKaVlYTmxTWFJsY21GMFpXVWlMQ0pwWkdWdWRHbDBlU0lzSW1KaGMyVk5ZWFJqYUdWelVISnZjR1Z5ZEhraUxDSmlZWE5sVFdGMFkyaGxjeUlzSW5CeWIzQmxjblI1SWl3aVltRnpaVXRsZVhNaUxDSnBjMUJ5YjNSdmRIbHdaU0lzSW1KaGMyVk1kQ0lzSW1KaGMyVk5ZWEFpTENKcGMwRnljbUY1VEdsclpTSXNJbWRsZEUxaGRHTm9SR0YwWVNJc0ltMWhkR05vWlhOVGRISnBZM1JEYjIxd1lYSmhZbXhsSWl3aWFYTkxaWGtpTENKcGMxTjBjbWxqZEVOdmJYQmhjbUZpYkdVaUxDSm9ZWE5KYmlJc0ltSmhjMlZOWlhKblpTSXNJbk55WTBsdVpHVjRJaXdpYldWeVoyVkdkVzVqSWl3aWMyRm1aVWRsZENJc0ltNWxkMVpoYkhWbElpd2lhWE5VZVhCbFpDSXNJbWx6UVhKeVlYbE1hV3RsVDJKcVpXTjBJaXdpYVhOUWJHRnBiazlpYW1WamRDSXNJblJ2VUd4aGFXNVBZbXBsWTNRaUxDSmlZWE5sVG5Sb0lpd2lZbUZ6WlU5eVpHVnlRbmtpTENKcGRHVnlZWFJsWlhNaUxDSnZjbVJsY25NaUxDSm5aWFJKZEdWeVlYUmxaU0lzSW1OdmJYQmhjbVZ5SWl3aWMyOXlkQ0lzSW05aWFrTnlhWFJsY21saElpd2lZM0pwZEdWeWFXRWlMQ0p2ZEdoRGNtbDBaWEpwWVNJc0ltOXlaR1Z5YzB4bGJtZDBhQ0lzSW1OdmJYQmhjbVZCYzJObGJtUnBibWNpTENKdmNtUmxjaUlzSW1KaGMyVlFhV05yUW5raUxDSmlZWE5sVTJWMElpd2lZbUZ6WlZCMWJHeEJiR3dpTENKcGJtUmxlRTltSWl3aVltRnpaVkIxYkd4QmRDSXNJbWx1WkdWNFpYTWlMQ0p3Y21WMmFXOTFjeUlzSW1KaGMyVlZibk5sZENJc0ltSmhjMlZTWlhCbFlYUWlMQ0ppWVhObFVtVnpkQ0lzSW5OMFlYSjBJaXdpYzJWMFZHOVRkSEpwYm1jaUxDSnZkbVZ5VW1WemRDSXNJbTVsYzNSbFpDSXNJbUpoYzJWVFpYUkVZWFJoSWl3aVltRnpaVk5sZEZSdlUzUnlhVzVuSWl3aVkyOXVjM1JoYm5RaUxDSmlZWE5sVTJ4cFkyVWlMQ0psYm1RaUxDSmlZWE5sVTI5dFpTSXNJbUpoYzJWVGIzSjBaV1JKYm1SbGVDSXNJbkpsZEVocFoyaGxjM1FpTENKc2IzY2lMQ0pvYVdkb0lpd2liV2xrSWl3aVltRnpaVk52Y25SbFpFbHVaR1Y0UW5raUxDSjJZV3hKYzA1aFRpSXNJblpoYkVselRuVnNiQ0lzSW5aaGJFbHpVM2x0WW05c0lpd2lkbUZzU1hOVmJtUmxabWx1WldRaUxDSnZkR2hKYzBSbFptbHVaV1FpTENKdmRHaEpjMDUxYkd3aUxDSnZkR2hKYzFKbFpteGxlR2wyWlNJc0ltOTBhRWx6VTNsdFltOXNJaXdpYzJWMFRHOTNJaXdpWW1GelpWTnZjblJsWkZWdWFYRWlMQ0ppWVhObFZHOU9kVzFpWlhJaUxDSmlZWE5sVkc5VGRISnBibWNpTENKaVlYTmxWVzVwY1NJc0ltTnlaV0YwWlZObGRDSXNJbk5sWlc1SmJtUmxlQ0lzSW1KaGMyVlZjR1JoZEdVaUxDSjFjR1JoZEdWeUlpd2lZbUZ6WlZkb2FXeGxJaXdpYVhORWNtOXdJaXdpWW1GelpWZHlZWEJ3WlhKV1lXeDFaU0lzSW1GamRHbHZibk1pTENKaFkzUnBiMjRpTENKaVlYTmxXRzl5SWl3aVltRnpaVnBwY0U5aWFtVmpkQ0lzSW1GemMybG5ia1oxYm1NaUxDSjJZV3h6VEdWdVozUm9JaXdpWTJGemRFRnljbUY1VEdsclpVOWlhbVZqZENJc0ltTmhjM1JHZFc1amRHbHZiaUlzSW5OMGNtbHVaMVJ2VUdGMGFDSXNJbU5oYzNSU1pYTjBJaXdpWTJGemRGTnNhV05sSWl3aWFXUWlMQ0p6YkdsalpTSXNJbU52Y0hraUxDSmhjbkpoZVVKMVptWmxjaUlzSW5SNWNHVmtRWEp5WVhraUxDSjJZV3hKYzBSbFptbHVaV1FpTENKMllXeEpjMUpsWm14bGVHbDJaU0lzSW1OdmJYQnZjMlZCY21keklpd2ljR0Z5ZEdsaGJITWlMQ0pvYjJ4a1pYSnpJaXdpYVhORGRYSnlhV1ZrSWl3aVlYSm5jMGx1WkdWNElpd2lZWEpuYzB4bGJtZDBhQ0lzSW1odmJHUmxjbk5NWlc1bmRHZ2lMQ0pzWldaMFNXNWtaWGdpTENKc1pXWjBUR1Z1WjNSb0lpd2ljbUZ1WjJWTVpXNW5kR2dpTENKcGMxVnVZM1Z5Y21sbFpDSXNJbU52YlhCdmMyVkJjbWR6VW1sbmFIUWlMQ0pvYjJ4a1pYSnpTVzVrWlhnaUxDSnlhV2RvZEVsdVpHVjRJaXdpY21sbmFIUk1aVzVuZEdnaUxDSnBjMDVsZHlJc0ltTnlaV0YwWlVGblozSmxaMkYwYjNJaUxDSnBibWwwYVdGc2FYcGxjaUlzSW1OeVpXRjBaVUZ6YzJsbmJtVnlJaXdpWVhOemFXZHVaWElpTENKemIzVnlZMlZ6SWl3aVozVmhjbVFpTENKcGMwbDBaWEpoZEdWbFEyRnNiQ0lzSW1sMFpYSmhZbXhsSWl3aVkzSmxZWFJsUTJGelpVWnBjbk4wSWl3aWJXVjBhRzlrVG1GdFpTSXNJbU5vWVhKQmRDSXNJblJ5WVdsc2FXNW5JaXdpWTNKbFlYUmxRMjl0Y0c5MWJtUmxjaUlzSW1OaGJHeGlZV05ySWl3aWQyOXlaSE1pTENKa1pXSjFjbklpTENKamNtVmhkR1ZEZEc5eUlpd2lZWEpuZFcxbGJuUnpJaXdpZEdocGMwSnBibVJwYm1jaUxDSmpjbVZoZEdWR2FXNWtJaXdpWm1sdVpFbHVaR1Y0Um5WdVl5SXNJbU55WldGMFpVWnNiM2NpTENKbWJHRjBVbVZ6ZENJc0ltWjFibU56SWl3aWNISmxjbVZ4SWl3aWRHaHlkU0lzSW5keVlYQndaWElpTENKblpYUkdkVzVqVG1GdFpTSXNJbVoxYm1OT1lXMWxJaXdpWjJWMFJHRjBZU0lzSW1selRHRjZhV0ZpYkdVaUxDSndiR0Z1ZENJc0ltTnlaV0YwWlVoNVluSnBaQ0lzSW5CaGNuUnBZV3h6VW1sbmFIUWlMQ0pvYjJ4a1pYSnpVbWxuYUhRaUxDSmhjbWRRYjNNaUxDSmhjbmtpTENKaGNtbDBlU0lzSW1selFYSjVJaXdpYVhOQ2FXNWtJaXdpYVhOQ2FXNWtTMlY1SWl3aWFYTkdiR2x3SWl3aVoyVjBTRzlzWkdWeUlpd2lhRzlzWkdWeWMwTnZkVzUwSWl3aWJtVjNTRzlzWkdWeWN5SXNJbU55WldGMFpWSmxZM1Z5Y25raUxDSm1iaUlzSW1GeWNreGxibWQwYUNJc0ltOXNaRUZ5Y21GNUlpd2lZM0psWVhSbFNXNTJaWEowWlhJaUxDSjBiMGwwWlhKaGRHVmxJaXdpWTNKbFlYUmxUV0YwYUU5d1pYSmhkR2x2YmlJc0ltOXdaWEpoZEc5eUlpd2laR1ZtWVhWc2RGWmhiSFZsSWl3aVkzSmxZWFJsVDNabGNpSXNJbUZ5Y21GNVJuVnVZeUlzSW1OeVpXRjBaVkJoWkdScGJtY2lMQ0pqYUdGeWN5SXNJbU5vWVhKelRHVnVaM1JvSWl3aVkzSmxZWFJsVW1GdVoyVWlMQ0p6ZEdWd0lpd2lkRzlHYVc1cGRHVWlMQ0pqY21WaGRHVlNaV3hoZEdsdmJtRnNUM0JsY21GMGFXOXVJaXdpZEc5T2RXMWlaWElpTENKM2NtRndSblZ1WXlJc0ltbHpRM1Z5Y25raUxDSnVaWGRFWVhSaElpd2ljMlYwUkdGMFlTSXNJbk5sZEZkeVlYQlViMU4wY21sdVp5SXNJbU55WldGMFpWSnZkVzVrSWl3aWNISmxZMmx6YVc5dUlpd2lkRzlKYm5SbFoyVnlJaXdpY0dGcGNpSXNJbTV2YjNBaUxDSmpjbVZoZEdWVWIxQmhhWEp6SWl3aVkzSmxZWFJsVjNKaGNDSXNJbk55WTBKcGRHMWhjMnNpTENKdVpYZENhWFJ0WVhOcklpd2lhWE5EYjIxaWJ5SXNJbU4xYzNSdmJVUmxabUYxYkhSelFYTnphV2R1U1c0aUxDSmpkWE4wYjIxRVpXWmhkV3gwYzAxbGNtZGxJaXdpWTNWemRHOXRUMjFwZEVOc2IyNWxJaXdpWVhKeVZtRnNkV1VpTENKbWJHRjBkR1Z1SWl3aWIzUm9aWEpHZFc1aklpd2lkSGx3WlNJc0luTjBkV0pCY25KaGVTSXNJbWhoYzFCaGRHZ2lMQ0pvWVhOR2RXNWpJaXdpYVhOTVpXNW5kR2dpTENKQmNuSmhlVUoxWm1abGNpSXNJbkpsYzI5c2RtVWlMQ0pqZEc5eVUzUnlhVzVuSWl3aWFYTk5ZWE5yWVdKc1pTSXNJbk4wZFdKR1lXeHpaU0lzSW05MGFHVnlRWEpuY3lJc0luTm9iM0owVDNWMElpd2ljbVZtWlhKbGJtTmxJaXdpWkdWMFlXbHNjeUlzSW1OdmRXNTBJaXdpYkdGemRFTmhiR3hsWkNJc0luTjBZVzF3SWl3aWNtVnRZV2x1YVc1bklpd2ljMmgxWm1ac1pWTmxiR1lpTENKeVlXNWtJaXdpYldWdGIybDZaU0lzSW1Ob1lYSkRiMlJsUVhRaUxDSnhkVzkwWlNJc0luTjFZbE4wY21sdVp5SXNJbU5zYjI1bElpd2laR2xtWm1WeVpXNWpaU0lzSW1ScFptWmxjbVZ1WTJWQ2VTSXNJbVJwWm1abGNtVnVZMlZYYVhSb0lpd2labWx1WkVsdVpHVjRJaXdpWm1sdVpFeGhjM1JKYm1SbGVDSXNJbWhsWVdRaUxDSnBiblJsY25ObFkzUnBiMjRpTENKdFlYQndaV1FpTENKcGJuUmxjbk5sWTNScGIyNUNlU0lzSW1sdWRHVnljMlZqZEdsdmJsZHBkR2dpTENKd2RXeHNJaXdpY0hWc2JFRnNiQ0lzSW5CMWJHeEJkQ0lzSW5WdWFXOXVJaXdpZFc1cGIyNUNlU0lzSW5WdWFXOXVWMmwwYUNJc0luVnVlbWx3SWl3aVozSnZkWEFpTENKMWJucHBjRmRwZEdnaUxDSjNhWFJvYjNWMElpd2llRzl5SWl3aWVHOXlRbmtpTENKNGIzSlhhWFJvSWl3aWVtbHdJaXdpZW1sd1YybDBhQ0lzSW1Ob1lXbHVJaXdpYVc1MFpYSmpaWEIwYjNJaUxDSjNjbUZ3Y0dWeVFYUWlMQ0pqYjNWdWRFSjVJaXdpWm1sdVpDSXNJbVpwYm1STVlYTjBJaXdpWm05eVJXRmphRkpwWjJoMElpd2laM0p2ZFhCQ2VTSXNJbWx1ZG05clpVMWhjQ0lzSW10bGVVSjVJaXdpY0dGeWRHbDBhVzl1SWl3aWMyOXlkRUo1SWl3aVltVm1iM0psSWl3aVltbHVaQ0lzSW1KcGJtUkxaWGtpTENKa1pXSnZkVzVqWlNJc0ltOXdkR2x2Ym5NaUxDSnNZWE4wUVhKbmN5SXNJbXhoYzNSVWFHbHpJaXdpYldGNFYyRnBkQ0lzSW5ScGJXVnlTV1FpTENKc1lYTjBRMkZzYkZScGJXVWlMQ0pzWVhOMFNXNTJiMnRsVkdsdFpTSXNJbXhsWVdScGJtY2lMQ0p0WVhocGJtY2lMQ0pwYm5admEyVkdkVzVqSWl3aWRHbHRaU0lzSW5Ob2IzVnNaRWx1ZG05clpTSXNJblJwYldWVGFXNWpaVXhoYzNSRFlXeHNJaXdpZEdsdFpYSkZlSEJwY21Wa0lpd2lkSEpoYVd4cGJtZEZaR2RsSWl3aWRHbHRaVmRoYVhScGJtY2lMQ0prWldKdmRXNWpaV1FpTENKcGMwbHVkbTlyYVc1bklpd2lZMkZ1WTJWc0lpd2labXgxYzJnaUxDSmtaV1psY2lJc0ltUmxiR0Y1SWl3aWNtVnpiMngyWlhJaUxDSnRaVzF2YVhwbFpDSXNJa05oWTJobElpd2libVZuWVhSbElpd2liM1psY2tGeVozTWlMQ0owY21GdWMyWnZjbTF6SWl3aVpuVnVZM05NWlc1bmRHZ2lMQ0p3WVhKMGFXRnNJaXdpY0dGeWRHbGhiRkpwWjJoMElpd2ljbVZoY21jaUxDSm5kQ0lzSW1kMFpTSXNJbWx6UlhKeWIzSWlMQ0pwYzBsdWRHVm5aWElpTENKcGMwNTFiV0psY2lJc0ltbHpVM1J5YVc1bklpd2liSFFpTENKc2RHVWlMQ0owYjBGeWNtRjVJaXdpYm1WNGRDSXNJbVJ2Ym1VaUxDSnlaVzFoYVc1a1pYSWlMQ0owYjB4bGJtZDBhQ0lzSW1selFtbHVZWEo1SWl3aVlYTnphV2R1SWl3aVlYTnphV2R1U1c0aUxDSmhjM05wWjI1SmJsZHBkR2dpTENKaGMzTnBaMjVYYVhSb0lpd2lZWFFpTENKd2NtOXdjMGx1WkdWNElpd2ljSEp2Y0hOTVpXNW5kR2dpTENKa1pXWmhkV3gwYzBSbFpYQWlMQ0p0WlhKblpWZHBkR2dpTENKcGJuWmxjblFpTENKcGJuWmxjblJDZVNJc0ltbHVkbTlyWlNJc0ltbHpVSEp2ZEc4aUxDSmlZWE5sUzJWNWMwbHVJaXdpYldWeVoyVWlMQ0p2YldsMElpd2ljR2xqYTBKNUlpd2ljSEp2Y0NJc0luUnZVR0ZwY25NaUxDSjBiMUJoYVhKelNXNGlMQ0pqWVcxbGJFTmhjMlVpTENKM2IzSmtJaXdpZEc5TWIzZGxja05oYzJVaUxDSmpZWEJwZEdGc2FYcGxJaXdpZFhCd1pYSkdhWEp6ZENJc0ltdGxZbUZpUTJGelpTSXNJbXh2ZDJWeVEyRnpaU0lzSW14dmQyVnlSbWx5YzNRaUxDSnpibUZyWlVOaGMyVWlMQ0p6ZEdGeWRFTmhjMlVpTENKMWNIQmxja05oYzJVaUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSW5CaGRIUmxjbTRpTENKaGRIUmxiWEIwSWl3aVltbHVaRUZzYkNJc0ltMWxkR2h2WkU1aGJXVnpJaXdpWm14dmR5SXNJbVpzYjNkU2FXZG9kQ0lzSW0xbGRHaHZaQ0lzSW0xbGRHaHZaRTltSWl3aWJXbDRhVzRpTENKdmRtVnlJaXdpYjNabGNrVjJaWEo1SWl3aWIzWmxjbE52YldVaUxDSnlZVzVuWlNJc0luSmhibWRsVW1sbmFIUWlMQ0poZFdkbGJtUWlMQ0poWkdSbGJtUWlMQ0prYVhacFpHVWlMQ0prYVhacFpHVnVaQ0lzSW1ScGRtbHpiM0lpTENKdGRXeDBhWEJzZVNJc0ltMTFiSFJwY0d4cFpYSWlMQ0p0ZFd4MGFYQnNhV05oYm1RaUxDSnliM1Z1WkNJc0luTjFZblJ5WVdOMElpd2liV2x1ZFdWdVpDSXNJbk4xWW5SeVlXaGxibVFpTENKaFpuUmxjaUlzSW1OaGMzUkJjbkpoZVNJc0ltTm9kVzVySWl3aVkyOXRjR0ZqZENJc0ltTnZibU5oZENJc0ltTnZibVFpTENKamIyNW1iM0p0Y3lJc0luQnliM0JsY25ScFpYTWlMQ0pqZFhKeWVTSXNJbU4xY25KNVVtbG5hSFFpTENKa2NtOXdJaXdpWkhKdmNGSnBaMmgwSWl3aVpISnZjRkpwWjJoMFYyaHBiR1VpTENKa2NtOXdWMmhwYkdVaUxDSm1hV3hzSWl3aVptbHNkR1Z5SWl3aVpteGhkRTFoY0NJc0ltWnNZWFJOWVhCRVpXVndJaXdpWm14aGRFMWhjRVJsY0hSb0lpd2labXhoZEhSbGJrUmxaWEFpTENKbWJHRjBkR1Z1UkdWd2RHZ2lMQ0ptYkdsd0lpd2labkp2YlZCaGFYSnpJaXdpWm5WdVkzUnBiMjV6SWl3aVpuVnVZM1JwYjI1elNXNGlMQ0pwYm1sMGFXRnNJaXdpYldGd1MyVjVjeUlzSW0xaGNGWmhiSFZsY3lJc0ltMWhkR05vWlhNaUxDSnRZWFJqYUdWelVISnZjR1Z5ZEhraUxDSnVkR2hCY21jaUxDSnZiV2wwUW5raUxDSnZibU5sSWl3aWIzSmtaWEpDZVNJc0luQnliM0JsY25SNVQyWWlMQ0p3ZFd4c1FXeHNRbmtpTENKd2RXeHNRV3hzVjJsMGFDSXNJbkpsYW1WamRDSXNJbkpsYlc5MlpTSXNJbkpsYzNRaUxDSnpZVzF3YkdWVGFYcGxJaXdpYzJWMFYybDBhQ0lzSW5Ob2RXWm1iR1VpTENKemIzSjBaV1JWYm1seElpd2ljMjl5ZEdWa1ZXNXBjVUo1SWl3aWMyVndZWEpoZEc5eUlpd2liR2x0YVhRaUxDSnpjSEpsWVdRaUxDSjBZV2xzSWl3aWRHRnJaU0lzSW5SaGEyVlNhV2RvZENJc0luUmhhMlZTYVdkb2RGZG9hV3hsSWl3aWRHRnJaVmRvYVd4bElpd2lkR0Z3SWl3aWRHaHliM1IwYkdVaUxDSjBiMUJoZEdnaUxDSnBjMEZ5Y2t4cGEyVWlMQ0oxYm1GeWVTSXNJblZ1YVhFaUxDSjFibWx4UW5raUxDSjFibWx4VjJsMGFDSXNJblZ1YzJWMElpd2lkWEJrWVhSbElpd2lkWEJrWVhSbFYybDBhQ0lzSW5aaGJIVmxjMGx1SWl3aWQzSmhjQ0lzSW5wcGNFOWlhbVZqZENJc0lucHBjRTlpYW1WamRFUmxaWEFpTENKbGJuUnlhV1Z6U1c0aUxDSmxlSFJsYm1RaUxDSmxlSFJsYm1SWGFYUm9JaXdpWTJ4aGJYQWlMQ0pqYkc5dVpVUmxaWEFpTENKamJHOXVaVVJsWlhCWGFYUm9JaXdpWTJ4dmJtVlhhWFJvSWl3aVkyOXVabTl5YlhOVWJ5SXNJbVJsWm1GMWJIUlVieUlzSW1WdVpITlhhWFJvSWl3aWRHRnlaMlYwSWl3aWNHOXphWFJwYjI0aUxDSmxjMk5oY0dWU1pXZEZlSEFpTENKbGRtVnllU0lzSW1acGJtUkxaWGtpTENKbWFXNWtUR0Z6ZEV0bGVTSXNJbVp2Y2tsdUlpd2labTl5U1c1U2FXZG9kQ0lzSW1admNrOTNiaUlzSW1admNrOTNibEpwWjJoMElpd2lhVzVTWVc1blpTSXNJbWx6UW05dmJHVmhiaUlzSW1selJXeGxiV1Z1ZENJc0ltbHpSVzF3ZEhraUxDSnBjMFZ4ZFdGc0lpd2lhWE5GY1hWaGJGZHBkR2dpTENKcGMwMWhkR05vSWl3aWFYTk5ZWFJqYUZkcGRHZ2lMQ0pwYzA1aFRpSXNJbWx6VG1GMGFYWmxJaXdpYVhOT2FXd2lMQ0pwYzA1MWJHd2lMQ0pwYzFOaFptVkpiblJsWjJWeUlpd2lhWE5WYm1SbFptbHVaV1FpTENKcGMxZGxZV3ROWVhBaUxDSnBjMWRsWVd0VFpYUWlMQ0pzWVhOMFNXNWtaWGhQWmlJc0ltMWhlRUo1SWl3aWJXVmhiaUlzSW0xbFlXNUNlU0lzSW0xcGJrSjVJaXdpYzNSMVlrOWlhbVZqZENJc0luTjBkV0pUZEhKcGJtY2lMQ0p6ZEhWaVZISjFaU0lzSW01MGFDSXNJbTV2UTI5dVpteHBZM1FpTENKd1lXUWlMQ0p6ZEhKTVpXNW5kR2dpTENKd1lXUkZibVFpTENKd1lXUlRkR0Z5ZENJc0luSmhaR2w0SWl3aVpteHZZWFJwYm1jaUxDSjBaVzF3SWl3aWNtVmtkV05sSWl3aWNtVmtkV05sVW1sbmFIUWlMQ0p5WlhCbFlYUWlMQ0p6WVcxd2JHVWlMQ0p6YjIxbElpd2ljMjl5ZEdWa1NXNWtaWGdpTENKemIzSjBaV1JKYm1SbGVFSjVJaXdpYzI5eWRHVmtTVzVrWlhoUFppSXNJbk52Y25SbFpFeGhjM1JKYm1SbGVDSXNJbk52Y25SbFpFeGhjM1JKYm1SbGVFSjVJaXdpYzI5eWRHVmtUR0Z6ZEVsdVpHVjRUMllpTENKemRHRnlkSE5YYVhSb0lpd2ljM1Z0SWl3aWMzVnRRbmtpTENKMFpXMXdiR0YwWlNJc0luTmxkSFJwYm1keklpd2lhWE5GYzJOaGNHbHVaeUlzSW1selJYWmhiSFZoZEdsdVp5SXNJbWx0Y0c5eWRITkxaWGx6SWl3aWFXMXdiM0owYzFaaGJIVmxjeUlzSW5KbFJHVnNhVzFwZEdWeWN5SXNJbk52ZFhKalpWVlNUQ0lzSW1WelkyRndaVlpoYkhWbElpd2lhVzUwWlhKd2IyeGhkR1ZXWVd4MVpTSXNJbVZ6VkdWdGNHeGhkR1ZXWVd4MVpTSXNJbVYyWVd4MVlYUmxWbUZzZFdVaUxDSjBhVzFsY3lJc0luUnZURzkzWlhJaUxDSjBiMU5oWm1WSmJuUmxaMlZ5SWl3aWRHOVZjSEJsY2lJc0luUnlhVzBpTENKMGNtbHRSVzVrSWl3aWRISnBiVk4wWVhKMElpd2lkSEoxYm1OaGRHVWlMQ0p2YldsemMybHZiaUlzSW5ObFlYSmphQ0lzSW5OMVluTjBjbWx1WnlJc0ltNWxkMFZ1WkNJc0luVnVaWE5qWVhCbElpd2lkVzVwY1hWbFNXUWlMQ0p3Y21WbWFYZ2lMQ0psWVdOb0lpd2laV0ZqYUZKcFoyaDBJaXdpWm1seWMzUWlMQ0pXUlZKVFNVOU9JaXdpYVhOR2FXeDBaWElpTENKMFlXdGxUbUZ0WlNJc0ltUnliM0JPWVcxbElpd2lZMmhsWTJ0SmRHVnlZWFJsWlNJc0ltbHpWR0ZyWlhJaUxDSnNiMlJoYzJoR2RXNWpJaXdpY21WMFZXNTNjbUZ3Y0dWa0lpd2lhWE5NWVhwNUlpd2lkWE5sVEdGNmVTSXNJbWx6U0hsaWNtbGtJaXdpYVhOVmJuZHlZWEJ3WldRaUxDSnZibXg1VEdGNmVTSXNJbU5vWVdsdVRtRnRaU0lzSW1ScGNpSXNJbWx6VW1sbmFIUWlMQ0oyYVdWM0lpd2lhWFJsY2t4bGJtZDBhQ0lzSW5SaGEyVkRiM1Z1ZENJc0ltbDBaWEpKYm1SbGVDSXNJbU52YlcxcGRDSXNJbmR5WVhCd1pXUWlMQ0owYjBwVFQwNGlMQ0prWldacGJtVWlMQ0poYldRaVhTd2liV0Z3Y0dsdVozTWlPaUpaUVZkRkxFbEJRVWxCTEVWQlRVRkRMRVZCUVcxQ0xFbEJTVzVDUXl4RlFVRnJRaXh6UWtGVGJFSkRMRVZCUVdNc2VVSkJSMlJETEVWQlFXdENMRVZCUTJ4Q1F5eEZRVUZyUWl4RlFVTnNRa01zUlVGQmNVSXNSVUZIY2tKRExFVkJRWFZDTEVWQlEzWkNReXhGUVVGNVFpeEZRVWQ2UWtNc1JVRkJhVUlzUlVGRGFrSkRMRVZCUVhGQ0xFVkJRM0pDUXl4RlFVRjNRaXhGUVVONFFrTXNSVUZCYTBJc1JVRkRiRUpETEVWQlFYZENMRWRCUTNoQ1F5eEZRVUZ2UWl4SFFVTndRa01zUlVGQk1FSXNSMEZETVVKRExFVkJRV2RDTEVsQlEyaENReXhGUVVGclFpeEpRVU5zUWtNc1JVRkJhVUlzU1VGUGFrSkRMRVZCUVZrc1NVRkRXa01zUlVGQlZ5eEhRVkZZUXl4RlFVRlhMRVZCUVVFc1JVRkRXRU1zUlVGQmJVSXNhVUpCUTI1Q1F5eEZRVUZqTEhWQ1FVTmtReXhGUVVGTlF5eEpRVWRPUXl4RlFVRnRRaXhYUVVOdVFrTXNSVUZCYTBKRUxFVkJRVzFDTEVWQlEzSkRSU3hGUVVGM1FrWXNTVUZCY1VJc1JVRkhOME5ITEVWQlFWa3NRMEZEWkN4RFFVRkRMRTFCUVU5aUxFZEJRMUlzUTBGQlF5eFBRVUZSVUN4SFFVTlVMRU5CUVVNc1ZVRkJWME1zUjBGRFdpeERRVUZETEZGQlFWTkZMRWRCUTFZc1EwRkJReXhoUVVGalF5eEhRVU5tTEVOQlFVTXNUMEZCVVVzc1IwRkRWQ3hEUVVGRExGVkJRVmRLTEVkQlExb3NRMEZCUXl4bFFVRm5Ra01zUjBGRGFrSXNRMEZCUXl4UlFVRlRSU3hKUVVsU1lTeEZRVUZWTEhGQ1FVTldReXhGUVVGWExHbENRVU5ZUXl4RlFVRlhMSGxDUVVOWVF5eEZRVUZWTEcxQ1FVTldReXhGUVVGVkxHZENRVU5XUXl4RlFVRlpMSGRDUVVOYVF5eEZRVUZYTEdsQ1FVTllReXhGUVVGVkxHOUNRVU5XUXl4RlFVRlRMRFpDUVVOVVF5eEZRVUZUTEdWQlExUkRMRVZCUVZrc2EwSkJRMXBETEVWQlFWVXNaMEpCUTFaRExFVkJRVmtzYTBKQlJWcERMRVZCUVZjc2FVSkJRMWhETEVWQlFWa3NhMEpCUTFwRExFVkJRVk1zWlVGRFZFTXNSVUZCV1N4clFrRkRXa01zUlVGQldTeHJRa0ZEV2tNc1JVRkJaU3h4UWtGRFprTXNSVUZCWVN4dFFrRkhZa01zUlVGQmFVSXNkVUpCUTJwQ1F5eEZRVUZqTEc5Q1FVTmtReXhGUVVGaExIZENRVU5pUXl4RlFVRmhMSGRDUVVOaVF5eEZRVUZWTEhGQ1FVTldReXhIUVVGWExITkNRVU5ZUXl4SFFVRlhMSE5DUVVOWVF5eEhRVUZYTEhOQ1FVTllReXhIUVVGclFpdzJRa0ZEYkVKRExFZEJRVmtzZFVKQlExcERMRWRCUVZrc2RVSkJSMXBETEVkQlFYVkNMR2xDUVVOMlFrTXNSMEZCYzBJc2NVSkJRM1JDUXl4SFFVRjNRaXhuUTBGSGVFSkRMRWRCUVdkQ0xEUkNRVU5vUWtNc1IwRkJhMElzVjBGRGJFSkRMRWRCUVcxQ1F5eFBRVUZQU0N4SFFVRmpTU3hSUVVONFEwTXNSMEZCY1VKR0xFOUJRVTlHTEVkQlFXZENSeXhSUVVjMVEwVXNSMEZCVnl4dFFrRkRXRU1zUjBGQllTeHJRa0ZEWWtNc1IwRkJaMElzYlVKQlIyaENReXhIUVVGbExHMUVRVU5tUXl4SFFVRm5RaXhSUVVOb1FrTXNSMEZCWVN4dFIwRk5Za01zUjBGQlpTeHpRa0ZEWmtNc1IwRkJhMEpXTEU5QlFVOVRMRWRCUVdGU0xGRkJSM1JEVlN4SFFVRlRMR0ZCUTFSRExFZEJRV01zVDBGRFpFTXNSMEZCV1N4UFFVZGFReXhIUVVGblFpdzBRMEZEYUVKRExFZEJRV2RDTEc5RFFVTm9Ra01zUjBGQmFVSXNVVUZIYWtKRExFZEJRV01zTkVOQlIyUkRMRWRCUVdVc1YwRk5aa01zUjBGQlpTeHJRMEZIWmtNc1IwRkJWU3hQUVVkV1F5eEhRVUZoTEhGQ1FVZGlReXhIUVVGaExHRkJSMkpETEVkQlFXVXNPRUpCUjJaRExFZEJRVmtzWTBGSFdrTXNSMEZCVnl4dFFrRkhXRU1zUjBGQlZTdzRRMEZIVmtNc1IwRkJXU3hQUVVkYVF5eEhRVUZ2UWl4NVFrRlBjRUpETEVkQlFXVkRMR2RFUVZObVF5eEhRVUZsUXl3NFQwRkxaa01zUjBGQlZTeEpRVUZOUml4SFFVRmxMRWxCUXk5Q1J5eEhRVUZWTEVsQlFVMU1MRWRCUVdVc1NVRkRMMEpOTEVkQlFWY3NUMEZGV0VNc1IwRkJWU3c0UWtGRFZrTXNSMEZCVXl4dlFrRkJkVUpPTEVkQlFXVkpMRWRCYkVJNVFpeHhSVUZ0UW1wQ1J5eEhRVUZUTERKQ1FVVlVReXhIUVVGakxIRkNRVU5rUXl4SFFVRmhMR3REUVVOaVF5eEhRVUZoTEhGRFFVTmlReXhIUVVGVkxEaENRVWxXUXl4SFFVRmpMRTFCUVZGUUxFZEJRVlVzU1VGQlRVTXNSMEZCVXl4SlFVTXZRMDhzUjBGQll5eE5RVUZSUml4SFFVRlZMRWxCUVUxTUxFZEJRVk1zU1VGSEwwTlJMRWRCV21Fc1RVRkJVVmdzUjBGQlZTeEpRVUZOU1N4SFFVRlRMRXRCYVVJNVExRXNSMEZLVnl4dlFrRkpVVVFzUjBGSVVDeG5Ra0ZCZDBJc1EwRkJRMDRzUjBGQllVTXNSMEZCV1VNc1NVRkJXVTBzUzBGQlN5eExRVUZQTEhGQ1FVRnBRa1lzUjBGQlZ5eExRVWxzU0Vjc1IwRkJWU3hOUVVGUkxFTkJkRUpPTEc5Q1FYTkNhMEpTTEVkQlFWbERMRWxCUVZsTkxFdEJRVXNzUzBGQlR5eEpRVUZOUkN4SFFVTjRSVWNzUjBGQlZ5eE5RVUZSTEVOQlFVTldMRWRCUVdOTUxFZEJRVlVzU1VGQlMwRXNSMEZCVTAwc1IwRkJXVU1zUjBFelFqTkVMSEZDUVRKQ2FVWk5MRXRCUVVzc1MwRkJUeXhKUVVkNFIwY3NSMEZCVTJ4RUxFOUJMMEpCTEU5QkswSmxMRXRCVFhoQ2JVUXNSMEZCWTI1RUxFOUJRVTlyUXl4SFFVRlRMRXRCUnpsQ2EwSXNSMEZCV1hCRUxFOUJRVTl6UXl4SFFVRlRMRTFCUVZGQkxFZEJRVk1zUzBGQlQxY3NSMEZCVjBnc1IwRkJUeXhMUVVkMFJVOHNSMEZCWjBKeVJDeFBRVUZQTEVOQlEzcENNRU1zUjBGQlZTeEpRVUZOVGl4SFFVRlZMRzlEUVVGblF5eERRVUZEU0N4SFFVRlRVeXhIUVVGVExFdEJRVXRMTEV0QlFVc3NTMEZCVHl4SlFVTTVSa2dzUjBGQll5eHZRMEZCWjBNc1EwRkJRMWdzUjBGQlUxTXNSMEZCVlVNc1IwRkJZU3hMUVVGTFNTeExRVUZMTEV0QlFVOHNTVUZEYUVkTUxFZEJRVlVzU1VGQlRVTXNSMEZCWXl4cFEwRkRPVUpFTEVkQlFWVXNhVU5CZEVKTExHMUVRVVJCTEcxRVFUQkNabEFzUjBGRFFXRXNTVUZEUVVRc1MwRkJTeXhMUVVGTkxFdEJSMVJQTEVkQlFXVjBSQ3hQUVVGUExEQkNRVUVyUWpaQ0xFZEJNMFI0UXl4dFFrRTRSR0l3UWl4SFFVRnRRaXh4UlVGSGJrSkRMRWRCUVdVc1EwRkRha0lzVVVGQlV5eFRRVUZWTEZkQlFWa3NUMEZCVVN4UlFVRlRMR1ZCUVdkQ0xHVkJRMmhGTEZkQlFWa3NXVUZCWVN4aFFVRmpMR0ZCUVdNc1RVRkJUeXhQUVVGUkxGTkJRM0JGTEZWQlFWY3NVMEZCVlN4TlFVRlBMRk5CUVZVc1UwRkJWU3haUVVGaExHRkJRemRFTEc5Q1FVRnhRaXhqUVVGbExHTkJRV1VzVlVGRGJrUXNTVUZCU3l4bFFVRm5RaXhYUVVGWkxGZEJRVmtzWTBGSk0wTkRMRWxCUVcxQ0xFVkJSMjVDUXl4SFFVRnBRaXhIUVVOeVFrRXNSMEZCWlhwRkxFZEJRV041UlN4SFFVRmxlRVVzUjBGRE5VTjNSU3hIUVVGbGRrVXNSMEZCVjNWRkxFZEJRV1YwUlN4SlFVTjZRM05GTEVkQlFXVnlSU3hKUVVGWmNVVXNSMEZCWlhCRkxFbEJRekZEYjBVc1IwRkJaVzVGTEVsQlFXMUNiVVVzUjBGQlpXeEZMRWxCUTJwRWEwVXNSMEZCWldwRkxFdEJRVUZCTEVWQlEyWnBSU3hIUVVGbEwwWXNSMEZCVnl0R0xFZEJRV1U1Uml4SFFVTjZRemhHTEVkQlFXVXpSU3hIUVVGclFqSkZMRWRCUVdVMVJpeEhRVU5vUkRSR0xFZEJRV1V4UlN4SFFVRmxNRVVzUjBGQlpUTkdMRWRCUXpkRE1rWXNSMEZCWlhwR0xFZEJRVmw1Uml4SFFVRmxlRVlzUjBGRE1VTjNSaXhIUVVGbGRFWXNSMEZCVlhOR0xFZEJRV1Z5Uml4SFFVTjRRM0ZHTEVkQlFXVnVSaXhIUVVGaGJVWXNSMEZCWldwR0xFZEJRek5EYVVZc1IwRkJaV2hHTEVkQlFWVm5SaXhIUVVGbEwwVXNSMEZEZUVNclJTeEhRVUZsTlVVc1NVRkJRVUVzUlVGSFppeEpRVUZKTmtVc1IwRkJaMElzUjBGRGNFSkJMRWRCUVdOb1J5eEhRVUZYWjBjc1IwRkJZeTlHTEVkQlEzWkRLMFlzUjBGQll6VkZMRWRCUVd0Q05FVXNSMEZCWXpORkxFZEJRemxETWtVc1IwRkJZemRHTEVkQlFWYzJSaXhIUVVGak5VWXNSMEZEZGtNMFJpeEhRVUZqTVVVc1IwRkJZekJGTEVkQlFXTjZSU3hIUVVNeFEzbEZMRWRCUVdONFJTeEhRVUZYZDBVc1IwRkJZM1pGTEVsQlEzWkRkVVVzUjBGQlkzUkZMRWxCUVZselJTeEhRVUZqZGtZc1IwRkRlRU4xUml4SFFVRmpkRVlzUjBGQllYTkdMRWRCUVdOd1JpeEhRVU42UTI5R0xFZEJRV05zUml4SFFVRmhhMFlzUjBGQlkycEdMRWRCUTNwRGFVWXNSMEZCWTJoR0xFZEJRV0ZuUml4SFFVRmpMMFVzUjBGRGVrTXJSU3hIUVVGamNrVXNTVUZCV1hGRkxFZEJRV053UlN4SlFVTjRRMjlGTEVkQlFXTnVSU3hKUVVGaGJVVXNSMEZCWTJ4RkxFdEJRVUZCTEVWQlEzcERhMFVzUjBGQll6RkdMRWRCUVZrd1JpeEhRVUZqZWtZc1IwRkRlRU41Uml4SFFVRmpOMFVzU1VGQlFVRXNSVUZIWkN4SlFUUkZTVGhGTEVkQlFXZENMRU5CUTJ4Q1F5eExRVUZOTEV0QlEwNURMRWxCUVVzc1NVRkRURU1zUzBGQlRTeEpRVU5PUXl4TFFVRk5MRWxCUTA1RExGTkJRVlVzVVVGRFZrTXNVMEZCVlN4VFFVbFNReXhIUVVGcFFrTXNWMEZEYWtKRExFZEJRV1ZETEZOQlIyWkRMRWRCUVRoQ0xHbENRVUZXUXl4UlFVRnpRa0VzVVVGQlZVRXNUMEZCVDBNc1UwRkJWMEVzVVVGQlZVUXNUMEZIYUVaRkxFZEJRVEJDTEdsQ1FVRlNReXhOUVVGdlFrRXNUVUZCVVVFc1MwRkJTMFlzVTBGQlYwRXNVVUZCVlVVc1MwRkhlRVZETEVkQlFVOU1MRWxCUVdOSExFbEJRVmxITEZOQlFWTXNZMEZCVkVFc1IwRkhha05ETEVkQlFXZERMR2xDUVVGWVF5eFRRVUYxUWtFc1ZVRkJXVUVzVVVGQlVVTXNWVUZCV1VRc1VVRkhOVVZGTEVkQlFXRklMRWxCUVdkRExHbENRVUZXU1N4UlFVRnpRa0VzVTBGQlYwRXNUMEZCVDBZc1ZVRkJXVVVzVDBGSGRrWkRMRWRCUVdkQ1JpeEpRVUZqUVN4SFFVRlhSaXhWUVVGWlJDeEhRVWR5UkUwc1IwRkJZMFFzU1VGQmFVSmFMRWRCUVZkakxGRkJSekZEUXl4SFFVRlpMRmRCUTJRc1NVRkpSU3hQUVVaWlRDeEpRVUZqUVN4SFFVRlhUU3hUUVVGWFRpeEhRVUZYVFN4UlFVRlJMRkZCUVZGRExFOUJUM0JGU2l4SlFVRmxRU3hIUVVGWlN5eFRRVUZYVEN4SFFVRlpTeXhSUVVGUkxGRkJRMnBGTEUxQlFVOURMRXRCV0Vzc1IwRmxXa01zUjBGQmIwSk1MRWxCUVZsQkxFZEJRVk5OTEdOQlEzcERReXhIUVVGaFVDeEpRVUZaUVN4SFFVRlRVU3hQUVVOc1EwTXNSMEZCV1ZRc1NVRkJXVUVzUjBGQlUxVXNUVUZEYWtORExFZEJRV1ZZTEVsQlFWbEJMRWRCUVZOWkxGTkJRM0JEUXl4SFFVRlpZaXhKUVVGWlFTeEhRVUZUWXl4TlFVTnFRME1zUjBGQmJVSm1MRWxCUVZsQkxFZEJRVk5uUWl4aFFXTTFReXhUUVVGVFF5eEhRVUZOUXl4RlFVRk5ReXhGUVVGVFF5eEhRVU0xUWl4UFFVRlJRU3hGUVVGTFF5eFJRVU5ZTEV0QlFVc3NSVUZCUnl4UFFVRlBTQ3hGUVVGTFNTeExRVUZMU0N4SFFVTjZRaXhMUVVGTExFVkJRVWNzVDBGQlQwUXNSVUZCUzBrc1MwRkJTMGdzUlVGQlUwTXNSVUZCU3l4SlFVTjJReXhMUVVGTExFVkJRVWNzVDBGQlQwWXNSVUZCUzBrc1MwRkJTMGdzUlVGQlUwTXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFbEJRMmhFTEV0QlFVc3NSVUZCUnl4UFFVRlBSaXhGUVVGTFNTeExRVUZMU0N4RlFVRlRReXhGUVVGTExFZEJRVWxCTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhKUVVVelJDeFBRVUZQUml4RlFVRkxSQ3hOUVVGTlJTeEZRVUZUUXl4SFFXRTNRaXhUUVVGVFJ5eEhRVUZuUWtNc1JVRkJUME1zUlVGQlVVTXNSVUZCVlVNc1IwRkphRVFzU1VGSVFTeEpRVUZKUXl4SFFVRlRMRVZCUTFSUUxFVkJRV3RDTEUxQlFWUkhMRVZCUVdkQ0xFVkJRVWxCTEVWQlFVMUlMRk5CUlRsQ1R5eEZRVUZSVUN4SFFVRlJMRU5CUTNaQ0xFbEJRVWxSTEVWQlFWRk1MRVZCUVUxSkxFZEJRMnhDU0N4RlFVRlBSU3hGUVVGaFJTeEZRVUZQU0N4RlFVRlRSeXhIUVVGUlRDeEhRVVU1UXl4UFFVRlBSeXhGUVZsVUxGTkJRVk5ITEVkQlFWVk9MRVZCUVU5RkxFZEJTWGhDTEVsQlNFRXNTVUZCU1VVc1IwRkJVeXhGUVVOVVVDeEZRVUZyUWl4TlFVRlVSeXhGUVVGblFpeEZRVUZKUVN4RlFVRk5TQ3hUUVVVNVFrOHNSVUZCVVZBc1NVRkJRVUVzU1VGRFdFc3NSVUZCVTBZc1JVRkJUVWtzUjBGQlVVRXNSVUZCVDBvc1MwRkpjRU1zVDBGQlQwRXNSVUZwUTFRc1UwRkJVMDhzUjBGQlYxQXNSVUZCVDFFc1IwRkpla0lzU1VGSVFTeEpRVUZKU2l4SFFVRlRMRVZCUTFSUUxFVkJRV3RDTEUxQlFWUkhMRVZCUVdkQ0xFVkJRVWxCTEVWQlFVMUlMRk5CUlRsQ1R5eEZRVUZSVUN4SFFVTm1MRWxCUVV0WExFVkJRVlZTTEVWQlFVMUpMRWRCUVZGQkxFVkJRVTlLTEVkQlEyeERMRTlCUVVFc1JVRkhTaXhQUVVGQkxFVkJXVVlzVTBGQlUxTXNSMEZCV1ZRc1JVRkJUMUVzUjBGTk1VSXNTVUZNUVN4SlFVRkpTaXhIUVVGVExFVkJRMVJRTEVWQlFXdENMRTFCUVZSSExFVkJRV2RDTEVWQlFVbEJMRVZCUVUxSUxFOUJRMjVEWVN4RlFVRlhMRVZCUTFoRExFVkJRVk1zUzBGRlNsQXNSVUZCVVZBc1IwRkJVU3hEUVVOMlFpeEpRVUZKVVN4RlFVRlJUQ3hGUVVGTlNTeEhRVU5rU1N4RlFVRlZTQ3hGUVVGUFJDeEZRVUZQU2l4TFFVTXhRbGNzUlVGQlQwUXNTMEZCWTB3c1IwRkhla0lzVDBGQlQwMHNSVUZaVkN4VFFVRlRReXhIUVVGaldpeEZRVUZQU3l4SFFVVTFRaXhSUVVSelFpeE5RVUZVVEN4SlFVRnZRa0VzUlVGQlRVZ3NVMEZEY0VKblFpeEhRVUZaWWl4RlFVRlBTeXhGUVVGUExFbEJRVTBzUlVGWmNrUXNVMEZCVTFNc1IwRkJhMEprTEVWQlFVOUxMRVZCUVU5VkxFZEJTWFpETEVsQlNFRXNTVUZCU1Znc1IwRkJVeXhGUVVOVVVDeEZRVUZyUWl4TlFVRlVSeXhGUVVGblFpeEZRVUZKUVN4RlFVRk5TQ3hUUVVVNVFrOHNSVUZCVVZBc1IwRkRaaXhIUVVGSmEwSXNSVUZCVjFZc1JVRkJUMHdzUlVGQlRVa3NTVUZETVVJc1QwRkJRU3hGUVVkS0xFOUJRVUVzUlVGWlJpeFRRVUZUV1N4SFFVRlRhRUlzUlVGQlQwVXNSMEZMZGtJc1NVRktRU3hKUVVGSlJTeEhRVUZUTEVWQlExUlFMRVZCUVd0Q0xFMUJRVlJITEVWQlFXZENMRVZCUVVsQkxFVkJRVTFJTEU5QlEyNURZeXhGUVVGVFRTeE5RVUZOY0VJc1MwRkZWazhzUlVGQlVWQXNSMEZEWm1Nc1JVRkJUMUFzUjBGQlUwWXNSVUZCVTBZc1JVRkJUVWtzUjBGQlVVRXNSVUZCVDBvc1IwRkZhRVFzVDBGQlQxY3NSVUZYVkN4VFFVRlRUeXhIUVVGVmJFSXNSVUZCVDIxQ0xFZEJTM2hDTEVsQlNrRXNTVUZCU1dZc1IwRkJVeXhGUVVOVVVDeEZRVUZUYzBJc1JVRkJUM1JDTEU5QlEyaENkVUlzUlVGQlUzQkNMRVZCUVUxSUxGTkJSVlpQTEVWQlFWRlFMRWRCUTJaSExFVkJRVTF2UWl4RlFVRlRhRUlzUjBGQlUyVXNSVUZCVDJZc1IwRkZha01zVDBGQlQwb3NSVUZsVkN4VFFVRlRjVUlzUjBGQldYSkNMRVZCUVU5RkxFVkJRVlZETEVWQlFXRnRRaXhIUVVOcVJDeEpRVUZKYkVJc1IwRkJVeXhGUVVOVVVDeEZRVUZyUWl4TlFVRlVSeXhGUVVGblFpeEZRVUZKUVN4RlFVRk5TQ3hQUVV0MlF5eEpRVWhKZVVJc1IwRkJZWHBDTEVsQlEyWk5MRVZCUVdOSUxFbEJRVkZKTEUxQlJXWkJMRVZCUVZGUUxFZEJRMlpOTEVWQlFXTkVMRVZCUVZORExFVkJRV0ZJTEVWQlFVMUpMRWRCUVZGQkxFVkJRVTlLTEVkQlJUTkVMRTlCUVU5SExFVkJaVlFzVTBGQlUyOUNMRWRCUVdsQ2RrSXNSVUZCVDBVc1JVRkJWVU1zUlVGQllXMUNMRWRCUTNSRUxFbEJRVWw2UWl4RlFVRnJRaXhOUVVGVVJ5eEZRVUZuUWl4RlFVRkpRU3hGUVVGTlNDeFBRVWwyUXl4SlFVaEplVUlzUjBGQllYcENMRWxCUTJaTkxFVkJRV05JTEVsQlFWRklMRWxCUldwQ1FTeExRVU5NVFN4RlFVRmpSQ3hGUVVGVFF5eEZRVUZoU0N4RlFVRk5TQ3hIUVVGVFFTeEZRVUZSUnl4SFFVVTNSQ3hQUVVGUFJ5eEZRV0ZVTEZOQlFWTnhRaXhIUVVGVmVFSXNSVUZCVDFFc1IwRkplRUlzU1VGSVFTeEpRVUZKU2l4SFFVRlRMRVZCUTFSUUxFVkJRV3RDTEUxQlFWUkhMRVZCUVdkQ0xFVkJRVWxCTEVWQlFVMUlMRk5CUlRsQ1R5eEZRVUZSVUN4SFFVTm1MRWRCUVVsWExFVkJRVlZTTEVWQlFVMUpMRWRCUVZGQkxFVkJRVTlLTEVkQlEycERMRTlCUVVFc1JVRkhTaXhQUVVGQkxFVkJWVVlzU1VGQlNYbENMRWRCUVZsRExFZEJRV0VzVlVGdFF6ZENMRk5CUVZORExFZEJRVmxETEVWQlFWbHdRaXhGUVVGWGNVSXNSMEZETVVNc1NVRkJTV3hDTEVWQlQwb3NUMEZPUVd0Q0xFVkJRVk5FTEVWQlFWa3NVMEZCVTNaQ0xFVkJRVTk1UWl4RlFVRkxSaXhIUVVONFF5eEhRVUZKY0VJc1JVRkJWVWdzUlVGQlQzbENMRVZCUVV0R0xFZEJSWGhDTEU5QlJFRnFRaXhGUVVGVGJVSXNSMEZCUVVFc1NVRkpUbTVDTEVWQlkxUXNVMEZCVTI5Q0xFZEJRV012UWl4RlFVRlBVU3hGUVVGWGQwSXNSVUZCVjBNc1IwRkpiRVFzU1VGSVFTeEpRVUZKY0VNc1JVRkJVMGNzUlVGQlRVZ3NUMEZEWms4c1JVRkJVVFJDTEVkQlFXRkRMRVZCUVZrc1IwRkJTeXhIUVVWc1EwRXNSVUZCV1RkQ0xFMUJRVmxCTEVWQlFWRlFMRWRCUTNSRExFZEJRVWxYTEVWQlFWVlNMRVZCUVUxSkxFZEJRVkZCTEVWQlFVOUtMRWRCUTJwRExFOUJRVTlKTEVWQlIxZ3NUMEZCVVN4RlFWbFdMRk5CUVZOVExFZEJRVmxpTEVWQlFVOUxMRVZCUVU4eVFpeEhRVU5xUXl4UFFVRlBNMElzUjBGQlZVRXNSVUZ2WTI1Q0xGTkJRWFZDVEN4RlFVRlBTeXhGUVVGUE1rSXNSMEZKYmtNc1NVRklRU3hKUVVGSk5VSXNSVUZCVVRSQ0xFVkJRVmtzUlVGRGNFSnVReXhGUVVGVFJ5eEZRVUZOU0N4VFFVVldUeXhGUVVGUlVDeEhRVU5tTEVkQlFVbEhMRVZCUVUxSkxFdEJRVmRETEVWQlEyNUNMRTlCUVU5RUxFVkJSMWdzVDBGQlVTeEZRVlJXTEVOQmJtTnZRa29zUlVGQlQwc3NSVUZCVHpKQ0xFZEJRelZDUkN4SFFVRmpMMElzUlVGQlQydERMRWRCUVZkR0xFZEJZWFJETEZOQlFWTkhMRWRCUVdkQ2JrTXNSVUZCVDBzc1JVRkJUekpDTEVWQlFWZHFRaXhIUVVsb1JDeEpRVWhCTEVsQlFVbFlMRVZCUVZFMFFpeEZRVUZaTEVWQlEzQkNia01zUlVGQlUwY3NSVUZCVFVnc1UwRkZWazhzUlVGQlVWQXNSMEZEWml4SFFVRkphMElzUlVGQlYyWXNSVUZCVFVrc1IwRkJVVU1zUjBGRE0wSXNUMEZCVDBRc1JVRkhXQ3hQUVVGUkxFVkJWVllzVTBGQlV6aENMRWRCUVZVM1FpeEhRVU5xUWl4UFFVRlBRU3hIUVVGVlFTeEZRVmx1UWl4VFFVRlRLMElzUjBGQlUzQkRMRVZCUVU5RkxFZEJRM1pDTEVsQlFVbE1MRVZCUVd0Q0xFMUJRVlJITEVWQlFXZENMRVZCUVVsQkxFVkJRVTFJTEU5QlEzWkRMRTlCUVU5QkxFVkJRVlYzUXl4SFFVRlJja01zUlVGQlQwVXNSMEZCV1V3c1JVRkJWWFJLTEVWQlZYaEVMRk5CUVZOdFRDeEhRVUZoU1N4SFFVTndRaXhQUVVGUExGTkJRVk5STEVkQlEyUXNUMEZCYVVJc1RVRkJWa0VzUlVGQmFVSjJUaXhGUVVGWmRVNHNSVUZCVDFJc1NVRlhMME1zVTBGQlUxTXNSMEZCWlVRc1IwRkRkRUlzVDBGQlR5eFRRVUZUVWl4SFFVTmtMRTlCUVdsQ0xFMUJRVlpSTEVWQlFXbENkazRzUlVGQldYVk9MRVZCUVU5U0xFbEJhVUl2UXl4VFFVRlRWU3hIUVVGWFdpeEZRVUZaTVVJc1JVRkJWVU1zUlVGQllXMUNMRVZCUVZkUExFZEJUV2hGTEU5QlRFRkJMRVZCUVZORUxFVkJRVmtzVTBGQlUzWkNMRVZCUVU5RUxFVkJRVTkzUWl4SFFVTXhRM3BDTEVWQlFXTnRRaXhIUVVOVVFTeEhRVUZCUVN4RlFVRnRRbXBDTEVkQlEzQkNTQ3hGUVVGVFF5eEZRVUZoUlN4RlFVRlBSQ3hGUVVGUGQwSXNTMEZGYmtONlFpeEZRV2REVkN4VFFVRlRhME1zUjBGQlVYSkRMRVZCUVU5RkxFZEJTM1JDTEVsQlNrRXNTVUZCU1ZNc1JVRkRRVkFzUjBGQlV5eEZRVU5VVUN4RlFVRlRSeXhGUVVGTlNDeFRRVVZXVHl4RlFVRlJVQ3hIUVVGUkxFTkJRM1pDTEVsQlFVazBReXhGUVVGVmRrTXNSVUZCVTBZc1JVRkJUVWtzU1VGRGVrSnhReXhKUVVGWk1VNHNTVUZEWkRSTUxFVkJRVk5CTEVsQlFWYzFUQ3hGUVVGWk1FNHNSVUZCVnpsQ0xFVkJRVk00UWl4SFFVZDRSQ3hQUVVGUE9VSXNSVUZaVkN4VFFVRlRLMElzUjBGQlZVTXNSVUZCUjNwRExFZEJTWEJDTEVsQlNFRXNTVUZCU1VVc1IwRkJVeXhGUVVOVVR5eEZRVUZUVFN4TlFVRk5NRUlzUzBGRlZuWkRMRVZCUVZGMVF5eEhRVU5tYUVNc1JVRkJUMUFzUjBGQlUwWXNSVUZCVTBVc1IwRkZNMElzVDBGQlQwOHNSVUY1UWxRc1UwRkJVMmxETEVkQlFWVnNSQ3hIUVVOcVFpeFBRVUZQTEZOQlFWTlhMRWRCUTJRc1QwRkJUMWdzUlVGQlMxY3NTVUZqYUVJc1UwRkJVM2RETEVkQlFWZFFMRVZCUVZGUkxFZEJRekZDTEU5QlFVODVRaXhIUVVGVE9FSXNSVUZCVHl4VFFVRlRhRUlzUjBGRE9VSXNUMEZCVDFFc1JVRkJUMUlzUzBGWmJFSXNVMEZCVTJsQ0xFZEJRVk5ETEVWQlFVOXNRaXhIUVVOMlFpeFBRVUZQYTBJc1JVRkJUVU1zU1VGQlNXNUNMRWRCV1c1Q0xGTkJRVk52UWl4SFFVRm5Ra01zUlVGQldVTXNSMEZKYmtNc1NVRklRU3hKUVVGSmFFUXNSMEZCVXl4RlFVTlVVQ3hGUVVGVGMwUXNSVUZCVjNSRUxGTkJSV1pQTEVWQlFWRlFMRWRCUVZWblFpeEhRVUZaZFVNc1JVRkJXVVFzUlVGQlZ5OURMRWRCUVZFc1NVRkJUU3hKUVVNMVJTeFBRVUZQUVN4RlFWbFVMRk5CUVZOcFJDeEhRVUZqUml4RlFVRlpReXhIUVVkcVF5eEpRVVpCTEVsQlFVbG9SQ3hGUVVGUkswTXNSVUZCVjNSRUxFOUJSV2hDVHl4TFFVRlhVeXhIUVVGWmRVTXNSVUZCV1VRc1JVRkJWeTlETEVkQlFWRXNTVUZCVFN4SlFVTnVSU3hQUVVGUFFTeEZRU3RDVkN4SlFVRkphMFFzUjBGQlpXWXNSMEZ3ZDBKSExFTkJSWEJDWjBJc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVUZMUXl4SlFVRlJMRWxCUVV0RExFbEJRVkVzU1VGRE1VVkRMRWxCUVZFc1NVRkJUVU1zU1VGQlVTeEpRVUZMUXl4SlFVRlJMRWxCUVV0RExFbEJRVkVzU1VGQlMwTXNTVUZCVVN4SlFVRkxReXhKUVVGUkxFbEJRekZGUXl4SlFVRlJMRWxCUVUxRExFbEJRVkVzU1VGRGRFSkRMRWxCUVZFc1NVRkJUVU1zU1VGQlVTeEpRVU4wUWtNc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVU5vUkVNc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVU5vUkVNc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVU5vUkVNc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVU5vUkVNc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlEzUkNReXhKUVVGUkxFbEJRVTFETEVsQlFWRXNTVUZCUzBNc1NVRkJVU3hKUVVGTFF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVU14UlVNc1NVRkJVU3hKUVVGTlF5eEpRVUZSTEVsQlFVdERMRWxCUVZFc1NVRkJTME1zU1VGQlVTeEpRVUZMUXl4SlFVRlJMRWxCUVV0RExFbEJRVkVzU1VGRE1VVkRMRWxCUVZFc1NVRkJUVU1zU1VGQlVTeEpRVUZMUXl4SlFVRlJMRWxCUVV0RExFbEJRVkVzU1VGRGFFUkRMRWxCUVZFc1NVRkJUVU1zU1VGQlVTeEpRVUZMUXl4SlFVRlJMRWxCUVV0RExFbEJRVkVzU1VGRGFFUkRMRWxCUVZFc1NVRkJUVU1zU1VGQlVTeEpRVUZMUXl4SlFVRlJMRWxCUTI1RFF5eEpRVUZSTEV0QlFVMURMRWxCUVZFc1MwRkRkRUpETEVsQlFWRXNTMEZCVFVNc1NVRkJVU3hMUVVOMFFrTXNTVUZCVVN4TFFVVlNReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVONlEwTXNTVUZCVlN4SlFVRk5ReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZEZWtORExFbEJRVlVzU1VGQlRVTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZEZUVSRExFbEJRVlVzU1VGQlRVTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZEZUVSRExFbEJRVlVzU1VGQlRVTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZEZUVSRExFbEJRVlVzU1VGQlRVTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVOMlJVTXNTVUZCVlN4SlFVRk5ReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlEzWkZReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlEzaEVReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlEzaEVReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlEzaEVReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlFVdERMRWxCUVZVc1NVRkRka1ZETEVsQlFWVXNTVUZCVFVNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlFVdERMRWxCUVZVc1NVRkJTME1zU1VGQlZTeEpRVU4yUlVNc1NVRkJWU3hKUVVGTlF5eEpRVUZWTEVsQlF6RkNReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVONlEwTXNTVUZCVlN4SlFVRk5ReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlEzWkZReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlFVdERMRWxCUVZVc1NVRkRka1ZETEVsQlFWVXNTVUZCVFVNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlFVdERMRWxCUVZVc1NVRkRlRVJETEVsQlFWVXNTVUZCVFVNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlFVdERMRWxCUVZVc1NVRkRlRVJETEVsQlFWVXNTVUZCVFVNc1NVRkJWU3hKUVVGTFF5eEpRVUZWTEVsQlEzcERReXhKUVVGVkxFbEJRVTFETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVONlEwTXNTVUZCVlN4SlFVRk5ReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZEZWtORExFbEJRVlVzU1VGQlRVTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRM3BEUXl4SlFVRlZMRWxCUVUxRExFbEJRVlVzU1VGQlMwTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRM2hFUXl4SlFVRlZMRWxCUVUxRExFbEJRVlVzU1VGQlMwTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRM2hFUXl4SlFVRlZMRWxCUVUxRExFbEJRVlVzU1VGQlMwTXNTVUZCVlN4SlFVTjZRME1zU1VGQlZTeEpRVUZOUXl4SlFVRlZMRWxCUVV0RExFbEJRVlVzU1VGRGVrTkRMRWxCUVZVc1NVRkJUVU1zU1VGQlZTeEpRVUZMUXl4SlFVRlZMRWxCUVV0RExFbEJRVlVzU1VGQlMwTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRM1JHUXl4SlFVRlZMRWxCUVUxRExFbEJRVlVzU1VGQlMwTXNTVUZCVlN4SlFVRkxReXhKUVVGVkxFbEJRVXRETEVsQlFWVXNTVUZCUzBNc1NVRkJWU3hKUVVOMFJrTXNTVUZCVlN4SlFVRk5ReXhKUVVGVkxFbEJRekZDUXl4SlFVRlZMRWxCUVUxRExFbEJRVlVzU1VGQlMwTXNTVUZCVlN4SlFVTjZRME1zU1VGQlZTeEpRVUZOUXl4SlFVRlZMRWxCUVV0RExFbEJRVlVzU1VGRGVrTkRMRWxCUVZVc1NVRkJUVU1zU1VGQlZTeEpRVUZMUXl4SlFVRlZMRWxCUTNwRFF5eEpRVUZWTEV0QlFVMURMRWxCUVZVc1MwRkRNVUpETEVsQlFWVXNTMEZCVFVNc1NVRkJWU3hMUVVNeFFrTXNTVUZCVlN4TFFVRk5ReXhKUVVGVkxFMUJkWFJDZUVKRExFZEJRV2xDT1Uwc1IwRnVkRUpJTEVOQlEyaENLMDBzU1VGQlN5eFJRVU5NUXl4SlFVRkxMRTlCUTB4RExFbEJRVXNzVDBGRFRFTXNTVUZCU3l4VFFVTk1lbE1zU1VGQlN5eFZRWFYwUWxBc1UwRkJVekJUTEVkQlFXbENReXhIUVVONFFpeE5RVUZQTEV0QlFVODNVeXhIUVVGak5sTXNSMEZ6UWpsQ0xGTkJRVk5ETEVkQlFWZERMRWRCUTJ4Q0xFOUJRVTl5VkN4SFFVRmhjMVFzUzBGQlMwUXNSMEZ6UXpOQ0xGTkJRVk5GTEVkQlFWZERMRWRCUTJ4Q0xFbEJRVWsxVUN4SFFVRlRMRVZCUTFSUExFVkJRVk5OTEUxQlFVMHJUeXhGUVVGSlF5eE5RVXQyUWl4UFFVaEJSQ3hGUVVGSlJTeFJRVUZSTEZOQlFWTTNVQ3hGUVVGUGVVSXNSMEZETVVKdVFpeEpRVUZUVUN4SFFVRlRMRU5CUVVNd1FpeEZRVUZMZWtJc1MwRkZia0pOTEVWQlYxUXNVMEZCVTNkUUxFZEJRVkY2VVN4RlFVRk5NRkVzUjBGRGNrSXNUMEZCVHl4VFFVRlRReXhIUVVOa0xFOUJRVTh6VVN4RlFVRkxNRkVzUlVGQlZVTXNTMEZoTVVJc1UwRkJVME1zUjBGQlpYUlJMRVZCUVU5MVVTeEhRVTAzUWl4SlFVeEJMRWxCUVVsdVVTeEhRVUZUTEVWQlExUlFMRVZCUVZOSExFVkJRVTFJTEU5QlEyWmhMRVZCUVZjc1JVRkRXRU1zUlVGQlV5eExRVVZLVUN4RlFVRlJVQ3hIUVVGUkxFTkJRM1pDTEVsQlFVbFJMRVZCUVZGTUxFVkJRVTFKTEVkQlEyUkRMRWxCUVZWclVTeEhRVUZsYkZFc1NVRkJWVzVNTEVsQlEzSkRPRXNzUlVGQlRVa3NSMEZCVTJ4TUxFVkJRMlo1VEN4RlFVRlBSQ3hMUVVGalRpeEhRVWQ2UWl4UFFVRlBUeXhGUVZWVUxGTkJRVk0yVUN4SFFVRlhReXhIUVVOc1FpeEpRVUZKY2xFc1IwRkJVeXhGUVVOVVR5eEZRVUZUVFN4TlFVRk5kMUFzUlVGQlNWSXNUVUZMZGtJc1QwRklRVkVzUlVGQlNWQXNVVUZCVVN4VFFVRlROMUFzUjBGRGJrSk5MRWxCUVZOUUxFZEJRVk5ETEVsQlJXSk5MRVZCVlZRc1UwRkJVeXRRTEVkQlFWZEVMRWRCUTJ4Q0xFbEJRVWx5VVN4SFFVRlRMRVZCUTFSUExFVkJRVk5OTEUxQlFVMTNVQ3hGUVVGSlVpeE5RVXQyUWl4UFFVaEJVU3hGUVVGSlVDeFJRVUZSTEZOQlFWTTNVQ3hIUVVOdVFrMHNTVUZCVTFBc1IwRkJVeXhEUVVGRFF5eEZRVUZQUVN4TFFVVnlRazBzUlVGdlJGUXNVMEZCVTJkUkxFZEJRVmRrTEVkQlEyeENMRTlCUVU5RUxFZEJRVmRETEVkQmEwTndRaXhUUVVGeFFrRXNSMEZGYmtJc1NVRkVRU3hKUVVGSmJGQXNSVUZCVTNKRkxFZEJRVlZ6VlN4VlFVRlpMRVZCUXpWQ2RGVXNSMEZCVlhkVUxFdEJRVXRFTEUxQlEyeENiRkFzUlVGRlNpeFBRVUZQUVN4RlFVeFVMRU5CYWtOclFtdFFMRWRCUTFwd1R5eEhRVUZWYjA4c1IwRlZhRUlzVTBGQlUyZENMRWRCUVdOb1FpeEhRVU55UWl4UFFVRlBSQ3hIUVVGWFF5eEhRVzlEY0VJc1UwRkJkMEpCTEVkQlEzUkNMRTlCUVU5QkxFVkJRVTlwUWl4TlFVRk5lRlVzUzBGQll5eEhRVVJ3UXl4RFFXNURjVUoxVkN4SFFXaHJRbkpDTEZOQlFYTkNRU3hIUVVOd1FpeFBRVUZQUVN4RlFVRlBhMElzVFVGQlRTeEpRVVIwUWl4RFFXbHJRbTFDYkVJc1IwRlZia0lzU1VGQlNXMUNMRWRCUVcxQ2VrOHNSMEV2TmtKSUxFTkJRMnhDTUU4c1VVRkJVeXhKUVVOVVF5eFBRVUZSTEVsQlExSkRMRTlCUVZFc1NVRkRVa01zVTBGQlZTeEpRVU5XUXl4UlFVRlRMRTFCSzNsblFsQkRMRWRCTDNwbFpTeFRRVUZWUXl4SFFVRmhReXhKUVVsNFF5eEpRVFpDVFVNc1IwRTNRa1o0VVN4SlFVaEtkVkVzUjBGQmNVSXNUVUZCV0VFc1IwRkJhMEl4VkN4SFFVRlBkMVFzUjBGQlJVa3NVMEZCVXpWVUxFZEJRVXRJTEZOQlFWVTJWQ3hIUVVGVFJpeEhRVUZGU3l4TFFVRkxOMVFzUjBGQlRYQkNMRTFCUnk5RWRVVXNUVUZEYUVJeVVTeEhRVUZQU2l4SFFVRlJTU3hMUVVObVF5eEhRVUZSVEN4SFFVRlJTeXhOUVVOb1FqbFVMRWRCUVZkNVZDeEhRVUZSZWxRc1UwRkRia0lyVkN4SFFVRlBUaXhIUVVGUlRTeExRVU5tYmxVc1IwRkJVelpVTEVkQlFWRTNWQ3hQUVVOcVFucEZMRWRCUVZOeldTeEhRVUZSZEZrc1QwRkRha0kyV1N4SFFVRlRVQ3hIUVVGUlR5eFBRVU5xUWtNc1IwRkJXVklzUjBGQlVWRXNWVUZIY0VKRExFZEJRV0ZvVWl4SFFVRk5hVklzVlVGRGJrSkRMRWRCUVZsd1ZTeEhRVUZUYlZVc1ZVRkRja0pGTEVkQlFXTjZWU3hIUVVGUGRWVXNWVUZIY2tKSExFZEJRV0ZpTEVkQlFWRXNjMEpCUjNKQ1l5eEhRVUZsU0N4SFFVRlZTU3hUUVVkNlFrTXNSMEZCYVVKS0xFZEJRVmxKTEdWQlJ6ZENReXhIUVVGWkxFVkJSMXBETEVsQlEwVnFRaXhIUVVGTkxGTkJRVk5yUWl4TFFVRkxUaXhKUVVGalFTeEhRVUZYVHl4TlFVRlJVQ3hIUVVGWFR5eExRVUZMUXl4VlFVRlpMRXRCUTNaRkxHbENRVUZ0UW5CQ0xFZEJRVThzUjBGUmRFTnhRaXhIUVVGMVFsWXNSMEZCV1Vjc1UwRkhia05STEVkQlFXMUNWQ3hIUVVGaGVGTXNTMEZCUzI1RExFbEJSM0pEY1ZZc1IwRkJWV3hXTEVkQlFVdDNWQ3hGUVVkbU1rSXNSMEZCWVM5YUxFZEJRVThzU1VGRGRFSnZXaXhIUVVGaGVGTXNTMEZCU3pCVExFbEJRV2RDVlN4UlFVRlJkbG9zUjBGQll5eFJRVU4yUkhWYUxGRkJRVkVzZVVSQlFUQkVMRk5CUVZjc1MwRkpOVVZETEVkQlFWTTVWU3hIUVVGblFtMVVMRWRCUVZFeVFpeFBRVUZUY0dVc1JVRkRNVU54WlN4SFFVRlROVUlzUjBGQlVUUkNMRTlCUTJwQ1F5eEhRVUZoTjBJc1IwRkJVVFpDTEZkQlEzSkNReXhIUVVGalNDeEhRVUZUUVN4SFFVRlBSeXhaUVVGamRtVXNSVUZETlVOM1pTeEhRVUZsY0VRc1IwRkJVWGhUTEVkQlFVODJWaXhsUVVGblFqZFdMRWxCUXpsRE9GWXNSMEZCWlRsV0xFZEJRVThyVml4UFFVTjBRa01zUjBGQmRVSjJRaXhIUVVGWmRVSXNjVUpCUTI1RFF5eEhRVUZUTTBJc1IwRkJWekpDTEU5QlEzQkNReXhIUVVGdFFsUXNSMEZCVTBFc1IwRkJUMVVzYlVKQlFYRkNMMlVzUlVGRGVFUm5aaXhIUVVGaldDeEhRVUZUUVN4SFFVRlBXU3hUUVVGWGFtWXNSVUZEZWtOclppeEhRVUZwUW1Jc1IwRkJVMEVzUjBGQlQyTXNXVUZCWTI1bUxFVkJSUzlEYjJZc1IwRkJhMElzVjBGRGNFSXNTVUZEUlN4SlFVRkplbFVzUlVGQlR6QlZMRWRCUVZWNlZ5eEhRVUZSTEd0Q1FVVTNRaXhQUVVSQkswSXNSVUZCU3l4SFFVRkpMRWRCUVVrc1NVRkRUa0VzUlVGRFVDeE5RVUZQWkN4TFFVeFhMRWRCVTJ4Q2VWWXNSMEZCYTBJM1F5eEhRVUZST0VNc1pVRkJhVUo0Vnl4SFFVRkxkMWNzWTBGQlowSTVReXhIUVVGUk9FTXNZVUZEZUVWRExFZEJRVk16UXl4SlFVRlJRU3hIUVVGTE5FTXNUVUZCVVRGWExFZEJRVXM0VkN4TFFVRkxORU1zUzBGQlR6VkRMRWRCUVVzMFF5eEpRVU53UkVNc1IwRkJaMEpxUkN4SFFVRlJhMFFzWVVGQlpUVlhMRWRCUVVzMFZ5eFpRVUZqYkVRc1IwRkJVV3RFTEZkQlIyeEZReXhIUVVGaE4wTXNSMEZCU3poRExFdEJRMnhDUXl4SFFVRmpMME1zUjBGQlMyZEVMRTFCUTI1Q1F5eEhRVUZ0UW5CWUxFZEJRVTl4V0N4elFrRkRNVUpETEVkQlFXbENPVUlzUjBGQlUwRXNSMEZCVHl0Q0xGTkJRVmR1WjBJc1JVRkROVU52WjBJc1IwRkJhVUl6UkN4SFFVRlJORVFzVTBGRGVrSkRMRWRCUVdGd1JDeEhRVUZYYUZjc1MwRkRlRUp4V2l4SFFVRmhia1lzUjBGQlVYaFRMRWRCUVU5cFZpeExRVUZOYWxZc1NVRkRiRU0wV0N4SFFVRlpla1FzUjBGQlN6QkVMRWxCUTJwQ1F5eEhRVUZaTTBRc1IwRkJTelJFTEVsQlEycENReXhIUVVGWkwwUXNSMEZCU3pSRExFbEJRMnBDYjBJc1IwRkJhVUp3UlN4SFFVRlJhRlVzVTBGRGVrSnhXU3hIUVVGbEwwUXNSMEZCUzJkRkxFOUJRM0JDUXl4SFFVRm5RamxFTEVkQlFWY3JSQ3hSUVVjelFrTXNSMEZCVnpkQ0xFZEJRVlUxUXl4SFFVRlRMRmxCUXpsQ01FVXNSMEZCVFRsQ0xFZEJRVlUxUXl4SFFVRlRMRTlCUTNwQ01rVXNSMEZCVlM5Q0xFZEJRVlUxUXl4SFFVRlRMRmRCUXpkQ05FVXNSMEZCVFdoRExFZEJRVlUxUXl4SFFVRlRMRTlCUTNwQ05rVXNSMEZCVldwRExFZEJRVlUxUXl4SFFVRlRMRmRCUXpkQ09FVXNSMEZCWld4RExFZEJRVlY2Vnl4SFFVRlJMRlZCUjJwRE5Ga3NSMEZCVlVZc1NVRkJWeXhKUVVGSlFTeEhRVWQ2UWtjc1IwRkJXU3hIUVVkYVF5eEhRVUZ4UWtNc1IwRkJVMVFzU1VGRE9VSlZMRWRCUVdkQ1JDeEhRVUZUVWl4SlFVTjZRbFVzUjBGQmIwSkdMRWRCUVZOUUxFbEJRemRDVlN4SFFVRm5Ra2dzUjBGQlUwNHNTVUZEZWtKVkxFZEJRVzlDU2l4SFFVRlRUQ3hKUVVjM1FsVXNSMEZCWXpORUxFZEJRVk5CTEVkQlFVOXNRaXhWUVVGWmJtUXNSVUZETVVOcGFVSXNSMEZCWjBKRUxFZEJRV05CTEVkQlFWbEZMRkZCUVZWc2FVSXNSVUZEY0VSdGFVSXNSMEZCYVVKSUxFZEJRV05CTEVkQlFWbDRSU3hUUVVGWGVHUXNSVUY1U0RGRUxGTkJRVk52YVVJc1IwRkJUemxYTEVkQlEyUXNSMEZCU1N0WExFZEJRV0V2Vnl4TFFVRlhaMWdzUjBGQlVXaFlMRTFCUVZsQkxHRkJRV2xDYVZnc1NVRkJZeXhEUVVNM1JTeEhRVUZKYWxnc1lVRkJhVUpyV0N4SFFVTnVRaXhQUVVGUGJGZ3NSVUZGVkN4SFFVRkpiVk1zUjBGQlpURlRMRXRCUVV0UExFVkJRVThzWlVGRE4wSXNUMEZCVDIxWUxFZEJRV0Z1V0N4SFFVZDRRaXhQUVVGUExFbEJRVWxyV0N4SFFVRmpiRmdzUjBGWE0wSXNTVUZCU1c5WUxFZEJRV01zVjBGRGFFSXNVMEZCVTI1V0xFdEJRMVFzVDBGQlR5eFRRVUZUYjFZc1IwRkRaQ3hKUVVGTFF5eEhRVUZUUkN4SFFVTmFMRTFCUVU4c1IwRkZWQ3hIUVVGSmFrVXNSMEZEUml4UFFVRlBRU3hIUVVGaGFVVXNSMEZGZEVKd1ZpeEZRVUZQTkZBc1ZVRkJXWGRHTEVWQlEyNUNMRWxCUVVrdlZ5eEZRVUZUTEVsQlFVa3lRaXhGUVVWcVFpeFBRVVJCUVN4RlFVRlBORkFzVlVGQldXNWtMRVZCUTFvMFRDeEhRVnBQTEVkQmNVSnNRaXhUUVVGVGFWZ3NUVUZYVkN4VFFVRlRUQ3hIUVVGamJGZ3NSVUZCVDNkWUxFZEJRelZDUXl4TFFVRkxReXhaUVVGak1WZ3NSVUZEYmtKNVdDeExRVUZMUlN4WlFVRmpMRWRCUTI1Q1JpeExRVUZMUnl4WlFVRmpTaXhGUVVOdVFrTXNTMEZCUzBrc1ZVRkJXU3hGUVVOcVFrb3NTMEZCUzBzc1YwRkJZWEJxUWl4RlFXZEdjRUlzVTBGQlUzVnBRaXhIUVVGWmFsZ3NSMEZEYmtKNVdDeExRVUZMUXl4WlFVRmpNVmdzUlVGRGJrSjVXQ3hMUVVGTFJTeFpRVUZqTEVkQlEyNUNSaXhMUVVGTFRTeFJRVUZWTEVWQlEyWk9MRXRCUVV0UExHTkJRVUZCTEVWQlEweFFMRXRCUVV0UkxHTkJRV2RDTEVkQlEzSkNVaXhMUVVGTFV5eGpRVUZuUWpsb1FpeEZRVU55UW5Gb1FpeExRVUZMVlN4VlFVRlpMRWRCWjBodVFpeFRRVUZUUXl4SFFVRkxReXhIUVVOYUxFbEJRVWwwV1N4SFFVRlRMRVZCUTFSUUxFVkJRVzlDTEUxQlFWZzJXU3hGUVVGclFpeEZRVUZKUVN4RlFVRlJOMWtzVDBGSE0wTXNTVUZFUVdsWkxFdEJRVXRoTEZWQlEwbDJXU3hGUVVGUlVDeEhRVUZSTEVOQlEzWkNMRWxCUVVrcldTeEZRVUZSUml4RlFVRlJkRmtzUjBGRGNFSXdXQ3hMUVVGTGNrZ3NTVUZCU1cxSkxFVkJRVTBzUjBGQlNVRXNSVUZCVFN4TFFXbEhOMElzVTBGQlUwTXNSMEZCVlVnc1IwRkRha0lzU1VGQlNYUlpMRWRCUVZNc1JVRkRWRkFzUlVGQmIwSXNUVUZCV0RaWkxFVkJRV3RDTEVWQlFVbEJMRVZCUVZFM1dTeFBRVWN6UXl4SlFVUkJhVmtzUzBGQlMyRXNWVUZEU1haWkxFVkJRVkZRTEVkQlFWRXNRMEZEZGtJc1NVRkJTU3RaTEVWQlFWRkdMRVZCUVZGMFdTeEhRVU53UWpCWUxFdEJRVXR5U0N4SlFVRkpiVWtzUlVGQlRTeEhRVUZKUVN4RlFVRk5MRXRCT0VjM1FpeFRRVUZUUlN4SFFVRlRTaXhIUVVOb1FpeEpRVUZKZEZrc1IwRkJVeXhGUVVOVVVDeEZRVUZ2UWl4TlFVRllObGtzUlVGQmEwSXNSVUZCU1VFc1JVRkJVVGRaTEU5QlJ6TkRMRWxCUkVGcFdTeExRVUZMWVN4VlFVTkpkbGtzUlVGQlVWQXNSMEZCVVN4RFFVTjJRaXhKUVVGSksxa3NSVUZCVVVZc1JVRkJVWFJaTEVkQlEzQkNNRmdzUzBGQlMzSklMRWxCUVVsdFNTeEZRVUZOTEVkQlFVbEJMRVZCUVUwc1MwRnBSemRDTEZOQlFWTkhMRWRCUVZNMVdDeEhRVU5vUWl4SlFVRkpaaXhIUVVGVExFVkJRMVJRTEVWQlFXMUNMRTFCUVZaelFpeEZRVUZwUWl4RlFVRkpRU3hGUVVGUGRFSXNUMEZIZWtNc1NVRkVRV2xaTEV0QlFVdHJRaXhUUVVGWExFbEJRVWxHTEV0QlExZ3hXU3hGUVVGUlVDeEhRVU5tYVZrc1MwRkJTMjFDTEVsQlFVazVXQ3hGUVVGUFppeEpRVFpEY0VJc1UwRkJVemhaTEVkQlFVMVNMRWRCUTJJc1NVRkJTVk1zUlVGQlQzSkNMRXRCUVV0clFpeFRRVUZYTEVsQlFVbElMRWRCUVZWSUxFZEJRM3BEV2l4TFFVRkxOMGdzUzBGQlQydEtMRVZCUVV0c1NpeExRWEZIYmtJc1UwRkJVMjFLTEVkQlFXTXZXU3hGUVVGUFoxb3NSMEZETlVJc1NVRkJTVU1zUlVGQlVXcERMRWRCUVZGb1dDeEhRVU5vUW10YUxFZEJRVk5FTEVkQlFWTkZMRWRCUVZsdVdpeEhRVU01UW05YUxFZEJRVlZJTEVsQlFWVkRMRWRCUVZOeVJTeEhRVUZUTjFVc1IwRkRkRU54V2l4SFFVRlZTaXhKUVVGVlF5eEpRVUZWUlN4SFFVRlZhbUVzUjBGQllXRXNSMEZEY2tSeldpeEZRVUZqVEN4SFFVRlRReXhIUVVGVFJTeEhRVUZWUXl4RlFVTXhReTlaTEVWQlFWTm5XaXhGUVVGamFsZ3NSMEZCVlhKRExFVkJRVTFTTEU5QlFWRnJVeXhKUVVGVkxFZEJRM3BFYkZNc1JVRkJVMk1zUlVGQlQyUXNUMEZGY0VJc1NVRkJTeXhKUVVGSmFVTXNTMEZCVDNwQ0xFZEJRMVJuV2l4SlFVRmhOMGNzUjBGQlpURlRMRXRCUVV0UExFVkJRVTk1UWl4SlFVTjJRelpZTEVsQlJWRXNWVUZCVURkWUxFZEJSVU15V0N4SlFVRnJRaXhWUVVGUU0xZ3NSMEZCTUVJc1ZVRkJVRUVzU1VGRk9VSTBXQ3hKUVVGclFpeFZRVUZRTlZnc1IwRkJNRUlzWTBGQlVFRXNSMEZCT0VJc1kwRkJVRUVzU1VGRmRFUTRXQ3hIUVVGUk9WZ3NSVUZCUzJwRExFdEJSV3hDWXl4RlFVRlBhMW9zUzBGQlN5OVlMRWRCUjJoQ0xFOUJRVTl1UWl4RlFWVlVMRk5CUVZOdFdpeEhRVUZaT1Zvc1IwRkRia0lzU1VGQlNVZ3NSVUZCVTBjc1JVRkJUVWdzVDBGRGJrSXNUMEZCVDBFc1JVRkJVMGNzUlVGQlRTdGFMRWRCUVZjc1JVRkJSMnhoTEVWQlFWTXNTVUZCVFRsTExFVkJiVU55UkN4VFFVRlRhV3hDTEVkQlFXbENNVmdzUlVGQlVWSXNSVUZCUzNwQ0xFbEJRMmhEUVN4SlFVRlZkRXdzUjBGQlkydHNRaXhIUVVGSE0xZ3NSVUZCVDFJc1IwRkJUWHBDTEUxQlEzaERRU3hKUVVGVmRFd3NSMEZCWlN0TkxFdEJRVTlSTEVsQlEyNURORmdzUjBGQlowSTFXQ3hGUVVGUlVpeEZRVUZMZWtJc1IwRmpha01zVTBGQlV6aGFMRWRCUVZrM1dDeEZRVUZSVWl4RlFVRkxla0lzUjBGRGFFTXNTVUZCU1N0YUxFVkJRVmM1V0N4RlFVRlBVaXhIUVVOb1FqQlJMRWRCUVdVeFV5eExRVUZMZDBNc1JVRkJVVklzU1VGQlVXMVpMRWRCUVVkSExFVkJRVlV2V2l4TFFVTnNSRUVzU1VGQlZYUk1MRWRCUVdVclRTeExRVUZQVVN4SlFVTnVRelJZTEVkQlFXZENOVmdzUlVGQlVWSXNSVUZCUzNwQ0xFZEJXV3BETEZOQlFWTm5ZU3hIUVVGaGNtRXNSVUZCVHpoQ0xFZEJSVE5DTEVsQlJFRXNTVUZCU1dwRExFVkJRVk5ITEVWQlFVMUlMRTlCUTFwQkxFdEJRMHdzUjBGQlNXOWhMRWRCUVVkcVlTeEZRVUZOU0N4SFFVRlJMRWRCUVVscFF5eEhRVU4yUWl4UFFVRlBha01zUlVGSFdDeFBRVUZSTEVWQlkxWXNVMEZCVTNsaExFZEJRV1V4V1N4RlFVRlpNMElzUlVGQlVVTXNSVUZCVlVNc1IwRkpjRVFzVDBGSVFXOWhMRWRCUVZNeldTeEZRVUZaTEZOQlFWTjJRaXhGUVVGUGVVSXNSVUZCUzBZc1IwRkRlRU16UWl4RlFVRlBSU3hGUVVGaFJTeEZRVUZQU0N4RlFVRlRSeXhIUVVGUmRVSXNTMEZGZGtONlFpeEZRVmxVTEZOQlFWTnhZU3hIUVVGWGJGa3NSVUZCVVc1S0xFZEJRekZDTEU5QlFVOXRTaXhIUVVGVmJWa3NSMEZCVjNSb1FpeEZRVUZSZVZvc1IwRkJTM3BhTEVkQlFWTnRTaXhIUVhsQ2NFUXNVMEZCVXpSWUxFZEJRV2RDTlZnc1JVRkJVVklzUlVGQlMzcENMRWRCUTNwQ0xHRkJRVkI1UWl4SFFVRnpRbkZUTEVkQlEzaENRU3hIUVVGbE4xSXNSVUZCVVZJc1JVRkJTeXhEUVVNeFFqUlpMR05CUVVGQkxFVkJRMEZETEZsQlFVRkJMRVZCUTBGMFlTeE5RVUZUUVN4RlFVTlVkV0VzVlVGQlFVRXNTVUZIUm5SWkxFVkJRVTlTTEVkQlFVOTZRaXhGUVZsc1FpeFRRVUZUZDJFc1IwRkJUM1paTEVWQlFWRjNXU3hIUVUxMFFpeEpRVXhCTEVsQlFVa3hZU3hIUVVGVExFVkJRMVJRTEVWQlFWTnBZaXhGUVVGTmFtSXNUMEZEWm1Nc1JVRkJVMDBzUjBGQlRYQkNMRWRCUTJacllpeEZRVUZwUWl4TlFVRldlbGtzU1VGRlJteERMRVZCUVZGUUxFZEJRMlpqTEVWQlFVOVFMRWRCUVZNeVlTeEZRVUZQYUcxQ0xFVkJRVmxwYlVJc1IwRkJTVEZaTEVWQlFWRjNXU3hGUVVGTk1XRXNTVUZGZGtRc1QwRkJUMDhzUlVGWlZDeFRRVUZUYzJFc1IwRkJWVU1zUlVGQlVVTXNSVUZCVDBNc1IwRlRhRU1zVDBGU1NVWXNSMEZCVjBFc1NVRkRWRVVzU1VGQlZYSnRRaXhKUVVOYWJXMUNMRVZCUVZOQkxFZEJRVlZGTEVWQlFWRkdMRVZCUVZORkxFZEJSV3hEUkN4SlFVRlZjRzFDTEVsQlExcHRiVUlzUlVGQlUwRXNSMEZCVlVNc1JVRkJVVVFzUlVGQlUwTXNTVUZIYWtORUxFVkJiVUpVTEZOQlFWTkhMRWRCUVZWb1lpeEZRVUZQYVdJc1JVRkJVME1zUlVGQldYcGFMRVZCUVV0UkxFVkJRVkZyV2l4SFFVTXhSQ3hKUVVGSk4yRXNSVUZEUVRoaExFVkJRVk5JTEVWQlFWVnViVUlzUlVGRGJrSjFiVUlzUlVGQlUwb3NSVUZCVld4dFFpeEZRVU51UW5WdFFpeEZRVUZUVEN4RlFVRlZhbTFDTEVWQlMzWkNMRWRCU0VscmJVSXNTVUZEUmpWaExFVkJRVk15UWl4RlFVRlRhVm9zUlVGQlYyeGlMRVZCUVU5NVFpeEZRVUZMVVN4RlFVRlJhMW9zUjBGQlUwUXNSVUZCVjJ4aUxFbEJSVzVGVFN4SlFVRlhOVXdzUlVGRFlpeFBRVUZQTkV3c1JVRkZWQ3hKUVVGTFoxZ3NSMEZCVTNSWUxFZEJRMW9zVDBGQlQwRXNSVUZGVkN4SlFVRkphVm9zUlVGQlVXcERMRWRCUVZGb1dDeEhRVU53UWl4SFFVRkphVm9zUjBGRlJpeEhRVVJCTTFrc1JVRjFOMGRLTEZOQlFYZENXQ3hIUVVOMFFpeEpRVUZKU0N4RlFVRlRSeXhGUVVGTlNDeFBRVU5tWXl4RlFVRlRMRWxCUVVsWUxFVkJRVTAwWWl4WlFVRlpMMklzUjBGUGJrTXNUMEZLU1VFc1IwRkJOa0lzYVVKQlFWcEhMRVZCUVUwc1NVRkJhMEozVXl4SFFVRmxNVk1zUzBGQlMwVXNSVUZCVHl4WFFVTjBSVmNzUlVGQlQxQXNUVUZCVVVvc1JVRkJUVWtzVFVGRGNrSlBMRVZCUVU5cllpeE5RVUZSTjJJc1JVRkJUVFppTEU5QlJXaENiR0lzUlVGVVZDeERRWFkzUnpSQ1RpeEpRVU51UW05aUxFVkJRMGdzVDBGQlQwc3NSMEZCVlhwaUxFVkJRVTlOTEU5QlJYSkNMRU5CUTB3c1NVRkJTVzlpTEVWQlFVMURMRWRCUVU4ellpeEhRVU5pTkdJc1JVRkJVMFlzUjBGQlR6TnJRaXhIUVVGWE1tdENMRWRCUVU4eGEwSXNSVUZGZEVNc1IwRkJTVFprTEVkQlFWTTNWU3hIUVVOWUxFOUJRVTgyWWl4SFFVRlpOMklzUlVGQlQyOWlMRWRCUlRWQ0xFZEJRVWxOTEVkQlFVOTBhMElzUjBGQllYTnJRaXhIUVVGUGJHeENMRWRCUVZsdmJFSXNTVUZCVnpOYUxFZEJSWEJFTEVkQlJFRXpRaXhGUVVGVksyRXNSMEZCVlU4c1JVRkJWU3hIUVVGTFJTeEhRVUZuUWpsaUxFbEJRemxEYjJJc1JVRkRTQ3hQUVVGUFF5eEZRVEp0UldZc1UwRkJkVUoyYVVJc1JVRkJVVzFLTEVkQlF6ZENMRTlCUVU5dFdTeEhRVUZYZEdoQ0xFVkJRVkZwYWtJc1IwRkJZV3BxUWl4SFFVRlRiVW9zUjBGRWJFUXNRMEV4YlVVd1FtcERMRVZCYmtneFFpeFRRVUZ6UW1sRExFVkJRVkZ1U2l4SFFVTTFRaXhQUVVGUGJVb3NSMEZCVlcxWkxFZEJhMGh0UTNCaExFVkJiRWhvUW1kakxFZEJhMGhuUW1oakxFZEJiRWhCYVVNc1IwRkVkRVFzUTBGdFNEaERNMElzU1VFNGJFVTVReXhUUVVGeFFuaElMRVZCUVZGdFNpeEhRVU16UWl4UFFVRlBiVmtzUjBGQlYzUm9RaXhGUVVGUmJXcENMRWRCUVZkdWFrSXNSMEZCVTIxS0xFZEJSR2hFTEVOQk4yeEZkMEpxUXl4RlFVRlBiV0VzUjBGQlZ6ZGFMRVZCUVZGT0xGRkJSWFpETEVOQlEwd3NTVUZCUzNoRUxFZEJRV05yWml4SFFVTnFRaXhQUVVGUGVsb3NSVUZCVTJwRExFVkJRVkVzUjBGRk1VSk5MRVZCY3poSFRpeFRRVUYzUWpKQ0xFVkJRVkY1V2l4RlFVRkxUaXhIUVVOdVF5eEpRWFpzUkcxQ1l5eEZRV0pCUXl4RlFVTm1OMklzUlVGdGJVUkJPR0lzUlVGQlQyNWhMRVZCUVU5eldpeFpRVU5zUWl4UFFVRlJSeXhIUVVOT0xFdEJRVXM1YWtJc1JVRkRTQ3hQUVVGUGVXdENMRWRCUVdsQ2NHRXNSMEZGTVVJc1MwRkJTM1JNTEVWQlEwd3NTMEZCUzBNc1JVRkRTQ3hQUVVGUExFbEJRVWwzYkVJc1IwRkJUVzVoTEVkQlJXNUNMRXRCUVV0d1N5eEZRVU5JTEU5Qk1XNUVUaXhUUVVGMVFubHJRaXhGUVVGVmJFSXNSMEZETDBJc1NVRkJTVzFDTEVWQlFWTnVRaXhGUVVGVGFVSXNSMEZCYVVKRExFVkJRVk5ETEZGQlFWVkVMRVZCUVZORExFOUJRMjVGTEU5QlFVOHNTVUZCU1VRc1JVRkJVMllzV1VGQldXZENMRVZCUVZGRUxFVkJRVk5GTEZkQlFWbEdMRVZCUVZOSExGbEJSbmhGTEVOQk1HNUVNa0o0WVN4RlFVRlJiVm9zUjBGRkwwSXNTMEZCUzNScVFpeEZRVUZaTEV0QlFVdERMRVZCUTNSQ0xFdEJRVXRETEVWQlFWTXNTMEZCUzBNc1IwRkJWU3hMUVVGTFF5eEhRVU5zUXl4TFFVRkxReXhIUVVGVkxFdEJRVXRETEVkQlFXbENMRXRCUVV0RExFZEJRVmNzUzBGQlMwTXNSMEZEZUVRc1QwRkJUMjlyUWl4SFFVRm5RbnBoTEVWQlFWRnRXaXhIUVVWcVF5eExRVUZMYm10Q0xFVkJRMGdzVDBGQlR5eEpRVUZKYld4Q0xFVkJSV0lzUzBGQlMyeHNRaXhGUVVOTUxFdEJRVXROTEVWQlEwZ3NUMEZCVHl4SlFVRkpOR3RDTEVWQlFVdHVZU3hIUVVWc1FpeExRVUZMTTBzc1JVRkRTQ3hQUVRWdVJFRm5TaXhGUVVGVExFbEJSRTAyWWl4RlFUWnVSRWxzWVN4SFFUVnVSRU56V2l4WlFVRlpXU3hGUVVGUGNtcENMRTlCUVZGdFFpeEhRVUZSY1Zrc1MwRkJTelpLTEV0QlEzcEVOVXdzVlVGQldUUk1MRVZCUVU4MVRDeFZRVU51UW1wUkxFVkJORzVFVEN4TFFVRkxMMGtzUlVGRFNDeFBRVUZQTEVsQlFVazJhMElzUlVGRllpeExRVUZMTTJ0Q0xFVkJRMGdzVDBGMGJrUmxlV3RDTEVWQmMyNUVTV3BoTEVWQmNtNUVhRUl3VlN4SFFVRm5RbkphTEVkQlFVOXhXaXhIUVVGamJGZ3NTMEZCUzNsakxFbEJRVmNzU1VGeGJFUTVSQ3hEUVhRNFJ6aENiR01zUlVGQlR6QmlMRVZCUVV0T0xFbEJTWGhEUkN4SlFVRlZRU3hGUVVGUkxFbEJRVWwwUXl4SlFVTjBRaXhKUVVGSk9FUXNSVUZCVlhoQ0xFVkJRVTFTTEVsQlFVa3pZU3hIUVVONFFpeEhRVUZKTW1Nc1JVRkRSaXhQUVVGUFFTeEZRVVZVZUVJc1JVRkJUUzlMTEVsQlFVbHdVU3hGUVVGUFRTeEhRVVZpY2tJc1IwRkJUV1VzUjBGRFVrRXNSVUZCVFRaUUxGRkJRVkVzVTBGQlV5dE5MRWRCUTNKQ2RHTXNSVUZCVDNOWkxFbEJRVWx2UXl4SFFVRlZORUlzUlVGQlZUTkNMRVZCUVZORExFVkJRVmt3UWl4RlFVRlZOV01zUlVGQlQyMWlMRTFCUlRsRWRHTXNSMEZCVFcxQ0xFbEJRMlpCTEVWQlFVMDJVQ3hSUVVGUkxGTkJRVk1yVFN4RlFVRlZibUlzUjBGREwwSnVRaXhGUVVGUE9GQXNTVUZCU1ROUExFVkJRVXQxV2l4SFFVRlZORUlzUlVGQlZUTkNMRVZCUVZORExFVkJRVmw2V2l4RlFVRkxla0lzUlVGQlQyMWlMRTFCU1hwRkxFbEJTVWt4V1N4RlFVRlJkMWNzUlVGQlVYWnJRaXhIUVVwTU5HMUNMRVZCUTFaRUxFVkJRVk4zUWl4SFFVRmxReXhIUVVONFFucENMRVZCUVZOWExFZEJRVk42U2l4SlFVVnJRblpUTEVkQlUzcERMRTlCVWtGRExFZEJRVlYzUXl4SFFVRlRla01zUlVGQlR5eFRRVUZUTkdNc1JVRkJWVzVpTEVkQlEzWkRaMElzU1VGRlJtMWhMRVZCUVZjMVl5eEZRVVJZZVVJc1JVRkJUVzFpTEVsQlNWSTVReXhIUVVGWmVGb3NSVUZCVVcxQ0xFVkJRVXQxV2l4SFFVRlZORUlzUlVGQlZUTkNMRVZCUVZORExFVkJRVmw2V2l4RlFVRkxla0lzUlVGQlQyMWlMRTFCUlhwRk4yRXNSVUY1UWxRc1UwRkJVM2xqTEVkQlFXVTVZU3hGUVVGUmJrb3NSVUZCVVRKS0xFZEJRM1JETEVsQlFVbHFSQ3hGUVVGVGFVUXNSVUZCVFdwRUxFOUJRMjVDTEVkQlFXTXNUVUZCVm5sRExFVkJRMFlzVDBGQlVYcERMRVZCUjFZc1NVRkVRWGxETEVWQlFWTXpSU3hIUVVGUE1rVXNSMEZEVkhwRExFdEJRVlVzUTBGRFppeEpRVUZKYVVNc1JVRkJUV2RDTEVWQlFVMXFSQ3hIUVVOYVZ5eEZRVUZaY2tnc1JVRkJUekpKTEVkQlEyNUNla0lzUlVGQlVXbERMRVZCUVU5U0xFZEJSVzVDTEVkQlFVdDZRaXhKUVVGVmRFd3NTMEZCWlN0TkxFdEJRVTlSTEV0QlFXRTVRaXhGUVVGVlNDeEhRVU14UkN4UFFVRkJMRVZCUjBvc1QwRkJRU3hGUVdGR0xGTkJRVk5uWkN4SFFVRlZNMlFzUlVGQlRUUmtMRVZCUVUweFpDeEhRVU0zUWl4SFFVRnRRaXh0UWtGQlVrWXNSVUZEVkN4TlFVRk5MRWxCUVVselV5eEhRVUZWTDJNc1IwRkZkRUlzVDBGQlQzbG1MRWRCUVZjc1YwRkJZV2hXTEVWQlFVdEVMRTFCUVUweFN5eEZRVUZYTmtzc1NVRkJWVEJrTEVkQlkycEZMRk5CUVZORExFZEJRV1YyWkN4RlFVRlBiVUlzUlVGQlVXcENMRVZCUVZWaExFZEJReTlETEVsQlFVbFlMRWRCUVZNc1JVRkRWRzlrTEVWQlFWYzFZeXhIUVVOWU5tTXNSMEZCUVVFc1JVRkRRVFZrTEVWQlFWTkhMRVZCUVUxSUxFOUJRMlpqTEVWQlFWTXNSMEZEVkN0akxFVkJRV1YyWXl4RlFVRlBkRUlzVDBGRk1VSXNTVUZCUzBFc1JVRkRTQ3hQUVVGUFl5eEZRVVZNVkN4SlFVTkdhVUlzUlVGQlUwZ3NSMEZCVTBjc1JVRkJVWGxDTEVkQlFWVXhReXhMUVVWc1EyRXNSMEZEUm5sakxFVkJRVmN4WXl4SFFVTllNbU1zUjBGQlFVRXNSMEZGVDNSakxFVkJRVTkwUWl4UlFVRlZOMHNzU1VGRGVFSjNiMElzUlVGQlYzcGhMRWRCUTFnd1lTeEhRVUZCUVN4RlFVTkJkR01zUlVGQlV5eEpRVUZKTkZnc1IwRkJVelZZTEVsQlJYaENkMk1zUlVGRFFTeFBRVUZUZG1Rc1JVRkJVVkFzUjBGQlVTeERRVU4yUWl4SlFVRkpVU3hGUVVGUlRDeEZRVUZOU1N4SFFVTmtkMlFzUlVGQmRVSXNUVUZCV2pGa0xFVkJRVzFDUnl4RlFVRlJTQ3hGUVVGVFJ5eEhRVWR1UkN4SFFVUkJRU3hGUVVGVFZTeEhRVUYzUWl4SlFVRldWaXhGUVVGbFFTeEZRVUZSTEVWQlF6RkRiMlFzUjBGQldVY3NSMEZCWVVFc1JVRkJWU3hEUVVWeVF5eEpRVVJCTEVsQlFVbERMRVZCUVdOSUxFVkJRMWhITEV0QlEwd3NSMEZCU1RGakxFVkJRVTh3WXl4TFFVRnBRa1FzUlVGRE1VSXNVMEZCVTBRc1JVRkhZbWhrTEVWQlFVOXJXaXhMUVVGTGVGb3NVVUZGU20xa0xFVkJRVk55WXl4RlFVRlJlV01zUlVGQlZUZGpMRWxCUTI1RFNpeEZRVUZQYTFvc1MwRkJTM2hhTEVkQlIyaENMRTlCUVU5TkxFVkJhbXREVkhkWExFZEJRVTh5Unl4cFFrRkJiVUlzUTBGUmVFSkRMRTlCUVZVeGEwSXNSMEZSVmpKclFpeFRRVUZaTVd0Q0xFZEJVVm95YTBJc1dVRkJaVEZyUWl4SFFWRm1NbXRDTEZOQlFWa3NSMEZSV2tNc1VVRkJWeXhEUVZGVU4wMHNSVUZCU3paR0xFdEJTMVJCTEVkQlFVOXFSaXhWUVVGWk1FWXNSMEZCVnpGR0xGVkJRemxDYVVZc1IwRkJUMnBHTEZWQlFWVXdTaXhaUVVGamVrVXNSMEZGTDBKSkxFZEJRV055Uml4VlFVRlpkVVlzUjBGQlYwY3NSMEZCVnpGR0xGZEJRMmhFY1VZc1IwRkJZM0pHTEZWQlFWVXdTaXhaUVVGamNrVXNSMEZ6U0hSRFJDeEhRVUZaY0VZc1ZVRkJXWFZHTEVkQlFWZEhMRWRCUVZjeFJpeFhRVU01UTI5R0xFZEJRVmx3Uml4VlFVRlZNRW9zV1VGQlkzUkZMRWRCYjBkd1EyMUNMRWRCUVV0MlJ5eFZRVUZWZVVjc1RVRjJSV1lzVjBGRFJXSXNTMEZCUzJ0Q0xGTkJRVmN4UXl4SFFVRmxRU3hIUVVGaExFMUJRVkVzUjBGRGNFUjNRaXhMUVVGTE4wZ3NTMEZCVHl4SFFYTkZaSGRKTEVkQlFVdDJSeXhWUVVGclFtdE5MRTlCZWtSMlFpeFRRVUZ2UW5SakxFZEJRMnhDTEVsQlFVbHVRaXhGUVVGVGJWZ3NTMEZCU3pkVkxFbEJRVWx1UWl4WFFVRmxaMWNzUzBGQlMydENMRk5CUVZOc1dDeEhRVVZ1UkN4UFFVUkJaMWNzUzBGQlN6ZElMRTFCUVZGMFVDeEZRVUZUTEVWQlFVa3NSVUZEYmtKQkxFZEJkVVJVT0Znc1IwRkJTM1pITEZWQlFWVTRTU3hKUVRORFppeFRRVUZwUW14YUxFZEJRMllzU1VGQlNYRllMRVZCUVU5eVFpeExRVUZMYTBJc1UwRkRhRUlzUjBGQlNURkRMRWRCUVdNc1EwRkRhRUlzU1VGQlNUTldMRVZCUVZOM1dTeEZRVUZMY2xnc1IwRkRiRUlzVFVFek5FUmxMRGhDUVRJMFJGSnVRaXhGUVVFMFFqVk1MRVZCUVZrMFRDeEZRVVZxUkN4UFFVRlBObElzUjBGQlpURlRMRXRCUVV0eFdpeEZRVUZOY2xnc1IwRkJUM0ZZTEVWQlFVdHlXQ3hIUVVGUEwwMHNSMEZ6UTNSRU1HcENMRWRCUVV0MlJ5eFZRVUZWYWxBc1NVRXhRbVlzVTBGQmFVSnVRaXhIUVVObUxFbEJRVWx4V0N4RlFVRlBja0lzUzBGQlMydENMRk5CUTJoQ0xFOUJRVTh4UXl4SFFVRm5RalpETEVWQlFVdHlXQ3hMUVVGVEwwMHNSVUZCWVhsa0xFZEJRV1V4VXl4TFFVRkxjVm9zUlVGQlRYSllMRWxCZVVJNVJUSlhMRWRCUVV0MlJ5eFZRVUZWZWtJc1NVRmFaaXhUUVVGcFFqTlBMRVZCUVV0NlFpeEhRVU53UWl4SlFVRkpPRmtzUlVGQlQzSkNMRXRCUVV0clFpeFRRVWRvUWl4UFFVWkJiRUlzUzBGQlN6ZElMRTFCUVZFMlNDeExRVUZMTjFVc1NVRkJTVzVDTEVkQlFVOHNSVUZCU1N4RlFVTnFRM0ZZTEVWQlFVdHlXQ3hIUVVGUmQxVXNTVUZCWjBKcVZ5eEpRVUZWZEV3c1JVRXpOa1IwUWl3MFFrRXlOa1J2UkhOTUxFVkJRemxFZVZnc1RVRjVTRlJsTEVkQlFWVXpSeXhWUVVGVmVVY3NUVUZ3Um5CQ0xGZEJRMFZpTEV0QlFVdHJRaXhUUVVGWExFZEJRMmhDYkVJc1MwRkJTemRJTEV0QlFVOHNSMEZ0Um1RMFNTeEhRVUZWTTBjc1ZVRkJhMEpyVFN4UFFYWkZOVUlzVTBGQmVVSjBZeXhIUVVOMlFpeEpRVUZKY1Znc1JVRkJUM0pDTEV0QlFVdHJRaXhUUVVOYU5Wa3NSVUZCVVdsaExFZEJRV0ZzUWl4RlFVRk5jbGdzUjBGRkwwSXNVVUZCU1RGQ0xFVkJRVkVzU1VGSlVrRXNSMEZFV1N0WkxFVkJRVXQwV2l4UFFVRlRMRVZCUlRWQ2Mxb3NSVUZCUzJ0R0xFMUJSVXg2U3l4SFFVRlBPVlFzUzBGQlMzRmFMRVZCUVUwdldTeEZRVUZQTEV0QlJYcENNRmdzUzBGQlN6ZElMRXRCUTBFc1MwRXdSRlEwU1N4SFFVRlZNMGNzVlVGQlZUaEpMRWxCT1VOd1FpeFRRVUZ6UW14YUxFZEJRM0JDTEVsQlFVbHhXQ3hGUVVGUGNrSXNTMEZCUzJ0Q0xGTkJRMW8xV1N4RlFVRlJhV0VzUjBGQllXeENMRVZCUVUxeVdDeEhRVVV2UWl4UFFVRlBNVUlzUlVGQlVTeEZRVUZKY2t3c1JVRkJXVzlyUWl4RlFVRkxMMWtzUjBGQlR5eEpRVEpETjBONVdTeEhRVUZWTTBjc1ZVRkJWV3BRTEVsQkwwSndRaXhUUVVGelFtNUNMRWRCUTNCQ0xFOUJRVTkxV1N4SFFVRmhka01zUzBGQlMydENMRk5CUVZWc1dDeEpRVUZSTEVkQkswSTNReXRYTEVkQlFWVXpSeXhWUVVGVmVrSXNTVUZzUW5CQ0xGTkJRWE5DTTA4c1JVRkJTM3BDTEVkQlEzcENMRWxCUVVrNFdTeEZRVUZQY2tJc1MwRkJTMnRDTEZOQlExbzFXU3hGUVVGUmFXRXNSMEZCWVd4Q0xFVkJRVTF5V0N4SFFWRXZRaXhQUVU1Sk1VSXNSVUZCVVN4TFFVTlNNRmdzUzBGQlN6ZElMRXRCUTFCclNpeEZRVUZMVlN4TFFVRkxMRU5CUVVNdldDeEZRVUZMZWtJc1MwRkZhRUk0V1N4RlFVRkxMMWtzUjBGQlR5eEhRVUZMUXl4RlFVVmFlVmdzVFVFeVIxUm5RaXhIUVVGVE5VY3NWVUZCVlhsSExFMUJkRVZ1UWl4WFFVTkZZaXhMUVVGTE4wZ3NTMEZCVHl4RlFVTmFOa2dzUzBGQlMydENMRk5CUVZjc1EwRkRaSE5HTEV0QlFWRXNTVUZCU1RkR0xFZEJRMXA2U1N4SlFVRlBMRWxCUVV0clJ5eEpRVUZQTWtNc1NVRkRia0pvU2l4UFFVRlZMRWxCUVVrMFNTeExRV3RGYkVKTExFZEJRVk0xUnl4VlFVRnJRbXROTEU5QmNrUXpRaXhUUVVGM1FuUmpMRWRCUTNSQ0xFbEJRVWx1UWl4RlFVRlROR1FzUjBGQlYzcEhMRXRCUVUxb1Z5eEhRVUZoYzJNc1QwRkJSWFJqTEVkQlJUZERMRTlCUkVGblZ5eExRVUZMTjBnc1RVRkJVWFJRTEVWQlFWTXNSVUZCU1N4RlFVTnVRa0VzUjBGdFJGUnRXU3hIUVVGVE5VY3NWVUZCVlRoSkxFbEJka051UWl4VFFVRnhRbXhhTEVkQlEyNUNMRTlCUVU5NVl5eEhRVUZYZWtjc1MwRkJUV2hYTEVkQlFVdHJXaXhKUVVGSmJGb3NTVUYxUTI1RFoxZ3NSMEZCVXpWSExGVkJRVlZxVUN4SlFUTkNia0lzVTBGQmNVSnVRaXhIUVVOdVFpeFBRVUZQZVdNc1IwRkJWM3BITEV0QlFVMW9WeXhIUVVGTGJVSXNTVUZCU1c1Q0xFbEJNa0p1UTJkWUxFZEJRVk0xUnl4VlFVRlZla0lzU1VGa2JrSXNVMEZCY1VJelR5eEZRVUZMZWtJc1IwRkRlRUlzU1VGQlNUaFpMRVZCUVU5dlJpeEhRVUZYZWtjc1MwRkJUV2hYTEVkQlEzaENiVThzUlVGQlQydEtMRVZCUVV0c1NpeExRVWxvUWl4UFFVWkJhMG9zUlVGQlN6RkpMRWxCUVVrelR5eEZRVUZMZWtJc1IwRkRaSGxZTEV0QlFVczNTQ3hOUVVGUmEwb3NSVUZCUzJ4S0xFMUJRVkZCTEVWQlFVOHNSVUZCU1N4RlFVTTVRalpJTEUxQk1rUlVhVUlzUjBGQlV6ZEhMRlZCUVZVclJ5eEpRVUZOUml4SFFVRlROMGNzVlVGQlZUSklMRXRCYmtJMVF5eFRRVUZ4UW5oYUxFZEJSVzVDTEU5QlJFRjVXQ3hMUVVGTGEwSXNVMEZCVTNaSkxFbEJRVWx3VVN4RlFXcHlSVVFzTmtKQmEzSkZWbmxZTEUxQmEwSlVhVUlzUjBGQlV6ZEhMRlZCUVZWcVVDeEpRVTV1UWl4VFFVRnhRalZETEVkQlEyNUNMRTlCUVU5NVdDeExRVUZMYTBJc1UwRkJVeTlXTEVsQlFVazFReXhKUVhWSE0wSTJXU3hIUVVGTmFFZ3NWVUZCVlhsSExFMUJNMFZvUWl4WFFVTkZZaXhMUVVGTGEwSXNVMEZCVnl4SlFVRkpTQ3hIUVVOd1FtWXNTMEZCU3pkSUxFdEJRVThzUjBFd1JXUnBTaXhIUVVGTmFFZ3NWVUZCYTBKclRTeFBRVGxFZUVJc1UwRkJjVUowWXl4SFFVTnVRaXhKUVVGSmNWZ3NSVUZCVDNKQ0xFdEJRVXRyUWl4VFFVTmFjbGtzUlVGQlUzZFpMRVZCUVdGcFJpeFBRVUZGZEdNc1IwRkhOVUlzVDBGRVFXZFhMRXRCUVVzM1NDeExRVUZQYTBvc1JVRkJTMnhLTEV0QlExWjBVQ3hIUVRCRVZIVlpMRWRCUVUxb1NDeFZRVUZWT0Vrc1NVRTVRMmhDTEZOQlFXdENiRm9zUjBGRGFFSXNUMEZCVDJkWExFdEJRVXRyUWl4VFFVRlRaME1zU1VGQlNXeGFMRWxCT0VNelFtOVlMRWRCUVUxb1NDeFZRVUZWYWxBc1NVRnNRMmhDTEZOQlFXdENia0lzUjBGRGFFSXNUMEZCVDJkWExFdEJRVXRyUWl4VFFVRlRMMVlzU1VGQlNXNUNMRWxCYTBNelFtOVlMRWRCUVUxb1NDeFZRVUZWZWtJc1NVRnlRbWhDTEZOQlFXdENNMDhzUlVGQlMzcENMRWRCUTNKQ0xFbEJRVWs0V1N4RlFVRlBja0lzUzBGQlMydENMRk5CUTJoQ0xFZEJRVWxITEdGQlFXZENUaXhIUVVGWExFTkJRemRDTEVsQlFVa3lSaXhGUVVGUmNrWXNSVUZCUzBnc1UwRkRha0lzU1VGQlN6bERMRWxCUVZGelNTeEZRVUZOTTJVc1QwRkJVemRMTEVWQlFXMUNMRVZCUnpkRExFOUJSa0YzY0VJc1JVRkJUVE5GTEV0QlFVc3NRMEZCUXk5WUxFVkJRVXQ2UWl4SlFVTnFRbmxZTEV0QlFVczNTQ3hQUVVGVGEwb3NSVUZCUzJ4S0xFdEJRMW8yU0N4TFFVVlVjVUlzUlVGQlQzSkNMRXRCUVV0clFpeFRRVUZYTEVsQlFVbEdMRWRCUVZNd1JpeEhRVWwwUXl4UFFVWkJja1lzUlVGQlN6RkpMRWxCUVVrelR5eEZRVUZMZWtJc1IwRkRaSGxZTEV0QlFVczNTQ3hMUVVGUGEwb3NSVUZCUzJ4S0xFdEJRMVkyU0N4TlFYTmpWQ3hKUVVGSmVVTXNSMEZCVjJ0RkxFZEJRV1ZETEVsQlZURkNReXhIUVVGblFrWXNSMEZCWlVjc1NVRkJRVUVzUjBGWGJrTXNVMEZCVTBNc1IwRkJWV3BrTEVWQlFWbHdRaXhIUVVNM1FpeEpRVUZKUnl4SFFVRkJRU3hGUVV0S0xFOUJTa0UwV2l4SFFVRlRNMWtzUlVGQldTeFRRVUZUZGtJc1JVRkJUMFFzUlVGQlQzZENMRWRCUlRGRExFOUJSRUZxUWl4SlFVRlhTQ3hGUVVGVlNDeEZRVUZQUkN4RlFVRlBkMElzUzBGSE9VSnFRaXhGUVdGVUxGTkJRVk50WlN4SFFVRmhPV1VzUlVGQlQwVXNSVUZCVldFc1IwRkpja01zU1VGSVFTeEpRVUZKV0N4SFFVRlRMRVZCUTFSUUxFVkJRVk5ITEVWQlFVMUlMRk5CUlZaUExFVkJRVkZRTEVkQlFWRXNRMEZEZGtJc1NVRkJTVkVzUlVGQlVVd3NSVUZCVFVrc1IwRkRaSEZETEVWQlFWVjJReXhGUVVGVFJ5eEhRVVYyUWl4SFFVRmxMRTFCUVZodlF5eEpRVUZ2UW0xaUxFbEJRV0UzYjBJc1JVRkROVUl3VGl4SFFVRlpRU3hKUVVGWmMyTXNSMEZCVTNSakxFZEJRMnhETVVJc1JVRkJWekJDTEVWQlFWTnRZaXhKUVVVeFFpeEpRVUZKUVN4RlFVRlhibUlzUlVGRFdEbENMRVZCUVZOT0xFVkJSMnBDTEU5QlFVOU5MRVZCZFVOVUxGTkJRVk54WlN4SFFVRlhjR1FzUlVGQldYQkNMRWRCUXpsQ0xFbEJRVWxITEVWQlFWTXNSMEZOWWl4UFFVeEJORm9zUjBGQlV6TlpMRVZCUVZrc1UwRkJVM1pDTEVWQlFVOUVMRVZCUVU5M1FpeEhRVU4wUTNCQ0xFVkJRVlZJTEVWQlFVOUVMRVZCUVU5M1FpeEpRVU14UW1wQ0xFVkJRVTlyV2l4TFFVRkxlRm9zUzBGSFZFMHNSVUZqVkN4VFFVRlRjMlVzUjBGQldXcG1MRVZCUVU5clppeEZRVUZQTVdVc1JVRkJWekpsTEVWQlFWVjRaU3hIUVVOMFJDeEpRVUZKVUN4SFFVRlRMRVZCUTFSUUxFVkJRVk5ITEVWQlFVMUlMRTlCUzI1Q0xFbEJTRUZYTEVsQlFXTkJMRVZCUVZrMFpTeEpRVU14UW5wbExFbEJRVmRCTEVWQlFWTXNUVUZGV0ZBc1JVRkJVVkFzUjBGQlVTeERRVU4yUWl4SlFVRkpVU3hGUVVGUlRDeEZRVUZOU1N4SFFVTmtPR1VzUlVGQlVTeEhRVUZMTVdVc1JVRkJWVWdzUjBGRGNrSTJaU3hGUVVGUkxFVkJSVlpFTEVkQlFWazFaU3hGUVVGUE5tVXNSVUZCVVN4RlFVRkhNV1VzUlVGQlZ6SmxMRVZCUVZWNFpTeEhRVVZ1UkU4c1IwRkJWVkFzUlVGQlVVNHNSMEZGVmpobExFbEJRMVo0WlN4RlFVRlBRU3hGUVVGUFpDeFJRVUZWVVN4SFFVYzFRaXhQUVVGUFRTeEZRV05VTEVsQlFVa3daU3hIUVVGVlF5eExRVmxXUXl4SFFVRmxSQ3hKUVVGQlFTeEhRVlZ1UWl4VFFVRlRXaXhIUVVGWGNHTXNSVUZCVVhCRExFZEJRekZDTEU5QlFVOXZReXhIUVVGVksyTXNSMEZCVVM5akxFVkJRVkZ3UXl4RlFVRlZNRk1zU1VGWE4wTXNVMEZCVTJkTkxFZEJRV2RDZEdNc1JVRkJVWEJETEVkQlF5OUNMRTlCUVU5dlF5eEhRVUZWYVdRc1IwRkJZV3BrTEVWQlFWRndReXhGUVVGVk1GTXNTVUZaYkVRc1UwRkJVelJOTEVkQlFXTnNaQ3hGUVVGUlVTeEhRVU0zUWl4UFFVRlBja01zUjBGQldYRkRMRVZCUVU4c1UwRkJVMmhDTEVkQlEycERMRTlCUVU4eVpDeEhRVUZYYm1Rc1JVRkJUMUlzVFVGWk4wSXNVMEZCVXpSa0xFZEJRVkZ3WkN4RlFVRlJjV1FzUjBGTmRrSXNTVUZJUVN4SlFVRkpkbVlzUlVGQlVTeEZRVU5TVUN4SFFVaEtPR1lzUlVGQlQwTXNSMEZCVTBRc1JVRkJUWEprTEVsQlIwcDZReXhQUVVWRUxFMUJRVlo1UXl4SFFVRnJRbXhETEVWQlFWRlFMRWRCUXk5Q2VVTXNSVUZCVTBFc1JVRkJUM1ZrTEVkQlFVMUdMRVZCUVV0MlppeFBRVVUzUWl4UFFVRlJRU3hIUVVGVFFTeEhRVUZUVUN4RlFVRlZlVU1zUlVGQlUzWk9MRVZCWXk5RExGTkJRVk1yY1VJc1IwRkJaWGhrTEVWQlFWRjVaQ3hGUVVGVlF5eEhRVU40UXl4SlFVRkpjbVlzUlVGQlUyOW1MRVZCUVZONlpDeEhRVU4wUWl4UFFVRlBLMVVzUjBGQlVTOVZMRWRCUVZVelFpeEZRVUZUVHl4SFFVRlZVQ3hGUVVGUmNXWXNSVUZCV1RGa0xFbEJWV3hGTEZOQlFWTXlaQ3hIUVVGWE5XWXNSMEZEYkVJc1QwRkJZU3hOUVVGVVFTeEZRVU5MUVN4SlFVRlZkRXdzUlVGQldXZEVMRVZCUVdWUUxFVkJSWFJEZVdNc1NVRkJhMEpCTEUxQlFXdENkRmNzUjBGQlR6QkRMRWRCY1RKR2NrUXNVMEZCYlVKQkxFZEJRMnBDTEVsQlFVazJaaXhGUVVGUk1VNHNSMEZCWlRGVExFdEJRVXRQTEVWQlFVODBWQ3hKUVVOdVF6aElMRVZCUVUweFlpeEZRVUZOTkZRc1NVRkZhRUlzU1VGRFJUVlVMRVZCUVUwMFZDeEpRVUZyUW14bUxFVkJRM2hDTEVsQlFVbHZja0lzUjBGQlFVRXNSVUZEU2l4TlFVRlBkbWhDTEVsQlJWUXNTVUZCU1N0Q0xFVkJRVk50VXl4SFFVRnhRbWhVTEV0QlFVdFBMRWRCVVhaRExFOUJVRWs0Wml4SlFVTkZSQ3hGUVVOR04yWXNSVUZCVFRSVUxFbEJRV3RDT0Vnc1UwRkZha0l4WWl4RlFVRk5ORlFzUzBGSFZuUlVMRVZCYWtKVUxFTkJjREpHWjBKT0xFZEJlVFJIYUVJc1UwRkJkMEpCTEVkQlEzUkNMRTlCUVU5NVV5eEhRVUZ4UW1oVUxFdEJRVXRQTEVkQlJHNURMRU5CZURSSGNVSkJMRWRCV1hKQ0xGTkJRVk1yWml4SFFVRlBMMllzUlVGQlQyZG5RaXhIUVVOeVFpeFBRVUZQYUdkQ0xFVkJRVkZuWjBJc1JVRlhha0lzVTBGQlUwTXNSMEZCVVdobExFVkJRVkZTTEVkQlEzWkNMRTlCUVdsQ0xFMUJRVlpSTEVkQlFXdENhMUVzUjBGQlpURlRMRXRCUVV0M1F5eEZRVUZSVWl4SFFWZDJSQ3hUUVVGVGVXVXNSMEZCVldwbExFVkJRVkZTTEVkQlEzcENMRTlCUVdsQ0xFMUJRVlpSTEVkQlFXdENVaXhMUVVGUGJrVXNSMEZCVHpKRkxFZEJNRUo2UXl4VFFVRlRhMlVzUjBGQmFVSkRMRVZCUVZGMlowSXNSVUZCVldFc1IwRlRNVU1zU1VGU1FTeEpRVUZKZVdNc1JVRkJWM3BqTEVWQlFXRkVMRWRCUVc5Q1JpeEhRVU0xUTJZc1JVRkJVelJuUWl4RlFVRlBMRWRCUVVjMVowSXNUMEZEYmtJMlowSXNSVUZCV1VRc1JVRkJUelZuUWl4UFFVTnVRamhuUWl4RlFVRlhSQ3hGUVVOWVJTeEZRVUZUTTJZc1IwRkJUWGxtTEVkQlEyWkhMRVZCUVZsRExFVkJRVUZCTEVWQlExcHVaMElzUlVGQlV5eEhRVVZPWjJkQ0xFdEJRVmtzUTBGRGFrSXNTVUZCU1ROblFpeEZRVUZSZVdkQ0xFVkJRVTlGTEVkQlEyWkJMRWRCUVZsNlowSXNTVUZEWkVZc1JVRkJVV2RDTEVkQlFWTm9RaXhGUVVGUE5FTXNSMEZCVlRGRExFdEJSWEJETW1kQ0xFVkJRVmx3VEN4SFFVRlZlbFlzUlVGQlRVZ3NUMEZCVVdkb1FpeEhRVU53UTBRc1JVRkJUMFFzU1VGQllUVm1MRWxCUVdWaUxFZEJRV0ZNTEVkQlFWVXNTMEZCVDBjc1JVRkJUVWdzVVVGQlZTeExRVU0zUlN4SlFVRkphMW9zUjBGQlV6UklMRWRCUVZrelowSXNSMEZEZWtKcVRDeEZRVVZPYVV3c1JVRkJVWGxuUWl4RlFVRlBMRWRCUldZc1NVRkJTWEpuUWl4SFFVRlRMRVZCUTFReVowSXNSVUZCVDBnc1JVRkJUeXhIUVVWc1FtcEVMRVZCUTBFc1QwRkJVM1prTEVWQlFWRlFMRWRCUVZWakxFVkJRVTlrTEU5QlFWTm5hRUlzUjBGQlZ5eERRVU53UkN4SlFVRkplR2RDTEVWQlFWRk1MRVZCUVUxSkxFZEJRMlIzWkN4RlFVRlhNV1FzUlVGQlYwRXNSVUZCVTBjc1IwRkJVMEVzUlVGSE5VTXNSMEZFUVVFc1JVRkJVMVVzUjBGQmQwSXNTVUZCVmxZc1JVRkJaVUVzUlVGQlVTeEpRVU40UXpCblFpeEZRVU5GYUdVc1IwRkJVMmRsTEVWQlFVMXVSQ3hIUVVObVNpeEZRVUZUTjJNc1JVRkJVV2xrTEVWQlFWVTNZeXhKUVVNMVFpeERRVVZNTEVsQlJFRTBaaXhGUVVGWFJDeEpRVU5HUXl4SFFVRlZMRU5CUTJwQ0xFbEJRVWt6WkN4RlFVRlJOR1FzUlVGQlQwUXNSMEZEYmtJc1MwRkJUVE5rTEVWQlEwVkVMRWRCUVZORExFVkJRVTgwWVN4SFFVTm9Ra29zUlVGQlUybEVMRVZCUVU5RkxFZEJRVmN2UXl4RlFVRlZOMk1zU1VGRk0wTXNVMEZCVXpSakxFVkJSMVJ2UkN4SFFVTkdRU3hGUVVGTGJFZ3NTMEZCU3l0RUxFZEJSVnBxWkN4RlFVRlBhMW9zUzBGQlMzaGFMRWxCUjJoQ0xFOUJRVTlOTEVWQkswSlVMRk5CUVZOeFowSXNSMEZCVnpGbExFVkJRVkZ4WkN4RlFVRk5MMllzUjBGSGFFTXNTVUZCU1VZc1JVRkJhVUlzVDBGRWNrSTBReXhGUVVGVE1tVXNSMEZCVHpObExFVkJSR2hDY1dRc1JVRkJUME1zUjBGQlUwUXNSVUZCVFhKa0xFdEJSVTFCTEVWQlFWTkJMRVZCUVU5MVpDeEhRVUZOY1VJc1IwRkJTM1pDTEV0QlEzWkVMRTlCUVdVc1RVRkJVbXBuUWl4RlFVRmxNMHNzUlVGQldUQkxMRWRCUVUxRExFVkJRVTAwUXl4RlFVRlJNVU1zUjBGVmVFUXNVMEZCVTNWb1FpeEhRVUZuUWpsblFpeEhRVU4yUWl4UFFVRlBLMWNzUjBGQllTOVhMRWxCUVZVMFppeEhRVUZYTldZc1NVRkJWWGhLTEVWQmRVTnlSQ3hUUVVGVGRYRkNMRWRCUVZrdlowSXNSVUZCVDJkblFpeEZRVUZQTDBVc1JVRkJVME1zUlVGQldVTXNSMEZEZEVRc1QwRkJTVzVpTEVsQlFWVm5aMElzU1VGSFJDeE5RVUZVYUdkQ0xFZEJRVEJDTEUxQlFWUm5aMElzU1VGQmJVSnFTaXhIUVVGaEwxY3NTMEZCVnl0WExFZEJRV0ZwU2l4SFFVTndSV2huUWl4SFFVRlZRU3hIUVVGVFoyZENMRWRCUVZWQkxFVkJiVUo0UXl4VFFVRjVRaTlrTEVWQlFWRXJaQ3hGUVVGUEwwVXNSVUZCVTBNc1JVRkJXVGhHTEVWQlFWYzNSaXhIUVVOMFJTeEpRVUZKT0VZc1JVRkJWMnBMTEVkQlFWRXZWU3hIUVVOdVFtbG1MRVZCUVZkc1N5eEhRVUZSWjBvc1IwRkRia0p0UWl4RlFVRlRSaXhGUVVGWGVIRkNMRVZCUVZkcmJFSXNSMEZCVHpGYUxFZEJRM1JEYldZc1JVRkJVMFlzUlVGQlYzcHhRaXhGUVVGWGEyeENMRWRCUVU5eFJTeEhRVXQwUTNGQ0xFZEJTRXBHTEVWQlFWTkJMRWRCUVZVemNVSXNSVUZCVlZrc1JVRkJXU3R3UWl4SlFVZG9RaTl3UWl4RlFVTnlRbXR4UWl4SFFVaEtSaXhGUVVGVFFTeEhRVUZWTlhGQ0xFVkJRVlZaTEVWQlFWbG5jVUlzU1VGSGFFSm9jVUlzUlVGRGNrSnRjVUlzUlVGQldVb3NSMEZCVlVNc1JVRkZNVUlzUjBGQlNVY3NSMEZCWVRGTkxFZEJRVk0xVXl4SFFVRlRMRU5CUTJwRExFbEJRVXMwVXl4SFFVRlRiVXdzUjBGRFdpeFBRVUZCTEVWQlJVWnBRaXhIUVVGQlFTeEZRVU5CU1N4SFFVRkJRU3hGUVVWR0xFZEJRVWxGTEVsQlFXTkdMRVZCUldoQ0xFOUJSRUZzUnl4SlFVRlZRU3hGUVVGUkxFbEJRVWwwUXl4SlFVTmtiMGtzUjBGQldUbG9RaXhIUVVGaE9FTXNSMEZETjBKMVppeEhRVUZaZG1Zc1JVRkJVU3RrTEVWQlFVOHZSU3hGUVVGVFF5eEZRVUZaT0VZc1JVRkJWemRHTEVkQmVUQkZia1VzVTBGQmIwSnNXaXhGUVVGUksyUXNSVUZCVDNSRkxFVkJRVXRVTEVWQlFWTkRMRVZCUVZrNFJpeEZRVUZYTjBZc1IwRkRkRVVzVDBGNk1FVm5RMmRITEVkQk1EQkZPVUlzUzBGQlMzUndRaXhGUVVOSUxFZEJRVXR2U3l4RlFVRlBkMkVzV1VGQlkzVkVMRVZCUVUxMlJDeFpRVU16UW5oaExFVkJRVTkxWVN4WlFVRmpkMFFzUlVGQlRYaEVMRmRCUXpsQ0xFOUJRVUVzUlVGRlJuWmhMRVZCUVZOQkxFVkJRVTl6WVN4UFFVTm9RbmxFTEVWQlFWRkJMRVZCUVUxNlJDeFBRVVZvUWl4TFFVRkxNMnRDTEVWQlEwZ3NVVUZCUzNGTExFVkJRVTkzWVN4WlFVRmpkVVFzUlVGQlRYWkVMR0ZCUXpOQ2RVVXNSVUZCVlN4SlFVRkphRThzUjBGQlZ5OVJMRWRCUVZNc1NVRkJTU3RSTEVkQlFWZG5UaXhMUVV0NFJDeExRVUZMY25CQ0xFVkJRMHdzUzBGQlMwTXNSVUZEVEN4TFFVRkxUU3hGUVVkSUxFOUJRVTh3YVVJc1NVRkJTVE5ZTEVkQlFWTXJaQ3hIUVVWMFFpeExRVUZMYkhCQ0xFVkJRMGdzVDBGQlQyMU1MRVZCUVU5M1ppeE5RVUZSZWtJc1JVRkJUWGxDTEUxQlFWRjRaaXhGUVVGUGVXWXNVMEZCVnpGQ0xFVkJRVTB3UWl4UlFVVTVSQ3hMUVVGTGNIRkNMRVZCUTB3c1MwRkJTMFVzUlVGSlNDeFBRVUZQZVVzc1IwRkJWeXRrTEVWQlFWRXNSMEZGTlVJc1MwRkJTeTl2UWl4RlFVTklMRWxCUVVrd2NVSXNSVUZCVldwVExFZEJSV2hDTEV0QlFVdHVXU3hGUVVOSUxFbEJRVWx4Y1VJc1JVRkJXVE5ITEVWQlFWVm9iVUlzUlVGSE1VSXNSMEZHUVRCelFpeEpRVUZaUVN4RlFVRlZlRklzU1VGRmJFSnNUeXhGUVVGUE1rNHNUVUZCVVc5UkxFVkJRVTF3VVN4UFFVRlRaMU1zUlVGRGFFTXNUMEZCUVN4RlFVZEdMRWxCUVVscVJpeEZRVUZWZUVJc1JVRkJUVklzU1VGQlNURlpMRWRCUTNoQ0xFZEJRVWt3WVN4RlFVTkdMRTlCUVU5QkxFZEJRVmR4UkN4RlFVVndRaTlGTEVkQlFWY3ZiRUlzUlVGSFdHbHRRaXhGUVVGTkwwc3NTVUZCU1c1UExFVkJRVkVyWkN4SFFVTnNRaXhKUVVGSk1XWXNSVUZCVTJ0b1FpeEhRVUZaUnl4RlFVRlJNV1lzUjBGQlV6Qm1MRVZCUVZFelFpeEhRVUZSTDBVc1JVRkJVME1zUlVGQldUaEdMRVZCUVZjM1JpeEhRVVV4Uml4UFFVUkJRU3hGUVVGak5FTXNUMEZCUlRsaUxFZEJRMVF6UWl4RlFVVlVMRXRCUVVzM1NTeEZRVU5JTEVkQlFVbHJaaXhIUVVOR0xFOUJRVTlCTEVkQlFXTnNXQ3hMUVVGTGQwTXNTVUZCVnpCVkxFZEJRV05zV0N4TFFVRkxkV2RDTEVkQlJ6bEVMRTlCUVVFc1JVRTVSRVlzUTBGNE1FVnRRaTlrTEVWQlFWRXJaQ3hGUVVGUGJVSXNSVUZCVVd4SExFVkJRVk5ETEVWQlFWazRSaXhGUVVGWE4wWXNSMEZGZUVVc1MwRkJUVVlzUlVGQlZXaHRRaXhIUVVGMVFpeERRVU55UXl4SlFVRkpOSE5DTEVWQlFXVlNMRWRCUVZsc1VDeEhRVUZsTVZNc1MwRkJTM2RETEVWQlFWRXNaVUZEZGtRMlppeEZRVUZsVWl4SFFVRlpibEFzUjBGQlpURlRMRXRCUVV0MVowSXNSVUZCVHl4bFFVVXhSQ3hIUVVGSk5rSXNSMEZCWjBKRExFVkJRV01zUTBGRGFFTXNTVUZCU1VNc1JVRkJaVVlzUlVGQlpUVm1MRVZCUVU5cVF5eFJRVUZWYVVNc1JVRkRMME1yWml4RlFVRmxSaXhGUVVGbE9VSXNSVUZCVFdoblFpeFJRVUZWWjJkQ0xFVkJSMnhFTEU5QlJFRTNSU3hKUVVGVlFTeEZRVUZSTEVsQlFVbDBReXhKUVVObWJVa3NSVUZCVldVc1JVRkJZME1zUlVGQll5OUhMRVZCUVZORExFVkJRVmxETEVsQlIzUkZMRkZCUVV0dlJ5eEpRVWRNY0Vjc1NVRkJWVUVzUlVGQlVTeEpRVUZKZEVNc1NVRnhORVY0UWl4VFFVRnpRalZYTEVWQlFWRXJaQ3hGUVVGUEwwVXNSVUZCVTBNc1JVRkJXVGhHTEVWQlFWYzNSaXhIUVVOdVJTeEpRVUZKZVVjc1JVRkJXVE5ITEVWQlFWVm9iVUlzUlVGRGRFSm5kRUlzUlVGQlYyNUdMRWRCUVZjM1lTeEhRVU4wUW1sblFpeEZRVUZaUkN4RlFVRlRlbWxDTEU5QlNYcENMRWRCUVVrd2FVSXNSMEZJVjNCR0xFZEJRVmRyUkN4SFFVTkVlR2RDTEZOQlJVMXZhVUlzUlVGRE4wSXNUMEZCUVN4RlFVZEdMRWxCUkVFc1NVRkJTVGRvUWl4RlFVRlJiV2xDTEVWQlEweHVhVUlzUzBGQlV5eERRVU5rTEVsQlFVa3dRaXhGUVVGTmQyZENMRVZCUVZOc2FVSXNSMEZEYmtJc1MwRkJUVFpvUWl4RlFVRlpibWRDTEV0QlFVOTFaU3hGUVVGUk4wNHNSMEZCWlRGVExFdEJRVXQxWjBJc1JVRkJUM1psTEVsQlF6RkVMRTlCUVVFc1JVRkpTaXhKUVVGSmEySXNSVUZCVlhoQ0xFVkJRVTFTTEVsQlFVa3hXU3hIUVVONFFpeEhRVUZKTUdFc1IwRkJWM2hDTEVWQlFVMVNMRWxCUVVseFJpeEhRVU4yUWl4UFFVRlBja1FzUjBGQlYzRkVMRVZCUlhCQ0xFbEJRVWt4Wml4SFFVRkJRU3hGUVVOS05tRXNSVUZCVFM5TExFbEJRVWx1VHl4RlFVRlJLMlFzUjBGRGJFSTNSU3hGUVVGTkwwc3NTVUZCU1RSUUxFVkJRVTh2WkN4SFFVZHFRaXhKUVVSQkxFbEJRVWxyWjBJc1JVRkJWMUFzU1VGRFRqZG9RaXhGUVVGUmJXbENMRWRCUVZjc1EwRkZNVUlzU1VGQlNXNUpMRVZCUVZjNVdDeEZRVVJtVWl4RlFVRk5kMmRDTEVWQlFWTnNhVUlzU1VGRldIRnBRaXhGUVVGWGNFTXNSVUZCVFhabExFZEJSWEpDTEVkQlFVbDVXaXhGUVVOR0xFbEJRVWx0U0N4RlFVRlhWQ3hGUVVOWU1VY3NSVUZCVjJ0SUxFVkJRVlZ5U1N4RlFVRlZkRmtzUlVGQlMzVmxMRVZCUVU4dlpDeEZRVUZSYTFvc1IwRkRia1JFTEVWQlFWZHVRaXhGUVVGVmNVa3NSVUZCVlROblFpeEZRVUZMVVN4RlFVRlJLMlFzUlVGQlR6ZEZMRWRCUjNwRUxFdEJRVTFyU0N4SlFVRmhNM1JDTEVWQlExWnhiRUlzU1VGQllYRkpMRWRCUVZsd1FpeEZRVUZWYWtnc1JVRkJWWEZKTEVWQlFWVnVTQ3hGUVVGVFF5eEZRVUZaUXl4SFFVTTNSV3RJTEVkQlEwUXNRMEZEVEM5b1FpeEhRVUZCUVN4RlFVTkJMRTFCUlVZMmFFSXNTVUZCWVVFc1JVRkJhMElzWlVGQlVERm5RaXhIUVVVeFFpeEhRVUZKYmtJc1NVRkJWelpvUWl4RlFVRlZMRU5CUTNaQ0xFbEJRVWxITEVWQlFWVnlaMElzUlVGQlQzTmFMRmxCUTJwQ1owZ3NSVUZCVlhaRExFVkJRVTE2UlN4WlFVZG9RaXRITEVkQlFWZERMRWRCUTFZc1owSkJRV2xDZEdkQ0xFZEJRVlVzWjBKQlFXbENLMlFzUzBGRGVrSXNiVUpCUVZoelF5eEhRVUY1UWtFc1lVRkJiVUpCTEVkQlEycERMRzFDUVVGWVF5eEhRVUY1UWtFc1lVRkJiVUpCTEV0QlEzWkVhbWxDTEVkQlFVRkJMRWRCUzBvc1QwRkdRVFpoTEVWQlFXTTBReXhQUVVGRk9XSXNSMEZEYUVKcldpeEZRVUZqTkVNc1QwRkJSV2xETEVkQlExUXhaaXhGUVRkRVZDeERRWEEwUlhOQ01rSXNSVUZCVVN0a0xFVkJRVTh2UlN4RlFVRlRReXhGUVVGWk9FWXNSVUZCVnpkR0xFbEJNVU55UlN4RFFXcENlVUp1WWl4RlFVRlBaMmRDTEVWQlFVOHZSU3hGUVVGVFF5eEZRVUZaTmtZc1IwRkJZVFZHTEVsQmJVWjZSU3hUUVVGVGNVZ3NSMEZCV1hablFpeEZRVUZSYmtvc1JVRkJVVEp3UWl4RlFVRlhka2dzUjBGRE9VTXNTVUZCU1c1aUxFVkJRVkV3YVVJc1JVRkJWV3BxUWl4UFFVTnNRa0VzUlVGQlUwOHNSVUZEVkRKcFFpeEhRVUZuUW5oSUxFVkJSWEJDTEVkQlFXTXNUVUZCVm1wYUxFVkJRMFlzVDBGQlVYcERMRVZCUjFZc1NVRkVRWGxETEVWQlFWTXpSU3hIUVVGUE1rVXNSMEZEVkd4RExFdEJRVk1zUTBGRFpDeEpRVUZKSzFrc1JVRkJUekpLTEVWQlFWVXhhVUlzUjBGRGNrSXNSMEZCU3pKcFFpeEhRVUZuUWpWS0xFVkJRVXNzUjBGRGJFSkJMRVZCUVVzc1MwRkJUemRYTEVWQlFVODJWeXhGUVVGTExFMUJRM1JDUVN4RlFVRkxMRXRCUVUwM1Z5eEhRVVZ1UWl4UFFVRkJMRVZCUjBvc1QwRkJVMnhETEVWQlFWRlFMRWRCUVZFc1EwRkZka0lzU1VGQlNXbERMRWRCUkVweFdDeEZRVUZQTWtvc1JVRkJWVEZwUWl4SlFVTkdMRWRCUTFobllTeEZRVUZYT1Znc1JVRkJUMUlzUjBGRGJFSnJhRUlzUlVGQlZ6ZEtMRVZCUVVzc1IwRkZjRUlzUjBGQlNUUktMRWRCUVdkQ05Vb3NSVUZCU3l4SlFVTjJRaXhIUVVGSmFVSXNTVUZCWVhKc1FpeExRVUZsSzAwc1MwRkJUMUVzUjBGRGNrTXNUMEZCUVN4TlFVVkhMRU5CUTB3c1NVRkJTV3RhTEVWQlFWRXNTVUZCU1hSRExFZEJRMmhDTEVkQlFVbHhReXhGUVVOR0xFbEJRVWsxWVN4RlFVRlROR0VzUlVGQlYyNUNMRVZCUVZVMFNTeEZRVUZWYkdoQ0xFVkJRVXRSTEVWQlFWRnVTaXhGUVVGUmNXbENMRWRCUlc1RkxFdEJRVTAzWVN4SlFVRlhOVXdzUlVGRFZIRnpRaXhIUVVGWk5FSXNSVUZCVlRWSkxFVkJRVlU1YTBJc1JVRkJkVUpETEVWQlFYZENaMjFDTEVWQlFWbERMRWRCUXpOR04yRXNSMEZGVGl4UFFVRkJMRWRCU1U0c1QwRkJRU3hGUVZkR0xGTkJRVk56YVVJc1IwRkJZVFZwUWl4SFFVTndRaXhUUVVGTGMxZ3NSMEZCVTNSWUxFdEJielJHUlZnc1JVRndORVpwUWxjc1JVRnhORVo0UW5GVExFbEJRV1ZCTEUxQlFXTm9WQ3hOUVd3MFJuaENLMllzUjBGQlYzQm1MRWRCUVZNMFV5eEhRVUZoZUZrc1NVRkRhRU54Vml4TFFVRkxORWNzUjBGQlUzSlhMRWxCWnpSR0wwSXNTVUZCYTBKWUxFVkJjREZHYkVJc1UwRkJVM2RxUWl4SFFVRmhOMmxDTEVkQlIzQkNMRTFCUVc5Q0xHMUNRVUZVUVN4RlFVTkdRU3hGUVVWSkxFMUJRVlJCTEVWQlEwczRhVUlzUjBGRlZ5eHBRa0ZCVkRscFFpeEZRVU5HWjFnc1IwRkJVV2hZTEVkQlExZ3JhVUlzUjBGQmIwSXZhVUlzUlVGQlRTeEhRVUZKUVN4RlFVRk5MRWxCUTNCRFoycENMRWRCUVZsb2FrSXNSMEZGV0dscVFpeEhRVUZUYW1wQ0xFZEJWV3hDTEZOQlFWTnJha0lzUjBGQlUycG9RaXhIUVVOb1FpeEpRVUZMYTJoQ0xFZEJRVmxzYUVJc1IwRkRaaXhQUVVGUFoxUXNSMEZCVjJoVUxFZEJSWEJDTEVsQlFVa3pRaXhGUVVGVExFZEJRMklzU1VGQlN5eEpRVUZKYlVJc1MwRkJUMjVGTEVkQlFVOHlSU3hIUVVOcVFtdFJMRWRCUVdVeFV5eExRVUZMZDBNc1JVRkJVVklzU1VGQlpTeGxRVUZRUVN4SFFVTjBRMjVDTEVWQlFVOXJXaXhMUVVGTEwxZ3NSMEZIYUVJc1QwRkJUMjVDTEVWQmEwTlVMRk5CUVZNNGFVSXNSMEZCVDNCcVFpeEZRVUZQWjJkQ0xFZEJRM0pDTEU5QlFVOW9aMElzUlVGQlVXZG5RaXhGUVZkcVFpeFRRVUZUY1VRc1IwRkJVVGxvUWl4RlFVRlpNVUlzUjBGRE0wSXNTVUZCU1VVc1IwRkJVeXhGUVVOVVR5eEZRVUZUWjJwQ0xFZEJRVmt2YUVJc1IwRkJZMWdzUjBGQlRWY3NSVUZCVnk5Q0xGRkJRVlVzUjBGTGJFVXNUMEZJUVRCaExFZEJRVk16V1N4RlFVRlpMRk5CUVZOMlFpeEZRVUZQZVVJc1JVRkJTMFlzUjBGRGVFTnFRaXhKUVVGVFVDeEhRVUZUUml4RlFVRlRSeXhGUVVGUGVVSXNSVUZCUzBZc1MwRkZiRU5xUWl4RlFWVlVMRk5CUVZNd2FVSXNSMEZCV1d4eFFpeEhRVU51UWl4SlFVRkpNbkJDTEVWQlFWbGpMRWRCUVdGNmNVSXNSMEZETjBJc1QwRkJkMElzUjBGQmNFSXljRUlzUlVGQlZXcHFRaXhSUVVGbGFXcENMRVZCUVZVc1IwRkJSeXhIUVVOcVEyVXNSMEZCZDBKbUxFVkJRVlVzUjBGQlJ5eEhRVUZKUVN4RlFVRlZMRWRCUVVjc1NVRkZlRVFzVTBGQlUzaG5RaXhIUVVOa0xFOUJRVTlCTEVsQlFWZHVTaXhIUVVGVk1IQkNMRWRCUVZsMlowSXNSVUZCVVc1S0xFVkJRVkV5Y0VJc1NVRlpOVVFzVTBGQlUwMHNSMEZCYjBKNlJDeEZRVUZOY1VRc1IwRkRha01zVDBGQlNXTXNSMEZCVFc1RkxFbEJRVk52UlN4SFFVRnRRbVlzUjBGRE4wSmhMRWRCUVhkQ2FFVXNSMEZCVFVZc1IwRkJUM0ZFTEVkQlJYWkRMRk5CUVZNeFowSXNSMEZEWkN4SlFVRkpPRmdzUlVGQlYxa3NSMEZCU1RGWkxFVkJRVkZ4WkN4SFFVTXpRaXhQUVVGUmRrWXNTVUZCWVhKc1FpeEhRVUZoY1d4Q0xFbEJRV0UwU1N4RlFVTXpRMmRDTEVkQlFVMHhhRUlzUlVGQlVYRmtMRWRCUTJSNVFpeEhRVUZaTkVJc1JVRkJWVFZKTEVWQlFWVTVhMElzUlVGQmRVSkRMRWxCWlM5RUxGTkJRVk13ZFVJc1IwRkJWVE5vUWl4RlFVRlJia29zUlVGQlVTdHhRaXhGUVVGVk0wa3NSVUZCV1VNc1IwRkRia1JzV2l4SlFVRlhia29zUjBGSFptdHRRaXhIUVVGUmJHMUNMRVZCUVZFc1UwRkJVelp3UWl4RlFVRlZiR2hDTEVkQlJXcERMRWRCUkVFd1dpeEpRVUZWUVN4RlFVRlJMRWxCUVVsMFF5eEpRVU5zUW5aQ0xFZEJRVk54VEN4SlFTdENha0lzVTBGQmRVSXhaMElzUlVGQlVXNUtMRVZCUVZFeVNTeEZRVUZMYjJsQ0xFVkJRVlZETEVWQlFWYzFTU3hGUVVGWlF5eEhRVU16UlN4SlFVRkpjRUlzUlVGQlYyZExMRWRCUVZFNWFFSXNSVUZCVVZJc1IwRkRNMEpyYUVJc1JVRkJWMjlDTEVkQlFWRnFja0lzUlVGQlVUSkpMRWRCUXpOQ2EySXNSVUZCVlhoQ0xFVkJRVTFTTEVsQlFVbG5TU3hIUVVWNFFpeEhRVUZKYUVjc1JVRkRSbWhFTEVkQlFXbENNVmdzUlVGQlVWSXNSVUZCUzJ0aUxFOUJSR2hETEVOQlNVRXNTVUZCU1hGSUxFVkJRVmM1U1N4RlFVTllRU3hGUVVGWGJrSXNSVUZCVlRSSkxFVkJRVmRzYUVJc1JVRkJUU3hIUVVGTFVTeEZRVUZSYmtvc1JVRkJVWEZwUWl4SFFVTXpSSHB0UWl4RlFVVkJNRzlDTEVWQlFWYzBSeXhKUVVGaGRIWkNMRVZCUlRWQ0xFZEJRVWt3YjBJc1JVRkJWU3hEUVVOYUxFbEJRVWx1UlN4RlFVRlJha01zUjBGQlVUSk1MRWRCUTJoQ2Rrb3NSMEZCVlVnc1IwRkJVM0JGTEVkQlFWTTRUaXhIUVVNMVFuTkNMRWRCUVZkb1RDeEpRVUZWUnl4SFFVRlZhbUVzUjBGQllYZHFRaXhIUVVWb1JIRkNMRVZCUVZkeVFpeEZRVU5RTVVvc1IwRkJVMGNzUjBGQlZUWkxMRVZCUTJwQ2FrNHNSMEZCVVN0RExFZEJRMVpwU3l4RlFVRlhha3NzUlVGRlNtMUxMRWRCUVd0Q2Jrc3NSMEZEZWtKcFN5eEZRVUZYZGtrc1IwRkJWVEZDTEVkQlJXUllMRWRCUTFCblJTeEhRVUZCUVN4RlFVTkJORWNzUlVGQlYyNUpMRWRCUVZrNFJ5eEhRVUZCUVN4SlFVVm9Rbk5DTEVkQlExQTNSeXhIUVVGQlFTeEZRVU5CTkVjc1JVRkJWM1JJTEVkQlFXZENhVWNzUjBGQlFVRXNTVUZITTBKeFFpeEZRVUZYTEVkQlIwNUhMRWRCUVdONFFpeEpRVUZoZUVvc1IwRkJXWGRLTEVsQlF6bERjVUlzUlVGQlYycExMRVZCUTFCYUxFZEJRVmxaTEVkQlEyUnBTeXhGUVVGWFNTeEhRVUZqY2tzc1IwRkZha0o2UXl4SFFVRlRlVU1zUzBGQllYRkdMRWRCUVZkeVJpeExRVU42UTJsTExFVkJRVmRzU1N4SFFVRm5RalpITEV0QlNUZENka1lzUjBGQlFVRXNSVUZIUVVFc1NVRkZSbXBETEVWQlFVMHZTeXhKUVVGSmRWTXNSVUZCVlhGQ0xFZEJRM0JDUml4RlFVRlZSU3hGUVVGVmNrSXNSVUZCVld0Q0xFVkJRVlV6U1N4RlFVRlpReXhIUVVOd1JFRXNSVUZCWXpSRExFOUJRVVUwUlN4SlFVVnNRbWhLTEVkQlFXbENNVmdzUlVGQlVWSXNSVUZCUzNWcFFpeEpRVE5FYUVNc1EwRTVRbTlDTDJoQ0xFVkJRVkZ1U2l4RlFVRlJNa2tzUlVGQlMyOXBRaXhGUVVGVlJDeEhRVUZYTVVrc1JVRkJXVU1zVDBGRmFrVXNRMEZEU0N4SlFVRkpOa2tzUlVGQlZ6bEpMRVZCUTFoQkxFVkJRVmMyU1N4SFFVRlJPV2hDTEVWQlFWRlNMRWRCUVUxcmFFSXNSVUZCVjJ4b1FpeEZRVUZOTEVkQlFVdFJMRVZCUVZGdVNpeEZRVUZSY1dsQ0xFZEJRM1pGZW0xQ0xFVkJSVUZ6ZGtJc1NVRkJZWFIyUWl4SlFVTm1jM1pDTEVWQlFWZHlRaXhIUVVWaWFFb3NSMEZCYVVJeFdDeEZRVUZSVWl4RlFVRkxkV2xDTEV0QlJTOUNhRWtzU1VGM1Jrd3NVMEZCVTNGSkxFZEJRVkV4YTBJc1JVRkJUekpETEVkQlEzUkNMRWxCUVVrNVF5eEZRVUZUUnl4RlFVRk5TQ3hQUVVOdVFpeEhRVUZMUVN4RlFVbE1MRTlCUVU4cldpeEhRVVJRYWxnc1IwRkJTMEVzUlVGQlNTeEZRVUZKT1VNc1JVRkJVeXhGUVVOS1FTeEhRVUZWUnl4RlFVRk5Na01zUjBGQlN6Vk9MRVZCV1hwRExGTkJRVk0wZGtJc1IwRkJXUzlwUWl4RlFVRlpaMnBDTEVWQlFWZERMRWRCUXpGRExFbEJRVWw2YTBJc1IwRkJVeXhGUVZWaUxFOUJWRUYzYTBJc1JVRkJXVFZxUWl4SFFVRlROR3BDTEVWQlFWVXZhMElzVDBGQlV5dHJRaXhGUVVGWkxFTkJRVU42UWl4SlFVRlhkbWRDTEVkQlFWVnJhVUlzVDBFeGRVWTVSU3hUUVVGdlFqbHJRaXhGUVVGUEsydENMRWRCUTNwQ0xFbEJRVWxzYkVJc1JVRkJVMGNzUlVGQlRVZ3NUMEZIYmtJc1NVRkVRVWNzUlVGQlRXZHNRaXhMUVdkMlJuTkNMRk5CUVZNeGFVSXNSVUZCVVN0a0xFZEJRM3BETEU5QmJUUkNTaXhUUVVGNVFpOWtMRVZCUVZFclpDeEZRVUZQZDBVc1IwRlBkRU1zU1VGT1FTeEpRVUZKZW10Q0xFZEJRVk1zUlVGRFZEWnJRaXhGUVVGak0ybENMRVZCUVU4MGFVSXNVMEZEY2tKRExFVkJRV001UlN4RlFVRk5Oa1VzVTBGRGNFSnliRUlzUlVGQlUyOXNRaXhGUVVGWmNHeENMRTlCUTNKQ2RXeENMRVZCUVdWUUxFVkJRVTlvYkVJc1UwRkZha0pQTEVWQlFWRlFMRWRCUVZFc1EwRkRka0lzU1VGQlNXTXNSVUZCVXpCclFpeEhRVUZwUWtvc1JVRkJXVGRyUWl4SFFVRlJLMnRDTEVWQlFWa3ZhMElzU1VGRE9VUXNSMEZCU1U4c1JVRkJVU3hEUVVOV0xFZEJRVWxRTEVkQlFWTm5iRUlzUlVGRFdDeFBRVUZQZW10Q0xFVkJSVlFzU1VGQlNUSnJRaXhGUVVGUlZDeEZRVUZQZW10Q0xFZEJRMjVDTEU5QlFVOVBMRWRCUVcxQ0xGRkJRVlF5YTBJc1IwRkJiVUlzUlVGQlNTeEpRVlUxUXl4UFFVRlBhR3BDTEVWQlFVOXNReXhOUVVGUmFXZENMRVZCUVUxcVowSXNUVUY0UWpsQ0xFTkJialJDTWtKclF5eEZRVUZSSzJRc1JVRkJUM2RGTEV0QmFIWkdia05vYkVJc1MwRkRURWNzUlVGQlRVZ3NSMEZCVlVjc1JVRkJUVWdzUjBGQlVWRXNUVUZGYUVNc1QwRkJUMHdzUlVGUVZDeERRVFIxUm1sQ01HcENMRWRCUVZFNWFFSXNSVUZCV1N4VFFVRlRka0lzUlVGQlQzbENMRVZCUVV0R0xFZEJTWEJFTEUxQlFVOHNRMEZCUlhOcVFpeFRRVWhOYkd0Q0xFZEJRVk0wYWtJc1JVRkJWeXhUUVVGVE1XdENMRWRCUXpGRExFOUJRVTlCTEVWQlFWTkhMRXRCUldGRUxGRkJRVmRCTEVWQlFVOURMRTFCUVZOQkxFMUJaME01UkN4VFFVRlRhMnhDTEVkQlFWZHFha0lzUlVGQlVYZFpMRVZCUVU5MFlTeEhRVXRxUXl4SlFVcEJMRWxCUVVsS0xFZEJRVk1zUlVGRFZGQXNSVUZCVTJsaUxFVkJRVTFxWWl4UFFVTm1ZeXhGUVVGVExFdEJSVXBRTEVWQlFWRlFMRWRCUVZFc1EwRkRka0lzU1VGQlNUaG1MRVZCUVU4M1JTeEZRVUZOTVdFc1IwRkRZa01zUlVGQlVYRm1MRWRCUVZGd1pDeEZRVUZSY1dRc1IwRkZlRUp1Wml4RlFVRlZTQ3hGUVVGUGMyWXNTVUZEYmtJMlJpeEhRVUZSTjJ0Q0xFVkJRVkZwWml4SFFVRlRSQ3hGUVVGTmNtUXNSMEZCVTJwRExFZEJSelZETEU5QlFVOU5MRVZCTWtKVUxGTkJRVk00YTBJc1IwRkJXWHBzUWl4RlFVRlBiVUlzUlVGQlVXcENMRVZCUVZWaExFZEJRelZETEVsQlFVa3lhMElzUlVGQlZUTnJRaXhGUVVGaGIwSXNSMEZCYTBKMFFpeEhRVU42UTFRc1IwRkJVeXhGUVVOVVVDeEZRVUZUYzBJc1JVRkJUM1JDTEU5QlEyaENhMmhDTEVWQlFVOHZaMElzUlVGUldDeEpRVTVKUVN4SlFVRlZiVUlzU1VGRFdrRXNSVUZCVXpKaExFZEJRVlV6WVN4SlFVVnFRbXBDTEVsQlEwWTJaMElzUlVGQlR5OW1MRWRCUVZOb1FpeEZRVUZQTkVNc1IwRkJWVEZETEU5QlJURkNSU3hGUVVGUlVDeEhRVXRtTEVsQlNrRXNTVUZCU1cxRExFVkJRVmtzUlVGRFdqTkNMRVZCUVZGakxFVkJRVTltTEVkQlEyWjNaQ3hGUVVGWE1XUXNSVUZCVjBFc1JVRkJVMGNzUjBGQlUwRXNSMEZGY0VNeVFpeEZRVUZaTUdwQ0xFVkJRVkV6UlN4RlFVRk5ia1FzUlVGQlZUVmlMRVZCUVZkcVFpeExRVUZuUWl4SFFVTnFSV2RuUWl4SlFVRlRMMmRDTEVkQlExZzBWQ3hIUVVGUE9WUXNTMEZCUzJsb1FpeEZRVUZOTDJVc1JVRkJWeXhIUVVVdlFqUlNMRWRCUVU4NVZDeExRVUZMUlN4RlFVRlBaME1zUlVGQlZ5eEhRVWRzUXl4UFFVRlBhRU1zUlVGWlZDeFRRVUZUTW14Q0xFZEJRVmN6YkVJc1JVRkJUelJzUWl4SFFVbDZRaXhKUVVoQkxFbEJRVWt2YkVJc1JVRkJVMGNzUlVGQlVUUnNRaXhGUVVGUkwyeENMRTlCUVZNc1JVRkRiRU1yVVN4RlFVRlpMMUVzUlVGQlV5eEZRVVZzUWtFc1MwRkJWU3hEUVVObUxFbEJRVWxQTEVWQlFWRjNiRUlzUlVGQlVTOXNRaXhIUVVOd1FpeEhRVUZKUVN4SFFVRlZLMUVzUjBGQllYaFJMRWxCUVZWNWJFSXNSVUZCVlN4RFFVTTNReXhKUVVGSlFTeEZRVUZYZW14Q0xFVkJRMWgzV2l4SFFVRlJlRm9zUjBGRFZuZFVMRWRCUVU4NVZDeExRVUZMUlN4RlFVRlBTU3hGUVVGUExFZEJSVEZDTUd4Q0xFZEJRVlU1YkVJc1JVRkJUMGtzU1VGSmRrSXNUMEZCVDBvc1JVRlpWQ3hUUVVGVEsxb3NSMEZCVjI5Q0xFVkJRVTlETEVkQlEzcENMRTlCUVU5RUxFVkJRVkYwUnl4SFFVRlpaMElzVFVGQmEwSjFSaXhGUVVGUlJDeEZRVUZSTEVsQmEwTXZSQ3hUUVVGVE5Fc3NSMEZCVjJ4WExFVkJRVkZzVGl4SFFVTXhRaXhKUVVGSmFFTXNSVUZCVXl4SFFVTmlMRWxCUVV0clVDeEhRVUZWYkU0c1JVRkJTU3hIUVVGTFFTeEZRVUZKZEUwc1JVRkRNVUlzVDBGQlQzTkxMRVZCU1ZRc1IwRkRUV2RETEVWQlFVa3NTVUZEVG1oRExFZEJRVlZyVUN4SlFVVmFiRTRzUlVGQlNXdFRMRWRCUVZsc1V5eEZRVUZKTEUxQlJXeENhMDRzUjBGQlZVRXNVMEZGVEd4T0xFZEJSVlFzVDBGQlQyaERMRVZCVjFRc1UwRkJVM0ZzUWl4SFFVRlRkRzFDTEVWQlFVMTFiVUlzUjBGRGRFSXNUMEZCVDBNc1IwRkJXVU1zUjBGQlUzcHRRaXhGUVVGTmRXMUNMRVZCUVU4NVF5eEpRVUZYZW1wQ0xFVkJRVThzU1VGeFF6ZEVMRk5CUVZNNGJFSXNSMEZCVVd4cVFpeEZRVUZSY1dRc1JVRkJUWFJtTEVWQlFVOXJZaXhIUVVOd1F5eEpRVUZMTlVRc1IwRkJVM0pXTEVkQlExb3NUMEZCVDBFc1JVRlRWQ3hKUVV4QkxFbEJRVWxzUXl4SFFVRlRMRVZCUTFSUUxFZEJTRW80Wml4RlFVRlBReXhIUVVGVFJDeEZRVUZOY21Rc1NVRkhTbnBETEU5QlEyUXJVU3hGUVVGWkwxRXNSVUZCVXl4RlFVTnlRblZ0UWl4RlFVRlRPV3BDTEVWQlJVa3NUVUZCVmpocVFpeExRVUZ2UW1odFFpeEZRVUZSVUN4SFFVRlJMRU5CUTNwRExFbEJRVWxwUXl4RlFVRk5LMlFzUjBGQlRVWXNSVUZCUzNabUxFbEJRMnBDYVd0Q0xFVkJRVmRvYTBJc1JVRkZaaXhIUVVGSlJDeEhRVUZUZDFFc1JVRkJWeXhEUVVOMFFpeEpRVUZKZDBvc1JVRkJWMmROTEVWQlFVOTBhMElzU1VGRGRFSjFhVUlzUlVGQlZ6bEpMRVZCUVdGQkxFVkJRVmR1UWl4RlFVRlZkRmtzUlVGQlMzTnJRaXhIUVVGVmNuaENMRXRCUXpORFFTeEpRVU5tYzNaQ0xFVkJRVmN4VFN4SFFVRlRlVU1zUjBGRGFFSkJMRVZCUTBOU0xFZEJRVkVyUml4RlFVRkxkbVlzUlVGQlVTeEpRVUZOTEVkQlFVc3NTVUZIZWtNcldpeEhRVUZaYVUwc1JVRkJVWFJyUWl4RlFVRkxkV2xDTEVkQlEzcENLMElzUlVGQlUwRXNSVUZCVDNSclFpeEhRVVZzUWl4UFFVRlBVU3hGUVZkVUxFbEJRVWtyYWtJc1IwRkJaVGxRTEVkQlFYRkNMRk5CUVZNM1Z5eEZRVUZOZVZvc1IwRkZja1FzVDBGRVFUVkRMRWRCUVZFNVJpeEpRVUZKTDFFc1JVRkJUWGxhTEVkQlExaDZXaXhIUVVadlFubHFRaXhIUVdGNlFtMUVMRWRCUVcxQ2JsTXNSMEZCTkVJc1UwRkJVM3BWTEVWQlFVMXRVU3hIUVVOb1JTeFBRVUZQYzBVc1IwRkJaWHBWTEVWQlFVMHNWMEZCV1N4RFFVTjBRMmRpTEdOQlFVRkJMRVZCUTBGRExGbEJRVUZCTEVWQlEwRjBZU3hOUVVGVGEyMUNMRWRCUVZNeFZ5eEhRVU5zUWl0TExGVkJRVUZCTEV0QlRHOURkVWtzUjBFMlFuaERMRk5CUVZOeFJDeEhRVUZWZUcxQ0xFVkJRVTlwYlVJc1JVRkJUMUVzUjBGREwwSXNTVUZCU1hKdFFpeEhRVUZUTEVWQlExUlFMRVZCUVZOSExFVkJRVTFJTEU5QlJXWnZiVUlzUlVGQlVTeEpRVU5XUVN4SFFVRlRRU3hGUVVGUmNHMUNMRVZCUVZNc1JVRkJTMEVzUlVGQlUyOXRRaXhKUVVVeFExRXNSVUZCVFVFc1JVRkJUVFZ0UWl4RlFVRlRRU3hGUVVGVE5HMUNMRWRCUTNCQ0xFbEJRMUpCTEVkQlFVODFiVUlzUjBGRlZFRXNSVUZCVTI5dFFpeEZRVUZSVVN4RlFVRk5MRVZCUVUxQkxFVkJRVTFTTEVsQlFWY3NSVUZET1VOQkxFdEJRVmNzUlVGSFdDeEpRVVJCTEVsQlFVbDBiRUlzUlVGQlUwMHNSMEZCVFhCQ0xFdEJRMVpQTEVWQlFWRlFMRWRCUTJaakxFVkJRVTlRTEVkQlFWTktMRVZCUVUxSkxFVkJRVkUyYkVJc1IwRkZhRU1zVDBGQlQzUnNRaXhGUVZsVUxGTkJRVk1yYkVJc1IwRkJVemxyUWl4RlFVRlpjRUlzUjBGRE5VSXNTVUZCU1Vjc1JVRk5TaXhQUVVwQk5Gb3NSMEZCVXpOWkxFVkJRVmtzVTBGQlUzWkNMRVZCUVU5RUxFVkJRVTkzUWl4SFFVVXhReXhSUVVSQmFrSXNSVUZCVTBnc1JVRkJWVWdzUlVGQlQwUXNSVUZCVDNkQ0xGRkJSekZDYWtJc1JVRmxXQ3hUUVVGVFoyMUNMRWRCUVdkQ00yMUNMRVZCUVU5TExFVkJRVTkxYlVJc1IwRkRja01zU1VGQlNVTXNSVUZCVFN4RlFVTk9ReXhGUVVGblFpeE5RVUZVT1cxQ0xFVkJRV2RDTm0xQ0xFVkJRVTAzYlVJc1JVRkJUVWdzVDBGRmRrTXNSMEZCYjBJc2FVSkJRVlJSTEVkQlFYRkNRU3hIUVVGVlFTeEhRVUZUZVcxQ0xFZEJRVkZ1ZDBJc1JVRkJkVUlzUTBGRGFFWXNTMEZCVDJ0M1FpeEZRVUZOUXl4SFFVRk5MRU5CUTJwQ0xFbEJRVWxETEVWQlFVOUdMRVZCUVUxRExFbEJRVlVzUlVGRGRrSnNTaXhGUVVGWE5XUXNSVUZCVFN0dFFpeEhRVVZLTEU5QlFXSnVTaXhKUVVGelFtMUNMRWRCUVZOdVFpeExRVU01UW1kS0xFVkJRV05vU2l4SFFVRlpkbVFzUlVGQlZYVmtMRVZCUVZkMlpDeEhRVU5zUkhkdFFpeEZRVUZOUlN4RlFVRk5MRVZCUlZwRUxFVkJRVTlETEVWQlIxZ3NUMEZCVDBRc1JVRkZWQ3hQUVVGUFJTeEhRVUZyUW1odVFpeEZRVUZQU3l4RlFVRlBPR2xDTEVkQlFWVjVSQ3hIUVdkQ2JrUXNVMEZCVTBrc1IwRkJhMEpvYmtJc1JVRkJUMHNzUlVGQlQwZ3NSVUZCVlRCdFFpeEhRVU5xUkhadFFpeEZRVUZSU0N4RlFVRlRSeXhIUVZOcVFpeEpRVkJCTEVsQlFVbDNiVUlzUlVGQlRTeEZRVU5PUXl4RlFVRm5RaXhOUVVGVU9XMUNMRVZCUVdkQ0xFVkJRVWxCTEVWQlFVMUlMRTlCUTJwRGIyNUNMRVZCUVZjMWJVSXNSMEZCVlVFc1JVRkRja0kyYlVJc1JVRkJjMElzVDBGQlZqZHRRaXhGUVVOYU9HMUNMRVZCUVdOd1NTeEhRVUZUTVdVc1IwRkRka0lyYlVJc1JVRkJhVUl2YlVJc1NVRkJWWFJNTEVWQlJYaENPSGhDTEVWQlFVMURMRWRCUVUwc1EwRkRha0lzU1VGQlNVTXNSVUZCVFd4VExFbEJRV0ZuVXl4RlFVRk5ReXhIUVVGUkxFZEJRMnBEYkVvc1JVRkJWekZrTEVWQlFWTkdMRVZCUVUwcmJVSXNTVUZETVVKTkxFVkJRV1Y2U2l4SlFVRmhOMjlDTEVWQlF6VkNkWGxDTEVWQlFYbENMRTlCUVdJeFNpeEZRVU5hTWtvc1JVRkJhVUl6U2l4SFFVRmhRU3hGUVVNNVFqUktMRVZCUVdONlNTeEhRVUZUYmtJc1IwRkZNMElzUjBGQlNYRktMRVZCUTBZc1NVRkJTVkVzUlVGQlUySXNSMEZCWTFjc1QwRkZNMEpGTEVWQlJGTk1MRVZCUTBGSExFbEJRVzFDV0N4SFFVRmpVeXhIUVVOcVEwZ3NSVUZEUVVzc1IwRkJhMEpHTEVsQlFXbENWQ3hKUVVGbFZTeEhRVU5zUkVnc1JVRkRRVWtzUjBGQmEwSkdMRWxCUVdsQ1F5eEpRVUZqVml4SlFVRmxXU3hKUVVOb1JVWXNTVUZCWVVVc1NVRkhZbG9zUlVGQlkyaEtMRWRCUVZsMlpDeEZRVUZWZFdRc1JVRkJWM1prTEVkQlJYUkViMjVDTEVWQlEwWmFMRVZCUVUxRkxFVkJRVTBzUlVGRldrUXNSVUZCVDBNc1JVRkhXQ3hQUVVGUGRGSXNSMEZCVlhGU0xFVkJRVTF3ZDBJc1IwRlpla0lzVTBGQlUyZDRRaXhIUVVGbE1XNUNMRVZCUVU5RkxFZEJUVGRDTEVsQlRFRXNTVUZCU1VVc1IwRkJVeXhGUVVOVVVDeEZRVUZUUnl4RlFVRk5TQ3hQUVVObVlTeEZRVUZYTEVWQlExaERMRVZCUVZNc1MwRkZTbEFzUlVGQlVWQXNSMEZCVVN4RFFVTjJRaXhKUVVGSlVTeEZRVUZSVEN4RlFVRk5TU3hIUVVOa2QyUXNSVUZCVnpGa0xFVkJRVmRCTEVWQlFWTkhMRWRCUVZOQkxFVkJSVFZETEVsQlFVdEVMRWxCUVZVMldpeEhRVUZITWtRc1JVRkJWVzFFTEVkQlFVOHNRMEZEYWtNc1NVRkJTVUVzUlVGQlQyNUVMRVZCUTFocVpDeEZRVUZQUkN4TFFVRjNRaXhKUVVGV1RDeEZRVUZqTEVWQlFVbEJMRWRCUnpORExFOUJRVTlOTEVWQlYxUXNVMEZCVTJkdVFpeEhRVUZoZEc1Q0xFZEJRM0JDTEUxQlFXOUNMR2xDUVVGVVFTeEZRVU5HUVN4RlFVVk1NR1VzUjBGQlV6RmxMRWRCUTBvNVNpeEhRVVZFT0Vvc1JVRlhWaXhUUVVGVGRXNUNMRWRCUVdGMmJrSXNSMEZGY0VJc1IwRkJiMElzYVVKQlFWUkJMRVZCUTFRc1QwRkJUMEVzUlVGRlZDeEhRVUZKWjFnc1IwRkJVV2hZTEVkQlJWWXNUMEZCVDFjc1IwRkJVMWdzUlVGQlQzVnVRaXhKUVVGblFpeEhRVVY2UXl4SFFVRkpOMGtzUjBGQlV6RmxMRWRCUTFnc1QwRkJUelpYTEVkQlFXbENRU3hIUVVGbGNGZ3NTMEZCUzA4c1IwRkJVeXhIUVVWMlJDeEpRVUZKVFN4RlFVRlZUaXhGUVVGUkxFZEJRM1JDTEUxQlFXdENMRXRCUVZaTkxFZEJRV3RDTEVWQlFVbE9MRWxCUVZkcVN5eEZRVUZaTEV0QlFVOTFTeXhGUVZrNVJDeFRRVUZUYTI1Q0xFZEJRVk0zYmtJc1JVRkJUMFVzUlVGQlZXRXNSMEZEYWtNc1NVRkJTVmdzUjBGQlV5eEZRVU5VYjJRc1JVRkJWelZqTEVkQlExaG1MRVZCUVZOSExFVkJRVTFJTEU5QlEyWTBaQ3hIUVVGQlFTeEZRVU5CT1dNc1JVRkJVeXhIUVVOVWIyZENMRVZCUVU5d1owSXNSVUZGV0N4SFFVRkpTU3hGUVVOR01HTXNSMEZCUVVFc1JVRkRRVVFzUlVGQlZ6RmpMRkZCUlZJc1IwRkJTV3BDTEVkQlFWVTNTeXhGUVVGclFpeERRVU51UXl4SlFVRkplV0lzUlVGQlRYWlJMRVZCUVZjc1MwRkJUelJ1UWl4SFFVRlZPVzVDTEVkQlEzUkRMRWRCUVVsNVVTeEZRVU5HTEU5QlFVOUVMRWRCUVZkRExFZEJSWEJDWjA0c1IwRkJRVUVzUlVGRFFVUXNSVUZCVjNwaExFZEJRMWhuWlN4RlFVRlBMRWxCUVVsb1NTeFJRVWRZWjBrc1JVRkJUemRuUWl4RlFVRlhMRWRCUVV0VExFVkJSWHBDWjJRc1JVRkRRU3hQUVVGVGRtUXNSVUZCVVZBc1IwRkJVU3hEUVVOMlFpeEpRVUZKVVN4RlFVRlJUQ3hGUVVGTlNTeEhRVU5rZDJRc1JVRkJWekZrTEVWQlFWZEJMRVZCUVZOSExFZEJRVk5CTEVWQlJ6VkRMRWRCUkVGQkxFVkJRVk5WTEVkQlFYZENMRWxCUVZaV0xFVkJRV1ZCTEVWQlFWRXNSVUZETVVOdlpDeEhRVUZaUnl4SFFVRmhRU3hGUVVGVkxFTkJSWEpETEVsQlJFRXNTVUZCU1cxTExFVkJRVmxvU0N4RlFVRkxiR2hDTEU5QlEyUnJiMElzUzBGRFRDeEhRVUZKYUVnc1JVRkJTMmRJTEV0QlFXVnVTeXhGUVVOMFFpeFRRVUZUUkN4RlFVZFVlbVFzUjBGRFJqWm5RaXhGUVVGTGJFZ3NTMEZCU3l0RUxFZEJSVnBxWkN4RlFVRlBhMW9zUzBGQlMzaGFMRkZCUlVwdFpDeEZRVUZUZFVRc1JVRkJUVzVFTEVWQlFWVTNZeXhMUVVNM1FtZG5RaXhKUVVGVGNHZENMRWRCUTFodlowSXNSVUZCUzJ4SUxFdEJRVXNyUkN4SFFVVmFhbVFzUlVGQlQydGFMRXRCUVV0NFdpeEpRVWRvUWl4UFFVRlBUU3hGUVZkVUxGTkJRVk50YkVJc1IwRkJWWGhxUWl4RlFVRlJjV1FzUjBGSGVrSXNUMEZCYVVJc1QwRkVha0p5WkN4RlFVRlRNbVVzUjBGQlR6TmxMRVZCUkdoQ2NXUXNSVUZCVDBNc1IwRkJVMFFzUlVGQlRYSmtMR0ZCUlZWQkxFVkJRVTkxWkN4SFFVRk5jVUlzUjBGQlMzWkNMRXRCWVhCRUxGTkJRVk54U1N4SFFVRlhNV3hDTEVWQlFWRnhaQ3hGUVVGTmMwa3NSVUZCVXpGTkxFZEJRM3BETEU5QlFVOXBTeXhIUVVGUmJHcENMRVZCUVZGeFpDeEZRVUZOYzBrc1JVRkJVWFpKTEVkQlFWRndaQ3hGUVVGUmNXUXNTVUZCVVhCRkxFZEJZeTlFTEZOQlFWTXlUU3hIUVVGVmJHOUNMRVZCUVU5UkxFVkJRVmN5YmtJc1JVRkJVV3h0UWl4SFFVa3pReXhKUVVoQkxFbEJRVWx3UXl4RlFVRlRSeXhGUVVGTlNDeFBRVU5tVHl4RlFVRlJOa0lzUlVGQldYQkRMRWRCUVZVc1IwRkZNVUp2UXl4RlFVRlpOMElzVFVGQldVRXNSVUZCVVZBc1NVRkRkRU5YTEVWQlFWVlNMRVZCUVUxSkxFZEJRVkZCTEVWQlFVOUtMRXRCUldwRExFOUJRVTl0YjBJc1JVRkRTRE5DTEVkQlFWVjRiVUlzUlVGQlVXbERMRVZCUVZrc1JVRkJTVGRDTEVWQlFWTTJRaXhGUVVGWk4wSXNSVUZCVVN4RlFVRkpVQ3hIUVVOdVJUSnRRaXhIUVVGVmVHMUNMRVZCUVZGcFF5eEZRVUZaTjBJc1JVRkJVU3hGUVVGSkxFVkJRVXMyUWl4RlFVRlpjRU1zUlVGQlUwOHNSMEZoTVVVc1UwRkJVMmR2UWl4SFFVRnBRaTl1UWl4RlFVRlBaMjlDTEVkQlF5OUNMRWxCUVVreGJrSXNSVUZCVTA0c1JVRkpZaXhQUVVoSlRTeGhRVUZyUWpKWExFdEJRM0JDTTFjc1JVRkJVMEVzUlVGQlQwNHNVMEZGV0dkQ0xFZEJRVmxuYmtJc1JVRkJVeXhUUVVGVE1XNUNMRVZCUVZFeWJrSXNSMEZETTBNc1QwRkJUMEVzUlVGQlR6VnZRaXhMUVVGTFJDeE5RVUZOTm05Q0xFVkJRVTh6YjBJc1VVRkJVM1ZDTEVkQlFWVXNRMEZCUTFBc1IwRkJVekp1UWl4RlFVRlBNVzlDTEZGQlEyNUZaU3hIUVdGTUxGTkJRVk0wYmtJc1IwRkJVVGxJTEVWQlFWRjJaMElzUlVGQlZXRXNSMEZEYWtNc1NVRkJTV3hDTEVWQlFWTTBaMElzUlVGQlR6Vm5RaXhQUVVOd1FpeEhRVUZKUVN4RlFVRlRMRVZCUTFnc1QwRkJUMEVzUlVGQlUyZHZRaXhIUVVGVGNFZ3NSVUZCVHl4SlFVRk5MRWRCUzNoRExFbEJTRUVzU1VGQlNYSm5RaXhIUVVGVExFVkJRMVJQTEVWQlFWTk5MRWRCUVUxd1FpeExRVVZXVHl4RlFVRlJVQ3hIUVVsbUxFbEJTRUVzU1VGQlNVY3NSVUZCVVhsblFpeEZRVUZQY21kQ0xFZEJRMloxWjBJc1IwRkJXU3hKUVVWUVFTeEZRVUZYT1dkQ0xFZEJRMlE0WjBJc1IwRkJXWFpuUWl4SlFVTmtUeXhGUVVGUFVDeEhRVUZUYldRc1IwRkJaVFZqTEVWQlFVOVFMRWxCUVZWS0xFVkJRVTk1WjBJc1JVRkJUMFVzUjBGQlYzcG5RaXhGUVVGVllTeEpRVWw2Uml4UFFVRlBPRzFDTEVkQlFWTTFTU3hIUVVGWmRHVXNSVUZCVVN4SFFVRkpWQ3hGUVVGVllTeEhRVmx3UkN4VFFVRlRlVzVDTEVkQlFXTXhiRUlzUlVGQlR6TkNMRVZCUVZGemJrSXNSMEZOY0VNc1NVRk1RU3hKUVVGSmNtOUNMRWRCUVZNc1JVRkRWRkFzUlVGQlUybEVMRVZCUVUxcVJDeFBRVU5tTm05Q0xFVkJRV0YyYmtJc1JVRkJUM1JDTEU5QlEzQkNZeXhGUVVGVExFdEJSVXBRTEVWQlFWRlFMRWRCUVZFc1EwRkRka0lzU1VGQlNWRXNSVUZCVVVRc1JVRkJVWE52UWl4RlFVRmhkbTVDTEVWQlFVOW1MRWRCUVZOeVRDeEZRVU5xUkRCNlFpeEZRVUZYT1c1Q0xFVkJRVkZ0UXl4RlFVRk5NVU1zUjBGQlVVTXNSMEZGYmtNc1QwRkJUMDBzUlVGVlZDeFRRVUZUWjI5Q0xFZEJRVzlDZEc5Q0xFZEJRek5DTEU5QlFVOXJhMElzUjBGQmEwSnNhMElzUjBGQlUwRXNSVUZCVVN4SFFWVTFReXhUUVVGVGRXOUNMRWRCUVdGMmIwSXNSMEZEY0VJc1RVRkJkVUlzYlVKQlFWUkJMRVZCUVhOQ1FTeEZRVUZST0dsQ0xFZEJWemxETEZOQlFWTjJSQ3hIUVVGVGRtWXNSVUZCVDJsRExFZEJRM1pDTEU5QlFVa3JWU3hIUVVGUmFGZ3NSMEZEU0VFc1JVRkZSbmxxUWl4SFFVRk5lbXBDTEVWQlFVOXBReXhIUVVGVkxFTkJRVU5xUXl4SFFVRlRkMjlDTEVkQlFXRjBWeXhIUVVGVGJGTXNTVUZaYUVVc1NVRkJTWGx2UWl4SFFVRlhPVU1zUjBGWFppeFRRVUZUSzBNc1IwRkJWUzl2UWl4RlFVRlBhVzFDTEVWQlFVOVJMRWRCUXk5Q0xFbEJRVWsxYlVJc1JVRkJVMGNzUlVGQlRVZ3NUMEZGYmtJc1QwRkVRVFJ0UWl4RlFVRk5RU3hKUVVGUk1YaENMRVZCUVZrNFN5eEZRVUZUTkcxQ0xFZEJRekZDVWl4SFFVRlRVU3hIUVVGUE5XMUNMRVZCUVZWSExFVkJRVkYzYlVJc1IwRkJWWGh0UWl4RlFVRlBhVzFDTEVWQlFVOVJMRWRCVTNKRkxFbEJRVWx1VXl4SFFVRmxSQ3hKUVVGdFFpeFRRVUZUTWxVc1IwRkROME1zVDBGQlQyeHlRaXhIUVVGTGQxY3NZVUZCWVRCVkxFbEJWek5DTEZOQlFWTTVUU3hIUVVGWlZTeEZRVUZSYmtJc1IwRkRNMElzUjBGQlNVRXNSVUZEUml4UFFVRlBiVUlzUlVGQlQzRk5MRkZCUldoQ0xFbEJRVWx3Y0VJc1JVRkJVeXRqTEVWQlFVOHZZeXhQUVVOb1FtTXNSVUZCVXpKVExFZEJRV05CTEVkQlFWbDZWQ3hIUVVGVkxFbEJRVWtyWXl4RlFVRlBhRUlzV1VGQldTOWlMRWRCUjNoRkxFOUJSRUVyWXl4RlFVRlBjMDBzUzBGQlMzWnZRaXhIUVVOTVFTeEZRVlZVTEZOQlFWTXJZaXhIUVVGcFFubE5MRWRCUTNoQ0xFbEJRVWw0YjBJc1JVRkJVeXhKUVVGSmQyOUNMRVZCUVZsMlRpeFpRVUZaZFU0c1JVRkJXWEpOTEZsQlJYSkVMRTlCUkVFc1NVRkJTWHBLTEVkQlFWY3hVeXhIUVVGUk9GQXNTVUZCU1N4SlFVRkpORU1zUjBGQlZ6aFdMRWxCUTI1RGVHOUNMRVZCWjBSVUxGTkJRVk52WXl4SFFVRm5RbkZOTEVWQlFWa3pUaXhIUVVOdVF5eEpRVUZKYlVJc1JVRkJVMjVDTEVWQlFWTnBRaXhIUVVGcFFqQk5MRVZCUVZkNFRTeFJRVUZWZDAwc1JVRkJWM2hOTEU5QlEzWkZMRTlCUVU4c1NVRkJTWGROTEVWQlFWZDRUaXhaUVVGWlowSXNSVUZCVVhkTkxFVkJRVmQyVFN4WFFVRlpkVTBzUlVGQlYzWndRaXhSUVZjNVJTeFRRVUZUZDJ4Q0xFZEJRV2xDYUd4Q0xFVkJRVTluWjBJc1IwRkRMMElzUjBGQlNXaG5RaXhKUVVGVloyZENMRVZCUVU4c1EwRkRia0lzU1VGQlNXZEtMRVZCUVdWb2NFSXNTVUZCVlhSTUxFVkJRM3BDYlhsQ0xFVkJRWE5DTEU5QlFWWTNiVUlzUlVGRFdtbHdRaXhGUVVGcFFtcHdRaXhIUVVGVlFTeEZRVU16UWpodFFpeEZRVUZqY0Vrc1IwRkJVekZsTEVkQlJYWkNaMjVDTEVWQlFXVm9TQ3hKUVVGVmRISkNMRVZCUTNwQ2RYbENMRVZCUVhOQ0xFOUJRVlpxU0N4RlFVTmFhMGdzUlVGQmFVSnNTQ3hIUVVGVlFTeEZRVU16UW0xSUxFVkJRV042U1N4SFFVRlRjMElzUjBGRk0wSXNTVUZCVFdsSUxFbEJRV05GTEVsQlFXZENUQ3hIUVVGbE9XMUNMRVZCUVZGblowSXNSMEZEZEVRNFJ5eEhRVUZsUlN4SFFVRm5Ra1VzU1VGQmJVSkVMRWxCUVdORkxFZEJRMmhGVGl4SFFVRmhSeXhIUVVGblFrVXNTVUZETlVJNFFpeEhRVUZuUWpsQ0xFbEJRMnBDSzBJc1JVRkRTQ3hQUVVGUExFVkJSVlFzU1VGQlRYQkRMRWxCUVdORExFbEJRV2RDU3l4SFFVRmxibTVDTEVWQlFWRm5aMElzUjBGRGRFUnRTQ3hIUVVGbE5rSXNSMEZCWjBKRExFbEJRVzFDY0VNc1NVRkJZME1zUjBGRGFFVkhMRWRCUVdFclFpeEhRVUZuUWtNc1NVRkROVUpxUXl4SFFVRm5RbWxETEVsQlEycENMMElzUlVGRFNDeFBRVUZSTEVWQlIxb3NUMEZCVHl4RlFYVkVWQ3hUUVVGVFowTXNSMEZCV1ROd1FpeEZRVUZOTkhCQ0xFVkJRVlZETEVWQlFWTkRMRWRCVlRWRExFbEJWRUVzU1VGQlNVTXNSMEZCWVN4RlFVTmlReXhGUVVGaGFIRkNMRVZCUVV0RExFOUJRMnhDWjNGQ0xFVkJRV2RDU2l4RlFVRlJOWEJDTEU5QlEzaENhWEZDTEVkQlFXRXNSVUZEWWtNc1JVRkJZVkFzUlVGQlV6TndRaXhQUVVOMFFtMXhRaXhGUVVGamVsVXNSMEZCVlhGVkxFVkJRV0ZETEVWQlFXVXNSMEZEY0VSc2NFSXNSVUZCVTAwc1IwRkJUVGh2UWl4RlFVRmhReXhIUVVNMVFrTXNSMEZCWlZBc1NVRkZWa2tzUlVGQldVTXNSMEZEYmtKd2NFSXNSVUZCVDIxd1FpeEhRVUZoVGl4RlFVRlRUU3hIUVVVdlFpeFBRVUZUU0N4RlFVRlpSU3hKUVVObVNTeEhRVUZsVGl4RlFVRlpReXhMUVVNM1FtcHdRaXhGUVVGUE9HOUNMRVZCUVZGRkxFbEJRV012Y0VJc1JVRkJTeXR3UWl4SlFVZDBReXhMUVVGUFN5eExRVU5NY25CQ0xFVkJRVTl0Y0VJc1MwRkJaV3h4UWl4RlFVRkxLM0JDTEV0QlJUZENMRTlCUVU5b2NFSXNSVUZqVkN4VFFVRlRkWEJDTEVkQlFXbENkSEZDTEVWQlFVMDBjRUlzUlVGQlZVTXNSVUZCVTBNc1IwRlhha1FzU1VGV1FTeEpRVUZKUXl4SFFVRmhMRVZCUTJKRExFVkJRV0ZvY1VJc1JVRkJTME1zVDBGRGJFSnpjVUlzUjBGQlowSXNSVUZEYUVKT0xFVkJRV2RDU2l4RlFVRlJOWEJDTEU5QlEzaENkWEZDTEVkQlFXTXNSVUZEWkVNc1JVRkJZMklzUlVGQlV6TndRaXhQUVVOMlFtMXhRaXhGUVVGamVsVXNSMEZCVlhGVkxFVkJRV0ZETEVWQlFXVXNSMEZEY0VSc2NFSXNSVUZCVTAwc1IwRkJUU3R2UWl4RlFVRmpTeXhIUVVNM1Frb3NSMEZCWlZBc1NVRkZWa01zUlVGQldVc3NSMEZEYmtKeWNFSXNSVUZCVDJkd1FpeEhRVUZoTDNCQ0xFVkJRVXNyY0VJc1IwRkhNMElzU1VGRVFTeEpRVUZKZG05Q0xFVkJRVk4xYjBJc1NVRkRTbE1zUlVGQllVTXNSMEZEY0VJeGNFSXNSVUZCVDFNc1JVRkJVMmR3UWl4SFFVRmpXaXhGUVVGVFdTeEhRVVY2UXl4UFFVRlRSQ3hGUVVGbFRpeEpRVU5zUWtrc1IwRkJaVTRzUlVGQldVTXNTMEZETjBKcWNFSXNSVUZCVDFNc1JVRkJVM0Z2UWl4RlFVRlJWU3hKUVVGcFFuWnhRaXhGUVVGTEszQkNMRTFCUjJ4RUxFOUJRVTlvY0VJc1JVRlhWQ3hUUVVGVGJXSXNSMEZCVlROcFFpeEZRVUZSTmtjc1IwRkRla0lzU1VGQlNVa3NSMEZCVXl4RlFVTlVVQ3hGUVVGVE1VY3NSVUZCVHpCSExFOUJSM0JDTEVsQlJFRkhMRWxCUVZWQkxFVkJRVkZwUWl4SFFVRk5jRUlzVFVGRFprOHNSVUZCVVZBc1IwRkRaa2NzUlVGQlRVa3NSMEZCVTJwSUxFVkJRVTlwU0N4SFFVVjRRaXhQUVVGUFNpeEZRV0ZVTEZOQlFWTjVZU3hIUVVGWGRHaENMRVZCUVZFeVNpeEZRVUZQVWl4RlFVRlJhVm9zUjBGRGVrTXNTVUZCU1N0UExFZEJRVk5vYjBJc1JVRkRZa0VzU1VGQlYwRXNSVUZCVXl4SlFVdHdRaXhKUVVoQkxFbEJRVWxzUXl4SFFVRlRMRVZCUTFSUUxFVkJRVk5wUkN4RlFVRk5ha1FzVTBGRlZrOHNSVUZCVVZBc1IwRkJVU3hEUVVOMlFpeEpRVUZKYVVNc1JVRkJUV2RDTEVWQlFVMHhReXhIUVVWYWFXdENMRVZCUVZjNVNTeEZRVU5ZUVN4RlFVRlhhbG9zUlVGQlQxSXNSMEZCVFROSkxFVkJRVTh5U1N4SFFVRk5RU3hGUVVGTFVTeEZRVUZSYmtvc1IwRkRiRVJ3UlN4RlFVVkJjM1pDTEVsQlFXRjBka0lzU1VGRFpuTjJRaXhGUVVGWGJISkNMRVZCUVU4eVNTeEpRVVZvUW5kdlFpeEZRVU5HY0ZFc1IwRkJaMEkxV0N4RlFVRlJVaXhGUVVGTGRXbENMRWRCUlRkQ2JFc3NSMEZCV1RkWUxFVkJRVkZTTEVWQlFVdDFhVUlzUjBGSE4wSXNUMEZCVHk5b1FpeEZRVzFEVkN4VFFVRlRhVzlDTEVkQlFXbENkSEZDTEVWQlFWRjFjVUlzUjBGRGFFTXNUMEZCVHl4VFFVRlROVzlDTEVWQlFWa3hRaXhIUVVNeFFpeEpRVUZKVWl4RlFVRlBNbGdzUjBGQlVYcFdMRWRCUVdNM1FpeEhRVUZyUW5WaExFZEJReTlEYm1Fc1JVRkJZM0Z4UWl4RlFVRmpRU3hKUVVGblFpeEhRVVZvUkN4UFFVRlBPWEZDTEVWQlFVdHJReXhGUVVGWk0wSXNSVUZCVVRaclFpeEhRVUZaTld0Q0xFVkJRVlVzUjBGQlNVTXNTVUZYT1VRc1UwRkJVM054UWl4SFFVRmxReXhIUVVOMFFpeFBRVUZQTVVVc1IwRkJVeXhUUVVGVE1XcENMRVZCUVZGeGIwSXNSMEZETDBJc1NVRkJTWFp4UWl4SFFVRlRMRVZCUTFSUUxFVkJRVk00Y1VJc1JVRkJVVGx4UWl4UFFVTnFRakJpTEVWQlFXRXhZaXhGUVVGVExFVkJRVWs0Y1VJc1JVRkJVVGx4UWl4RlFVRlRMRWRCUVVzNVN5eEZRVU5vUkRZeFFpeEZRVUZSTDNGQ0xFVkJRVk1zUlVGQlNUaHhRaXhGUVVGUkxFZEJRVXMxTVVJc1JVRlhkRU1zU1VGVVFYZHRRaXhGUVVGamJWQXNSVUZCVXpkeFFpeFBRVUZUTEVkQlFUQkNMRzFDUVVGa01HSXNSMEZEZGtNeFlpeEpRVUZWTUdJc1IwRkRXSGh0UWl4RlFVVkJOakZDTEVkQlFWTkRMRWRCUVdWR0xFVkJRVkVzUjBGQlNVRXNSVUZCVVN4SFFVRkpReXhMUVVOc1JISlFMRVZCUVdFeFlpeEZRVUZUTEVWQlFVazVTeXhGUVVGWmQyMUNMRVZCUTNSRE1XSXNSVUZCVXl4SFFVVlllVU1zUlVGQlV6TkZMRWRCUVU4eVJTeExRVU5RYkVNc1JVRkJVVkFzUjBGQlVTeERRVU4yUWl4SlFVRkpNVWNzUlVGQlUzZDRRaXhGUVVGUmRuRkNMRWRCUTJwQ2FrZ3NSMEZEUm5WNFFpeEZRVUZUY0c5Q0xFVkJRVkZ1U2l4RlFVRlJhVWdzUlVGQlQyMWlMRWRCUjNCRExFOUJRVTlxV2l4SlFWbFlMRk5CUVZOdFl5eEhRVUZsTldNc1JVRkJWVWtzUjBGRGFFTXNUMEZCVHl4VFFVRlRUQ3hGUVVGWk1VSXNSMEZETVVJc1IwRkJhMElzVFVGQlpEQkNMRVZCUTBZc1QwRkJUMEVzUlVGRlZDeEpRVUZMSzJoQ0xFZEJRVmt2YUVJc1IwRkRaaXhQUVVGUFF5eEZRVUZUUkN4RlFVRlpNVUlzUjBGTk9VSXNTVUZLUVN4SlFVRkpUQ3hGUVVGVEswSXNSVUZCVnk5Q0xFOUJRM0JDVHl4RlFVRlJOa0lzUlVGQldYQkRMRWRCUVZVc1JVRkRPVUpwY2tJc1JVRkJWMjUwUWl4SFFVRlBhVVVzU1VGRlpFc3NSVUZCV1RkQ0xFMUJRVmxCTEVWQlFWRlFMRXRCUVVGQkxFbEJRMnhEU3l4RlFVRlROSEZDTEVWQlFWTXhjVUlzUjBGQlVVRXNSVUZCVHpCeFFpeExRVWwyUXl4UFFVRlBiSEJDTEVkQlYxZ3NVMEZCVXpCa0xFZEJRV055WkN4SFFVTnlRaXhQUVVGUExGTkJRVk5MTEVWQlFWRndReXhGUVVGVk5tWXNSMEZOYUVNc1NVRk1RU3hKUVVGSk0yWXNSMEZCVXl4RlFVTlVNSEZDTEVWQlFWZHVkRUlzUjBGQlR6SkZMRWRCUTJ4Q1VTeEZRVUZSYVdRc1JVRkJVM3BrTEVkQlEycENla01zUlVGQlUybEVMRVZCUVUxcVJDeFBRVVZhUVN4TFFVRlZMRU5CUTJZc1NVRkJTV2xETEVWQlFVMW5RaXhGUVVGTllpeEZRVUZaY0VNc1NVRkJWMDhzUjBGRGRrTXNTVUZCUVN4SlFVRkpSaXhGUVVGVE5IRkNMRVZCUVZOb2NFSXNSMEZCVFVFc1JVRkJTMmR3UWl4SFFVTXZRaXhOUVVkS0xFOUJRVTk0YjBJc1IwRm5RMWdzVTBGQlUzbHZRaXhIUVVGblFrTXNSMEZEZGtJc1QwRkJUeXhUUVVGVGJtSXNSMEZIWkN4SlFVRkpNVTBzUlVGQllYbE5MRWRCUm1wQ1F5eEZRVUZUTUVNc1IwRkJVekZETEVsQlIyUm5RaXhIUVVGamFFSXNSMEZEWkRsaExFVkJSVUUwWVN4RlFVRk5lRTBzUlVGRFRrRXNSVUZCVnl4SFFVTllNRTBzUlVGQlQyOWlMRTlCUVU4c1IwRkZaRU1zUlVGQlZ5OXVRaXhGUVVOWU5HeENMRWRCUVZVMWJFSXNSVUZCV1N4SFFVRkhiRWdzUzBGQlN5eEpRVU01UWpSVUxFVkJRVTl2V2l4TlFVRk5MRWRCUldwQ0xFOUJRVTkwV2l4RlFVRkpjV0lzUzBGQlowSkZMRWRCVnk5Q0xGTkJRVk5ETEVkQlFXbENReXhIUVVONFFpeFBRVUZQTEZOQlFWTjJZaXhIUVVOa0xFOUJRVTk0VHl4SFFVRlpaM0ZDTEVkQlFVMURMRWRCUVU5NllpeEhRVUZSY1VRc1VVRkJVVGxYTEVkQlFWRXNTMEZCVFdkMlFpeEZRVUZWTEV0QldUVkZMRk5CUVZOSExFZEJRVmM1VHl4SFFVTnNRaXhQUVVGUExGZEJTVXdzU1VGQlNUZGpMRVZCUVU4MGNrSXNWVUZEV0N4UFFVRlJOWEpDTEVWQlFVdERMRkZCUTFnc1MwRkJTeXhGUVVGSExFOUJRVThzU1VGQlNUUmpMRVZCUTI1Q0xFdEJRVXNzUlVGQlJ5eFBRVUZQTEVsQlFVbEJMRVZCUVVzM1l5eEZRVUZMTEVsQlF6ZENMRXRCUVVzc1JVRkJSeXhQUVVGUExFbEJRVWsyWXl4RlFVRkxOMk1zUlVGQlN5eEhRVUZKUVN4RlFVRkxMRWxCUTNSRExFdEJRVXNzUlVGQlJ5eFBRVUZQTEVsQlFVazJZeXhGUVVGTE4yTXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFZEJRVWxCTEVWQlFVc3NTVUZETDBNc1MwRkJTeXhGUVVGSExFOUJRVThzU1VGQlNUWmpMRVZCUVVzM1l5eEZRVUZMTEVkQlFVbEJMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEhRVUZKUVN4RlFVRkxMRWxCUTNoRUxFdEJRVXNzUlVGQlJ5eFBRVUZQTEVsQlFVazJZeXhGUVVGTE4yTXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFZEJRVWxCTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEycEZMRXRCUVVzc1JVRkJSeXhQUVVGUExFbEJRVWsyWXl4RlFVRkxOMk1zUlVGQlN5eEhRVUZKUVN4RlFVRkxMRWRCUVVsQkxFVkJRVXNzUjBGQlNVRXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFZEJRVWxCTEVWQlFVc3NTVUZETVVVc1MwRkJTeXhGUVVGSExFOUJRVThzU1VGQlNUWmpMRVZCUVVzM1l5eEZRVUZMTEVkQlFVbEJMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEhRVUZKUVN4RlFVRkxMRWRCUVVsQkxFVkJRVXNzUjBGQlNVRXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFbEJSWEpHTEVsQlFVazJja0lzUlVGQlkyaFZMRWRCUVZkblJpeEZRVUZMZGtzc1YwRkRPVUoyVWl4RlFVRlRPR0lzUlVGQlMyaGtMRTFCUVUxbmMwSXNSVUZCWVRkeVFpeEhRVWx5UXl4UFFVRlBLMWdzUjBGQlUyaFlMRWRCUVZWQkxFVkJRVk00Y1VJc1IwRm5SSFpETEZOQlFWTkRMRWRCUVZkRExFZEJRMnhDTEU5QlFVOHNVMEZCVXk5d1FpeEZRVUZaY0VJc1JVRkJWM2RDTEVkQlEzSkRMRWxCUVVrNGIwSXNSVUZCVjI1MFFpeEhRVUZQYVVVc1IwRkRkRUlzU1VGQlN5dG9RaXhIUVVGWkwyaENMRWRCUVdFc1EwRkROVUlzU1VGQlNURkNMRVZCUVZjMGEwSXNSMEZCV1hSclFpeEZRVUZYTEVkQlEzUkRiMElzUlVGQllXZFNMRWRCUVV0b1VpeEhRVU5zUW5CQ0xFVkJRVmtzVTBGQlUzTkNMRWRCUVU4c1QwRkJUelZDTEVWQlFWTTBjVUlzUlVGQlUyaHdRaXhIUVVGTlFTeEZRVUZMWjNCQ0xFbEJSV3hGTEVsQlFVa3hjVUlzUlVGQlVYVnlRaXhGUVVGakwzQkNMRVZCUVZsd1FpeEZRVUZYZDBJc1IwRkRha1FzVDBGQlR6VkNMRWRCUVZNc1JVRkJTVEJ4UWl4RlFVRlROWEZDTEVWQlFWY3dRaXhGUVVGWGVFSXNSMEZCVTBFc1IwRkJVM0pNTEVkQlYzcEZMRk5CUVZNMk1rSXNSMEZCVnpOd1FpeEhRVU5zUWl4UFFVRlBOSEJDTEVkQlFWTXNVMEZCVTBNc1IwRkRka0lzU1VGQlNXcHpRaXhGUVVGVGFYTkNMRVZCUVUxcWMwSXNUMEZEWms4c1JVRkJVVkFzUlVGRFVtdHpRaXhGUVVGVGVGVXNSMEZCWTNKR0xGVkJRVlU0V2l4TFFVdHlReXhKUVVoSkwzQkNMRWRCUTBZMmNFSXNSVUZCVFRsV0xGVkJSVVExVml4TFFVRlRMRU5CUTJRc1NVRkJTVllzUlVGQlQyOXpRaXhGUVVGTk1YSkNMRWRCUTJwQ0xFZEJRVzFDTEcxQ1FVRlNWaXhGUVVOVUxFMUJRVTBzU1VGQlNYTlRMRWRCUVZVdll5eEhRVVYwUWl4SFFVRkpPREpDTEVsQlFWZEZMRWRCUVdkRExGZEJRWEpDUXl4SFFVRlplSE5DTEVkQlEzQkRMRWxCUVVsMWMwSXNSVUZCVlN4SlFVRkpNVlVzUjBGQll5eEpRVUZCTEVkQlNYQkRMRWxCUkVGdVdDeEZRVUZSTm5KQ0xFVkJRVlUzY2tJc1JVRkJVVkFzU1VGRGFrSlBMRVZCUVZGUUxFZEJRVkVzUTBGSGRrSXNTVUZCU1hOelFpeEZRVUZYUkN4SFFVWm1lSE5DTEVWQlFVOXZjMElzUlVGQlRURnlRaXhKUVVkVUsxa3NSVUZCYlVJc1YwRkJXbWRVTEVWQlFYZENReXhIUVVGUk1YTkNMRWRCUVZFelN5eEZRVTFxUkdzelFpeEZRVXBGT1ZNc1IwRkJVV3RVTEVkQlFWZHNWQ3hGUVVGTExFdEJRM1JDUVN4RlFVRkxMRXRCUVU5d2FrSXNSVUZCWjBKS0xFVkJRV3RDUlN4RlFVRnZRa2NzUzBGRGFrVnRha0lzUlVGQlN5eEhRVUZIZEZvc1VVRkJjVUlzUjBGQldITmFMRVZCUVVzc1IwRkZiRUk0VXl4RlFVRlJReXhIUVVGWkwxTXNSVUZCU3l4TFFVRkxNVm9zVFVGQlRYZHpRaXhGUVVGVE9WTXNSVUZCU3l4SlFVVnNReXhIUVVGbWVsb3NSVUZCUzBjc1VVRkJaWGR6UWl4SFFVRlhNM05DTEVkQlEzUkRkWE5DTEVWQlFWRkZMRXRCUTFKR0xFVkJRVkZFTEV0QlFVdDBjMElzUjBGSGNrSXNUMEZCVHl4WFFVTk1MRWxCUVVsRkxFVkJRVTgwY2tJc1ZVRkRVRzV5UWl4RlFVRlJWQ3hGUVVGTExFZEJSV3BDTEVkQlFVbHhjMElzUjBGQk1FSXNSMEZCWm5KelFpeEZRVUZMUXl4UlFVRmxkMWdzUjBGQlVXaFlMRWRCUTNwRExFOUJRVTgwY2tJc1JVRkJVVXNzVFVGQlRXcHpRaXhIUVVGUFFTeFJRVXM1UWl4SlFVaEJMRWxCUVVsRUxFVkJRVkVzUlVGRFVrOHNSVUZCVTJRc1JVRkJVMmx6UWl4RlFVRk5NWEpDTEVkQlFVOVlMRTFCUVUxeFdTeExRVUZOYkZrc1IwRkJVVk1zU1VGRk9VTkVMRVZCUVZGUUxFZEJRMlpqTEVWQlFWTnRja0lzUlVGQlRURnlRaXhIUVVGUFRpeExRVUZMWjFrc1MwRkJUVzVZTEVkQlJXNURMRTlCUVU5QkxFdEJkMEppTEZOQlFWTTBja0lzUjBGQllUZHpRaXhGUVVGTk5HSXNSVUZCVXpOaUxFVkJRVk0yY0VJc1JVRkJWVU1zUlVGQlV5dERMRVZCUVdWRExFVkJRV05ETEVWQlFWRkRMRVZCUVV0RExFZEJRM3BITEVsQlFVbERMRVZCUVZGMlVpeEZRVUZWZG14Q0xFVkJRMnhDS3pKQ0xFVkJRVk40VWl4RlFVRlZPV3hDTEVWQlEyNUNkVE5DTEVWQlFWbDZVaXhGUVVGVk4yeENMRVZCUTNSQ2FUQkNMRVZCUVZsd1R5eEhRVUZYTTJ4Q0xFVkJRV3RDUXl4SFFVTjZRMjh6UWl4RlFVRlRNVklzUlVGQlZYSnNRaXhGUVVOdVFuZHRRaXhGUVVGUGMxRXNSVUZCV1dnMFFpeEZRVUZaZHpKQ0xFZEJRVmMzY2tJc1IwRTJRemxETEU5Qk0wTkJMRk5CUVZOMWMwSXNTVUZMVUN4SlFVcEJMRWxCUVVsd2MwSXNSVUZCVXpKeVFpeFZRVUZWTTNKQ0xFOUJRMjVDUkN4RlFVRlBjVUlzUjBGQlRYQkNMRWRCUTJKUExFVkJRVkZRTEVWQlJVeFBMRXRCUTB4U0xFVkJRVXRSTEVkQlFWTnZja0lzVlVGQlZYQnlRaXhIUVVVeFFpeEhRVUZKYzNCQ0xFVkJRMFlzU1VGQlNXNWFMRVZCUVdNd1l5eEhRVUZWYUVJc1IwRkRlRUpwUWl4RlFYQXZTRm9zVTBGQmMwSnNkRUlzUlVGQlQzVlJMRWRCU1ROQ0xFbEJTRUVzU1VGQlNURlJMRVZCUVZOSExFVkJRVTFJTEU5QlEyWmpMRVZCUVZNc1JVRkZUbVFzUzBGRFJFY3NSVUZCVFVnc1MwRkJXVEJSTEV0QlEyeENOVkFzUlVGSFRpeFBRVUZQUVN4RlFWUlVMRU5CYnk5SWQwTm1MRVZCUVUweVVTeEhRVk40UXl4SFFWQkphVm9zU1VGRFJqVndRaXhGUVVGUE1uQkNMRWRCUVZremNFSXNSVUZCVFRSd1FpeEZRVUZWUXl4RlFVRlRReXhKUVVVeFF6aERMRWxCUTBZMWMwSXNSVUZCVDNOeFFpeEhRVUZwUW5SeFFpeEZRVUZOTkhOQ0xFVkJRV1ZETEVWQlFXTXZReXhKUVVVM1JEZHdRaXhIUVVGVmNYUkNMRVZCUTA1NFJDeEhRVUZoTjNCQ0xFVkJRVk1yYzBJc1JVRkJUeXhEUVVNdlFpeEpRVUZKVHl4RlFVRmhOMk1zUjBGQlpURlJMRVZCUVUweVVTeEhRVU4wUXl4UFFVRlBObU1zUjBGRFRERjBRaXhGUVVGTk5HSXNSVUZCVTJsU0xFZEJRV05PTEVWQlFWRXhZaXhaUVVGaE5WRXNSVUZEYkVSRExFVkJRVTExZEVJc1JVRkJXVlFzUlVGQlVVTXNSVUZCUzBNc1JVRkJVUzl6UWl4SFFVY3pReXhKUVVGSk5ISkNMRVZCUVdOeFFpeEZRVUZUYm5SQ0xFVkJRVlZ0V1N4TFFVTnFRM1ZXTEVWQlFVdE9MRVZCUVZsMFFpeEZRVUZaTDNKQ0xFZEJRVkZCTEVWQlkzcERMRTlCV2tGSExFVkJRVk5FTEVWQlFVdERMRTlCUTFZMmMwSXNSVUZEUmpselFpeEZRVGd6UTA0c1UwRkJhVUpKTEVWQlFVODBiRUlzUjBGTGRFSXNTVUZLUVN4SlFVRkpNRWdzUlVGQldYUjBRaXhGUVVGTlNDeFBRVU5zUWtFc1JVRkJVelJXTEVkQlFWVnRVU3hGUVVGUkwyeENMRTlCUVZGNWRFSXNSMEZEYmtORExFVkJRVmQ2VWl4SFFVRlZPV0lzUjBGRmJFSklMRXRCUVZVc1EwRkRaaXhKUVVGSlR5eEZRVUZSZDJ4Q0xFVkJRVkV2YkVJc1IwRkRjRUpITEVWQlFVMUlMRWRCUVZVcldpeEhRVUZSZUZvc1JVRkJUMnQwUWl4SFFVRmhReXhGUVVGVGJuUkNMRWRCUVZOeVRDeEZRVVZvUlN4UFFVRlBhVXdzUlVGVVZDeERRVGt6UTNGQ1NpeEZRVUZOT0hOQ0xFZEJRMXBOTEVkQlFWVnVkRUlzUlVGQlV5eEhRVU0xUWtRc1JVRkJTMjlYTEZWQlJVZzJWeXhIUVVGVFJpeEZRVUZOT1hOQ0xFbEJRMnBDUkN4RlFVRkxReXhQUVVGVE9ITkNMRWRCUlZvM1ZTeE5RVUZSUVN4UFFVRlRhR0VzU1VGQlVXZGhMR2RDUVVGblFtMVZMRWxCUXpORGIwSXNSVUZCU3pWUkxFZEJRVkU0VHl4SFFVRlhPRUlzU1VGRmJrSkJMRVZCUVVjMWRFSXNUVUZCVFdkelFpeEZRVUZoTjNKQ0xFbEJZV3BETEZOQlFWTTBkRUlzUjBGQlpYWjBRaXhGUVVGUmQzUkNMRWRCUXpsQ0xFOUJRVThzVTBGQlUyNXlRaXhGUVVGUmNFTXNSMEZEZEVJc1QwRTFPVVJLTEZOQlFYTkNiME1zUlVGQlVYSkRMRVZCUVZGRExFVkJRVlZETEVkQlNUbERMRTlCU0VGMVpTeEhRVUZYY0dNc1JVRkJVU3hUUVVGVGFrTXNSVUZCVDNsQ0xFVkJRVXRSTEVkQlEzUkRja01zUlVGQlQwVXNSVUZCWVVRc1JVRkJVMGNzUjBGQlVYbENMRVZCUVV0UkxFdEJSWEpEYmtNc1JVRktWQ3hEUVRRNVJIZENiVU1zUlVGQlVYSkRMRVZCUVZGM2RFSXNSVUZCVjNaMFFpeEhRVUZYTEV0QldUbEVMRk5CUVZOM2RFSXNSMEZCYjBKRExFVkJRVlZETEVkQlEzSkRMRTlCUVU4c1UwRkJVM1owUWl4RlFVRlBaMmRDTEVkQlEzSkNMRWxCUVVreFppeEZRVU5LTEVkQlFVbE9MRWxCUVZWMFRDeEhRVUZoYzNKQ0xFbEJRVlYwY2tJc1JVRkRia01zVDBGQlR6WTBRaXhGUVV0VUxFZEJTRWwyZEVJc1NVRkJWWFJNTEVsQlExbzBUQ3hGUVVGVFRpeEhRVVZRWjJkQ0xFbEJRVlYwY2tJc1JVRkJWeXhEUVVOMlFpeEhRVUZKTkV3c1NVRkJWelZNTEVWQlEySXNUMEZCVDNOeVFpeEZRVVZYTEdsQ1FVRlVhR2RDTEVkQlFYRkRMR2xDUVVGVVoyZENMRWRCUTNKRGFHZENMRVZCUVZGMWJrSXNSMEZCWVhadVFpeEhRVU55UW1kblFpeEZRVUZSZFVnc1IwRkJZWFpJTEV0QlJYSkNhR2RDTEVWQlFWRnpia0lzUjBGQllYUnVRaXhIUVVOeVFtZG5RaXhGUVVGUmMwZ3NSMEZCWVhSSUxFbEJSWFpDTVdZc1JVRkJVMmQwUWl4RlFVRlRkSFJDTEVWQlFVOW5aMElzUjBGRk0wSXNUMEZCVHpGbUxFZEJWMWdzVTBGQlUydDBRaXhIUVVGWFF5eEhRVU5zUWl4UFFVRlBha01zUjBGQlV5eFRRVUZUYWtnc1IwRkZka0lzVDBGRVFVRXNSVUZCV1RWcVFpeEhRVUZUTkdwQ0xFVkJRVmRvYVVJc1IwRkJWV3RwUWl4UFFVTnVRMnRDTEVkQlFWTXNVMEZCVTNCdFFpeEhRVU4yUWl4SlFVRkpSQ3hGUVVGVmJWa3NTMEZEWkN4UFFVRlBaMWNzUlVGQlZXeEtMRVZCUVZjc1UwRkJVekZyUWl4SFFVTnVReXhQUVVGUFZDeEhRVUZOVXl4RlFVRlZVQ3hGUVVGVFF5eFRRV1Y0UXl4VFFVRlRiWFZDTEVkQlFXTnNkVUlzUlVGQlVXMTFRaXhIUVVjM1FpeEpRVUZKUXl4SFFVWktSQ3hGUVVGUlFTeEpRVUZWYWpWQ0xFVkJRVmtzU1VGQlRUWjVRaXhIUVVGaGIwY3NTVUZGZWtKdWRVSXNUMEZEZUVJc1IwRkJTVzkxUWl4RlFVRmpMRVZCUTJoQ0xFOUJRVTlCTEVWQlFXTnNTU3hIUVVGWGFVa3NSVUZCVDI1MVFpeEhRVUZWYlhWQ0xFVkJSVzVFTEVsQlFVbHlkRUlzUlVGQlUyOXNRaXhIUVVGWGFVa3NSVUZCVDNKYUxFZEJRVmM1VlN4RlFVRlRPRkVzUjBGQlYzRmtMRXRCUXpsRUxFOUJRVTl3WlN4SFFVRlhiMlVzUjBGRFpHcEdMRWRCUVZWc1dTeEhRVUZqYkZFc1IwRkJVeXhGUVVGSFpDeEhRVUZSTlVRc1MwRkJTeXhKUVVOcVJEQkZMRVZCUVU5emIwSXNUVUZCVFN4RlFVRkhjSEJDTEVkQk5rTjBRaXhUUVVGVGNYVkNMRWRCUVZscWMwSXNSMEZEYmtJc1QwRkJUeXhUUVVGVFoydENMRVZCUVU5UkxFVkJRVXN3U0N4SFFXRXhRaXhQUVZwSlFTeEhRVUYxUWl4cFFrRkJVa0VzUjBGQmIwSjBSQ3hIUVVGbE5VVXNSVUZCVDFFc1JVRkJTekJJTEV0QlEyaEZNVWdzUlVGQlRUQklMRVZCUVU5d05VSXNSMEZIWm10NFFpeEZRVUZSYlVrc1IwRkJVMjVKTEVkQlEySlJMRWxCUVZFeGVFSXNSMEZEVmpCNFFpeEZRVUZOVWl4RlFVTk9RU3hGUVVGUkxFZEJSVkpSTEVWQlFVMHlTQ3hIUVVGVE0wZ3NSMEZ5TjBOeVFpeFRRVUZ0UWxJc1JVRkJUMUVzUlVGQlN6QklMRVZCUVUxc2MwSXNSMEZMYmtNc1NVRktRU3hKUVVGSk4wSXNSMEZCVXl4RlFVTlVVQ3hGUVVGVE1GWXNSMEZCVlZvc1NVRkJXVGhTTEVWQlFVMVNMRWxCUVZWclNTeEhRVUZSTEVsQlFVc3NSMEZETlVSNGRFSXNSVUZCVTAwc1IwRkJUWEJDTEVkQlJWcEJMRXRCUTB4akxFVkJRVTl6UWl4RlFVRlpjRU1zU1VGQlYwOHNSMEZCVXpac1FpeEZRVU4yUTBFc1IwRkJVMnRKTEVWQlJWZ3NUMEZCVDNoMFFpeEZRVlJVTEVOQmR6ZERjVUp6YkVJc1JVRkJUMUVzUlVGRWVFSXdTQ3hGUVVGUFFTeEpRVUZUY0RWQ0xFVkJRV0ZyZUVJc1JVRkJVVkVzUlVGQlRTeEhRVUZMTEVWQlFVc3lTQ3hIUVVGVFJDeEhRVU16UW14elFpeEpRVmQyUXl4VFFVRlRiM05DTEVkQlFUQkNWaXhIUVVOcVF5eFBRVUZQTEZOQlFWTjBkRUlzUlVGQlQyZG5RaXhIUVV0eVFpeE5RVXB6UWl4cFFrRkJWR2huUWl4SFFVRnhReXhwUWtGQlZHZG5RaXhKUVVOMlEyaG5RaXhGUVVGUmFYVkNMRWRCUVZOcWRVSXNSMEZEYWtKblowSXNSVUZCVVdsUExFZEJRVk5xVHl4SlFVVmFjMDRzUlVGQlUzUjBRaXhGUVVGUFoyZENMRWxCY1VJelFpeFRRVUZUSzAwc1IwRkJZekYwUWl4RlFVRk5OR0lzUlVGQlUybFVMRVZCUVZWb1pTeEZRVUZoTlZFc1JVRkJVelp3UWl4RlFVRlZReXhGUVVGVGFVUXNSVUZCVVVNc1JVRkJTME1zUjBGRGNFY3NTVUZCU1RSQ0xFVkJRVlZzVkN4RlFVRlZNMnhDTEVWQlRYaENNbXhDTEVkQlFWbHJWQ3hGUVVGVk16UkNMRVZCUVc5Q1F5eEhRVU14UTNkc1FpeExRVUZoYTFRc1JVRkJWVEUwUWl4RlFVRXdRa1FzU1VGRmFrTklMRWxCUTJRMGJFSXNTMEZCWVRsc1FpeEZRVUZwUWtNc1NVRkZhRU1zU1VGQlNXYzFRaXhGUVVGVkxFTkJRMW92ZFVJc1JVRkJUVFJpTEVWQlFWTXpZaXhGUVZaRE5uVkNMRVZCUVZWb1JpeEZRVUZYZWpCQ0xFVkJSblJDZVRWQ0xFVkJRVlV2UlN4RlFVRlZNVEJDTEVWQlIyUjVOVUlzUlVGQlZYbzFRaXhGUVVGWmVUQkNMRVZCUm5aQ1owWXNSVUZCVlhvMVFpeEZRVUZaTURCQ0xFVkJXWHBDYVVRc1JVRkJVVU1zUlVGQlMwTXNSMEZITlVKcWMwSXNSVUZCVXpSMFFpeEZRVUZUT1hWQ0xFMUJRVTB4U3l4RlFVRlhNRFZDTEVkQlMzWkRMRTlCU2tsd1F5eEhRVUZYTTNOQ0xFbEJRMkpuZGtJc1IwRkJVUzkwUWl4RlFVRlJPSFJDTEVkQlJXeENPWFJDTEVWQlFVODBVQ3haUVVGalFTeEZRVU5rYjJVc1IwRkJaMEpvZFVJc1JVRkJVV3BDTEVWQlFVMDBZaXhIUVZWMlF5eFRRVUZUYzFRc1IwRkJXVFZFTEVkQlEyNUNMRWxCUVVsMGNrSXNSVUZCVDI5VExFZEJRVXRyV2l4SFFVTm9RaXhQUVVGUExGTkJRVk01VUN4RlFVRlJNbFFzUjBGSGRFSXNSMEZHUVROVUxFVkJRVk52VkN4SFFVRlRjRlFzU1VGRGJFSXlWQ3hGUVVGNVFpeE5RVUZpUVN4RlFVRnZRaXhGUVVGSmNGb3NSMEZCVlhGYUxFZEJRVlZFTEVkQlFWa3NUMEZEYmtReFdpeEhRVUZsSzBZc1IwRkJVeXhEUVVkMlF5eEpRVUZKTmxRc1IwRkJVWGhqTEVkQlFWTXlTU3hIUVVGVkxFdEJRVXR1U3l4TlFVRk5MRXRCU1RGRExGTkJSRUZuWlN4SFFVRlJlR01zUjBGR1NUZFRMRVZCUVV0eGRrSXNSVUZCU3l4SFFVRkxMRTFCUVZGQkxFVkJRVXNzUjBGQlMwWXNTMEZGYmtJc1MwRkJTemxrTEUxQlFVMHNUVUZEZGtJc1IwRkJTeXhOUVVGUloyVXNSVUZCU3l4SFFVRkxSaXhKUVVWMlF5eFBRVUZQYm5aQ0xFVkJRVXQzWWl4SlFWZG9RaXhKUVVGSk5FMHNSMEZCWXpGU0xFbEJRVkVzUlVGQlNUVkdMRWRCUVZjc1NVRkJTVFJHTEVkQlFVa3NRMEZCUXl4RlFVRkZMRXRCUVVzc1NVRkJUMmhuUWl4RlFVRnRRaXhUUVVGVEswc3NSMEZETVVZc1QwRkJUeXhKUVVGSmFWWXNSMEZCU1dwV0xFbEJSREpFTm5SQ0xFZEJWelZGTEZOQlFWTkRMRWRCUVdOc1VDeEhRVU55UWl4UFFVRlBMRk5CUVZONlpDeEhRVU5rTEVsQlFVbDVXaXhGUVVGTlF5eEhRVUZQTVZvc1IwRkRha0lzVDBGQlNYbGFMRWRCUVU5NmEwSXNSVUZEUm5sWkxFZEJRVmQ2VGl4SFFVVm9RbmxhTEVkQlFVOXVhMElzUlVGRFJqaFpMRWRCUVZkd1R5eEhRVzR6U1RGQ0xGTkJRWEZDUVN4RlFVRlJVU3hIUVVNelFpeFBRVUZQT1VJc1IwRkJVemhDTEVWQlFVOHNVMEZCVTJoQ0xFZEJRemxDTEUxQlFVOHNRMEZCUTBFc1JVRkJTMUVzUlVGQlQxSXNUVUZHZUVJc1EwRnhNMGw1UWxFc1JVRkJVWGxrTEVWQlFWTjZaQ3hMUVRaQ2VFTXNVMEZCVXpSelFpeEhRVUZYZUhaQ0xFVkJRVTAwWWl4RlFVRlRNMklzUlVGQlV6WndRaXhGUVVGVlF5eEZRVUZUYVVRc1JVRkJVVU1zUlVGQlMwTXNSMEZETVVVc1NVRkJTVWNzUlVGQldYcFNMRVZCUVZVM2JFSXNSVUZETVVJc1NVRkJTM016UWl4SFFVRTBRaXh0UWtGQlVuSjBRaXhGUVVOMlFpeE5RVUZOTEVsQlFVbHpVeXhIUVVGVkwyTXNSMEZGZEVJc1NVRkJTVFJMTEVWQlFWTXljRUlzUlVGQlYwRXNSVUZCVXpOd1FpeFBRVUZUTEVWQlV6RkRMRWRCVWt0QkxFbEJRMGg1WWl4TFFVRmhlbXhDTEVWQlFXOUNReXhIUVVOcVF6QjZRaXhGUVVGWFF5eEZRVUZWTVRCQ0xFZEJSWFpDTkROQ0xFVkJRVTFCTEVsQlFWRTFNMElzUlVGQldUUXpRaXhGUVVGTmNGZ3NSMEZCVlhWYUxFZEJRVlZ1UXl4SFFVRk5MRWRCUXpGRVF5eEZRVUZSUVN4SlFVRlZOek5DTEVWQlFWazJNMElzUlVGQlVXdERMRWRCUVZWc1F5eEhRVU5vUkM5elFpeEhRVUZWTkhCQ0xFVkJRVlZCTEVWQlFWRTFjRUlzVDBGQlV5eEZRVVZxUTNsaUxFVkJRVlY0YkVJc1JVRkJlVUlzUTBGRGNrTXNTVUZCU1RBeVFpeEZRVUZuUW1oRUxFVkJRMmhDYVVRc1JVRkJaV2hFTEVWQlJXNUNSQ3hGUVVGWFF5eEZRVUZWTVRCQ0xFVkJSWFpDTEVsQlFVbHZhMElzUlVGQlR6UlVMRVZCUVZsb05FSXNSVUZCV1hFelFpeEhRVUZSTVhOQ0xFZEJSWFpESzNWQ0xFVkJRVlVzUTBGRFdpOTFRaXhGUVVGTk5HSXNSVUZCVXpOaUxFVkJRVk0yY0VJc1JVRkJWVU1zUlVGQlV5dERMRVZCUVdWRExFVkJRekZFUXl4RlFVRlJReXhGUVVGTFF5eEhRV3RDWml4SFFXWkplbFFzUjBGNU5rSk9MRk5CUVcxQ1FTeEZRVUZOYUdkQ0xFZEJRM1pDTEVsQlFVbHRhVUlzUlVGQlZXNURMRVZCUVVzc1IwRkRabWRYTEVWQlFXRm9Na0lzUlVGQlR5eEhRVU53UW1reVFpeEZRVUZoT1ZRc1JVRkJWVFpVTEVWQlEzWkNNVklzUlVGQlZ6SlNMRWRCUVdNMU5VSXNSVUZCYVVKRExFVkJRWEZDVFN4SFFVVXZSSE0xUWl4RlFVTkJSaXhIUVVGamNEVkNMRWRCUVcxQ2RXeENMRWRCUVZjemJFSXNSMEZETlVOM05VSXNSMEZCWTNBMVFpeEhRVUZ0UW5Wc1FpeEhRVUZYZEd4Q0xFZEJRWEZDYldwQ0xFVkJRVXNzUjBGQlIzUmFMRkZCUVZVeFJ5eEZRVUZQTEVsQlF6RkdaekpDTEVsQlFXVndOVUlzUlVGQlowSkRMRWxCUVhOQ2JVUXNSVUZCVHl4SFFVRkhNRWNzVVVGQlZURkhMRVZCUVU4c1NVRkJVVzFwUWl4SFFVRlhNMnhDTEVWQlIzWkhMRWxCUVUwNGJrSXNTVUZCV1RSU0xFVkJRMmhDTEU5QlFVOXNWeXhGUVVkTVoxY3NSVUZCWVRNMVFpeEpRVU5tTW1wQ0xFVkJRVXNzUjBGQlMyaG5RaXhGUVVGUExFZEJSV3BDYVRKQ0xFZEJRV001VkN4RlFVRlZPV3hDTEVWQlFXbENMRVZCUVVsRkxFZEJSeTlETEVsQlFVa3lTeXhGUVVGUmJFZ3NSVUZCVHl4SFFVTnVRaXhIUVVGSmEwZ3NSVUZCVHl4RFFVTlVMRWxCUVVsdGNFSXNSVUZCVjNKUkxFVkJRVXNzUjBGRGNFSkJMRVZCUVVzc1IwRkJTM0ZSTEVWQlFWZEVMRWRCUVZsRExFVkJRVlZ1Y0VJc1JVRkJUMnhJTEVWQlFVOHNTVUZCVFd0SUxFVkJReTlFT0Zrc1JVRkJTeXhIUVVGTGNWRXNSVUZCVjJ4YUxFZEJRV1UyU1N4RlFVRkxMRWRCUVVscWEwSXNSMEZCWldsRkxFVkJRVThzU1VGSGNrVnJTQ3hGUVVGUmJFZ3NSVUZCVHl4TlFVVmljWGRDTEVWQlFWZHlVU3hGUVVGTExFZEJRMmhDUVN4RlFVRkxMRWRCUVV0eFVTeEZRVUZYVlN4SFFVRnBRbFlzUlVGQlZXNXdRaXhGUVVGUGJFZ3NSVUZCVHl4SlFVRk5hMGdzUlVGRGNFVTRXU3hGUVVGTExFZEJRVXR4VVN4RlFVRlhiRm9zUjBGQlpUWkpMRVZCUVVzc1IwRkJTV3ByUWl4SFFVRmxhVVVzUlVGQlR5eExRVWR5Uld0SUxFVkJRVkZzU0N4RlFVRlBMRTFCUldKblowSXNSVUZCU3l4SFFVRkxPVmtzUjBGSFVqaDFRaXhGUVVGaGNEVkNMRWxCUTJadmFrSXNSVUZCU3l4SFFVRm5RaXhOUVVGWVFTeEZRVUZMTEVkQlFXRm9aMElzUlVGQlR5eEhRVUZMYzJNc1IwRkJWVEJFTEVWQlFVc3NSMEZCU1doblFpeEZRVUZQTEV0QlIzSkVMRTFCUVZoblowSXNSVUZCU3l4TFFVTlFRU3hGUVVGTExFZEJRVXRvWjBJc1JVRkJUeXhKUVVkdVFtZG5RaXhGUVVGTExFZEJRVXRvWjBJc1JVRkJUeXhIUVVOcVFtZG5RaXhGUVVGTExFZEJRVXRwVnl4RlFXeEVXaXhEUVhnMlFtTllMRVZCUVZOMFZpeEhRVVZ5UW5wYUxFVkJRVThyZFVJc1JVRkJVU3hIUVVObWJsUXNSVUZCVlcxVUxFVkJRVkVzUjBGRGJFSTVkVUlzUlVGQlZUaDFRaXhGUVVGUkxFZEJRMnhDYWtZc1JVRkJWMmxHTEVWQlFWRXNSMEZEYmtKb1JpeEZRVUZWWjBZc1JVRkJVU3hMUVVOc1FqZENMRVZCUVZFMlFpeEZRVUZSTEVkQlFVdEJMRVZCUVZFc1MwRkJUekUxUWl4RlFVTXZRbWMwUWl4RlFVRlpMRVZCUVVseWRFSXNSVUZCUzBjc1QwRkRkRUl3Vml4SFFVRlZhMW9zUlVGQlVTeEhRVUZMTlhWQ0xFVkJRVkVzUzBGRmNrSjVZaXhIUVVGWE0yeENMRVZCUVd0Q1F5eExRVU42UXpCc1FpeExRVUZoTTJ4Q0xFVkJRV3RDUXl4SlFVVTFRakJzUWl4SFFVRlhRU3hIUVVGWE9XeENMRVZCUjNwQ2JVd3NSVUZFVXpKaExFZEJRVmN6YkVJc1IwRkJiVUl5YkVJc1IwRkJWekZzUWl4RlFYQm5RblJFTEZOQlFYRkNPRW9zUlVGQlRUUmlMRVZCUVZOelVpeEhRVU5zUXl4SlFVRkpibEVzUlVGQlR6aFBMRWRCUVZjM2NrSXNSMEYzUW5SQ0xFOUJkRUpCTEZOQlFWTjFjMElzU1VGTlVDeEpRVXhCTEVsQlFVbHdjMElzUlVGQlV6SnlRaXhWUVVGVk0zSkNMRTlCUTI1Q1JDeEZRVUZQY1VJc1IwRkJUWEJDTEVkQlEySlBMRVZCUVZGUUxFVkJRMUl3VVN4RlFVRmpNR01zUjBGQlZXaENMRWRCUlhKQ04zSkNMRXRCUTB4U0xFVkJRVXRSTEVkQlFWTnZja0lzVlVGQlZYQnlRaXhIUVVVeFFpeEpRVUZKY1hCQ0xFVkJRVmMxY0VJc1JVRkJVeXhIUVVGTFJDeEZRVUZMTEV0QlFVOHlVU3hIUVVGbE0xRXNSVUZCUzBNc1JVRkJVeXhMUVVGUE1GRXNSVUZEZWtVc1IwRkRRVVFzUjBGQlpURlJMRVZCUVUweVVTeEhRVWQ2UWl4UFFVUkJNVkVzUjBGQlZUUndRaXhGUVVGUk5YQkNMRkZCUTB3cmMwSXNSVUZEU2xFc1IwRkRUREYwUWl4RlFVRk5OR0lzUlVGQlUybFNMRWRCUVdOT0xFVkJRVkV4WWl4WlFVRmhlR0lzUlVGRGJFUTJTeXhGUVVGTk5uQkNMRVZCUVZNeE1FSXNSVUZCVjBFc1JVRkJWell6UWl4RlFVRlJMM05DTEVkQlJ6RkRTaXhIUVVSSGNWa3NUVUZCVVVFc1QwRkJVMmhoTEVsQlFWRm5ZU3huUWtGQlowSnRWU3hGUVVGWGVGQXNSVUZCVHk5akxFVkJRM0JFYjFrc1MwRkJUV3haTEVsQmRrSXpRaXhEUVhGblFubENSaXhGUVVGTk5HSXNSVUZCVTNOU0xFZEJRekZDZEZJc1IwRkJWM3BzUWl4SFFVRnhRbmxzUWl4SlFVRlpPV3hDTEVWQlFXbENTeXhKUVVGM1FqUjZRaXhGUVVGUk5YQkNMRTlCUnpsR01ITkNMRWRCUVdFNWMwSXNUVUZCVFRGTExFVkJRVmN3TlVJc1IwRTVUek5ETEZOQlFYVkNMM1ZDTEVWQlFVMDBZaXhGUVVGVE0ySXNSVUZCVXpad1FpeEhRVU0zUXl4SlFVRkpjMFFzUlVGQlUzaFNMRVZCUVZVNWJFSXNSVUZEYmtKcGJrSXNSVUZCVHpoUExFZEJRVmMzY2tJc1IwRnJRblJDTEU5QmFFSkJMRk5CUVZOMWMwSXNTVUZSVUN4SlFWQkJMRWxCUVVsMFF5eEhRVUZoTEVWQlEySkRMRVZCUVdFMFFpeFZRVUZWTTNKQ0xFOUJRM1pDYVhGQ0xFZEJRV0VzUlVGRFlrTXNSVUZCWVZBc1JVRkJVek53UWl4UFFVTjBRa1FzUlVGQlQzRkNMRWRCUVUwNGIwSXNSVUZCWVVnc1IwRkRNVUo1UkN4RlFVRk5kbFlzVFVGQlVVRXNUMEZCVTJoaExFbEJRVkZuWVN4blFrRkJaMEp0VlN4RlFVRlhlRkFzUlVGQlR5OWpMRWxCUlRWRWIzRkNMRVZCUVZsRExFZEJRMjVDYm5GQ0xFVkJRVXRyY1VJc1IwRkJZVTRzUlVGQlUwMHNSMEZGTjBJc1MwRkJUMFlzUzBGRFRHaHhRaXhGUVVGTGEzRkNMRXRCUVdVd1FpeFpRVUZaTjBJc1IwRkZiRU1zVDBGQlQyeHhRaXhIUVVGTk5IUkNMRVZCUVVsUUxFVkJRVk51ZEVJc1JVRkJWVzFaTEV0QlFVMXNXU3hKUVd4Q09VTXNRMEUwVHpKQ1JpeEZRVUZOTkdJc1JVRkJVek5pTEVWQlFWTTJjRUlzVVVGS0wwTXNTVUZCU1RkdlFpeEZRV2h0UWxJc1UwRkJiMEpxUWl4RlFVRk5OR0lzUlVGQlV6TmlMRWRCUTJwRExFbEJRVWx0ZEVJc1JVRkJVM2hTTEVWQlFWVTViRUlzUlVGRGJrSnBia0lzUlVGQlR6aFBMRWRCUVZjM2NrSXNSMEZOZEVJc1QwRktRU3hUUVVGVGRYTkNMRWxCUlZBc1QwRkVWVzVWTEUxQlFWRkJMRTlCUVZOb1lTeEpRVUZSWjJFc1owSkJRV2RDYlZVc1JVRkJWM2hRTEVWQlFVOHZZeXhIUVVNelJFUXNUVUZCVFhGMFFpeEZRVUZUYm5SQ0xFVkJRVlZ0V1N4TFFVRk5NRlFzV1VGT04wTXNRMEZuYlVJMFFqbHlRaXhGUVVGTk5HSXNSVUZCVXpOaUxFZEJVM3BETEU5QlFVOW5ka0lzU1VGRVRYaFdMRVZCUVU5clRpeEhRVUZqY1Vrc1NVRkRTaTkwUWl4RlFVRlJPSFJDTEVkQlFWVXZkVUlzUlVGQlRUUmlMRWRCWlhoRUxGTkJRVk5uVlN4SFFVRjFRbXhXTEVWQlFWVTBTU3hGUVVGVmJHaENMRVZCUVV0UkxFZEJRM1pFTEU5QlFVazRXQ3hKUVVGaGNteENMRWRCUTFwcmJFSXNSMEZCUjBjc1JVRkJWV2hKTEVkQlFWbDBVU3hOUVVGVk1GRXNSMEZCWlRGVExFdEJRVXQzUXl4RlFVRlJVaXhIUVVNelJHdG9RaXhGUVVWR05Va3NSVUZwUWxRc1UwRkJVMjFXTEVkQlFXOUNibFlzUlVGQlZUUkpMRVZCUVZWc2FFSXNSVUZCUzFFc1JVRkJVVzVLTEVWQlFWRnhhVUlzUjBGUGNFVXNUMEZPU1RkRUxFZEJRVk41UXl4SlFVRmhla01zUjBGQlUzRk1MRXRCUldwRGVFZ3NSVUZCVFM5TExFbEJRVWwxVXl4RlFVRlZOVWtzUjBGRGNFSTJTaXhIUVVGVk4wb3NSVUZCVlRSSkxFVkJRVlZxZFVJc1JVRkJWM2MyUWl4SFFVRnhRaTlVTEVkQlF6bEVRU3hGUVVGak5FTXNUMEZCUlRSRkxFbEJSVmcxU1N4RlFWbFVMRk5CUVZOdlZpeEhRVUZuUW01MlFpeEhRVU4yUWl4UFFVRlBiV3RDTEVkQlFXTnVhMElzUjBGQlUzUk1MRVZCUVZselRDeEZRV2RDTlVNc1UwRkJVM2RvUWl4SFFVRlpOMmhDTEVWQlFVOXhaMElzUlVGQlR5OUZMRVZCUVZORExFVkJRVms0Uml4RlFVRlhOMFlzUjBGRGFrVXNTVUZCU1hsSExFVkJRVmt6Unl4RlFVRlZhRzFDTEVWQlEzUkNaelJDTEVWQlFWbDBkRUlzUlVGQlRVZ3NUMEZEYkVJMlowSXNSVUZCV1V3c1JVRkJUWGhuUWl4UFFVVjBRaXhIUVVGSmVYUkNMRWRCUVdFMVRTeExRVUZsZFVJc1IwRkJZWFpDTEVWQlFWazBUU3hIUVVOMlJDeFBRVUZCTEVWQlIwWXNTVUZCU1hSUkxFVkJRVlY0UWl4RlFVRk5VaXhKUVVGSmFHSXNSMEZEZUVJc1IwRkJTV2RrTEVkQlFWZDRRaXhGUVVGTlVpeEpRVUZKY1VZc1IwRkRka0lzVDBGQlQzSkVMRWRCUVZkeFJDeEZRVVZ3UWl4SlFVRkphbWRDTEVkQlFWTXNSVUZEVkU4c1IwRkJRVUVzUlVGRFFXOW5RaXhGUVVGUmVrWXNSVUZCVlM5c1FpeEZRVUV3UWl4SlFVRkpkMnBDTEVkQlFWZG9hMElzUlVGTkwwUXNTVUZLUVhsdFFpeEZRVUZOTDBzc1NVRkJTWHBSTEVWQlFVOXhaMElzUjBGRGFrSTNSU3hGUVVGTkwwc3NTVUZCU1RSUUxFVkJRVTl5WjBJc1MwRkhVa2tzUlVGQlVXdDBRaXhIUVVGWExFTkJRekZDTEVsQlFVbHRReXhGUVVGWGVuWkNMRVZCUVUxSkxFZEJRMnBDY1dsQ0xFVkJRVmR3UXl4RlFVRk5hbWRDTEVkQlJYSkNMRWRCUVVsdFlpeEZRVU5HTEVsQlFVbHRTQ3hGUVVGWFZDeEZRVU5ZTVVjc1JVRkJWMnRJTEVWQlFWVm5UaXhGUVVGVmNuWkNMRVZCUVU5cFowSXNSVUZCVDNKblFpeEZRVUZQZDJJc1IwRkRjRVJFTEVWQlFWZHJWU3hGUVVGVmFFNHNSVUZCVlhKcFFpeEZRVUZQU2l4RlFVRlBjV2RDTEVWQlFVODNSU3hIUVVVeFJDeEhRVUZKYTBnc1NVRkJZVE4wUWl4RlFVRlhMRU5CUXpGQ0xFZEJRVWt5ZEVJc1JVRkRSaXhUUVVWR0wyaENMRWRCUVVGQkxFVkJRMEVzVFVGSFJpeEhRVUZKYjJkQ0xFZEJRMFlzU1VGQlMzWm1MRWRCUVZVMlpTeEZRVUZQTEZOQlFWTnZReXhGUVVGVk9VSXNSMEZEYmtNc1NVRkJTelZrTEVkQlFWTm5aU3hGUVVGTlNpeExRVU5tT0U4c1NVRkJZV2hPTEVkQlFWbHdRaXhGUVVGVmIwOHNSVUZCVldoT0xFVkJRVlZ1U0N4RlFVRlRReXhGUVVGWlF5eEpRVU12UlN4UFFVRlBkVVlzUlVGQlMyeElMRXRCUVVzNFJ5eExRVVZxUWl4RFFVTk9hR2RDTEVkQlFVRkJMRVZCUTBFc1dVRkZSeXhIUVVORU9IVkNMRWxCUVdGb1RpeEpRVU5ZY0VJc1JVRkJWVzlQTEVWQlFWVm9UaXhGUVVGVmJrZ3NSVUZCVTBNc1JVRkJXVU1zUjBGRGNFUXNRMEZEVERkaExFZEJRVUZCTEVWQlEwRXNUMEZMU2l4UFFVWkJObUVzUlVGQll6UkRMRTlCUVVWd1pTeEhRVU5vUW5kaUxFVkJRV00wUXl4UFFVRkZhVU1zUjBGRFZERm1MRVZCZVV0VUxGTkJRVk5yY2tJc1IwRkJVMjV6UWl4SFFVTm9RaXhQUVVGUGQyMUNMRWRCUVZsRExFZEJRVk42YlVJc1JVRkJUVE5MTEVWQlFWY3lOa0lzU1VGQlZXaDNRaXhGUVVGUExFbEJWV2hGTEZOQlFWTjVaQ3hIUVVGWE4yRXNSMEZEYkVJc1QwRkJUM2RrTEVkQlFXVjRaQ3hGUVVGUmMxRXNSMEZCVFRCS0xFbEJWM1JETEZOQlFWTlpMRWRCUVdFMVlTeEhRVU53UWl4UFFVRlBkMlFzUjBGQlpYaGtMRVZCUVZFcldpeEhRVUZSUkN4SlFWVjRReXhKUVVGSloxRXNSMEZCVnpkV0xFZEJRV2xDTEZOQlFWTTNWeXhIUVVOMlF5eFBRVUZQTmxjc1IwRkJVWGxGTEVsQlFVbDBZaXhKUVVSSmMzWkNMRWRCVjNwQ0xGTkJRVk01UXl4SFFVRlplSE5DTEVkQlMyNUNMRWxCU2tFc1NVRkJTV2xDTEVWQlFWVnFRaXhGUVVGTGIybENMRXRCUVU4c1IwRkRkRUk1YUVJc1JVRkJVWGRYTEVkQlFWVTNWaXhIUVVOc1FtUXNSVUZCVXpKVExFZEJRV1V4VXl4TFFVRkxNRmNzUjBGQlZ6ZFdMRWRCUVZWWUxFVkJRVTFJTEU5QlFWTXNSVUZGT1VSQkxFdEJRVlVzUTBGRFppeEpRVUZKYzFvc1JVRkJUMjVhTEVWQlFVMUlMRWRCUTJJNGRrSXNSVUZCV1hoWExFVkJRVXQ2V2l4TFFVTnlRaXhIUVVGcFFpeE5RVUZpYVhkQ0xFZEJRWEZDUVN4SFFVRmhhbmRDTEVWQlEzQkRMRTlCUVU5NVdpeEZRVUZMTWtrc1MwRkhhRUlzVDBGQlQyNW9RaXhGUVZWVUxGTkJRVk56YzBJc1IwRkJWWFowUWl4SFFVVnFRaXhQUVVSaE9GTXNSMEZCWlRGVExFdEJRVXR4V0N4SFFVRlJMR1ZCUVdsQ1FTeEhRVUZUZWxnc1IwRkRja1EyVVN4WlFXTm9RaXhUUVVGVGRWVXNTMEZEVUN4SlFVRkpibXRDTEVWQlFWTjNWeXhIUVVGUGFsZ3NWVUZCV1VFc1IwRkZhRU1zVDBGRVFWTXNSVUZCVTBFc1NVRkJWMVFzUjBGQlYyZHFRaXhIUVVGbGRtbENMRVZCUTNaRE5uRkNMRlZCUVZVemNrSXNUMEZCVTJNc1JVRkJUelp4UWl4VlFVRlZMRWRCUVVsQkxGVkJRVlVzU1VGQlRUZHhRaXhGUVZkcVJTeFRRVUZUTkdRc1IwRkJWM1pQTEVWQlFVdHNUeXhIUVVOMlFpeEpRV2RaYVVKNlFpeEZRVU5pZFhaQ0xFVkJhbGxCZWxjc1JVRkJUMjVLTEVWQlFVbG5TaXhUUVVObUxFOUJhVmxuUWl4WFFVUmFORmNzVTBGRVlYWjJRaXhGUVM5WVFYbENMRXRCYVZsdFFpeFZRVUZTT0hSQ0xFZEJRVFJDTEZWQlFWSkJMRWRCUVRSQ0xGZEJRVkpCTEVWQlEzSkVMR05CUVZaMmRrSXNSVUZEVlN4UFFVRldRU3hIUVd4WlJEaFpMRVZCUVcxQ0xHbENRVUZRY2xnc1JVRkJhMElzVTBGQlZ5eFJRVU42UTNGWUxFVkJRVXR1U2l4SlFWVllMRk5CUVZNMFZDeEhRVUZoZEdoQ0xFZEJTWEJDTEVsQlNFRXNTVUZCU1ROQ0xFVkJRVk5wVXl4SFFVRkxkRkVzUjBGRFpIcERMRVZCUVZOakxFVkJRVTlrTEU5QlJXSkJMRXRCUVZVc1EwRkRaaXhKUVVGSmFVTXNSVUZCVFc1Q0xFVkJRVTlrTEVkQlEySlJMRVZCUVZGcFF5eEZRVUZQVWl4SFFVVnVRbTVDTEVWQlFVOWtMRWRCUVZVc1EwRkJRMmxETEVWQlFVdDZRaXhGUVVGUE1HcENMRWRCUVcxQ01XcENMRWxCUlc1RUxFOUJRVTlOTEVWQlYxUXNVMEZCVTNsVUxFZEJRVlU1VWl4RlFVRlJVaXhIUVVONlFpeEpRVUZKZWtJc1JVRTNkVXBTTEZOQlFXdENhVU1zUlVGQlVWSXNSMEZEZUVJc1QwRkJhVUlzVFVGQlZsRXNSVUZCYVVKMlRpeEZRVUZaZFU0c1JVRkJUMUlzUjBGRU4wTXNRMEUyZFVwNVFsRXNSVUZCVVZJc1IwRkROMElzVDBGQlQyMW9RaXhIUVVGaE5XbENMRWRCUVZOQkxFVkJRVkYwVEN4RlFYRkRka01zU1VGQlNYVnVRaXhIUVVGamRrZ3NSMEZCSzBJc1UwRkJVM3BUTEVkQlEzaEVMRTlCUVdNc1RVRkJWa0VzUlVGRFN5eEpRVVZVUVN4RlFVRlRNMFVzUjBGQlR6SkZMRWRCUTFRM1FpeEhRVUZaYzFVc1IwRkJhVUo2VXl4SFFVRlRMRk5CUVZOcFlTeEhRVU53UkN4UFFVRlBOVWtzUjBGQmNVSTNWQ3hMUVVGTGQwTXNSVUZCVVdsaExFOUJUbEp6VkN4SFFXbENha042VkN4SFFVRm5RbkpJTEVkQlFTdENMRk5CUVZONlV5eEhRVVV4UkN4SlFVUkJMRWxCUVVrelFpeEZRVUZUTEVkQlEwNHlRaXhIUVVOTWNFSXNSMEZCVlZBc1JVRkJVVEppTEVkQlFWZG9ZU3hKUVVNM1FrRXNSVUZCVTJsU0xFZEJRV0ZxVWl4SFFVVjRRaXhQUVVGUE0wSXNSMEZPT0VKcmRrSXNSMEZuUW01RE4xUXNSMEZCVTJsRkxFZEJNa1ZpTEZOQlFWTTJVQ3hIUVVGUmVIUkNMRVZCUVZGeFpDeEZRVUZOYjFFc1IwRlBOMElzU1VGS1FTeEpRVUZKTTNaQ0xFZEJRVk1zUlVGRFZGQXNSMEZJU2pobUxFVkJRVTlETEVkQlFWTkVMRVZCUVUxeVpDeEpRVWRLZWtNc1QwRkRaR01zUjBGQlFVRXNTVUZGUzFBc1JVRkJVVkFzUjBGQlVTeERRVU4yUWl4SlFVRkphVU1zUlVGQlRTdGtMRWRCUVUxR0xFVkJRVXQyWml4SlFVTnlRaXhMUVVGTlR5eEZRVUZ0UWl4TlFVRldNa0lzUjBGQmEwSjVkRUlzUlVGQlVYcDBRaXhGUVVGUlVpeEpRVU12UXl4TlFVVkdVU3hGUVVGVFFTeEZRVUZQVWl4SFFVVnNRaXhQUVVGSmJrSXNTMEZCV1ZBc1IwRkJVMUFzUlVGRGFFSmpMRXRCUlZSa0xFVkJRVzFDTEUxQlFWWjVReXhGUVVGcFFpeEZRVUZKUVN4RlFVRlBla01zVTBGRGJFSnRkMElzUjBGQlUyNTNRaXhKUVVGWEsxb3NSMEZCVVRsWUxFVkJRVXRxUXl4TFFVTnFSSGRZTEVkQlFWRXZWU3hKUVVGWGExZ3NSMEZCV1d4WUxFbEJOa0p3UXl4VFFVRlRObG9zUjBGQlowSTNXaXhIUVVOMlFpeE5RVUZ4UXl4dFFrRkJkRUpCTEVWQlFVOXpXaXhoUVVFNFFqUklMRWRCUVZsc2FFSXNSMEZGTlVRc1IwRkVRVzFXTEVkQlFWZHNSU3hIUVVGaGFsSXNTVUU0UlRsQ0xGTkJRVk00WXl4SFFVRmpMMlVzUjBGRGNrSXNUMEZCVDJkWUxFZEJRVkZvV0N4SlFVRlZiVm9zUjBGQldXNWFMRTlCUTJoRGQxUXNTVUZCYjBKNFZDeEhRVUZUUVN4RlFVRk5kMVFzUzBGWE1VTXNVMEZCVXl0R0xFZEJRVkYyV2l4RlFVRlBVaXhIUVVOMFFpeEpRVUZKSzNaQ0xGTkJRV04yZGtJc1JVRkhiRUlzVTBGR1FWSXNSVUZCYlVJc1RVRkJWa0VzUlVGQmFVSjRTaXhGUVVGdFFuZEtMRXRCUjJ4RExGVkJRVklyZGtJc1IwRkRWU3hWUVVGU1FTeEhRVUZ2UW1veFFpeEhRVUZUYlZZc1MwRkJTM3BRTEV0QlEyaERRU3hIUVVGVExFZEJRVXRCTEVWQlFWRXNSMEZCU3l4SFFVRkxRU3hGUVVGUlVpeEZRV0ZxUkN4VFFVRlRaM0pDTEVkQlFXVjRjVUlzUlVGQlQwUXNSVUZCVDJ0RExFZEJRM0JETEVsQlFVdHhWaXhIUVVGVGNsWXNSMEZEV2l4UFFVRkJMRVZCUlVZc1NVRkJTWE4wUWl4VFFVRmplSFpDTEVWQlEyeENMRk5CUVZrc1ZVRkJVbmQyUWl4RlFVTkxhazBzUjBGQldYSm9RaXhKUVVGWGMxZ3NSMEZCVVhoYUxFVkJRVTlyUXl4RlFVRlBla01zVVVGRGNrTXNWVUZCVWl0MlFpeEhRVUZ2UW5oMlFpeExRVUZUYTBNc1NVRkZOMEl5V0N4SFFVRkhNMWdzUlVGQlQyeERMRWRCUVZGRExFZEJZVGRDTEZOQlFWTjVha0lzUjBGQlRYcHFRaXhGUVVGUGFVTXNSMEZEY0VJc1IwRkJTU3RWTEVkQlFWRm9XQ3hIUVVOV0xFOUJRVUVzUlVGRlJpeEpRVUZKZFhaQ0xGTkJRV04yZGtJc1JVRkRiRUlzVVVGQldTeFZRVUZTZFhaQ0xFZEJRVFJDTEZWQlFWSkJMRWRCUVRSQ0xGZEJRVkpCTEVkQlF5OUNMRTFCUVZSMmRrSXNTVUZCYVVJd1pTeEhRVUZUTVdVc1MwRkhka0kxUnl4SFFVRmpjVmNzUzBGQlMzcFFMRXRCUVZjM1J5eEhRVUZoYzFjc1MwRkJTM3BRTEVsQlF6RkRMRTFCUVZacFF5eEhRVUZyUW1wRExFdEJRVk14UXl4SFFVRlBNa1VzUjBGNVFuWkRMRk5CUVZNcmNFSXNSMEZCVnpOelFpeEhRVU5zUWl4SlFVRkplWE5DTEVWQlFWZEVMRWRCUVZsNGMwSXNSMEZEZGtJeVowSXNSVUZCVVd4S0xFZEJRVTluVml4SFFVVnVRaXhIUVVGdlFpeHRRa0ZCVkRsTUxFdEJRWGxDT0V3c1MwRkJXVGRWTEVkQlFWbHdSaXhYUVVNeFJDeFBRVUZCTEVWQlJVWXNSMEZCU1hoVExFbEJRVk15WjBJc1JVRkRXQ3hQUVVGQkxFVkJSVVlzU1VGQlNXeElMRVZCUVU5cFZDeEhRVUZSTDB3c1IwRkRia0lzVVVGQlUyeElMRWRCUVZGNldpeEpRVUZUZVZvc1JVRkJTeXhKUVRkVE5VSnNSQ3hKUVVGWkswWXNSMEZCVHl4SlFVRkpMMFlzUjBGQlV5eEpRVUZKWjJFc1dVRkJXU3hOUVVGUkx6TkNMRWRCUTNoRVoyVXNTVUZCVHpoR0xFZEJRVThzU1VGQlNUbEdMRXRCUVZFMVpTeEhRVU14UWpabExFbEJlSHBNVlN4dlFrRjNla3hETmtZc1IwRkJUemRHTEVkQlFWRXJXaXhaUVVNeFFqbGFMRWxCUVU4MFJpeEhRVUZQTEVsQlFVazFSaXhMUVVGUmVHVXNSMEZETVVKNVpTeEpRVUZYTWtZc1IwRkJUeXhKUVVGSk0wWXNTMEZCV1hKbExFdEJRM0pEWjJ0Q0xFZEJRVk1zVTBGQlV6TmlMRWRCUTJoQ0xFbEJRVWxOTEVWQlFWTnpaaXhIUVVGWE5XWXNSMEZEY0VKdll5eEZRVUZQT1dJc1IwRkJWV3hLTEVWQlFWazBTU3hGUVVGTmRXSXNXVUZCWXpkdFFpeEZRVU5xUkc4M1FpeEZRVUZoTVZRc1JVRkJUeTlHTEVkQlFWTXJSaXhIUVVGUkxFZEJSWHBETEVkQlFVa3dWQ3hGUVVOR0xFOUJRVkZCTEVkQlEwNHNTMEZCU3pGYUxFZEJRVzlDTEU5QlFVOTJaU3hGUVVOb1F5eExRVUZMZVdVc1IwRkJaU3hQUVVGUGNtWXNSVUZETTBJc1MwRkJTM05tTEVkQlFXMUNMRTFCY0RCTWFrSXNiVUpCY1RCTVVDeExRVUZMUXl4SFFVRmxMRTlCUVU5cVppeEZRVU16UWl4TFFVRkxhMllzUjBGQmJVSXNUMEZCVHpsbExFVkJSMjVETEU5QlFVOHlTU3hKUVN0VFdDeEpRVUZKZVhaQ0xFZEJRV0V2WkN4SFFVRmhiMDRzUjBGQllUUlJMRWRCVXpORExGTkJRVk0zVFN4SFFVRlpibXBDTEVkQlEyNUNMRWxCUVVsdll5eEZRVUZQY0dNc1IwRkJVMEVzUlVGQlRYVmlMRmxCUnpGQ0xFOUJRVTkyWWl4TFFVWnhRaXh0UWtGQlVtOWpMRWRCUVhOQ1FTeEZRVUZMZGtzc1YwRkJZMFVzU1VGaEwwUXNVMEZCVXpKU0xFZEJRVzFDTVdwQ0xFZEJRekZDTEU5QlFVOUJMRWRCUVZWQkxFbEJRVlZ6V0N4SFFVRlRkRmdzUjBGWmRFTXNVMEZCVTNkcVFpeEhRVUYzUWk5b1FpeEZRVUZMYTJoQ0xFZEJRM0JETEU5QlFVOHNVMEZCVXpGblFpeEhRVU5rTEU5QlFXTXNUVUZCVmtFc1IwRkhSMEVzUlVGQlQxSXNTMEZCVTJ0b1FpeEpRVU53UWtFc1NVRkJZV3AxUWl4SFFVRmpLMDBzUzBGQlQyNUZMRWRCUVU4eVJTeExRWE5KYUVRc1UwRkJVelpxUWl4SFFVRlRlbTFDTEVWQlFVMTFiVUlzUlVGQlR6ZFdMRWRCUlRkQ0xFOUJSRUUyVml4RlFVRlJNVkVzUjBGQlZUQlJMRWxCUVZWc2VFSXNSVUZCWVRKTExFVkJRVXRITEU5QlFWTXNSVUZCUzI5dFFpeEZRVUZQTEVkQlF6VkVMRmRCVFV3c1NVRk1RU3hKUVVGSmNtMUNMRVZCUVU4MGNrSXNWVUZEVUhCeVFpeEhRVUZUTEVWQlExUlFMRVZCUVZNd1ZpeEhRVUZWTTFZc1JVRkJTME1zVDBGQlUyOXRRaXhGUVVGUExFZEJRM2hEYW0xQ0xFVkJRVkZwUWl4SFFVRk5jRUlzUzBGRlZFOHNSVUZCVVZBc1IwRkRaa2NzUlVGQlRVa3NSMEZCVTFJc1JVRkJTM0Z0UWl4RlFVRlJOMnhDTEVkQlJUbENRU3hIUVVGVExFVkJSVlFzU1VGRVFTeEpRVUZKYTNkQ0xFVkJRVmx5ZGtJc1IwRkJUV2RzUWl4RlFVRlJMRXRCUTNKQ04yeENMRVZCUVZFMmJFSXNSMEZEWm5GTExFVkJRVlZzZDBJc1IwRkJVMUlzUlVGQlMxRXNSMEZITVVJc1QwRkVRV3QzUWl4RlFVRlZja3NzUjBGQlV6ZFdMRVZCUVZWd1VTeEhRVU4wUWxBc1IwRkJUVU1zUlVGQlRXOVpMRXRCUVUxM1dTeEpRVmszUWl4VFFVRlRjbEFzUjBGQlR6TmxMRVZCUVZGeFpDeEhRVU4wUWl4UFFVRlBRU3hGUVVGTE9XWXNUMEZCVXl4RlFVRkplVU1zUlVGQlUyOWtMRWRCUVZGd1pDeEZRVUZSYTJ0Q0xFZEJRVlUzUnl4RlFVRk5MRWRCUVVrc1NVRnBRM2hGTEZOQlFWTjVSU3hIUVVGUk9XaENMRVZCUVZGU0xFZEJRM1pDTEVsQlFWa3NaMEpCUVZKQkxFZEJRV2RFTEcxQ1FVRm9RbEVzUlVGQlQxSXNTMEZKYUVNc1lVRkJVRUVzUlVGSlNpeFBRVUZQVVN4RlFVRlBVaXhIUVdsQ2FFSXNTVUZCU1RSelFpeEhRVUZWTmtJc1IwRkJVMnhMTEVsQlZXNUNNMUlzUjBGQllVUXNTVUZCYVVJc1UwRkJVeTlWTEVWQlFVMDBaQ3hIUVVNdlF5eFBRVUZQZUdZc1IwRkJTelJYTEZkQlFWZG9WaXhGUVVGTk5HUXNTVUZYTTBJMFNTeEhRVUZqY1Vzc1IwRkJVMnBMTEVsQldUTkNMRk5CUVZOeFNTeEhRVUZuUWpGRExFVkJRVk4xUlN4RlFVRlhiRllzUjBGRE0wTXNTVUZCU1c1cFFpeEZRVUZWY1ROQ0xFVkJRVmtzUjBGRE1VSXNUMEZCVDNSTExFZEJRVmtyUml4RlFURmlja0lzVTBGQk1rSTVlVUlzUlVGQlVYTXpRaXhIUVVOcVF5eEpRVUZKTlhkQ0xFVkJRVk0wZDBJc1JVRkJVVFYzUWl4UFFVTnlRaXhKUVVGTFFTeEZRVU5JTEU5QlFVOHhSeXhGUVVWVUxFbEJRVWw1V0N4RlFVRlpMMUVzUlVGQlV5eEZRVWQ2UWl4UFFVWkJOSGRDTEVWQlFWRTNaaXhKUVVGakwxRXNSVUZCVXl4RlFVRkpMRXRCUVU4c1NVRkJUVFIzUWl4RlFVRlJOMllzUjBGRGVFUTJaaXhGUVVGVlFTeEZRVUZSZURCQ0xFdEJRVXMwUkN4RlFVRlRMRVZCUVVrc1MwRkJUeXhMUVVOd1F6RkhMRVZCUVU4cldpeFJRVUZSYkZvc1IwRkJaU3gxUWtGQmVVSjVNa0lzUlVGQlZTeFZRVkl4UlN4RFFUQmlaMFIwTTBJc1JVRnhTR2hFTEZOQlFUSkNjek5DTEVWQlFWTnVWaXhIUVU5c1F5eFBRVTVCYUdJc1IwRkJWVEZLTEVWQlFWY3NVMEZCVTIwMFFpeEhRVU0xUWl4SlFVRkpNWFZDTEVWQlFWRXNTMEZCVHpCMVFpeEZRVUZMTEVkQlEyNUNlbFFzUlVGQlZYbFVMRVZCUVVzc1MwRkJVVzUxUWl4SFFVRmpOblpDTEVWQlFWTndkMElzU1VGRGFrUnZkMElzUlVGQlVUVlhMRXRCUVV0NFdpeExRVWRXYjNkQ0xFVkJRVkY2VEN4UFFWQnFRaXhEUVROeFFrRXNVMEZCZDBJM2NrSXNSMEZEZEVJc1NVRkJTVEpZTEVWQlFWRXpXQ3hGUVVGUE1sZ3NUVUZCVFRkWExFbEJRM3BDTEU5QlFVODJWeXhGUVVGUlFTeEZRVUZOTEVkQlFVZERMRTFCUVUwM1Z5eEpRVUZyUWl4SFFVWnNSQ3hEUVhOcVFubEdaaXhIUVVGVGJXbENMRXRCV1d4SExGTkJRVk5wVml4SFFVRlROM2RDTEVkQlEyaENMRWxCUVVsbmVFSXNSVUZCVVN4RlFVTlNReXhGUVVGaExFVkJSV3BDTEU5QlFVOHNWMEZEVEN4SlFVRkpReXhGUVVGUmFtSXNTMEZEVW10aUxFVkJRVmt4TmtJc1IwRkJXWGsyUWl4RlFVRlJSQ3hIUVVkd1F5eEhRVVJCUVN4RlFVRmhReXhGUVVOVVF5eEZRVUZaTEVkQlEyUXNTMEZCVFVnc1IwRkJVM2cyUWl4RlFVTmlMRTlCUVU5ek1VSXNWVUZCVlN4UlFVZHVRbXRHTEVWQlFWRXNSVUZGVml4UFFVRlBhSGhDTEVWQlFVdEVMRTFCUVUweFN5eEZRVUZYZVRKQ0xGbEJXV3BETEZOQlFWTnpSaXhIUVVGWk9YZENMRVZCUVU5cFVTeEhRVU14UWl4SlFVRkpOMUFzUjBGQlV5eEZRVU5VVUN4RlFVRlRSeXhGUVVGTlNDeFBRVU5tSzFFc1JVRkJXUzlSTEVWQlFWTXNSVUZIZWtJc1NVRkVRVzlSTEVWQlFVOUJMRWxCUVZOc1lpeEZRVUZaT0Vzc1JVRkJVMjlSTEVsQlF6VkNOMUFzUlVGQlVUWlFMRWRCUVUwc1EwRkRja0lzU1VGQlNUaG5RaXhGUVVGUGFGZ3NSMEZCVnpOYUxFVkJRVTkzVVN4SFFVTjZRblpSTEVWQlFWRk1MRVZCUVUwcmQwSXNSMEZGYkVJdmQwSXNSVUZCVFN0M1FpeEhRVUZSTDNkQ0xFVkJRVTFKTEVkQlEzQkNTaXhGUVVGTlNTeEhRVUZUUXl4RlFVZHFRaXhQUVVSQlRDeEZRVUZOU0N4UFFVRlRiMUVzUlVGRFVtcFJMRVZCVlZRc1NVRjBWRTFYTEVkQlQwRnhReXhIUVN0VFJqWnNRaXhKUVhSVVJXeHZRaXhIUVVGVGNYZENMRWRCYzFSclFpeFRRVUZUYm1oQ0xFZEJRM2hETEVsQlFVbHNVQ3hGUVVGVExFZEJUMklzVDBGT05rSXNTMEZCZWtKclVDeEZRVUZQYjJoQ0xGZEJRVmNzU1VGRGNFSjBkMElzUlVGQlQydGFMRXRCUVVzc1NVRkZaR2hMTEVWQlFVOXhSQ3hSUVVGUmVGb3NSMEZCV1N4VFFVRlRiMWdzUlVGQlQyOUxMRVZCUVZGblZ5eEZRVUZQUXl4SFFVTjRSSGgzUWl4RlFVRlBhMW9zUzBGQlMzRllMRVZCUVZGRExFVkJRVlZxWlN4UlFVRlJPVmtzUjBGQll5eE5RVUZUT0dkQ0xFZEJRVlZ3U3l4TFFVVnNSVzVSTEVkQk9WUnZRaXhUUVVGVGJVSXNSMEZKYkVNc1QwRnFkMDFwUWl4TlFUaDJUV0pyUWl4SFFVRk5hVTRzVFVGRFVtcE9MRWRCUVUweVZpeFJRVVZFTjFjc1NVRkhUR3RDTEVkQlFWRnlReXhIUVVGUGNVTXNUVUZEV25KRExFbEJaMVZVTEZOQlFWTnJaaXhIUVVGTmVHWXNSMEZEWWl4SFFVRnZRaXhwUWtGQlZFRXNSMEZCY1VJd1pTeEhRVUZUTVdVc1IwRkRka01zVDBGQlQwRXNSVUZGVkN4SlFVRkpUU3hGUVVGVlRpeEZRVUZSTEVkQlEzUkNMRTFCUVd0Q0xFdEJRVlpOTEVkQlFXdENMRVZCUVVsT0xFbEJRVmRxU3l4RlFVRlpMRXRCUVU5MVN5eEZRVlU1UkN4VFFVRlRLMVlzUjBGQlUyaFlMRWRCUTJoQ0xFZEJRVmtzVFVGQlVrRXNSVUZCWXl4RFFVTm9RaXhKUVVORkxFOUJRVTgwVXl4SFFVRmhlRk1zUzBGQlMwb3NSMEZEZWtJc1RVRkJUMlFzU1VGRFZDeEpRVU5GTEU5QlFWRmpMRVZCUVU4c1IwRkRaaXhOUVVGUFpDeExRVVZZTEUxQlFVOHNSMEUwUWxRc1UwRkJVelJaTEVkQlFXRjVWU3hIUVVOd1FpeEhRVUZKUVN4aFFVRnRRak5WTEVkQlEzSkNMRTlCUVU4eVZTeEZRVUZSYlVZc1VVRkZha0lzU1VGQlNYcDNRaXhGUVVGVExFbEJRVWswVnl4SFFVRmpNRlVzUlVGQlVXeFZMRmxCUVdGclZTeEZRVUZSYUZVc1YwRkpOVVFzVDBGSVFYUllMRVZCUVU5eFdDeFpRVUZqT0VRc1IwRkJWVzFSTEVWQlFWRnFWU3hoUVVOMlEzSllMRVZCUVU5MVdDeFZRVUZoSzFRc1JVRkJVUzlVTEZWQlF6VkNkbGdzUlVGQlQzZFlMRmRCUVdFNFZDeEZRVUZST1ZRc1YwRkRja0o0V0N4RlFYTkpWQ3hKUVVGSk1IZENMRWRCUVdGeVRDeEhRVUZUTEZOQlFWTm9iVUlzUlVGQlQyMUNMRWRCUTNoRExFOUJRVTl2YWtJc1IwRkJhMEoyYTBJc1IwRkRja0oxWkN4SFFVRmxkbVFzUlVGQlQybG1MRWRCUVZrNVpDeEZRVUZSTEVWQlFVZHZha0lzU1VGQlFVRXNTVUZETjBNc1MwRTJRa1lyVFN4SFFVRmxkRXdzUjBGQlV5eFRRVUZUYUcxQ0xFVkJRVTl0UWl4SFFVTXhReXhKUVVGSmFrSXNSVUZCVjJkb1FpeEhRVUZMTDJZc1IwRkpjRUlzVDBGSVNXOXFRaXhIUVVGclFuSnJRaXhMUVVOd1FrRXNSVUZCVjI1TUxFZEJSVTUzZGtJc1IwRkJhMEoyYTBJc1IwRkRja0oxWkN4SFFVRmxkbVFzUlVGQlQybG1MRWRCUVZrNVpDeEZRVUZSTEVWQlFVZHZha0lzU1VGQlFVRXNSMEZCTUVKUExFZEJRVmsxYTBJc1JVRkJWU3hKUVVNM1JpeExRVEJDUm5GNFFpeEhRVUZwUW5aTUxFZEJRVk1zVTBGQlUyaHRRaXhGUVVGUGJVSXNSMEZETlVNc1NVRkJTVW9zUlVGQllXMW5RaXhIUVVGTEwyWXNSMEZKZEVJc1QwRklTVzlxUWl4SFFVRnJRbmhxUWl4TFFVTndRa0VzUlVGQllXaE5MRWRCUlZKM2RrSXNSMEZCYTBKMmEwSXNSMEZEY2tKMVpDeEhRVUZsZG1Rc1JVRkJUMmxtTEVkQlFWazVaQ3hGUVVGUkxFVkJRVWR2YWtJc1NVRkJRVUVzUjBGQk1FSjRka0lzUlVGQlYyZE5MRWRCUTJ4R0xFdEJjMDlPTEZOQlFWTjVkMElzUjBGQlZYaDRRaXhGUVVGUFVTeEZRVUZYZDBJc1IwRkRia01zU1VGQlNXNURMRVZCUVd0Q0xFMUJRVlJITEVWQlFXZENMRVZCUVVsQkxFVkJRVTFJTEU5QlEzWkRMRWxCUVV0QkxFVkJRMGdzVDBGQlVTeEZRVVZXTEVsQlFVbFBMRVZCUVhGQ0xFMUJRV0kwUWl4RlFVRnZRaXhGUVVGSk9ITkNMRWRCUVZVNWMwSXNSMEZKT1VNc1QwRklTVFZDTEVWQlFWRXNTVUZEVmtFc1JVRkJVVzFXTEVkQlFWVXhWaXhGUVVGVFR5eEZRVUZQTEVsQlJUZENNa0lzUjBGQll5OUNMRVZCUVU4NGEwSXNSMEZCV1hSclFpeEZRVUZYTEVkQlFVbEtMRWRCYzBONlJDeFRRVUZUY1hoQ0xFZEJRV042ZUVJc1JVRkJUMUVzUlVGQlYzZENMRWRCUTNaRExFbEJRVWx1UXl4RlFVRnJRaXhOUVVGVVJ5eEZRVUZuUWl4RlFVRkpRU3hGUVVGTlNDeFBRVU4yUXl4SlFVRkxRU3hGUVVOSUxFOUJRVkVzUlVGRlZpeEpRVUZKVHl4RlFVRlJVQ3hGUVVGVExFVkJUM0pDTEU5QlRrbHRReXhKUVVGamFrNHNTVUZEYUVKeFRDeEZRVUZSTUhWQ0xFZEJRVlU1YzBJc1IwRkRiRUkxUWl4RlFVRlJORUlzUlVGQldTeEZRVU5vUW5WVUxFZEJRVlV4Vml4RlFVRlRUeXhGUVVGUExFZEJRekZDY1ZZc1IwRkJWWEpXTEVWQlFVOVFMRVZCUVZNc1NVRkZla0pyUXl4SFFVRmpMMElzUlVGQlR6aHJRaXhIUVVGWmRHdENMRVZCUVZjc1IwRkJTVW9zUjBGQlFVRXNSMEZwUW5wRUxGTkJRVk56ZGtJc1IwRkJVVEYyUWl4SFFVVm1MRTlCUkhOQ0xFMUJRVlJCTEVkQlFXOUNRU3hGUVVGTlNDeFBRVU4yUW05bUxFZEJRVmxxWml4RlFVRlBMRWRCUVVzc1IwRm5SekZETEZOQlFWTXdlRUlzUjBGQlN6RjRRaXhIUVVOYUxFOUJRVkZCTEVkQlFWTkJMRVZCUVUxSUxFOUJRVlZITEVWQlFVMHNSMEZCUzJwTUxFVkJNRVU1UXl4SlFVRkpORGhDTEVkQlFXVXpUQ3hIUVVGVExGTkJRVk4yUml4SFFVTnVReXhKUVVGSmJWSXNSVUZCVXpWM1FpeEhRVUZUZVdZc1JVRkJVV3RKTEVsQlF6bENMRTlCUVZGcFNpeEZRVUZQTDNoQ0xGRkJRVlVyZUVJc1JVRkJUeXhMUVVGUGJsSXNSVUZCVHl4SFFVTXhRMFFzUjBGQmFVSnZVaXhIUVVOcVFpeExRVEJDUmtNc1IwRkJhVUkzVEN4SFFVRlRMRk5CUVZOMlJpeEhRVU55UXl4SlFVRkpkbWRDTEVWQlFWZG5hRUlzUjBGQlMxUXNSMEZEYUVKdFVpeEZRVUZUTlhkQ0xFZEJRVk41Wml4RlFVRlJhMGtzU1VGUE9VSXNUMEZNU1hwdlFpeEpRVUZoWjJoQ0xFZEJRVXN3VVN4SFFVTndRakY0UWl4RlFVRlhia3dzUlVGRldEWTRRaXhGUVVGUGRsUXNUVUZGUkhWVUxFVkJRVTh2ZUVJc1VVRkJWU3Q0UWl4RlFVRlBMRXRCUVU5dVVpeEZRVUZQTEVkQlF6RkRSQ3hIUVVGcFFtOVNMRVZCUVZFNVRTeEhRVUZaTld0Q0xFVkJRVlVzU1VGREwwTXNTMEYzUWtZMGVFSXNSMEZCYlVJNVRDeEhRVUZUTEZOQlFWTjJSaXhIUVVOMlF5eEpRVUZKTVdZc1JVRkJZVzFuUWl4SFFVRkxWQ3hIUVVOc1FtMVNMRVZCUVZNMWQwSXNSMEZCVTNsbUxFVkJRVkZyU1N4SlFVMDVRaXhQUVVwQk5XNUNMRVZCUVd0RExHMUNRVUZrUVN4RlFVRXlRa0VzUlVGQllXaE5MRWxCUlRGRU5qaENMRVZCUVU5MlZDeE5RVVZFZFZRc1JVRkJUeTk0UWl4UlFVRlZLM2hDTEVWQlFVOHNTMEZCVDI1U0xFVkJRVThzUjBGRE1VTkVMRWRCUVdsQ2IxSXNSVUZCVVRjNFFpeEZRVUZYWjAwc1IwRkRjRU1zUzBGdlEwNHNVMEZCVTIxblFpeEhRVUZMYkdoQ0xFZEJRMW9zU1VGQlNVZ3NSVUZCYTBJc1RVRkJWRWNzUlVGQlowSXNSVUZCU1VFc1JVRkJUVWdzVDBGRGRrTXNUMEZCVDBFc1JVRkJVMGNzUlVGQlRVZ3NSVUZCVXl4SFFVRkxPVXNzUlVGMVJuUkRMRWxCUVVsbk9VSXNSMEZCVHk5TUxFZEJRVk5uVFN4SlFYTkNjRUlzVTBGQlUwRXNSMEZCVVdoNVFpeEZRVUZQYlVJc1IwRkRkRUlzVDBGQlVXNUNMRWRCUVZOQkxFVkJRVTFJTEZGQlFWVnpRaXhIUVVGVlFTeEZRVUZQZEVJc1QwRkRPVU0wYkVJc1IwRkJXWHBzUWl4RlFVRlBiVUlzUjBGRGJrSnVRaXhGUVhGR1RpeEpRVUZKYVhsQ0xFZEJRVk53Unl4SFFVRlRMRk5CUVZNM2NrSXNSVUZCVHpSc1FpeEhRVU53UXl4SlFVRkpMMnhDTEVWQlFXdENMRTFCUVZSSExFVkJRV2RDTEVWQlFVbEJMRVZCUVUxSUxFOUJRMjVEWXl4RlFVRlRhMkVzUjBGQlR6ZGhMRVZCUVU4MGJFSXNSMEZOTTBJc1QwRktRVVFzUjBGQlZ6TnNRaXhGUVVGUFowSXNSMEZCVXpSclFpeEZRVUZUTEZOQlFWTjRiRUlzUjBGRE0wTXNUMEZCVDNkYUxFZEJRVkY0V2l4RlFVRlBVQ3hKUVVGWFR5eEZRVUZSUVN4SlFVTjRRelJyUWl4TFFVRkxTeXhMUVVWRU1XdENMRWxCTWtWVUxGTkJRVk54Vml4SFFVRlJhRmNzUjBGRFppeFBRVUZuUWl4TlFVRlVRU3hGUVVGblFrRXNSVUZCVVN0V0xFZEJRV05xVnl4TFFVRkxSU3hIUVd0aGNFUXNTVUZCU1d0NVFpeEhRVUZSYkUwc1IwRkJVeXhUUVVGVGRrWXNSMEZETlVJc1QwRkJUMjlJTEVkQlFWTTFTU3hIUVVGWmQwSXNSVUZCVVN4RlFVRkhPRVFzU1VGQlFVRXNUVUV3UW5KRE5FNHNSMEZCVlc1TkxFZEJRVk1zVTBGQlUzWkdMRWRCUXpsQ0xFbEJRVWwyWjBJc1JVRkJWMmRvUWl4SFFVRkxWQ3hIUVVsd1FpeFBRVWhKT0VRc1IwRkJhMEp5YTBJc1MwRkRjRUpCTEVWQlFWZHVUQ3hIUVVWT09IbENMRWRCUVZNMVNTeEhRVUZaZDBJc1JVRkJVU3hGUVVGSE9FUXNTVUZCUVVFc1IwRkJNRUpQTEVkQlFWazFhMElzUlVGQlZTeE5RWGRDY2tacmVVSXNSMEZCV1hCTkxFZEJRVk1zVTBGQlUzWkdMRWRCUTJoRExFbEJRVWt4Wml4RlFVRmhiV2RDTEVkQlFVdFVMRWRCUlhSQ0xFOUJSRUV4Wml4RlFVRnJReXh0UWtGQlpFRXNSVUZCTWtKQkxFVkJRV0ZvVFN4RlFVTnlSRGg1UWl4SFFVRlROVWtzUjBGQldYZENMRVZCUVZFc1JVRkJSemhFTEVsQlFVRkJMRWRCUVRCQ2VIWkNMRVZCUVZkblRTeExRV2RIT1VVc1UwRkJVM040UWl4SFFVRk5jbmxDTEVkQlEySXNTVUZCVFVFc1NVRkJVMEVzUlVGQlRVZ3NUMEZEYmtJc1RVRkJUeXhIUVVWVUxFbEJRVWxCTEVWQlFWTXNSVUZQWWl4UFFVNUJSeXhGUVVGUlV5eEhRVUZaVkN4RlFVRlBMRk5CUVZOemVVSXNSMEZEYkVNc1IwRkJTUzlPTEVkQlFXdENLMDRzUjBGRmNFSXNUMEZFUVhwNVFpeEZRVUZUTUZZc1IwRkJWU3RqTEVWQlFVMTZlVUlzVDBGQlVVRXNTVUZCUVVFc1NVRkpPVUkyUXl4SFFVRlZOME1zUlVGQlVTeFRRVUZUVHl4SFFVTm9ReXhQUVVGUFdTeEhRVUZUYUVJc1JVRkJUekJDTEVkQlFXRjBRaXhOUVhsQ2VFTXNVMEZCVTIxNVFpeEhRVUZWZG5sQ0xFVkJRVTlGTEVkQlEzaENMRWxCUVUxR0xFbEJRVk5CTEVWQlFVMUlMRTlCUTI1Q0xFMUJRVThzUjBGRlZDeEpRVUZKWXl4RlFVRlRNSGhDTEVkQlFVMXllVUlzUjBGRGJrSXNUMEZCWjBJc1RVRkJXa1VzUlVGRFMxTXNSVUZGUmtzc1IwRkJVMHdzUlVGQlVTeFRRVUZUTW5oQ0xFZEJReTlDTEU5QlFVODNlVUlzUjBGQlRWTXNSVUZCVlc1TUxFVkJRVmQxT1VJc1MwRjNRblJETEVsQlFVbEZMRWRCUVZWNFRTeEhRVUZUTEZOQlFWTm9iVUlzUlVGQlQyMUNMRWRCUTNKRExFOUJRVTl2YWtJc1IwRkJhMEoyYTBJc1IwRkRja0oxWkN4SFFVRmxkbVFzUlVGQlQyMUNMRWRCUTNSQ0xFdEJjVUpHYzNoQ0xFZEJRVTE2VFN4SFFVRlRMRk5CUVZOMlJpeEhRVU14UWl4UFFVRlBPRWdzUjBGQlVUbHVRaXhIUVVGWloyZENMRVZCUVZFNFJDeFBRVEJDYWtOdFR5eEhRVUZSTVUwc1IwRkJVeXhUUVVGVGRrWXNSMEZETlVJc1NVRkJTWFpuUWl4RlFVRlhaMmhDTEVkQlFVdFVMRWRCU1hCQ0xFOUJTRWs0UkN4SFFVRnJRbkpyUWl4TFFVTndRa0VzUlVGQlYyNU1MRWRCUlU1M2VrSXNSMEZCVVRsdVFpeEhRVUZaWjJkQ0xFVkJRVkU0UkN4SlFVRnZRazhzUjBGQldUVnJRaXhGUVVGVkxFMUJkMEl6UlhsNVFpeEhRVUZWTTAwc1IwRkJVeXhUUVVGVGRrWXNSMEZET1VJc1NVRkJTVEZtTEVWQlFXRnRaMElzUjBGQlMxUXNSMEZGZEVJc1QwRkVRVEZtTEVWQlFXdERMRzFDUVVGa1FTeEZRVUV5UWtFc1JVRkJZV2hOTEVWQlEzSkVkM3BDTEVkQlFWRTVia0lzUjBGQldXZG5RaXhGUVVGUk9FUXNTVUZCYjBKNGRrSXNSVUZCVjJkTkxFdEJiVUpvUlRaNFFpeEhRVUZOTlUwc1IwRkJVM0ZOTEVsQk5rUm1VU3hIUVVGVk4wMHNSMEZCVXl4VFFVRlRka1lzUjBGRE9VSXNTVUZCU1RWblFpeEZRVUZUTkdkQ0xFVkJRVTgxWjBJc1QwRkRhRUpMTEVWQlFWZE1MRVZCUVZNc1JVRkJTVFJuUWl4RlFVRlBOV2RDTEVWQlFWTXNSMEZCU3psTExFVkJSMnBFTEU5QlJFRnRUQ3hGUVVFNFFpeHRRa0ZCV2tFc1IwRkJNRUoxWjBJc1JVRkJUM0JETEUxQlFVOXVaU3hIUVVGWmJrd3NSVUZETDBSM09VSXNSMEZCVlRsU0xFVkJRVkYyWjBJc1MwRnJRek5DTEZOQlFWTTBlVUlzUjBGQlRYcDVRaXhIUVVOaUxFbEJRVWxOTEVWQlFWTjNWeXhIUVVGUE9WY3NSMEZGY0VJc1QwRkVRVTBzUlVGQlQzTllMRmRCUVVGQkxFVkJRMEYwV0N4RlFYTkVWQ3hUUVVGVGNYSkNMRWRCUVVzemNrSXNSVUZCVHpCNVFpeEhRVU51UWl4UFFVRlBRU3hGUVVGWk1YbENMRWRCYlVKeVFpeEpRVUZKTW5sQ0xFZEJRVmx1U0N4SFFVRlRMRk5CUVZNdlVTeEhRVU5vUXl4SlFVRkphbUlzUlVGQlUybGlMRVZCUVUxcVlpeFBRVU5tYjIxQ0xFVkJRVkZ3YlVJc1JVRkJVMmxpTEVWQlFVMHNSMEZCU3l4RlFVTTFRbnBoTEVWQlFWRjVXQ3hMUVVGTFF5eFpRVU5pWjJJc1JVRkJZeXhUUVVGVGVuZENMRWRCUVZVc1QwRkJUM1ZaTEVkQlFVOTJXU3hGUVVGUmQxa3NTVUZGTTBRc1VVRkJTV3BpTEVWQlFWTXNSMEZCUzJsWkxFdEJRVXRGTEZsQlFWbHVXU3hUUVVNM1FsRXNZVUZCYVVKcFdDeEpRVUZwUW5ORExFZEJRVkZ4VFN4TFFVZG9SRFZzUWl4RlFVRlJRU3hGUVVGTk5HOUNMRTFCUVUxb1JDeEhRVUZSUVN4SFFVRlRjRzFDTEVWQlFWTXNSVUZCU1N4TFFVTTFRMjFaTEZsQlFWazJRaXhMUVVGTExFTkJRM0pDYm1Fc1MwRkJVWE56UWl4SFFVTlNjSE5DTEV0QlFWRXNRMEZCUTIxNlFpeEhRVU5VY0hwQ0xGRkJRVmMxU3l4SlFVVk9MRWxCUVVsM2FVSXNSMEZCWTJ4WUxFVkJRVTk1V0N4TFFVRkxSeXhYUVVGWEsxUXNTMEZCU3l4VFFVRlRhSE5DTEVkQlNUVkVMRTlCU0VsSUxFbEJRVmRITEVWQlFVMUlMRkZCUTI1Q1J5eEZRVUZOTmxvc1MwRkJTemxyUWl4SFFVVk9hVXdzUzBGYVFUaFlMRXRCUVV0clZTeExRVUZMSzBjc1MwRXJVR3BDUlN4SFFVRlZNVWtzUjBGQmFVSXNVMEZCVXpWd1FpeEZRVUZSVGl4RlFVRlBlVUlzUjBGRGFrUXdVU3hIUVVGbE1WTXNTMEZCUzJFc1JVRkJVVzFDTEV0QlF6VkNia0lzUlVGQlQyMUNMRWRCUlZSdldTeEhRVUZuUW5aYUxFVkJRVkZ0UWl4RlFVRkxMRXRCYlVrM1FtOTRRaXhIUVVGUGVFZ3NSMEZCVnpoR0xFbEJjVUpzUWpKQ0xFZEJRVmQ2U0N4SFFVRlhLMFlzU1VFeVJ6RkNMRk5CUVZOMmFFSXNSMEZCVVhSUExFVkJRVmt4UWl4SFFVVXpRaXhQUVVSWGJWZ3NSMEZCVVhwV0xFZEJRV04wUWl4SFFVRlphV0VzU1VGRGFrTXpXU3hGUVVGWmEycENMRWRCUVZrMWEwSXNSVUZCVlN4SlFYVkNhRVFzVTBGQlUydDZRaXhIUVVGaGVIaENMRVZCUVZreFFpeEhRVVZvUXl4UFFVUlhiVmdzUjBGQlVYcFdMRWRCYkc5U2RrSXNVMEZCZDBJMVFpeEZRVUZQUlN4SFFVYzNRaXhKUVVaQkxFbEJRVWxNTEVWQlFXdENMRTFCUVZSSExFVkJRV2RDTEVWQlFVbEJMRVZCUVUxSUxFOUJSV2hEUVN4TlFVRkJRU3hKUVVORVN5eEZRVUZUUml4RlFVRk5TQ3hIUVVGVFFTeEZRVUZSUnl4TFFVbDBReXhQUVVGUFFTeEhRVEJ1VWpaRE1tVXNTVUZEZEVNdll5eEZRVUZaYTJwQ0xFZEJRVmsxYTBJc1JVRkJWU3hKUVRCQ2FFUXNTVUZCU1cxNlFpeEhRVUZWT1Vrc1IwRkJhVUlzVTBGQlV6VndRaXhGUVVGUlRpeEZRVUZQZVVJc1IwRkRha1F3VVN4SFFVRmxNVk1zUzBGQlMyRXNSVUZCVVcxQ0xFZEJRemxDYmtJc1JVRkJUMjFDTEVkQlFVc3JXQ3hMUVVGTGVGb3NSMEZGYWtJMldpeEhRVUZuUW5aYUxFVkJRVkZ0UWl4RlFVRkxMRU5CUVVONlFpeE5RWE5GT1VKcGVrSXNSMEZCV1hST0xFZEJRVk1zVTBGQlUzQnJRaXhGUVVGWksyUXNSVUZCVFM5bUxFZEJRMnhFTEVsQlFVbFJMRWRCUVZNc1JVRkRWRFppTEVWQlFYZENMRzFDUVVGU01FUXNSVUZEYUVKb1ppeEZRVUZUWjJwQ0xFZEJRVmt2YUVJc1IwRkJZMWdzUjBGQlRWY3NSVUZCVnk5Q0xGRkJRVlVzUjBGTGJFVXNUMEZJUVRCaExFZEJRVk16V1N4RlFVRlpMRk5CUVZOMlFpeEhRVU0xUWswc1NVRkJVMUFzUjBGQlV6WmlMRVZCUVZONFl5eEhRVUZOYTJkQ0xFVkJRVTEwWml4RlFVRlBWQ3hIUVVGUmIyaENMRWRCUVZjelowSXNSVUZCVDNObUxFVkJRVTB2Wml4TFFVVjZSV1VzU1VFclFrdzBlVUlzUjBGQlVXaEtMRWRCUVdsQ0xGTkJRVk0xY0VJc1JVRkJVVTRzUlVGQlQzbENMRWRCUTI1RWIxa3NSMEZCWjBKMldpeEZRVUZSYlVJc1JVRkJTM3BDTEV0Qk5rTXZRaXhUUVVGVE1sQXNSMEZCU1hCUExFVkJRVmt4UWl4SFFVVjJRaXhQUVVSWGJWZ3NSMEZCVVhwV0xFZEJRV05hTEVkQlFWY3dhVUlzU1VGRGFFTTVhRUlzUlVGQldXdHFRaXhIUVVGWk5XdENMRVZCUVZVc1NVRnJSbWhFTEVsQlFVbHpla0lzUjBGQldXcEtMRWRCUVdsQ0xGTkJRVk0xY0VJc1JVRkJVVTRzUlVGQlQzbENMRWRCUTNaRWJrSXNSVUZCVDIxQ0xFVkJRVTBzUlVGQlNTeEhRVUZISzFnc1MwRkJTM2hhTEVsQlEzaENMRmRCUVdFc1RVRkJUeXhEUVVGRExFZEJRVWtzVFVGdFUzaENiM3BDTEVkQlFWTjZUaXhIUVVGVExGTkJRVk53YTBJc1JVRkJXV2RxUWl4SFFVTjZReXhIUVVGclFpeE5RVUZrYUdwQ0xFVkJRMFlzVFVGQlR5eEhRVVZVTEVsQlFVa3ZRaXhGUVVGVEsydENMRVZCUVZVdmEwSXNUMEZOZGtJc1QwRk1TVUVzUlVGQlV5eEhRVUZMWjNKQ0xFZEJRV1ZxY0VJc1JVRkJXV2RxUWl4RlFVRlZMRWRCUVVsQkxFVkJRVlVzU1VGRGJrVkJMRVZCUVZrc1IwRkRTQzlyUWl4RlFVRlRMRWRCUVV0bmNrSXNSMEZCWldwSExFVkJRVlVzUjBGQlNVRXNSVUZCVlN4SFFVRkpRU3hGUVVGVkxFMUJRelZGUVN4RlFVRlpMRU5CUVVOQkxFVkJRVlVzUzBGRmJFSkVMRWRCUVZrdmFVSXNSVUZCV1hGa0xFZEJRVmt5Uml4RlFVRlhMRWRCUVVrc1RVRnhRbmhFY0ZFc1IwRkJUVVFzU1VGQlZTeFhRVU5zUWl4UFFVRlBlbGNzUjBGQlN6aFVMRXRCUVVzMFF5eFBRVEJFYmtJc1UwRkJVMjFaTEVkQlFVbHFkRUlzUlVGQlRXbEVMRVZCUVVkcGIwSXNSMEZIY0VJc1QwRkdRV3B2UWl4RlFVRkphVzlDTEVWQlFWRTNNVUlzUlVGQldUUk9MRVZCUTNoQ1FTeEZRVUZMYWtRc1IwRkJZU3hOUVVGTWFVUXNSVUZCWVdwRUxFVkJRVXRITEU5QlFWTTRReXhGUVVOcVEzVnpRaXhIUVVGWGVIWkNMRVZCUVUwelNpeEZRVUZsYUVJc1JVRkJWMEVzUlVGQlYwRXNSVUZCVjBFc1JVRkJWelJPTEVkQmIwSnlSaXhUUVVGVEszZENMRWRCUVU4dmQwSXNSVUZCUjJwRUxFZEJRMnBDTEVsQlFVbHBRaXhGUVVOS0xFZEJRVzFDTEcxQ1FVRlNha0lzUlVGRFZDeE5RVUZOTEVsQlFVbHpVeXhIUVVGVkwyTXNSMEZIZEVJc1QwRkVRVEJPTEVWQlFVbHRjMElzUjBGQlZXNXpRaXhIUVVOUUxGZEJUMHdzVVVGT1RVRXNSVUZCU1N4SlFVTlNhRU1zUlVGQlUycENMRVZCUVV0RUxFMUJRVTF4V1N4TFFVRk5NRlFzV1VGRmVFSTNiMElzUjBGQlN5eEpRVU5RYWtRc1JVRkJUek5MTEVkQlJVWTBUQ3hIUVhWRFdDeEpRVUZKWjNwQ0xFZEJRVTh6VGl4SFFVRlRMRk5CUVZOMGJVSXNSVUZCVFVNc1JVRkJVelp3UWl4SFFVTXhReXhKUVVGSmJFOHNSVUZCVlRsc1FpeEZRVU5rTEVkQlFVbG5NRUlzUlVGQlV6TndRaXhQUVVGUkxFTkJRMjVDTEVsQlFVazBjRUlzUlVGQlZXNWFMRWRCUVdWcldpeEZRVUZWZVVRc1IwRkJWVEJITEV0QlEycEVjbGtzUjBGQlYzcHNRaXhGUVVWaUxFOUJRVTl4TlVJc1IwRkJWM2gyUWl4RlFVRk5OR0lzUlVGQlV6TmlMRVZCUVZNMmNFSXNSVUZCVlVNc1MwRm5SR3hFYlVzc1IwRkJWVFZPTEVkQlFWTXNVMEZCVXpGcVFpeEZRVUZSVWl4RlFVRkxNRzVDTEVkQlF6TkRMRWxCUVVsc1R5eEZRVUZWT1d4Q0xFVkJRV2xDUXl4RlFVTXZRaXhIUVVGSkszcENMRVZCUVZNemNFSXNUMEZCVVN4RFFVTnVRaXhKUVVGSk5IQkNMRVZCUVZWdVdpeEhRVUZsYTFvc1JVRkJWWGxFTEVkQlFWVXlSeXhMUVVOcVJIUlpMRWRCUVZkNmJFSXNSVUZGWWl4UFFVRlBjVFZDTEVkQlFWZHdkRUlzUlVGQlMzZGFMRVZCUVZOb1dpeEZRVUZSYTI1Q0xFVkJRVlZETEV0QmMwcHdSQ3hUUVVGVGIwc3NSMEZCVTI0d1FpeEZRVUZOTkdRc1JVRkJUWGRYTEVkQlF6VkNMRWxCUVVsRExFVkJRMEZETEVWQlEwRkRMRVZCUTBGMGVrSXNSVUZEUVhWNlFpeEZRVU5CUXl4RlFVTkJReXhGUVVGcFFpeEZRVU5xUWtNc1IwRkJRVUVzUlVGRFFVTXNSMEZCUVVFc1JVRkRRWEJLTEVkQlFVRkJMRVZCUlVvc1IwRkJiVUlzYlVKQlFWSjRja0lzUlVGRFZDeE5RVUZOTEVsQlFVbHpVeXhIUVVGVkwyTXNSMEZWZEVJc1UwRkJVM012UWl4RlFVRlhReXhIUVVOc1FpeEpRVUZKTlRCQ0xFVkJRVTl0TUVJc1JVRkRVSEF3UWl4RlFVRlZjVEJDTEVWQlMyUXNUMEZJUVVRc1JVRkJWME1zUlVGQlYyb3ZRaXhGUVVOMFFuRXZRaXhGUVVGcFFra3NSVUZEYWtJM2VrSXNSVUZCVTJwQ0xFVkJRVXRFTEUxQlFVMUZMRVZCUVZORExFZEJkVUl2UWl4VFFVRlROakJDTEVWQlFXRkVMRWRCUTNCQ0xFbEJRVWxGTEVWQlFXOUNSaXhGUVVGUFRDeEZRVTB2UWl4UFFVRlJRU3hKUVVGcFFuQXZRaXhIUVVGak1pOUNMRWRCUVhGQ2NGZ3NSMEZEZWtSdldDeEZRVUZ2UWl4SFFVRlBTaXhIUVU1S1JTeEZRVUZQU2l4SFFVMDRRa2dzUlVGSGFrVXNVMEZCVTFVc1NVRkRVQ3hKUVVGSlNDeEZRVUZQYUdkQ0xFdEJRMWdzUjBGQlNXbG5RaXhGUVVGaFJDeEhRVU5tTEU5QlFVOUpMRVZCUVdGS0xFZEJSM1JDVGl4RlFVRlZlR1lzUjBGQlYybG5RaXhGUVROQ2RrSXNVMEZCZFVKSUxFZEJRM0pDTEVsQlJVbExMRVZCUVdOMldDeEhRVVpOYTFnc1JVRkJUMHdzUjBGSkwwSXNUMEZCVDBjc1JVRkRTRGRsTEVkQlFWVnZaaXhGUVVGaFdpeEhRVXBFVHl4RlFVRlBTaXhKUVVzM1FsTXNSVUZRVGl4RFFUSkNiVVJNTEVsQlIyNUVMRk5CUVZOSkxFVkJRV0ZLTEVkQlMzQkNMRTlCU2tGT0xFVkJRVlZ1TDBJc1JVRkpUbTB5UWl4SFFVRlpOa2tzUlVGRFVGRXNSVUZCVjBNc1NVRkZjRUpVTEVWQlFWZERMRVZCUVZkcUwwSXNSVUZEWmpSTUxFZEJaVlFzVTBGQlUyMHdRaXhKUVVOUUxFbEJRVWxPTEVWQlFVOW9aMElzUzBGRFVIVm5RaXhGUVVGaFRpeEZRVUZoUkN4SFFVMDVRaXhIUVVwQlZDeEZRVUZYZGtrc1ZVRkRXSGRKTEVWQlFWZHNZeXhMUVVOWWNXTXNSVUZCWlVzc1JVRkZXRThzUlVGQldTeERRVU5rTEVkQlFVbGlMRWxCUVZsdUwwSXNSVUZEWkN4UFFYcEZUaXhUUVVGeFFua3ZRaXhIUVUxdVFpeFBRVXBCU2l4RlFVRnBRa2tzUlVGRmFrSk9MRVZCUVZWNFppeEhRVUZYYVdkQ0xFVkJRV055V0N4SFFVVTFRaXRYTEVWQlFWVkZMRVZCUVZkRExFZEJRVkUzZWtJc1JVRk9kRU1zUTBGNVJYbENkM3BDTEVkQlJYSkNMRWRCUVVsSExFVkJTVVlzVDBGR1FXaG5RaXhIUVVGaE5HWXNSMEZEWWtFc1JVRkJWWGhtTEVkQlFWZHBaMElzUlVGQlkzSllMRWRCUXpWQ2FWZ3NSVUZCVjBvc1IwRk5kRUlzVDBGSVNVUXNTVUZCV1c0dlFpeEpRVU5rYlM5Q0xFVkJRVlY0Wml4SFFVRlhhV2RDTEVWQlFXTnlXQ3hKUVVVNVFqTmpMRVZCU1ZRc1QwRXpSMEV5WXl4RlFVRlBaMUlzUjBGQlUyaFNMRWxCUVZNc1JVRkRja0l6Uml4SFFVRlRiV01zUzBGRFdFOHNTVUZCV1ZBc1JVRkJVVThzVVVGRmNFSktMRWRCUkVGTExFVkJRVk1zV1VGQllWSXNSMEZEU0habExFZEJRVlVyV1N4SFFVRlRkMFlzUlVGQlVVY3NWVUZCV1N4RlFVRkhNMWNzUjBGQlVUSlhMRVZCUTNKRkwwa3NSVUZCVnl4aFFVRmpORWtzU1VGQldVRXNSVUZCVVRWSkxGTkJRVmRCTEVkQmIwY3hSRFJLTEVWQlFWVkZMRTlCY0VOV0xGZEJRMDFrTEVsQlFWbHVMMElzUjBGRFpIVm1MRWRCUVdFMFppeEhRVVZtUlN4RlFVRnBRaXhGUVVOcVFrd3NSVUZCVjBrc1JVRkJaVWdzUlVGQlYwVXNSVUZCVlc0dlFpeEhRV2REYWtRckwwSXNSVUZCVlVjc1RVRTNRbFlzVjBGRFJTeFBRVUZQWml4SlFVRlpiaTlDTEVWQlFWazBUQ3hGUVVGVGFUQkNMRVZCUVdGd1owSXNUMEUyUW1oRWMyZENMRVZCY1VKVUxFbEJRVWxKTEVkQlFWRnNVQ3hIUVVGVExGTkJRVk4wYlVJc1JVRkJUVVVzUjBGRGJFTXNUMEZCVDNsa0xFZEJRVlV6WkN4RlFVRk5MRVZCUVVkRkxFdEJjMEo0UW5VeFFpeEhRVUZSYmxBc1IwRkJVeXhUUVVGVGRHMUNMRVZCUVUwMFpDeEZRVUZOTVdRc1IwRkRlRU1zVDBGQlQzbGtMRWRCUVZVelpDeEZRVUZOTkhWQ0xFZEJRVk5vVWl4SlFVRlRMRVZCUVVjeFpDeExRWEZGT1VNc1UwRkJVMjk0UWl4SFFVRlJkSGhDTEVWQlFVMHdNVUlzUjBGRGNrSXNSMEZCYlVJc2JVSkJRVkl4TVVJc1IwRkJiVU1zVFVGQldqQXhRaXhIUVVGMVF5eHRRa0ZCV2tFc1JVRkRNMFFzVFVGQlRTeEpRVUZKY0dwQ0xFZEJRVlV2WXl4SFFVVjBRaXhKUVVGSmIyZERMRVZCUVZjc1YwRkRZaXhKUVVGSmVqRkNMRVZCUVU4MGNrSXNWVUZEVURGd1FpeEZRVUZOYzNwQ0xFVkJRVmRCTEVWQlFWTXpNVUlzVFVGQlRYRlpMRXRCUVUxc1dTeEhRVUZSUVN4RlFVRkxMRWRCUTI1RWIwUXNSVUZCVVhGNVFpeEZRVUZUY25sQ0xFMUJSWEpDTEVkQlFVbEJMRVZCUVUxRExFbEJRVWx1UWl4SFFVTmFMRTlCUVU5clFpeEZRVUZOWjFrc1NVRkJTV3hhTEVkQlJXNUNMRWxCUVVsdVFpeEZRVUZUYWtJc1JVRkJTMFFzVFVGQlRYRlpMRXRCUVUxc1dTeEhRVVU1UWl4UFFVUkJlVEZDTEVWQlFWTnllVUlzVFVGQlVVRXNSVUZCVFhsT0xFbEJRVWt6VHl4RlFVRkxia0lzU1VGQlYzRkRMRVZCUTNCRGNrTXNSMEZIVkN4UFFVUkJNREJDTEVWQlFWTnllVUlzVFVGQlVTeEpRVUZMWjNWQ0xFZEJRVkZ6UlN4UFFVRlRlR01zU1VGRGFFTjFZeXhGUVRCQ1ZDeFRRVUZUUlN4SFFVRlBMekJDTEVkQlEyUXNSMEZCZDBJc2JVSkJRV0pCTEVWQlExUXNUVUZCVFN4SlFVRkpkMUlzUjBGQlZTOWpMRWRCUlhSQ0xFOUJRVThzVjBGRFRDeEpRVUZKTWtzc1JVRkJUelJ5UWl4VlFVTllMRTlCUVZFMWNrSXNSVUZCUzBNc1VVRkRXQ3hMUVVGTExFVkJRVWNzVDBGQlVWY3NSVUZCVlZZc1MwRkJTMmRaTEUxQlF5OUNMRXRCUVVzc1JVRkJSeXhQUVVGUmRGZ3NSVUZCVlZZc1MwRkJTMmRaTEV0QlFVMXNXU3hGUVVGTExFbEJRekZETEV0QlFVc3NSVUZCUnl4UFFVRlJXU3hGUVVGVlZpeExRVUZMWjFrc1MwRkJUV3haTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhKUVVOdVJDeExRVUZMTEVWQlFVY3NUMEZCVVZrc1JVRkJWVllzUzBGQlMyZFpMRXRCUVUxc1dTeEZRVUZMTEVkQlFVbEJMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEpRVVU1UkN4UFFVRlJXU3hGUVVGVlppeE5RVUZOY1Zrc1MwRkJUV3haTEVsQmJFTnNRMjk0UWl4SFFVRlJjMFVzVFVGQlVYaGpMRWRCTWtab1FpeEpRVUZKTUdNc1IwRkJWekZOTEVkQlFWTXNVMEZCVTNCd1FpeEZRVUZOS3pGQ0xFZEJTM0pETEVsQlFVbERMRWRCU2twRUxFVkJRVzFETEVkQlFYSkNRU3hGUVVGWE5URkNMRkZCUVdWM1dDeEhRVUZSYjJVc1JVRkJWeXhKUVVOMlJIb3dRaXhIUVVGVGVUQkNMRVZCUVZjc1IwRkJTVGQ1UWl4SFFVRlZhMmxDTEU5QlEyeERPV3BDTEVkQlFWTnBaU3hIUVVGWmQxY3NSVUZCV1N4SFFVRkpOM2xDTEVkQlFWVnJhVUlzVVVGRmRFSnFiRUlzVDBGRE4wSXNUMEZCVDIxdFFpeEhRVUZUTEZOQlFWTndiVUlzUjBGSmRrSXNTVUZJUVN4SlFVRkpVU3hIUVVGVExFVkJRMVJRTEVWQlFWTTBWaXhIUVVGVk4xWXNSVUZCUzBNc1QwRkJVVFl4UWl4TFFVVXpRblF4UWl4RlFVRlJVQ3hIUVVObVJDeEZRVUZMVVN4SFFVRlRjVEZDTEVWQlFWZHlNVUlzUjBGQlQwNHNTMEZCUzJkWkxFdEJRVTFzV1N4RlFVRkxVU3hKUVVWc1JDeFBRVUZQV0N4SFFVRk5ReXhGUVVGTmIxa3NTMEZCVFd4WkxFOUJjVU42UWlzeFFpeEhRVUZWTTFBc1IwRkJVeXhUUVVGVGRHMUNMRVZCUVUwNGNFSXNSMEZEY0VNc1NVRkJTVU1zUlVGQlZXNWFMRWRCUVdWcldpeEZRVUZWZVVRc1IwRkJWVEJKTEV0QlEycEVMRTlCUVU5NlJ5eEhRVUZYZUhaQ0xFVkJRVTAzU2l4RlFVRnRRbVFzUlVGQlYza3dRaXhGUVVGVlF5eExRVzFET1VSdFRTeEhRVUZsTlZBc1IwRkJVeXhUUVVGVGRHMUNMRVZCUVUwNGNFSXNSMEZEZWtNc1NVRkJTVU1zUlVGQlZXNWFMRWRCUVdWcldpeEZRVUZWZVVRc1IwRkJWVEpKTEV0QlEycEVMRTlCUVU4eFJ5eEhRVUZYZUhaQ0xFVkJRVTAxU2l4RlFVRjVRbVlzUlVGQlYza3dRaXhGUVVGVlF5eExRWGxDY0VWdlRTeEhRVUZSYUVzc1IwRkJVeXhUUVVGVGJuTkNMRVZCUVUxcmJVSXNSMEZEYkVNc1QwRkJUM05LTEVkQlFWZDRka0lzUlVGQlRURktMRVZCUVdsQ2FrSXNSVUZCVjBFc1JVRkJWMEVzUlVGQlZ6WjNRaXhMUVdsaE5VVXNVMEZCVXpOTUxFZEJRVWMxV2l4RlFVRlBaMmRDTEVkQlEycENMRTlCUVU5b1owSXNTVUZCVldkblFpeEhRVUZWYUdkQ0xFZEJRVlZCTEVkQlFWTm5aMElzUjBGQlZVRXNSVUV3UWpGRUxFbEJRVWw1Vml4SFFVRkxla2dzUjBGQk1FSnFUeXhKUVhsQ0wwSXlWaXhIUVVGTk1VZ3NSMEZCTUVJc1UwRkJVMmgxUWl4RlFVRlBaMmRDTEVkQlEyeEVMRTlCUVU5b1owSXNSMEZCVTJkblFpeEpRWEZDWkRkSExFZEJRV015U0N4SFFVRm5RaXhYUVVGaExFOUJRVTl4U3l4VlFVRndRaXhKUVVGelEzSkxMRWRCUVd0Q0xGTkJRVk01WjBJc1IwRkRha2NzVDBGQlR5dFhMRWRCUVdFdlZ5eEpRVUZWYlZNc1IwRkJaVEZUTEV0QlFVdFBMRVZCUVU4c1dVRkRkRVJ6VkN4SFFVRnhRamRVTEV0QlFVdFBMRVZCUVU4c1YwRXdRbXhEWjFnc1IwRkJWWEJYTEVkQlFVMXZWeXhSUVcxQ2FFSjJXU3hIUVVGblFrUXNSMEZCYjBJclJDeEhRVUZWTDBRc1NVRnVORkJzUkN4VFFVRXlRbmRDTEVkQlEzcENMRTlCUVU4clZ5eEhRVUZoTDFjc1NVRkJWVFJtTEVkQlFWYzFaaXhKUVVGVmNFa3NSMEUyTlZCeVJDeFRRVUZUTUhKQ0xFZEJRVmwwYWtJc1IwRkRia0lzVDBGQlowSXNUVUZCVkVFc1IwRkJhVUl5ZGtJc1IwRkJVek4yUWl4RlFVRk5VaXhWUVVGWk5HWXNSMEZCVjNCbUxFZEJORUpvUlN4VFFVRlRhMnRDTEVkQlFXdENiR3RDTEVkQlEzcENMRTlCUVU4clZ5eEhRVUZoTDFjc1NVRkJWWE5xUWl4SFFVRlpkR3BDTEVkQk1FTTFReXhKUVVGSk5sVXNSMEZCVjBRc1NVRkJhMEp2WWl4SFFXMUNOMEp5ZUVJc1IwRkJVMFFzUjBGQllUWkVMRWRCUVZVM1JDeEpRVGtyVUhCRExGTkJRVzlDYzBJc1IwRkRiRUlzVDBGQlR5dFhMRWRCUVdFdlZ5eEpRVUZWTkdZc1IwRkJWelZtTEVsQlFWVndTaXhIUVhGd1VYSkVMRk5CUVZNckswSXNSMEZCVVRNeFFpeEhRVU5tTEVsQlFVc3JWeXhIUVVGaEwxY3NSMEZEYUVJc1QwRkJRU3hGUVVWR0xFbEJRVWt3WWl4RlFVRk5hMFVzUjBGQlZ6Vm1MRWRCUTNKQ0xFOUJRVTh3WWl4SFFVRlBOV3RDTEVkQlFWazBhMElzUjBGQlR6ZHJRaXhIUVVOT0xHbENRVUZxUW0xS0xFVkJRVTB3YUVJc1UwRkJORU1zYVVKQlFXUXhhRUlzUlVGQlRYbG9RaXhQUVVGeFFqQkRMRWRCUVdOdWEwSXNSMEZyUkhwR0xGTkJRVk52Wml4SFFVRlhjR1lzUjBGRGJFSXNTVUZCUzNOWUxFZEJRVk4wV0N4SFFVTmFMRTlCUVVFc1JVRkpSaXhKUVVGSk1HSXNSVUZCVFd0RkxFZEJRVmMxWml4SFFVTnlRaXhQUVVGUE1HSXNSMEZCVHpOclFpeEhRVUZYTW10Q0xFZEJRVTh4YTBJc1IwRkJWVEJyUWl4SFFVRlBhR3hDTEVkQlFWbG5iRUlzUjBGQlQzSnJRaXhGUVRaQ2RFVXNVMEZCVTNVclFpeEhRVUZWTlRGQ0xFZEJRMnBDTEUxQlFYVkNMR2xDUVVGVVFTeEhRVUZ4UWtFc1IwRkJVM2wxUWl4SFFVRlZlblZDTEVkQk5rSjRSQ3hUUVVGVE1uWkNMRWRCUVZNemRrSXNSMEZEYUVJc1RVRkJkVUlzYVVKQlFWUkJMRWRCUTFwQkxFZEJRVk1zUjBGQlMwRXNSVUZCVVN4SFFVRkxMRWRCUVV0QkxFZEJRVk5vU3l4RlFUUkNOME1zVTBGQlUzTm9RaXhIUVVGVGRGZ3NSMEZEYUVJc1NVRkJTWFYyUWl4VFFVRmpkblpDTEVWQlEyeENMRTlCUVdkQ0xFMUJRVlJCTEVsQlFUQkNMRlZCUVZKMWRrSXNSMEZCTkVJc1dVRkJVa0VzUjBFeVFpOURMRk5CUVZONFdTeEhRVUZoTDFjc1IwRkRjRUlzVDBGQlowSXNUVUZCVkVFc1IwRkJhVU1zYVVKQlFWUkJMRVZCYjBKcVF5eEpRVUZKYmtJc1IwRkJVVVFzUjBGQldUSkVMRWRCUVZVelJDeEpRV3gzVVd4RExGTkJRVzFDYjBJc1IwRkRha0lzVDBGQlR5dFhMRWRCUVdFdlZ5eEpRVUZWTW1Jc1IwRkJUek5pTEVsQlFWVXZTU3hIUVcwNVVXcEVMRk5CUVZNMEswSXNSMEZCVXpjeFFpeEhRVU5vUWl4TlFVRjFRaXhwUWtGQlZFRXNSMEZEV0N0WExFZEJRV0V2Vnl4SlFVRlZOR1lzUjBGQlZ6Vm1MRWxCUVZVNVNTeEZRU3RDYWtRc1UwRkJVMmwwUWl4SFFVRmpibXRDTEVkQlEzSkNMRWxCUVVzclZ5eEhRVUZoTDFjc1NVRkJWVFJtTEVkQlFWYzFaaXhKUVVGVk5Va3NSVUZETDBNc1QwRkJRU3hGUVVWR0xFbEJRVWxwWjBJc1JVRkJVVzVGTEVkQlFXRnNWQ3hIUVVONlFpeEhRVUZqTEU5QlFWWnhXQ3hGUVVOR0xFOUJRVUVzUlVGRlJpeEpRVUZKSzBVc1JVRkJUMnBMTEVkQlFXVXhVeXhMUVVGTE5GZ3NSVUZCVHl4blFrRkJhMEpCTEVWQlFVMXJSU3haUVVNNVJDeE5RVUZ6UWl4dFFrRkJVbUVzUjBGQmMwSkJMR0ZCUVdkQ1FTeEhRVU5zUkc1TExFZEJRV0Y0VXl4TFFVRkxNbU1zU1VGQlV6RktMRWRCYjBJdlFpeEpRVUZKTTFRc1IwRkJWMFFzUjBGQlpYbEVMRWRCUVZWNlJDeEpRV3c0VVhoRExGTkJRWE5DYTBJc1IwRkRjRUlzVDBGQlR5dFhMRWRCUVdFdlZ5eEpRVUZWTkdZc1IwRkJWelZtTEVsQlFWVXhTU3hIUVcwdlVXcEVNa2dzUjBGQlVVUXNSMEZCV1hWRUxFZEJRVlYyUkN4SlFYb3JVV3hETEZOQlFXMUNaMElzUjBGRGFrSXNUMEZCVHl0WExFZEJRV0V2Vnl4SlFVRlZNbUlzUjBGQlR6TmlMRWxCUVZWNlNTeEhRVEl2VVdwRUxGTkJRVk4xSzBJc1IwRkJVemt4UWl4SFFVTm9RaXhOUVVGMVFpeHBRa0ZCVkVFc1NVRkRWbWRZTEVkQlFWRm9XQ3hKUVVGVksxY3NSMEZCWVM5WExFbEJRVlUwWml4SFFVRlhOV1lzU1VGQlZYaEpMRVZCYjBKd1JTeFRRVUZUYTI1Q0xFZEJRVk14WlN4SFFVTm9RaXhOUVVGMVFpeHBRa0ZCVkVFc1IwRkRXQ3RYTEVkQlFXRXZWeXhKUVVGVk5HWXNSMEZCVnpWbUxFbEJRVlYyU1N4RlFXOUNha1FzU1VGQlNUQklMRWRCUVdWRUxFZEJRVzFDY1VRc1IwRkJWWEpFTEVsQk4yaFNhRVFzVTBGQk1FSmpMRWRCUTNoQ0xFOUJRVThyVnl4SFFVRmhMMWNzU1VGRGJFSXlka0lzUjBGQlV6TjJRaXhGUVVGTlVpeFhRVUZoYWtRc1IwRkJaWEZxUWl4SFFVRlhOV1lzUzBGdGJsSjBSQ3N4UWl4SFFVRkxMMGdzUjBGQk1FSTFTeXhKUVhsQ0wwSTBVeXhIUVVGTmFFa3NSMEZCTUVJc1UwRkJVMmgxUWl4RlFVRlBaMmRDTEVkQlEyeEVMRTlCUVU5b1owSXNSMEZCVTJkblFpeEpRVEJDYkVJc1UwRkJVMmxYTEVkQlFWRnFNa0lzUjBGRFppeEpRVUZMUVN4RlFVTklMRTFCUVU4c1IwRkZWQ3hIUVVGSmMycENMRWRCUVZsMGFrSXNSMEZEWkN4UFFVRlBPREZDTEVkQlFWTTVNVUlzUjBGQlUzZFJMRWRCUVdONFVTeEhRVUZUZVdJc1IwRkJWWHBpTEVkQlJUVkVMRWRCUVVrd1ZDeEpRVUZsTVZRc1JVRkJUVEJVTEVsQlEzWkNMRTlCT1RWV1RpeFRRVUY1UWtNc1IwRkpka0lzU1VGSVFTeEpRVUZKYlVZc1JVRkRRWGhaTEVWQlFWTXNTMEZGU25kWkxFVkJRVTl1Uml4RlFVRlRkV2xDTEZGQlFWRkRMRTFCUXk5Q056RkNMRVZCUVU5cldpeExRVUZMVml4RlFVRkxPVmtzVDBGRmJrSXNUMEZCVDAwc1JVRlFWQ3hEUVRnMVZqWkNUaXhGUVVGTk1GUXNUMEZGTDBJc1NVRkJTV2RKTEVWQlFVMURMRWRCUVU4ellpeEhRVWRxUWl4UFFVWlhNR0lzUjBGQlQzcHJRaXhGUVVGVGVWa3NSMEZCWTJkTkxFZEJRVTl1YTBJc1JVRkJVelJaTEVkQlFXRnlVQ3hKUVVVeFJHUXNSMEV3UW1Rc1UwRkJVeXQwUWl4SFFVRlRMM1JDTEVkQlEyaENMRTlCUVV0QkxFZEJSMHhCTEVWQlFWRnBkVUlzUjBGQlUycDFRaXhOUVVOSWFrc3NSMEZCV1dsTExFdEJRVmRxU3l4SFFVTjJRbWxMTEVWQlFWRXNSMEZCU3l4RlFVRkpMRWRCUTJZdlNpeEZRVVZVSzBvc1IwRkJWVUVzUlVGQlVVRXNSVUZCVVN4RlFWQmtMRWxCUVZaQkxFVkJRV05CTEVWQlFWRXNSVUZ2UTJwRExGTkJRVk41ZFVJc1IwRkJWWHAxUWl4SFFVTnFRaXhKUVVGSlRTeEZRVUZUZVhSQ0xFZEJRVk12ZEVJc1IwRkRiRUp2TWtJc1JVRkJXVGt4UWl4RlFVRlRMRVZCUlhwQ0xFOUJRVTlCTEVkQlFWZEJMRVZCUVZVNE1VSXNSVUZCV1RreFFpeEZRVUZUT0RGQ0xFVkJRVms1TVVJc1JVRkJWU3hGUVRoQ2VrVXNVMEZCVXlzeFFpeEhRVUZUY2pKQ0xFZEJRMmhDTEU5QlFVOUJMRVZCUVZFMFlTeEhRVUZWTmxRc1IwRkJWWHAxUWl4SFFVRlJMRVZCUVVjMVNpeEhRVUZ2UWl4RlFUQkNjRVVzVTBGQlV6WXpRaXhIUVVGVGFuVkNMRWRCUTJoQ0xFZEJRVzlDTEdsQ1FVRlVRU3hGUVVOVUxFOUJRVTlCTEVWQlJWUXNSMEZCU1RCbExFZEJRVk14WlN4SFFVTllMRTlCUVU4NVNpeEZRVVZVTEVkQlFVbHZhRUlzUjBGQlUzUllMRWRCUVZFc1EwRkRia0lzU1VGQlNXZG5RaXhGUVVGblF5eHRRa0ZCYWtKb1owSXNSVUZCVFRSWExGRkJRWGRDTlZjc1JVRkJUVFJYTEZWQlFWazFWeXhGUVVOdVJVRXNSVUZCVVhOWUxFZEJRVk13U1N4SFFVRlZRU3hGUVVGUkxFZEJRVTFCTEVWQlJUTkRMRWRCUVc5Q0xHbENRVUZVYUdkQ0xFVkJRMVFzVDBGQmFVSXNTVUZCVmtFc1JVRkJZMEVzUjBGQlUwRXNSVUZGYUVOQkxFVkJRVkZCTEVWQlFVMDJVeXhSUVVGUmNsb3NSMEZCVVN4SlFVTTVRaXhKUVVGSk9EaENMRVZCUVZkdU9FSXNSMEZCVjNOV0xFdEJRVXQ2VUN4SFFVTXZRaXhQUVVGUmN6SkNMRWRCUVZscU9FSXNSMEZCVlc5V0xFdEJRVXQ2VUN4SFFVTXZRamxETEVkQlFXRTRReXhGUVVGTk5HOUNMRTFCUVUwc1IwRkJTVEJPTEVWQlFWY3NSVUZCU1N4SFFVTXpRM0E0UWl4SFFVRlhkVllzUzBGQlMzcFFMRWRCUVZNNVNpeEhRVUZQT0Vvc1JVRXlRblpETEZOQlFWTnZhMElzUjBGQlkzQnJRaXhIUVVOeVFpeFBRVUZQYjJFc1IwRkJWM0JoTEVWQlFVOW5ZeXhIUVVGUGFHTXNTVUZ6Ukd4RExGTkJRVk5yVXl4SFFVRlRiRk1zUjBGRGFFSXNUMEZCWjBJc1RVRkJWRUVzUlVGQlowSXNSMEZCUzNWdVFpeEhRVUZoZG01Q0xFZEJjVU16UXl4SlFVRkpkVEpDTEVkQlFWTnVUU3hIUVVGbExGTkJRVk51YjBJc1JVRkJVVzVLTEVkQlF6TkRMRWRCUVVseGNVSXNSMEZCV1hKeFFpeEpRVUZYZDNGQ0xFZEJRVmw0Y1VJc1IwRkRja056YUVJc1IwRkJWM1JvUWl4RlFVRlJlVm9zUjBGQlMzcGFMRWRCUVZOdFNpeFJRVWR1UXl4SlFVRkxMRWxCUVVsU0xFdEJRVTh6U1N4RlFVTldjVm9zUjBGQlpURlRMRXRCUVVzelJ5eEZRVUZSTWtrc1NVRkRPVUp4V1N4SFFVRlpOMWdzUlVGQlVWSXNSVUZCU3pOSkxFVkJRVTh5U1N4TlFXOURiRU1yTUVJc1IwRkJWM0JOTEVkQlFXVXNVMEZCVTI1dlFpeEZRVUZSYmtvc1IwRkROME56YUVJc1IwRkJWM1JvUWl4RlFVRlJhMnBDTEVkQlFVOXNha0lzUjBGQlUyMUtMRXRCWjBOcVEzY3dRaXhIUVVGbGNrMHNSMEZCWlN4VFFVRlRibTlDTEVWQlFWRnVTaXhGUVVGUkszRkNMRVZCUVZVelNTeEhRVU51UldRc1IwRkJWM1JvUWl4RlFVRlJhMnBDTEVkQlFVOXNha0lzUjBGQlUyMUtMRVZCUVZGcFdpeExRU3RDZWtOM1lpeEhRVUZoZEUwc1IwRkJaU3hUUVVGVGJtOUNMRVZCUVZGdVNpeEZRVUZSSzNGQ0xFVkJRVlV6U1N4SFFVTnFSV1FzUjBGQlYzUm9RaXhGUVVGUmVWb3NSMEZCUzNwYUxFZEJRVk50U2l4RlFVRlJhVm9zUzBGdlFuWkRlV0lzUjBGQlMyNU1MRWRCUVZOb1VpeEpRVGhFWkc1S0xFZEJRVmR6VlN4SFFVRlRMRk5CUVZNeGFrSXNSVUZCVVhGdlFpeEhRVU4yUTNKdlFpeEZRVUZUTTBVc1IwRkJUekpGTEVkQlJXaENMRWxCUVVsc1F5eEhRVUZUTEVWQlExUlFMRVZCUVZNNGNVSXNSVUZCVVRseFFpeFBRVU5xUWl0eFFpeEZRVUZSTDNGQ0xFVkJRVk1zUlVGQlNUaHhRaXhGUVVGUkxFZEJRVXMxTVVJc1JVRk5kRU1zU1VGS1NUWXhRaXhIUVVGVFF5eEhRVUZsUml4RlFVRlJMRWRCUVVsQkxFVkJRVkVzUjBGQlNVTXNTMEZEYkVRdmNVSXNSVUZCVXl4TFFVZEdUeXhGUVVGUlVDeEhRVTFtTEVsQlRFRXNTVUZCU1RGSExFVkJRVk4zZUVJc1JVRkJVWFp4UWl4SFFVTnFRakJETEVWQlFWRjFXaXhIUVVGUGJHcENMRWRCUTJZNE9VSXNSMEZCWXl4RlFVTmtReXhGUVVGamNEQkNMRVZCUVUxcVJDeFRRVVZtYnpOQ0xFVkJRV0ZETEVkQlFXRXNRMEZEYWtNc1NVRkJTWEF4UWl4RlFVRk5aMElzUlVGQlRXMHdRaXhIUVVOYU5USkNMRVZCUVZGcFF5eEZRVUZQVWl4SlFVVm1la0lzU1VGQlZYUk1MRWRCUTFScmJFSXNSMEZCUnpWYUxFVkJRVThyVWl4SFFVRlpkRkVzVFVGQlZUQlJMRWRCUVdVeFV5eExRVUZMZDBNc1JVRkJVVklzVFVGREwwUlJMRVZCUVU5U0xFZEJRVTh6U1N4RlFVRlBNa2tzU1VGTE0wSXNUMEZCVDFFc1NVRnpRa3cyTUVJc1IwRkJaVzVTTEVkQlFWTXNVMEZCVTNCdFFpeEhRVVZ1UXl4UFFVUkJRU3hGUVVGTGFXRXNTMEZCU3psclFpeEZRVUZYZHpaQ0xFbEJRMlE1ZGtJc1IwRkJUVEl6UWl4SFFVRlhjbWxETEVWQlFWYzJTeXhMUVdkVGNrTXNVMEZCVTI5aUxFZEJRVWt4V1N4RlFVRlJjV1FzUlVGQlRXbFBMRWRCUTNwQ0xFbEJRVWxxZEVJc1JVRkJiVUlzVFVGQlZqSkNMRVZCUVdsQ2RrNHNSVUZCV1RKeFFpeEhRVUZSY0dRc1JVRkJVWEZrTEVkQlF6RkVMRTlCUVU5b1ppeEpRVUZYTlV3c1JVRkJXVFkwUWl4RlFVRmxhblJDTEVWQk5FUXZReXhUUVVGVGNXcENMRWRCUVUweGFFSXNSVUZCVVhGa0xFZEJRM0pDTEU5QlFXbENMRTFCUVZaeVpDeEhRVUZyUW5kMFFpeEhRVUZSZUhSQ0xFVkJRVkZ4WkN4RlFVRk5XU3hKUVhGQ2FrUXNTVUZCU1RoWExFZEJRVk0zU2l4SFFVRmxMRk5CUVZNM2MwSXNSVUZCVVU0c1JVRkJUM2xDTEVkQlEzSkRMRTFCUVZSNlFpeEhRVU41UWl4dFFrRkJiRUpCTEVWQlFVMXJVeXhYUVVObWJGTXNSVUZCVVhsVExFZEJRWEZDYUZRc1MwRkJTMDhzU1VGSGNFTk5MRVZCUVU5T0xFZEJRVk41UWl4SFFVTm1lV3RDTEVkQlFWTndSQ3hMUVRSQ1VtMVZMRWRCUVZjNVNpeEhRVUZsTEZOQlFWTTNjMElzUlVGQlVVNHNSVUZCVDNsQ0xFZEJRM1pETEUxQlFWUjZRaXhIUVVONVFpeHRRa0ZCYkVKQkxFVkJRVTFyVXl4WFFVTm1iRk1zUlVGQlVYbFRMRWRCUVhGQ2FGUXNTMEZCUzA4c1NVRkhhRU50VXl4SFFVRmxNVk1zUzBGQlMyRXNSVUZCVVU0c1IwRkRPVUpOTEVWQlFVOU9MRWRCUVU5M1dpeExRVUZMTDFnc1IwRkZia0p1UWl4RlFVRlBUaXhIUVVGVExFTkJRVU41UWl4SlFVVnNRbWRxUWl4SlFXOUNRM2xUTEVkQlFWTjJVaXhIUVVGVGFFWXNTVUU0UW5SQ0xGTkJRVk53VHl4SFFVRkxkRkVzUjBGRFdpeFBRVUZQY1doQ0xFZEJRVmx5YUVJc1IwRkJWVGhYTEVkQlFXTTVWeXhIUVVGVmFXaENMRWRCUVZOcWFFSXNSMEV3UW1oRkxGTkJRVk1yV2l4SFFVRlBMMW9zUjBGRFpDeFBRVUZQY1doQ0xFZEJRVmx5YUVJc1IwRkJWVGhYTEVkQlFXTTVWeXhIUVVGQlFTeEhRWGh0VkRkRExGTkJRVzlDUVN4SFFVTnNRaXhKUVVGTGNWWXNSMEZCVTNKV0xFZEJRMW9zVDBGdk9FWktMRk5CUVhOQ1FTeEhRVU53UWl4SlFVRkpNMElzUlVGQlV5eEhRVU5pTEVkQlFXTXNUVUZCVmpKQ0xFVkJRMFlzU1VGQlN5eEpRVUZKVWl4TFFVRlBia1VzUjBGQlR6SkZMRWRCUTNKQ00wSXNSVUZCVDJ0YUxFdEJRVXN2V0N4SFFVZG9RaXhQUVVGUGJrSXNSVUZRVkN4RFFYQTRSbmRDTWtJc1IwRkZkRUlzU1VGQlNXc3hRaXhGUVVGVmFGVXNSMEZCV1d4b1FpeEhRVU4wUWpOQ0xFVkJRVk1zUjBGRllpeEpRVUZMTEVsQlFVbHRRaXhMUVVGUFVTeEhRVU5FTEdWQlFWQlNMRWxCUVhsQ01ERkNMRWRCUVZsb2JFSXNSMEZCWlRGVExFdEJRVXQzUXl4RlFVRlJVaXhMUVVOeVJXNUNMRVZCUVU5cldpeExRVUZMTDFnc1IwRkhhRUlzVDBGQlQyNUNMRVZCTkd4VWIwUTRNa0lzUTBGQlYyNHhRaXhIUVhWSGVFVXNTVUZCU1c4eFFpeEhRVUZSYWs0c1IwRkJaU3hUUVVGVGJtOUNMRVZCUVZGdVNpeEZRVUZSSzNGQ0xFZEJRMnhFUkN4SFFVRlZNMmhDTEVWQlFWRnVTaXhGUVVGUkszRkNMRXRCYTBONFFtdFVMRWRCUVZrelRTeEhRVUZsTEZOQlFWTnViMElzUlVGQlVXNUtMRVZCUVZFcmNVSXNSVUZCVlROSkxFZEJRMmhGTUVrc1IwRkJWVE5vUWl4RlFVRlJia29zUlVGQlVTdHhRaXhGUVVGVk0wa3NTMEYxUW14RGIyTXNSMEZCVHpsTUxFZEJRVk1zVTBGQlUzWndRaXhGUVVGUmQxa3NSMEZEYmtNc1NVRkJTVzVoTEVWQlFWTXNSMEZEWWl4SFFVRmpMRTFCUVZZeVFpeEZRVU5HTEU5QlFVOHpRaXhGUVVWVUxFbEJRVWs0WVN4SFFVRkJRU3hGUVVOS1dDeEZRVUZST1Zvc1IwRkJVemhhTEVWQlFVOHNVMEZCVXpaRkxFZEJSeTlDTEU5QlJrRkJMRVZCUVU5RExFZEJRVk5FTEVWQlFVMXlaQ3hIUVVOMFFtMWFMRWxCUVZkQkxFVkJRVk5yUlN4RlFVRkxPV1lzVDBGQlV5eEhRVU16UWpobUxFbEJSVlJzUml4SFFVRlhibGtzUlVGQlVUUmhMRWRCUVdFMVlTeEhRVUZUTTBJc1IwRkRja000WVN4SlFVTkdPV0VzUlVGQlV6QmhMRWRCUVZVeFlTeEZRVUZSZUV3c1JVRkJhMEpETEVWQlFXdENReXhGUVVGdlFtMDJRaXhMUVVkeVJpeEpRVVJCTEVsQlFVa3pka0lzUlVGQlUybGlMRVZCUVUxcVlpeFBRVU5hUVN4TFFVTk1hVzFDTEVkQlFWVnViRUlzUlVGQlVXMWhMRVZCUVUxcVlpeEpRVVV4UWl4UFFVRlBZeXhKUVRSRFRHZFNMRWRCUVU5cllTeEhRVUZUTEZOQlFWTjJjRUlzUlVGQlVYZFpMRWRCUTI1RExFOUJRV2xDTEUxQlFWWjRXU3hGUVVGcFFpeEhRWFJzVkRGQ0xGTkJRV3RDUVN4RlFVRlJkMWtzUjBGRGVFSXNUMEZCVDNsTExFZEJRVmRxYWtJc1JVRkJVWGRaTEVWQlFVOHNVMEZCVTNwaExFVkJRVTl6Wml4SFFVTXZReXhQUVVGUGNVVXNSMEZCVFRGb1FpeEZRVUZSY1dRc1MwRkdla0lzUTBGemJGUjNRM0prTEVWQlFWRjNXU3hMUVhGQ2FFUXNVMEZCVXpoakxFZEJRVTkwTVVJc1JVRkJVVGxDTEVkQlEzUkNMRWRCUVdNc1RVRkJWamhDTEVWQlEwWXNUVUZCVHl4SFFVVlVMRWxCUVVsUkxFVkJRVkU1UWl4SFFVRlRhMk1zUjBGQllUVmhMRWRCUVZNc1UwRkJVM1V4UWl4SFFVTnNSQ3hOUVVGUExFTkJRVU5CTEV0QlIxWXNUMEZFUVhJelFpeEZRVUZaYzJ0Q0xFZEJRVmwwYTBJc1IwRkRha0lyYTBJc1IwRkJWMnBxUWl4RlFVRlJVU3hGUVVGUExGTkJRVk42UXl4RlFVRlBjMllzUjBGREwwTXNUMEZCVDI1bUxFVkJRVlZJTEVWQlFVOXpaaXhGUVVGTExFMUJORWxxUXl4SlFVRkpiVmtzUjBGQlZUZEpMRWRCUVdOeVl5eEpRVEJDZUVKdGJFSXNSMEZCV1RsSkxFZEJRV00xVXl4SlFUUkxPVUlzVTBGQlUyeGlMRWRCUVU5dFFpeEhRVU5rTEU5QlFXbENMRTFCUVZaQkxFVkJRV2xDTEVkQlFVdFBMRWRCUVZkUUxFVkJRVkZ6VVN4SFFVRkxkRkVzU1VGclRuWkVMRWxCUVVrd01VSXNSMEZCV1RkTkxFZEJRV2xDTEZOQlFWTjRjVUlzUlVGQlVYTXpRaXhGUVVGTk56TkNMRWRCUlhSRUxFOUJSRUUyTTBJc1JVRkJUMEVzUlVGQlMwTXNZMEZEVEhZelFpeEhRVUZWVUN4RlFVRlJLek5DTEVkQlFWZEdMRWRCUVZGQkxFdEJhMEk1UXl4VFFVRlRSU3hIUVVGWGRHOUNMRWRCUTJ4Q0xFOUJRVTkxYjBJc1IwRkJWemRzUWl4SFFVRlRNVU1zUjBGQlVYRnZRaXhsUVhGQ2NrTXNVMEZCVXpWTkxFZEJRVTk2WWl4SFFVVmtMRTlCUkVGQkxFVkJRVk13UXl4SFFVRlRNVU1zUzBGRFJFRXNSVUZCVDNGRUxGRkJRVkYwV1N4SFFVRlRNRWtzU1VGQll6UlFMRkZCUVZFM1Z5eEhRVUZoTEVsQmMwZzVSU3hKUVVGSlp6aENMRWRCUVZsc1RpeEhRVUZwUWl4VFFVRlRlSEZDTEVWQlFWRnpNMElzUlVGQlRUY3pRaXhIUVVOMFJDeFBRVUZQVHl4SFFVRlZVQ3hGUVVGUkxFbEJRVTBzU1VGQlRUWXpRaXhGUVVGTFF5eG5Ra0YxUW5oRFNTeEhRVUZaYms0c1IwRkJhVUlzVTBGQlUzaHhRaXhGUVVGUmN6TkNMRVZCUVUwM00wSXNSMEZEZEVRc1QwRkJUMDhzUjBGQlZWQXNSVUZCVVN4SlFVRk5MRWxCUVUwMk0wSXNSVUZCUzBNc1owSkJiMEo0UTBzc1IwRkJZWGhPTEVkQlFXZENMR1ZCTUU0M1FubE9MRWRCUVZseVRpeEhRVUZwUWl4VFFVRlRlSEZDTEVWQlFWRnpNMElzUlVGQlRUY3pRaXhIUVVOMFJDeFBRVUZQVHl4SFFVRlZVQ3hGUVVGUkxFbEJRVTBzU1VGQlRUWXpRaXhGUVVGTFF5eG5Ra0ZuUlhoRFR5eEhRVUZaZEU0c1IwRkJhVUlzVTBGQlUzaHhRaXhGUVVGUmN6TkNMRVZCUVUwM00wSXNSMEZEZEVRc1QwRkJUMDhzUjBGQlZWQXNSVUZCVVN4SlFVRk5MRWxCUVUxbk5FSXNSMEZCVjBnc1MwRnJhVUk1UTFNc1IwRkJXWFpPTEVkQlFXbENMRk5CUVZONGNVSXNSVUZCVVhNelFpeEZRVUZOTnpOQ0xFZEJRM1JFTEU5QlFVOVBMRWRCUVZWUUxFVkJRVkVzU1VGQlRTeEpRVUZOTmpOQ0xFVkJRVXRWTEdkQ1FXOUNlRU5RTEVkQlFXRnlUaXhIUVVGblFpeGxRWEZDYWtNc1UwRkJVMDBzUjBGQlRYaGlMRVZCUVZFcmIwSXNSVUZCVTJoUExFZEJTVGxDTEU5QlNFRXZZU3hGUVVGVE1FTXNSMEZCVXpGRExFbEJRMnhDSzI5Q0xFVkJRVlZvVHl4RlFVRlJOekZDTEVWQlFWazJha01zUzBGRlpEZHFReXhGUVhoMlluQkNMRk5CUVhkQ09HRXNSMEZEZEVJc1QwRkJUM0JVTEVkQlFXbENjVlFzUzBGQlMwUXNSMEZFTDBJc1EwRjVkbUkwUWtFc1IwRTFhR0kxUWl4VFFVRnpRa0VzUjBGRGNFSXNUMEZCVDBFc1JVRkJUMmxDTEUxQlFVMTJWU3hMUVVGclFpeEhRVVI0UXl4RFFUUm9ZbTFFYzFRc1IwRXZibU51UkN4VFFVRnZRa0VzUjBGRGJFSXNUMEZCVDBFc1JVRkJUMmxDTEUxQlFVMHpWeXhMUVVGblFpeEhRVVIwUXl4RFFTdHVZM2RGTUZZc1IwRkZOMFJCTEVWQlFVOXBRaXhOUVVGTk9HNUNMRWxCUVZrc1IwRXlRbXhETEVsQlFVbERMRWRCUVZVM1V5eEhRVUZUTEZOQlFWTjBiVUlzUlVGQlRVVXNSMEZEY0VNc1NVRkRSU3hQUVVGUFNDeEhRVUZOUXl4RlFVRk5NMHNzUlVGQlZ6WkxMRWRCUXpsQ0xFMUJRVTlvUWl4SFFVTlFMRTlCUVU5dk0wSXNSMEZCVVhBelFpeEhRVUZMUVN4RlFVRkpMRWxCUVVscFZDeEhRVUZOYWxRc1RVRTRRbXhEYXpaQ0xFZEJRVlZxVGl4SFFVRlRMRk5CUVZOMmNFSXNSVUZCVVhreVFpeEhRVXQwUXl4UFFVcEJlalJDTEVkQlFWVjVORUlzUlVGQllTeFRRVUZUYWpOQ0xFZEJRemxDUVN4RlFVRk5LMlFzUjBGQlRTOWtMRWRCUTFwdldTeEhRVUZuUWpWWUxFVkJRVkZTTEVWQlFVczJlRUlzUjBGQlMzSjRRaXhGUVVGUFVpeEhRVUZOVVN4TlFVVXhRMEVzU1VGeFIxUXNVMEZCVTJsclFpeEhRVUZUYkcxQ0xFZEJRMmhDTEU5QlFVOHNWMEZEVEN4UFFVRlBRU3hIUVd0RVdDeEpRVUZKTWpSQ0xFZEJRVTl3VGl4TFFYVkNVSEZPTEVkQlFWbHlUaXhKUVVGQlFTeEhRV3RDYUVJc1UwRkJVM3BKTEVkQlFWTTVhVUlzUjBGRGFFSXNUMEZCVDBFc1JVRTJRMVFzVTBGQlUwZ3NSMEZCVTFJc1IwRkRhRUlzVDBGQlQzZHFRaXhIUVVFMFFpeHRRa0ZCVW5ocVFpeEZRVUZ4UWtFc1JVRkJUekppTEVkQlFWVXpZaXhGUVVGTmRrc3NTVUY1Um5wRkxFbEJRVWtyYWtNc1IwRkJVMnhVTEVkQlFWTXNVMEZCVTNKSExFVkJRVTB2Wml4SFFVTnVReXhQUVVGUExGTkJRVk13UXl4SFFVTmtMRTlCUVU4d1pTeEhRVUZYTVdVc1JVRkJVWEZrTEVWQlFVMHZaaXhOUVRKQ2FFTjFOVUlzUjBGQlYyNVVMRWRCUVZNc1UwRkJVekZxUWl4RlFVRlJNVU1zUjBGRGRrTXNUMEZCVHl4VFFVRlRLMllzUjBGRFpDeFBRVUZQY1VJc1IwRkJWekZsTEVWQlFWRnhaQ3hGUVVGTkwyWXNUVUYzUTNCRExGTkJRVk4zTlVJc1IwRkJUVGt5UWl4RlFVRlJia29zUlVGQlVUSTJRaXhIUVVNM1FpeEpRVUZKYUhoQ0xFVkJRVkU0VUN4SFFVRkxlbG9zUjBGRFlqUXZRaXhGUVVGamRsb3NSMEZCWTNKdFFpeEZRVUZSTWtvc1IwRkZla0lzVFVGQldHZDRRaXhIUVVORmJtTXNSMEZCVTNobExFdEJRVmswTDBJc1JVRkJXV3cxUWl4VFFVRlhhVVFzUlVGQlRXcEVMRlZCUTNSRWFUQkNMRVZCUVZVek5rSXNSVUZEVmtFc1JVRkJVMjFLTEVWQlExUkJMRVZCUVZOM1ZpeExRVU5VYVdoQ0xFVkJRV04yV2l4SFFVRmpjbTFDTEVWQlFWRjVXaXhIUVVGTGVsb3NTMEZGTTBNc1NVRkJTVEkxUWl4SlFVRlZibUlzUjBGQlUyMWpMRWxCUVZrc1ZVRkJWMEVzU1VGQlkwRXNSVUZCVVdoQ0xFOUJRMmhGTjFjc1JVRkJVM2RFTEVkQlFWZHVaQ3hIUVhGQ2VFSXNUMEZ1UWtGb1F5eEhRVUZWZVRSQ0xFVkJRV0VzVTBGQlV5OU9MRWRCUXpsQ0xFbEJRVWwwY2tJc1JVRkJUM1pITEVWQlFVODJlRUlzUjBGRGJFSXhiMElzUlVGQlR6QnZRaXhIUVVGamRISkNMRVZCUTJwQ2RXTXNTVUZEUmpOYUxFVkJRVTgwVUN4VlFVRlZPRmtzUjBGQll5eFhRVU0zUWl4SlFVRkpibFFzUlVGQlYwTXNTMEZCUzBjc1ZVRkRjRUlzUjBGQlNUWmhMRWRCUVZOcVlpeEZRVUZWTEVOQlEzSkNMRWxCUVVsc1dDeEZRVUZUTWtJc1JVRkJUM2RXTEV0QlFVdERMR0ZCUzNwQ0xFOUJTbU53V0N4RlFVRlBjVmdzV1VGQll6aEVMRWRCUVZWb1JTeExRVUZMUlN4alFVVXhRelpDTEV0QlFVc3NRMEZCUlc1aExFdEJRVkZCTEVWQlFVMUZMRXRCUVZFMGNrSXNWVUZCVnpkeVFpeFJRVUZYTWtNc1NVRkRNMFF6UWl4RlFVRlBjMWdzVlVGQldVb3NSVUZEV214WUxFVkJSVlFzVDBGQlQycENMRVZCUVV0RUxFMUJRVTAyUXl4RlFVRlJjRUlzUjBGQlZTeERRVUZETkZjc1MwRkJTM3BZTEZOQlFWVnRja0lzWjBKQlMyNUViSEJDTEVWQmJVTlVMRk5CUVZNd2MwSXNUVUZwUkZRc1NVRkJTWEZMTEVkQlFVOTRUQ3hIUVVGWE4zTkNMRWxCTUVKc1FuTTBRaXhIUVVGWmVrd3NSMEZCVjNSMFFpeEpRVEJDZGtKbk5VSXNSMEZCVnpGTUxFZEJRVmR5YzBJc1NVRjNRakZDTEZOQlFWTTRhRUlzUjBGQlV6TkVMRWRCUTJoQ0xFOUJRVTl0UlN4SFFVRk5ia1VzUjBGQlVXcGxMRWRCUVdGdFpTeEhRVUZOUml4SlFYUXdXREZETEZOQlFUQkNRU3hIUVVONFFpeFBRVUZQTEZOQlFWTnlaQ3hIUVVOa0xFOUJRVTl2WkN4SFFVRlJjR1FzUlVGQlVYRmtMRWxCUmpOQ0xFTkJjekJZYjBWQkxFZEJkVVZ3UlN4SlFVRkpObG9zUjBGQlVYUk1MRXRCYzBOU2RVd3NSMEZCWVhaTUxFbEJRVUZCTEVkQmIwSnFRaXhUUVVGVE1rSXNTMEZEVUN4TlFVRlBMRWRCWjBKVUxGTkJRVk5STEV0QlExQXNUMEZCUVN4RlFTdEtSaXhKUVRKdlFrMXNNMElzUjBFemIwSkdPR1lzUjBGQlRYbFZMRWRCUVc5Q0xGTkJRVk5uVFN4RlFVRlJReXhIUVVNM1F5eFBRVUZQUkN4RlFVRlRReXhIUVVObUxFZEJkVUpETDJ0Q0xFZEJRVTluWVN4SFFVRlpMRkZCYVVKdVFtZE1MRWRCUVZOc1RTeEhRVUZ2UWl4VFFVRlRiVTBzUlVGQlZVTXNSMEZEYkVRc1QwRkJUMFFzUlVGQlYwTXNSMEZEYWtJc1IwRjFRa05vYkVJc1IwRkJVVGhhTEVkQlFWa3NVMEYzUzNCQ2JVd3NSMEZCVjNKTkxFZEJRVzlDTEZOQlFWTnpUU3hGUVVGWlF5eEhRVU4wUkN4UFFVRlBSQ3hGUVVGaFF5eEhRVU51UWl4SFFYVkNRME1zUjBGQlVYUk1MRWRCUVZrc1UwRnBRbkJDZFV3c1IwRkJWM3BOTEVkQlFXOUNMRk5CUVZNd1RTeEZRVUZUUXl4SFFVTnVSQ3hQUVVGUFJDeEZRVUZWUXl4SFFVTm9RaXhIUVdkdFFrZ3NUMEV4YVVKQmJHcENMRWRCUVU5dGFrSXNUVUYyTkUxUUxGTkJRV1V6TTBJc1JVRkJSMnBFTEVkQlEyaENMRWRCUVcxQ0xHMUNRVUZTUVN4RlFVTlVMRTFCUVUwc1NVRkJTWE5UTEVkQlFWVXZZeXhIUVVkMFFpeFBRVVJCTUU0c1JVRkJTVzF6UWl4SFFVRlZibk5DTEVkQlExQXNWMEZEVEN4TFFVRk5RU3hGUVVGSkxFVkJRMUlzVDBGQlQycEVMRVZCUVV0RUxFMUJRVTF4V1N4TFFVRk5NRlFzWVVGcE5FMDVRbkpWTEVkQlFVOTNWaXhKUVVGTlFTeEhRVU5pZUZZc1IwRkJUM2xtTEU5QlFWTkJMRWRCUTJoQ2VtWXNSMEZCVHpCbUxGTkJRVmRCTEVkQlEyeENNV1lzUjBGQlR6Sm1MR0ZCUVdWQkxFZEJRM1JDTTJZc1IwRkJUelJtTEZkQlFXRkJMRWRCUTNCQ05XWXNSMEZCVHpabUxFZEJRVXRCTEVkQlExbzNaaXhIUVVGUGRXTXNUMEZCVTBFc1IwRkRhRUoyWXl4SFFVRlBkMk1zUzBGQlQwRXNSMEZEWkhoakxFZEJRVTh5YUVJc1VVRkJWVUVzUjBGRGFrSXphRUlzUjBGQlQzbGpMRkZCUVZWQkxFZEJRMnBDZW1Nc1IwRkJUMjlxUWl4VlFYSTJTMUFzVjBGRFJTeEpRVUZMTDA4c1ZVRkJWVE55UWl4UFFVTmlMRTFCUVU4c1IwRkZWQ3hKUVVGSlVTeEZRVUZSYlhKQ0xGVkJRVlVzUjBGRGRFSXNUMEZCVDI1VkxFZEJRVkZvV0N4SFFVRlRRU3hGUVVGUkxFTkJRVU5CTEVsQmFUWkxia000Vnl4SFFVRlBNbUlzVFVGQlVVRXNSMEZEWmpOaUxFZEJRVTl4YWtJc1RVRnVLMU5RTEZOQlFXVjROa0lzUlVGQlQybFJMRVZCUVUweVlTeEhRVVY0UWpOaExFZEJSRWN5WVN4RlFVRlJReXhIUVVGbE4zRkNMRVZCUVU5cFVTeEZRVUZOTW1Fc1IwRkJVek5oTEVsQlFWTnNZaXhIUVVOc1JDeEZRVVZCZDJkQ0xFZEJRVlYxV2l4SFFVRlZOMlVzUjBGQlR5eEhRVVZ3UXl4SlFVRkpjRkVzUlVGQmEwSXNUVUZCVkVjc1JVRkJaMElzUlVGQlNVRXNSVUZCVFVnc1QwRkRka01zU1VGQlMwRXNSMEZCVlc5UkxFVkJRVThzUlVGRGNFSXNUVUZCVHl4SFFVMVVMRWxCU2tFc1NVRkJTVGRRTEVWQlFWRXNSVUZEVWswc1JVRkJWeXhGUVVOWVF5eEZRVUZUVFN4SFFVRk5NRlFzUjBGQlZ6bFZMRVZCUVZOdlVTeEpRVVZvUXpkUUxFVkJRVkZRTEVkQlEySmpMRVZCUVU5RUxFdEJRV000YkVJc1IwRkJWWGh0UWl4RlFVRlBTU3hGUVVGUlFTeEhRVUZUTmxBc1IwRkZla1FzVDBGQlQzUlFMRWRCYlRsVFZIZFhMRWRCUVU5emFrSXNVVUZxT0ZOUUxGTkJRV2xDZWpaQ0xFZEJUV1lzU1VGTVFTeEpRVUZKU1N4SFFVRlRMRVZCUTFSUUxFVkJRV3RDTEUxQlFWUkhMRVZCUVdkQ0xFVkJRVWxCTEVWQlFVMUlMRTlCUTI1RFlTeEZRVUZYTEVWQlExaERMRVZCUVZNc1MwRkZTbEFzUlVGQlVWQXNSMEZCVVN4RFFVTjJRaXhKUVVGSlVTeEZRVUZSVEN4RlFVRk5TU3hIUVVOa1F5eEpRVU5HVFN4RlFVRlBSQ3hMUVVGalRDeEhRVWQ2UWl4UFFVRlBUU3hIUVhNM1UxUjNWeXhIUVVGUGRXcENMRTlCTnpWVFVDeFhRVU5GTEVsQlFVazNOa0lzUlVGQlV6SnlRaXhWUVVGVk0zSkNMRTlCUTNaQ0xFbEJRVXRCTEVWQlEwZ3NUVUZCVHl4SFFVMVVMRWxCU2tFc1NVRkJTVVFzUlVGQlQzRkNMRWRCUVUxd1FpeEZRVUZUTEVkQlEzUkNSeXhGUVVGUmQzSkNMRlZCUVZVc1IwRkRiRUp3Y2tJc1JVRkJVVkFzUlVGRlRFOHNTMEZEVEZJc1JVRkJTMUVzUlVGQlVTeEhRVUZMYjNKQ0xGVkJRVlZ3Y2tJc1IwRkZPVUlzVDBGQlQyTXNSMEZCVlcxWExFZEJRVkZ5V0N4SFFVRlRPR0lzUjBGQlZUbGlMRWRCUVZNc1EwRkJRMEVzUjBGQlVXbG1MRWRCUVZseVppeEZRVUZOTEV0QmF6VlRiRVoxV0N4SFFVRlBkMnBDTEV0QmJITkRVQ3hUUVVGamJtTXNSMEZEV2l4SlFVRkpNMlVzUlVGQmEwSXNUVUZCVkRKbExFVkJRV2RDTEVWQlFVbEJMRVZCUVUwelpTeFBRVU51UXpSMFFpeEZRVUZoTTBrc1MwRlRha0lzVDBGUVFYUkhMRVZCUVZNelpTeEZRVUZqYlVJc1IwRkJVM2RrTEVWQlFVOHNVMEZCVTNWUkxFZEJRemxETEVkQlFYTkNMRzFDUVVGWVFTeEZRVUZMTEVkQlEyUXNUVUZCVFN4SlFVRkpMMk1zUjBGQlZTOWpMRWRCUlhSQ0xFMUJRVThzUTBGQlEzYzBRaXhGUVVGWGMwSXNSVUZCU3l4SlFVRkxRU3hGUVVGTExFMUJTbXhDTEVkQlQxZ3ZTU3hIUVVGVExGTkJRVk53YlVJc1IwRkZka0lzU1VGRVFTeEpRVUZKVVN4SFFVRlRMRWxCUTBwQkxFVkJRVkZRTEVkQlFWRXNRMEZEZGtJc1NVRkJTV3QyUWl4RlFVRlBkbEVzUlVGQlRYQmxMRWRCUTJwQ0xFZEJRVWxZTEVkQlFVMXpka0lzUlVGQlN5eEhRVUZKYWxnc1MwRkJUV3haTEVkQlEzWkNMRTlCUVU5SUxFZEJRVTF6ZGtJc1JVRkJTeXhIUVVGSmFsZ3NTMEZCVFd4WkxFOUJiWEpEY0VOMVdDeEhRVUZQZVdwQ0xGTkJjbkJEVUN4VFFVRnJRbnBvUXl4SFFVTm9RaXhQUVRNeldVWXNVMEZCYzBKQkxFZEJRM0JDTEVsQlFVa3lTaXhGUVVGUk9GQXNSMEZCUzNwYUxFZEJRMnBDTEU5QlFVOHNVMEZCVTIxS0xFZEJRMlFzVDBGQlR6aGhMRWRCUVdVNVlTeEZRVUZSYmtvc1JVRkJVVEpLTEVsQlNERkRMRU5CTWpOWmMwSjFXU3hIUVVGVmJHbENMRVZCUVZGb1JTeExRWEZ3UTNoRFoybENMRWRCUVU5dlVDeFRRVUZYUVN4SFFVTnNRbkJRTEVkQlFVODRZaXhSUVVGVlFTeEhRVU5xUWpsaUxFZEJRVTk2UkN4UFFYcHpTRkFzVTBGQlowSjRRaXhGUVVGWE1tOUNMRWRCUTNwQ0xFbEJRVWxzTmtJc1JVRkJVemhYTEVkQlFWZDJSaXhIUVVONFFpeFBRVUZ4UWl4TlFVRmtNbTlDTEVWQlFYRkNiRFpDTEVWQlFWTTJXaXhIUVVGWE4xb3NSVUZCVVdzMlFpeEpRWGR6U0RGRU1XcENMRWRCUVU4eWFrSXNUVUUxYzAxUUxGTkJRVk5CTEVWQlFVMXdOMElzUlVGQlRXdDBRaXhGUVVGUGFFTXNSMEZGTVVJc1NVRkJTV3B4UWl4RlFVRlRkWFZDTEVkQlFWZDRka0lzUlVGQlRTOUtMRVZCUVdsQ1dpeEZRVUZYUVN4RlFVRlhRU3hGUVVGWFFTeEZRVUZYUVN4RlFVUXpSall6UWl4RlFVRlJhRU1zUlVGQlVUY3hRaXhGUVVGWk5qTkNMRWRCUnpWQ0xFOUJSRUZxYzBJc1JVRkJUelJRTEZsQlFXTjFjVUlzUlVGQlRYWnhRaXhaUVVOd1FqVlFMRWRCZVhOTlZIZFhMRWRCUVU4MGFrSXNWMEZvY1UxUUxGTkJRVk5CTEVWQlFWZHlOMElzUlVGQlRXdDBRaXhGUVVGUGFFTXNSMEZGTDBJc1NVRkJTV3B4UWl4RlFVRlRkWFZDTEVkQlFWZDRka0lzUlVGQlRUbEtMRVZCUVhWQ1lpeEZRVUZYUVN4RlFVRlhRU3hGUVVGWFFTeEZRVUZYUVN4RlFVUnFSell6UWl4RlFVRlJhRU1zUlVGQlVUY3hRaXhGUVVGWk5qTkNMRWRCUnpWQ0xFOUJSRUZxYzBJc1JVRkJUelJRTEZsQlFXTjNjVUlzUlVGQlYzaHhRaXhaUVVONlFqVlFMRWRCTm5CTlZIZFhMRWRCUVU4d1l5eFRRVUZYUVN4SFFVTnNRakZqTEVkQlFVOTZSaXhUUVVGWFFTeEhRVU5zUW5sR0xFZEJRVTluWjBJc1lVRkJaVUVzUjBGRGRFSm9aMElzUjBGQlR5dGtMRTFCUVZGQkxFZEJRMll2WkN4SFFVRlBaMlVzVFVGQlVVRXNSMEZEWm1obExFZEJRVTlyWVN4WFFVRmhRU3hIUVVOd1FteGhMRWRCUVU5dFlTeGhRVUZsUVN4SFFVTjBRbTVoTEVkQlFVOXZZU3hsUVVGcFFrRXNSMEZEZUVKd1lTeEhRVUZQTm1wQ0xFdEJjbmxUVUN4VFFVRmphRGRDTEVWQlFVOHlReXhGUVVGSGFXOUNMRWRCUTNSQ0xFbEJRVWt2Y1VJc1JVRkJhMElzVFVGQlZFY3NSVUZCWjBJc1JVRkJTVUVzUlVGQlRVZ3NUMEZEZGtNc1QwRkJTMEVzUlVGSlJUSnRRaXhIUVVGVmVHMUNMRWRCUkdwQ01rTXNSVUZCUzJsdlFpeEhRVUZUYW05Q0xFbEJRVTAxVGl4RlFVRmhMRVZCUVVrck5VSXNSMEZCVlc1elFpeEpRVU51UWl4RlFVRkpMRVZCUVVsQkxFVkJRVWM1UXl4SFFVZzVRaXhKUVcxNVUxaHpXQ3hIUVVGUE9HcENMRlZCY0hkVFVDeFRRVUZ0UW1vM1FpeEZRVUZQTWtNc1JVRkJSMmx2UWl4SFFVTXpRaXhKUVVGSkwzRkNMRVZCUVd0Q0xFMUJRVlJITEVWQlFXZENMRVZCUVVsQkxFVkJRVTFJTEU5QlEzWkRMRTlCUVV0QkxFVkJTMFV5YlVJc1IwRkJWWGh0UWl4RlFVRlBMRWRCUkhoQ01rTXNSVUZCU1RsRExFZEJSRW80UXl4RlFVRkxhVzlDTEVkQlFWTnFiMElzU1VGQlRUVk9MRVZCUVdFc1JVRkJTU3MxUWl4SFFVRlZibk5DTEV0QlJXaENMRVZCUVVrc1JVRkJTVUVzUjBGS09VSXNTVUZyZDFOWWQxVXNSMEZCVHl0cVFpeGxRWGgwVTFBc1UwRkJkMEpzTjBJc1JVRkJUMUVzUjBGRE4wSXNUMEZCVVZJc1IwRkJVMEVzUlVGQlRVZ3NUMEZEYmtKeGIwSXNSMEZCVld4dlFpeEZRVUZQT0d0Q0xFZEJRVmwwYTBJc1JVRkJWeXhKUVVGQkxFZEJRVWtzUjBGRE5VTXNTVUZ6ZEZOT01sY3NSMEZCVDJkclFpeFZRV2h5VTFBc1UwRkJiVUp1TjBJc1JVRkJUMUVzUjBGRGVFSXNUMEZCVVZJc1IwRkJVMEVzUlVGQlRVZ3NUMEZEYmtKeGIwSXNSMEZCVld4dlFpeEZRVUZQT0d0Q0xFZEJRVmwwYTBJc1JVRkJWeXhKUVVGQkxFZEJRM2hETEVsQk9IRlRUakpYTEVkQlFVOXBhMElzUzBFNWIxTlFMRk5CUVdOd04wSXNSVUZCVDBzc1JVRkJUelJzUWl4RlFVRlBVU3hIUVVOcVF5eEpRVUZKTlcxQ0xFVkJRV3RDTEUxQlFWUkhMRVZCUVdkQ0xFVkJRVWxCTEVWQlFVMUlMRTlCUTNaRExFOUJRVXRCTEVkQlIwUnZiVUlzUjBGQmVVSXNhVUpCUVZSQkxFZEJRWEZDTkVVc1IwRkJaVGR4UWl4RlFVRlBTeXhGUVVGUE5HeENMRXRCUTNCRlFTeEZRVUZSTEVWQlExSlJMRVZCUVUwMWJVSXNSMEZ1ZFVsV0xGTkJRV3RDUnl4RlFVRlBTeXhGUVVGUE5HeENMRVZCUVU5UkxFZEJRM0pETEVsQlFVazFiVUlzUlVGQlUwY3NSVUZCVFVnc1QwRlhia0lzUzBGVVFXOXRRaXhGUVVGUk5ra3NSMEZCVlRkSkxFbEJRMDRzU1VGRFZrRXNSMEZCVTBFc1JVRkJVWEJ0UWl4RlFVRlRMRVZCUVV0QkxFVkJRVk52YlVJc1NVRkZNVU5STEVWQlFVOUJMRWxCUVZFeGVFSXNSMEZCWVRCNFFpeEZRVUZOTlcxQ0xFVkJRVlZCTEVWQlFWTnBka0lzUjBGQlZYSkpMRWxCUTNKRUxFbEJRMUpCTEVkQlFVODFiVUlzUjBGRlZEUnRRaXhGUVVGTlVpeEZRVUZSVVN4RlFVRk5MRVZCUVVscFVTeEhRVUZUYWxFc1IwRkRNVUpTTEVWQlFWRlJMRWRCUTJKNmJVSXNSVUZCVFdsdFFpeExRVUZYTld4Q0xFVkJSVzVDTEU5QlFVOU1MRVZCWmxRc1EwRnhkVWxyUWtFc1JVRkJUMHNzUlVGQlR6UnNRaXhGUVVGUFVTeEpRVTQxUWl4SlFUUnZVMWgwVUN4SFFVRlBhMnRDTEU5Qk9YUlBVQ3hUUVVGblFubzFRaXhGUVVGWmNFSXNSMEZGTVVJc1QwRkVWelpYTEVkQlFWRjZWaXhIUVVGamJrSXNSMEZCWTNWbExFbEJRMjVEY0dRc1JVRkJXV3RxUWl4SFFVRlpkR3RDTEVWQlFWY3NTMEUyZEU5cVJESlhMRWRCUVU5dGEwSXNVVUV4YjA5UUxGTkJRV2xDTVRWQ0xFVkJRVmt4UWl4SFFVTXpRaXhQUVVGUEsyVXNSMEZCV1dwUUxFZEJRVWx3VHl4RlFVRlpNVUlzUjBGQlZ5eEpRVEJ2VDJoRWFWZ3NSMEZCVDI5clFpeFpRVzV1VDFBc1UwRkJjVUl6TlVJc1JVRkJXVEZDTEVkQlF5OUNMRTlCUVU4clpTeEhRVUZaYWxBc1IwRkJTWEJQTEVWQlFWa3hRaXhIUVVGWE9Vb3NTVUZ0Yms5b1JDdG5RaXhIUVVGUGNXdENMR0ZCTTJ4UFVDeFRRVUZ6UWpVMVFpeEZRVUZaTVVJc1JVRkJWV2RtTEVkQlJURkRMRTlCUkVGQkxFVkJRVkZCTEVsQlFWVnVjVUlzUlVGQldTeEZRVUZKS3pWQ0xFZEJRVlUxVUN4SFFVTnlRMFFzUjBGQldXcFFMRWRCUVVsd1R5eEZRVUZaTVVJc1IwRkJWMmRtTEVsQk1HeFBhRVF2U0N4SFFVRlBkVmtzVVVGQlZVRXNSMEZEYWtKMldTeEhRVUZQYzJ0Q0xGbEJkR2RUVUN4VFFVRnhRbm8zUWl4SFFVVnVRaXhQUVVSelFpeE5RVUZVUVN4SFFVRnZRa0VzUlVGQlRVZ3NUMEZEZGtKdlppeEhRVUZaYW1Zc1JVRkJUelZLTEVkQlFWa3NTVUZ4WjFOcVJDdG5RaXhIUVVGUGRXdENMR0ZCT1N0U1VDeFRRVUZ6UWpFM1FpeEZRVUZQYTJZc1IwRkZNMElzVDBGRWMwSXNUVUZCVkd4bUxFZEJRVzlDUVN4RlFVRk5TQ3hQUVV0b1EyOW1MRWRCUVZscVppeEZRVVJ1UW10bUxFVkJRVkZCTEVsQlFWVnVjVUlzUlVGQldTeEZRVUZKS3pWQ0xFZEJRVlUxVUN4SlFVWnVReXhKUVRRclVsZ3ZTQ3hIUVVGUGQydENMRXRCTlRkTVVDeFRRVUZqYWpoQ0xFZEJRMW9zVDBGQlQzZDJRaXhIUVVGWGVIWkNMRVZCUVUxNlNpeEpRVFEzVERGQ2EyaENMRWRCUVU4MmFFSXNTMEZCVDBFc1IwRkRaRGRvUWl4SFFVRlBPR2hDTEZWQlFWbEJMRWRCUTI1Q09XaENMRWRCUVU5NWEwSXNWVUV4T1ZKUUxGTkJRVzFDY0dRc1IwRkxha0lzU1VGS1FTeEpRVUZKY0dVc1IwRkJVeXhGUVVOVVVDeEZRVUZyUWl4TlFVRlVNbVVzUlVGQlowSXNSVUZCU1VFc1JVRkJUVE5sTEU5QlEyNURZeXhGUVVGVExFdEJSVXBRTEVWQlFWRlFMRWRCUVZFc1EwRkRka0lzU1VGQlNXdDJRaXhGUVVGUGRsRXNSVUZCVFhCbExFZEJRMnBDVHl4RlFVRlBiM1ZDTEVWQlFVc3NTVUZCVFVFc1JVRkJTeXhIUVVWNlFpeFBRVUZQY0hWQ0xFZEJhemxTVkhkWExFZEJRVTh3YTBJc1ZVRTVOa2RRTEZOQlFXMUNkalZDTEVkQlEycENMRTlCUVdsQ0xFMUJRVlpCTEVWQlFXbENMRWRCUVV0clpDeEhRVUZqYkdRc1JVRkJVWE5STEVkQlFVdDBVU3hMUVRnMlJ6RkVObFVzUjBGQlR6SnJRaXhaUVhBMVIxQXNVMEZCY1VKNE5VSXNSMEZEYmtJc1QwRkJhVUlzVFVGQlZrRXNSVUZCYVVJc1IwRkJTMnRrTEVkQlFXTnNaQ3hGUVVGUksxb3NSMEZCVHk5YUxFdEJielZITlVRMlZTeEhRVUZQYTJNc1VVRkJWVUVzUjBGRGFrSnNZeXhIUVVGUE5HdENMRkZCTXpSU1VDeFRRVUZwUWk4M1FpeEhRVVZtTEU5QlJITkNMRTFCUVZSQkxFZEJRVzlDUVN4RlFVRk5TQ3hQUVVOMlFqSnRRaXhIUVVGVmVHMUNMRVZCUVU4c1IwRkJTU3hIUVVGTExFbEJNRFJTTlVOdFdDeEhRVUZQZDJFc1lVRkJaVUVzUjBGRGRFSjRZU3hIUVVGUE1HRXNaVUZCYVVKQkxFZEJRM2hDTVdFc1IwRkJUekpoTEdsQ1FVRnRRa0VzUjBGRE1VSXpZU3hIUVVGUGEyZENMRTlCUVZOQkxFZEJRMmhDYkdkQ0xFZEJRVTl0WjBJc1UwRkJWMEVzUjBGRGJFSnVaMElzUjBGQlQyMWpMRlZCUVZsQkxFZEJRMjVDYm1Nc1IwRkJUMnBZTEZOQlFWZEJMRWRCUTJ4Q2FWZ3NSMEZCVDI5akxFMUJRVkZCTEVkQlEyWndZeXhIUVVGUGRrVXNTMEZCVDBFc1IwRkRaSFZGTEVkQlFVOXJSaXhQUVVGVFFTeEhRVU5vUW14R0xFZEJRVTl1U0N4SlFVRk5RU3hIUVVOaWJVZ3NSMEZCVHpaclFpeFJRVGR3UjFBc1UwRkJhVUl4TlVJc1JVRkJVWEJETEVkQlEzWkNMRWxCUVVsVExFVkJRVk1zUjBGTllpeFBRVXhCVkN4RlFVRlhOR3RDTEVkQlFWazFhMElzUlVGQlZTeEhRVVZxUTNkbExFZEJRVmR3WXl4RlFVRlJMRk5CUVZOcVF5eEZRVUZQZVVJc1JVRkJTMUVzUjBGRGRFTTBXQ3hIUVVGblFuWmFMRVZCUVZGVUxFVkJRVk5ITEVWQlFVOTVRaXhGUVVGTFVTeEhRVUZUYWtNc1MwRkZha1JOTEVkQmRYQkhWSGRYTEVkQlFVODRhMElzVlVGNGJrZFFMRk5CUVcxQ016VkNMRVZCUVZGd1F5eEhRVU42UWl4SlFVRkpVeXhGUVVGVExFZEJUV0lzVDBGTVFWUXNSVUZCVnpSclFpeEhRVUZaTld0Q0xFVkJRVlVzUjBGRmFrTjNaU3hIUVVGWGNHTXNSVUZCVVN4VFFVRlRha01zUlVGQlQzbENMRVZCUVV0UkxFZEJRM1JETkZnc1IwRkJaMEoyV2l4RlFVRlJiVUlzUlVGQlN6VkNMRVZCUVZOSExFVkJRVTk1UWl4RlFVRkxVU3hOUVVVM1F6TkNMRWRCYTI1SFZIZFhMRWRCUVU4cmEwSXNVVUZzWjBOUUxGTkJRV2xDTDJsRExFZEJRMllzVDBGQlQydHhRaXhIUVVGWmFFa3NSMEZCVld4cFFpeEZRVUZSYUVVc1MwRnJaME4yUTJkcFFpeEhRVUZQWjJ4Q0xHZENRWElyUWxBc1UwRkJlVUo0WXl4RlFVRk5jVVFzUjBGRE4wSXNUMEZCVDBrc1IwRkJiMEo2UkN4RlFVRk5kRVVzUjBGQlZUSklMRVZCUVZVM2RFSXNTMEZ4SzBKMlJHZHBRaXhIUVVGUE5sb3NVVUZCVlVFc1IwRkRha0kzV2l4SFFVRlBkV2RDTEUxQlFWRkJMRWRCUTJaMlowSXNSMEZCVDJsblFpeFZRVUZaUVN4SFFVTnVRbXBuUWl4SFFVRlBLMmhDTEU5QlFWTkJMRWRCUTJoQ0wyaENMRWRCUVU5bmFVSXNVMEZCVjBFc1IwRkRiRUpvYVVJc1IwRkJUMmxwUWl4TlFVRlJRU3hIUVVObWFtbENMRWRCUVU5dlpTeFBRVUZUUVN4SFFVTm9RbkJsTEVkQlFVOXBiRUlzVDBFNWVVSlFMRk5CUVdkQ2VqVkNMRWRCUldRc1QwRkVRVUVzUlVGQlNXMXpRaXhIUVVGVmJuTkNMRWRCUTFCeGFrSXNSMEZCVXl4VFFVRlRjRzFDTEVkQlEzWkNMRTlCUVU4NGEwSXNSMEZCVVRsclFpeEZRVUZOSzBNc1RVRTBlVUo2UW5kVkxFZEJRVTkzWjBJc1MwRkJUMEVzUjBGRFpIaG5RaXhIUVVGUGEyeENMRTlCZEM5R1VDeFRRVUZuUWk4MVFpeEZRVUZST1VJc1IwRkRkRUlzVDBGQlQyOHpRaXhIUVVGUGRERkNMRVZCUVZGcGVrSXNSMEZCVDNwUkxFZEJRVmwwYTBJc1RVRnpMMFl6UXpKWExFZEJRVTl0YkVJc1MwRm9Na3hRTEZOQlFXTTFPRUlzUjBGRFdpeFBRVUZQWnpCQ0xFZEJRVThzUlVGQlIyZ3dRaXhKUVdjeVRHNUNlVmdzUjBGQlQyOXNRaXhSUVhneVRsQXNVMEZCYVVJek5rSXNSVUZCV1dkcVFpeEZRVUZYUXl4RlFVRlJLMFlzUjBGRE9VTXNUMEZCYTBJc1RVRkJaR2h3UWl4RlFVTkxMRWxCUlVwNVZpeEhRVUZSZFU0c1MwRkRXRUVzUlVGQmVVSXNUVUZCWWtFc1JVRkJiMElzUjBGQlN5eERRVUZEUVN4SlFVZHVRM1pPTEVkQlJFeDNUaXhGUVVGVEswWXNSVUZCVVRjeFFpeEZRVUZaT0haQ0xFdEJSVE5DUVN4RlFVRnRRaXhOUVVGV1FTeEZRVUZwUWl4SFFVRkxMRU5CUVVOQkxFbEJSVE5DUml4SFFVRlpMMmxDTEVWQlFWbG5ha0lzUlVGQlYwTXNTMEU0TVU0MVF6Rk9MRWRCUVU5cmFVSXNTMEZCVDBFc1IwRkRaR3hwUWl4SFFVRlBjV1VzVTBGQlYwRXNSMEZEYkVKeVpTeEhRVUZQYldsQ0xGVkJRVmxCTEVkQlEyNUNibWxDTEVkQlFVOXZhVUlzVTBGQlYwRXNSMEZEYkVKd2FVSXNSMEZCVDNkbExGRkJRVlZCTEVkQlEycENlR1VzUjBGQlQzbGxMR0ZCUVdWQkxFZEJRM1JDZW1Vc1IwRkJUM0ZqTEZWQlFWbEJMRWRCUTI1Q2NtTXNSMEZCVDNoR0xFdEJRVTlCTEVkQlEyUjNSaXhIUVVGUGVXZENMRTlCUVZOQkxFZEJRMmhDZW1kQ0xFZEJRVTl0VFN4VFFVRlhRU3hIUVVOc1FtNU5MRWRCUVU5eGJFSXNWMEV2Y2tKUUxGTkJRVzlDYkRaQ0xFZEJRMnhDTEU5QlFVOHNVMEZCVTNGa0xFZEJRMlFzVDBGQmFVSXNUVUZCVm5Ka0xFVkJRV2xDZGs0c1JVRkJXVEp4UWl4SFFVRlJjR1FzUlVGQlVYRmtMRXRCT0hKQ2VFUjRTU3hIUVVGUE5HRXNTMEZCVDBFc1IwRkRaRFZoTEVkQlFVODJZU3hSUVVGVlFTeEhRVU5xUWpkaExFZEJRVTl6YkVJc1ZVRnVjVkpRTEZOQlFXMUNlamhDTEVWQlFVOXRRaXhGUVVGUmFrSXNSMEZEYUVNc1QwRkJVVVlzUjBGQlUwRXNSVUZCVFVnc1VVRkJWWE5DTEVkQlFWVkJMRVZCUVU5MFFpeFBRVU01UXpSc1FpeEhRVUZaZW14Q0xFVkJRVTl0UWl4RlFVRlJNbXBDTEVkQlFWazFhMElzUlVGQlZTeEpRVU5xUkVZc1IwRnBjVkpPYlZnc1IwRkJUM1ZzUWl4WlFYWnZVbEFzVTBGQmNVSXhPRUlzUlVGQlQyMUNMRVZCUVZGS0xFZEJRMnhETEU5QlFWRm1MRWRCUVZOQkxFVkJRVTFJTEZGQlFWVnpRaXhIUVVGVlFTeEZRVUZQZEVJc1QwRkRPVU0wYkVJc1IwRkJXWHBzUWl4RlFVRlBiVUlzUlVGQlVYQk5MRVZCUVZkblRTeEhRVU4wUTJZc1IwRnhiMUpPYlZnc1IwRkJUemhoTEU5QlFWTkJMRWRCUTJoQ09XRXNSMEZCVDNGcFFpeE5RVUZSUVN4SFFVTm1jbWxDTEVkQlFVOXphVUlzVjBGQllVRXNSMEZEY0VKMGFVSXNSMEZCVHpCbExFMUJRVkZCTEVkQlEyWXhaU3hIUVVGUGQyeENMRTlCTTNST1VDeFRRVUZuUWk4MlFpeEZRVUZaY0VJc1IwRkZNVUlzVDBGRVZ6WlhMRWRCUVZGNlZpeEhRVUZqYmtJc1IwRkJZM1ZsTEVsQlEyNURjR1FzUlVGQldUSjZRaXhIUVVGUGVsRXNSMEZCV1hSclFpeEZRVUZYTEUxQk1IUk9lRVF5Vnl4SFFVRlBlV3hDTEU5QmVHdFNVQ3hUUVVGblFqVTRRaXhGUVVGUFVTeEhRVU55UWl4SlFVRkpSeXhGUVVGVExFZEJRMklzU1VGQlRWZ3NTVUZCVTBFc1JVRkJUVWdzVDBGRGJrSXNUMEZCVDJNc1JVRkZWQ3hKUVVGSlVDeEhRVUZUTEVWQlExUjNiRUlzUlVGQlZTeEhRVU5XTDJ4Q0xFVkJRVk5ITEVWQlFVMUlMRTlCUjI1Q0xFbEJSRUZYTEVWQlFWbHphMElzUjBGQldYUnJRaXhGUVVGWExFdEJRekZDU2l4RlFVRlJVQ3hIUVVGUkxFTkJRM1pDTEVsQlFVbFJMRVZCUVZGTUxFVkJRVTFKTEVkQlEyUkpMRVZCUVZWSUxFVkJRVTlFTEVWQlFVOUtMRXRCUXpGQ1Z5eEZRVUZQYTFvc1MwRkJTM2hhTEVkQlExcDFiRUlzUlVGQlVTOU1MRXRCUVV0NldpeEpRVWxxUWl4UFFVUkJkV3hDTEVkQlFWY3piRUlzUlVGQlR6UnNRaXhIUVVOWWFteENMRWRCZFdwU1ZIZFhMRWRCUVU4d2JFSXNTMEZ5YzB4UUxGTkJRV051T1VJc1JVRkJUWFZ0UWl4SFFVTnNRaXhIUVVGdFFpeHRRa0ZCVW5adFFpeEZRVU5VTEUxQlFVMHNTVUZCU1hOVExFZEJRVlV2WXl4SFFVZDBRaXhQUVVGUEszZENMRWRCUVZOMGJVSXNSVUZFYUVKMWJVSXNSVUZCVVVFc1NVRkJWV3g0UWl4RlFVRlphM2hDTEVWQlFWRTJTU3hIUVVGVk4wa3NTMEZyYzB4c1JEbFBMRWRCUVU5dVFpeFJRVUZWUVN4SFFVTnFRbTFDTEVkQlFVOHliRUlzVjBGdWNrNVFMRk5CUVc5Q2JEZENMRVZCUVZsbExFVkJRVWRwYjBJc1IwRlBha01zVDBGTVJXcHZRaXhIUVVSSGFXOUNMRVZCUVZGRExFZEJRV1ZxY0VJc1JVRkJXV1VzUlVGQlIybHZRaXhIUVVGVGFtOUNMRWxCUVUwMVRpeEhRVU53UkN4RlFVVkJLelZDTEVkQlFWVnVjMElzU1VGRlREQlZMRWRCUVZGNlZpeEhRWFp6VDNKQ0xGTkJRWGxDTlVJc1JVRkJUekpETEVkQlF6bENMRTlCUVU5dGRVSXNSMEZCV1doV0xFZEJRVlU1WWl4SFFVRlJhV0lzUjBGQlZYUlpMRVZCUVVjc1JVRkJSek5ETEVWQlFVMUlMRlZCS3l0RE4wUXNVMEZCZDBJclFpeEZRVUZaWlN4SFFVTnNReXhKUVVGSk0wTXNSVUZCVVcxQ0xFZEJRVTlUTEVkQlEyNUNMRTlCUVU5cmRrSXNSMEZCV1RsM1FpeEZRVUZQYVdJc1IwRkJWWFJaTEVWQlFVY3NSVUZCUnpORExFVkJRVTFJTEZkQmMzUk1jRU1yUWl4RlFVRlpaU3hKUVRaeFRqRkNkMVVzUjBGQlR6RkhMRWxCTVRSR1VDeFRRVUZoYms4c1JVRkJVWEZrTEVWQlFVMTBaaXhIUVVONlFpeFBRVUZwUWl4TlFVRldhVU1zUlVGQmFVSkJMRVZCUVZOcmFrSXNSMEZCVVd4cVFpeEZRVUZSY1dRc1JVRkJUWFJtTEVsQk1EUkdla1E0Vnl4SFFVRlBOR3hDTEZGQkx6SkdVQ3hUUVVGcFFubzJRaXhGUVVGUmNXUXNSVUZCVFhSbUxFVkJRVTlyWWl4SFFVVndReXhQUVVSQlFTeEZRVUZyUXl4dFFrRkJaRUVzUlVGQk1rSkJMRVZCUVdGNGJVSXNSVUZETTBNc1RVRkJWblZPTEVWQlFXbENRU3hGUVVGVGEycENMRWRCUVZGc2FrSXNSVUZCVVhGa0xFVkJRVTEwWml4RlFVRlBhMklzU1VFNE1rWm9SWEJGTEVkQlFVODJiRUlzVVVFM2NFNVFMRk5CUVdsQ2NEZENMRWRCUldZc1QwRkVWM2xXTEVkQlFWRjZWaXhIUVdoMFQzSkNMRk5CUVhOQ05VSXNSMEZEY0VJc1QwRkJUemgzUWl4SFFVRlphRllzUjBGQlZUbGlMRXRCYzJwRUwwSXNVMEZCY1VJMFFpeEhRVU51UWl4UFFVRlBhM1pDTEVkQlFWa3pka0lzUjBGQlQxTXNUVUY1Y0V4a1FTeEpRVFJ3VG1SMVZpeEhRVUZQT0ZJc1RVRXZaMUpRTEZOQlFXVnFjRUlzUlVGQlQybHRRaXhGUVVGUFVTeEhRVU16UWl4SlFVRkpOVzFDTEVWQlFXdENMRTFCUVZSSExFVkJRV2RDTEVWQlFVbEJMRVZCUVUxSUxFOUJRM1pETEU5QlFVdEJMRWRCUjBRMGJVSXNSMEZCY1VJc2FVSkJRVkJCTEVkQlFXMUNiMFVzUjBGQlpUZHhRaXhGUVVGUGFXMUNMRVZCUVU5UkxFbEJRMmhGVWl4RlFVRlJMRVZCUTFKUkxFVkJRVTAxYlVJc1NVRkhUbTl0UWl4RlFVRnBRaXhOUVVGVVFTeEZRVUZuUWl4RlFVRkpOa2tzUjBGQlZUZEpMRWRCUTNSRFVTeEZRVUZOUVN4SlFVRlJNWGhDTEVWQlFWazRTeXhGUVVGVGFYWkNMRWRCUVZWeVNTeEpRVVY0UTBRc1IwRkJWWGh0UWl4RlFVRlBhVzFDTEVWQlFVOVJMRWxCVm5SQ0xFbEJObWRTV0hSUUxFZEJRVTl6WXl4UFFVRlRRU3hIUVVOb1FuUmpMRWRCUVU4NGJFSXNWMEYyTVZGUUxGTkJRVzlDYWpsQ0xFZEJRMnhDTEU5QlFWRkJMRWRCUVZOQkxFVkJRVTFJTEU5QlEyNUNObTVDTEVkQlFXVXhia0lzUjBGRFppeEpRWEV4VVU1dFdDeEhRVUZQSzJ4Q0xHRkJiREJSVUN4VFFVRnpRbXc1UWl4RlFVRlBSU3hIUVVNelFpeFBRVUZSUml4SFFVRlRRU3hGUVVGTlNDeFBRVU51UWpadVFpeEhRVUZsTVc1Q0xFVkJRVTg0YTBJc1IwRkJXVFZyUWl4RlFVRlZMRWxCUXpWRExFbEJaekJSVG1sWUxFZEJRVTl3Unl4TlFTOHZSRkFzVTBGQlpXeENMRVZCUVZGemRFSXNSVUZCVjBNc1IwRkxhRU1zVDBGS1NVRXNSMEZCZVVJc2FVSkJRVlJCTEVkQlFYRkNkbE1zUjBGQlpXaGlMRVZCUVZGemRFSXNSVUZCVjBNc1MwRkRla1ZFTEVWQlFWbERMRVZCUVZGeWIwTXNTVUZGZEVKeGIwTXNSVUZCVVVFc1NVRkJWWEp2UXl4RlFVRlpNRUlzUlVGQmJVSXliVU1zU1VGQlZTeEpRVWt6UkhaMFFpeEZRVUZUTUVNc1IwRkJVekZETEUxQlJWRXNhVUpCUVdKemRFSXNSMEZEVHl4TlFVRmlRU3hKUVVGelFpODVRaXhIUVVGVEt6bENMRTlCUlhCRFFTeEZRVUZaZGxZc1IwRkJZWFZXTEV0QlExQjJkRUlzUjBGQlYwTXNSMEZEY0VKcldpeEhRVUZWYkZrc1IwRkJZMmhDTEVkQlFWTXNSVUZCUjNWMFFpeEhRVWQ0UTNaMFFpeEZRVUZQYTBJc1RVRkJUVzl6UWl4RlFVRlhReXhIUVZwMFFpeEpRVEF2UkZocWJVSXNSMEZCVDJ0dFFpeFBRWFJ4VEZBc1UwRkJaMEl6T1VJc1JVRkJUWFZ0UWl4SFFVTndRaXhIUVVGdFFpeHRRa0ZCVW5adFFpeEZRVU5VTEUxQlFVMHNTVUZCU1hOVExFZEJRVlV2WXl4SFFVZDBRaXhQUVVSQlozaENMRVZCUVdsQ0xFMUJRVlJCTEVWQlFXZENMRVZCUVVreFVTeEhRVUZWZFZvc1IwRkJWVGRKTEVkQlFWRXNSMEZEYWtSRUxFZEJRVk1zVTBGQlUzQnRRaXhIUVVOMlFpeEpRVUZKU1N4RlFVRlJTaXhGUVVGTGNXMUNMRWRCUTJKeFN5eEZRVUZaZGtnc1IwRkJWVzV3UWl4RlFVRk5MRVZCUVVkeGJVSXNSMEZMYmtNc1QwRklTV3B0UWl4SFFVTkdhMElzUjBGQlZXOTJRaXhGUVVGWGRIZENMRWRCUldoQ1VDeEhRVUZOUXl4RlFVRk5iMWtzUzBGQlRYZFpMRTFCTW5CTU4wSnVXaXhIUVVGUGJXMUNMRXRCYW5wUlVDeFRRVUZqZERsQ0xFZEJRMW9zU1VGQlNVZ3NSVUZCYTBJc1RVRkJWRWNzUlVGQlowSXNSVUZCU1VFc1JVRkJUVWdzVDBGRGRrTXNUMEZCVDBFc1JVRkJVekp0UWl4SFFVRlZlRzFDTEVWQlFVOHNSVUZCUjBnc1IwRkJWU3hKUVdkNlVXaEVjMWdzUjBGQlQyOXRRaXhMUVhCNFVWQXNVMEZCWTNZNVFpeEZRVUZQTWtNc1JVRkJSMmx2UWl4SFFVTjBRaXhQUVVGTk5YRkNMRWRCUVZOQkxFVkJRVTFJTEU5QlNXUXliVUlzUjBGQlZYaHRRaXhGUVVGUExFZEJSSGhDTWtNc1JVRkJTMmx2UWl4SFFVRlRhbTlDTEVsQlFVMDFUaXhGUVVGaExFVkJRVWtyTlVJc1IwRkJWVzV6UWl4SlFVTm9RaXhGUVVGSkxFVkJRVWxCTEVkQlNEbENMRWxCYlhoUldIZFZMRWRCUVU5eGJVSXNWVUZ3ZGxGUUxGTkJRVzFDZURsQ0xFVkJRVTh5UXl4RlFVRkhhVzlDTEVkQlF6TkNMRWxCUVVrdmNVSXNSVUZCYTBJc1RVRkJWRWNzUlVGQlowSXNSVUZCU1VFc1JVRkJUVWdzVDBGRGRrTXNUMEZCUzBFc1JVRkxSVEp0UWl4SFFVRlZlRzFDTEVkQlJHcENNa01zUlVGQlNUbERMRWRCUkVvNFF5eEZRVUZMYVc5Q0xFZEJRVk5xYjBJc1NVRkJUVFZPTEVWQlFXRXNSVUZCU1NzMVFpeEhRVUZWYm5OQ0xFdEJSVzVDTEVWQlFVa3NSVUZCU1VFc1JVRkJSemxETEVkQlNqbENMRWxCYTNaUldITllMRWRCUVU5emJVSXNaVUY0YzFGUUxGTkJRWGRDZWpsQ0xFVkJRVTlSTEVkQlF6ZENMRTlCUVZGU0xFZEJRVk5CTEVWQlFVMUlMRTlCUTI1Q2NXOUNMRWRCUVZWc2IwSXNSVUZCVHpoclFpeEhRVUZaZEd0Q0xFVkJRVmNzU1VGQlFTeEhRVUZKTEVkQlF6VkRMRWxCYzNOUlRqSlhMRWRCUVU5MWJVSXNWVUZvY1ZGUUxGTkJRVzFDTVRsQ0xFVkJRVTlSTEVkQlEzaENMRTlCUVZGU0xFZEJRVk5CTEVWQlFVMUlMRTlCUTI1Q2NXOUNMRWRCUVZWc2IwSXNSVUZCVHpoclFpeEhRVUZaZEd0Q0xFVkJRVmNzU1VGRGVFTXNTVUU0Y0ZGT01sY3NSMEZCVDNkdFFpeEpRVzV6VUZBc1UwRkJZWFE1UWl4RlFVRlBNSGxDTEVkQlJXeENMRTlCUkVGQkxFVkJRVmt4ZVVJc1IwRkRURUVzUjBGcmMxQlVPRmNzUjBGQlQzbHRRaXhUUVdwdVRGQXNVMEZCYTBKc0swSXNSVUZCVFRSa0xFVkJRVTEzVnl4SFFVTTFRaXhKUVVGSlR5eEhRVUZCUVN4RlFVTkJia29zUjBGQlFVRXNSVUZGU2l4SFFVRnRRaXh0UWtGQlVuaHlRaXhGUVVOVUxFMUJRVTBzU1VGQlNYTlRMRWRCUVZVdll5eEhRVTEwUWl4UFFVcEpNR2xDTEVkQlFWTnRZeXhMUVVOWVR5eEZRVUZWTEZsQlFXRlFMRWxCUVZsQkxFVkJRVkZQTEZGQlFWVkJMRVZCUTNKRWJrb3NSVUZCVnl4aFFVRmpORWtzU1VGQldVRXNSVUZCVVRWSkxGTkJRVmRCTEVkQlJXNUVNa2tzUjBGQlUyNHdRaXhGUVVGTk5HUXNSVUZCVFN4RFFVTXhRaXRYTEZGQlFWZEJMRVZCUTFoS0xGRkJRVmN6Vnl4RlFVTllORTRzVTBGQldVRXNTMEZ2YlV4b1FpOVVMRWRCUVU4MlZTeExRVUZQUVN4SFFVTmtOMVVzUjBGQlQyMW1MRkZCUVZWQkxFZEJRMnBDYm1Zc1IwRkJUekpuUWl4UlFVRlZRU3hIUVVOcVFqTm5RaXhIUVVGUE5HZENMRlZCUVZsQkxFZEJRMjVDTldkQ0xFZEJRVTh3YlVJc1QwRnlabEFzVTBGQlowSjRPVUlzUjBGRFpDeFBRVUZKWjFnc1IwRkJVV2hZTEVkQlEwaFhMRWRCUVZOWUxFVkJRVTkzWml4SlFVVnNRbVFzUjBGQlV6RmxMRWRCUVZNc1EwRkJRMEVzUjBGQlUzbGlMRWRCUVZVclRTeEhRVUZoZEZjc1IwRkJVMnhUTEUxQmEyWnlSVGhYTEVkQlFVOXpUaXhqUVVGblFrRXNSMEZEZGtKMFRpeEhRVUZQTDBjc1ZVRTNlVVpRTEZOQlFXMUNPVTRzUlVGQlVYQkRMRVZCUVZWRExFZEJRMjVETEVsQlFVbHRXaXhGUVVGUmFrTXNSMEZCVVM5VkxFZEJRMmhDZHpkQ0xFVkJRVmw0YTBJc1IwRkJVM0JGTEVkQlFWTTFVeXhKUVVGWE9VTXNSMEZCWVRoRExFZEJSekZFTEVkQlJFRndReXhGUVVGWE5HdENMRWRCUVZrMWEwSXNSVUZCVlN4SFFVTmtMRTFCUVdaRExFVkJRWEZDTEVOQlEzWkNMRWxCUVVsell5eEZRVUZQYm1Fc1IwRkJWVUVzUlVGQlQzTmFMRmxCUlRGQ2VtSXNSVUZFUlRJNVFpeEZRVU5aZUd0Q0xFVkJRVkVzU1VGQlNXMUVMRVZCUVU4c1IwRkZNVUk1UlN4SFFVRlRjbFlzU1VGRFJtMWtMRWRCUVZkb1JDeEhRVUZSYUVZc1IwRkJWMnhGTEVkQlFXRnFVaXhKUVVjelF5eEhRVTFzUWl4UFFVaERkemRDTEVWQlFWbDRPVUlzUjBGQldXOWxMRWxCUVZsd1l5eEZRVUZSTEZOQlFWTnFReXhGUVVGUFJDeEZRVUZQYTBNc1IwRkRiRVVzVDBGQlQzQkRMRVZCUVZORExFVkJRV0ZGTEVWQlFVOUVMRVZCUVU5clF5eExRVVYwUTI1RExFZEJNSGhHVkdkWUxFZEJRVTgwYlVJc1RVRjRiRXhRTEZOQlFXVnlLMElzUjBGRFlpeFBRVUZQYVhSQ0xFZEJRVWxxZEVJc1JVRkJUU3hKUVhkc1RHNUNlVmdzUjBGQlR5dGhMRTFCUVZGQkxFZEJRMll2WVN4SFFVRlBaMklzVVVGQlZVRXNSMEZEYWtKb1lpeEhRVUZQYVdJc1ZVRkJXVUVzUjBGRGJrSnFZaXhIUVVGUE5tMUNMRXRCZUd0UlVDeFRRVUZqYUN0Q0xFZEJRMW9zVDBGQlVVRXNSMEZCVTBFc1JVRkJUVWdzVDBGQlZXZHZRaXhIUVVGVE4yNUNMRWRCUVZNc1NVRjNhMUZ5UkcxWUxFZEJRVTg0YlVJc1QwRTVhVkZRTEZOQlFXZENhaXRDTEVWQlFVOUZMRWRCUTNKQ0xFOUJRVkZHTEVkQlFWTkJMRVZCUVUxSUxFOUJRVlZuYjBJc1IwRkJVemR1UWl4RlFVRlBPR3RDTEVkQlFWazFhMElzUlVGQlZTeEpRVUZOTEVsQk9HbFJMMFZwV0N4SFFVRlBLMjFDTEZOQmRtaFJVQ3hUUVVGclFtd3JRaXhGUVVGUFpTeEhRVVYyUWl4UFFVUkJRU3hGUVVGclF5eHRRa0ZCWkVFc1JVRkJNa0pCTEVWQlFXRm9UU3hGUVVOd1JHbE1MRWRCUVZOQkxFVkJRVTFJTEU5QlFWVm5iMElzUjBGQlV6ZHVRaXhGUVVGUGFrd3NSVUZCVjJkTkxFZEJRV01zU1VGemFGRTFSVzlYTEVkQlFVOW5ia0lzVFVGdWQwWlFMRk5CUVdVM04wSXNSVUZCVVhGa0xFZEJRM0pDTEU5QlFXbENMRTFCUVZaeVpDeEhRVUYzUW5kcVFpeEhRVUZWZUdwQ0xFVkJRVkZ4WkN4SlFXMTNSbTVFZUVrc1IwRkJUMnRpTEUxQlFWRkJMRWRCUTJac1lpeEhRVUZQYjJJc1ZVRkJXVUVzUjBGRGJrSndZaXhIUVVGUGFXNUNMRTlCZG5WR1VDeFRRVUZuUWprM1FpeEZRVUZSY1dRc1JVRkJUWE5KTEVkQlF6VkNMRTlCUVdsQ0xFMUJRVll6YkVJc1JVRkJhVUpCTEVWQlFWTXdiRUlzUjBGQlZ6RnNRaXhGUVVGUmNXUXNSVUZCVFdsS0xFZEJRV0ZZTEV0QmRYVkdla1U1VVN4SFFVRlBhMjVDTEZkQk5YTkdVQ3hUUVVGdlFpODNRaXhGUVVGUmNXUXNSVUZCVFhOSkxFVkJRVk14VFN4SFFVVjZReXhQUVVSQlFTeEZRVUZyUXl4dFFrRkJaRUVzUlVGQk1rSkJMRVZCUVdGNGJVSXNSVUZETTBNc1RVRkJWblZPTEVWQlFXbENRU3hGUVVGVE1HeENMRWRCUVZjeGJFSXNSVUZCVVhGa0xFVkJRVTFwU2l4SFFVRmhXQ3hIUVVGVk1VMHNTVUV5YzBadVJuQkZMRWRCUVU5b1Z5eFBRVUZUUVN4SFFVTm9RbWRYTEVkQlFVOXRia0lzVTBGdWNFWlFMRk5CUVd0Q2FEaENMRWRCUTJoQ0xFOUJRV2xDTEUxQlFWWkJMRVZCUVdsQ0xFZEJRVXRQTEVkQlFWZFFMRVZCUVZFcldpeEhRVUZQTDFvc1MwRnRjRVo2UkRaVkxFZEJRVTl4WWl4UlFVRlZRU3hIUVVOcVFuSmlMRWRCUVU5clZTeE5RVUZSUVN4SFFVTm1iRlVzUjBGQlQyOXVRaXhMUVRsclRGQXNVMEZCWTJ3clFpeEZRVUZQTkhKQ0xFZEJRMjVDTEU5QlFVOHdTaXhIUVVGUkwwMHNSMEZCWVhGRUxFZEJRVlUxY2tJc1NVRTRhMHg0UXpoWExFZEJRVTl6WWl4SlFVRk5RU3hIUVVOaWRHSXNSMEZCVDNWaUxFMUJRVkZCTEVkQlEyWjJZaXhIUVVGUGQySXNVVUZCVlVFc1IwRkRha0o0WWl4SFFVRlBlV0lzU1VGQlRVRXNSMEZEWW5waUxFZEJRVTl4YmtJc1ZVRm9NVkJRTEZOQlFXMUNNVGRDTEVWQlFVOHpRaXhIUVVONFFpeFBRVUZQY1c1Q0xFZEJRV014YkVJc1IwRkJVeXhIUVVGSk0wSXNSMEZCVlN4SFFVRkpaMW9zUzBGbk1WQnNSR2hFTEVkQlFVOXpia0lzWTBFNWVsQlFMRk5CUVhWQ016ZENMRVZCUVU4elFpeEhRVU0xUWl4UFFVRlBjVzVDTEVkQlFXTXhiRUlzUjBGQlV5eEhRVUZKTTBJc1IwRkJWU3hIUVVGSmNXdENMRXRCT0hwUWJFUnlUeXhIUVVGUE1HSXNVVUZCVlVFc1IwRkhha0l4WWl4SFFVRlBkVUlzVVVGQlZXOW1MRWRCUTJwQ00yZENMRWRCUVU5MWJrSXNWVUZCV1ROSExFZEJRMjVDTldkQ0xFZEJRVTkzYmtJc1QwRkJVemxJTEVkQlEyaENNV1lzUjBGQlQzbHVRaXhYUVVGaE9VZ3NSMEZIY0VKelF5eEhRVUZOYW1sQ0xFZEJRVkZCTEVsQlMyUkJMRWRCUVU4NFFpeEpRVUZOUVN4SFFVTmlPVUlzUjBGQlR6Qm9RaXhSUVVGVlFTeEhRVU5xUWpGb1FpeEhRVUZQTm1kQ0xGVkJRVmxCTEVkQlEyNUNOMmRDTEVkQlFVOW5hRUlzVjBGQllVRXNSMEZEY0VKb2FFSXNSMEZCVDNaRExFdEJRVTlCTEVkQlEyUjFReXhIUVVGUE1HNUNMRTFCZG5CR1VDeFRRVUZsTTJwQ0xFVkJRVkZETEVWQlFVOURMRWRCWVRWQ0xFOUJXa2xCTEVsQlFWVnliVUlzU1VGRFduRnRRaXhGUVVGUlJDeEZRVU5TUVN4RlFVRlJjRzFDTEVkQlJVNXhiVUlzU1VGQlZYSnRRaXhKUVVWYWNXMUNMRWRCUkVGQkxFVkJRVkZyVkN4SFFVRlRiRlFzUzBGRFEwRXNSVUZCVVVFc1JVRkJVU3hIUVVWb1EwUXNTVUZCVlhCdFFpeEpRVVZhYjIxQ0xFZEJSRUZCTEVWQlFWRnRWQ3hIUVVGVGJsUXNTMEZEUTBFc1JVRkJVVUVzUlVGQlVTeEhRVVUzUWtZc1IwRkJWWEZVTEVkQlFWTndWQ3hIUVVGVFF5eEZRVUZQUXl4SlFUSnZSalZEYWtVc1IwRkJUMmxoTEUxQmFHbE1VQ3hUUVVGbEwzZENMRWRCUTJJc1QwRkJUMmRpTEVkQlFWVm9ZaXhGUVVGUGFFd3NTVUZuYVV3eFFqaG9RaXhIUVVGUE1tNUNMRlZCZGl0TFVDeFRRVUZ0UW5vclFpeEhRVU5xUWl4UFFVRlBaMklzUjBGQlZXaGlMRVZCUVU5c1RDeEZRVUZyUWtVc1NVRjFLMHMxUXpob1FpeEhRVUZQTkc1Q0xHTkJlRGhMVUN4VFFVRjFRakVyUWl4RlFVRlBhMklzUjBGRk5VSXNUMEZCVDBZc1IwRkJWV2hpTEVWQlFVOXNUQ3hGUVVGclFrVXNSVUZFTVVOcmJVSXNSVUZCYTBNc2JVSkJRV1JCTEVWQlFUSkNRU3hGUVVGaGVHMUNMRWxCZHpoTE9VUnZhVUlzUjBGQlR6WnVRaXhWUVdoblRGQXNVMEZCYlVJekswSXNSVUZCVDJ0aUxFZEJSWGhDTEU5QlFVOUdMRWRCUVZWb1lpeEZRVUZQYUV3c1JVRkVlRUpyYlVJc1JVRkJhME1zYlVKQlFXUkJMRVZCUVRKQ1FTeEZRVUZoZUcxQ0xFbEJaMmRNT1VSdmFVSXNSMEZCVHpodVFpeFhRVGMyUzFBc1UwRkJiMEl6T0VJc1JVRkJVVzVLTEVkQlF6RkNMRTlCUVdsQ0xFMUJRVlpCTEVkQlFXdENhV3RDTEVkQlFXVTVZU3hGUVVGUmJrb3NSVUZCVVhsYUxFZEJRVXQ2V2l4TFFUWTJTeTlFWjJVc1IwRkJUMjFWTEU5QlFWTkJMRWRCUTJoQ2JsVXNSMEZCVHl0dVFpeFZRV3AzUTFBc1UwRkJiVUkzSzBJc1JVRkJUM1YwUWl4SFFVTjRRaXhQUVVGcFFpeE5RVUZVZG5SQ0xFZEJRV2xDUVN4SFFVRlZRU3hGUVVGVGRYUkNMRVZCUVdWMmRFSXNSMEZwZDBNM1JEaFhMRWRCUVU5NWFVSXNUMEZCVTBFc1IwRkRhRUo2YVVJc1IwRkJUMmR2UWl4VFFUVTNSVkFzVTBGQmEwSjBka0lzUlVGQlVYVjJRaXhGUVVGUlF5eEhRVU5vUTNoMlFpeEZRVUZUTUVNc1IwRkJVekZETEVkQlEyeENkWFpDTEVWQlFWTjRXQ3hIUVVGaGQxZ3NSMEZGZEVJc1NVRkJTWFl2UWl4RlFVRlRaMUVzUlVGQlQyaFJMRTlCUzJoQ05HMUNMRVZCU2tvMFdTeEZRVUZYUVN4SlFVRmhkSEZETEVWQlEzQkNPRXNzUlVGRFFXOWlMRWRCUVZVMlZDeEhRVUZWZFZFc1IwRkJWeXhGUVVGSGVDOUNMRWRCU1hSRExFOUJSRUYzTDBJc1IwRkJXVVFzUlVGQlQzWXZRaXhUUVVOQkxFZEJRVXRuVVN4RlFVRlBiMW9zVFVGQlRXOVhMRVZCUVZVMVdTeEpRVUZSTWxrc1IwRnJOMFY2UkdwdlFpeEhRVUZQT0VNc1IwRkJTMEVzUjBGRFdqbERMRWRCUVU4MFJ5eFBRWEExUlZBc1UwRkJaMEpzVHl4SFFVVmtMRTlCUkVGQkxFVkJRVk13UXl4SFFVRlRNVU1zUzBGRFFYcFhMRWRCUVcxQ01GY3NTMEZCUzBRc1IwRkRkRU5CTEVWQlFVOXhSQ3hSUVVGUmJHRXNSMEZCYVVKeFZ5eEpRVU5vUTFFc1IwRnBOVVZPYzBnc1IwRkJUMjF2UWl4aFFTOHpSVkFzVTBGQmMwSjZka0lzUjBGRmNFSXNUMEZFUVVFc1JVRkJVekJETEVkQlFWTXhReXhMUVVOQmFsY3NSMEZCWjBKclZ5eExRVUZMUkN4SFFVTnVRMEVzUlVGQlQzRkVMRkZCUVZGMldpeEhRVUZqTEZGQlF6ZENhMWNzUjBFME0wVk9jMGdzUjBGQlQyOXZRaXhOUVRNMVQxQXNVMEZCWlRNNVFpeEZRVUZaY0VJc1JVRkJWMjl4UWl4SFFVTndReXhKUVVGSmJISkNMRVZCUVU4eVdDeEhRVUZSZWxZc1IwRkJZM0pDTEVkQlFXRnpaU3hIUVVrNVF5eFBRVWhKSzB3c1IwRkJVME1zUjBGQlpXcHdRaXhGUVVGWmNFSXNSVUZCVjI5eFFpeExRVU5xUkhCeFFpeEZRVUZaZWt3c1IwRkZVREpMTEVWQlFVdHJReXhGUVVGWmEycENMRWRCUVZsMGEwSXNSVUZCVnl4TFFYVTFUMnBFTWxjc1IwRkJUeXRpTEV0QlFVOUJMRWRCUTJRdllpeEhRVUZQY1dFc1ZVRkJXVUVzUjBGRGJrSnlZU3hIUVVGUGNXOUNMRkZCZUhaSVVDeFRRVUZwUW13NVFpeEZRVUZST1VJc1IwRkRka0lzVDBGQlQyMUNMRWRCUVZsWExFVkJRVkYzYVVJc1IwRkJXWFJyUWl4RlFVRlhMRWRCUVVsclpTeExRWGQyU0hoRWRrZ3NSMEZCVDJkakxGTkJRVmRCTEVkQlEyeENhR01zUjBGQlQzTmhMR05CUVdkQ1FTeEhRVU4yUW5SaExFZEJRVTl6YjBJc1dVRndkRWhRTEZOQlFYRkNiamxDTEVWQlFWRTVRaXhIUVVNelFpeFBRVUZQYlVJc1IwRkJXVmNzUlVGQlVYZHBRaXhIUVVGWmRHdENMRVZCUVZjc1IwRkJTVzlsTEV0QmIzUkllRVI2U0N4SFFVRlBja01zVFVGQlVVRXNSMEZEWm5GRExFZEJRVTlxU0N4UlFVRlZRU3hIUVVOcVFtbElMRWRCUVU5cFl5eGhRVUZsUVN4SFFVTjBRbXBqTEVkQlFVOTFiMElzVFVGNGNraFFMRk5CUVdWd09VSXNSVUZCVVhCRExFZEJRM0pDTEU5QlFXbENMRTFCUVZadlF5eEZRVU5JUVN4RlFVTkJLMk1zUjBGQlVTOWpMRVZCUVZGM2FVSXNSMEZCV1RWclFpeEZRVUZWTEVkQlFVbHRZeXhMUVhOeVNHaEViRVlzUjBGQlQzZHZRaXhYUVhwd1NGQXNVMEZCYjBKeU9VSXNSVUZCVVhCRExFZEJRekZDTEU5QlFXbENMRTFCUVZadlF5eEZRVU5JUVN4RlFVTkJhV1FzUjBGQllXcGtMRVZCUVZGM2FVSXNSMEZCV1RWclFpeEZRVUZWTEVkQlFVbHRZeXhMUVhWd1NISkViRVlzUjBGQlQzbHZRaXhQUVhodVNGQXNVMEZCWjBKME9VSXNSVUZCVVhCRExFZEJRM1JDTEU5QlFVOXZReXhIUVVGVmIyTXNSMEZCVjNCakxFVkJRVkYzYVVJc1IwRkJXVFZyUWl4RlFVRlZMRXRCZDI1SU5VUnBXQ3hIUVVGUE1HOUNMRmxCTTJ4SVVDeFRRVUZ4UW5ZNVFpeEZRVUZSY0VNc1IwRkRNMElzVDBGQlQyOURMRWRCUVZWell5eEhRVUZuUW5SakxFVkJRVkYzYVVJc1IwRkJXVFZyUWl4RlFVRlZMRXRCTW14SWFrVnBXQ3hIUVVGUE5rUXNTVUZCVFVFc1IwRkRZamRFTEVkQlFVOHlaU3hIUVVGTFFTeEhRVU5hTTJVc1IwRkJUelJsTEVsQlFVMUJMRWRCUTJJMVpTeEhRVUZQYkZVc1NVRTFLMGRRTEZOQlFXRllMRVZCUVZGeFpDeEhRVU51UWl4UFFVRnBRaXhOUVVGV2NtUXNSMEZCYTBKM2RFSXNSMEZCVVhoMFFpeEZRVUZSY1dRc1JVRkJUVmNzUzBFMEswZHFSRzVLTEVkQlFVODJUU3hOUVVGUlFTeEhRVU5tTjAwc1IwRkJUM1ZoTEV0QlFVOUJMRWRCUTJSMllTeEhRVUZQWjAwc1UwRkJWMEVzUjBGRGJFSm9UU3hIUVVGUGNVY3NVMEV2Yms5UUxGTkJRV3RDTldJc1JVRkJXWFpDTEVWQlFVOHlRaXhGUVVGWE5HOUNMRWRCUXpsRGFIQkNMRVZCUVdFcmFFSXNSMEZCV1M5b1FpeEhRVUZqUVN4RlFVRmhWQ3hIUVVGUFV5eEhRVU16UkVrc1JVRkJZVUVzU1VGQll6UnZRaXhGUVVGVGEwVXNSMEZCVlRselFpeEhRVUZoTEVWQlJUTkVMRWxCUVVsdVF5eEZRVUZUSzBJc1JVRkJWeTlDTEU5QlNYaENMRTlCU0VsdFF5eEZRVUZaTEVsQlEyUkJMRVZCUVZsMVZDeEhRVUZWTVZZc1JVRkJVMjFETEVWQlFWY3NTVUZGY2tOdE1FSXNSMEZCVTNZd1FpeEhRVU5ZU1N4SFFVRmhia01zUjBGQlZTdENMRVZCUVZjNGFrSXNVVUZCVVhKc1FpeEZRVUZQTWtJc1NVRkJZeXhKUVVNM1JHNURMRWRCUVZWblFpeEhRVUZaWlN4RlFVRlpka0lzUlVGQlR6SkNMRWxCUVdNc1IwRnpiazlvUlcxV0xFZEJRVTkxVHl4UlFUZHFVMUFzVTBGQmFVSXhiRUlzUlVGQlQwc3NSVUZCVHpKQ0xFZEJRemRDTEVsQlFVbHVReXhGUVVGclFpeE5RVUZVUnl4RlFVRm5RaXhGUVVGSlFTeEZRVUZOU0N4UFFVTjJReXhKUVVGTFFTeEZRVU5JTEU5QlFWRXNSVUZGVml4SlFVRkpUeXhGUVVGeFFpeE5RVUZpTkVJc1JVRkJiMElzUlVGQlNUaHpRaXhIUVVGVk9YTkNMRWRCU1RsRExFOUJTRWsxUWl4RlFVRlJMRWxCUTFaQkxFVkJRVkZ0Vml4SFFVRlZNVllzUlVGQlUwOHNSVUZCVHl4SlFVVTNRbE1zUjBGQldXSXNSVUZCVDBzc1JVRkJUMFFzU1VGeGFsTnVReXRYTEVkQlFVOHliMElzVVVGeWIwWlFMRk5CUVdsQ05XdENMRVZCUVZFclN5eEZRVUZQVVN4SFFWTTVRaXhQUVZKQlVpeEZRVUZSYlVrc1IwRkJVMjVKTEVkQlEySlJMRWxCUVZFeGVFSXNSMEZEVmpCNFFpeEZRVUZOVWl4RlFVTk9RU3hGUVVGUkxFZEJSVkpSTEVWQlFVMHlTQ3hIUVVGVE0wZ3NSMEV6Y1ZadVFpeFRRVUZ4UW5aTUxFVkJRVkVyU3l4RlFVRlBVU3hIUVVOc1F5eFBRVUZQZGt3c1IwRkJWWHBHTEVkQlFWVjNVU3hGUVVGUFVTeEpRVUZSZGt3c1JVRkJVek5HTEVkQlFWVXdVU3hGUVVGUFVTeEhRVVIwUlN4RFFUWnhWa1YyVEN4RlFVRlRiMVFzUjBGQlUzQlVMRWRCUTFNclN5eEZRVUZQVVN4SlFUWnVSbkJEZEZBc1IwRkJUMjluUWl4UFFVRlRRU3hIUVVOb1FuQm5RaXhIUVVGUGNVTXNXVUZCWTBFc1IwRkRja0p5UXl4SFFVRlBSU3hSUVVGVlFTeEhRVU5xUWtZc1IwRkJUM0paTEdOQlFXZENRU3hIUVVOMlFuRlpMRWRCUVU5M1RTeFpRVUZqUVN4SFFVTnlRbmhOTEVkQlFVOXZUaXhyUWtGQmIwSkJMRWRCUXpOQ2NFNHNSMEZCVHpSdlFpeFZRWHAxUzFBc1UwRkJiVUl4TDBJc1IwRkRha0lzVDBGQlFTeEpRVUZQUVN4SlFVRkJRU3hKUVVGclFrRXNSMEZEZEVJclZ5eEhRVUZoTDFjc1NVRkJWVFJtTEVkQlFWYzFaaXhKUVVGVmNrb3NSMEYzZFV0cVJHMW5RaXhIUVVGUGFrTXNVMEZCVjBFc1IwRkRiRUpwUXl4SFFVRlBibGtzVDBGQlUwRXNSMEZEYUVKdFdTeEhRVUZQTm05Q0xGVkJhSEpMVUN4VFFVRnRRak12UWl4SFFVTnFRaXhQUVVGUEsxY3NSMEZCWVM5WExFbEJRVFpDTEVsQlFXNUNRU3hGUVVGTmJrTXNWMEZCYlVKemJVSXNSMEZCWTI1clFpeEpRV2R5UzNaRk9GY3NSMEZCVHpodlFpeFJRVFZ2UzFBc1UwRkJhVUkxTDBJc1IwRkRaaXhIUVVGaExFMUJRVlJCTEVWQlEwWXNUMEZCUVN4RlFVVkdMRWRCUVVsemFrSXNSMEZCV1hScVFpeExRVU5ZWjFnc1IwRkJVV2hZTEVsQlFUQkNMR2xDUVVGVVFTeEhRVUUwUXl4dFFrRkJhRUpCTEVWQlFVMTFWQ3hSUVVNeFJITkNMRWRCUVZNM1ZTeEpRVUZWWWl4SFFVRmhZU3hKUVVGVmJWb3NSMEZCV1c1YUxFbEJRekZFTEU5QlFWRkJMRVZCUVUxU0xFOUJSV2hDTEVsQlFVbHJZeXhGUVVGTlF5eEhRVUZQTTJJc1IwRkRha0lzUjBGQlNUQmlMRWRCUVU5NmEwSXNSMEZCVlhsclFpeEhRVUZQYm10Q0xFVkJRekZDTEU5QlFWRjVTU3hGUVVGTk5GQXNTMEZGYUVJc1IwRkJTWFZVTEVkQlFWbHVha0lzUjBGRFpDeFBRVUZSYTJwQ0xFZEJRVk5zYWtJc1IwRkJUMUlzVDBGRk1VSXNTVUZCU3l4SlFVRkphVU1zUzBGQlQzcENMRVZCUTJRc1IwRkJTVzFUTEVkQlFXVXhVeXhMUVVGTFR5eEZRVUZQZVVJc1IwRkROMElzVDBGQlFTeEZRVWRLTEU5QlFVRXNSMEYzYmt0R2NWWXNSMEZCVHl0dlFpeFJRWHBzUzFBc1UwRkJhVUkzTDBJc1JVRkJUMmRuUWl4SFFVTjBRaXhQUVVGUFpTeEhRVUZaTDJkQ0xFVkJRVTluWjBJc1NVRjViRXMxUW14S0xFZEJRVTluY0VJc1dVRjBha3RRTEZOQlFYRkNPUzlDTEVWQlFVOW5aMElzUlVGQlR6bEZMRWRCUldwRExFbEJRVWsxWVN4SFFVUktOR0VzUlVGQmEwTXNiVUpCUVdSQkxFVkJRVEpDUVN4RlFVRmhlRzFDTEVkQlEyeERkMjFDTEVWQlFWZHNZaXhGUVVGUFoyZENMRWRCUVZOMGNrSXNSVUZEY2tRc1QwRkJUelJNTEVsQlFWYzFUQ3hGUVVGWmNYTkNMRWRCUVZrdlowSXNSVUZCVDJkblFpeEZRVUZQZEhKQ0xFVkJRVmQzYlVJc1MwRkJaMEkxWVN4SFFXOXFTM0pHZDFjc1IwRkJUelpsTEZGQlFWVkJMRWRCUTJwQ04yVXNSMEZCVHk5Q0xGTkJOeTlLVUN4VFFVRnJRaTlWTEVkQlEyaENMRTFCUVhWQ0xHbENRVUZVUVN4SFFVRnhRamhWTEVkQlFXVTVWU3hKUVRZdlNuQkVPRmNzUjBGQlQzTkpMRmRCUVdGQkxFZEJRM0JDZEVrc1IwRkJUemhsTEZWQlFWbEJMRWRCUTI1Q09XVXNSMEZCVHpaWkxGTkJRVmRCTEVkQlEyeENOMWtzUjBGQlQycFpMRTFCUVZGQkxFZEJRMlpwV1N4SFFVRlBhWEJDTEZGQk4zcEtVQ3hUUVVGcFFqazVRaXhGUVVGUmJrb3NSMEZEZGtJc1QwRkJUMjFLTEVsQlFWZHVTaXhIUVVGVk1IQkNMRWRCUVZsMlowSXNSVUZCVVc1S0xFVkJRVkY1Y1VJc1IwRkJZWHB4UWl4TFFUWjZTblpGWjJVc1IwRkJUMnR3UWl4WlFURjRTbEFzVTBGQmNVSXZPVUlzUlVGQlVXNUtMRVZCUVZGdmFVSXNSMEZGYmtNc1QwRkVRVUVzUlVGQmEwTXNiVUpCUVdSQkxFVkJRVEpDUVN4RlFVRmhlRzFDTEVWQlEzSkVPSFJDTEVkQlFWbDJaMElzUlVGQlVXNUtMRVZCUVZGNWNVSXNSMEZCWVhweFFpeEhRVUZUYjJsQ0xFbEJlWGhLTTBSd1JTeEhRVUZQYlhCQ0xFMUJNWFpLVUN4VFFVRmxhbWRETEVkQlNXSXNUMEZCVHpZeFFpeEhRVUZUTnpGQ0xFbEJRVlZCTEVsQlFWVkJMRWRCZFhaS2RFTTRWeXhIUVVGUGIzQkNMRk5CTVhSS1VDeFRRVUZyUW14blF5eEhRVU5vUWl4SFFVRkpLM1pDTEVkQlFWY3Zka0lzUjBGRFlpeE5RVUZOTEVsQlFVbDNVaXhIUVd4dldFMHNiVVZCYjI5WWJFSXNUMEZCVDI5U0xFZEJRV0UxYVVJc1NVRjFkRXAwUWpoWExFZEJRVTl4Y0VJc1RVRXpjVXBRTEZOQlFXVnVaME1zUjBGRFlpeFBRVUZuUWl4TlFVRlVRU3hIUVRKeFNsUTRWeXhIUVVGUGMzQkNMRTlCY0hOS1VDeFRRVUZuUW5CblF5eEhRVU5rTEU5QlFXbENMRTlCUVZaQkxFZEJiM05LVkRoWExFZEJRVThyWlN4VFFVRlhRU3hIUVVOc1FpOWxMRWRCUVU5UkxGTkJRVmRCTEVkQlEyeENVaXhIUVVGUFF5eGhRVUZsUVN4SFFVTjBRa1FzUjBGQlQzRk9MR05CUVdkQ1FTeEhRVU4yUW5KT0xFZEJRVTh2V0N4VFFVRlhRU3hIUVVOc1FpdFlMRWRCUVU5MWNFSXNZMEY0YWtwUUxGTkJRWFZDY21kRExFZEJRM0pDTEU5QlFVODBNVUlzUjBGQlZUVXhRaXhKUVVGVlFTeEpRVUZWYUVzc1IwRkJiMEpuU3l4SFFVRlRhRXNzUjBGM2FrcHdSVGhuUWl4SFFVRlBOMWdzVFVGQlVVRXNSMEZEWmpaWUxFZEJRVTluWml4VFFVRlhRU3hIUVVOc1FtaG1MRWRCUVU4MFNDeFRRVUZYUVN4SFFVTnNRalZJTEVkQlFVOHpXQ3hoUVVGbFFTeEhRVU4wUWpKWUxFZEJRVTkzY0VJc1dVRjBPVWxRTEZOQlFYRkNkR2RETEVkQlEyNUNMRTlCUVU5QkxFbEJRVlYwVEN4SFFYTTVTVzVDYjJsQ0xFZEJRVTk1Y0VJc1ZVRnNPRWxRTEZOQlFXMUNkbWRETEVkQlEycENMRTlCUVU4clZ5eEhRVUZoTDFjc1NVRkJWVEppTEVkQlFVOHpZaXhKUVVGVmNra3NSMEZyT0VscVJHMW1MRWRCUVU4d2NFSXNWVUU1TmtsUUxGTkJRVzFDZUdkRExFZEJRMnBDTEU5QlFVOHJWeXhIUVVGaEwxY3NTVUZvTWxoUUxHOUNRV2N5V0dsQ05HWXNSMEZCVnpWbUxFbEJPRFpKTTBNNFZ5eEhRVUZQYkdJc1MwRjRPVkpRTEZOQlFXTXJSQ3hGUVVGUGJUbENMRWRCUTI1Q0xFOUJRV2RDTEUxQlFWUnVPVUlzUlVGQlowSXNSMEZCUzNGV0xFZEJRVmQyVml4TFFVRkxSU3hGUVVGUGJUbENMRWxCZHpsU2NrUm9iVUlzUjBGQlQydG9RaXhWUVVGWlFTeEhRVU51UW14b1FpeEhRVUZQSzBvc1MwRkJUMEVzUjBGRFpDOUtMRWRCUVU4eWNFSXNXVUV2TmxKUUxGTkJRWEZDT1dkRExFVkJRVTlMTEVWQlFVOHlRaXhIUVVOcVF5eEpRVUZKYmtNc1JVRkJhMElzVFVGQlZFY3NSVUZCWjBJc1JVRkJTVUVzUlVGQlRVZ3NUMEZEZGtNc1NVRkJTMEVzUlVGRFNDeFBRVUZSTEVWQlJWWXNTVUZCU1U4c1JVRkJVVkFzUlVGTFdpeFBRVXBKYlVNc1NVRkJZMnBPTEVsQlJXaENjVXdzUjBGRVFVRXNSVUZCVVRCMVFpeEhRVUZWT1hOQ0xFbEJRMFlzUlVGQlNYVlVMRWRCUVZVeFZpeEZRVUZUVHl4RlFVRlBMRWRCUVV0eFZpeEhRVUZWY2xZc1JVRkJUMUFzUlVGQlV5eEpRVVY0UlZFc1IwRkJWVUVzUlVGb2RFMXlRaXhUUVVFeVFrd3NSVUZCVDBzc1JVRkJUekpDTEVkQlJYWkRMRWxCUkVFc1NVRkJTVFZDTEVWQlFWRTBRaXhGUVVGWkxFVkJRMnBDTlVJc1MwRkRUQ3hIUVVGSlNpeEZRVUZOU1N4TFFVRlhReXhGUVVOdVFpeFBRVUZQUkN4RlFVZFlMRTlCUVU5QkxFVkJVRlFzUTBGcGRFMHdRa29zUlVGQlQwc3NSVUZCVDBRc1IwRkRhRU15UWl4SFFVRmpMMElzUlVGQlQydERMRWRCUVZjNVFpeEhRVUZCUVN4SlFXODJVblJESzFjc1IwRkJUMjFvUWl4VlFVRlpRU3hIUVVOdVFtNW9RaXhIUVVGUGIyaENMRmRCUVdGQkxFZEJRM0JDY0doQ0xFZEJRVTlwWml4SFFVRkxRU3hIUVVOYWFtWXNSMEZCVDJ0bUxFbEJRVTFCTEVkQlEySnNaaXhIUVVGUE0wSXNTVUZvWmxBc1UwRkJZWGhXTEVkQlExZ3NUMEZCVVVFc1IwRkJVMEVzUlVGQlRVZ3NUMEZEYmtKcFppeEhRVUZoT1dVc1JVRkJUMjFxUWl4SFFVRlZMME1zU1VGRE9VSnlja0lzUjBFNFpVNXZhVUlzUjBGQlR6UndRaXhOUVhCa1VDeFRRVUZsTDJkRExFVkJRVTlGTEVkQlEzQkNMRTlCUVZGR0xFZEJRVk5CTEVWQlFVMUlMRTlCUTI1Q2FXWXNSMEZCWVRsbExFVkJRVTg0YTBJc1IwRkJXVFZyUWl4RlFVRlZMRWRCUVVsclowSXNTVUZET1VOeWNrSXNSMEZyWkU1dmFVSXNSMEZCVHpad1FpeExRV3BqVUN4VFFVRmphR2hETEVkQlExb3NUMEZCVDI5RExFZEJRVk53UXl4RlFVRlBiV3BDTEV0QmFXTjZRbWhOTEVkQlFVODRjRUlzVDBGMllWQXNVMEZCWjBKcWFFTXNSVUZCVDBVc1IwRkRja0lzVDBGQlQydERMRWRCUVZOd1F5eEZRVUZQT0d0Q0xFZEJRVmsxYTBJc1JVRkJWU3hMUVhWaEwwTnBXQ3hIUVVGUGVrSXNTVUZzV2xBc1UwRkJZVEZXTEVkQlExZ3NUMEZCVVVFc1IwRkJVMEVzUlVGQlRVZ3NUMEZEYmtKcFppeEhRVUZoT1dVc1JVRkJUMjFxUWl4SFFVRlZUU3hKUVVNNVFqRjFRaXhIUVdkYVRtOXBRaXhIUVVGUEszQkNMRTFCZEZoUUxGTkJRV1ZzYUVNc1JVRkJUMFVzUjBGRGNFSXNUMEZCVVVZc1IwRkJVMEVzUlVGQlRVZ3NUMEZEYmtKcFppeEhRVUZoT1dVc1JVRkJUemhyUWl4SFFVRlpOV3RDTEVWQlFWVXNSMEZCU1hWcVFpeEpRVU01UXpGMVFpeEhRVzlZVG05cFFpeEhRVUZQTUZrc1ZVRkJXVUVzUjBGRGJrSXhXU3hIUVVGUGExb3NWVUZCV1VFc1IwRkRia0pzV2l4SFFVRlBaM0ZDTEZkQmVuUkNVQ3hYUVVORkxFMUJRVThzU1VGNWRFSlVhSEZDTEVkQlFVOXBjVUlzVjBGNmMwSlFMRmRCUTBVc1RVRkJUeXhKUVhselFsUnFjVUlzUjBGQlQydHhRaXhUUVhweVFsQXNWMEZEUlN4UFFVRkJMRWRCZVhKQ1JteHhRaXhIUVVGUE5HbENMRk5CUVZkQkxFZEJRMnhDTldsQ0xFZEJRVTl0Y1VJc1NVRTFOVkpRTEZOQlFXRjBhRU1zUlVGQlR6SkRMRWRCUTJ4Q0xFOUJRVkV6UXl4SFFVRlRRU3hGUVVGTlNDeFBRVUZWTm10Q0xFZEJRVkV4YTBJc1JVRkJUemgxUWl4SFFVRlZibk5DTEVsQlFVMDFUaXhIUVRRMVVteEZiMmxDTEVkQlFVOXZjVUlzVjBGMmFFTlFMRmRCU1VVc1QwRklTWHBxUXl4SFFVRkxkMVFzU1VGQlRYZEhMRTlCUTJKb1lTeEhRVUZMZDFRc1JVRkJTVEJDTEVsQlJVbzRSU3hOUVc5b1ExUllMRWRCUVU4MldDeExRVUZQUVN4SFFVTmtOMWdzUjBGQlR6TkRMRWxCUVUxQkxFZEJRMkl5UXl4SFFVRlBjWEZDTEVsQmNETkZVQ3hUUVVGaE0zaENMRVZCUVZGb1VTeEZRVUZSYlhWQ0xFZEJRek5DYm1Vc1JVRkJVekJETEVkQlFWTXhReXhIUVVkc1FpeEpRVUZKTkhoQ0xFZEJSa28xYUVNc1JVRkJVMmwyUWl4SFFVRlZhblpDTEVsQlJVMDRVU3hIUVVGWFpDeEhRVUZWTEVWQlF6bERMRWxCUVV0b1VTeEhRVUZWTkdoRExFZEJRV0UxYUVNc1JVRkRNVUlzVDBGQlQyZFJMRVZCUlZRc1NVRkJTV3RZTEVkQlFVOXNia0lzUlVGQlV6Um9ReXhIUVVGaExFVkJRMnBETEU5QlEwVXhWQ3hIUVVGamJGb3NSMEZCV1d0VExFZEJRVTFwU0N4SFFVTm9RMjVsTEVWQlEwRnJaU3hIUVVGamNGb3NSMEZCVjI5VExFZEJRVTFwU0N4SlFYa3lSVzVETjFjc1IwRkJUM1Z4UWl4UFFUa3dSVkFzVTBGQlowSTNlRUlzUlVGQlVXaFJMRVZCUVZGdGRVSXNSMEZET1VKdVpTeEZRVUZUTUVNc1IwRkJVekZETEVkQlIyeENMRWxCUVVrMGVFSXNSMEZHU2pWb1F5eEZRVUZUYVhaQ0xFZEJRVlZxZGtJc1NVRkZUVGhSTEVkQlFWZGtMRWRCUVZVc1JVRkRPVU1zVDBGQlVXaFJMRWRCUVZVMGFFTXNSVUZCV1RWb1F5eEZRVU42UW1kUkxFVkJRVk5yWlN4SFFVRmpiSFZDTEVWQlFWTTBhRU1zUlVGQlYzcFVMRWRCUXpWRGJtVXNSMEYzTUVWT2MwZ3NSMEZCVDNkeFFpeFRRVGw1UlZBc1UwRkJhMEk1ZUVJc1JVRkJVV2hSTEVWQlFWRnRkVUlzUjBGRGFFTnVaU3hGUVVGVE1FTXNSMEZCVXpGRExFZEJSMnhDTEVsQlFVazBlRUlzUjBGR1NqVm9ReXhGUVVGVGFYWkNMRWRCUVZWcWRrSXNTVUZGVFRoUkxFZEJRVmRrTEVkQlFWVXNSVUZET1VNc1QwRkJVV2hSTEVkQlFWVTBhRU1zUlVGQldUVm9ReXhGUVVONlFtdDFRaXhIUVVGamJIVkNMRVZCUVZNMGFFTXNSVUZCVjNwVUxFZEJRVk51WlN4RlFVTTFRMEVzUjBGM2VVVk9jMGdzUjBGQlR6TmFMRk5CTjNkRlVDeFRRVUZyUW5GVExFVkJRVkVyZUVJc1JVRkJUMmhZTEVkQlRTOUNMRTlCVEVsQkxFZEJRV3RDTEUxQlFWUm5XQ3hGUVVOWVFTeEZRVUZSTEVWQlEwTkJMRWxCUTFSQkxFZEJRVk5CTEVkQlJVcG9jMElzUjBGQlpYSkVMRWRCUVZNeFF5eEhRVUZSY1VRc1VVRkJVWEJhTEVkQlFXRXNTVUZCU3podVF5eEhRVUZUTEVsQmQzZEZOVVY2Y1VJc1IwRkJUM0pDTEU5Qk4zQkdVQ3hUUVVGblFuRkdMRVZCUVU5RExFVkJRVTk1YlVJc1IwRXlRalZDTEVkQk1VSkpRU3hIUVVFclFpeHJRa0ZCV2tFc1IwRkJlVUpvV0N4SFFVRmxNVkFzUlVGQlQwTXNSVUZCVDNsdFFpeExRVU16UlhwdFFpeEZRVUZSZVcxQ0xFVkJRVmM1YzBNc1IwRkZha0k0YzBNc1NVRkJZVGx6UXl4SlFVTkxMR3RDUVVGVWNXMUNMRWRCUTFSNWJVSXNSVUZCVjNwdFFpeEZRVU5ZUVN4RlFVRlJjbTFDTEVkQlJXVXNhMEpCUVZSdmJVSXNTVUZEWkRCdFFpeEZRVUZYTVcxQ0xFVkJRMWhCTEVWQlFWRndiVUlzU1VGSFVtOXRRaXhKUVVGVmNHMUNMRWRCUVdGeGJVSXNTVUZCVlhKdFFpeEhRVU51UTI5dFFpeEZRVUZSTEVWQlExSkRMRVZCUVZFc1NVRkhVa1FzUlVGQlVXbFVMRWRCUVZOcVZDeEhRVU5pUXl4SlFVRlZjbTFDTEVkQlExcHhiVUlzUlVGQlVVUXNSVUZEVWtFc1JVRkJVU3hIUVVWU1F5eEZRVUZSWjFRc1IwRkJVMmhVTEVsQlIycENSQ3hGUVVGUlF5eEZRVUZQTEVOQlEycENMRWxCUVVrd2JVSXNSVUZCVHpOdFFpeEZRVU5ZUVN4RlFVRlJReXhGUVVOU1FTeEZRVUZSTUcxQ0xFVkJSVllzUjBGQlNVUXNSMEZCV1RGdFFpeEZRVUZSTEVkQlFVdERMRVZCUVZFc1JVRkJSeXhEUVVOMFF5eEpRVUZKTWxZc1JVRkJUMnhpTEV0QlExZ3NUMEZCVDBvc1IwRkJWVEJHTEVWQlFWTTBWaXhIUVVGUk0xWXNSVUZCVVVRc1JVRkJVVGxrTEVkQlFXVXNVVUZCVlRCNlFpeEZRVUZQTEVsQlFVbHNlRUlzVDBGQlV5eExRVUZQZFdJc1IwRkZlRWNzVDBGQlQzSkNMRWRCUVZkdlFpeEZRVUZQUXl4SlFUQnVSak5DYWtVc1IwRkJUelJ4UWl4UFFTODRUbEFzVTBGQlowSnVaME1zUlVGQldURkNMRVZCUVZWRExFZEJRM0JETEVsQlFVbFVMRVZCUVU4eVdDeEhRVUZSZWxZc1IwRkJZMUFzUjBGQlkyMUNMRWRCUXpORGJFSXNSVUZCV1d0eFFpeFZRVUZWTTNKQ0xFOUJRVk1zUlVGRmJrTXNUMEZCVDBnc1JVRkJTMnRETEVWQlFWbHJha0lzUjBGQldUVnJRaXhGUVVGVkxFZEJRVWxETEVWQlFXRnRRaXhGUVVGWGFWb3NTMEUwT0U0MVJYQkVMRWRCUVU4MmNVSXNXVUZ1TjA1UUxGTkJRWEZDY0dkRExFVkJRVmt4UWl4RlFVRlZReXhIUVVONlF5eEpRVUZKVkN4RlFVRlBNbGdzUjBGQlVYcFdMRWRCUVdOTUxFZEJRVzFDYVVJc1IwRkRhRVJzUWl4RlFVRlphM0ZDTEZWQlFWVXpja0lzVDBGQlV5eEZRVVZ1UXl4UFFVRlBTQ3hGUVVGTGEwTXNSVUZCV1d0cVFpeEhRVUZaTld0Q0xFVkJRVlVzUjBGQlNVTXNSVUZCWVcxQ0xFVkJRVmR4WkN4TFFXYzNUalZGZUVnc1IwRkJUemh4UWl4UFFXeDJSVkFzVTBGQlowSndlVUlzUlVGQlVXeE9MRVZCUVVkcGIwSXNSMEZOZWtJc1QwRktSV3B2UWl4SFFVUkhhVzlDTEVWQlFWRkRMRWRCUVdWb1lpeEZRVUZSYkU0c1JVRkJSMmx2UWl4SFFVRlRhbTlDTEVsQlFVMDFUaXhIUVVOb1JDeEZRVVZCS3pWQ0xFZEJRVlZ1YzBJc1IwRkZWRzlxUWl4SFFVRlhlRlFzUjBGQlV6RkRMRWRCUVZOc1RpeEpRVFoxUlhSRGQxVXNSMEZCVDJwRkxGRkJkblJGVUN4WFFVTkZMRWxCUVVsMFZDeEZRVUZQTkhKQ0xGVkJRMUF6WWl4RlFVRlRNRU1zUjBGQlV6TlRMRVZCUVVzc1NVRkZNMElzVDBGQlQwRXNSVUZCUzBNc1QwRkJVeXhGUVVGSloxRXNSVUZCVTBFc1JVRkJUM0ZFTEZGQlFWRjBWQ3hGUVVGTExFZEJRVWxCTEVWQlFVc3NTMEZ2ZEVWcVJYVllMRWRCUVU5NFZ5eFBRWHB0UjFBc1UwRkJaMEl5UWl4RlFVRlJjV1FzUlVGQlRXbFBMRWRCUnpWQ0xFbEJRVWw0ZEVJc1IwRkJVeXhGUVVOVVVDeEhRVWhLT0dZc1JVRkJUME1zUjBGQlUwUXNSVUZCVFhKa0xFbEJSMHA2UXl4UFFVOXNRaXhKUVVwTFFTeEpRVU5JUVN4RlFVRlRMRVZCUTFSNVF5eEZRVUZUZGs0c1MwRkZSbkZNTEVWQlFWRlFMRWRCUVZFc1EwRkRka0lzU1VGQlNWRXNSVUZCYTBJc1RVRkJWbWxETEVWQlFXbENkazRzUlVGQldYVk9MRVZCUVU5MVpDeEhRVUZOUml4RlFVRkxkbVlzUzBGRGRrUkRMRWxCUVZWMFRDeEpRVU5hY1V3c1JVRkJVVkFzUlVGRFVsRXNSVUZCVVhWMFFpeEhRVVZXZEhKQ0xFVkJRVk50WkN4SFFVRlhjR1lzUjBGQlUwRXNSVUZCVFZBc1MwRkJTM2RETEVkQlFWVnFReXhGUVVWd1JDeFBRVUZQYVVNc1IwRjFiRWRVTmxVc1IwRkJUeXRwUWl4TlFVRlJRU3hIUVVObUwybENMRWRCUVU4MVJpeGhRVUZsUVN4SFFVTjBRalJHTEVkQlFVOHJjVUlzVDBFM00wNVFMRk5CUVdkQ2RHZERMRWRCUldRc1QwRkVWM2xXTEVkQlFWRjZWaXhIUVVGamExa3NSMEZ5YzB4dVF5eFRRVUZ2UW14WkxFZEJRMnhDTEU5QlFVOXJXU3hIUVVGWk0xa3NSMEZCVDFNc1RVRnhjMHhrUVN4SlFUUXpUbVIxVml4SFFVRlBiRWdzUzBGc2VrNVFMRk5CUVdOeVR5eEhRVU5hTEVkQlFXdENMRTFCUVdSQkxFVkJRMFlzVDBGQlR5eEZRVVZVTEVkQlFVa3JhRUlzUjBGQldTOW9RaXhIUVVOa0xFOUJRVTkxTUVJc1IwRkJVM1l3UWl4SFFVRmpLMDhzUjBGQlZ5OVBMRWRCUVdOQkxFVkJRVmN2UWl4UFFVVndSU3hKUVVGSmEyTXNSVUZCVFVNc1IwRkJUM0JoTEVkQlEycENMRTlCUVVsdFlTeEhRVUZQZW10Q0xFZEJRVlY1YTBJc1IwRkJUMjVyUWl4RlFVTnVRbWRMTEVWQlFWZHhUeXhMUVVWaWMxUXNSMEZCVXpOb1FpeEhRVUZaTDBJc1VVRjNlVTQ1UW5OWUxFZEJRVTl4YUVJc1ZVRkJXVUVzUjBGRGJrSnlhRUlzUjBGQlQyZHlRaXhMUVd4M1RsQXNVMEZCWTNablF5eEZRVUZaY0VJc1JVRkJWMjl4UWl4SFFVTnVReXhKUVVGSmJISkNMRVZCUVU4eVdDeEhRVUZSZWxZc1IwRkJZMG9zUjBGQldXdHNRaXhIUVVrM1F5eFBRVWhKYTBVc1IwRkJVME1zUjBGQlpXcHdRaXhGUVVGWmNFSXNSVUZCVjI5eFFpeExRVU5xUkhCeFFpeEZRVUZaZWt3c1IwRkZVREpMTEVWQlFVdHJReXhGUVVGWmEycENMRWRCUVZsMGEwSXNSVUZCVnl4TFFUaDJUbXBFTWxjc1IwRkJUMmx5UWl4WlFTOXdVbEFzVTBGQmNVSndhVU1zUlVGQlQwc3NSMEZETVVJc1QwRkJUM050UWl4SFFVRm5Rak50UWl4RlFVRlBTeXhKUVN0d1VtaERPRmNzUjBGQlQydHlRaXhqUVc1dlVsQXNVMEZCZFVKeWFVTXNSVUZCVDBzc1JVRkJUMGdzUjBGRGJrTXNUMEZCVHpodFFpeEhRVUZyUW1odVFpeEZRVUZQU3l4RlFVRlBlV3RDTEVkQlFWazFhMElzUlVGQlZTeExRVzF2VWk5RWFWZ3NSMEZCVDIxeVFpeGpRV2h1VWxBc1UwRkJkVUowYVVNc1JVRkJUMHNzUjBGRE5VSXNTVUZCU1ZJc1JVRkJhMElzVFVGQlZFY3NSVUZCWjBJc1JVRkJTVUVzUlVGQlRVZ3NUMEZEZGtNc1IwRkJTVUVzUlVGQlVTeERRVU5XTEVsQlFVbFBMRVZCUVZGMWJVSXNSMEZCWjBJemJVSXNSVUZCVDBzc1IwRkRia01zUjBGQlNVUXNSVUZCVVZBc1IwRkJWVzloTEVkQlFVZHFZU3hGUVVGTlNTeEhRVUZSUXl4SFFVTnlReXhQUVVGUFJDeEZRVWRZTEU5QlFWRXNSMEY1YlZKV0sxY3NSMEZCVDI5eVFpeG5Ra0Z3YkZKUUxGTkJRWGxDZG1sRExFVkJRVTlMTEVkQlF6bENMRTlCUVU5emJVSXNSMEZCWjBJemJVSXNSVUZCVDBzc1IwRkJRVUVzU1VGdmJGSm9RemhYTEVkQlFVOXhja0lzYTBKQmVHcFNVQ3hUUVVFeVFuaHBReXhGUVVGUFN5eEZRVUZQU0N4SFFVTjJReXhQUVVGUE9HMUNMRWRCUVd0Q2FHNUNMRVZCUVU5TExFVkJRVTk1YTBJc1IwRkJXVFZyUWl4RlFVRlZMRWxCUVVFc1NVRjNhbEl2UkdsWUxFZEJRVTl6Y2tJc2EwSkJjbWxTVUN4VFFVRXlRbnBwUXl4RlFVRlBTeXhIUVVWb1F5eEhRVVJ6UWl4TlFVRlVUQ3hIUVVGdlFrRXNSVUZCVFVnc1QwRkRNMElzUTBGRFZpeEpRVUZKVHl4RlFVRlJkVzFDTEVkQlFXZENNMjFDTEVWQlFVOUxMRWRCUVVGQkxFZEJRV1VzUlVGRGJFUXNSMEZCU1RSYUxFZEJRVWRxWVN4RlFVRk5TU3hIUVVGUlF5eEhRVU51UWl4UFFVRlBSQ3hGUVVkWUxFOUJRVkVzUjBFNGFGSldLMWNzUjBGQlQzTm9RaXhWUVVGWlFTeEhRVU51UW5Sb1FpeEhRVUZQZFhKQ0xGZEJPVzFGVUN4VFFVRnZRamQ1UWl4RlFVRlJkWFpDTEVWQlFWRkRMRWRCVDJ4RExFOUJUa0Y0ZGtJc1JVRkJVekJETEVkQlFWTXhReXhIUVVOc1FuZDJRaXhGUVVGMVFpeE5RVUZhUVN4RlFVTlFMRVZCUTBGd2EwSXNSMEZCVlRaVUxFZEJRVlYxVVN4SFFVRlhMRVZCUVVkNGRrSXNSVUZCVDJoUkxGRkJSVGREZFM5Q0xFVkJRVk40V0N4SFFVRmhkMWdzUjBGRFpuWjJRaXhGUVVGUGIxb3NUVUZCVFc5WExFVkJRVlZCTEVWQlFWZEVMRVZCUVU5MkwwSXNVMEZCVjNVdlFpeEhRWGR0UlRkRWFtOUNMRWRCUVU5bmFrSXNVMEZCVjBFc1IwRkRiRUpvYWtJc1IwRkJUM2R5UWl4SlFYcFZVQ3hUUVVGaE0ybERMRWRCUTFnc1QwRkJVVUVzUjBGQlUwRXNSVUZCVFVnc1QwRkRia0ozUXl4SFFVRlJja01zUlVGQlQyMXFRaXhKUVVObUxFZEJkVlZPYUUwc1IwRkJUM2x5UWl4TlFUZFRVQ3hUUVVGbE5XbERMRVZCUVU5RkxFZEJRM0JDTEU5QlFWRkdMRWRCUVZOQkxFVkJRVTFJTEU5QlEyNUNkME1zUjBGQlVYSkRMRVZCUVU4NGEwSXNSMEZCV1RWclFpeEZRVUZWTEVsQlEzSkRMRWRCTWxOT2FWZ3NSMEZCVHpCeVFpeFRRV2huUlZBc1UwRkJhMEpvZWtJc1JVRkJVV2xyUWl4RlFVRlRiRW9zUjBGSmFrTXNTVUZCU1d0WkxFVkJRVmN6Y2tJc1IwRkJUekpITEdsQ1FVVnNRamhOTEVkQlFWTkRMRWRCUVdWb1lpeEZRVUZSYVd0Q0xFVkJRVk5zU2l4TFFVTXpRMnRLTEVWQlFWVXZLMElzUjBGRldqaGhMRVZCUVZNd1F5eEhRVUZUTVVNc1IwRkRiRUpwYTBJc1JVRkJWV2RFTEVkQlFXRXNSMEZCU1doRUxFVkJRVk5uVUN4RlFVRlZlRlFzU1VGRk9VTXNTVUZKU1hsVUxFVkJRMEZETEVWQlRFRTNhMElzUlVGQlZUSlpMRWRCUVdFc1IwRkJTV2hFTEVWQlFWRXpWaXhSUVVGVE1tdENMRVZCUVZNemEwSXNVVUZCVTIxU0xFbEJRemxFTWxRc1JVRkJZM0ozUWl4SFFVRkxkVXdzUjBGRGJrSXJhMElzUlVGQlowSnlaME1zUjBGQlYzTmlMRVZCUVZNNGEwSXNSMEZKY0VNM2FVTXNSVUZCVVN4RlFVTlNObVFzUlVGQll6WldMRVZCUVZFM1ZpeGhRVUZsY0dwQ0xFZEJRM0pETVVJc1JVRkJVeXhYUVVkVVozRkRMRVZCUVdWcWNVTXNTVUZEYUVJME5rSXNSVUZCVVM5V0xGRkJRVlZzYWtJc1NVRkJWekZDTEU5QlFWTXNTVUZEZGtNNGEwSXNSVUZCV1RsclFpeFBRVUZUTEV0QlEzQkNPR3RDTEVsQlFXZENNV3RDTEVkQlFXZENZeXhIUVVGbFVTeEpRVUZYTVVJc1QwRkJVeXhMUVVOdVJUSTJRaXhGUVVGUk9WWXNWVUZCV1c1cVFpeEpRVUZYTVVJc1QwRkJVeXhMUVVONlF5eExRVTFGYVhGRExFVkJRVmtzYTBKQlEySTFkMElzUjBGQlpURlRMRXRCUVV0bk1FSXNSVUZCVXl4alFVTjZRa0VzUlVGQlVYTlFMRlZCUVZrc1NVRkJTV3gzUWl4UlFVRlJMRlZCUVZjc1MwRkRNME1zTmtKQlFTdENkbGNzUjBGQmJVSXNTMEZEYmtRc1MwRkZUbXRVTEVWQlFVOXhSQ3hSUVVGUmFYZENMRVZCUVdNc1UwRkJVM0o1UWl4RlFVRlBkWGxDTEVWQlFXRkRMRVZCUVd0Q1F5eEZRVUZwUWtNc1JVRkJaWEJwUXl4SFFYTkNNVWNzVDBGeVFrRnJhVU1zU1VGQmNVSkJMRVZCUVcxQ1F5eEhRVWQ0UTNCeFF5eEhRVUZWTUZjc1JVRkJUMjlhTEUxQlFVMDNiMElzUlVGQlQyZENMRWRCUVZFNFVpeFJRVUZSY0Zrc1IwRkJiVUkwVlN4SlFVYzNSREo2UWl4SlFVTkdUaXhIUVVGQlFTeEZRVU5CTlhCRExFZEJRVlVzV1VGQlkydHhReXhGUVVGakxGVkJSWEJEUnl4SlFVTkdVaXhIUVVGQlFTeEZRVU5CTjNCRExFZEJRVlVzVDBGQlUzRnhReXhGUVVGblFpeGxRVVZxUTBZc1NVRkRSbTV4UXl4SFFVRlZMR2xDUVVGdFFtMXhReXhGUVVGdFFpd3JRa0ZGYkVSc2FrTXNSVUZCVVdkQ0xFVkJRVk13VUN4RlFVRk5hbElzVDBGSmFFSnBVaXhKUVVkVU0xZ3NSMEZCVlN4UFFVMVdMRWxCUVVrcmEwSXNSVUZCVnpGTUxFZEJRV1V4VXl4TFFVRkxaekJDTEVWQlFWTXNZVUZCWlVFc1JVRkJVVFZXTEZOQlF6bEVRU3hKUVVOSUwydENMRVZCUVZNc2FVSkJRVzFDUVN4RlFVRlRMRk5CUjNaRFFTeEhRVUZWTm5CRExFVkJRV1UzY0VNc1JVRkJUeXRhTEZGQlFWRjBZU3hIUVVGelFpeEpRVUZOVHl4SFFVTnFSU3RhTEZGQlFWRnlZU3hIUVVGeFFpeE5RVU0zUW5GaExGRkJRVkZ3WVN4SFFVRjFRaXhQUVVkc1Ewc3NSVUZCVXl4aFFVRmxLMnRDTEVkQlFWa3NUMEZCVXl4VFFVTXhRMEVzUlVGRFJ5eEhRVU5CTEhkQ1FVVktMSEZDUVVORE5tdENMRVZCUTBrc2JVSkJRMEVzUzBGRlNrTXNSVUZEUnl4MVJrRkZRU3hQUVVWS04zQkRMRVZCUTBFc1owSkJSVVlzU1VGQlNYZElMRVZCUVZOck5FSXNSMEZCVVN4WFFVTnVRaXhQUVVGUE9UWkNMRWRCUVZOcmJFTXNSVUZCWVVjc1JVRkJXU3hWUVVGWmFuRkRMRWRCUTJ4RWMwY3NUVUZCVFRGTExFVkJRVmR0ZFVNc1MwRk5kRUlzUjBGRVFYWnBReXhGUVVGUGVFZ3NUMEZCVTBFc1JVRkRXalk0UWl4SFFVRlJjakZDTEVkQlExWXNUVUZCVFVFc1JVRkZVaXhQUVVGUFFTeEhRVzAxUkZSM1Z5eEhRVUZQYzNOQ0xFMUJjSE5DVUN4VFFVRmxPV2RETEVWQlFVZDZReXhIUVVWb1FpeEpRVVJCZVVNc1JVRkJTVzF6UWl4SFFVRlZibk5DTEVsQlEwNHNSMEZCUzBFc1JVRkJTWFJOTEVWQlEyWXNUVUZCVHl4SFFVVlVMRWxCUVVrclNpeEZRVUZSTTBvc1JVRkRVbTlLTEVWQlFWTTBWaXhIUVVGVk9WTXNSVUZCUjJ4TkxFZEJSVEZDZVVvc1JVRkJWelJyUWl4SFFVRlpOV3RDTEVkQlEzWkNlVU1zUjBGQlMyeE5MRVZCUjB3c1NVRkVRU3hKUVVGSmEwc3NSVUZCVXl0Q0xFZEJRVlUzUXl4RlFVRlJTeXhMUVVOMFFrVXNSVUZCVVhWRExFZEJRMlo2UXl4RlFVRlRSU3hIUVVWWUxFOUJRVTlQTEVkQmMzSkNWSGRYTEVkQlFVOXBXQ3hUUVVGWFFTeEhRVU5zUW1wWUxFZEJRVTh5V0N4VlFVRlpRU3hIUVVOdVFqTllMRWRCUVU5MVppeFRRVUZYUVN4SFFVTnNRblptTEVkQlFVOTFjMElzVVVFdk0wUlFMRk5CUVdsQ2NtcERMRWRCUTJZc1QwRkJUMnRUTEVkQlFWTnNVeXhIUVVGUE5qTkNMR1ZCS3pORWVrSXZaMElzUjBGQlQyMVlMRk5CUVZkQkxFZEJRMnhDYmxnc1IwRkJUM2R6UWl4alFYWnpTVkFzVTBGQmRVSjBha01zUjBGRGNrSXNUMEZCVDBFc1JVRkRTRFJoTEVkQlFWVTJWQ3hIUVVGVmVuVkNMRWxCUVZOb1N5eEZRVUZyUWtFc1IwRkRjRU1zU1VGQlZtZExMRVZCUVdOQkxFVkJRVkVzUjBGeGMwazNRamhYTEVkQlFVODFSU3hUUVVGWFFTeEhRVU5zUWpSRkxFZEJRVTk1YzBJc1VVRXhNa1JRTEZOQlFXbENkbXBETEVkQlEyWXNUMEZCVDJ0VExFZEJRVk5zVXl4SFFVRlBjelJDTEdWQk1ESkVla0o0YUVJc1IwRkJUekJ6UWl4TFFXb3hSRkFzVTBGQlkyZ3dRaXhGUVVGUmJXVXNSVUZCVDNCRUxFZEJSVE5DTEVsQlJFRXZZU3hGUVVGVE1FTXNSMEZCVXpGRExFMUJRMGdyWVN4SFFVRlRiMFFzU1VGQlZXbzFRaXhIUVVOb1F5eFBRVUZQT0dFc1JVRkJUM0ZFTEZGQlFWRnlXaXhIUVVGUkxFbEJSV2hETEVsQlFVdG5WeXhMUVVGWmJXVXNSVUZCVVhCSExFZEJRV0Z2Unl4SlFVTndReXhQUVVGUGJtVXNSVUZGVkN4SlFVRkpNVTBzUlVGQllUQk9MRWRCUVdOb1FpeEhRVU16UW5wTkxFVkJRV0Y1VGl4SFFVRmpiV1FzUjBGSkwwSXNUMEZCVDJwR0xFZEJRVlUxYkVJc1JVRklURVFzUjBGQlowSkRMRVZCUVZsRExFZEJRemxDUXl4SFFVRmpSaXhGUVVGWlF5eEhRVUZqTEVkQlJWUnVTQ3hMUVVGTExFdEJjVEJFYUVScllpeEhRVUZQTW5OQ0xGRkJMM2xFVUN4VFFVRnBRbW93UWl4RlFVRlJiV1VzUlVGQlQzQkVMRWRCUlRsQ0xFbEJSRUV2WVN4RlFVRlRNRU1zUjBGQlV6RkRMRTFCUTBncllTeEhRVUZUYjBRc1NVRkJWV28xUWl4SFFVTm9ReXhQUVVGUE9HRXNSVUZCVDNGRUxGRkJRVkZ1V2l4SFFVRlhMRWxCUlc1RExFbEJRVXM0Vml4TFFVRlpiV1VzUlVGQlVYQkhMRWRCUVdGdlJ5eEpRVU53UXl4UFFVRlBibVVzUlVGRlZDeEpRVUZKTVUwc1JVRkJZVEJPTEVkQlFXTm9RaXhIUVVjdlFpeFBRVUZQYTFvc1IwRkJWVFZzUWl4RlFVRlpMRVZCUm01Q1JTeEhRVUZqUml4RlFVRlpNRTRzUjBGQlkyMWtMRWxCUVZVc1IwRkZka0l2ZUVJc1MwRkJTeXhMUVhGNVJEVkRhMklzUjBGQlR6UnpRaXhWUVM5M1JGQXNVMEZCYlVKc01FSXNSVUZCVVcxbExFVkJRVTl3UkN4SFFVVm9ReXhKUVVSQkwyRXNSVUZCVXpCRExFZEJRVk14UXl4TlFVTklLMkVzUjBGQlUyOUVMRWxCUVZWcU5VSXNSMEZEYUVNc1QwRkJUemhoTEVWQlFVOXhSQ3hSUVVGUmNGb3NSMEZCWVN4SlFVVnlReXhKUVVGTEsxWXNTMEZCV1cxbExFVkJRVkZ3Unl4SFFVRmhiMGNzU1VGRGNFTXNUMEZCVDI1bExFVkJSVlFzU1VGQlNURk5MRVZCUVdFd1RpeEhRVUZqYUVJc1IwRkhMMElzVDBGQlQydGFMRWRCUVZVMWJFSXNSVUZHVEVRc1IwRkJaMEpETEVWQlFWa3dUaXhIUVVGamJXUXNTMEZGYkVJdmVFSXNTMEZCU3l4TFFYRjNSRE5EYTJJc1IwRkJUelp6UWl4VFFUZDBSRkFzVTBGQmEwSnVNRUlzUlVGQlVXbHJRaXhIUVVONFFpeEpRVUZKYWpCQ0xFVkJOWEZrYlVJc1IwRTJjV1J1UW05clF5eEZRVFZ4WkhGQ0xFMUJPSEZrZWtJc1IwRkJTWFJ6UWl4SFFVRlRiV01zUjBGQlZTeERRVU55UWl4SlFVRkpjVW9zUlVGQldTeGpRVUZsY2tvc1JVRkJWVUVzUlVGQlVYRktMRlZCUVZsQkxFVkJRemRFZERsQ0xFVkJRVk1zVjBGQldXa3dRaXhGUVVGVmFFWXNSMEZCVldkR0xFVkJRVkZxTUVJc1VVRkJWVUVzUlVGRE0wUnZhME1zUlVGQlZ5eGhRVUZqYmxFc1JVRkJWV3hOTEVkQlFXRnJUU3hGUVVGUmJWRXNWVUZCV1VFc1JVRkpkRVVzU1VGQlNYaERMRWRCUmtvMWVFSXNSVUZCVXpCRExFZEJRVk14UXl4SlFVVkxhRkVzVDBGRGRrSXNSMEZCU1N0UUxFZEJRVmRETEVkQlFWTXNRMEZEZEVJc1NVRkJTVEZOTEVWQlFXRXdUaXhIUVVGamFFSXNSMEZETDBJMGVFSXNSVUZCV1hRclFpeEZRVUZYZEVRc1QwRkZla0lzUjBGQlNVRXNSMEZCVlRSb1F5eEZRVU5hTEU5QlFVODFlRUlzUlVGRlZDeEpRVUZKTkZjc1JVRkJUVFZ0UWl4RlFVRlRPRkVzUjBGQlYzTjZRaXhIUVVNNVFpeEhRVUZKZUdRc1JVRkJUU3hGUVVOU0xFOUJRVTkzWkN4RlFVVlVMRWxCUVVsMGFrTXNSVUZCVTNkRExFVkJRMVEwYkVJc1IwRkJWVFZzUWl4RlFVRlpMRVZCUVVkemFrSXNSMEZCUzNoeFFpeExRVUZMTEVsQlEyNURORlFzUlVGQlQyOWFMRTFCUVUwc1JVRkJSM2hETEVkQlJYQkNMRWRCUVVrd1Z5eEpRVUZqY0c5RExFVkJRMmhDTEU5QlFVODBUQ3hGUVVGVGMycERMRVZCUzJ4Q0xFZEJTRWs1WjBNc1NVRkRSbk5xUWl4SFFVRlJPV3hDTEVWQlFVOWtMRTlCUVZNMGJVSXNSMEZGZEVKeWJrSXNSMEZCVXlzNVFpeEpRVU5ZTEVkQlFVbDBkRUlzUlVGQlQyOWFMRTFCUVUxNFF5eEhRVUZMZVdRc1QwRkJUeTlITEVkQlFWa3NRMEZEZGtNc1NVRkJTWEp6UWl4RlFVTkJjWHBDTEVWQlFWbDRha01zUlVGTmFFSXNTVUZLUzNjNFFpeEZRVUZWZWk5Q0xGTkJRMko1TDBJc1JVRkJXV3ByUXl4SFFVRlBhV3RETEVWQlFWVm9hME1zVDBGQlVXOWFMRWRCUVZOcVdTeEhRVUZSY1Zrc1MwRkJTM2R4UWl4SlFVRmpMRTFCUlRORlFTeEZRVUZWZG5OQ0xGVkJRVmtzUlVGRFpFVXNSVUZCVVhGelFpeEZRVUZWZUhGQ0xFdEJRVXQzZUVJc1NVRkROMElzU1VGQlNVTXNSVUZCVTNSNlFpeEZRVUZOTVZFc1RVRkZja0pQTEVWQlFWTkJMRVZCUVU5emIwSXNUVUZCVFN4RlFVRkhiV0lzU1VGQlYzSjJReXhGUVVGWk1IaENMRVZCUVUweVpDeFRRVVZ1UkN4SFFVRkpkakJDTEVWQlFVODJWaXhSUVVGUmEwTXNSMEZCWVhWV0xFZEJRVmt4Vnl4SlFVRlJRU3hGUVVGTExFTkJRemxFTEVsQlFVbHliVUlzUlVGQlVVOHNSVUZCVDIxblF5eFpRVUZaTTBRc1IwRkRNMEl2T0VJc1IwRkJVeXhKUVVOWVR5eEZRVUZUUVN4RlFVRlBjMjlDTEUxQlFVMHNSVUZCUnpkdlFpeEpRVWMzUWl4UFFVRlBUeXhGUVVGVGMycERMRWRCZVhGRWJFSTVjMElzUjBGQlQydDBRaXhUUVc1d1JGQXNVMEZCYTBKNE1FSXNSMEZGYUVJc1QwRkVRVUVzUlVGQlV6QkRMRWRCUVZNeFF5eExRVU5CTlZjc1IwRkJhVUkyVnl4TFFVRkxSQ3hIUVVOd1EwRXNSVUZCVDNGRUxGRkJRVkZ1WVN4SFFVRmxhVmtzU1VGRE9VSnVRaXhIUVdkd1JFNXpTQ3hIUVVGUGJYUkNMRk5CZG5CQ1VDeFRRVUZyUWtNc1IwRkRhRUlzU1VGQlNYWmlMRWxCUVU5MlZ5eEhRVU5ZTEU5QlFVOUdMRWRCUVZObmVVSXNSMEZCVlhaaUxFZEJjM0JDTlVJM1VpeEhRVUZQZFdoQ0xGVkJRVmxCTEVkQlEyNUNkbWhDTEVkQlFVOXBhRUlzVjBGQllVRXNSMEZIY0VKcWFFSXNSMEZCVDNGMFFpeExRVUZQZERCQ0xFZEJRMlJwU0N4SFFVRlBjM1JDTEZWQlFWbHlVaXhIUVVOdVFtcGpMRWRCUVU5MWRFSXNUVUZCVVdoVUxFZEJSV1l3U0N4SFFVRk5hbWxDTEVsQlEwRm9aU3hIUVVGVExFZEJRMkoxYkVJc1IwRkJWM1pJTEVkQlFWRXNVMEZCVTNwWUxFVkJRVTF6Y2tJc1IwRkRNMEo0V1N4SFFVRmxNVk1zUzBGQlMzRllMRWRCUVU5cVJpeFZRVUZYT0Zrc1MwRkRla00zZUVJc1IwRkJUelo0UWl4SFFVRmpkSEpDTEV0QlIyeENka2NzU1VGRFNDeERRVUZGTWpWQ0xFOUJRVUZCTEVsQlYxSXpZaXhIUVVGUGQzUkNMRkZCT1RoblFrc3NWVUZwT1dkQ1duSnJReXhIUVVGVkxFTkJRVU1zVDBGQlVTeFZRVUZYTEZGQlFWTXNZVUZCWXl4VlFVRlhMR2RDUVVGcFFpeFRRVUZUTUhGQ0xFZEJRM2hHTjFRc1IwRkJUelpVTEVkQlFWbDZZU3haUVVGak5FY3NTMEZKYmtNM1Z5eEhRVUZWTEVOQlFVTXNUMEZCVVN4UlFVRlRMRk5CUVZNd2NVSXNSVUZCV1RWeFFpeEhRVU12UTJ0WUxFZEJRVmx3Uml4VlFVRlZPRmtzUjBGQll5eFRRVUZUY205Q0xFZEJRek5EUVN4RlFVRkpRU3hKUVVGTk5VNHNSVUZCV1N4RlFVRkpkMmRDTEVkQlFWVjFXaXhIUVVGVmJuTkNMRWRCUVVrc1IwRkZiRVFzU1VGQlNXaERMRVZCUVZWdFdDeExRVUZMVHl4bFFVRnBRbXBaTEVWQlEyaERMRWxCUVVscldDeEhRVUZaVVN4TlFVTm9Ra0VzUzBGQlMzTmFMRkZCVlZRc1QwRlNTWHAzUWl4RlFVRlBNRmdzWVVGRFZERllMRVZCUVU4MFdDeGpRVUZuUWpsRExFZEJRVlU1VXl4RlFVRkhhRU1zUlVGQlR6UllMR1ZCUlRORE5WZ3NSVUZCVHpaWUxGVkJRVlZ4UWl4TFFVRkxMRU5CUTNCQ05Vb3NTMEZCVVhkR0xFZEJRVlU1VXl4RlFVRkhiRTBzUjBGRGNrSnROVUlzUzBGQlVUVkZMRWRCUVdOeWNVSXNSVUZCVDNsWUxGRkJRVlVzUlVGQlNTeFJRVUZWTEUxQlIyeEVlbGdzUjBGSFZESlhMRWRCUVZsd1JpeFZRVUZWT0Zrc1JVRkJZU3hUUVVGWExGTkJRVk55YjBJc1IwRkRja1FzVDBGQlQyMVdMRXRCUVVzNVFpeFZRVUZWWjFZc1IwRkJXWEp2UWl4SFFVRkhjVlFzWVVGTGVrTXhWaXhIUVVGVkxFTkJRVU1zVTBGQlZTeE5RVUZQTEdGQlFXTXNVMEZCVXpCeFFpeEZRVUZaTlhGQ0xFZEJRemRFTEVsQlFVbDNka0lzUlVGQlQzaDJRaXhGUVVGUkxFVkJRMlozYTBNc1JVRnFPR2RDWlN4SFFXazRaMEpLYUZZc1IwRXZOMmRDUnl4SFFTczNaMEo1UWtFc1JVRkZNME4wV1N4SFFVRlpjRVlzVlVGQlZUaFpMRWRCUVdNc1UwRkJVemx4UWl4SFFVTXpReXhKUVVGSlV5eEZRVUZUYlZnc1MwRkJTM05hTEZGQlRXeENMRTlCVEVGNmQwSXNSVUZCVHpKWUxHTkJRV04xUWl4TFFVRkxMRU5CUTNoQ00xb3NVMEZCV1RSclFpeEhRVUZaTld0Q0xFVkJRVlVzUjBGRGJFTXdka0lzUzBGQlVVRXNTVUZGVm1wMlFpeEZRVUZQTUZnc1lVRkJaVEZZTEVWQlFVOHdXQ3hqUVVGblFuVnpRaXhGUVVOMFEycHJReXhMUVV0WVRDeEhRVUZWTEVOQlFVTXNUMEZCVVN4UlFVRlRMRk5CUVZNd2NVSXNSVUZCV1RWeFFpeEhRVU12UXl4SlFVRkplV3RETEVWQlFWY3NVVUZCVlhwclF5eEZRVUZSTEZGQlFWVXNTVUZGTTBOcldDeEhRVUZaY0VZc1ZVRkJWVGhaTEVkQlFXTXNWMEZEYkVNc1QwRkJUMnhVTEV0QlFVc3JjMElzUjBGQlZTeEhRVUZIZUd0RExGRkJRVkVzVFVGTGNrTkRMRWRCUVZVc1EwRkJReXhWUVVGWExGRkJRVk1zVTBGQlV6QnhRaXhGUVVGWk5YRkNMRWRCUTJ4RUxFbEJRVWt3YTBNc1JVRkJWeXhSUVVGVk1XdERMRVZCUVZFc1IwRkJTeXhUUVVWMFEydFlMRWRCUVZsd1JpeFZRVUZWT0Zrc1IwRkJZeXhYUVVOc1F5eFBRVUZQYkZRc1MwRkJTMDhzWVVGQlpTeEpRVUZKWml4SFFVRlpVU3hOUVVGUlFTeExRVUZMWjNSQ0xFZEJRVlVzVFVGSmRFVjRkRUlzUjBGQldYQkdMRlZCUVZWMWIwSXNVVUZCVlN4WFFVTTVRaXhQUVVGUE0ybENMRXRCUVV0MWFrSXNUMEZCVDJ4WkxFdEJSM0pDTjB3c1IwRkJXWEJHTEZWQlFWVm5hRUlzUzBGQlR5eFRRVUZUTVhsQ0xFZEJRM0JETEU5QlFVOXpXQ3hMUVVGTGRXcENMRTlCUVU4M05rSXNSMEZCVjJ0NFFpeFJRVWRvUTNCaExFZEJRVmx3Uml4VlFVRlZhV2hDTEZOQlFWY3NVMEZCVXpONVFpeEhRVU40UXl4UFFVRlBjMWdzUzBGQlN6bENMRlZCUVZWclpDeExRVUZMTVhsQ0xFbEJSemRDT0Zjc1IwRkJXWEJHTEZWQlFWVnZhRUlzVlVGQldYUk9MRWRCUVZNc1UwRkJVM0pITEVWQlFVMHZaaXhIUVVONFJDeE5RVUZ0UWl4dFFrRkJVaXRtTEVWQlEwWXNTVUZCU1hKSkxFZEJRVmxSTEUxQlJXeENRU3hMUVVGTE9VZ3NTVUZCU1N4VFFVRlRNMUFzUjBGRGRrSXNUMEZCVHpKblFpeEhRVUZYTTJkQ0xFVkJRVTl6Wml4RlFVRk5MMllzVDBGSmJrTXdXQ3hIUVVGWmNFWXNWVUZCVlhseFFpeFBRVUZUTEZOQlFWTnVPRUlzUjBGRGRFTXNUMEZCVDNOWUxFdEJRVXQxYWtJc1QwRkJUemxHTEVkQlFVOTZVU3hIUVVGWmRHdENMRTFCUjNoRE9GY3NSMEZCV1hCR0xGVkJRVlVyVnl4TlFVRlJMRk5CUVZOb1JDeEZRVUZQVVN4SFFVTTFRMUlzUlVGQlVUWkpMRWRCUVZVM1NTeEhRVVZzUWl4SlFVRkpkR3hDTEVWQlFWTnRXQ3hMUVVOaUxFOUJRVWx1V0N4RlFVRlBNRmdzWlVGQmFVSTBUaXhGUVVGUkxFZEJRVXRSTEVWQlFVMHNSMEZEZEVNc1NVRkJTVzVRTEVkQlFWa3pWeXhKUVVWeVFuTnNRaXhGUVVGUkxFVkJRMVowYkVJc1JVRkJVMEVzUlVGQlR6WTRRaXhYUVVGWGRsZ3NSMEZEYkVKQkxFbEJRMVIwYkVJc1JVRkJVMEVzUlVGQlQzRTJRaXhMUVVGTEwxVXNTVUZGYmtKUkxFbEJRVkV4ZUVJc1NVRkZWalJNTEVkQlJFRTRiRUlzUlVGQlRYRkpMRWRCUVZWeVNTeEpRVU5FTEVWQlFVazViRUlzUlVGQlQzTTJRaXhYUVVGWGVGVXNSMEZCVHpsc1FpeEZRVUZQTkRoQ0xFdEJRVXM1Vnl4RlFVRk5VaXhKUVVWNlJIUnNRaXhKUVVkVU1sY3NSMEZCV1hCR0xGVkJRVlYxY2tJc1pVRkJhVUlzVTBGQlUybzVRaXhIUVVNNVF5eFBRVUZQYzFnc1MwRkJTemxDTEZWQlFWVXdia0lzVlVGQlZXdzVRaXhIUVVGWGQxWXNWMEZITjBOelFpeEhRVUZaY0VZc1ZVRkJWVzlyUWl4UlFVRlZMRmRCUXpsQ0xFOUJRVTk0WlN4TFFVRkxlV3hDTEV0QlFVczViVU1zU1VGSmJrSnBiMElzUjBGQlYzQklMRWRCUVZsd1JpeFZRVUZYTEZOQlFWTjRVeXhGUVVGTmMzSkNMRWRCUXk5RExFbEJRVWtyV2l4RlFVRm5RaXh4UTBGQmNVTnFNVUlzUzBGQlMydGlMRWRCUXpGRVoyRXNSVUZCVlN4clFrRkJhMEpzTVVJc1MwRkJTMnRpTEVkQlEycERhV0VzUlVGQllUbDBRaXhIUVVGUE5uUkNMRVZCUVZjc1VVRkJkMElzVVVGQlpHaGhMRVZCUVhWQ0xGRkJRVlVzU1VGQlQwRXNSMEZEYWtacllTeEZRVUZsUml4SFFVRlhMRkZCUVZGc01VSXNTMEZCUzJ0aUxFZEJSWFJEYVdFc1NVRkhURGwwUWl4SFFVRlBha1lzVlVGQlZUaFpMRWRCUVdNc1YwRkROMElzU1VGQlNUTnhRaXhGUVVGUmVWZ3NTMEZCUzBNc1dVRkRZbTVaTEVWQlFVOXZiRU1zUlVGQlZTeERRVUZETEVkQlFVdDRXaXhWUVVOMlFqSmFMRVZCUVZNNWEwTXNZVUZCYVVKcFdDeEhRVU14UW5CWUxFVkJRVmRPTEVWQlFVc3NSMEZEYUVKM2JFTXNSVUZCVlVRc1IwRkJWVGwwUWl4SFFVRlJhRmdzUjBGRk5VSXdlVUlzUlVGQll5eFRRVUZUTVhsQ0xFZEJRM3BDTEVsQlFVbE5MRVZCUVZOemEwTXNSVUZCVjNoc1F5eE5RVUZOTUZnc1IwRkJVV3BYTEVkQlFWVXNRMEZCUTJJc1IwRkJVVlFzU1VGRGVrUXNUMEZCVVc5c1F5eEhRVUZYYm5SQ0xFVkJRVmxzV0N4RlFVRlBMRWRCUVV0QkxFZEJSM3BEZVd0RExFZEJRVmRNTEVkQlFXOURMRzFDUVVGYU4ydERMRWRCUVRaRExFZEJRVzVDUVN4RlFVRlRUQ3hUUVVWNFJYTnNReXhGUVVGVFF5eEhRVUZCUVN4SFFVVllMRWxCUVVsMmRFSXNSVUZCVjBNc1MwRkJTMGNzVlVGRGFFSnZkRUlzU1VGQllYWjBRaXhMUVVGTFJTeFpRVUZaYmxrc1QwRkRPVUo1YkVNc1JVRkJZMG9zU1VGQmFVSnlkRUlzUlVGREwwSXdkRUlzUlVGQlYwb3NTVUZCVjBVc1JVRkZNVUlzU1VGQlMwZ3NSMEZCWjBKRkxFVkJRVk1zUTBGRE5VSXZhME1zUlVGQlVXdHNReXhGUVVGWGJHeERMRVZCUVZFc1NVRkJTV2xZTEVkQlFWbFJMRTFCUXpORExFbEJRVWx1V0N4RlFVRlRha0lzUlVGQlMwUXNUVUZCVFZrc1JVRkJUMVFzUjBGRkwwSXNUMEZFUVdVc1JVRkJUM0ZZTEZsQlFWazJRaXhMUVVGTExFTkJRVVZ1WVN4TFFVRlJjM05DTEVkQlFVMXdjMElzUzBGQlVTeERRVUZEYlhwQ0xFZEJRV053ZWtJc1VVRkJWelZMTEVsQlEyNUZMRWxCUVVsM2FVSXNSMEZCWXpWWExFVkJRVkZyV0N4SFFVVnVReXhQUVVGSmVYUkNMRWRCUVdWRExFVkJRMVkzYkVNc1JVRkJTMFFzVFVGQlRYRlpMRXRCUVUxc1dTeEpRVVV4UW1Vc1JVRkJVMjFZTEV0QlFVdHJWU3hMUVVGTEswY3NSMEZEV25WVExFVkJRV1ZPTEVWQlFWVnlhME1zUlVGQlQwNHNVVUZCVVN4SFFVRkxUU3hGUVVGUFRpeFJRVUZYVFN4UFFVc3hSVXdzUjBGQlZTeERRVUZETEUxQlFVOHNUMEZCVVN4UlFVRlRMRTlCUVZFc1UwRkJWU3hYUVVGWkxGTkJRVk13Y1VJc1IwRkRlRVVzU1VGQlNYUnlRaXhGUVVGUGRWTXNSMEZCVnl0WkxFZEJRMnhDZDJFc1JVRkJXU3d3UWtGQk1FSXhNVUlzUzBGQlMydGlMRWRCUVdNc1RVRkJVU3hQUVVOcVJXdGhMRVZCUVdVc2EwSkJRV3RDY0RGQ0xFdEJRVXRyWWl4SFFVVXhRemRVTEVkQlFVOXFSaXhWUVVGVk9Ga3NSMEZCWXl4WFFVTTNRaXhKUVVGSmNISkNMRVZCUVU4MGNrSXNWVUZEV0N4SFFVRkpNRm9zU1VGQmFVSndkRUlzUzBGQlMwY3NWVUZCVnl4RFFVTnVReXhKUVVGSk5WZ3NSVUZCVVhsWUxFdEJRVXQ2V0N4UlFVTnFRaXhQUVVGUFdDeEZRVUZMUkN4TlFVRk5ORmdzUjBGQlVXaFlMRWRCUVZOQkxFVkJRVkVzUjBGQlNWUXNSMEZGYWtRc1QwRkJUMnRaTEV0QlFVc3dkRUlzUjBGQlZ5eFRRVUZUYm14RExFZEJRemxDTEU5QlFVOVlMRVZCUVV0RUxFMUJRVTAwV0N4SFFVRlJhRmdzUjBGQlUwRXNSVUZCVVN4SFFVRkpWQ3hSUVUxeVJEaGxMRWRCUVZkd1NDeEhRVUZaY0VZc1ZVRkJWeXhUUVVGVGVGTXNSVUZCVFhOeVFpeEhRVU12UXl4SlFVRkphV0VzUlVGQllUbDBRaXhIUVVGUE5sUXNSMEZEZUVJc1IwRkJTV2xoTEVWQlFWa3NRMEZEWkN4SlFVRkpibXBETEVWQlFVMXRha01zUlVGQlYyNXFRaXhMUVVGUExFZEJRM1pDZEZBc1IwRkJaVEZUTEV0QlFVc3dWeXhIUVVGWE1WVXNTMEZEYkVNd1ZTeEhRVUZWTVZVc1IwRkJUeXhKUVVWdVFqQlZMRWRCUVZVeFZTeEhRVUZMSzFnc1MwRkJTeXhEUVVGRmFVa3NTMEZCVVd0S0xFVkJRVmwwY2tJc1MwRkJVWFZzUXl4UFFVbDBSSHAxUWl4SFFVRlZLMVlzUjBGQllYZ3pRaXhGUVVGWFZTeEhRVUZ2UW5GelFpeE5RVUZSTEVOQlFVTXNRMEZETjBSQkxFdEJRVkVzVlVGRFVuQnBRaXhMUVVGUk0wc3NTVUZKVm5WcFFpeEhRVUZaY0VZc1ZVRkJWV3RtTEUxQmVqVmtkRUlzVjBGRFJTeEpRVUZKZW5kQ0xFVkJRVk1zU1VGQlNUSlhMRWRCUVZsUkxFdEJRVXRETEdGQlQyeERMRTlCVGtGd1dDeEZRVUZQY1Znc1dVRkJZemhFTEVkQlFWVm9SU3hMUVVGTFJTeGhRVU53UTNKWUxFVkJRVTk1V0N4UlFVRlZUaXhMUVVGTFRTeFJRVU4wUW5wWUxFVkJRVTh3V0N4aFFVRmxVQ3hMUVVGTFR5eGhRVU16UWpGWUxFVkJRVTh5V0N4alFVRm5RbmRFTEVkQlFWVm9SU3hMUVVGTFVTeGxRVU4wUXpOWUxFVkJRVTgwV0N4alFVRm5RbFFzUzBGQlMxTXNZMEZETlVJMVdDeEZRVUZQTmxnc1ZVRkJXWE5FTEVkQlFWVm9SU3hMUVVGTFZTeFhRVU16UWpkWUxFZEJhelZrVkRKWExFZEJRVmx3Uml4VlFVRlZPRVFzVVVGMk5HUjBRaXhYUVVORkxFZEJRVWs0UWl4TFFVRkxUeXhoUVVGakxFTkJRM0pDTEVsQlFVa3hXQ3hGUVVGVExFbEJRVWt5Vnl4SFFVRlpVU3hOUVVNM1FtNVlMRVZCUVU5NVdDeFRRVUZYTEVWQlEyeENlbGdzUlVGQlR6QllMR05CUVVGQkxFOUJSVkF4V0N4RlFVRlRiVmdzUzBGQlMzTmFMRk5CUTFCb1dpeFZRVUZaTEVWQlJYSkNMRTlCUVU5NldDeEhRU3N6WkZReVZ5eEhRVUZaY0VZc1ZVRkJWVGRTTEUxQmNETmtkRUlzVjBGRFJTeEpRVUZKVEN4RlFVRlJPRmdzUzBGQlMwTXNXVUZCV1RGWUxGRkJRM3BDYjJ4RExFVkJRVTB6ZEVJc1MwRkJTMDBzVVVGRFdHdENMRVZCUVZGcVF5eEhRVUZSY2xnc1IwRkRhRUl3YkVNc1JVRkJWVVFzUlVGQlRTeEZRVU5vUW01WkxFVkJRVmxvVlN4RlFVRlJkRm9zUlVGQlRVZ3NUMEZCVXl4RlFVTnVRemhzUXl4RlFYZHZTVTRzVTBGQmFVSXhaaXhGUVVGUFVTeEZRVUZMWjFBc1IwRkpNMElzU1VGSVFTeEpRVUZKY2pGQ0xFZEJRVk1zUlVGRFZGQXNSVUZCVXpReFFpeEZRVUZYTlRGQ0xGTkJSV1pQTEVWQlFWRlFMRWRCUVZFc1EwRkRka0lzU1VGQlNYTmFMRVZCUVU5ell5eEZRVUZYY2pGQ0xFZEJRMnhDTmxBc1JVRkJUMnRLTEVWQlFVdHNTaXhMUVVWb1FpeFBRVUZSYTBvc1JVRkJTM2xYTEUxQlExZ3NTVUZCU3l4UFFVRmhNMG9zUjBGQlUyaFhMRVZCUVUwc1RVRkRha01zU1VGQlN5eFpRVUZoZDFjc1IwRkJUM2hYTEVWQlFVMHNUVUZETDBJc1NVRkJTeXhQUVVGaGQxY3NSVUZCVFdoU0xFZEJRVlZuVWl4RlFVRkxVaXhGUVVGUmFGY3NSMEZCVHl4TlFVTjBSQ3hKUVVGTExGbEJRV0ZuVnl4RlFVRlJNVkVzUjBGQlZUQlJMRVZCUVU5UkxFVkJRVTE0Vnl4SlFVZHlSQ3hOUVVGUExFTkJRVVZuVnl4TlFVRlRRU3hGUVVGUFVTeEpRVUZQUVN4SFFXWnNReXhEUVhodlNYRkNMRVZCUVVjMlJ5eEZRVUZYZUZZc1MwRkJTMVVzVjBGRGJFTjVUaXhGUVVGUk1HWXNSVUZCU3pGbUxFMUJRMkpSTEVWQlFVMXJaaXhGUVVGTGJHWXNTVUZEV0RWdFFpeEZRVUZUTkcxQ0xFVkJRVTFTTEVWQlEyWTNiRUlzUlVGQlVYTnNReXhGUVVGVmFtWXNSVUZCVDFJc1JVRkJVU3hGUVVOcVEzSkNMRVZCUVZrNVRTeExRVUZMVVN4alFVTnFRbk4wUWl4RlFVRmhhR2hDTEVWQlFWVXZhMElzVDBGRGRrSmhMRVZCUVZjc1JVRkRXRzFzUXl4RlFVRlpjSGRDTEVkQlFWVTFWaXhGUVVGUmFWa3NTMEZCUzFNc1pVRkZka01zU1VGQlMyVXNTVUZCVjI5elFpeEhRVUZYY0Zrc1IwRkJZWHAwUWl4SFFVRlZaMjFETEVkQlFXRm9iVU1zUlVGRE4wUXNUMEZCVDNWdlFpeEhRVUZwUW5CdlFpeEZRVUZQT0Znc1MwRkJTMFVzWVVGRmRFTXNTVUZCU1hKWUxFVkJRVk1zUjBGRlltZGtMRVZCUTBFc1MwRkJUemxrTEV0QlFWbGhMRVZCUVZkdGJFTXNSMEZCVnl4RFFVMTJReXhKUVVoQkxFbEJRVWxETEVkQlFXRXNSVUZEWW5wc1F5eEZRVUZSVEN4RlFVaGFTU3hIUVVGVGNXeERMRXRCUzBGTExFVkJRVmxHTEVkQlFWa3NRMEZETDBJc1NVRkJTWHB6UWl4RlFVRlBlVXdzUlVGQlZXdG9RaXhIUVVOcVFqVnNReXhGUVVGWGFWb3NSVUZCUzJwYUxGTkJRMmhDTUhaQ0xFVkJRVTk2Vnl4RlFVRkxlVmNzUzBGRFdtaFRMRVZCUVZjeFpDeEZRVUZUUnl4SFFVVjRRaXhIUVhCNFJGa3NSMEZ2ZUVSU2RYWkNMRVZCUTBaMmRrSXNSVUZCVVhWa0xFOUJRMGdzU1VGQlMwRXNSVUZCVlN4RFFVTndRaXhIUVhoNFJHRXNSMEYzZUVSVVoxTXNSVUZEUml4VFFVRlRhbE1zUlVGRlZDeE5RVUZOUVN4SFFVbGFhR1FzUlVGQlQwUXNTMEZCWTB3c1JVRkZka0lzVDBGQlQwMHNSMEY1TUdSVWQxY3NSMEZCVDJwR0xGVkJRVlU0YTBJc1IwRkJTMmhGTEVkQlEzUkNOMklzUjBGQlQycEdMRlZCUVZVMFowSXNUVUY2WjFGcVFpeFhRVU5GTEU5QlFVOUJMRWRCUVUxb1lpeFBRWGxuVVdaWUxFZEJRVTlxUml4VlFVRlZObnBDTEU5Qk5TdFFha0lzVjBGRFJTeFBRVUZQTEVsQlFVbDRkVUlzUjBGQlkwOHNTMEZCUzNwWUxGRkJRVk41V0N4TFFVRkxSeXhaUVRRclVEbERaQ3hIUVVGUGFrWXNWVUZCVlhGclFpeExRVzQ1VUdwQ0xGZEJRMDE2WlN4TFFVRkxTeXhoUVVGbGNHcENMRWxCUTNSQ0sybENMRXRCUVV0TExGZEJRV0Z0WlN4SFFVRlJlR1VzUzBGQlMzcFlMRlZCUldwRExFbEJRVWx0TWtJc1JVRkJUekZsTEV0QlFVdEpMRmRCUVdGS0xFdEJRVXRMTEZkQlFWZDBXU3hQUVVjM1F5eE5RVUZQTEVOQlFVVXlNa0lzUzBGQlVVRXNSVUZCVFc0eVFpeE5RVVpZYlRKQ0xFVkJRVTk2YUVNc1JVRkJXU3RwUWl4TFFVRkxTeXhYUVVGWFRDeExRVUZMU1N4bFFTczRVSFJFWml4SFFVRlBha1lzVlVGQlZXOWhMRTFCTlRWUWFrSXNVMEZCYzBKcWMwSXNSMEZKY0VJc1NVRklRU3hKUVVGSlRTeEZRVU5CYzJkQ0xFVkJRVk51U2l4TFFVVk9iVW9zWVVGQmEwSnlTaXhKUVVGWkxFTkJRMjVETEVsQlFVbDNXaXhGUVVGUk5Wb3NSMEZCWVhsS0xFZEJRM3BDYlZFc1JVRkJUV3hhTEZWQlFWa3NSVUZEYkVKcldpeEZRVUZOYWxvc1YwRkJZWEJxUWl4RlFVTm1ORXdzUlVGRFJtdHNRaXhGUVVGVE9VNHNXVUZCWTNGYUxFVkJSWFpDZW5kQ0xFVkJRVk41ZDBJc1JVRkZXQ3hKUVVGSmRrd3NSVUZCVjNWTUxFVkJRMlp1VVN4RlFVRlRRU3hGUVVGUGJFb3NXVUZIYkVJc1QwRkVRVGhPTEVWQlFWTTVUaXhaUVVGak1WZ3NSVUZEYUVKTkxFZEJORFJRVkhkWExFZEJRVTlxUml4VlFVRlZPRVFzVVVGeU0xQnFRaXhYUVVORkxFbEJRVWt6Vml4RlFVRlJlVmdzUzBGQlMwTXNXVUZEYWtJc1IwRkJTVEZZTEdGQlFXbENhVmdzUjBGQllTeERRVU5vUXl4SlFVRkpNSFZDTEVWQlFWVXpiRU1zUlVGVlpDeFBRVlJKZVZnc1MwRkJTMFVzV1VGQldXNVpMRk5CUTI1Q2JXMURMRVZCUVZVc1NVRkJTVEYxUWl4SFFVRlpVU3hSUVVVMVFtdDFRaXhGUVVGVlFTeEZRVUZSYUhkQ0xGZEJRMVpuUXl4WlFVRlpOa0lzUzBGQlN5eERRVU4yUW01aExFdEJRVkZ6YzBJc1IwRkRVbkJ6UWl4TFFVRlJMRU5CUVVOdlZ5eEpRVU5VY2xjc1VVRkJWelZMTEVsQlJVNHNTVUZCU1hkcFFpeEhRVUZqZVhWQ0xFVkJRVk5zZFVJc1MwRkJTMGNzVjBGRmVrTXNUMEZCVDBnc1MwRkJTMnRWTEV0QlFVdG9WeXhMUVhVeVVHNUNiVUlzUjBGQlQycEdMRlZCUVZVcmVrSXNUMEZCVXpsMVFpeEhRVUZQYWtZc1ZVRkJWU3RGTEZGQlFWVkZMRWRCUVU5cVJpeFZRVUZWTjFJc1RVRjBNVkIwUlN4WFFVTkZMRTlCUVU4cmJrSXNSMEZCYVVKMFVTeExRVUZMUXl4WlFVRmhSQ3hMUVVGTFJTeGpRWGN4VUdwRVlpeEhRVUZQYWtZc1ZVRkJWWGQ1UWl4TlFVRlJkblJDTEVkQlFVOXFSaXhWUVVGVmQyWXNTMEZGZEVNelpDeExRVU5HYjBRc1IwRkJUMnBHTEZWQlFWVTJRaXhKUVdnNFVHNUNMRmRCUTBVc1QwRkJUeXRFTEU5QmFUaFFSbGdzUjBGNmVtVlZMRWRCYXpCbFJTeHRRa0ZCVml0MVFpeFJRVUUyUXl4cFFrRkJaRUVzVDBGQlQwTXNTMEZCYlVKRUxFOUJRVTlETEV0QlMzcEZjbTlETEVkQlFVdDNWQ3hGUVVGSlFTeEhRVWxVTkRCQ0xFOUJRVThzVjBGRFRDeFBRVUZQTlRCQ0xFMUJTVVp1VkN4TFFVVk9RU3hIUVVGWFJpeFJRVUZWY1ZRc1NVRkJSMEVzUlVGQlNVRXNSMEZGTjBKMFZDeEhRVUZaYzFRc1JVRkJTVUVzU1VGSmFFSjRWQ3hIUVVGTGQxUXNSVUZCU1VFc1MwRkZXSGhTTEV0QlFVdG5XU0lzSW1acGJHVWlPaUpGT2x4Y1pHbG5hWFJvYVc1cmFYUmNYRUYzWlhOdmJXVkRZWEowU2xOY1hHNXZaR1ZmYlc5a2RXeGxjMXhjYkc5a1lYTm9YRnhzYjJSaGMyZ3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2NvbnN0IHN0cmljdFVyaUVuY29kZT1yZXF1aXJlKDM4MCksZGVjb2RlQ29tcG9uZW50PXJlcXVpcmUoMzMyKSxzcGxpdE9uRmlyc3Q9cmVxdWlyZSgzNzkpO2Z1bmN0aW9uIGVuY29kZShlLHIpe3JldHVybiByLmVuY29kZT9yLnN0cmljdD9zdHJpY3RVcmlFbmNvZGUoZSk6ZW5jb2RlVVJJQ29tcG9uZW50KGUpOmV9ZnVuY3Rpb24gZGVjb2RlKGUscil7cmV0dXJuIHIuZGVjb2RlP2RlY29kZUNvbXBvbmVudChlKTplfWZ1bmN0aW9uIHJlbW92ZUhhc2goZSl7Y29uc3Qgcj1lLmluZGV4T2YoXCIjXCIpO3JldHVybi0xIT09ciYmKGU9ZS5zbGljZSgwLHIpKSxlfWZ1bmN0aW9uIGV4dHJhY3QoZSl7Y29uc3Qgcj0oZT1yZW1vdmVIYXNoKGUpKS5pbmRleE9mKFwiP1wiKTtyZXR1cm4tMT09PXI/XCJcIjplLnNsaWNlKHIrMSl9ZnVuY3Rpb24gcGFyc2UoZSxyKXtjb25zdCB0PWZ1bmN0aW9uKGUpe2xldCByO3N3aXRjaChlLmFycmF5Rm9ybWF0KXtjYXNlXCJpbmRleFwiOnJldHVybihlLHQsbyk9PntyPS9cXFsoXFxkKilcXF0kLy5leGVjKGUpLGU9ZS5yZXBsYWNlKC9cXFtcXGQqXFxdJC8sXCJcIikscj8odm9pZCAwPT09b1tlXSYmKG9bZV09e30pLG9bZV1bclsxXV09dCk6b1tlXT10fTtjYXNlXCJicmFja2V0XCI6cmV0dXJuKGUsdCxvKT0+e3I9LyhcXFtcXF0pJC8uZXhlYyhlKSxlPWUucmVwbGFjZSgvXFxbXFxdJC8sXCJcIikscj92b2lkIDAhPT1vW2VdP29bZV09W10uY29uY2F0KG9bZV0sdCk6b1tlXT1bdF06b1tlXT10fTtjYXNlXCJjb21tYVwiOnJldHVybihlLHIsdCk9Pntjb25zdCBvPVwic3RyaW5nXCI9PXR5cGVvZiByJiZyLnNwbGl0KFwiXCIpLmluZGV4T2YoXCIsXCIpPi0xP3Iuc3BsaXQoXCIsXCIpOnI7dFtlXT1vfTtkZWZhdWx0OnJldHVybihlLHIsdCk9Pnt2b2lkIDAhPT10W2VdP3RbZV09W10uY29uY2F0KHRbZV0scik6dFtlXT1yfX19KHI9T2JqZWN0LmFzc2lnbih7ZGVjb2RlOiEwLHNvcnQ6ITAsYXJyYXlGb3JtYXQ6XCJub25lXCIscGFyc2VOdW1iZXJzOiExLHBhcnNlQm9vbGVhbnM6ITF9LHIpKSxvPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIG87aWYoIShlPWUudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sXCJcIikpKXJldHVybiBvO2Zvcihjb25zdCBuIG9mIGUuc3BsaXQoXCImXCIpKXtsZXRbZSxjXT1zcGxpdE9uRmlyc3Qobi5yZXBsYWNlKC9cXCsvZyxcIiBcIiksXCI9XCIpO2M9dm9pZCAwPT09Yz9udWxsOmRlY29kZShjLHIpLHIucGFyc2VOdW1iZXJzJiYhTnVtYmVyLmlzTmFOKE51bWJlcihjKSkmJlwic3RyaW5nXCI9PXR5cGVvZiBjJiZcIlwiIT09Yy50cmltKCk/Yz1OdW1iZXIoYyk6IXIucGFyc2VCb29sZWFuc3x8bnVsbD09PWN8fFwidHJ1ZVwiIT09Yy50b0xvd2VyQ2FzZSgpJiZcImZhbHNlXCIhPT1jLnRvTG93ZXJDYXNlKCl8fChjPVwidHJ1ZVwiPT09Yy50b0xvd2VyQ2FzZSgpKSx0KGRlY29kZShlLHIpLGMsbyl9cmV0dXJuITE9PT1yLnNvcnQ/bzooITA9PT1yLnNvcnQ/T2JqZWN0LmtleXMobykuc29ydCgpOk9iamVjdC5rZXlzKG8pLnNvcnQoci5zb3J0KSkucmVkdWNlKChlLHIpPT57Y29uc3QgdD1vW3JdO3JldHVybiBCb29sZWFuKHQpJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmIUFycmF5LmlzQXJyYXkodCk/ZVtyXT1mdW5jdGlvbiBlKHIpe3JldHVybiBBcnJheS5pc0FycmF5KHIpP3Iuc29ydCgpOlwib2JqZWN0XCI9PXR5cGVvZiByP2UoT2JqZWN0LmtleXMocikpLnNvcnQoKGUscik9Pk51bWJlcihlKS1OdW1iZXIocikpLm1hcChlPT5yW2VdKTpyfSh0KTplW3JdPXQsZX0sT2JqZWN0LmNyZWF0ZShudWxsKSl9LyogY29tbW9uLXNoYWtlIHJlbW92ZWQ6IGV4cG9ydHMuZXh0cmFjdCA9ICovIGV4dHJhY3QsZXhwb3J0cy5wYXJzZT1wYXJzZSwvKiBjb21tb24tc2hha2UgcmVtb3ZlZDogZXhwb3J0cy5zdHJpbmdpZnkgPSAqLyB2b2lkIDAsICgoZSxyKT0+e2lmKCFlKXJldHVyblwiXCI7Y29uc3QgdD1mdW5jdGlvbihlKXtzd2l0Y2goZS5hcnJheUZvcm1hdCl7Y2FzZVwiaW5kZXhcIjpyZXR1cm4gcj0+KHQsbyk9Pntjb25zdCBuPXQubGVuZ3RoO3JldHVybiB2b2lkIDA9PT1vP3Q6bnVsbD09PW8/Wy4uLnQsW2VuY29kZShyLGUpLFwiW1wiLG4sXCJdXCJdLmpvaW4oXCJcIildOlsuLi50LFtlbmNvZGUocixlKSxcIltcIixlbmNvZGUobixlKSxcIl09XCIsZW5jb2RlKG8sZSldLmpvaW4oXCJcIildfTtjYXNlXCJicmFja2V0XCI6cmV0dXJuIHI9Pih0LG8pPT52b2lkIDA9PT1vP3Q6bnVsbD09PW8/Wy4uLnQsW2VuY29kZShyLGUpLFwiW11cIl0uam9pbihcIlwiKV06Wy4uLnQsW2VuY29kZShyLGUpLFwiW109XCIsZW5jb2RlKG8sZSldLmpvaW4oXCJcIildO2Nhc2VcImNvbW1hXCI6cmV0dXJuIHI9Pih0LG8sbik9Pm51bGw9PW98fDA9PT1vLmxlbmd0aD90OjA9PT1uP1tbZW5jb2RlKHIsZSksXCI9XCIsZW5jb2RlKG8sZSldLmpvaW4oXCJcIildOltbdCxlbmNvZGUobyxlKV0uam9pbihcIixcIildO2RlZmF1bHQ6cmV0dXJuIHI9Pih0LG8pPT52b2lkIDA9PT1vP3Q6bnVsbD09PW8/Wy4uLnQsZW5jb2RlKHIsZSldOlsuLi50LFtlbmNvZGUocixlKSxcIj1cIixlbmNvZGUobyxlKV0uam9pbihcIlwiKV19fShyPU9iamVjdC5hc3NpZ24oe2VuY29kZTohMCxzdHJpY3Q6ITAsYXJyYXlGb3JtYXQ6XCJub25lXCJ9LHIpKSxvPU9iamVjdC5rZXlzKGUpO3JldHVybiExIT09ci5zb3J0JiZvLnNvcnQoci5zb3J0KSxvLm1hcChvPT57Y29uc3Qgbj1lW29dO3JldHVybiB2b2lkIDA9PT1uP1wiXCI6bnVsbD09PW4/ZW5jb2RlKG8scik6QXJyYXkuaXNBcnJheShuKT9uLnJlZHVjZSh0KG8pLFtdKS5qb2luKFwiJlwiKTplbmNvZGUobyxyKStcIj1cIitlbmNvZGUobixyKX0pLmZpbHRlcihlPT5lLmxlbmd0aD4wKS5qb2luKFwiJlwiKX0pLC8qIGNvbW1vbi1zaGFrZSByZW1vdmVkOiBleHBvcnRzLnBhcnNlVXJsID0gKi8gdm9pZCAwLCAoKGUscik9Pih7dXJsOnJlbW92ZUhhc2goZSkuc3BsaXQoXCI/XCIpWzBdfHxcIlwiLHF1ZXJ5OnBhcnNlKGV4dHJhY3QoZSkscil9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbk4wY21samRGVnlhVVZ1WTI5a1pTSXNJbkpsY1hWcGNtVWlMQ0prWldOdlpHVkRiMjF3YjI1bGJuUWlMQ0p6Y0d4cGRFOXVSbWx5YzNRaUxDSmxibU52WkdVaUxDSjJZV3gxWlNJc0ltOXdkR2x2Ym5NaUxDSnpkSEpwWTNRaUxDSmxibU52WkdWVlVrbERiMjF3YjI1bGJuUWlMQ0prWldOdlpHVWlMQ0p5WlcxdmRtVklZWE5vSWl3aWFXNXdkWFFpTENKb1lYTm9VM1JoY25RaUxDSnBibVJsZUU5bUlpd2ljMnhwWTJVaUxDSmxlSFJ5WVdOMElpd2ljWFZsY25sVGRHRnlkQ0lzSW5CaGNuTmxJaXdpWm05eWJXRjBkR1Z5SWl3aWNtVnpkV3gwSWl3aVlYSnlZWGxHYjNKdFlYUWlMQ0pyWlhraUxDSmhZMk4xYlhWc1lYUnZjaUlzSW1WNFpXTWlMQ0p5WlhCc1lXTmxJaXdpWTI5dVkyRjBJaXdpYm1WM1ZtRnNkV1VpTENKemNHeHBkQ0lzSWs5aWFtVmpkQ0lzSW1GemMybG5iaUlzSW5OdmNuUWlMQ0p3WVhKelpVNTFiV0psY25NaUxDSndZWEp6WlVKdmIyeGxZVzV6SWl3aWNtVjBJaXdpWTNKbFlYUmxJaXdpZEhKcGJTSXNJbkJoY21GdElpd2lUblZ0WW1WeUlpd2lhWE5PWVU0aUxDSjBiMHh2ZDJWeVEyRnpaU0lzSW10bGVYTWlMQ0p5WldSMVkyVWlMQ0pDYjI5c1pXRnVJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpYTJWNWMxTnZjblJsY2lJc0ltRWlMQ0ppSWl3aWJXRndJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzV1VGQlFTeERRVU5CTEUxQlFVMUJMR1ZCUVVGQkxFTkJRV3RDUXl4UFFVRkJRU3hEUVVGUkxHMUNRVUZCTEVOQlFVRXNRMEZETVVKRExHVkJRVUZCTEVOQlFXdENSQ3hQUVVGQlFTeERRVUZSTEhOQ1FVRkJMRU5CUVVFc1EwRkRNVUpGTEZsQlFVRkJMRU5CUVdWR0xFOUJRVUZCTEVOQlFWRXNaMEpCUVVFc1EwRkJRU3hEUVhsSU4wSXNVMEZCVTBjc1RVRkJRVUVzUTBGQlQwTXNRMEZCUVVFc1EwRkJUME1zUTBGQlFVRXNRMEZCUVVFc1EwRkRkRUlzVDBGQlNVRXNRMEZCUVVFc1EwRkJVVVlzVFVGQlFVRXNRMEZEU2tVc1EwRkJRVUVzUTBGQlVVTXNUVUZCUVVFc1EwRkJVMUFzWlVGQlFVRXNRMEZCWjBKTExFTkJRVUZCTEVOQlFVRkJMRU5CUVZOSExHdENRVUZCUVN4RFFVRnRRa2dzUTBGQlFVRXNRMEZCUVVFc1EwRkhPVVJCTEVOQlFVRkJMRU5CUjFJc1UwRkJVMGtzVFVGQlFVRXNRMEZCVDBvc1EwRkJRVUVzUTBGQlQwTXNRMEZCUVVFc1EwRkJRVUVzUTBGRGRFSXNUMEZCU1VFc1EwRkJRVUVzUTBGQlVVY3NUVUZCUVVFc1EwRkRTbEFzWlVGQlFVRXNRMEZCWjBKSExFTkJRVUZCTEVOQlFVRkJMRU5CUjJwQ1FTeERRVUZCUVN4RFFXbENVaXhUUVVGVFN5eFZRVUZCUVN4RFFVRlhReXhEUVVGQlFTeERRVUZCUVN4RFFVTnVRaXhOUVVGTlF5eERRVUZCUVN4RFFVRlpSQ3hEUVVGQlFTeERRVUZOUlN4UFFVRkJRU3hEUVVGUkxFZEJRVUVzUTBGQlFTeERRVXRvUXl4TlFVRkJMRU5CU20xQ0xFTkJRVUVzUjBGQlprUXNRMEZCUVVFc1IwRkRTRVFzUTBGQlFVRXNRMEZCVVVFc1EwRkJRVUVzUTBGQlRVY3NTMEZCUVVFc1EwRkJUU3hEUVVGQkxFTkJRVWRHTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIycENSQ3hEUVVGQlFTeERRVWRTTEZOQlFWTkpMRTlCUVVGQkxFTkJRVkZLTEVOQlFVRkJMRU5CUVVGQkxFTkJSV2hDTEUxQlFVMUxMRU5CUVVGQkxFTkJRVUZCTEVOQlJFNU1MRU5CUVVGQkxFTkJRVkZFTEZWQlFVRkJMRU5CUVZkRExFTkJRVUZCTEVOQlFVRkJMRVZCUTAxRkxFOUJRVUZCTEVOQlFWRXNSMEZCUVN4RFFVRkJMRU5CUTJwRExFMUJRVUVzUTBGQmIwSXNRMEZCUVN4SFFVRm9Ra2NzUTBGQlFVRXNRMEZEU1N4RlFVRkJMRU5CUjBSTUxFTkJRVUZCTEVOQlFVMUhMRXRCUVVGQkxFTkJRVTFGTEVOQlFVRkJMRU5CUVdFc1EwRkJRU3hEUVVGQkxFTkJSMnBETEZOQlFWTkRMRXRCUVVGQkxFTkJRVTFPTEVOQlFVRkJMRU5CUVU5TUxFTkJRVUZCTEVOQlFVRkJMRU5CVTNKQ0xFMUJRVTFaTEVOQlFVRkJMRU5CY2toUUxGTkJRVGhDV2l4RFFVRkJRU3hEUVVGQlFTeERRVU0zUWl4SlFVRkpZU3hEUVVGQlFTeERRVVZLTEU5QlFWRmlMRU5CUVVGQkxFTkJRVkZqTEZkQlFVRkJMRVZCUTJZc1NVRkJTeXhQUVVGQkxFTkJRMG9zVFVGQlR5eERRVUZEUXl4RFFVRkJRU3hEUVVGTGFFSXNRMEZCUVVFc1EwRkJUMmxDTEVOQlFVRkJMRWRCUVVGQkxFTkJRMjVDU0N4RFFVRkJRU3hEUVVGVExGbEJRVUVzUTBGQllVa3NTVUZCUVVFc1EwRkJTMFlzUTBGQlFVRXNRMEZCUVVFc1EwRkZNMEpCTEVOQlFVRkJMRU5CUVUxQkxFTkJRVUZCTEVOQlFVbEhMRTlCUVVGQkxFTkJRVkVzVlVGQlFTeERRVUZaTEVWQlFVRXNRMEZCUVN4RFFVVjZRa3dzUTBGQlFVRXNSVUZCUVVFc1MwRkJRVUVzUTBGQlFVRXNSMEZMUkVjc1EwRkJRVUVzUTBGQldVUXNRMEZCUVVFc1EwRkJRVUVzUjBGRFprTXNRMEZCUVVFc1EwRkJXVVFzUTBGQlFVRXNRMEZCUVVFc1EwRkJUeXhGUVVGQkxFTkJRVUVzUTBGSGNFSkRMRU5CUVVGQkxFTkJRVmxFTEVOQlFVRkJMRU5CUVVGQkxFTkJRVXRHTEVOQlFVRkJMRU5CUVU4c1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlRXUXNRMEZCUVVFc1JVRlNOMEpwUWl4RFFVRkJRU3hEUVVGWlJDeERRVUZCUVN4RFFVRkJRU3hEUVVGUGFFSXNRMEZCUVVFc1EwRkJRVUVzUTBGWGRFSXNTVUZCU3l4VFFVRkJMRU5CUTBvc1RVRkJUeXhEUVVGRFowSXNRMEZCUVVFc1EwRkJTMmhDTEVOQlFVRkJMRU5CUVU5cFFpeERRVUZCUVN4SFFVRkJRU3hEUVVOdVFrZ3NRMEZCUVVFc1EwRkJVeXhUUVVGQkxFTkJRVlZKTEVsQlFVRkJMRU5CUVV0R0xFTkJRVUZCTEVOQlFVRkJMRU5CUTNoQ1FTeERRVUZCUVN4RFFVRk5RU3hEUVVGQlFTeERRVUZKUnl4UFFVRkJRU3hEUVVGUkxFOUJRVUVzUTBGQlV5eEZRVUZCTEVOQlFVRXNRMEZGZEVKTUxFTkJRVUZCTEVOQlFVRkJMRXRCUVVGQkxFTkJRVUZCTEVkQlMwUkhMRU5CUVVGQkxFTkJRVmxFTEVOQlFVRkJMRU5CUVVGQkxFTkJTMmhDUXl4RFFVRkJRU3hEUVVGWlJDeERRVUZCUVN4RFFVRkJRU3hEUVVGUExFVkJRVUVzUTBGQlIwa3NUVUZCUVVFc1EwRkJUMGdzUTBGQlFVRXNRMEZCV1VRc1EwRkJRVUVzUTBGQlFVRXNRMEZCVFdoQ0xFTkJRVUZCTEVOQlFVRkJMRU5CU2psRGFVSXNRMEZCUVVFc1EwRkJXVVFzUTBGQlFVRXNRMEZCUVVFc1EwRkJUeXhEUVVGRGFFSXNRMEZCUVVFc1EwRkJRVUVzUTBGTWNFSnBRaXhEUVVGQlFTeERRVUZaUkN4RFFVRkJRU3hEUVVGQlFTeERRVUZQYUVJc1EwRkJRVUVzUTBGQlFVRXNRMEZaZEVJc1NVRkJTeXhQUVVGQkxFTkJRMG9zVFVGQlR5eERRVUZEWjBJc1EwRkJRVUVzUTBGQlMyaENMRU5CUVVGQkxFTkJRVTlwUWl4RFFVRkJRU3hIUVVGQlFTeERRVU51UWl4TlFVTk5TU3hEUVVGQlFTeERRVVF5UWl4UlFVRkJMRVZCUVVFc1QwRkJWbkpDTEVOQlFVRkJMRVZCUVhOQ1FTeERRVUZCUVN4RFFVRk5jMElzUzBGQlFVRXNRMEZCVFN4RlFVRkJMRU5CUVVFc1EwRkJTV1FzVDBGQlFVRXNRMEZCVVN4SFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGUkxFTkJRVUVzUTBGRGJFUlNMRU5CUVVGQkxFTkJRVTF6UWl4TFFVRkJRU3hEUVVGTkxFZEJRVUVzUTBGQlFTeERRVUZQZEVJc1EwRkJRVUVzUTBGRE9VTnBRaXhEUVVGQlFTeERRVUZaUkN4RFFVRkJRU3hEUVVGQlFTeERRVUZQU3l4RFFVRkJRU3hEUVVGQlFTeERRVWR5UWl4UlFVTkRMRTFCUVU4c1EwRkJRMHdzUTBGQlFVRXNRMEZCUzJoQ0xFTkJRVUZCTEVOQlFVOXBRaXhEUVVGQlFTeEhRVUZCUVN4RFFVRkJRU3hMUVVGQlFTeERRVUZCUVN4SFFVTm1RU3hEUVVGQlFTeERRVUZaUkN4RFFVRkJRU3hEUVVGQlFTeERRVXRvUWtNc1EwRkJRVUVzUTBGQldVUXNRMEZCUVVFc1EwRkJRVUVzUTBGQlR5eEZRVUZCTEVOQlFVZEpMRTFCUVVGQkxFTkJRVTlJTEVOQlFVRkJMRU5CUVZsRUxFTkJRVUZCTEVOQlFVRkJMRU5CUVUxb1FpeERRVUZCUVN4RFFVRkJRU3hEUVVvNVEybENMRU5CUVVGQkxFTkJRVmxFTEVOQlFVRkJMRU5CUVVGQkxFTkJRVTlvUWl4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFXeEVlRUlzUTBFMlIwTkRMRU5CUVVGQkxFTkJRVlZ6UWl4TlFVRkJRU3hEUVVGUFF5eE5RVUZCUVN4RFFVRlBMRU5CUTNaQ2NFSXNUVUZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkRRWEZDTEVsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUTBGV0xGZEJRVUZCTEVOQlFXRXNUVUZCUVN4RFFVTmlWeXhaUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVU5CUXl4aFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVU5GTVVJc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkxSekpDTEVOQlFVRkJMRU5CUVUxTUxFMUJRVUZCTEVOQlFVOU5MRTFCUVVGQkxFTkJRVThzU1VGQlFTeERRVUZCTEVOQlJURkNMRWRCUVhGQ0xGRkJRVUVzUlVGQlFTeFBRVUZXZGtJc1EwRkJRVUVzUTBGRFZpeFBRVUZQYzBJc1EwRkJRVUVzUTBGTFVpeEhRVUZCTEVWQlJrRjBRaXhEUVVGQlFTeERRVUZSUVN4RFFVRkJRU3hEUVVGTmQwSXNTVUZCUVVFc1JVRkJRVUVzUTBGQlQxZ3NUMEZCUVVFc1EwRkJVU3hSUVVGQkxFTkJRVlVzUlVGQlFTeERRVUZCTEVOQlFVRXNRMEZIZEVNc1QwRkJUMU1zUTBGQlFVRXNRMEZIVWl4SlFVRkxMRTFCUVUxSExFTkJRVUZCTEVsQlFWTjZRaXhEUVVGQlFTeERRVUZOWjBJc1MwRkJRVUVzUTBGQlRTeEhRVUZCTEVOQlFVRXNRMEZCVFN4RFFVTnlReXhIUVVGQkxFTkJRVXRPTEVOQlFVRkJMRU5CUVV0b1FpeERRVUZCUVN4RFFVRkJRU3hEUVVGVFJpeFpRVUZCUVN4RFFVRmhhVU1zUTBGQlFVRXNRMEZCVFZvc1QwRkJRVUVzUTBGQlVTeExRVUZCTEVOQlFVOHNSMEZCUVN4RFFVRkJMRU5CUVUwc1IwRkJRU3hEUVVGQkxFTkJTVE5FYmtJc1EwRkJRVUVzUTBGQlFVRXNTMEZCUVVFc1EwRkJRVUVzUjBGQlVVRXNRMEZCUVVFc1EwRkJjMElzU1VGQlFTeERRVUZQU1N4TlFVRkJRU3hEUVVGUFNpeERRVUZCUVN4RFFVRlBReXhEUVVGQlFTeERRVUZCUVN4RFFVVXZRMEVzUTBGQlFVRXNRMEZCVVhsQ0xGbEJRVUZCTEVWQlFVRkJMRU5CUVdsQ1RTeE5RVUZCUVN4RFFVRlBReXhMUVVGQlFTeERRVUZOUkN4TlFVRkJRU3hEUVVGUGFFTXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNSVUZCTmtJc1VVRkJRU3hGUVVGQkxFOUJRVlpCTEVOQlFVRkJMRVZCUVhWRExFVkJRVUVzUjBGQmFrSkJMRU5CUVVGQkxFTkJRVTA0UWl4SlFVRkJRU3hGUVVGQlFTeERRVU12UmpsQ0xFTkJRVUZCTEVOQlFWRm5ReXhOUVVGQlFTeERRVUZQYUVNc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkRURU1zUTBGQlFVRXNRMEZCVVRCQ0xHRkJRVUZCTEVWQlFUSkNMRWxCUVVFc1IwRkJWak5DTEVOQlFVRkJMRVZCUVRKRExFMUJRVUVzUjBGQmVFSkJMRU5CUVVGQkxFTkJRVTFyUXl4WFFVRkJRU3hGUVVGQlFTeEZRVUZ2UkN4UFFVRkJMRWRCUVhoQ2JFTXNRMEZCUVVFc1EwRkJUV3RETEZkQlFVRkJMRVZCUVVGQkxFZEJRemxHYkVNc1EwRkJRVUVzUTBGQlowTXNUVUZCUVN4SFFVRjRRa0VzUTBGQlFVRXNRMEZCVFd0RExGZEJRVUZCTEVWQlFVRkJMRU5CUVVGQkxFTkJSMlp5UWl4RFFVRkJRU3hEUVVGVlZDeE5RVUZCUVN4RFFVRlBXU3hEUVVGQlFTeERRVUZMWml4RFFVRkJRU3hEUVVGQlFTeERRVUZWUkN4RFFVRkJRU3hEUVVGUE5FSXNRMEZCUVVFc1EwRkJRVUVzUTBGSGVFTXNUVUZCUVN4RFFVRkJMRU5CUVVFc1IwRkJTVE5DTEVOQlFVRkJMRU5CUVZGM1FpeEpRVUZCUVN4RFFVTktSeXhEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4SFFVZEJNMElzUTBGQlFVRXNRMEZCVVhkQ0xFbEJRVUZCTEVOQlFXZENSaXhOUVVGQlFTeERRVUZQV1N4SlFVRkJRU3hEUVVGTFVDeERRVUZCUVN4RFFVRkJRU3hEUVVGTFNDeEpRVUZCUVN4RlFVRkJRU3hEUVVGVFJpeE5RVUZCUVN4RFFVRlBXU3hKUVVGQlFTeERRVUZMVUN4RFFVRkJRU3hEUVVGQlFTeERRVUZMU0N4SlFVRkJRU3hEUVVGTGVFSXNRMEZCUVVFc1EwRkJVWGRDTEVsQlFVRkJMRU5CUVVGQkxFVkJRVTlYTEUxQlFVRkJMRU5CUVU4c1EwRkJRM1JDTEVOQlFVRkJMRU5CUVZGRkxFTkJRVUZCTEVkQlFVRkJMRU5CUXpsSExFMUJRVTFvUWl4RFFVRkJRU3hEUVVGUk5FSXNRMEZCUVVFc1EwRkJTVm9zUTBGQlFVRXNRMEZCUVVFc1EwRlJiRUlzVDBGUVNYRkNMRTlCUVVGQkxFTkJRVkZ5UXl4RFFVRkJRU3hEUVVGQlFTeEZRVUV5UWl4UlFVRkJMRVZCUVVFc1QwRkJWa0VzUTBGQlFVRXNSVUZCUVVFc1EwRkJkVUp6UXl4TFFVRkJRU3hEUVVGTlF5eFBRVUZCUVN4RFFVRlJka01zUTBGQlFVRXNRMEZCUVVFc1EwRkZha1ZqTEVOQlFVRkJMRU5CUVU5RkxFTkJRVUZCTEVOQlFVRkJMRU5CYWtaV0xGTkJRVk4zUWl4RFFVRkJRU3hEUVVGWGJFTXNRMEZCUVVFc1EwRkJRVUVzUTBGRGJrSXNUMEZCU1dkRExFdEJRVUZCTEVOQlFVMURMRTlCUVVGQkxFTkJRVkZxUXl4RFFVRkJRU3hEUVVGQlFTeERRVU5XUVN4RFFVRkJRU3hEUVVGTmJVSXNTVUZCUVVFc1JVRkJRVUVzUTBGSFR5eFJRVUZCTEVWQlFVRXNUMEZCVm01Q0xFTkJRVUZCTEVOQlEwaHJReXhEUVVGQlFTeERRVUZYYWtJc1RVRkJRVUVzUTBGQlQxa3NTVUZCUVVFc1EwRkJTemRDTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlF6VkNiVUlzU1VGQlFVRXNRMEZCU3l4RFFVRkRaMElzUTBGQlFVRXNRMEZCUjBNc1EwRkJRVUVzUjBGQlRWWXNUVUZCUVVFc1EwRkJUMU1zUTBGQlFVRXNRMEZCUVVFc1EwRkJTMVFzVFVGQlFVRXNRMEZCVDFVc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkRiRU5ETEVkQlFVRkJMRU5CUVVrelFpeERRVUZCUVN4RlFVRlBWaXhEUVVGQlFTeERRVUZOVlN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZGlWaXhEUVVGQlFTeERRVmhTTEVOQmFVWTBRazRzUTBGQlFVRXNRMEZCUVVFc1EwRkZla0pqTEVOQlFVRkJMRU5CUVU5RkxFTkJRVUZCTEVOQlFVRkJMRU5CUVU5b1FpeERRVUZCUVN4RFFVZFNZeXhEUVVGQlFTeERRVUZCUVN4RFFVTk1VeXhOUVVGQlFTeERRVUZQVFN4TlFVRkJRU3hEUVVGUExFbEJRVUVzUTBGQlFTeERRVUZCTEVOQlIyeENaU3c0UTBGQmEwSnNReXhQUVVGQlFTeERRVU5zUW10RExFOUJRVUZCTEVOQlFWRm9ReXhMUVVGQlFTeERRVUZSUVN4TFFVRkJRU3hEUVVWb1FtZERMSFU0UWtGdlEyMURMRU5CUjI1RFFTeHBTVUZISzBJelF5eERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwiXCJ1c2Ugc3RyaWN0XCI7bW9kdWxlLmV4cG9ydHM9KGU9PmVuY29kZVVSSUNvbXBvbmVudChlKS5yZXBsYWNlKC9bIScoKSpdL2csZT0+YCUke2UuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKemRISWlMQ0psYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFpTENKeVpYQnNZV05sSWl3aWVDSXNJbU5vWVhKRGIyUmxRWFFpTENKMGIxTjBjbWx1WnlJc0luUnZWWEJ3WlhKRFlYTmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQlFTeFBRVUZQUXl4UlFVRlZReXhEUVVGQlFTeEhRVUZQUXl4dFFrRkJiVUpFTEVkQlFVdEZMRkZCUVZFc1YwRkJXVU1zVDBGQlUwRXNSVUZCUlVNc1YwRkJWeXhIUVVGSFF5eFRRVUZUTEVsQlFVbERJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnh6ZEhKcFkzUXRkWEpwTFdWdVkyOWtaVnhjYVc1a1pYZ3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO21vZHVsZS5leHBvcnRzPSgoZSx0KT0+e2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHxcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgdGhlIGFyZ3VtZW50cyB0byBiZSBvZiB0eXBlIGBzdHJpbmdgXCIpO2lmKFwiXCI9PT10KXJldHVybltlXTtjb25zdCByPWUuaW5kZXhPZih0KTtyZXR1cm4tMT09PXI/W2VdOltlLnNsaWNlKDAsciksZS5zbGljZShyK3QubGVuZ3RoKV19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p6ZEhKcGJtY2lMQ0p6WlhCaGNtRjBiM0lpTENKVWVYQmxSWEp5YjNJaUxDSnpaWEJoY21GMGIzSkpibVJsZUNJc0ltbHVaR1Y0VDJZaUxDSnpiR2xqWlNJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVDBGQlQwTXNVVUZCVlN4RlFVRkRReXhGUVVGUlF5eExRVU42UWl4SFFVRjNRaXhwUWtGQldFUXNSMEZCTkVNc2FVSkJRV1JETEVWQlF6RkRMRTFCUVUwc1NVRkJTVU1zVlVGQlZTeHBSRUZIY2tJc1IwRkJhMElzUzBGQlpFUXNSVUZEU0N4TlFVRlBMRU5CUVVORUxFZEJSMVFzVFVGQlRVY3NSVUZCYVVKSUxFVkJRVTlKTEZGQlFWRklMRWRCUlhSRExFOUJRWGRDTEVsQlFYQkNSU3hGUVVOSkxFTkJRVU5JTEVkQlIwWXNRMEZEVGtFc1JVRkJUMHNzVFVGQlRTeEZRVUZIUml4SFFVTm9Ra2dzUlVGQlQwc3NUVUZCVFVZc1JVRkJhVUpHTEVWQlFWVkxJaXdpWm1sc1pTSTZJa1U2WEZ4a2FXZHBkR2hwYm10cGRGeGNRWGRsYzI5dFpVTmhjblJLVTF4Y2JtOWtaVjl0YjJSMWJHVnpYRnh6Y0d4cGRDMXZiaTFtYVhKemRGeGNhVzVrWlhndWFuTWlmUT09IiwiY29uc3QgZGVidWcgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5jb25zdCB7bG9nLCBlcnJvcn0gPSBkZWJ1ZztcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCB7c2FyZ3MsIHhociwgdXVpZH0gPSB1dGlscztcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjInKS5FdmVudEVtaXR0ZXIyO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ0JsdWVCaXJkJylcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG5jbGFzcyBEYXRhU3RvcmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3RvcihkYXRhLCBxdWVyeUZuLCBmb3JtYXRGbikge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9kYXRhID0gZGF0YSB8fCBbXTtcblx0XHR0aGlzLl9sYXN0UXVlcnlBcmdzID0gbnVsbDtcblx0XHR0aGlzLl9sYXN0RmlsdGVyID0gbnVsbDtcblx0XHR0aGlzLl9xdWVyeUZuID0gcXVlcnlGbjtcblx0XHR0aGlzLl9mb3JtYXRGbiA9IGZvcm1hdEZuO1xuXHRcdHRoaXMuX2xhc3RRdWVyeSA9IG51bGw7XG5cdFx0dGhpcy5fZXZlbnRzT2ZmID0gMDtcblx0fVxuXG5cdGdldCBkYXRhKCkge1xuXHRcdHJldHVybiB0aGlzLl9kYXRhO1xuXHR9XG5cblx0ZXZlbnRzT2ZmKCkge1xuXHRcdHRoaXMuX2V2ZW50c09mZisrO1xuXHR9XG5cblx0ZXZlbnRzT24oKSB7XG5cdFx0aWYgKCB0aGlzLl9ldmVudHNPZmYgPiAwICkge1xuXHRcdFx0dGhpcy5fZXZlbnRzT2ZmLS07XG5cdFx0XHRpZiAoIHRoaXMuX2V2ZW50c09mZiA9PSAwICkge1xuXHRcdFx0XHR0aGlzLmVtaXQoXCJyZWZyZXNoXCIsIHRoaXMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGVtaXQoKSB7XG5cdFx0aWYgKCB0aGlzLl9ldmVudHNPZmYgPT0gMCApIHtcblx0XHRcdHJldHVybiBzdXBlci5lbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9XG5cblx0cXVlcnkoZmlsdGVyKSB7XG5cdFx0aWYgKCB0aGlzLl9xdWVyeUZuICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IEpTT04uc3RyaW5naWZ5KGZpbHRlcik7XG5cblx0XHRcdGlmICggdGhpcy5fbGFzdEZpbHRlciAmJiB0aGlzLl9sYXN0RmlsdGVyID09IGhhc2ggKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9sYXN0UXVlcnk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2xhc3RGaWx0ZXIgPSBoYXNoO1xuXHRcdFx0dGhpcy5fbGFzdFF1ZXJ5ID0gdGhpcy5fcXVlcnlGbihmaWx0ZXIpXG5cdFx0XHRcdC50aGVuKChyZXNwKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fZGF0YSA9IHJlc3A7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KFwicmVmcmVzaFwiLCB0aGlzKVxuXHRcdFx0XHRcdGlmICggdGhpcy5fZm9ybWF0Rm4gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fZm9ybWF0Rm4odGhpcy5fZGF0YSlcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gcmVzcDtcblx0XHRcdFx0fSlcblxuXHRcdFx0cmV0dXJuIHRoaXMuX2xhc3RRdWVyeTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVidWcud2FybihcIlRoaXMgRGF0YVN0b3JlIGhhcyBubyBxdWVyeSBmdW5jdGlvblwiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0cmVzb2x2ZShiYXNlLl9kYXRhKTtcblx0XHR9KVxuXHR9XG5cblx0ZmluZChmaWx0ZXIpIHtcblx0XHRyZXR1cm4gXy5maW5kKHRoaXMuX2RhdGEsIGZpbHRlcik7XG5cdH1cblxuXHR1cGRhdGUoZGF0YSwgZW1pdEV2ZW50cykge1xuXHRcdGlmICggZW1pdEV2ZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0ZW1pdEV2ZW50cyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0dmFyIHJvdyA9IF8uZmluZCh0aGlzLl9kYXRhLCB7IGlkOiBkYXRhLmlkIH0pO1xuXHRcdGlmICggcm93ICkge1xuXHRcdFx0Xy5tZXJnZShyb3csIGRhdGEpO1xuXHRcdFx0aWYgKCBlbWl0RXZlbnRzICkge1xuXHRcdFx0XHR0aGlzLmVtaXQoXCJ1cGRhdGVcIiwgdGhpcywgcm93KVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9kYXRhLnB1c2goZGF0YSlcblx0XHRcdGlmICggZW1pdEV2ZW50cyApIHtcblx0XHRcdFx0dGhpcy5lbWl0KFwiaW5zZXJ0XCIsIHRoaXMsIGRhdGEpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRidWxrVXBkYXRlKGRhdGEsIGVtaXRFdmVudHMpIHtcblx0XHRpZiAoIGVtaXRFdmVudHMgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGVtaXRFdmVudHMgPSB0cnVlO1xuXHRcdH1cblx0XHRkYXRhLmZvckVhY2goZCA9PiB0aGlzLnVwZGF0ZShkLCBlbWl0RXZlbnRzKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRyZW1vdmUoZmlsdGVyKSB7XG5cdFx0dmFyIHJlbW92ZWQgPSBfLnJlbW92ZSh0aGlzLl9kYXRhLCBmaWx0ZXIpXG5cdFx0dGhpcy5lbWl0KFwicmVtb3ZlXCIsIHRoaXMsIHJlbW92ZWQpXG5cdFx0cmV0dXJuIHJlbW92ZWQ7XG5cdH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0RGF0YVN0b3JlOiBEYXRhU3RvcmVcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0TEVWRUw6IHtcblx0XHROT05FOiAwLFxuXHRcdExPRzogMSxcblx0XHRJTkZPOiAyLFxuXHRcdFdBUk46IDMsXG5cdFx0RVJST1I6IDQsXG5cdFx0REVCVUc6IDVcblx0fSxcblx0bGV2ZWw6IDAsXG5cdGdyb3VwOiBmdW5jdGlvbihsYWJlbCwgZm4pIHtcblx0XHR2YXIgdmFsID0gdW5kZWZpbmVkO1xuXHRcdGlmICggY29uc29sZS5ncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y29uc29sZS5ncm91cChsYWJlbCk7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWwgPSBmbigpO1xuXHRcdFx0fSBjYXRjaChleCkge1xuXHRcdFx0XHRtb2R1bGUuZXhwb3J0cy5lcnJvcihleCk7XG5cdFx0XHRcdGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0XHRcdFx0dGhyb3cgZXg7XG5cdFx0XHR9XG5cdFx0XHRjb25zb2xlLmdyb3VwRW5kKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRyeXtcblx0XHRcdFx0dmFsID0gZm4oKTtcblx0XHRcdH0gY2F0Y2goZXgpIHtcblx0XHRcdFx0bW9kdWxlLmV4cG9ydHMuZXJyb3IoZXgpO1xuXHRcdFx0XHRjb25zb2xlLmdyb3VwRW5kKCk7XG5cdFx0XHRcdHRocm93IGV4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH0sXG5cblx0bG9nOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIG1vZHVsZS5leHBvcnRzLmxldmVsID49IG1vZHVsZS5leHBvcnRzLkxFVkVMLkxPRyApIHtcblx0XHRcdGlmICggY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgQXJyYXkuZnJvbShhcmd1bWVudHMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0aW5mbzogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBtb2R1bGUuZXhwb3J0cy5sZXZlbCA+PSBtb2R1bGUuZXhwb3J0cy5MRVZFTC5JTkZPICApIHtcblx0XHRcdGlmICggY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0Y29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIEFycmF5LmZyb20oYXJndW1lbnRzKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIG1vZHVsZS5leHBvcnRzLmxldmVsID49IG1vZHVsZS5leHBvcnRzLkxFVkVMLkVSUk9SICApIHtcblx0XHRcdGlmICggY29uc29sZS5lcnJvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIEFycmF5LmZyb20oYXJndW1lbnRzKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHdhcm46IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggbW9kdWxlLmV4cG9ydHMubGV2ZWwgPj0gbW9kdWxlLmV4cG9ydHMuTEVWRUwuV0FSTiAgKSB7XG5cdFx0XHRpZiAoIGNvbnNvbGUud2FybiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgQXJyYXkuZnJvbShhcmd1bWVudHMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0ZGVidWc6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggbW9kdWxlLmV4cG9ydHMubGV2ZWwgPj0gbW9kdWxlLmV4cG9ydHMuTEVWRUwuREVCVUcgICkge1xuXHRcdFx0aWYgKCBjb25zb2xlLmRlYnVnICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGNvbnNvbGUuZGVidWcuYXBwbHkoY29uc29sZSwgQXJyYXkuZnJvbShhcmd1bWVudHMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0dGFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggbW9kdWxlLmV4cG9ydHMubGV2ZWwgPj0gbW9kdWxlLmV4cG9ydHMuTEVWRUwuREVCVUcgICkge1xuXHRcdFx0aWYgKCBjb25zb2xlLnRhYmxlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGNvbnNvbGUudGFibGUuYXBwbHkoY29uc29sZSwgQXJyYXkuZnJvbShhcmd1bWVudHMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbW9kdWxlIHV0aWxzXG4gKi9cblxuIGNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdCbHVlQmlyZCcpXG5jb25zdCB7aHRtbEVuY29kZSwgaHRtbERlY29kZSwgcXVlcnlFc2NhcGV9ID0gcmVxdWlyZSgnLi9odG1sJyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIyJykuRXZlbnRFbWl0dGVyMjtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xudmFyIF9yZXF1aXJlZCA9IHt9O1xuXG52YXIgeGhyTGliID0ge1xuXHRhamF4OiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0dmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdGRhdGEgPSB7XG5cdFx0XHRcdFx0dXJsOiBkYXRhXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZGF0YS50eXBlID0gXCJHRVRcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLm9ucHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIGRhdGEub25wcm9ncmVzcy5kaXNwZW5zZSA9PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0XHRcdGRhdGEub25wcm9ncmVzcyA9IGRhdGEub25wcm9ncmVzcy5kaXNwZW5zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHhoci5vcGVuKGRhdGEudHlwZSwgZGF0YS51cmwpO1xuXG5cdFx0XHRpZiAoIGRhdGEuaGVhZGVycyApIHtcblx0XHRcdFx0Zm9yKHZhciBrIGluIGRhdGEuaGVhZGVycykge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGssIGRhdGEuaGVhZGVyc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0eGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcblx0XHRcdFx0XHRcdHZhciByZXNwb25zZSA9IHhoci5yZXNwb25zZVRleHQ7XG5cdFx0XHRcdFx0XHRpZiAoIGRhdGEudHlwZSAmJiBkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PSAnanNvbicgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhLm9ucHJvZ3Jlc3MgJiYgZGF0YS5vbnByb2dyZXNzLmNvbnN0cnVjdG9yID09IFByb2dyZXNzICkge1xuXHRcdFx0XHRcdFx0XHRkYXRhLm9ucHJvZ3Jlc3Mub25kb25lKCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlc29sdmUoeyBib2R5OiByZXNwb25zZSwgeGhyOiB4aHJ9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoeyBzdGF0dXM6IHhoci5zdGF0dXMsIHhocjogeGhyfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXG5cdFx0XHR4aHIuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIGZ1bmN0aW9uKGV2dCkge1xuXHRcdFx0XHR2YXIgY29udGVudExlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGV2dC5sZW5ndGhDb21wdXRhYmxlICkge1xuXHRcdFx0XHRcdFx0Y29udGVudExlbmd0aCA9IGV2dC50b3RhbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250ZW50TGVuZ3RoID0gZXZ0LnRhcmdldC5nZXRSZXNwb25zZUhlYWRlcigneC1kZWNvbXByZXNzZWQtY29udGVudC1sZW5ndGgnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggIWNvbnRlbnRMZW5ndGggKSB7XG5cdFx0XHRcdFx0Y29udGVudExlbmd0aCA9IGV2dC5sb2FkZWQgKiAyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHBlcmNlbnRDb21wbGV0ZSA9IGV2dC5sb2FkZWQgLyBjb250ZW50TGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggZGF0YS5vbnByb2dyZXNzICkge1xuXHRcdFx0XHRcdGlmICggdHlwZW9mIGRhdGEub25wcm9ncmVzcy5vbnByb2dyZXNzID09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRcdFx0XHRkYXRhLm9ucHJvZ3Jlc3Mub25wcm9ncmVzcyhwZXJjZW50Q29tcGxldGUsIGV2dC5sb2FkZWQsIGNvbnRlbnRMZW5ndGgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGRhdGEub25wcm9ncmVzcyA9PSAnZnVuY3Rpb24nICl7XG5cdFx0XHRcdFx0XHRkYXRhLm9ucHJvZ3Jlc3MocGVyY2VudENvbXBsZXRlLCBldnQubG9hZGVkLCBjb250ZW50TGVuZ3RoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgZmFsc2UpO1xuXG5cdFx0XHRpZiAoIGRhdGEuZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR4aHIuc2VuZCgpO1xuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIGRhdGEuZGF0YSA9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHR4aHIuc2VuZChKU09OLnN0cmluZ2lmeShkYXRhLmRhdGEpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHhoci5zZW5kKGVuY29kZVVSSShkYXRhLmRhdGEpKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSlcblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0ge1xuXHRcdFx0XHR1cmw6IGRhdGFcblx0XHRcdH1cblx0XHR9XG5cblx0XHRkYXRhLnR5cGUgPSBcIkdFVFwiO1xuXHRcdHJldHVybiB4aHJMaWIuYWpheChkYXRhKTtcblx0fSxcblxuXHRwb3N0OiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHtcblx0XHRcdFx0dXJsOiBkYXRhXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggIWRhdGEuaGVhZGVycyApIHsgZGF0YS5oZWFkZXJzID0ge30gfVxuXHRcdGlmICggISgnQ29udGVudC1UeXBlJyBpbiBkYXRhLmhlYWRlcnMpICkge1xuXHRcdFx0ZGF0YS5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuXHRcdH1cblxuXHRcdGRhdGEudHlwZSA9IFwiUE9TVFwiO1xuXHRcdHJldHVybiB4aHJMaWIuYWpheChkYXRhKTtcblx0fVxuXG59XG5cbmNsYXNzIFByb2dyZXNzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblx0Y29uc3RydWN0b3IodHJhY2tlcikge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnRyYWNrZXIgPSB0cmFja2VyO1xuXHRcdHRoaXMubG9hZGVkID0gMDtcblx0XHR0aGlzLnRvdGFsID0gMDtcblx0XHR0aGlzLnBlcmNlbnQgPSAwO1xuXHR9XG5cblx0b25wcm9ncmVzcyhwZXJjZW50LCBsb2FkZWQsIHRvdGFsKSB7XG5cdFx0dGhpcy5wZXJjZW50ID0gcGVyY2VudDtcblx0XHR0aGlzLmxvYWRlZCA9IGxvYWRlZDtcblx0XHR0aGlzLnRvdGFsID0gdG90YWw7XG5cdFx0dGhpcy5lbWl0KFwicHJvZ3Jlc3NcIiwgdGhpcywgcGVyY2VudCwgbG9hZGVkLCB0b3RhbCk7XG5cdH1cblxuXHRvbmRvbmUoKSB7XG5cdFx0dGhpcy5wZXJjZW50ID0gMTtcblx0XHR0aGlzLmxvYWRlZCA9IHRoaXMudG90YWw7XG5cdFx0dGhpcy5lbWl0KFwiZG9uZVwiLCB0aGlzLCB0aGlzLnBlcmNlbnQsIHRoaXMubG9hZGVkLCB0aGlzLnRvdGFsKTtcblx0fVxufVxuXG5jbGFzcyBQcm9ncmVzc1RyYWNrZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcblx0XHR0aGlzLmlzRG9uZSA9IGZhbHNlO1xuXHR9XG5cblx0X29uQ2hpbGRQcm9ncmVzcygpIHtcblx0XHR2YXIgYXZlcmFnZUNvbXBsZXRlPTA7XG5cdFx0dmFyIGFsbFRvdGFsID0gMDtcblx0XHR2YXIgYWxsTG9hZGVkID0gMDtcblx0XHRmb3IodmFyIGk9MDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG5cdFx0XHRhdmVyYWdlQ29tcGxldGUgKz0gY2hpbGQucGVyY2VudDtcblx0XHRcdGFsbFRvdGFsID0gY2hpbGQudG90YWw7XG5cdFx0XHRhbGxMb2FkZWQgPSBjaGlsZC5sb2FkZWQ7XG5cdFx0fVxuXHRcdGF2ZXJhZ2VDb21wbGV0ZSAvPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcblxuXHRcdHRoaXMucGVyY2VudCA9IGF2ZXJhZ2VDb21wbGV0ZTtcblx0XHR0aGlzLmxvYWRlZCA9IGFsbExvYWRlZDtcblx0XHR0aGlzLnRvdGFsID0gYWxsVG90YWw7XG5cblx0XHR0aGlzLmVtaXQoXCJwcm9ncmVzc1wiLCB0aGlzLCB0aGlzLnBlcmNlbnQsIHRoaXMubG9hZGVkLCB0aGlzLnRvdGFsKTtcblxuXHRcdGlmICggdGhpcy5wZXJjZW50ID49IDEgKSB7XG5cdFx0XHR0aGlzLmlzRG9uZSA9IHRydWU7XG5cdFx0XHR0aGlzLmVtaXQoXCJkb25lXCIsIHRoaXMsIHRoaXMucGVyY2VudCwgdGhpcy5sb2FkZWQsIHRoaXMudG90YWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmlzRG9uZSA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdGRpc3BlbnNlKCkge1xuXHRcdHZhciBwID0gbmV3IFByb2dyZXNzKHRoaXMpO1xuXHRcdHRoaXMuY2hpbGRyZW4ucHVzaChwKTtcblx0XHRwLm9uKCdwcm9ncmVzcycsIHRoaXMuX29uQ2hpbGRQcm9ncmVzcy5iaW5kKHRoaXMpKTtcblx0XHRwLm9uKCdkb25lJywgdGhpcy5fb25DaGlsZFByb2dyZXNzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuaXNEb25lID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gcDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0eGhyOiB4aHJMaWIsXG5cblx0UHJvZ3Jlc3NUcmFja2VyOiBQcm9ncmVzc1RyYWNrZXIsXG5cblx0LyoqXG5cdCAqIExvdyBxdWFsaXR5IGd1aWQgdXNpbmcgTWF0aC5yYW5kb20uXG5cdCAqIE9ubHkgdXNlIGlmIHlvdSBhcmUgc3VyZSB5b3UgZG9uJ3QgbmVlZCBoaWdoIHF1YWxpdHkgcmFuZG9tbmVzc1xuXHQgKi9cblx0dXVpZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuXHRcdFx0dmFyIHIgPSBNYXRoLnJhbmRvbSgpKjE2fDAsIHYgPSBjID09ICd4JyA/IHIgOiAociYweDN8MHg4KTtcblx0XHRcdHJldHVybiB2LnRvU3RyaW5nKDE2KTtcblx0XHR9KTtcblx0fSxcblxuXHRzYXJnczogZnVuY3Rpb24oKSB7XG5cdFx0Ly8gdXNhZ2U6XG5cdFx0Ly8gICBzYXJncyhhcmd1bWVudHMsIHthcmc6ICdhcmcxJywgZGVmYXVsdDogZmFsc2V9LCB7YXJnOiAnYXJnMicsIHJlcXVpcmVkOiAxfSlcblx0XHR2YXIgYXJncyA9IGFyZ3VtZW50c1swXTtcblx0XHQvLyBjaGVjayBpZiB3ZSBoYXZlIGFuIGFyZ3VtZW50cyBvYmplY3QgYW5kIG1ha2UgaXQgYW4gYXJyYXlcblx0XHRpZiAoIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCggYXJncyApID09PSAnW29iamVjdCBBcmd1bWVudHNdJyApIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpXG5cdFx0fVxuXHRcdHZhciBvcHMgPSBBcnJheS5mcm9tKGFyZ3VtZW50cykuc3BsaWNlKDEpO1xuXHRcdHZhciByZXQgPSB7fTtcblx0XHRmb3IodmFyIGkgaW4gb3BzKSB7XG5cdFx0XHR2YXIgb3AgPSBvcHNbaV1cblx0XHRcdGxldCB2YWx1ZVxuXHRcdFx0aWYgKCBhcmdzLmNvbnN0cnVjdG9yID09PSBBcnJheSApIHtcblx0XHRcdFx0dmFsdWUgPSAoaSBpbiBhcmdzKT9hcmdzW2ldOm9wLmRlZmF1bHRcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlID0gKG9wLmFyZyBpbiBhcmdzKT9hcmdzW29wLmFyZ106b3AuZGVmYXVsdFxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhbGxvdyBtZXJnaW5nIG9iamVjdHNcblx0XHRcdGlmICggb3AubWVyZ2UgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHt9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YWx1ZSA9IE9iamVjdC5hc3NpZ24ob3AubWVyZ2UsIHZhbHVlKVxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0ZXN0IGlmIHdlIGhhdmUgYSB2YWx1ZSBhbmQgdGhyb3cgZXJyb3JzXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGlmICggb3AucmVxdWlyZWQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRsZXQgZXJyXG5cdFx0XHRcdFx0aWYgKCBvcC5yZXF1aXJlZCBpbnN0YW5jZW9mIFN0cmluZyApIHtcblx0XHRcdFx0XHRcdGVyciA9IG5ldyBFcnJvcihvcC5yZXF1aXJlZClcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBvcC5yZXF1aXJlZCBpbnN0YW5jZW9mIEVycm9yICkge1xuXHRcdFx0XHRcdFx0ZXJyID0gb3AucmVxdWlyZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVyciA9IG5ldyBFcnJvcihgQXJndW1lbnQgXCIke29wLmFyZ31cIiBpcyByZXF1aXJlZC5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCBtb2R1bGUuZXhwb3J0cy5zYXJncylcblx0XHRcdFx0XHR0aHJvdyBlcnJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXRbb3AuYXJnXSA9IHZhbHVlXG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cbiAgLyoqXG5cdCAqIEhlbHBlciB1dGlsaXR5IHRvIHdyYXAgYW4gZXhpc3RpbmcgZnVuY3Rpb24gd2l0aCBhIGJlZm9yZSBhbmQgYWZ0ZXIgZm4uXG5cdCAqIFRoZSBiZWZvcmUgZm4gdGFrZXMgdGhlIHNhbWUgYXJndW1lbnRzIGFzIGZuLlxuXHQgKiBUaGUgYWZ0ZXIgZm4gdGFrZXMgdGhlIGZuJ3MgcmVzdWx0IGFuZCBhcmd1bWVudHMoYXMgYW4gYXJyYXkpIGFuZCBNVVNUXG5cdCAqIHJldHVybiBhIHJlc3VsdCB2YWx1ZSB0byBvdmVycmlkZSB0aGUgZm4ncyBvd24gcmVzdWx0IHZhbHVlLlxuXHQgKi9cblx0d3JhcDogZnVuY3Rpb24oYmFzZSwgYmVmb3JlLCBmbiwgYWZ0ZXIpIHtcblx0XHRpZiAoICFmbiApIHtcblx0XHRcdGZuID0gZnVuY3Rpb24oKSB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGJlZm9yZSApIHtcblx0XHRcdFx0YmVmb3JlLmFwcGx5KGJhc2UsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciByZXN1bHQgPSBmbi5hcHBseShiYXNlLCBhcmd1bWVudHMpO1xuXG5cdFx0XHRpZiAoIGFmdGVyICkge1xuXHRcdFx0XHRyZXN1bHQgPSBhZnRlci5hcHBseShiYXNlLCByZXN1bHQsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cdH0sXG5cblx0cmVxdWlyZTogZnVuY3Rpb24odXJsKSB7XG5cdFx0dmFyIHJlcXVlc3REYXRhID0gbnVsbDtcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJlcXVlc3REYXRhID0gdXJsO1xuXHRcdFx0dXJsID0gcmVxdWVzdERhdGEudXJsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXF1ZXN0RGF0YSA9IHsgdXJsOiB1cmwgfTtcblx0XHR9XG5cblx0XHRpZiAoIHJlcXVlc3REYXRhLm5vY2FjaGUgKSB7XG5cdFx0XHRyZXF1ZXN0RGF0YS51cmwgKz0gXCI/X25vY2FjaGU9XCIgKyBNYXRoLmZsb29yKERhdGUubm93KCkpO1xuXHRcdFx0aWYgKCByZXF1ZXN0RGF0YS5oZWFkZXJzID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJlcXVlc3REYXRhLmhlYWRlcnMgPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0cmVxdWVzdERhdGEuaGVhZGVyc1tcIkNhY2hlLUNvbnRyb2xcIl0gPSBcIm5vLWNhY2hlXCI7XG5cdFx0fVxuXG5cdFx0aWYgKCB1cmwgaW4gX3JlcXVpcmVkICkge1xuXHRcdFx0cmV0dXJuIF9yZXF1aXJlZFt1cmxdO1xuXHRcdH1cblxuXHRcdF9yZXF1aXJlZFt1cmxdID0geGhyTGliLmdldChyZXF1ZXN0RGF0YSlcblx0XHRcdC50aGVuKChkYXRhKSA9PiB7XG5cdFx0XHRcdHZhciBlbCwgZXh0ID0gdXJsLnNwbGl0KCcuJykuc3BsaWNlKC0xKTtcblx0XHRcdFx0aWYgKCBleHQgPT0gXCJqc1wiICkge1xuXHRcdFx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGV4dCA9PSBcImNzc1wiICkge1xuXHRcdFx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0XHRcdFx0fSBlbHNlIGlmICggZXh0ID09IFwianNvblwiICkge1xuXHRcdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEuYm9keSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGVsICkge1xuXHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEuYm9keSkpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fSk7XG5cdFx0IHJldHVybiBfcmVxdWlyZWRbdXJsXTtcblx0fVxufVxuIiwiY29uc3QgZGVidWcgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5jb25zdCB7bG9nLCBlcnJvcn0gPSBkZWJ1ZztcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCB7c2FyZ3MsIHhociwgdXVpZH0gPSB1dGlscztcbmNvbnN0IHtGZWVkLCBQcm9kdWN0RmVlZCwgQ2FydEZlZWR9ID0gcmVxdWlyZSgnLi9mZWVkcycpO1xuY29uc3Qge0RhdGFTdG9yZX0gPSByZXF1aXJlKCcuL0RhdGFTdG9yZScpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRlbWl0dGVyMicpLkV2ZW50RW1pdHRlcjI7XG5jb25zdCBQcm9taXNlID0gcmVxdWlyZSgnQmx1ZUJpcmQnKVxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5cblxuLyoqXG4gKiBUaGUgYmFzZSBzdG9yZSBhZGFwdGVyIGNsYXNzLiBBbGwgYWRhcHRlcnMgYXJlIHJlcXVpcmVkIHRvIGV4dGVuZCBmcm9tIHRoaXMgY2xhc3MuXG4gKi9cbmNsYXNzIFN0b3JlQWRhcHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKClcblx0XHR0aGlzLl90b3RhbHMgPSB7XG5cdFx0XHRncmFuZF90b3RhbDogMFxuXHRcdH1cblx0XHR0aGlzLl9kaXNjb3VudHMgPSBudWxsO1xuXHR9XG5cblx0aW5pdCgpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0cmVzb2x2ZSh7ZGF0YTogW10sIHN1Y2Nlc3M6IHRydWV9KVxuXHRcdH0pXG5cdH1cblxuXHRnZXRUb3RhbHMoKSB7IHJldHVybiB0aGlzLl90b3RhbHM7IH1cblx0Z2V0RGlzY291bnRzKCkgeyByZXR1cm4gdGhpcy5fZGlzY291bnRzOyB9XG5cdGdldEN1cnJlbmN5KCkgeyByZXR1cm4gbnVsbDsgfVxuXHRnZXRDdXJyZW5jeVN5bWJvbCgpIHsgcmV0dXJuIG51bGw7IH1cblx0Zm9ybWF0Q3VycmVuY3koY3VycmVuY3kpIHsgcmV0dXJuIG51bGw7IH1cblx0Z2V0UHJvZHVjdEJ5U0tVKHNrdSwgZGV0YWlsZWQpIHsgcmV0dXJuIG51bGw7IH1cblxuXHQvKipcblx0ICogSW1wbGVtZW50cyBmZXRpbmcgcHJvZHVjdHMgZnJvbSBhIGJhY2tlbmQuXG5cdCAqL1xuXHRmZXRjaFByb2R1Y3RzKHRhZ3MsIHRlcm1zLCBzdGFydCwgbGltaXQpIHsgcmV0dXJuIG51bGw7IH1cblxuXHQvKipcblx0ICogSW1wbGVtZW50cyBzZXNzaW9uIGZldGNoaW5nIGZyb20gYSBiYWNrZW5kXG5cdCAqL1xuXHRmZXRjaENhcnRTZXNzaW9uKCkgeyByZXR1cm4gbnVsbDsgfVxuXHQvKipcblx0ICogU2Vzc2lvbiBhY3Rpb25zIHNlbnQgdG8gYSBiYWNrZW5kLlxuXHQgKiBFeHBlY3RlZCBhY3Rpb25zIGFyZTpcblx0ICogIC0gYWRkVG9DYXJ0XG5cdCAqICAtIHJlbW92ZUZyb21DYXJ0XG5cdCAqL1xuXHRzZXNzaW9uQWN0aW9uKGFjdGlvbiwgZGF0YSkgeyByZXR1cm4gbnVsbDsgfVxuXHQvKipcblx0ICogVGhpcyBpcyBhbiBvcHRpb25hbCBtZXRob2QgdG8gaW1wbGVtZW50IGpzIGJhc2VkIHRlbXBsYXRlcyBmcm9tIHlvdXIgb3duXG5cdCAqIGJhY2tlbmQuIFRoZSByZXR1cm5pbmcgdmFsdWUgc2hvdWxkIGJlIGEgQmx1ZUJpcmQgcHJvbWlzZS5cblx0ICovXG5cdGxvYWRUZW1wbGF0ZShuYW1lKSB7IHJldHVybiBudWxsOyB9XG5cdC8qKlxuXHQgKiBVc2VkIHdoZW4gdGhlIGNhcnQgbmVlZHMgdG8gYmUgdmFsaWRhdGUgYmVmb3JlIGNoZWNrb3V0LlxuXHQgKiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCBhcyBhbiBvcHBvcnR1bml0eSB0byBmdXJ0aGVyIG1vZGlmeSBjYXJ0IGRhdGEgYW5kXG5cdCAqIHN1Ym1pdCBjaGVja291dCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgb24gdmFsaWRhdGlvbi5cblx0ICogUmV0dXJuIG51bGwgb24gc3VjY2VzcyBvciBhbnkgb3RoZXIgb2JqZWN0IHdpdGggZXJyb3IgaW5mb3JtYXRpb24uXG5cdCAqL1xuXHR2YWxpZGF0ZSgpIHt9XG59XG5cbi8qKlxuICogQSBkZW1vIHN0b3JlIGFkYXB0ZXIgd2l0aCBoYXJkY29kZWQgcHJvZHVjdHMgdG8gZGVtb25zdHJhdGUgaG93IGFkYXB0ZXJzIHdvcmsuXG4gKi9cbmNsYXNzIERlbW9TdG9yZWFBZGFwdGVyIGV4dGVuZHMgU3RvcmVBZGFwdGVyIHtcblx0Y29uc3RydWN0b3IoY2F0YWxvZywgc2Vzc2lvbkhhbmRsZXIsIHNlc3Npb25BY3Rpb25IYW5kbGVyKSB7XG5cdFx0c3VwZXIoKVxuXHRcdHRoaXMuX3Byb2R1Y3RzID0gY2F0YWxvZyB8fCBbXVxuXHRcdHRoaXMuX3Nlc3Npb25IYW5kbGVyID0gc2Vzc2lvbkhhbmRsZXJcblx0XHR0aGlzLl9zZXNzaW9uQWN0aW9uSGFuZGxlciA9IHNlc3Npb25BY3Rpb25IYW5kbGVyXG5cdH1cblxuXHRpbml0KCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZiAoIHRoaXMuX3Byb2R1Y3RzLmxlbmd0aCA9PSAwICkge1xuXHRcdFx0XHRmb3IodmFyIGk9MTsgaSA8IDExOyBpKyspIHtcblx0XHRcdFx0XHR0aGlzLl9wcm9kdWN0cy5wdXNoKHtcblx0XHRcdFx0XHRcdHNrdTogYHNrdTAwJHtpfWAsXG5cdFx0XHRcdFx0XHRuYW1lOiBgRGVtbyBJdGVtICR7aX1gLFxuXHRcdFx0XHRcdFx0bWluOiAxLFxuXHRcdFx0XHRcdFx0aW1hZ2VVcmw6IGBodHRwOi8vcGxhY2Vob2xkLml0LzQwMHgyNTAvP3RleHQ0MDB4MjUwYCxcblx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBjb25ndWUsIGVyYXQgdmVsIG1vbGVzdGllIHBoYXJldHJhLCBlbmltIHJpc3VzIGV1aXNtb2QgbGliZXJvLCBldCBhbGlxdWV0IG5lcXVlIGxpYmVybyBhYyBkdWkuJyxcblx0XHRcdFx0XHRcdHByaWNlOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTApKzEwLFxuXHRcdFx0XHRcdFx0dGFnczogWydkZW1vJ11cblx0XHRcdFx0XHR9KVxuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmVzb2x2ZSh0aGlzLmZldGNoQ2FydFNlc3Npb24oKSlcblx0XHR9KVxuXHR9XG5cblx0Z2V0Q3VycmVuY3koKSB7IHJldHVybiBcIlVTRFwiOyB9XG5cblx0Z2V0Q3VycmVuY3lTeW1ib2woKSB7IHJldHVybiBcIiRcIjsgfVxuXG5cdGZvcm1hdEN1cnJlbmN5KGN1cnJlbmN5LCBkZWNpbWFscykgeyByZXR1cm4gYCQke2N1cnJlbmN5LnRvRml4ZWQoZGVjaW1hbHMpfWA7IH1cblxuXHRmZXRjaENhcnRTZXNzaW9uKCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZiAoIHRoaXMuX3Nlc3Npb25IYW5kbGVyICkge1xuXHRcdFx0XHR0aGlzLl9zZXNzaW9uSGFuZGxlcihyZXNvbHZlLCByZWplY3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzb2x2ZSh7ZGF0YTogW10sIHN1Y2Nlc3M6IHRydWV9KVxuXHRcdFx0fVxuXHRcdH0pXG5cdH1cblxuXHRzZXNzaW9uQWN0aW9uKGFjdGlvbiwgZGF0YSkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZiAoIHRoaXMuX3Nlc3Npb25BY3Rpb25IYW5kbGVyICkge1xuXHRcdFx0XHR0aGlzLl9zZXNzaW9uQWN0aW9uSGFuZGxlcihhY3Rpb24gLCBkYXRhLCByZXNvbHZlLCByZWplY3QpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXNvbHZlKHtkYXRhOiBudWxsLCBzdWNjZXNzOiB0cnVlfSlcblx0XHRcdH1cblx0XHR9KVxuXHR9XG5cblx0Z2V0UHJvZHVjdEJ5U0tVKHNrdSwgZGV0YWlsZWQpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHJlc3VsdCA9IHRoaXMuX3Byb2R1Y3RzLmZpbHRlcigocCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcC5za3UgPT0gc2t1O1xuXHRcdFx0fSlcblxuXHRcdFx0cmVzb2x2ZSgoIHJlc3VsdC5sZW5ndGggPiAwICk/cmVzdWx0WzBdOmZhbHNlKVxuXHRcdH0pXG5cdH1cblxuXHRmZXRjaFByb2R1Y3RzKCkge1xuXHRcdC8vdmFyIHRhZ3MsIHRlcm1zO1xuXHRcdC8vW3RhZ3MsIHRlcm1zXSA9IG9wdGlvbmFscyhhcmd1bWVudHMsIFtdKVxuXHRcdGxldCB7IHRhZ3M6IHRhZ3MsIHRlcm1zOiB0ZXJtcywgc3RhcnQ6IHN0YXJ0LCBsaW1pdDogbGltaXQgfSA9IHNhcmdzKGFyZ3VtZW50cyxcblx0XHRcdHsgYXJnOiAndGFncycsIGRlZmF1bHQ6IFtdIH0sXG5cdFx0XHR7IGFyZzogJ3Rlcm1zJ30sXG5cdFx0XHR7IGFyZzogJ3N0YXJ0JywgZGVmYXVsdDogMH0sXG5cdFx0XHR7IGFyZzogJ2xpbWl0JywgZGVmYXVsdDogOX1cblx0XHQpXG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0dmFyIHByb2R1Y3RzID0gW107XG5cdFx0XHQvL2Zvcih2YXIgaSBpbiB0aGlzLl9wcm9kdWN0cykge1xuXHRcdFx0Zm9yKHZhciBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGxpbWl0OyBpKyspIHtcblx0XHRcdFx0dmFyIHByb2QgPSB0aGlzLl9wcm9kdWN0c1tpXTtcblx0XHRcdFx0aWYgKCB0YWdzICkge1xuXHRcdFx0XHRcdGlmICggcHJvZC50YWdzLmV2ZXJ5KGZ1bmN0aW9uKGVsZW0pIHsgcmV0dXJuIHRhZ3MuaW5kZXhPZihlbGVtKSA+PSAtMTsgfSkgKSB7XG5cdFx0XHRcdFx0XHRwcm9kdWN0cy5wdXNoKHByb2QpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb2R1Y3RzLnB1c2gocHJvZClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVzb2x2ZShwcm9kdWN0cyk7XG5cdFx0fSkuYmluZCh0aGlzKSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFN0b3JlQWRhcHRlcjogU3RvcmVBZGFwdGVyLFxuXHREZW1vU3RvcmVhQWRhcHRlcjogRGVtb1N0b3JlYUFkYXB0ZXJcbn1cbiIsImNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuY29uc3Qge2xvZywgZXJyb3J9ID0gZGVidWc7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuY29uc3Qge3NhcmdzLCB4aHIsIHV1aWR9ID0gdXRpbHM7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIyJykuRXZlbnRFbWl0dGVyMjtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdCbHVlQmlyZCcpXG5jb25zdCB7RGF0YVN0b3JlfSA9IHJlcXVpcmUoJy4vRGF0YVN0b3JlJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJylcblxuY2xhc3MgRmVlZCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKClcblx0XHR2YXIgYXJncyA9IHNhcmdzKGFyZ3VtZW50cyxcblx0XHRcdHthcmc6ICdjYXJ0JywgcmVxdWlyZWQ6IDF9LFxuXHRcdFx0e2FyZzogJ25hbWUnLCByZXF1aXJlZDogMX0sXG5cdFx0XHR7YXJnOiAnb3B0aW9ucycsIGRlZmF1bHQ6IHt9fVxuXHRcdClcblxuXHRcdHRoaXMuY2FydCA9IGFyZ3MuY2FydFxuXHRcdHRoaXMubmFtZSA9IGFyZ3MubmFtZVxuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMgPSBzYXJncyhhcmdzLm9wdGlvbnMsXG5cdFx0XHRcdHsgYXJnOiAnZGF0YVNvdXJjZScsIHJlcXVpcmVkOiAxIH0sXG5cdFx0XHRcdHsgYXJnOiAnaWRGaWVsZCcsIGRlZmF1bHQ6ICdpZCcgfSxcblx0XHRcdFx0eyBhcmc6ICdjb250YWluZXInLCByZXF1aXJlZDogMSB9LFxuXHRcdFx0XHR7IGFyZzogJ3RwbCcsIHJlcXVpcmVkOiAxIH0sXG5cdFx0XHRcdHsgYXJnOiAnZmlsdGVycycsIGRlZmF1bHQ6IFtdfSxcblx0XHRcdFx0eyBhcmc6ICdzb3J0JywgZGVmYXVsdDogbnVsbCB9XG5cdFx0XHQpO1xuXHRcdH0gY2F0Y2goZXJyKSB7XG5cdFx0XHQvL0Vycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVyciwgRmVlZCk7XG5cdFx0XHR0aHJvdyBlcnJcblx0XHR9XG5cblx0XHR0aGlzLl93YWl0Rm9yID0gW11cblx0XHR0aGlzLl9mcmVlemVIZWlnaHQgPSAwO1xuXHRcdHRoaXMuX2xhc3RVbmZyZWV6ZSA9IG51bGw7XG5cblx0XHR0aGlzLmNhcnQub24oJ2luaXQnLCB0aGlzLm9uSW5pdC5iaW5kKHRoaXMpKVxuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5jb25zdHJ1Y3RvciA9PT0gRGF0YVN0b3JlICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLmRhdGFTb3VyY2Uub24oJ3VwZGF0ZWQnLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKVxuXHRcdH1cblx0fVxuXG5cdG9uSW5pdCgpIHtcblx0XHR0aGlzLnVwZGF0ZSgpXG5cdH1cblxuXHR1cGRhdGVXYWl0Rm9yKHBybSkge1xuXHRcdHRoaXMuX3dhaXRGb3IucHVzaChwcm0pXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cdFx0dGhpcy5lbWl0KCd1cGRhdGUnLCB0aGlzKVxuXG5cdFx0dmFyIGRhdGFTb3VyY2UgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZVxuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVNvdXJjZSAhPSAnZnVuY3Rpb24nICkge1xuXHRcdFx0Ly8gYXNzdW1lIHRoaXMgaXMgYSBEYXRhU3RvcmUgaW5zdGFuY2Vcblx0XHRcdC8vIFRPRE86IHJlcGxhY2UgdGhlIHVzZSBvZiBmdW5jdGlvbiBkYXRhIHNvdXJjZSBpbiBmYXZvclxuXHRcdFx0Ly8gICAgICAgb2YgdGhlIERhdGFTdG9yZSBjbGFzcyBpbnN0YW5jZVxuXHRcdFx0ZGF0YVNvdXJjZSA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLnF1ZXJ5LmJpbmQodGhpcy5vcHRpb25zLmRhdGFTb3VyY2UpO1xuXHRcdH1cblxuXHRcdGRhdGFTb3VyY2UodGhpcy5maWx0ZXJzKVxuXHRcdFx0LnRoZW4odGhpcy5vcHRpb25zLnRwbC5pc0Z1bGZpbGxlZFBhc3N0aHJvdWdoKCkpXG5cdFx0XHQudGhlbigocmVzdWx0KSA9PiB7XG5cdFx0XHRcdGlmICggdGhpcy5vcHRpb25zLnNvcnQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC5zb3J0KHRoaXMub3B0aW9ucy5zb3J0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKChyZXN1bHQpID0+IHtcblx0XHRcdFx0dGhpcy5pdGVtcyA9IFtdO1xuXG5cdFx0XHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XHRcdGZvcih2YXIgaSBpbiByZXN1bHQpIHtcblx0XHRcdFx0XHR0aGlzLml0ZW1zLnB1c2gocmVzdWx0W2ldKTtcblx0XHRcdFx0XHQvL3RoaXMuaXRlbXNbcmVzdWx0W2ldW3RoaXMub3B0aW9ucy5pZEZpZWxkXV0gPSByZXN1bHRbaV1cblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0XHRpdGVtczogdGhpcy5pdGVtcyxcblx0XHRcdFx0XHRpc19lbXB0eTogY291bnQgPT0gMFxuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBodG1sID0gdGhpcy5vcHRpb25zLnRwbC5iZWdpblJlbmRlcihvYmopXG5cdFx0XHRcdHRoaXMuZnJlZXplSGVpZ2h0KCk7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKVxuXHRcdFx0XHR0aGlzLmNvbnRhaW5lci5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpXG5cdFx0XHRcdHRoaXMuZW1pdCgndHBsLWluc2VydGVkJylcblxuXHRcdFx0XHR0aGlzLm9wdGlvbnMudHBsLm9uY2UoJ3RwbC1lbmQtcmVuZGVyJywgKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZW1pdCgndXBkYXRlZCcsIHRoaXMsIHRoaXMucHJvZHVjdHMpO1xuXHRcdFx0XHRcdHRoaXMudW5mcmVlemVIZWlnaHQoKTtcblx0XHRcdFx0fSlcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnRwbC5lbmRSZW5kZXIoKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0XHRkZWJ1Zy5lcnJvcihlcnIpXG5cdFx0XHRcdC8vVE9ETzogSGFuZGxlIGVycm9yc1xuXHRcdFx0fSk7XG5cdH1cblxuXHRnZXQgY29udGFpbmVyKCkge1xuXHRcdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5jb250YWluZXIpXG5cdH1cblxuXHRmcmVlemVIZWlnaHQoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2ZyZWV6ZUhlaWdodCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fZnJlZXplSGVpZ2h0ICs9IDE7XG5cdFx0dmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuXG5cdFx0aWYgKCAhY29udGFpbmVyICkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvbnRhaW5lciBmb3IgZmVlZCBcIicrdGhpcy5uYW1lKydcIicpXG5cdFx0fVxuXG5cdFx0dmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cdFx0Y29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGNvbnRhaW5lckhlaWdodCArIFwicHhcIjtcblx0fVxuXG5cdHVuZnJlZXplSGVpZ2h0KCkge1xuXHRcdGlmICggdGhpcy5fZnJlZXplSGVpZ2h0ID4gMSApIHtcblx0XHRcdHRoaXMuX2ZyZWV6ZUhlaWdodCAtPSAxO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9mcmVlemVIZWlnaHQgLT0gMTtcblx0XHRpZiAoIHRoaXMuX2ZyZWV6ZUhlaWdodCA8IDAgKSB7XG5cdFx0XHR0aGlzLl9mcmVlemVIZWlnaHQgPSAwO1xuXHRcdH1cblxuXHRcdHZhciBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcblxuXHRcdGlmICggIWNvbnRhaW5lciApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb250YWluZXIgZm9yIGZlZWQgXCInK3RoaXMubmFtZSsnXCInKVxuXHRcdH1cblxuXHRcdC8vIGVsZW1lbnRzIG5lZWQgdGltZSB0byByZXNpemUgYWZ0ZXIgcmVuZGVyaW5nKHNwZWNpYWxseSBpbWFnZXMpXG5cdFx0Ly8gYWxsb3cgYSAyMDBtcyBkZWxheSBiZWZvcmUgdW5mcmVlemluZyBjb250YWluZXIgaGVpZ2h0XG5cdFx0aWYgKCB0aGlzLl9sYXN0VW5mcmVlemUgKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5fbGFzdFVuZnJlZXplKTtcblx0XHR9XG5cdFx0dGhpcy5fbGFzdFVuZnJlZXplID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRjb250YWluZXIuc3R5bGUuaGVpZ2h0PVwiXCI7XG5cdFx0XHR0aGlzLl9sYXN0VW5mcmVlemUgPSBudWxsO1xuXHRcdH0sIDIwMCk7XG5cdH1cblxuXHRlbXB0eSgpIHtcblx0XHR2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG5cblx0XHRpZiAoICFjb250YWluZXIgKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29udGFpbmVyIGZvciBmZWVkIFwiJyt0aGlzLm5hbWUrJ1wiJylcblx0XHR9XG5cblx0XHR3aGlsZShjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG5cdFx0XHRjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmxhc3RDaGlsZCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEFycmF5LCBnZXRzIHRoZSBhY3RpdmUgZmlsdGVycyBmb3IgdGhpcyBmZWVkLlxuXHQgKiBAcmV0dXJuIEFycmF5XG5cdCAqL1xuXHRnZXQgZmlsdGVycygpIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmZpbHRlcnM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgYWN0aXZlIGZpbHRlcnMgZm9yIHRoaXMgZmVlZC4gVGhlIGZlZWQgaXMgaW1tZWRpYXRlbHlcblx0ICogcmVmcmVzaGVkIHdpdGggdGhpcyBwcm9wZXJ0eSBpcyBjaGFuZ2VkLlxuXHQgKiBAYXJnIGZpbHRlcnMgQXJyYXlcblx0ICovXG5cdHNldCBmaWx0ZXJzKGZpbHRlcnMpIHtcblx0XHR0aGlzLm9wdGlvbnMuZmlsdGVycyA9IGZpbHRlcnMgfHwgW107XG5cdFx0dGhpcy51cGRhdGUoKVxuXHR9XG5cbn1cblxuLyoqXG4gKiBQcm9kdWN0RmVlZCBtYW5hZ2VzIHVwZGF0aW5nIHByb2R1Y3QgbGlzdGluZyBlbGVtZW50cyBvbiB0aGUgbGl2ZSB3ZWJwYWdlLlxuICovXG5jbGFzcyBQcm9kdWN0RmVlZCBleHRlbmRzIEZlZWQge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBwcm9kdWN0IGZlZWRcblx0ICogQGFyZyBjYXJ0IHN0cmluZyAgICAgVGhlIEF3ZXNvbWVDYXJ0IGluc3RhbmNlXG5cdCAqIEBhcmcgbmFtZSBzdHJpbmcgICAgIFRoZSBmZWVkIG5hbWVcblx0ICogQGFyZyBvcHRpb25zIG9iamVjdCAgRmVlZCBvcHRpb25zXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciguLi5wYXJhbXMpIHtcblx0XHRzdXBlciguLi5wYXJhbXMpO1xuXHR9XG59XG5cbi8qKlxuICogQ2FydEZlZWQgbWFuYWdlcyB1cGRhdGluZyBjYXJ0IGxpc3RpbmcgZWxlbWVudHMgb24gdGhlIGxpdmUgd2VicGFnZS5cbiAqL1xuY2xhc3MgQ2FydEZlZWQgZXh0ZW5kcyBGZWVkIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgcHJvZHVjdCBmZWVkXG5cdCAqIEBhcmcgY2FydCBzdHJpbmcgICAgIFRoZSBBd2Vzb21lQ2FydCBpbnN0YW5jZVxuXHQgKiBAYXJnIG5hbWUgc3RyaW5nICAgICBUaGUgZmVlZCBuYW1lXG5cdCAqIEBhcmcgb3B0aW9ucyBvYmplY3QgIEZlZWQgb3B0aW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoLi4ucGFyYW1zKSB7XG5cdFx0c3VwZXIoLi4ucGFyYW1zKTtcblx0fVxuXG5cdG9uSW5pdCgpIHtcblx0XHRzdXBlci5vbkluaXQoKVxuXHRcdHRoaXMuY2FydC5vbigndXBkYXRlZCcsIHRoaXMudXBkYXRlLmJpbmQodGhpcykpXG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdEZlZWQ6IEZlZWQsXG5cdFByb2R1Y3RGZWVkOiBQcm9kdWN0RmVlZCxcblx0Q2FydEZlZWQ6IENhcnRGZWVkXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcblx0Y3VzdG9tRXJyb3I6IGZ1bmN0aW9uKG5hbWUsIGluaXRGbikge1xuXHRcdHZhciBlcnJDbHMgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYgKCBcImNhcHR1cmVTdGFja1RyYWNlXCIgaW4gRXJyb3IpIHtcblx0XHRcdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgZXJyQ2xzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuXHRcdFx0fVxuXG5cdFx0XHRpbml0Rm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHRlcnJDbHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuXHRcdGVyckNscy5wcm90b3R5cGUubmFtZSA9IG5hbWU7XG5cdFx0ZXJyQ2xzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGVyckNscztcblxuXHRcdHJldHVybiBlcnJDbHM7XG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbW9kdWxlIGh0bWxcbiAqL1xuXG4gLy8gaHRtbEVuY29kZS9kZWNvZGUgaXMgYmFzZWQgb24gbGVzc29ucyBsZWFybmVkIGZyb20gYW5ndWxhcmpzXG4gdmFyIGhpZGRlblByZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuIHZhciBTVVJST0dBVEVfUEFJUl9SRUdFWFAgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nLFxuICAgXHROT05fQUxQSEFOVU1FUklDX1JFR0VYUCA9IC8oW15cXCMtfnwgfCFdKS9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aHRtbEVuY29kZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlLlxuXHRcdFx0XHRyZXBsYWNlKC8mL2csICcmYW1wOycpLlxuXHRcdFx0XHRyZXBsYWNlKFNVUlJPR0FURV9QQUlSX1JFR0VYUCwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgaGkgPSB2YWx1ZS5jaGFyQ29kZUF0KDApO1xuXHRcdFx0XHRcdHZhciBsb3cgPSB2YWx1ZS5jaGFyQ29kZUF0KDEpO1xuXHRcdFx0XHRcdHJldHVybiAnJiMnICsgKCgoaGkgLSAweEQ4MDApICogMHg0MDApICsgKGxvdyAtIDB4REMwMCkgKyAweDEwMDAwKSArICc7Jztcblx0XHRcdFx0fSkuXG5cdFx0XHRcdHJlcGxhY2UoTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAsIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuICcmIycgKyB2YWx1ZS5jaGFyQ29kZUF0KDApICsgJzsnO1xuXHRcdFx0XHR9KS5cblx0XHRcdFx0cmVwbGFjZSgvPC9nLCAnJmx0OycpLlxuXHRcdFx0XHRyZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG5cdH0sXG5cdGh0bWxEZWNvZGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0dmFsdWUgPSBcIlwiO1xuXHRcdH1cblxuXHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSgvPC9nLFwiJmx0O1wiKTtcblx0XHRoaWRkZW5QcmUuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0dmFyIHJlc3VsdCA9IGhpZGRlblByZS50ZXh0Q29udGVudDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdHF1ZXJ5RXNjYXBlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmICghdmFsdWUpIHsgcmV0dXJuIFtdOyB9XG5cdFx0dmFyIHJlc3VsdCA9IHZhbHVlLnJlcGxhY2UoLyMoXFxkKS8sIFwiI1xcXFwzJDEgXCIpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbHMpIHtcbiAgICByZXR1cm4gKGAgJHtlbC5jbGFzc05hbWV9IGApLmluZGV4T2YoYCAke2Nsc30gYCkgPiAtMVxuICB9LFxuXG4gIGFkZENsYXNzOiBmdW5jdGlvbihlbCwgY2xzKSB7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICB9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbCwgY2xzKSB7XG5cdFx0ZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuXHR9LFxuXG4gIGhhc0F0dHI6IGZ1bmN0aW9uKGVsLCBhdHRyKSB7XG4gICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShhdHRyKVxuICB9LFxuXG4gIGdldEF0dHI6IGZ1bmN0aW9uKGVsLCBhdHRyKSB7XG4gICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzLmh0bWxEZWNvZGUoZWwuZ2V0QXR0cmlidXRlKGF0dHIpKTtcbiAgfSxcblxuICBzZXRBdHRyOiBmdW5jdGlvbihlbCwgYXR0ciwgdmFsdWUpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICB9LFxuXG5cdHF1ZXJ5QWxsOiBmdW5jdGlvbihxdWVyeSwgY29udGV4dCkge1xuXHRcdGlmICggY29udGV4dCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwobW9kdWxlLmV4cG9ydHMucXVlcnlFc2NhcGUocXVlcnkpKTtcblx0fSxcblxuXHRxdWVyeUZpcnN0OiBmdW5jdGlvbihxdWVyeSwgY29udGV4dCkge1xuXHRcdHZhciByZXN1bHQgPSBtb2R1bGUuZXhwb3J0cy5xdWVyeUFsbChxdWVyeSwgY29udGV4dCk7XG5cdFx0aWYgKCByZXN1bHQubGVuZ3RoID4gMCApIHtcblx0XHRcdHJldHVybiByZXN1bHRbMF07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBhd2NcbiAqL1xucmVxdWlyZShcImJhYmVsLXBvbHlmaWxsXCIpOyAvLyBwb2x5ZmlsbCBmb3IgYnJvd3NlcnMgbWlzc2luZyBmZWF0dXJlc1xuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5jb25zdCB7bG9nLCBlcnJvcn0gPSBkZWJ1ZztcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCB7c2FyZ3MsIHhociwgdXVpZCwgUHJvZ3Jlc3NUcmFja2VyfSA9IHV0aWxzO1xuY29uc3Qge2h0bWxFbmNvZGUsIGh0bWxEZWNvZGUsIHF1ZXJ5QWxsLCBoYXNDbGFzcywgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNBdHRyLCBzZXRBdHRyLCBnZXRBdHRyLCBxdWVyeUZpcnN0fSA9IHJlcXVpcmUoJy4vaHRtbCcpO1xuY29uc3QgRXJyb3JzTGliID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbmNvbnN0IFRlbXBsYXRpbmcgPSByZXF1aXJlKCcuL3RlbXBsYXRpbmcnKTtcbmNvbnN0IHtUZW1wbGF0ZX0gPSBUZW1wbGF0aW5nO1xuY29uc3Qge0ZlZWQsIFByb2R1Y3RGZWVkLCBDYXJ0RmVlZH0gPSByZXF1aXJlKCcuL2ZlZWRzJyk7XG5jb25zdCB7RGF0YVN0b3JlfSA9IHJlcXVpcmUoJy4vRGF0YVN0b3JlJyk7XG5jb25zdCB7U3RvcmVBZGFwdGVyLCBEZW1vU3RvcmVhQWRhcHRlcn0gPSByZXF1aXJlKCcuL2FkYXB0ZXJzJyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIyJykuRXZlbnRFbWl0dGVyMjtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdCbHVlQmlyZCcpXG4vL2NvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJylcbmNvbnN0IHF1ZXJ5U3RyaW5nID0gcmVxdWlyZSgncXVlcnktc3RyaW5nJylcblxuLy9jb25zdCB1dWlkID0gcmVxdWlyZSgnbm9kZS11dWlkJylcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG4vKipcbiAqIFRoZSBtYWluIGNhcnQgY2xhc3MuIEFsbCBtYW5hZ2luZyBvZiBzaG9wcGluZyBjYXJ0IGhhcHBlbnMgaGVyZS5cbiAqL1xuY2xhc3MgQXdlc29tZUNhcnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpXG5cdFx0dGhpcy5fY2FydCA9IG5ldyBEYXRhU3RvcmUoW10sIHRoaXMuX3F1ZXJ5Q2FydC5iaW5kKHRoaXMpLCB0aGlzLmZldGNoQ2FydEl0ZW1zLmJpbmQodGhpcykpXG5cdFx0dGhpcy5fbGFzdFRvdGFsQ291bnQgPSAwXG5cdFx0dGhpcy5fbGFzdFRvdGFsSXRlbXMgPSAwXG5cblx0XHRsZXQgeyBvcHRpb25zOiBvcHRpb25zIH0gPSBzYXJncyhhcmd1bWVudHMsIHsgYXJnOiAnb3B0aW9ucycsIGRlZmF1bHQ6IHt9fSlcblx0XHR0aGlzLm9wdGlvbnMgPSBzYXJncyhvcHRpb25zLFxuXHRcdFx0eyBhcmc6ICdzdG9yZUFkYXB0ZXInLCBkZWZhdWx0OiBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0X3N0b3JlX2FkYXB0ZXIgfHwgbmV3IERlbW9TdG9yZWFBZGFwdGVyKCksIHJlcXVpcmVkOiAxIH0sXG5cdFx0XHR7IGFyZzogJ2N1cnJlbmN5RGVjaW1hbHMnLCBkZWZhdWx0OiAyIH0sXG5cdFx0XHR7IGFyZzogJ2ZlZWRzJywgZGVmYXVsdDoge30gfSxcblx0XHRcdHsgYXJnOiAnc2Vzc2lvblN0b3JlVXJsJywgZGVmYXVsdDogZmFsc2UgfVxuXHRcdClcblxuXHRcdHRoaXMuc3RvcmVBZGFwdGVyID0gdGhpcy5vcHRpb25zLnN0b3JlQWRhcHRlcjtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIChlKSA9PiB7XG5cdFx0XHR0aGlzLmVtaXQoJ2hhc2hjaGFuZ2UnLCBlKVxuXHRcdH0pXG5cblx0XHR0aGlzLl9jYXJ0Lm9uKFwidXBkYXRlXCIsIHRoaXMuX29uQ2FydERhdGFVcGRhdGUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5fY2FydC5vbihcImluc2VydFwiLCB0aGlzLl9vbkNhcnREYXRhSW5zZXJ0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuX2NhcnQub24oXCJyZW1vdmVcIiwgdGhpcy5fb25DYXJ0RGF0YVJlbW92ZS5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHN0b3JlZCB0b3RhbHMuIFRoZXNlIHZhbHVlcyBzaG91bGQgYmUgc2V0IGFuZCBjYWxjdWxhdGVkIGJ5IHRoZSBzdG9yZSBhZGFwdGVyLlxuXHQgKi9cblx0Z2V0IHRvdGFscygpIHtcblx0XHRyZXR1cm4gdGhpcy5zdG9yZUFkYXB0ZXIuZ2V0VG90YWxzKCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBkaXNjb3VudHMgYXBwbGllZCB0byBwcm9kdWN0cyBieSBza3UuXG5cdCAqIFRoaXMgZGF0YSBpcyBpbmZvcm1hdGlvbmFsIGF0IGJlc3QsIG1lYXQgdG8gYmUgdXNlZCB0byBicmVhayBkb3duIGRpc2NvdW50c1xuXHQgKiBvbiB0aGUgY2FydCB0ZW1wbGF0ZXNcblx0ICovXG5cdGdldCBkaXNjb3VudHMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3RvcmVBZGFwdGVyLmdldERpc2NvdW50cygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdG90YWwgbGluZSBpdGVtcyBpbiB0aGUgY2FydC5cblx0ICogQHJldHVybiBpbnRcblx0ICovXG5cdGdldCB0b3RhbEl0ZW1zKCkge1xuXHRcdHJldHVybiB0aGlzLl9jYXJ0LmRhdGEubGVuZ3RoXG5cdH1cblxuXHRnZXQgbGFzdFRvdGFsSXRlbXMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2xhc3RUb3RhbEl0ZW1zXG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHN1bSBvZiBhbGwgcXR5IHZhbHVlcyBpbiBjYXJ0LlxuXHQqIEByZXR1cm4gaW50XG5cdCovXG5cdGdldCB0b3RhbENvdW50KCkge1xuXHRcdHZhciBjb3VudCA9IDA7XG5cdFx0Zm9yKHZhciBpIGluIHRoaXMuX2NhcnQuZGF0YSkge1xuXHRcdFx0dmFyIGNvbnNpZGVyID0gdHJ1ZTtcblxuXHRcdFx0Ly8gZG9uJ3QgY291bnQgc3ViIGl0ZW1zXG5cdFx0XHRpZiAoIHRoaXMuX2NhcnQuZGF0YVtpXS5vcHRpb25zICYmIHRoaXMuX2NhcnQuZGF0YVtpXS5vcHRpb25zLnN1Ymdyb3VwICkge1xuXHRcdFx0XHRjb25zaWRlciA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGNvbnNpZGVyICkge1xuXHRcdFx0XHRjb3VudCArPSB0aGlzLl9jYXJ0LmRhdGFbaV0ucXR5IHx8IDBcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY291bnRcblx0fVxuXG5cdGdldCBmZWVkKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuZmVlZHNcblx0fVxuXG5cdGdldCBsYXN0VG90YWxDb3VudCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fbGFzdFRvdGFsQ291bnRcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGxpbmUgaXRlbXMgaW4gdGhlIGNhcnQuXG5cdCAqIEByZXR1cm4gQXJyYXlcblx0ICovXG5cdGdldCBpdGVtcygpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2FydC5kYXRhXG5cdH1cblxuXHRfb25DYXJ0RGF0YVVwZGF0ZShzdG9yZSwgcm93KSB7XG5cdFx0ZGVidWcubG9nKFwiT24gY2FydCB1cGRhdGVcIiwgYXJndW1lbnRzKTtcblxuXHRcdHZhciBhbGxvd2VkRmllbGRzID0gW1wiaWRcIiwgXCJxdHlcIiwgXCJza3VcIl1cblx0XHR2YXIgcGF5bG9hZCA9IHt9O1xuXHRcdF8uZWFjaChhbGxvd2VkRmllbGRzLCAoZikgPT4ge1xuXHRcdFx0cGF5bG9hZFtmXSA9IHJvd1tmXTtcblx0XHR9KVxuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcmVBZGFwdGVyLnNlc3Npb25BY3Rpb24oJ3VwZGF0ZUl0ZW0nLCBbcGF5bG9hZF0pXG5cdFx0XHQudGhlbigocmVzdWx0KSA9PiB7XG5cdFx0XHRcdGlmICggcmVzdWx0LnNoaXBwaW5nX3JhdGVzICkge1xuXHRcdFx0XHRcdHZhciBoYXNoID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0LnNoaXBwaW5nX3JhdGVzKTtcblx0XHRcdFx0XHRpZiAoIHRoaXMuX3NoaXBwaW5nX3JhdGVzX2NhY2hlICE9IGhhc2ggKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zaGlwcGluZ19yYXRlc19jYWNoZSA9IGhhc2g7XG5cdFx0XHRcdFx0XHR0aGlzLmVtaXQoXCJzaGlwcGluZ19yYXRlc1wiLCByZXN1bHQuc2hpcHBpbmdfcmF0ZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuX3VwZGF0ZUJ1bGtDYXJ0RGF0YShyZXN1bHQpXG5cdFx0XHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5fZW1pdFVwZGF0ZWQoKTtcblx0XHRcdFx0XHR9KVxuXG5cdFx0XHR9KVxuXHR9XG5cblx0X29uQ2FydERhdGFJbnNlcnQoc3RvcmUsIHJvdykge1xuXHRcdGRlYnVnLmxvZyhcIk9uIGNhcnQgaW5zZXJ0XCIsIGFyZ3VtZW50cyk7XG5cdH1cblxuXHRfb25DYXJ0RGF0YVJlbW92ZShzdG9yZSwgcm93KSB7XG5cdFx0ZGVidWcubG9nKFwiT24gY2FydCByZW1vdmVcIiwgYXJndW1lbnRzKTtcblx0fVxuXG5cdF91cGRhdGVCdWxrQ2FydERhdGEoZGF0YSkge1xuXHRcdC8vIHdlIGV4cGVjdCBkYXRhIHRvIGxvb2sgbGlrZTpcblx0XHQvLyB7IGRhdGE6IFs8YXJyYXkgb2YgaXRlbXM+XSwgcmVtb3ZlZDogWzxhcnJheSBvZiByZW1vdmVkIGlkcz5dfVxuXHRcdHZhciBqb2JzID0gW11cblxuXHRcdHRoaXMuX2NhcnQuZXZlbnRzT2ZmKCk7XG5cblx0XHRpZiAoIGRhdGEucmVtb3ZlZCApIHtcblx0XHRcdHRoaXMuX2NhcnQucmVtb3ZlKChpdGVtKSA9PiB7XG5cdFx0XHRcdHJldHVybiBkYXRhLnJlbW92ZWQuaW5kZXhPZihpdGVtLmlkKSA+IC0xO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Xy5lYWNoKGRhdGEuZGF0YSwgKGl0bSkgPT4ge1xuXHRcdFx0Ly8gd3JhcCBwcm9taXNlIHNvIHdlIGFsd2F5cyByZXNvbHZlIGV2ZW4gb24gZXJyb3JzIHdoaWxlIGZldGNoaW5nXG5cdFx0XHQvLyBwcm9kdWN0IGRldGFpbHMgc28gdGhhdCB3ZSBkb24ndCBraWxsIHRoZSBzaG9wcGluZyBjYXJ0IHVpXG5cdFx0XHRqb2JzLnB1c2goKGZ1bmN0aW9uKGl0bSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuc3RvcmVBZGFwdGVyLmdldFByb2R1Y3RCeVNLVShpdG0uc2t1KVxuXHRcdFx0XHRcdFx0LnRoZW4oKHByb2R1Y3QpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKCBwcm9kdWN0ICkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBpdGVtID0ge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvZHVjdDogcHJvZHVjdCxcblx0XHRcdFx0XHRcdFx0XHRcdHF0eTogaXRtLnF0eSxcblx0XHRcdFx0XHRcdFx0XHRcdGlkOiBpdG0uaWQsXG5cdFx0XHRcdFx0XHRcdFx0XHR1bml0OiBpdG0udW5pdCxcblx0XHRcdFx0XHRcdFx0XHRcdGxvY2tfcXR5OiBpdG0ubG9ja19xdHk/MTowLFxuXHRcdFx0XHRcdFx0XHRcdFx0YmFzZV9wcmljZTogaXRtLmJhc2VfcHJpY2UsXG5cdFx0XHRcdFx0XHRcdFx0XHR0b3RhbDogaXRtLnRvdGFsXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICggaXRtLm9wdGlvbnMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtLm9wdGlvbnMgPSBpdG0ub3B0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyB1cGRhdGUgY2FydCBpdGVtIHdpdGggcHJvZHVjdCBkZXRhaWxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYXJ0LnVwZGF0ZShpdGVtKVxuXHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoaXRlbSlcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoZmFsc2UpO1xuXHRcdFx0XHRcdFx0fSkgLy8gZW9mIC0gZ2V0UHJvZHVjdEJ5U0tVLnRoZW5cblx0XHRcdFx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGRlYnVnLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcHJvZHVjdCBkZXRhaWxzIGR1cmluZyBjYXJ0IGl0ZW0gdXBkYXRlIGZvciBpdGVtXCIsIGl0bSlcblx0XHRcdFx0XHRcdFx0ZGVidWcuZXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShmYWxzZSlcblx0XHRcdFx0XHRcdH0pIC8vIGVvZiAtIGdldFByb2R1Y3RCeVNLVS5jYXRjaFxuXHRcdFx0XHRcdH0pIC8vIGVvZiAtIG5ldyBwcm9taXNlXG5cdFx0XHRcdH0pLmJpbmQodGhpcykoaXRtKSkgLy8gZW9mIC0gam9iLnB1c2hcblx0XHR9KTtcblxuXHRcdHJldHVybiBQcm9taXNlLmFsbChqb2JzKS50aGVuKCgpID0+IHtcblx0XHRcdHRoaXMuX2NhcnQuZXZlbnRzT24oKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pXG5cdFx0LmNhdGNoKChlcnIpID0+IHtcblx0XHRcdHRoaXMuX2NhcnQuZXZlbnRzT24oKTtcblx0XHRcdGRlYnVnLmVycm9yKFwiRXJyb3Igd2hpbGUgdXBkYXRpbmcgY2FydCBpdGVtc1wiKVxuXHRcdFx0ZGVidWcuZXJyb3IoZXJyKVxuXHRcdH0pXG5cdH1cblxuXHRmb3JtYXRDdXJyZW5jeShwcmljZSkge1xuXHRcdHJldHVybiB0aGlzLnN0b3JlQWRhcHRlci5mb3JtYXRDdXJyZW5jeShwcmljZSk7XG5cdH1cblxuXHR0ZW1wbGF0ZShuYW1lKSB7XG5cdFx0dmFyIHRwbCA9IHRoaXMuc3RvcmVBZGFwdGVyLmxvYWRUZW1wbGF0ZShuYW1lKVxuXHRcdGlmICggIXRwbCApIHtcblx0XHRcdHRwbCA9IG1vZHVsZS5leHBvcnRzLmxvYWRUZW1wbGF0ZShuYW1lKVxuXHRcdH0gaWYgKCB0cGwuY29uc3RydWN0b3IgPT0gVGVtcGxhdGUgKSB7XG5cdFx0XHRyZXR1cm4gdHBsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cGwgPSBtb2R1bGUuZXhwb3J0cy5sb2FkVGVtcGxhdGUodHBsKVxuXHRcdH1cblxuXHRcdHZhciB0cGxfaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGUodHBsLCB0aGlzKTtcblx0XHR0cGxfaW5zdGFuY2Uub24oJ3RwbC1lbmQtcmVuZGVyJywgdGhpcy5fb25fdHBsX2VuZF9yZW5kZXIuYmluZCh0aGlzKSk7XG5cblx0XHRyZXR1cm4gdHBsX2luc3RhbmNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBuZXcgbWFuYWdlZCBwcm9kdWN0IGZlZWQuIFByb2R1Y3QgZmVlZHMgYXV0b21hdGUgZmV0Y2hpbmcgYW5kIGRpc3BsYXlpbmdcblx0ICogcHJvZHVjdCBsaXN0aW5ncy5cblx0ICogQGFyZyBuYW1lIHN0cmluZyAgICAgVGhlIGZlZWQgbmFtZS5cblx0ICogQGFyZyBvcHRpb25zIG9iamVjdCAgQW4gb2JqZWN0IGRlZmluaW5nIHRoZSBmZWVkIHByb3BlcnRpZXMgYW5kIGJlaGF2aW91ci5cblx0ICovXG5cdG5ld1Byb2R1Y3RGZWVkKG5hbWUsIG9wdGlvbnMpIHtcblx0XHQvLyBzZXQgYSBmZXcgZGVmYXVsdHMgZm9yIHByb2R1Y3RzIG9ubHkgZmVlZFxuXG5cdFx0b3B0aW9ucyA9IHNhcmdzKG9wdGlvbnMsXG5cdFx0XHR7IGFyZzogJ2RhdGFTb3VyY2UnLCBkZWZhdWx0OiB0aGlzLnN0b3JlQWRhcHRlci5wcm9kdWN0cyB9LCAvLy5mZXRjaFByb2R1Y3RzLmJpbmQodGhpcy5zdG9yZUFkYXB0ZXIpIH0sXG5cdFx0XHR7IGFyZzogJ2lkRmllbGQnLCBkZWZhdWx0OiAnc2t1JyB9LFxuXHRcdFx0eyBhcmc6ICdmaWx0ZXJzJyB9LFxuXHRcdFx0eyBhcmc6ICdjb250YWluZXInIH0sXG5cdFx0XHR7IGFyZzogJ3RwbCcgfSxcblx0XHRcdHsgYXJnOiAnc29ydCcsIGRlZmF1bHQ6IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGIucHJpY2UgLSBhLnByaWNlOyB9IH1cblx0XHQpXG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMub3B0aW9ucy5mZWVkc1tuYW1lXSA9IG5ldyBQcm9kdWN0RmVlZCh0aGlzLCBuYW1lLCBvcHRpb25zKVxuXHRcdFx0dGhpcy5vcHRpb25zLmZlZWRzW25hbWVdLm9uKCd1cGRhdGVkJywgdGhpcy51cGRhdGVVSS5iaW5kKHRoaXMpKVxuXHRcdH0gY2F0Y2goZXJyKSB7XG5cdFx0XHQvLyBwYXNzIGVycm9yIHRvIHVzZXJcblx0XHRcdC8vRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCB0aGlzLm5ld1Byb2R1Y3RGZWVkKTtcblx0XHRcdHRocm93IGVyclxuXHRcdH1cblx0fVxuXG5cdG5ld0NhcnRGZWVkKG5hbWUsIG9wdGlvbnMpIHtcblx0XHRvcHRpb25zID0gc2FyZ3Mob3B0aW9ucyxcblx0XHRcdHsgYXJnOiAnZGF0YVNvdXJjZScsIGRlZmF1bHQ6IHRoaXMuX2NhcnQgfSxcblx0XHRcdHsgYXJnOiAnaWRGaWVsZCcsIGRlZmF1bHQ6ICdpZCcgfSxcblx0XHRcdHsgYXJnOiAnZmlsdGVycycgfSxcblx0XHRcdHsgYXJnOiAnY29udGFpbmVyJyB9LFxuXHRcdFx0eyBhcmc6ICd0cGwnIH1cblx0XHQpXG5cblx0XHR0aGlzLm9wdGlvbnMuZmVlZHNbbmFtZV0gPSBuZXcgQ2FydEZlZWQodGhpcywgbmFtZSwgb3B0aW9ucylcblx0XHR0aGlzLm9wdGlvbnMuZmVlZHNbbmFtZV0ub24oJ3VwZGF0ZWQnLCB0aGlzLnVwZGF0ZVVJLmJpbmQodGhpcykpXG5cdH1cblxuXHRfcXVlcnlDYXJ0KGZpbHRlcnMpIHtcblx0XHQvLyBkeW1teSBxdWVyeSBmbiBmb3Igbm93LCBuZWVkIHRvIGltcGxlbWVudCBmaWx0ZXJpbmdcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsgcmVzb2x2ZSh0aGlzLl9jYXJ0LmRhdGEpOyB9KVxuXHR9XG5cblx0ZmV0Y2hDYXJ0SXRlbXMoZmlsdGVycykge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHQvLyBidWlsZCBpdGVtIGxpc3QgY29uc2lkZXJpbmcgZ3JvdXBlZCBpdGVtc1xuXHRcdFx0dmFyIGNhcnRfaXRlbXMgPSBbXVxuXHRcdFx0dmFyIGdyb3VwZWRfaXRlbXMgPSB7fVxuXHRcdFx0Zm9yKHZhciBpIGluIHRoaXMuX2NhcnQuZGF0YSkge1xuXHRcdFx0XHR2YXIgaXRlbSA9IHRoaXMuX2NhcnQuZGF0YVtpXTtcblx0XHRcdFx0dmFyIGl0ZW1fdG1wID0ge1xuXHRcdFx0XHRcdGlkOiBpdGVtLmlkLFxuXHRcdFx0XHRcdHF0eTogaXRlbS5xdHksXG5cdFx0XHRcdFx0dW5pdDogaXRlbS51bml0LFxuXHRcdFx0XHRcdGJhc2VfcHJpY2U6IGl0ZW0uYmFzZV9wcmljZSxcblx0XHRcdFx0XHR0b3RhbDogaXRlbS50b3RhbCxcblx0XHRcdFx0XHRsb2NrX3F0eTogaXRlbS5sb2NrX3F0eT8xOjAsXG5cdFx0XHRcdFx0b3B0aW9uczogaXRlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHByb2R1Y3Q6IHtcblx0XHRcdFx0XHRcdG5hbWU6IGl0ZW0ucHJvZHVjdC5uYW1lLFxuXHRcdFx0XHRcdFx0c2t1OiBpdGVtLnByb2R1Y3Quc2t1LFxuXHRcdFx0XHRcdFx0aW1hZ2VVcmw6IGl0ZW0ucHJvZHVjdC5pbWFnZVVybFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3ViZ3JvdXBzOiBbXVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYWRkIGl0ZW0gYXMgbWFzdGVyIGl0ZW1cblx0XHRcdFx0aWYgKCBpdGVtLm9wdGlvbnMgJiYgaXRlbS5vcHRpb25zLmdyb3VwICYmICFpdGVtLm9wdGlvbnMuc3ViZ3JvdXAgKSB7XG5cdFx0XHRcdFx0Ly8gY29weSBhbnkgZ3JvdXBzIGNyZWF0ZWQgYmVmb3JlIHRoaXMgbWFzdGVyIGl0ZW0gd2FzIGZvdW5kXG5cdFx0XHRcdFx0dmFyIHN1Ymdyb3Vwc19saXN0ID0gbnVsbDtcblx0XHRcdFx0XHRpZiAoIGl0ZW0ub3B0aW9ucy5ncm91cCBpbiBncm91cGVkX2l0ZW1zICkge1xuXHRcdFx0XHRcdFx0c3ViZ3JvdXBzX2xpc3QgPSBncm91cGVkX2l0ZW1zW2l0ZW0ub3B0aW9ucy5ncm91cF0uc3ViZ3JvdXBzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGFzc2lnbiBtYXN0ZXIgaXRlbVxuXHRcdFx0XHRcdGdyb3VwZWRfaXRlbXNbaXRlbS5vcHRpb25zLmdyb3VwXSA9IGl0ZW1fdG1wO1xuXG5cdFx0XHRcdFx0Ly8gY29weSBncm91cHMgZm91bmQgYmVmb3JlIHRoaXMgbWFzdGVyIGl0ZW0gd2FzIGNyZWF0ZWRcblx0XHRcdFx0XHRpZiAoIHN1Ymdyb3Vwc19saXN0ICkge1xuXHRcdFx0XHRcdFx0aXRlbV90bXAuc3ViZ3JvdXBzID0gc3ViZ3JvdXBzX2xpc3Q7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYWRkIHN1Ymdyb3VwIGl0ZW1zIHRvIG1hc3RlciBpdGVtXG5cdFx0XHRcdGlmICggaXRlbS5vcHRpb25zICYmIGl0ZW0ub3B0aW9ucy5ncm91cCAmJiBpdGVtLm9wdGlvbnMuc3ViZ3JvdXAgKSB7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIHRoZSBtYXN0ZXIgaXRlbSBvYmplY3QgaWYgbm90IGZvdW5kXG5cdFx0XHRcdFx0aWYgKCAhKGl0ZW0ub3B0aW9ucy5ncm91cCBpbiBncm91cGVkX2l0ZW1zKSApIHtcblx0XHRcdFx0XHRcdGdyb3VwZWRfaXRlbXNbaXRlbS5vcHRpb25zLmdyb3VwXSA9IHsgc3ViZ3JvdXBzOiBbXSB9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gZmluZCBzdWJncm91cCBieSBuYW1lXG5cdFx0XHRcdFx0dmFyIHN1Ymdyb3VwID0gbnVsbDtcblx0XHRcdFx0XHRmb3IodmFyIGdpZHggaW4gZ3JvdXBlZF9pdGVtc1tpdGVtLm9wdGlvbnMuZ3JvdXBdLnN1Ymdyb3Vwcykge1xuXHRcdFx0XHRcdFx0aWYgKCBncm91cGVkX2l0ZW1zW2l0ZW0ub3B0aW9ucy5ncm91cF0uc3ViZ3JvdXBzW2dpZHhdLm5hbWUgPT0gaXRlbS5vcHRpb25zLnN1Ymdyb3VwICkge1xuXHRcdFx0XHRcdFx0XHRzdWJncm91cCA9IGdyb3VwZWRfaXRlbXNbaXRlbS5vcHRpb25zLmdyb3VwXS5zdWJncm91cHNbZ2lkeF07XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlmIG5vIHN1Ymdyb3VwIGlzIGZvdW5kIGNyZWF0ZSBpdFxuXHRcdFx0XHRcdGlmICggIXN1Ymdyb3VwICkge1xuXHRcdFx0XHRcdFx0c3ViZ3JvdXAgPSB7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGl0ZW0ub3B0aW9ucy5zdWJncm91cCxcblx0XHRcdFx0XHRcdFx0aXRlbXM6IFtdXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRncm91cGVkX2l0ZW1zW2l0ZW0ub3B0aW9ucy5ncm91cF0uc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGZpbmFseSBhZGQgc3ViZ3JvdXAgaXRlbSBpbnRvIG1hc3RlciBpdGVtXG5cdFx0XHRcdFx0c3ViZ3JvdXAuaXRlbXMucHVzaChpdGVtX3RtcCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjYXJ0X2l0ZW1zLnB1c2goaXRlbV90bXApXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmVzb2x2ZShjYXJ0X2l0ZW1zKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSlcblx0fVxuXG5cdF9vbkZyb21JZENoYW5nZShlbCwgYnRuLCBlKSB7XG5cdFx0c2V0QXR0cihidG4sICdkYXRhLWF3Yy1pZCcsIGVsLnZhbHVlKTtcblx0fVxuXG5cdF92YWxpZGF0ZUNoaWxkT3B0aW9ucyhkYXRhLCBvcHRpb25JZHgsIG9wdGlvbkhhc2gpIHtcblx0XHR2YXIgb3B0aW9uU2VsZWN0b3IgPSBkYXRhLnNlbGVjdG9yc1tvcHRpb25JZHggKyAxXTtcblx0XHRpZiAoICFvcHRpb25TZWxlY3RvciApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb3B0aW9uRWwgPSBxdWVyeUFsbChvcHRpb25TZWxlY3Rvcik7XG5cdFx0aWYgKCBvcHRpb25FbC5sZW5ndGggPiAwICkge1xuXHRcdFx0b3B0aW9uRWwgPSBvcHRpb25FbFswXTtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9wdGlvbkVsLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBvcEVsID0gb3B0aW9uRWwub3B0aW9uc1tpXVxuXHRcdFx0XHR2YXIgdmFsdWUgPSBodG1sRGVjb2RlKG9wRWwudmFsdWUpO1xuXHRcdFx0XHRvcHRpb25IYXNoW29wdGlvbklkeCArIDFdID0gdmFsdWU7XG5cblx0XHRcdFx0dmFyIGhhc2ggPSBvcHRpb25IYXNoLmpvaW4oJywnKVxuXHRcdFx0XHR2YXIgc2t1ID0gZGF0YS5oYXNoZXNbaGFzaF1cblx0XHRcdFx0aWYgKCBza3UgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHQvLyBvcHRpb24gaGFzaCBpcyBub3QgdmFsaWQuIFdlJ2xsIGRpc2FibGUgdGhpcyBvcHRpb247XG5cdFx0XHRcdFx0c2V0QXR0cihvcEVsLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIilcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcEVsLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0X29uT3B0aW9uRWxDaGFuZ2UoZWwsIGRhdGEsIGUpIHtcblx0XHQvLyBidWlsZCBoYXNoIGZyb20gc2VsZWN0b3JzIGluIHRoZSBvcmRlciBzcGVjaWZpZWRcblx0XHQvLyB0aGlzIGRvZXMgdHdvIHRoaW5nczpcblx0XHQvLyAtIEJ1aWxkcyBhIGhhc2ggaW5kZXggdG8gZmV0Y2ggdGhlIHNrdSBvZiB0aGUgc2VsY3RlZCBwcm9kdWN0XG5cdFx0Ly8gLSBCdWlsZHMgdGhlIGZpcnN0IGhhbGYgb2YgYSBzaW1pbGFyIGluZGV4IHRvIGxhdGVyIHRlc3QgYWxsIG90aGVyXG5cdFx0Ly8gICBvcHRpb25zIHRoYXQgY29tZSBhZnRlciB0byBlbmFibGUvZGlzc2FibGUgdmFsdWVzLlxuXG5cdFx0dmFyIG9wdGlvbkhhc2ggPSBbXTtcblx0XHR2YXIgc2VsZWN0b3JJZHggPSAtMTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5zZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzZWxlY3RvciA9IGRhdGEuc2VsZWN0b3JzW2ldO1xuXHRcdFx0dmFyIGVsZW1zID0gcXVlcnlBbGwoc2VsZWN0b3IpXG5cdFx0XHRpZiAoIGVsZW1zLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25FbCA9IGVsZW1zWzBdO1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBodG1sRGVjb2RlKG9wdGlvbkVsLnZhbHVlKTtcblx0XHRcdFx0aWYgKCBvcHRpb25FbCA9PSBlbCApIHtcblx0XHRcdFx0XHRzZWxlY3RvcklkeCA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3B0aW9uSGFzaC5wdXNoKHZhbHVlKVxuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgaGFzaCA9IG9wdGlvbkhhc2guam9pbignLCcpXG5cdFx0dmFyIHNrdSA9IGRhdGEuaGFzaGVzW2hhc2hdXG5cdFx0dmFyIHByaWNlX3NlbGVjdG9yID0gZGF0YS5wcmljZV9zZWxlY3RvclxuXHRcdC8vIHVwZGF0ZSBza3Ugb24gYWRkIHRvIGNhcnQgYnV0dG9uXG5cdFx0c2V0QXR0cihkYXRhLmJ0biwgJ2RhdGEtaWQnLCBza3UpXG5cblx0XHRpZiAoIHByaWNlX3NlbGVjdG9yICkge1xuXHRcdFx0dmFyIHByaWNlRWxzID0gcXVlcnlBbGwocHJpY2Vfc2VsZWN0b3IpO1xuXHRcdFx0aWYgKCBwcmljZUVscy5sZW5ndGggPiAwICkge1xuXHRcdFx0XHR2YXIgcHJpY2VFbCA9IHByaWNlRWxzWzBdO1xuXHRcdFx0XHR0aGlzLmdldFByb2R1Y3RCeVNLVShza3UpXG5cdFx0XHRcdFx0LnRoZW4oKHApID0+IHtcblx0XHRcdFx0XHRcdGRlYnVnLmxvZyhwKVxuXHRcdFx0XHRcdFx0cHJpY2VFbC50ZXh0Q29udGVudCA9IHRoaXMuc3RvcmVBZGFwdGVyLmZvcm1hdEN1cnJlbmN5KHAucHJpY2UpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHA7XG5cdFx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdHRoaXMuX3ZhbGlkYXRlQ2hpbGRPcHRpb25zKGRhdGEsIHNlbGVjdG9ySWR4LCBvcHRpb25IYXNoKTtcblx0XHRkYXRhLnZhbGlkYXRlKClcblxuXHR9XG5cblx0X29uQWRqdXN0UXR5Q2hhbmdlKGVsLCBvcHRpb25zLCBlKSB7XG5cdFx0dGhpcy5fY2FydC51cGRhdGUoeyBpZDogb3B0aW9ucy5pdGVtX2lkLCBxdHk6IHBhcnNlSW50KGVsLnZhbHVlKSB9KTtcblx0fVxuXG5cdF92YWxpZGF0ZUFkZFRvQ2FydEJ0bihidG4sIGJ0bl9vcHRpb25zKSB7XG5cblx0XHR2YXIgc2t1ID0gZ2V0QXR0cihidG4sICdkYXRhLWlkJyk7XG5cdFx0dmFyIHZhbGlkID0gdHJ1ZTtcblxuXHRcdGlmICggc2t1ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICggYnRuX29wdGlvbnMuY3VzdG9tX2ZpZWxkcyApIHtcblx0XHRcdGZvcih2YXIgaT0wOyBpIDwgYnRuX29wdGlvbnMuY3VzdG9tX2ZpZWxkcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgZmllbGQgPSBidG5fb3B0aW9ucy5jdXN0b21fZmllbGRzW2ldO1xuXHRcdFx0XHRpZiAoIGZpZWxkLnJlcXVpcmVkICkge1xuXHRcdFx0XHRcdHZhciBmaWVsZF92YWx1ZSA9IGZpZWxkLmVsLnZhbHVlO1xuXHRcdFx0XHRcdGlmICggIWZpZWxkX3ZhbHVlICkge1xuXHRcdFx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICF2YWxpZCApIHtcblx0XHRcdGFkZENsYXNzKGJ0biwgJ2Rpc2FibGVkJyk7XG5cdFx0XHRhZGRDbGFzcyhidG4sICdidG4tZGlzYWJsZWQnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlQ2xhc3MoYnRuLCAnZGlzYWJsZWQnKTtcblx0XHRcdHJlbW92ZUNsYXNzKGJ0biwgJ2J0bi1kaXNhYmxlZCcpO1xuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgY2xpY2sgZXZlbnQgcmVmZXJlbmNlcyBhbmQgb3ZlcmFsbCBVSSBoYW5kbGluZ1xuXHQgKi9cblx0dXBkYXRlVUkoKSB7XG5cdFx0dmFyIGJhc2UgPSB0aGlzO1xuXHRcdC8vIGRhdGEtYXdjLWFkZHRvY2FydCBtYWdpYyBhdHRyaWJ1dGVcblx0XHR2YXIgYWRkVG9DYXJ0RWxlbXMgPSBxdWVyeUFsbCgnW2RhdGEtYXdjLWFkZHRvY2FydF0nKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYWRkVG9DYXJ0RWxlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBidG4gPSBhZGRUb0NhcnRFbGVtc1tpXVxuXHRcdFx0aWYgKCAhaGFzQ2xhc3MoYnRuLCAnYXdjLWJvdW5kJykgKSB7XG5cdFx0XHRcdHZhciBidG5fb3B0aW9ucyA9IHt9O1xuXHRcdFx0XHRhZGRDbGFzcyhidG4sICdhd2MtYm91bmQnKVxuXG5cdFx0XHRcdHZhciB2YWxpZGF0ZV9idG4gPSB0aGlzLl92YWxpZGF0ZUFkZFRvQ2FydEJ0bi5iaW5kKHRoaXMsIGJ0biwgYnRuX29wdGlvbnMpO1xuXHRcdFx0XHRidG5fb3B0aW9ucy52YWxpZGF0ZSA9IHZhbGlkYXRlX2J0bjtcblxuXHRcdFx0XHQvLyB0cmFjayBpZCB2YWx1ZSBmcm9tIHNlbGVjdG9yIGFuZCB1cGRhdGUgdGhpcyBidG4gZGF0YS1hd2MtaWQgdmFsdWVcblx0XHRcdFx0Ly8gb24gY2hhbmdlc1xuXHRcdFx0XHRpZiAoIGhhc0F0dHIoYnRuLCAnZGF0YS1hd2MtaWQtZnJvbScpICkge1xuXHRcdFx0XHRcdHZhciBmcm9tU2VsZWN0b3IgPSBnZXRBdHRyKGJ0biwgJ2RhdGEtYXdjLWlkLWZyb20nKTtcblx0XHRcdFx0XHR2YXIgZnJvbUVsID0gcXVlcnlBbGwoZnJvbVNlbGVjdG9yKTtcblx0XHRcdFx0XHRpZiAoIGZyb21FbC5sZW5ndGggPiAwICkge1xuXHRcdFx0XHRcdFx0ZnJvbUVsID0gZnJvbUVsWzBdO1xuXHRcdFx0XHRcdFx0ZnJvbUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uRnJvbUlkQ2hhbmdlLmJpbmQodGhpcywgZnJvbUVsLCBidG4pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc0F0dHIoYnRuLCAnZGF0YS1hd2Mtb3B0aW9ucycpICkge1xuXHRcdFx0XHRcdHZhciBvcHRpb25EYXRhID0ge1xuXHRcdFx0XHRcdFx0cHJpY2Vfc2VsZWN0b3I6IGdldEF0dHIoYnRuLCAnZGF0YS1hd2MtcHJpY2Utc2VsZWN0b3InKSxcblx0XHRcdFx0XHRcdHNlbGVjdG9yczogZ2V0QXR0cihidG4sICdkYXRhLWF3Yy1vcHRpb25zLXNlbGVjdG9ycycpLnNwbGl0KCcsJykuZmlsdGVyKChuKSA9PiB7IHJldHVybiBuICE9IHVuZGVmaW5lZCAmJiBuICE9IFwiXCIgfSksXG5cdFx0XHRcdFx0XHRoYXNoZXM6IEpTT04ucGFyc2UoZ2V0QXR0cihidG4sICdkYXRhLWF3Yy1vcHRpb25zLWhhc2hlcycpKSxcblx0XHRcdFx0XHRcdGJ0bjogYnRuLFxuXHRcdFx0XHRcdFx0dmFsaWRhdGU6IHZhbGlkYXRlX2J0blxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBmaXJzdEVsID0gbnVsbDtcblx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb3B0aW9uRGF0YS5zZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHZhciBzZWxlY3RvciA9IG9wdGlvbkRhdGEuc2VsZWN0b3JzW2ldO1xuXG5cdFx0XHRcdFx0XHQvLyBmaW5kIHRoaXMgb3B0aW9uIGVsZW1lbnRcblx0XHRcdFx0XHRcdHZhciBlbGVtcyA9IHF1ZXJ5QWxsKHNlbGVjdG9yKVxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtcy5sZW5ndGggPiAwICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9uRWwgPSBlbGVtc1swXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJzdEVsID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Zmlyc3RFbCA9IG9wdGlvbkVsO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdG9wdGlvbkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uT3B0aW9uRWxDaGFuZ2UuYmluZCh0aGlzLCBvcHRpb25FbCwgb3B0aW9uRGF0YSkpXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRkZWJ1Zy5sb2coXCJDb3VsZCBub3QgYmluZCB0byB2YXJpYW50IHdpZGdldDogXCIsIHNlbGVjdG9yKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCB0byBtYWtlIHN1cmUgb3VyIHNrdSBpZHMgYXJlIHNldCBmb3IgZGVmYXVsdCBzZWxlY3Rpb25zXG5cdFx0XHRcdFx0dGhpcy5fb25PcHRpb25FbENoYW5nZS5iaW5kKHRoaXMsIGZpcnN0RWwsIG9wdGlvbkRhdGEpKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc0F0dHIoYnRuLCAnZGF0YS1hd2MtcXR5LWZyb20nKSApIHtcblx0XHRcdFx0XHQvLyBtYWtlcyBzdXJlIHRvIHZhbGlkYXRlIHF0eSBmaWVsZHNcblx0XHRcdFx0XHR2YXIgcXR5X2Zyb20gPSBidG4uZGF0YXNldC5hd2NRdHlGcm9tOyAvLyBkYXRhLWF3Yy1xdHktZnJvbVxuXHRcdFx0XHRcdHZhciBlbHMgPSBbXTtcblxuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlbHMgPSBxdWVyeUFsbChxdHlfZnJvbSlcblx0XHRcdFx0XHR9IGNhdGNoKGVycikge1xuXHRcdFx0XHRcdFx0ZGVidWcuZXJyb3IoZXJyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlbHMubGVuZ3RoID4gMCApIHtcblx0XHRcdFx0XHRcdGVsc1swXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBxdHkgPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSk7IC8vIGdldCBxdHkgZnJvbSByZWZlcmVuY2VkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBpc05hTihxdHkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHF0eSA9IDE7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZS50YXJnZXQudmFsdWUgPSBxdHk7XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGV4OiBkYXRhLWF3Yy1jdXN0b20tZmllbGRzPVwiI215ZmllbGRzLWNvbnRhaW5lclwiXG5cdFx0XHRcdGlmICggaGFzQXR0cihidG4sICdkYXRhLWF3Yy1jdXN0b20tZmllbGRzJykgKSB7XG5cdFx0XHRcdFx0dmFyIGZpZWxkcyA9IGJ0bi5kYXRhc2V0LmF3Y0N1c3RvbUZpZWxkcztcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0Ly8gZmluZCBhbGwgY3VzdG9tIGZpZWxkcyBpbnNpZGUgY29udGFpbmVyXG5cdFx0XHRcdFx0XHRlbHMgPSBxdWVyeUFsbChmaWVsZHMrXCIgW2RhdGEtYXdjLWN1c3RvbS1maWVsZF1cIik7XG5cdFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcblx0XHRcdFx0XHRcdGRlYnVnLmVycm9yKGVycik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBlbHMubGVuZ3RoID4gMCApIHtcblx0XHRcdFx0XHRcdHZhciBjdXN0b21fZmllbGRzID0gW11cblx0XHRcdFx0XHRcdGZvcih2YXIgaT0wOyBpIDwgZWxzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGN1c3RvbV9maWVsZHMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0ZmllbGRfbmFtZTogZWxzW2ldLmRhdGFzZXQuYXdjQ3VzdG9tRmllbGQsXG5cdFx0XHRcdFx0XHRcdFx0cmVxdWlyZWQ6IGVsc1tpXS5kYXRhc2V0LmF3Y1JlcXVpcmVkID09ICd5ZXMnLFxuXHRcdFx0XHRcdFx0XHRcdGVsOiBlbHNbaV1cblx0XHRcdFx0XHRcdFx0fSlcblxuXHRcdFx0XHRcdFx0XHRlbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB2YWxpZGF0ZV9idG4pO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRidG5fb3B0aW9uc1tcImN1c3RvbV9maWVsZHNcIl0gPSBjdXN0b21fZmllbGRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQWRkVG9DYXJ0Q2xpY2suYmluZCh0aGlzLCBidG5fb3B0aW9ucykpO1xuXG5cdFx0XHRcdHZhbGlkYXRlX2J0bigpXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBkYXRhLWF3Yy1yZW1vdmVmcm9tY2FydCBtYWdpYyBhdHRyaWJ1dGVcblx0XHR2YXIgcmVtb3ZlRnJvbUNhcnRFbGVtcyA9IHF1ZXJ5QWxsKCdbZGF0YS1hd2MtcmVtb3ZlZnJvbWNhcnRdJyk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHJlbW92ZUZyb21DYXJ0RWxlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBidG4gPSByZW1vdmVGcm9tQ2FydEVsZW1zW2ldXG5cdFx0XHRpZiAoICFoYXNDbGFzcyhidG4sICdhd2MtYm91bmQnKSApIHtcblx0XHRcdFx0YnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25SZW1vdmVGcm9tQ2FydENsaWNrLmJpbmQodGhpcykpXG5cdFx0XHRcdGFkZENsYXNzKGJ0biwgJ2F3Yy1ib3VuZCcpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gZGF0YS1hd2MtYWRqdXN0cXR5IG1hZ2ljIGF0dHJpYnV0ZVxuXHRcdHZhciBhZGp1c3RRdHlFbGVtcyA9IHF1ZXJ5QWxsKCdbZGF0YS1hd2MtYWRqdXN0cXR5XScpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBhZGp1c3RRdHlFbGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGVsID0gYWRqdXN0UXR5RWxlbXNbaV1cblxuXHRcdFx0aWYgKCAhaGFzQ2xhc3MoZWwsICdhd2MtYm91bmQnKSApIHtcblxuXHRcdFx0XHR2YXIgb3B0aW9ucyA9IHtcblx0XHRcdFx0XHRpdGVtX2lkOiBlbC5kYXRhc2V0LmF3Y0lkIHx8IGVsLmRhdGFzZXQuaWRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggb3B0aW9ucy5pdGVtX2lkID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0ZGVidWcud2FybihcImRhdGEtYXdjLWFkanVzdHF0eSByZXF1aXJlcyB0byBiZSBwYWlyZWQgd2l0aCBkYXRhLWF3Yy1pZCBvciBkYXRhLWlkIHRvIGZ1bmN0aW9uXCIsIGVsKVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0b3B0aW9ucy5pdGVtX2lkID0gaHRtbERlY29kZShvcHRpb25zLml0ZW1faWQpO1xuXHRcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLl9vbkFkanVzdFF0eUNoYW5nZS5iaW5kKHRoaXMsIGVsLCBvcHRpb25zKSlcblx0XHRcdFx0YWRkQ2xhc3MoZWwsICdhd2MtYm91bmQnKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIGV4OiBkYXRhLWF3Yy1jb3Vwb24tYXBwbHk9XCIjYXdjX2NvdXBvblwiXG5cdFx0cXVlcnlBbGwoJ1tkYXRhLWF3Yy1jb3Vwb24tYXBwbHldJylcblx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uKGVsLCBpKSB7XG5cdFx0XHRcdGlmICggIWhhc0NsYXNzKGVsLCBcImF3Yy1ib3VuZFwiKSApIHtcblx0XHRcdFx0XHRhZGRDbGFzcyhlbCwgXCJhd2MtYm91bmRcIik7XG5cdFx0XHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdHZhciBpbnB1dCA9IHF1ZXJ5Rmlyc3QoZS50YXJnZXQuZGF0YXNldC5hd2NDb3Vwb25BcHBseSk7XG5cdFx0XHRcdFx0XHRpZiAoIGlucHV0ICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgY291cG9uID0gaW5wdXQudmFsdWU7XG5cdFx0XHRcdFx0XHRcdGJhc2UuYXBwbHlDb3Vwb24oY291cG9uKVxuXHRcdFx0XHRcdFx0XHRcdC50aGVuKChyKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGUudGFyZ2V0LmRhdGFzZXQuYXdjT25TdWNjZXNzICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb25TdWNjZXNzRm5TdHIgPSBlLnRhcmdldC5kYXRhc2V0LmF3Y09uU3VjY2Vzcy5zcGxpdCgnLicpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgZm4gPSB3aW5kb3c7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25TdWNjZXNzRm5TdHIuZm9yRWFjaCgocCwgaSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPSBmbltwXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmbihyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2goZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWJ1Zy5lcnJvcihleCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYmFzZS5fdXBkYXRlQnVsa0NhcnREYXRhKHIpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LnRoZW4oKCkgPT4gcik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdFx0LnRoZW4oKHIpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGJhc2UuX2VtaXRVcGRhdGVkKClcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdFx0LmNhdGNoKChlcnIpID0+e1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBlLnRhcmdldC5kYXRhc2V0LmF3Y09uUmVqZWN0ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb25SZWplY3RGblN0ciA9IGUudGFyZ2V0LmRhdGFzZXQuYXdjT25SZWplY3Quc3BsaXQoJy4nKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGZuID0gd2luZG93O1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0Rm5TdHIuZm9yRWFjaCgocCwgaSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPSBmbltwXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmbihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaChleCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlYnVnLmVycm9yKGV4KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0cXVlcnlBbGwoJ1tkYXRhLWF3Yy1jb3Vwb24tcmVtb3ZlXScpXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbihlbCwgaSkge1xuXHRcdFx0XHRpZiAoICFoYXNDbGFzcyhlbCwgXCJhd2MtYm91bmRcIikgKSB7XG5cdFx0XHRcdFx0YWRkQ2xhc3MoZWwsIFwiYXdjLWJvdW5kXCIpO1xuXHRcdFx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0XHRiYXNlLnJlbW92ZUNvdXBvbigpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHR9XG5cblx0X29uQWRkVG9DYXJ0Q2xpY2soYnRuX29wdGlvbnMsIGUpIHtcblxuXHRcdGJ0bl9vcHRpb25zLnZhbGlkYXRlKGUpO1xuXG5cdFx0dmFyIGJ0biA9IGUudGFyZ2V0O1xuXHRcdHZhciBza3UgPSBodG1sRGVjb2RlKGJ0bi5kYXRhc2V0LmlkKTtcblx0XHR2YXIgcXR5ID0gYnRuLmRhdGFzZXQucXR5IHx8IGJ0bi5kYXRhc2V0LmF3Y1F0eSB8fCB1bmRlZmluZWQ7XG5cblx0XHRpZiAoIHF0eSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFyIHF0eV9mcm9tID0gYnRuLmRhdGFzZXQuYXdjUXR5RnJvbTsgLy8gZGF0YS1hd2MtcXR5LWZyb21cblx0XHRcdHZhciBlbHMgPSBbXTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZWxzID0gcXVlcnlBbGwocXR5X2Zyb20pXG5cdFx0XHR9IGNhdGNoKGVycikge1xuXHRcdFx0XHRkZWJ1Zy5lcnJvcihlcnIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVscy5sZW5ndGggPiAwICkge1xuXHRcdFx0XHRxdHkgPSBwYXJzZUludChlbHNbMF0udmFsdWUpOyAvLyBnZXQgcXR5IGZyb20gcmVmZXJlbmNlZCBlbGVtZW50XG5cdFx0XHRcdGlmICggaXNOYU4ocXR5KSApIHtcblx0XHRcdFx0XHRxdHkgPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc1swXS52YWx1ZSA9IHF0eTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlYnVnLndhcm4oXCJDb3VsZCBub3QgZ2V0IHF0eSBmcm9tIFwiLCBxdHlfZnJvbSk7XG5cdFx0XHRcdHF0eSA9IDE7IC8vIGRlZmF1bHQgdG8gMVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBvcHRpb25zID0gYnRuLmRhdGFzZXQuYXdjT3B0aW9ucztcblxuXHRcdGlmICggaGFzQ2xhc3MoYnRuLCAnZGlzYWJsZWQnKSApIHtcblx0XHRcdC8vIGlnbm9yZSBjbGlja3Mgb24gZGlzYWJsZWQgYnV0dG9uc1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucyAmJiBvcHRpb25zIGluc3RhbmNlb2YgU3RyaW5nICkge1xuXHRcdFx0b3B0aW9ucyA9IHF1ZXJ5U3RyaW5nLnBhcnNlKG9wdGlvbnMpXG5cdFx0fVxuXG5cblx0XHRpZiAoIGJ0bl9vcHRpb25zLmN1c3RvbV9maWVsZHMgKSB7XG5cdFx0XHRpZiAoICFvcHRpb25zICkge1xuXHRcdFx0XHRvcHRpb25zID0geyB9O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFvcHRpb25zLmN1c3RvbSApIHtcblx0XHRcdFx0b3B0aW9uc1tcImN1c3RvbVwiXSA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IodmFyIGk9MDsgaSA8IGJ0bl9vcHRpb25zLmN1c3RvbV9maWVsZHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGZpZWxkID0gYnRuX29wdGlvbnMuY3VzdG9tX2ZpZWxkc1tpXTtcblx0XHRcdFx0dmFyIGZpZWxkX3ZhbHVlID0gZmllbGQuZWwudmFsdWU7XG5cdFx0XHRcdG9wdGlvbnMuY3VzdG9tW2ZpZWxkLmZpZWxkX25hbWVdID0gZmllbGRfdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5hZGRUb0NhcnQoc2t1LCBxdHksIG9wdGlvbnMpXG5cdH1cblxuXHRfb25SZW1vdmVGcm9tQ2FydENsaWNrKGUpIHtcblx0XHR2YXIgYnRuID0gZS50YXJnZXQ7XG5cdFx0dmFyIGlkID0gYnRuLmRhdGFzZXQuaWQ7XG5cdFx0dGhpcy5yZW1vdmVGcm9tQ2FydChpZClcblx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdGRlYnVnLmRlYnVnKGJ0biwgaWQsIGJ0bi5kYXRhc2V0KVxuXHRcdFx0XHRkZWJ1Zy5lcnJvcihlcnIpXG5cdFx0XHR9KTtcblx0fVxuXG5cdHZhbGlkYXRlKCkge1xuXHRcdHRoaXMuc3RvcmVBZGFwdGVyLnZhbGlkYXRlLmFwcGx5KHRoaXMuc3RvcmVBZGFwdGVyLCBhcmd1bWVudHMpO1xuXHR9XG5cblx0YWRqdXN0UXR5KGlkLCBxdHkpIHtcblx0XHR0aGlzLl9jYXJ0LnVwZGF0ZSh7IGlkOiBpZCwgcXR5OiBxdHl9KVxuXHR9XG5cblx0YXBwbHlDb3Vwb24oY291cG9uKSB7XG5cdFx0dGhpcy5jb3Vwb25fY29kZSA9IGNvdXBvbjtcblx0XHRyZXR1cm4gdGhpcy5zdG9yZUFkYXB0ZXIuc2Vzc2lvbkFjdGlvbihcImFwcGx5Q291cG9uXCIsIFtjb3Vwb25dKVxuXHRcdFx0LnRoZW4oKHIpID0+IHtcblx0XHRcdFx0dGhpcy5fZW1pdFVwZGF0ZWQoKTtcblx0XHRcdFx0dGhpcy5lbWl0KFwiY291cG9uLWFwcGxpZWRcIik7XG5cdFx0XHRcdHJldHVybiByO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRyZW1vdmVDb3Vwb24oKSB7XG5cdFx0dGhpcy5jb3Vwb25fY29kZSA9IG51bGw7XG5cdFx0Y29uc3QgYmFzZSA9IHRoaXM7XG5cdFx0cmV0dXJuIHRoaXMuc3RvcmVBZGFwdGVyLnNlc3Npb25BY3Rpb24oXCJyZW1vdmVDb3Vwb25cIiwgW10pXG5cdFx0XHQudGhlbigocmVzcCkgPT4ge1xuXHRcdFx0XHRpZiAoIHJlc3AucmVtb3ZlZCApIHtcblx0XHRcdFx0XHRiYXNlLl9jYXJ0LnJlbW92ZSgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3AucmVtb3ZlZC5pbmRleE9mKGl0ZW0uaWQpID4gLTE7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX2VtaXRVcGRhdGVkKCk7XG5cdFx0XHRcdHRoaXMuZW1pdChcImNvdXBvbi1yZW1vdmVkXCIpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBwcm9kdWN0IHRvIHRoZSBjYXJ0IGJ5IGl0cyBza3UgYW5kIHF0eSBhbW91bnQuXG5cdCAqIEBwYXJhbSBza3Ugc3RyaW5nICAgICAgVGhlIHByb2R1Y3Qgc2t1IHRvIHRyYWNrIGluIHRoZSBjYXJ0LlxuXHQgKiBAcGFyYW0gcXR5IGludCAgICAgICAgIFRoZSBwcm9kdWN0IHF0eSB0byBhZGQgdG8gY2FydC5cblx0ICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0ICBDdXN0b21pemF0aW9uIG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHByb2R1Y3Rcblx0ICogQHBhcmFtIHJlcGxhY2VzIHN0cmluZyBUaGUgY2FydCBpZCBvZiBhIHByb2R1Y3QgdG8gcmVwbGFjZVxuXHQgKi9cblx0YWRkVG9DYXJ0KCkge1xuXHRcdHZhciBiYXNlID0gdGhpcztcblx0XHQvLyBjaGVjayBpZiBwYXNzaW5nIGFuIGFycmF5IGZpcnN0XG5cdFx0dmFyIGluX2FyZ3MgPSBbXTtcblx0XHRpZiAoIGFyZ3VtZW50c1swXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgKSB7XG5cdFx0XHRpbl9hcmdzID0gYXJndW1lbnRzWzBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbl9hcmdzID0gW0FycmF5LmZyb20oYXJndW1lbnRzKV07XG5cdFx0fVxuXG5cdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0dmFyIHBheWxvYWQgPSBbXTtcblx0XHR2YXIgaXRlbXNfYWRkZWQgPSBbXTtcblx0XHR2YXIgZ2V0X3NrdV9wcm9taXNlcyA9IFtdO1xuXHRcdGZvcih2YXIgaW5fYXJnc19pZHggaW4gaW5fYXJncykge1xuXHRcdFx0dmFyIGFyZ19pdGVtID0gaW5fYXJnc1tpbl9hcmdzX2lkeF07XG5cblx0XHRcdHZhciBhcmdzID0gc2FyZ3MoYXJnX2l0ZW0sXG5cdFx0XHRcdHsgYXJnOiAnc2t1JywgcmVxdWlyZWQ6IDEgfSxcblx0XHRcdFx0eyBhcmc6ICdxdHknLCBkZWZhdWx0OiAxIH0sXG5cdFx0XHRcdHsgYXJnOiAnb3B0aW9ucycsIGRlZmF1bHQ6IHt9IH0sXG5cdFx0XHRcdHsgYXJnOiAncmVwbGFjZXMnLCBkZWZhdWx0OiAnJyB9XG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBpc29sYXRlIHRvIGtlZXAgcmVmZXJlbmNlcyBmcm9tIG1lc3Npbmcgd2l0aCBlYWNoIG90aGVyXG5cdFx0XHQoZnVuY3Rpb24oYXJncywgZ2V0X3NrdV9wcm9taXNlcykge1xuXHRcdFx0XHQvLyBmZXRjaCBhbGwgcHJvZHVjdHMgaW5mbyBiZWZvcmUgc2VuZGluZyB0byBhZGFwdGVyXG5cdFx0XHRcdGdldF9za3VfcHJvbWlzZXMucHVzaChiYXNlLnN0b3JlQWRhcHRlci5nZXRQcm9kdWN0QnlTS1UoYXJncy5za3UpXG5cdFx0XHRcdFx0LnRoZW4oKHByb2R1Y3QpID0+IHtcblx0XHRcdFx0XHRcdGlmICggcHJvZHVjdCApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgaXRlbTtcblxuXHRcdFx0XHRcdFx0XHRpdGVtcy5wdXNoKGl0ZW0gPSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvZHVjdDogcHJvZHVjdCxcblx0XHRcdFx0XHRcdFx0XHRxdHk6IGFyZ3MucXR5LFxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnM6IGFyZ3Mub3B0aW9ucyxcblx0XHRcdFx0XHRcdFx0XHRpZDogdXVpZCgpLFxuXHRcdFx0XHRcdFx0XHRcdHVuaXQ6IHByb2R1Y3QucHJpY2UsXG5cdFx0XHRcdFx0XHRcdFx0YmFzZV9wcmljZTogcHJvZHVjdC5iYXNlX3ByaWNlLFxuXHRcdFx0XHRcdFx0XHRcdHRvdGFsOiBwcm9kdWN0LnByaWNlICogYXJncy5xdHlcblx0XHRcdFx0XHRcdFx0fSlcblxuXHRcdFx0XHRcdFx0XHRwYXlsb2FkLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRcdGlkOiBpdGVtLmlkLFxuXHRcdFx0XHRcdFx0XHRcdHF0eTogaXRlbS5xdHksXG5cdFx0XHRcdFx0XHRcdFx0c2t1OiBpdGVtLnByb2R1Y3Quc2t1LFxuXHRcdFx0XHRcdFx0XHRcdHJlcGxhY2VzOiBhcmdzLnJlcGxhY2VzLFxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnM6IGl0ZW0ub3B0aW9ucyB8fCB7fVxuXHRcdFx0XHRcdFx0XHR9KVxuXG5cdFx0XHRcdFx0XHRcdGJhc2UuX2NhcnQuZGF0YS5wdXNoKGl0ZW0pXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHR9KGFyZ3MsIGdldF9za3VfcHJvbWlzZXMpKTtcblxuXHRcdH1cblxuXHRcdC8vIHdhaXQgZm9yIGFsbCBza3UgcHJvbWlzZXMgdG8gcmVzb2x2ZVxuXHRcdHJldHVybiBQcm9taXNlLmpvaW4uYXBwbHkoUHJvbWlzZSwgZ2V0X3NrdV9wcm9taXNlcylcblx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0Ly8gbm93IHNlbmQgYnVsayBhY3Rpb25cblx0XHRcdFx0cmV0dXJuIHRoaXMuc3RvcmVBZGFwdGVyLnNlc3Npb25BY3Rpb24oJ2FkZFRvQ2FydCcsIHBheWxvYWQpXG5cdFx0XHRcdFx0LnRoZW4oKHJlc3ApID0+IHtcblx0XHRcdFx0XHRcdGZvcih2YXIgaSBpbiByZXNwLmRhdGEpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHJlc3BfaXRlbSA9IHJlc3AuZGF0YVtpXTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgaXRtID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0aXRtID0gYmFzZS5fY2FydC5maW5kKHsgaWQ6IHJlc3BfaXRlbS5vbGRfaWQgfSlcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGl0bSApIHtcblx0XHRcdFx0XHRcdFx0XHRpdG0uaWQgPSByZXNwX2l0ZW0uaWQ7XG5cdFx0XHRcdFx0XHRcdFx0aXRtLnF0eSA9IHJlc3BfaXRlbS5xdHk7XG5cdFx0XHRcdFx0XHRcdFx0aXRtLnNrdSA9IHJlc3BfaXRlbS5za3U7XG5cdFx0XHRcdFx0XHRcdFx0aXRtLmxvY2tfcXR5ID0gcmVzcF9pdGVtLmxvY2tfcXR5PzE6MDtcblx0XHRcdFx0XHRcdFx0XHRpdG0ub3B0aW9ucyA9IHJlc3BfaXRlbS5vcHRpb25zO1xuXHRcdFx0XHRcdFx0XHRcdGl0bS51bml0ID0gcmVzcF9pdGVtLnVuaXQ7XG5cdFx0XHRcdFx0XHRcdFx0aXRtLmJhc2VfcHJpY2UgPSByZXNwX2l0ZW0uYmFzZV9wcmljZTtcblx0XHRcdFx0XHRcdFx0XHRpdG0udG90YWwgPSByZXNwX2l0ZW0udG90YWw7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoIHJlc3AucmVtb3ZlZCApIHtcblx0XHRcdFx0XHRcdFx0YmFzZS5fY2FydC5yZW1vdmUoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcC5yZW1vdmVkLmluZGV4T2YoaXRlbS5pZCkgPiAtMTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXNwXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0XHRcdFx0ZGVidWcuZXJyb3IoXCJFcnJvciBhZGRpbmcgaXRlbXMgdG8gY2FydFwiLCBlcnIpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9lbWl0VXBkYXRlZCgpXG5cdFx0XHRcdGRlYnVnLnRhYmxlKHRoaXMuX2NhcnQuZGF0YSk7XG5cdFx0XHRcdHRoaXMuZW1pdChcImFkZC10by1jYXJ0LWNvbXBsZXRlZFwiKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdFx0fSlcblx0fVxuXG5cdHJlbW92ZUZyb21DYXJ0KGlkKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGlmICggIWlkICkge1xuXHRcdFx0XHRyZWplY3QoXCJJbnZhbGlkIGlkXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fY2FydC5yZW1vdmUoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5pZCA9PSBpZDtcblx0XHRcdFx0fSlcblxuXHRcdFx0XHRkZWJ1Zy5pbmZvKFwiU2VuZGluZyByZW1vdmVGcm9tQ2FydCByZXF1ZXN0XCIpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5zdG9yZUFkYXB0ZXIuc2Vzc2lvbkFjdGlvbihcblx0XHRcdFx0XHQncmVtb3ZlRnJvbUNhcnQnLFxuXHRcdFx0XHRcdHsgaWQ6IGlkIH1cblx0XHRcdFx0KS50aGVuKChyZXNwKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fY2FydC5yZW1vdmUoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiByZXNwLnJlbW92ZWQuaW5kZXhPZihpdGVtLmlkKSA+IC0xO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGRlYnVnLmluZm8oXCJTZXJ2ZXIgcmV0dXJuZWQgc3VjY2Vzc1wiKTtcblx0XHRcdFx0XHR0aGlzLl9lbWl0VXBkYXRlZCgpO1xuXHRcdFx0XHRcdGRlYnVnLnRhYmxlKHRoaXMuX2NhcnQuZGF0YSk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0pLmNhdGNoKChlcnIpID0+IHtcblx0XHRcdFx0XHRkZWJ1Zy5lcnJvcihlcnIpO1xuXHRcdFx0XHR9KVxuXG5cdFx0XHR9XG5cdFx0fSlcblx0fVxuXG5cdGNhbGN1bGF0ZV9zaGlwcGluZyhyYXRlX25hbWUsIGFkZHJlc3MpIHtcblx0XHQvLyBUT0RPOiBEZXByZWNhdGUgdGhpcyBtZXRob2QgZm9yIGNhbWVsIGNhc2UgdmVyc2lvblxuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcmVBZGFwdGVyLnNlc3Npb25BY3Rpb24oXCJjYWxjdWxhdGVfc2hpcHBpbmdcIiwgeyBuYW1lOiByYXRlX25hbWUsIGFkZHJlc3M6IGFkZHJlc3MgfSlcblx0XHQudGhlbigoZGF0YSkgPT4ge1xuXHRcdFx0dmFyIGhhc2ggPSBKU09OLnN0cmluZ2lmeShkYXRhLnNoaXBwaW5nX3JhdGVzKTtcblx0XHRcdHRoaXMuZW1pdChcInNoaXBwaW5nX3JhdGVzXCIsIGRhdGEuc2hpcHBpbmdfcmF0ZXMsIGRhdGEpO1xuXG5cdFx0XHR0aGlzLl9lbWl0VXBkYXRlZCgpXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9KVxuXHR9XG5cblx0Y2FsY3VsYXRlU2hpcHBpbmcocmF0ZV9uYW1lLCBhZGRyZXNzKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsY3VsYXRlX3NoaXBwaW5nKHJhdGVfbmFtZSwgYWRkcmVzcyk7XG5cdH1cblxuXHRnZXRQcm9kdWN0QnlTS1Uoc2t1LCBkZXRhaWxlZCkge1xuXHRcdHJldHVybiB0aGlzLnN0b3JlQWRhcHRlci5nZXRQcm9kdWN0QnlTS1Uoc2t1LCBkZXRhaWxlZClcblx0fVxuXG5cdGFwcGx5VHBsKHNlbGVjdG9yLCB0cGwsIGRhdGEpIHtcblx0XHRyZXR1cm4gdHBsLnByb21pc2VSZWFkeSgpXG5cdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0dmFyIHdhaXQgPSBbXVxuXHRcdFx0dmFyIGV2ID0gbmV3IEV2ZW50RW1pdHRlcih7fSk7XG5cdFx0XHR2YXIgaHRtbCA9IHRwbC5iZWdpblJlbmRlcihkYXRhKVxuXHRcdFx0dmFyIGNvbnRhaW5lciA9ICh0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycpP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOnNlbGVjdG9yO1xuXHRcdFx0Y29udGFpbmVyLmlubmVySFRNTCA9IGh0bWxcblx0XHRcdHRoaXMuZW1pdCgndHBsLWluc2VydGVkJyk7XG5cblx0XHRcdC8vIFRPRE86IHRoaXMgc2hvdWRsIGJlIGRlcHJlY2F0ZWQgb25jZSBuZXcgVGVtcGxhdGUgY2xhc3MgaXMgaW50ZWdyYXRlZFxuXHRcdFx0Ly8gICAgICAgUmVtZW1iZXIgdG8gcmVtb3ZlLlxuXHRcdFx0Ly90cGwub25jZSgndHBsLWVuZC1yZW5kZXInLCAoKSA9PiB7XG5cdFx0XHQvLyAgdGhpcy5lbWl0KCd0cGwtcmVhZHknKVxuXHRcdFx0Ly99KVxuXG5cdFx0XHRyZXR1cm4gdHBsLmVuZFJlbmRlcigpXG5cdFx0fSlcblxuXHR9XG5cblx0X29uX3RwbF9lbmRfcmVuZGVyKCkge1xuXHRcdC8vIGNhbGxlZCBvbiBhbGwgdGVtcGxhdGVzIGJvdW5kIHRvIHRoaXMgY2FydFxuXHRcdHRoaXMuZW1pdCgndHBsLXJlYWR5Jyk7XG5cdH1cblxuXHRfZW1pdFVwZGF0ZWQoKSB7XG5cdFx0dGhpcy5lbWl0KCd1cGRhdGVkJylcblx0XHR0aGlzLl9sYXN0VG90YWxJdGVtcyA9IHRoaXMudG90YWxJdGVtc1xuXHRcdHRoaXMuX2xhc3RUb3RhbENvdW50ID0gdGhpcy50b3RhbENvdW50XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIHF0eSBvZiBza3VzIGluIHRoZSBjYXJ0XG5cdCAqIEBwYXJhbSBza3Ugc3RyaW5nICBUaGUgcHJvZHVjdCBza3UgdG8gcmVtb3ZlIGluIHRoZSBjYXJ0LlxuXHQgKiBAcGFyYW0gcXR5IGludCAgICAgVGhlIHByb2R1Y3QgcXR5IHRvIHJlbW92ZSB0byBjYXJ0LlxuXHQgKi9cblx0cmVtb3ZlRnJvbUNhcnRCeVNLVShza3UsIHF0eSkge1xuXHRcdHZhciBhcmdzID0gc2FyZ3MoYXJndW1lbnRzLFxuXHRcdFx0eyBhcmc6ICdza3UnLCByZXF1aXJlZDogMSB9LFxuXHRcdFx0eyBhcmc6ICdxdHknLCBkZWZhdWx0OiAxIH1cblx0XHQpXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogS2lja3N0YXJ0cyB0aGUgY2FydCBsb2dpYy4gVGhpcyBjYXVzZXMgc2Vzc2lvbiBkYXRhIHRvIGJlIGRvd25sb2FkZWQgd2hpbGVcblx0ICogdGhlIGNhcnQgaXMgcG9wdWxhdGVkIGZyb20gYSBwYXN0IHNlc3Npb24uIEFsc28gZmVlZHMgYXJlIGluaXRpYWxpemVkIGhlcmVcblx0ICogdG8gc3RhcnQgY29uc3VtaW5nIHByb2R1Y3QgbGlzdGluZyBhbmQgY2FydCBkYXRhLlxuXHQgKi9cblx0Ym9vdHN0cmFwKCkge1xuXHRcdC8vIGluaXRpbGl6ZSBzdG9yZSBhZGFwdGVyXG5cdFx0cmV0dXJuIHRoaXMuc3RvcmVBZGFwdGVyLmluaXQoKVxuXHRcdFx0LnRoZW4oKHJlc3ApID0+IHtcblx0XHRcdFx0aWYgKCByZXNwLnN1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fdXBkYXRlQnVsa0NhcnREYXRhKHsgZGF0YTogcmVzcC5kYXRhLml0ZW1zfSlcblx0XHRcdFx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbWl0KCdpbml0Jyk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2VtaXRVcGRhdGVkKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fSlcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSkgLyogZW9mIHRoaXMuc3RvcmVBZGFwdGVyLmluaXQoKS50aGVuKCkgKi9cblx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdGRlYnVnLmVycm9yKFwiQ291bGQgbm90IGluaXRpYWxpemUgU3RvcmUgQWRhcHRlciFcIilcblx0XHRcdFx0ZGVidWcuZXJyb3IoZXJyKVxuXHRcdFx0fSkgLyogZW9mIHRoaXMuc3RvcmVBZGFwdGVyLmluaXQoKS5jYXRjaCgpICovXG5cblx0fSAvKiBlb2YgYm9vdHN0cmFwKCkgKi9cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0ZGVidWc6IGRlYnVnLFxuXHRBd2Vzb21lQ2FydDogQXdlc29tZUNhcnQsXG5cdERlbW9TdG9yZWFBZGFwdGVyOiBEZW1vU3RvcmVhQWRhcHRlcixcblx0U3RvcmVBZGFwdGVyOiBTdG9yZUFkYXB0ZXIsXG5cdERhdGFTdG9yZTogRGF0YVN0b3JlLFxuXHRQcm9ncmVzc1RyYWNrZXI6IFByb2dyZXNzVHJhY2tlcixcblx0dXRpbHM6IHV0aWxzLFxuXHRsb2FkVGVtcGxhdGU6IGZ1bmN0aW9uKHVybCkge1xuXHRcdGlmICggdHlwZW9mIHVybCA9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHhoci5nZXQodXJsKS50aGVuKChyZXNwKSA9PiB7XG5cdFx0XHRcdC8vIGNvbXBpbGUgdGVtcGxhdGUgYW5kIHJldHVyblxuXHRcdFx0XHRyZXR1cm4gVGVtcGxhdGluZy5IYW5kbGViYXJzLmNvbXBpbGUocmVzcC5ib2R5KVxuXHRcdFx0fSlcblx0XHR9IGlmICggdXJsLmNvbnRydWN0b3IgPT0gVGVtcGxhdGUgKSB7XG5cdFx0XHR1cmwgPSB1cmwucmVzb3VyY2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybC50aGVuKChyZXNwKSA9PiB7XG5cdFx0XHRpZiAoIHR5cGVvZiByZXNwID09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJldHVybiBUZW1wbGF0aW5nLkhhbmRsZWJhcnMuY29tcGlsZShyZXNwKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHJlc3Bcblx0XHRcdH1cblx0XHR9KVxuXG5cdH0sXG5cdHBhcnNlSGFzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFyZ3MgPSB7fSxcblx0XHRcdFx0cGFpciA9IG51bGwsXG5cdFx0XHRcdHBhcnRzID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJykpLnRyaW0oKS5zcGxpdCgnJicpXG5cdFx0Zm9yKHZhciBpIGluIHBhcnRzKSB7XG5cdFx0XHRwYWlyID0gcGFydHNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdGlmICggcGFpci5sZW5ndGggPiAxICkgeyBhcmdzW3BhaXJbMF0udHJpbSgpXSA9IHBhaXJbMV0udHJpbSgpOyB9XG5cdFx0fVxuXHRcdHJldHVybiBhcmdzO1xuXHR9LFxuXHRFcnJvcnM6IEVycm9yc0xpYixcblx0SGFuZGxlYmFyczogVGVtcGxhdGluZy5IYW5kbGViYXJzLFxuXHRQcm9taXNlOiBQcm9taXNlLFxuXHR1dWlkOiB1dWlkLFxuXHRnZXQ6IHhoci5nZXQsXG5cdHBvc3Q6IHhoci5wb3N0LFxuXHRUZW1wbGF0ZTogVGVtcGxhdGUsXG5cdGh0bWxFbmNvZGU6IGh0bWxFbmNvZGUsXG5cdGh0bWxEZWNvZGU6IGh0bWxEZWNvZGUsXG5cdF86IF8sXG5cdHJlcXVpcmU6IHV0aWxzLnJlcXVpcmVcbn1cblxuLy8gVG8gYmUgZGVwcmVjYXRlZFxubW9kdWxlLmV4cG9ydHMuZ2V0VGVtcGxhdGUgPSBtb2R1bGUuZXhwb3J0cy5sb2FkVGVtcGxhdGVcbiIsImNvbnN0IHtodG1sRW5jb2RlLCBodG1sRGVjb2RlfSA9IHJlcXVpcmUoJy4vaHRtbCcpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRlbWl0dGVyMicpLkV2ZW50RW1pdHRlcjI7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKVxuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ0JsdWVCaXJkJylcblxuLyoqXG4gKiBIYW5kbGViYXJzIHdyYXBwZXIgdG8gYWRkIGN1c3RvbSBmZWF0dXJlcyB0byBvdXIgdGVtcGxhdGVzXG4gKi9cbmNsYXNzIFRlbXBsYXRlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuXHRjb25zdHJ1Y3Rvcih0cGwsIGNhcnQpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fY2FydCA9IGNhcnQ7XG5cdFx0dGhpcy5fd2FpdEZvciA9IFtdO1xuXHRcdHRoaXMucmVzb3VyY2UgPSB0cGw7XG5cdH1cblxuXHRwcm9taXNlUmVhZHkoKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMucmVzb3VyY2UudGhlbigoKSA9PiB7XG5cdFx0XHRcdHJlc29sdmUodGhpcyk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9KVxuXHRcdH0pXG5cdH1cblxuXHR1cGRhdGVXYWl0Rm9yKHBybSkge1xuXHRcdHRoaXMuX3dhaXRGb3IucHVzaChwcm0pXG5cdH1cblxuXHRiZWdpblJlbmRlcihjb250ZXh0KSB7XG5cdFx0dmFyIHRwbCA9IHRoaXMucmVzb3VyY2UudmFsdWUoKTtcblx0XHR0aGlzLmVtaXQoJ3RwbC1zdGFydC1yZW5kZXInKTtcblxuXHRcdHJldHVybiB0cGwoT2JqZWN0LmFzc2lnbih7XG5cdFx0XHQkY2FydDogdGhpcy5fY2FydCxcblx0XHRcdCRwYXJlbnQ6IHRoaXMsXG5cdFx0XHQkdHBsOiB0aGlzXG5cdFx0fSxjb250ZXh0KSlcblx0fVxuXG5cdGVuZFJlbmRlcigpIHtcblx0XHRpZiAoIHRoaXMuX3dhaXRGb3IubGVuZ3RoID4gMCApIHtcblx0XHRcdHJldHVybiBQcm9taXNlLmpvaW4uYXBwbHkoUHJvbWlzZSwgdGhpcy5fd2FpdEZvcilcblx0XHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuX3dhaXRGb3IgPSBbXSAvLyByZXNldCB3YWl0IGxpc3Rcblx0XHRcdFx0XHR0aGlzLmVtaXQoJ3RwbC1lbmQtcmVuZGVyJyk7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KCd0cGwtcmVhZHknKVxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KVxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLmVtaXQoJ3RwbC1lbmQtcmVuZGVyJyk7XG5cdFx0XHR0aGlzLmVtaXQoJ3RwbC1yZWFkeScpXG5cdFx0XHRyZXNvbHZlKHRydWUpO1xuXHRcdH0pO1xuXG5cdH1cblxuXHRkZWxheWVkVHBsKGlkLCB0cGxfbmFtZSwgb2JqKSB7XG5cdFx0dmFyIGNhcnQgPSB0aGlzLl9jYXJ0O1xuXHRcdHZhciB0ID0gdGhpcy5fY2FydC50ZW1wbGF0ZSh0cGxfbmFtZSk7XG5cdFx0dmFyIHRwbF9wcm9taXNlID0gdFxuXHRcdFx0LnByb21pc2VSZWFkeSgpXG5cdFx0XHQudGhlbigodHBsKSA9PiB7XG5cdFx0XHRcdHZhciBodG1sID0gdHBsLmJlZ2luUmVuZGVyKG9iailcblx0XHRcdFx0dmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuXHRcdFx0XHRpZiAoIGNvbnRhaW5lciApIHtcblx0XHRcdFx0XHRjb250YWluZXIuaW5uZXJIVE1MID0gaHRtbFxuXHRcdFx0XHRcdGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImF3Yy1wbGFjZWhvbGRlciBsb2FkZWRcIlxuXG5cdFx0XHRcdFx0cmV0dXJuIHRwbC5lbmRSZW5kZXIoKS50aGVuKChyKSA9PiB7XG5cdFx0XHRcdFx0XHRjYXJ0LnVwZGF0ZVVJKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdG9iai4kcGFyZW50LnVwZGF0ZVdhaXRGb3IodHBsX3Byb21pc2UpXG5cdH1cblxuXHRpc0Z1bGZpbGxlZFBhc3N0aHJvdWdoKGRhdGEpIHtcblx0XHR2YXIgYmFzZSA9IHRoaXM7XG5cdFx0cmV0dXJuIChyZXN1bHQpID0+IHtcblx0XHRcdGlmICggYmFzZS5yZXNvdXJjZS5pc0Z1bGZpbGxlZCgpICkge1xuXHRcdFx0XHQvLyBpZiB0ZW1wbGF0ZSBpcyByZWFkeSBqdXN0IHBhc3MgYWxvbmcgcmVzdWx0c1xuXHRcdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gd2FpdCBmb3IgdGVtcGxhdGUgdG8gbG9hZFxuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XHRcdGJhc2UucmVzb3VyY2Vcblx0XHRcdFx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoZGF0YSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHQpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQuY2F0Y2goKGVycikgPT4geyByZWplY3QoZXJyKSB9KVxuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwic3ViXCIsIGZ1bmN0aW9uKCkge1xuXHRsZXQgcmVzdWx0ID0gYXJndW1lbnRzWzBdO1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRyZXN1bHQgLT0gYXJndW1lbnRzW2ldO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJhZGRcIiwgZnVuY3Rpb24gKCkge1xuXHRsZXQgcmVzdWx0ID0gYXJndW1lbnRzWzBdO1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRyZXN1bHQgKz0gYXJndW1lbnRzW2ldO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJtdWxcIiwgZnVuY3Rpb24gKCkge1xuXHRsZXQgcmVzdWx0ID0gYXJndW1lbnRzWzBdO1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRyZXN1bHQgKj0gYXJndW1lbnRzW2ldO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJkaXZcIiwgZnVuY3Rpb24gKCkge1xuXHRsZXQgcmVzdWx0ID0gYXJndW1lbnRzWzBdO1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRyZXN1bHQgLz0gYXJndW1lbnRzW2ldO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJtb2RcIiwgZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBzY29wZSkge1xuXHRyZXR1cm4gbGVmdCAlIHJpZ2h0O1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImRpZlBlcmNlbnRPZlwiLCBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIHNjb3BlKSB7XG5cdC8vIGV4OiAoZGlmUGVyY2VudE9mIDEwIDEwMCkgPSA5MCVcblx0cmV0dXJuICgocmlnaHQgLSBsZWZ0KSAqIDEwMCkgLyByaWdodDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJwZXJjZW50T2ZcIiwgZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBzY29wZSkge1xuXHQvLyBleDogKHBlcmNlbnRPZiAxMCAxMDApID0gMTAlXG5cdHJldHVybiAobGVmdCAqIDEwMCkgLyByaWdodDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJ0b0ZpeGVkXCIsIGZ1bmN0aW9uIChudW1iZXIsIGRlY2ltYWxzLCBzY29wZSkge1xuXHRyZXR1cm4gbnVtYmVyLnRvRml4ZWQoZGVjaW1hbHMpO1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcIm5vdFwiLCBmdW5jdGlvbih2YWx1ZSwgc2NvcGUpIHtcblx0cmV0dXJuIHZhbHVlP2ZhbHNlOnRydWU7XG59KVxuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiZXFcIiwgZnVuY3Rpb24obGVmdCwgcmlnaHQsIHNjb3BlKSB7XG5cdHJldHVybiBsZWZ0ID09IHJpZ2h0O1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcIm5lXCIsIGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBzY29wZSkge1xuXHRyZXR1cm4gbGVmdCAhPSByaWdodDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJndFwiLCBmdW5jdGlvbihsZWZ0LCByaWdodCwgc2NvcGUpIHtcblx0cmV0dXJuIGxlZnQgPiByaWdodDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJsdFwiLCBmdW5jdGlvbihsZWZ0LCByaWdodCwgc2NvcGUpIHtcblx0cmV0dXJuIGxlZnQgPCByaWdodDtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJnZVwiLCBmdW5jdGlvbihsZWZ0LCByaWdodCwgc2NvcGUpIHtcblx0cmV0dXJuIGxlZnQgPj0gcmlnaHQ7XG59KVxuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwibGVcIiwgZnVuY3Rpb24obGVmdCwgcmlnaHQsIHNjb3BlKSB7XG5cdHJldHVybiBsZWZ0IDw9IHJpZ2h0O1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcIm9yXCIsIGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBzY29wZSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblxuXHRcdGlmICggdHlwZW9mIGFyZ3VtZW50c1tpXSAhPSBcImZ1bmN0aW9uXCIgJiYgYXJndW1lbnRzW2ldICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50c1tpXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImFuZFwiLCBmdW5jdGlvbihsZWZ0LCByaWdodCwgc2NvcGUpIHtcblx0cmV0dXJuIGxlZnQgJiYgcmlnaHQ7XG59KVxuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwidGVtcGxhdGVcIiwgZnVuY3Rpb24odHBsX25hbWUsIG9iaiwgc2NvcGUpIHtcblx0dmFyIGlkID0gYXdjLnV1aWQoKVxuXHRvYmouJGNhcnQgPSBzY29wZS5kYXRhLnJvb3QuJGNhcnQ7XG5cdG9iai4kcGFyZW50ID0gc2NvcGUuZGF0YS5yb290LiRwYXJlbnQ7XG5cdG9iai4kdHBsID0gc2NvcGUuZGF0YS5yb290LiR0cGw7XG5cdG9iai4kdHBsLmRlbGF5ZWRUcGwoaWQsIHRwbF9uYW1lLCBvYmopXG5cdHJldHVybiAnPGRpdiBpZD1cIicraWQrJ1wiIGNsYXNzPVwiYXdjLXBsYWNlaG9sZGVyIGxvYWRpbmdcIj48L2Rpdj4nO1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImpzb25cIiwgZnVuY3Rpb24odmFsdWUsIHNjb3BlKSB7XG5cdHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2VzY2FwZScsIGZ1bmN0aW9uKHZhbHVlLCBzY29wZSkge1xuXHRpZiAoIHZhbHVlICkge1xuXHRcdHJldHVybiB2YWx1ZS5yZXBsYWNlKC8oWydcIl0pL2csICdcXFxcJDEnKTtcblx0fVxuXG5cdHJldHVybiBcIlwiO1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaHRtbEVuY29kZScsIGZ1bmN0aW9uKHZhbHVlLCBzY29wZSkge1xuXHRyZXR1cm4gaHRtbEVuY29kZSh2YWx1ZSk7XG59KVxuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdodG1sRGVjb2RlJywgZnVuY3Rpb24odmFsdWUsIHNjb3BlKSB7XG5cdHJldHVybiBodG1sRGVjb2RlKHZhbHVlKTtcbn0pXG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2Nzc0VzY2FwZScsIGZ1bmN0aW9uKHZhbHVlLCBzY29wZSkge1xuXHRpZiAoIHZhbHVlICkge1xuXHRcdHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXmEtejAtOVxcLV0vZ2ksICdfJylcblx0fVxuXG5cdHJldHVybiBcIlwiO1xufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignZWFjaEV2ZW4nLCBmdW5jdGlvbihhcnIsIHNjb3BlKSB7XG5cdGlmICggYXJyICYmIGFyci5sZW5ndGggPiAwICkge1xuXHRcdHZhciBidWZmZXIgPSBcIlwiO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYXJyW2ldXG5cdFx0XHRpdGVtLiRpbmRleCA9IGlcblx0XHRcdGl0ZW0uJGlzX2ZpcnN0ID0gaT09MD8xOjA7XG5cdFx0XHRpdGVtLiRpc19ldmVuID0gKGkgJSAyKSA9PSAwXG5cdFx0XHRidWZmZXIgKz0gc2NvcGUuZm4oaXRlbSlcblx0XHR9XG5cdFx0cmV0dXJuIGJ1ZmZlcjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2NvcGUuaW52ZXJzZSh0aGlzKVxuXHR9XG59KVxuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpc19ldmVuJywgZnVuY3Rpb24odmFsdWUsIHNjb3BlKSB7XG5cdGlmICggKHZhbHVlICUgMikgPT0gMCApIHtcblx0XHRyZXR1cm4gc2NvcGUuZm4odGhpcylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2NvcGUuaW52ZXJzZSh0aGlzKTtcblx0fVxufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaXNfb2RkJywgZnVuY3Rpb24odmFsdWUsIHNjb3BlKSB7XG5cdGlmICggKHZhbHVlICUgMikgPT0gMSApIHtcblx0XHRyZXR1cm4gc2NvcGUuZm4odGhpcylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc2NvcGUuaW52ZXJzZSh0aGlzKTtcblx0fVxufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignY3VycmVuY3knLCBmdW5jdGlvbih2YWx1ZSwgc2NvcGUpIHtcblxuXHR2YXIgY29udGV4dCA9IHNjb3BlLmRhdGEucm9vdDtcblxuXHRpZiAoIGNvbnRleHQuJGNhcnQgPT09IHVuZGVmaW5lZCApIHtcblx0XHRkZWJ1Zy5lcnJvcignQ29udGV4dHM6ICcsIGNvbnRleHQsIHRoaXMpXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYXJ0IG5vdCBmb3VuZCBpbiBjdXJyZW50IGNvbnRleHQuJylcblx0fVxuXHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0cmV0dXJuIGNvbnRleHQuJGNhcnQuc3RvcmVBZGFwdGVyLmZvcm1hdEN1cnJlbmN5KHZhbHVlKVxufSlcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImpzaW5jbHVkZVwiLCBmdW5jdGlvbihzcmMsIHNjb3BlKSB7XG5cdHV0aWxzLnJlcXVpcmUoc3JjKTtcblx0cmV0dXJuICcnO1xufSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdEhhbmRsZWJhcnM6IEhhbmRsZWJhcnMsXG5cdFRlbXBsYXRlOiBUZW1wbGF0ZVxufVxuIl19